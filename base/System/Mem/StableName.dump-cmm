
==================== Output Cmm ====================
2018-03-16 16:07:15.22759448 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:15.228889707 UTC

[section ""data" . System.Mem.StableName.$fEqStableName_$c==_closure" {
     System.Mem.StableName.$fEqStableName_$c==_closure:
         const System.Mem.StableName.$fEqStableName_$c==_info;
 },
 System.Mem.StableName.$fEqStableName_$c==_entry() //  [R2, R3]
         { info_tbl: [(ccmcz,
                       label: System.Mem.StableName.$fEqStableName_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmcz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccmcD; else goto ccmcE;
       ccmcD: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Mem.StableName.$fEqStableName_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccmcE: // global
           I64[Sp - 16] = block_ccmcw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucmd1; else goto ccmcx;
       ucmd1: // global
           call _ccmcw(R1) args: 0, res: 0, upd: 0;
       ccmcx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmcw() //  [R1]
         { info_tbl: [(ccmcw,
                       label: block_ccmcw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmcw: // global
           I64[Sp] = block_ccmcC_info;
           _scmc0::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scmc0::P64;
           if (R1 & 7 != 0) goto ucmd0; else goto ccmcG;
       ucmd0: // global
           call _ccmcC(R1) args: 0, res: 0, upd: 0;
       ccmcG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmcC() //  [R1]
         { info_tbl: [(ccmcC,
                       label: block_ccmcC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmcC: // global
           if (I64[P64[Sp + 8] + 8] == I64[P64[R1 + 7] + 8]) goto ccmcQ; else goto ccmcW;
       ccmcQ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccmcW: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.230805689 UTC

[section ""data" . System.Mem.StableName.$fEqStableName_$c/=_closure" {
     System.Mem.StableName.$fEqStableName_$c/=_closure:
         const System.Mem.StableName.$fEqStableName_$c/=_info;
 },
 System.Mem.StableName.$fEqStableName_$c/=_entry() //  [R2, R3]
         { info_tbl: [(ccmd9,
                       label: System.Mem.StableName.$fEqStableName_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmd9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccmdd; else goto ccmde;
       ccmdd: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Mem.StableName.$fEqStableName_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccmde: // global
           I64[Sp - 16] = block_ccmd6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucmdB; else goto ccmd7;
       ucmdB: // global
           call _ccmd6(R1) args: 0, res: 0, upd: 0;
       ccmd7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmd6() //  [R1]
         { info_tbl: [(ccmd6,
                       label: block_ccmd6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmd6: // global
           I64[Sp] = block_ccmdc_info;
           _scmc7::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scmc7::P64;
           if (R1 & 7 != 0) goto ucmdA; else goto ccmdg;
       ucmdA: // global
           call _ccmdc(R1) args: 0, res: 0, upd: 0;
       ccmdg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmdc() //  [R1]
         { info_tbl: [(ccmdc,
                       label: block_ccmdc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmdc: // global
           if (I64[P64[Sp + 8] + 8] == I64[P64[R1 + 7] + 8]) goto ccmdq; else goto ccmdw;
       ccmdq: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccmdw: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.232167018 UTC

[section ""data" . System.Mem.StableName.$fEqStableName_closure" {
     System.Mem.StableName.$fEqStableName_closure:
         const GHC.Classes.C:Eq_con_info;
         const System.Mem.StableName.$fEqStableName_$c==_closure+2;
         const System.Mem.StableName.$fEqStableName_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.233049819 UTC

[section ""data" . System.Mem.StableName.makeStableName1_closure" {
     System.Mem.StableName.makeStableName1_closure:
         const System.Mem.StableName.makeStableName1_info;
 },
 System.Mem.StableName.makeStableName1_entry() //  [R2]
         { info_tbl: [(ccmdJ,
                       label: System.Mem.StableName.makeStableName1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmdJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccmdK; else goto ccmdL;
       ccmdK: // global
           R2 = R2;
           R1 = System.Mem.StableName.makeStableName1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccmdL: // global
           I64[Sp - 8] = block_ccmdG_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_makeStableName#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmdG() //  [R1]
         { info_tbl: [(ccmdG,
                       label: block_ccmdG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmdG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccmdO; else goto ccmdN;
       ccmdO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccmdN: // global
           I64[Hp - 8] = System.Mem.StableName.StableName_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.234409751 UTC

[section ""data" . System.Mem.StableName.makeStableName_closure" {
     System.Mem.StableName.makeStableName_closure:
         const System.Mem.StableName.makeStableName_info;
 },
 System.Mem.StableName.makeStableName_entry() //  [R2]
         { info_tbl: [(ccmdT,
                       label: System.Mem.StableName.makeStableName_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmdT: // global
           R2 = R2;
           call System.Mem.StableName.makeStableName1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.235440704 UTC

[section ""data" . System.Mem.StableName.hashStableName_closure" {
     System.Mem.StableName.hashStableName_closure:
         const System.Mem.StableName.hashStableName_info;
 },
 System.Mem.StableName.hashStableName_entry() //  [R2]
         { info_tbl: [(ccme3,
                       label: System.Mem.StableName.hashStableName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccme3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccmea; else goto ccmeb;
       ccmea: // global
           R2 = R2;
           R1 = System.Mem.StableName.hashStableName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccmeb: // global
           I64[Sp - 8] = block_ccme0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucmef; else goto ccme1;
       ucmef: // global
           call _ccme0(R1) args: 0, res: 0, upd: 0;
       ccme1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccme0() //  [R1]
         { info_tbl: [(ccme0,
                       label: block_ccme0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccme0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccmee; else goto ccmed;
       ccmee: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccmed: // global
           _scmck::I64 = I64[P64[R1 + 7] + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _scmck::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.236988331 UTC

[section ""data" . System.Mem.StableName.eqStableName_closure" {
     System.Mem.StableName.eqStableName_closure:
         const System.Mem.StableName.eqStableName_info;
 },
 System.Mem.StableName.eqStableName_entry() //  [R2, R3]
         { info_tbl: [(ccmen,
                       label: System.Mem.StableName.eqStableName_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmen: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccmer; else goto ccmes;
       ccmer: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Mem.StableName.eqStableName_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccmes: // global
           I64[Sp - 16] = block_ccmek_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucmeP; else goto ccmel;
       ucmeP: // global
           call _ccmek(R1) args: 0, res: 0, upd: 0;
       ccmel: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmek() //  [R1]
         { info_tbl: [(ccmek,
                       label: block_ccmek_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmek: // global
           I64[Sp] = block_ccmeq_info;
           _scmco::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scmco::P64;
           if (R1 & 7 != 0) goto ucmeO; else goto ccmeu;
       ucmeO: // global
           call _ccmeq(R1) args: 0, res: 0, upd: 0;
       ccmeu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmeq() //  [R1]
         { info_tbl: [(ccmeq,
                       label: block_ccmeq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmeq: // global
           if (I64[P64[Sp + 8] + 8] == I64[P64[R1 + 7] + 8]) goto ccmeE; else goto ccmeK;
       ccmeE: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccmeK: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.238391011 UTC

[section ""cstring" . System.Mem.StableName.$trModule4_bytes" {
     System.Mem.StableName.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.239015301 UTC

[section ""data" . System.Mem.StableName.$trModule3_closure" {
     System.Mem.StableName.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Mem.StableName.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.239656074 UTC

[section ""cstring" . System.Mem.StableName.$trModule2_bytes" {
     System.Mem.StableName.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,77,101,109,46,83,116,97,98,108,101,78,97,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.240288259 UTC

[section ""data" . System.Mem.StableName.$trModule1_closure" {
     System.Mem.StableName.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Mem.StableName.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.240979192 UTC

[section ""data" . System.Mem.StableName.$trModule_closure" {
     System.Mem.StableName.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Mem.StableName.$trModule3_closure+1;
         const System.Mem.StableName.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.241663748 UTC

[section ""data" . $krep_rcmbS_closure" {
     $krep_rcmbS_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.242296746 UTC

[section ""data" . $krep1_rcmbT_closure" {
     $krep1_rcmbT_closure:
         const :_con_info;
         const $krep_rcmbS_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.24294123 UTC

[section ""data" . $krep2_rcmbU_closure" {
     $krep2_rcmbU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcStableName#_closure;
         const $krep1_rcmbT_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.243589145 UTC

[section ""cstring" . System.Mem.StableName.$tcStableName2_bytes" {
     System.Mem.StableName.$tcStableName2_bytes:
         I8[] [83,116,97,98,108,101,78,97,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.244164252 UTC

[section ""data" . System.Mem.StableName.$tcStableName1_closure" {
     System.Mem.StableName.$tcStableName1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Mem.StableName.$tcStableName2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.244829029 UTC

[section ""data" . System.Mem.StableName.$tcStableName_closure" {
     System.Mem.StableName.$tcStableName_closure:
         const GHC.Types.TyCon_con_info;
         const System.Mem.StableName.$trModule_closure+1;
         const System.Mem.StableName.$tcStableName1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 9283215246123464151;
         const 14241671522388568561;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.24551099 UTC

[section ""data" . $krep3_rcmbV_closure" {
     $krep3_rcmbV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Mem.StableName.$tcStableName_closure+1;
         const $krep1_rcmbT_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.246128657 UTC

[section ""data" . System.Mem.StableName.$tc'StableName1_closure" {
     System.Mem.StableName.$tc'StableName1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcmbU_closure+1;
         const $krep3_rcmbV_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.246779201 UTC

[section ""cstring" . System.Mem.StableName.$tc'StableName3_bytes" {
     System.Mem.StableName.$tc'StableName3_bytes:
         I8[] [39,83,116,97,98,108,101,78,97,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.247395339 UTC

[section ""data" . System.Mem.StableName.$tc'StableName2_closure" {
     System.Mem.StableName.$tc'StableName2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Mem.StableName.$tc'StableName3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.248013826 UTC

[section ""data" . System.Mem.StableName.$tc'StableName_closure" {
     System.Mem.StableName.$tc'StableName_closure:
         const GHC.Types.TyCon_con_info;
         const System.Mem.StableName.$trModule_closure+1;
         const System.Mem.StableName.$tc'StableName2_closure+1;
         const System.Mem.StableName.$tc'StableName1_closure+4;
         const 11629501114032097064;
         const 10388293122134847073;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.24897415 UTC

[section ""data" . System.Mem.StableName.StableName_closure" {
     System.Mem.StableName.StableName_closure:
         const System.Mem.StableName.StableName_info;
 },
 System.Mem.StableName.StableName_entry() //  [R2]
         { info_tbl: [(ccmeV,
                       label: System.Mem.StableName.StableName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmeV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccmeZ; else goto ccmeY;
       ccmeZ: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Mem.StableName.StableName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccmeY: // global
           I64[Hp - 8] = System.Mem.StableName.StableName_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.249977475 UTC

[System.Mem.StableName.StableName_con_entry() //  [R1]
         { info_tbl: [(ccmf0,
                       label: System.Mem.StableName.StableName_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,77,101,109,46,83,116,97,98,108,101,78,97,109,101,46,83,116,97,98,108,101,78,97,109,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmf0: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.250699184 UTC

[section ""relreadonly" . Scmf1_srt" { Scmf1_srt:
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.251317116 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:15.25235883 UTC

[section ""data" . System.Mem.StableName.$fEqStableName_$c==_closure" {
     System.Mem.StableName.$fEqStableName_$c==_closure:
         const System.Mem.StableName.$fEqStableName_$c==_info;
 },
 System.Mem.StableName.$fEqStableName_$c==_entry() //  [R2, R3]
         { info_tbl: [(ccmf9,
                       label: System.Mem.StableName.$fEqStableName_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmf9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccmfd; else goto ccmfe;
       ccmfd: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Mem.StableName.$fEqStableName_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccmfe: // global
           I64[Sp - 16] = block_ccmf6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucmfB; else goto ccmf7;
       ucmfB: // global
           call _ccmf6(R1) args: 0, res: 0, upd: 0;
       ccmf7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmf6() //  [R1]
         { info_tbl: [(ccmf6,
                       label: block_ccmf6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmf6: // global
           I64[Sp] = block_ccmfc_info;
           _scmc0::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scmc0::P64;
           if (R1 & 7 != 0) goto ucmfA; else goto ccmfg;
       ucmfA: // global
           call _ccmfc(R1) args: 0, res: 0, upd: 0;
       ccmfg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmfc() //  [R1]
         { info_tbl: [(ccmfc,
                       label: block_ccmfc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmfc: // global
           if (I64[P64[Sp + 8] + 8] == I64[P64[R1 + 7] + 8]) goto ccmfq; else goto ccmfw;
       ccmfq: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccmfw: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.254211448 UTC

[section ""data" . System.Mem.StableName.$fEqStableName_$c/=_closure" {
     System.Mem.StableName.$fEqStableName_$c/=_closure:
         const System.Mem.StableName.$fEqStableName_$c/=_info;
 },
 System.Mem.StableName.$fEqStableName_$c/=_entry() //  [R2, R3]
         { info_tbl: [(ccmfJ,
                       label: System.Mem.StableName.$fEqStableName_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmfJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccmfN; else goto ccmfO;
       ccmfN: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Mem.StableName.$fEqStableName_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccmfO: // global
           I64[Sp - 16] = block_ccmfG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucmgb; else goto ccmfH;
       ucmgb: // global
           call _ccmfG(R1) args: 0, res: 0, upd: 0;
       ccmfH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmfG() //  [R1]
         { info_tbl: [(ccmfG,
                       label: block_ccmfG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmfG: // global
           I64[Sp] = block_ccmfM_info;
           _scmc7::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scmc7::P64;
           if (R1 & 7 != 0) goto ucmga; else goto ccmfQ;
       ucmga: // global
           call _ccmfM(R1) args: 0, res: 0, upd: 0;
       ccmfQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmfM() //  [R1]
         { info_tbl: [(ccmfM,
                       label: block_ccmfM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmfM: // global
           if (I64[P64[Sp + 8] + 8] == I64[P64[R1 + 7] + 8]) goto ccmg0; else goto ccmg6;
       ccmg0: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccmg6: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.255609349 UTC

[section ""data" . System.Mem.StableName.$fEqStableName_closure" {
     System.Mem.StableName.$fEqStableName_closure:
         const GHC.Classes.C:Eq_con_info;
         const System.Mem.StableName.$fEqStableName_$c==_closure+2;
         const System.Mem.StableName.$fEqStableName_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.256555773 UTC

[section ""data" . System.Mem.StableName.makeStableName1_closure" {
     System.Mem.StableName.makeStableName1_closure:
         const System.Mem.StableName.makeStableName1_info;
 },
 System.Mem.StableName.makeStableName1_entry() //  [R2]
         { info_tbl: [(ccmgj,
                       label: System.Mem.StableName.makeStableName1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmgj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccmgk; else goto ccmgl;
       ccmgk: // global
           R2 = R2;
           R1 = System.Mem.StableName.makeStableName1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccmgl: // global
           I64[Sp - 8] = block_ccmgg_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_makeStableName#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmgg() //  [R1]
         { info_tbl: [(ccmgg,
                       label: block_ccmgg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmgg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccmgo; else goto ccmgn;
       ccmgo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccmgn: // global
           I64[Hp - 8] = System.Mem.StableName.StableName_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.257980681 UTC

[section ""data" . System.Mem.StableName.makeStableName_closure" {
     System.Mem.StableName.makeStableName_closure:
         const System.Mem.StableName.makeStableName_info;
 },
 System.Mem.StableName.makeStableName_entry() //  [R2]
         { info_tbl: [(ccmgt,
                       label: System.Mem.StableName.makeStableName_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmgt: // global
           R2 = R2;
           call System.Mem.StableName.makeStableName1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.25909224 UTC

[section ""data" . System.Mem.StableName.hashStableName_closure" {
     System.Mem.StableName.hashStableName_closure:
         const System.Mem.StableName.hashStableName_info;
 },
 System.Mem.StableName.hashStableName_entry() //  [R2]
         { info_tbl: [(ccmgD,
                       label: System.Mem.StableName.hashStableName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmgD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccmgK; else goto ccmgL;
       ccmgK: // global
           R2 = R2;
           R1 = System.Mem.StableName.hashStableName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccmgL: // global
           I64[Sp - 8] = block_ccmgA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucmgP; else goto ccmgB;
       ucmgP: // global
           call _ccmgA(R1) args: 0, res: 0, upd: 0;
       ccmgB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmgA() //  [R1]
         { info_tbl: [(ccmgA,
                       label: block_ccmgA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmgA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccmgO; else goto ccmgN;
       ccmgO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccmgN: // global
           _scmck::I64 = I64[P64[R1 + 7] + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _scmck::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.260670802 UTC

[section ""data" . System.Mem.StableName.eqStableName_closure" {
     System.Mem.StableName.eqStableName_closure:
         const System.Mem.StableName.eqStableName_info;
 },
 System.Mem.StableName.eqStableName_entry() //  [R2, R3]
         { info_tbl: [(ccmgX,
                       label: System.Mem.StableName.eqStableName_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmgX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccmh1; else goto ccmh2;
       ccmh1: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Mem.StableName.eqStableName_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccmh2: // global
           I64[Sp - 16] = block_ccmgU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucmhp; else goto ccmgV;
       ucmhp: // global
           call _ccmgU(R1) args: 0, res: 0, upd: 0;
       ccmgV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmgU() //  [R1]
         { info_tbl: [(ccmgU,
                       label: block_ccmgU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmgU: // global
           I64[Sp] = block_ccmh0_info;
           _scmco::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scmco::P64;
           if (R1 & 7 != 0) goto ucmho; else goto ccmh4;
       ucmho: // global
           call _ccmh0(R1) args: 0, res: 0, upd: 0;
       ccmh4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmh0() //  [R1]
         { info_tbl: [(ccmh0,
                       label: block_ccmh0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmh0: // global
           if (I64[P64[Sp + 8] + 8] == I64[P64[R1 + 7] + 8]) goto ccmhe; else goto ccmhk;
       ccmhe: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccmhk: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.262130989 UTC

[section ""cstring" . System.Mem.StableName.$trModule4_bytes" {
     System.Mem.StableName.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.262909776 UTC

[section ""data" . System.Mem.StableName.$trModule3_closure" {
     System.Mem.StableName.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Mem.StableName.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.263613506 UTC

[section ""cstring" . System.Mem.StableName.$trModule2_bytes" {
     System.Mem.StableName.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,77,101,109,46,83,116,97,98,108,101,78,97,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.26424218 UTC

[section ""data" . System.Mem.StableName.$trModule1_closure" {
     System.Mem.StableName.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Mem.StableName.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.264843645 UTC

[section ""data" . System.Mem.StableName.$trModule_closure" {
     System.Mem.StableName.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Mem.StableName.$trModule3_closure+1;
         const System.Mem.StableName.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.266610076 UTC

[section ""data" . $krep_rcmbS_closure" {
     $krep_rcmbS_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.267199431 UTC

[section ""data" . $krep1_rcmbT_closure" {
     $krep1_rcmbT_closure:
         const :_con_info;
         const $krep_rcmbS_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.267863803 UTC

[section ""data" . $krep2_rcmbU_closure" {
     $krep2_rcmbU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcStableName#_closure;
         const $krep1_rcmbT_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.268437183 UTC

[section ""cstring" . System.Mem.StableName.$tcStableName2_bytes" {
     System.Mem.StableName.$tcStableName2_bytes:
         I8[] [83,116,97,98,108,101,78,97,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.269000813 UTC

[section ""data" . System.Mem.StableName.$tcStableName1_closure" {
     System.Mem.StableName.$tcStableName1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Mem.StableName.$tcStableName2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.269620084 UTC

[section ""data" . System.Mem.StableName.$tcStableName_closure" {
     System.Mem.StableName.$tcStableName_closure:
         const GHC.Types.TyCon_con_info;
         const System.Mem.StableName.$trModule_closure+1;
         const System.Mem.StableName.$tcStableName1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 9283215246123464151;
         const 14241671522388568561;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.270269209 UTC

[section ""data" . $krep3_rcmbV_closure" {
     $krep3_rcmbV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Mem.StableName.$tcStableName_closure+1;
         const $krep1_rcmbT_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.270858957 UTC

[section ""data" . System.Mem.StableName.$tc'StableName1_closure" {
     System.Mem.StableName.$tc'StableName1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcmbU_closure+1;
         const $krep3_rcmbV_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.271471031 UTC

[section ""cstring" . System.Mem.StableName.$tc'StableName3_bytes" {
     System.Mem.StableName.$tc'StableName3_bytes:
         I8[] [39,83,116,97,98,108,101,78,97,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.272022266 UTC

[section ""data" . System.Mem.StableName.$tc'StableName2_closure" {
     System.Mem.StableName.$tc'StableName2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Mem.StableName.$tc'StableName3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.272641569 UTC

[section ""data" . System.Mem.StableName.$tc'StableName_closure" {
     System.Mem.StableName.$tc'StableName_closure:
         const GHC.Types.TyCon_con_info;
         const System.Mem.StableName.$trModule_closure+1;
         const System.Mem.StableName.$tc'StableName2_closure+1;
         const System.Mem.StableName.$tc'StableName1_closure+4;
         const 11629501114032097064;
         const 10388293122134847073;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.273598792 UTC

[section ""data" . System.Mem.StableName.StableName_closure" {
     System.Mem.StableName.StableName_closure:
         const System.Mem.StableName.StableName_info;
 },
 System.Mem.StableName.StableName_entry() //  [R2]
         { info_tbl: [(ccmhv,
                       label: System.Mem.StableName.StableName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmhv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccmhz; else goto ccmhy;
       ccmhz: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Mem.StableName.StableName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccmhy: // global
           I64[Hp - 8] = System.Mem.StableName.StableName_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.274517492 UTC

[System.Mem.StableName.StableName_con_entry() //  [R1]
         { info_tbl: [(ccmhA,
                       label: System.Mem.StableName.StableName_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,77,101,109,46,83,116,97,98,108,101,78,97,109,101,46,83,116,97,98,108,101,78,97,109,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmhA: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.275222514 UTC

[section ""relreadonly" . Scmf1_srt" { Scmf1_srt:
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.276023369 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:15.277751567 UTC

[section ""data" . System.Mem.StableName.$fEqStableName_$c==_closure" {
     System.Mem.StableName.$fEqStableName_$c==_closure:
         const System.Mem.StableName.$fEqStableName_$c==_info;
 },
 System.Mem.StableName.$fEqStableName_$c==_entry() //  [R2, R3]
         { info_tbl: [(ccmhJ,
                       label: System.Mem.StableName.$fEqStableName_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmhJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccmhN; else goto ccmhO;
       ccmhN: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Mem.StableName.$fEqStableName_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccmhO: // global
           I64[Sp - 16] = block_ccmhG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucmib; else goto ccmhH;
       ucmib: // global
           call _ccmhG(R1) args: 0, res: 0, upd: 0;
       ccmhH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmhG() //  [R1]
         { info_tbl: [(ccmhG,
                       label: block_ccmhG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmhG: // global
           I64[Sp] = block_ccmhM_info;
           _scmc0::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scmc0::P64;
           if (R1 & 7 != 0) goto ucmia; else goto ccmhQ;
       ucmia: // global
           call _ccmhM(R1) args: 0, res: 0, upd: 0;
       ccmhQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmhM() //  [R1]
         { info_tbl: [(ccmhM,
                       label: block_ccmhM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmhM: // global
           if (I64[P64[Sp + 8] + 8] == I64[P64[R1 + 7] + 8]) goto ccmi0; else goto ccmi6;
       ccmi0: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccmi6: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.285854428 UTC

[section ""data" . System.Mem.StableName.$fEqStableName_$c/=_closure" {
     System.Mem.StableName.$fEqStableName_$c/=_closure:
         const System.Mem.StableName.$fEqStableName_$c/=_info;
 },
 System.Mem.StableName.$fEqStableName_$c/=_entry() //  [R2, R3]
         { info_tbl: [(ccmiB,
                       label: System.Mem.StableName.$fEqStableName_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmiB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccmiF; else goto ccmiG;
       ccmiF: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Mem.StableName.$fEqStableName_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccmiG: // global
           I64[Sp - 16] = block_ccmiy_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucmj3; else goto ccmiz;
       ucmj3: // global
           call _ccmiy(R1) args: 0, res: 0, upd: 0;
       ccmiz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmiy() //  [R1]
         { info_tbl: [(ccmiy,
                       label: block_ccmiy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmiy: // global
           I64[Sp] = block_ccmiE_info;
           _scmc7::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scmc7::P64;
           if (R1 & 7 != 0) goto ucmj2; else goto ccmiI;
       ucmj2: // global
           call _ccmiE(R1) args: 0, res: 0, upd: 0;
       ccmiI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmiE() //  [R1]
         { info_tbl: [(ccmiE,
                       label: block_ccmiE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmiE: // global
           if (I64[P64[Sp + 8] + 8] == I64[P64[R1 + 7] + 8]) goto ccmiS; else goto ccmiY;
       ccmiS: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccmiY: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.293540948 UTC

[section ""data" . System.Mem.StableName.$fEqStableName_closure" {
     System.Mem.StableName.$fEqStableName_closure:
         const GHC.Classes.C:Eq_con_info;
         const System.Mem.StableName.$fEqStableName_$c==_closure+2;
         const System.Mem.StableName.$fEqStableName_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.29572502 UTC

[section ""data" . System.Mem.StableName.makeStableName1_closure" {
     System.Mem.StableName.makeStableName1_closure:
         const System.Mem.StableName.makeStableName1_info;
 },
 System.Mem.StableName.makeStableName1_entry() //  [R2]
         { info_tbl: [(ccmju,
                       label: System.Mem.StableName.makeStableName1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmju: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccmjv; else goto ccmjw;
       ccmjv: // global
           R2 = R2;
           R1 = System.Mem.StableName.makeStableName1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccmjw: // global
           I64[Sp - 8] = block_ccmjr_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_makeStableName#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmjr() //  [R1]
         { info_tbl: [(ccmjr,
                       label: block_ccmjr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmjr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccmjz; else goto ccmjy;
       ccmjz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccmjy: // global
           I64[Hp - 8] = System.Mem.StableName.StableName_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.302666162 UTC

[section ""data" . System.Mem.StableName.makeStableName_closure" {
     System.Mem.StableName.makeStableName_closure:
         const System.Mem.StableName.makeStableName_info;
 },
 System.Mem.StableName.makeStableName_entry() //  [R2]
         { info_tbl: [(ccmjN,
                       label: System.Mem.StableName.makeStableName_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmjN: // global
           R2 = R2;
           call System.Mem.StableName.makeStableName1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.306161297 UTC

[section ""data" . System.Mem.StableName.hashStableName_closure" {
     System.Mem.StableName.hashStableName_closure:
         const System.Mem.StableName.hashStableName_info;
 },
 System.Mem.StableName.hashStableName_entry() //  [R2]
         { info_tbl: [(ccmk1,
                       label: System.Mem.StableName.hashStableName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmk1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccmk8; else goto ccmk9;
       ccmk8: // global
           R2 = R2;
           R1 = System.Mem.StableName.hashStableName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccmk9: // global
           I64[Sp - 8] = block_ccmjY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucmkd; else goto ccmjZ;
       ucmkd: // global
           call _ccmjY(R1) args: 0, res: 0, upd: 0;
       ccmjZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmjY() //  [R1]
         { info_tbl: [(ccmjY,
                       label: block_ccmjY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmjY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccmkc; else goto ccmkb;
       ccmkc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccmkb: // global
           _scmck::I64 = I64[P64[R1 + 7] + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _scmck::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.312164384 UTC

[section ""data" . System.Mem.StableName.eqStableName_closure" {
     System.Mem.StableName.eqStableName_closure:
         const System.Mem.StableName.eqStableName_info;
 },
 System.Mem.StableName.eqStableName_entry() //  [R2, R3]
         { info_tbl: [(ccmkw,
                       label: System.Mem.StableName.eqStableName_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmkw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccmkA; else goto ccmkB;
       ccmkA: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Mem.StableName.eqStableName_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccmkB: // global
           I64[Sp - 16] = block_ccmkt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucmkY; else goto ccmku;
       ucmkY: // global
           call _ccmkt(R1) args: 0, res: 0, upd: 0;
       ccmku: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmkt() //  [R1]
         { info_tbl: [(ccmkt,
                       label: block_ccmkt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmkt: // global
           I64[Sp] = block_ccmkz_info;
           _scmco::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scmco::P64;
           if (R1 & 7 != 0) goto ucmkX; else goto ccmkD;
       ucmkX: // global
           call _ccmkz(R1) args: 0, res: 0, upd: 0;
       ccmkD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmkz() //  [R1]
         { info_tbl: [(ccmkz,
                       label: block_ccmkz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmkz: // global
           if (I64[P64[Sp + 8] + 8] == I64[P64[R1 + 7] + 8]) goto ccmkN; else goto ccmkT;
       ccmkN: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccmkT: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.319703929 UTC

[section ""cstring" . System.Mem.StableName.$trModule4_bytes" {
     System.Mem.StableName.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.321733062 UTC

[section ""data" . System.Mem.StableName.$trModule3_closure" {
     System.Mem.StableName.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Mem.StableName.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.323456478 UTC

[section ""cstring" . System.Mem.StableName.$trModule2_bytes" {
     System.Mem.StableName.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,77,101,109,46,83,116,97,98,108,101,78,97,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.32521387 UTC

[section ""data" . System.Mem.StableName.$trModule1_closure" {
     System.Mem.StableName.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Mem.StableName.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.32699818 UTC

[section ""data" . System.Mem.StableName.$trModule_closure" {
     System.Mem.StableName.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Mem.StableName.$trModule3_closure+1;
         const System.Mem.StableName.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.328744983 UTC

[section ""data" . $krep_rcmbS_closure" {
     $krep_rcmbS_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.330807376 UTC

[section ""data" . $krep1_rcmbT_closure" {
     $krep1_rcmbT_closure:
         const :_con_info;
         const $krep_rcmbS_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.333595313 UTC

[section ""data" . $krep2_rcmbU_closure" {
     $krep2_rcmbU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcStableName#_closure;
         const $krep1_rcmbT_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.335490585 UTC

[section ""cstring" . System.Mem.StableName.$tcStableName2_bytes" {
     System.Mem.StableName.$tcStableName2_bytes:
         I8[] [83,116,97,98,108,101,78,97,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.337387968 UTC

[section ""data" . System.Mem.StableName.$tcStableName1_closure" {
     System.Mem.StableName.$tcStableName1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Mem.StableName.$tcStableName2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.339276922 UTC

[section ""data" . System.Mem.StableName.$tcStableName_closure" {
     System.Mem.StableName.$tcStableName_closure:
         const GHC.Types.TyCon_con_info;
         const System.Mem.StableName.$trModule_closure+1;
         const System.Mem.StableName.$tcStableName1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 9283215246123464151;
         const 14241671522388568561;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.34137715 UTC

[section ""data" . $krep3_rcmbV_closure" {
     $krep3_rcmbV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Mem.StableName.$tcStableName_closure+1;
         const $krep1_rcmbT_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.343328003 UTC

[section ""data" . System.Mem.StableName.$tc'StableName1_closure" {
     System.Mem.StableName.$tc'StableName1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcmbU_closure+1;
         const $krep3_rcmbV_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.345300327 UTC

[section ""cstring" . System.Mem.StableName.$tc'StableName3_bytes" {
     System.Mem.StableName.$tc'StableName3_bytes:
         I8[] [39,83,116,97,98,108,101,78,97,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.347198967 UTC

[section ""data" . System.Mem.StableName.$tc'StableName2_closure" {
     System.Mem.StableName.$tc'StableName2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Mem.StableName.$tc'StableName3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.349087322 UTC

[section ""data" . System.Mem.StableName.$tc'StableName_closure" {
     System.Mem.StableName.$tc'StableName_closure:
         const GHC.Types.TyCon_con_info;
         const System.Mem.StableName.$trModule_closure+1;
         const System.Mem.StableName.$tc'StableName2_closure+1;
         const System.Mem.StableName.$tc'StableName1_closure+4;
         const 11629501114032097064;
         const 10388293122134847073;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.351547589 UTC

[section ""data" . System.Mem.StableName.StableName_closure" {
     System.Mem.StableName.StableName_closure:
         const System.Mem.StableName.StableName_info;
 },
 System.Mem.StableName.StableName_entry() //  [R2]
         { info_tbl: [(ccmlC,
                       label: System.Mem.StableName.StableName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmlC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccmlG; else goto ccmlF;
       ccmlG: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Mem.StableName.StableName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccmlF: // global
           I64[Hp - 8] = System.Mem.StableName.StableName_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.356204366 UTC

[System.Mem.StableName.StableName_con_entry() //  [R1]
         { info_tbl: [(ccmlM,
                       label: System.Mem.StableName.StableName_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,77,101,109,46,83,116,97,98,108,101,78,97,109,101,46,83,116,97,98,108,101,78,97,109,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmlM: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.359818531 UTC

[section ""relreadonly" . Scmf1_srt" { Scmf1_srt:
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.457818388 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:15.459659598 UTC

[section ""data" . System.Mem.StableName.$fEqStableName_$c==_closure" {
     System.Mem.StableName.$fEqStableName_$c==_closure:
         const System.Mem.StableName.$fEqStableName_$c==_info;
 },
 System.Mem.StableName.$fEqStableName_$c==_entry() //  [R2, R3]
         { info_tbl: [(ccmmv,
                       label: System.Mem.StableName.$fEqStableName_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmmv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccmmz; else goto ccmmA;
       ccmmz: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Mem.StableName.$fEqStableName_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccmmA: // global
           I64[Sp - 16] = block_ccmms_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucmmX; else goto ccmmt;
       ucmmX: // global
           call _ccmms(R1) args: 0, res: 0, upd: 0;
       ccmmt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmms() //  [R1]
         { info_tbl: [(ccmms,
                       label: block_ccmms_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmms: // global
           I64[Sp] = block_ccmmy_info;
           _scmlW::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scmlW::P64;
           if (R1 & 7 != 0) goto ucmmW; else goto ccmmC;
       ucmmW: // global
           call _ccmmy(R1) args: 0, res: 0, upd: 0;
       ccmmC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmmy() //  [R1]
         { info_tbl: [(ccmmy,
                       label: block_ccmmy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmmy: // global
           if (I64[P64[Sp + 8] + 8] == I64[P64[R1 + 7] + 8]) goto ccmmM; else goto ccmmS;
       ccmmM: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccmmS: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.468763711 UTC

[section ""data" . System.Mem.StableName.$fEqStableName_$c/=_closure" {
     System.Mem.StableName.$fEqStableName_$c/=_closure:
         const System.Mem.StableName.$fEqStableName_$c/=_info;
 },
 System.Mem.StableName.$fEqStableName_$c/=_entry() //  [R2, R3]
         { info_tbl: [(ccmnr,
                       label: System.Mem.StableName.$fEqStableName_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmnr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccmnv; else goto ccmnw;
       ccmnv: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Mem.StableName.$fEqStableName_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccmnw: // global
           I64[Sp - 16] = block_ccmno_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucmnT; else goto ccmnp;
       ucmnT: // global
           call _ccmno(R1) args: 0, res: 0, upd: 0;
       ccmnp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmno() //  [R1]
         { info_tbl: [(ccmno,
                       label: block_ccmno_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmno: // global
           I64[Sp] = block_ccmnu_info;
           _scmm3::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scmm3::P64;
           if (R1 & 7 != 0) goto ucmnS; else goto ccmny;
       ucmnS: // global
           call _ccmnu(R1) args: 0, res: 0, upd: 0;
       ccmny: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmnu() //  [R1]
         { info_tbl: [(ccmnu,
                       label: block_ccmnu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmnu: // global
           if (I64[P64[Sp + 8] + 8] == I64[P64[R1 + 7] + 8]) goto ccmnI; else goto ccmnO;
       ccmnI: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccmnO: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.477112137 UTC

[section ""data" . System.Mem.StableName.$fEqStableName_closure" {
     System.Mem.StableName.$fEqStableName_closure:
         const GHC.Classes.C:Eq_con_info;
         const System.Mem.StableName.$fEqStableName_$c==_closure+2;
         const System.Mem.StableName.$fEqStableName_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.479593696 UTC

[section ""data" . System.Mem.StableName.makeStableName1_closure" {
     System.Mem.StableName.makeStableName1_closure:
         const System.Mem.StableName.makeStableName1_info;
 },
 System.Mem.StableName.makeStableName1_entry() //  [R2]
         { info_tbl: [(ccmoo,
                       label: System.Mem.StableName.makeStableName1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmoo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccmop; else goto ccmoq;
       ccmop: // global
           R2 = R2;
           R1 = System.Mem.StableName.makeStableName1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccmoq: // global
           I64[Sp - 8] = block_ccmol_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_makeStableName#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmol() //  [R1]
         { info_tbl: [(ccmol,
                       label: block_ccmol_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmol: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccmot; else goto ccmos;
       ccmot: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccmos: // global
           I64[Hp - 8] = System.Mem.StableName.StableName_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.486958513 UTC

[section ""data" . System.Mem.StableName.makeStableName_closure" {
     System.Mem.StableName.makeStableName_closure:
         const System.Mem.StableName.makeStableName_info;
 },
 System.Mem.StableName.makeStableName_entry() //  [R2]
         { info_tbl: [(ccmoJ,
                       label: System.Mem.StableName.makeStableName_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmoJ: // global
           R2 = R2;
           call System.Mem.StableName.makeStableName1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.491015832 UTC

[section ""data" . System.Mem.StableName.hashStableName_closure" {
     System.Mem.StableName.hashStableName_closure:
         const System.Mem.StableName.hashStableName_info;
 },
 System.Mem.StableName.hashStableName_entry() //  [R2]
         { info_tbl: [(ccmoX,
                       label: System.Mem.StableName.hashStableName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmoX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccmp4; else goto ccmp5;
       ccmp4: // global
           R2 = R2;
           R1 = System.Mem.StableName.hashStableName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccmp5: // global
           I64[Sp - 8] = block_ccmoU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucmp9; else goto ccmoV;
       ucmp9: // global
           call _ccmoU(R1) args: 0, res: 0, upd: 0;
       ccmoV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmoU() //  [R1]
         { info_tbl: [(ccmoU,
                       label: block_ccmoU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmoU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccmp8; else goto ccmp7;
       ccmp8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccmp7: // global
           _scmmg::I64 = I64[P64[R1 + 7] + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _scmmg::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.498004265 UTC

[section ""data" . System.Mem.StableName.eqStableName_closure" {
     System.Mem.StableName.eqStableName_closure:
         const System.Mem.StableName.eqStableName_info;
 },
 System.Mem.StableName.eqStableName_entry() //  [R2, R3]
         { info_tbl: [(ccmpu,
                       label: System.Mem.StableName.eqStableName_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmpu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccmpy; else goto ccmpz;
       ccmpy: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Mem.StableName.eqStableName_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccmpz: // global
           I64[Sp - 16] = block_ccmpr_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucmpW; else goto ccmps;
       ucmpW: // global
           call _ccmpr(R1) args: 0, res: 0, upd: 0;
       ccmps: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmpr() //  [R1]
         { info_tbl: [(ccmpr,
                       label: block_ccmpr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmpr: // global
           I64[Sp] = block_ccmpx_info;
           _scmmk::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scmmk::P64;
           if (R1 & 7 != 0) goto ucmpV; else goto ccmpB;
       ucmpV: // global
           call _ccmpx(R1) args: 0, res: 0, upd: 0;
       ccmpB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccmpx() //  [R1]
         { info_tbl: [(ccmpx,
                       label: block_ccmpx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmpx: // global
           if (I64[P64[Sp + 8] + 8] == I64[P64[R1 + 7] + 8]) goto ccmpL; else goto ccmpR;
       ccmpL: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccmpR: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.505402988 UTC

[section ""cstring" . System.Mem.StableName.$trModule4_bytes" {
     System.Mem.StableName.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.507132134 UTC

[section ""data" . System.Mem.StableName.$trModule3_closure" {
     System.Mem.StableName.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Mem.StableName.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.508896097 UTC

[section ""cstring" . System.Mem.StableName.$trModule2_bytes" {
     System.Mem.StableName.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,77,101,109,46,83,116,97,98,108,101,78,97,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.510733346 UTC

[section ""data" . System.Mem.StableName.$trModule1_closure" {
     System.Mem.StableName.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Mem.StableName.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.51257891 UTC

[section ""data" . System.Mem.StableName.$trModule_closure" {
     System.Mem.StableName.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Mem.StableName.$trModule3_closure+1;
         const System.Mem.StableName.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.514496458 UTC

[section ""data" . $krep_rcmbS_closure" {
     $krep_rcmbS_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.516966837 UTC

[section ""data" . $krep1_rcmbT_closure" {
     $krep1_rcmbT_closure:
         const :_con_info;
         const $krep_rcmbS_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.519137677 UTC

[section ""data" . $krep2_rcmbU_closure" {
     $krep2_rcmbU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcStableName#_closure;
         const $krep1_rcmbT_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.521104723 UTC

[section ""cstring" . System.Mem.StableName.$tcStableName2_bytes" {
     System.Mem.StableName.$tcStableName2_bytes:
         I8[] [83,116,97,98,108,101,78,97,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.523002525 UTC

[section ""data" . System.Mem.StableName.$tcStableName1_closure" {
     System.Mem.StableName.$tcStableName1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Mem.StableName.$tcStableName2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.524866012 UTC

[section ""data" . System.Mem.StableName.$tcStableName_closure" {
     System.Mem.StableName.$tcStableName_closure:
         const GHC.Types.TyCon_con_info;
         const System.Mem.StableName.$trModule_closure+1;
         const System.Mem.StableName.$tcStableName1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 9283215246123464151;
         const 14241671522388568561;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.526980986 UTC

[section ""data" . $krep3_rcmbV_closure" {
     $krep3_rcmbV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Mem.StableName.$tcStableName_closure+1;
         const $krep1_rcmbT_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.528908178 UTC

[section ""data" . System.Mem.StableName.$tc'StableName1_closure" {
     System.Mem.StableName.$tc'StableName1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcmbU_closure+1;
         const $krep3_rcmbV_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.530823384 UTC

[section ""cstring" . System.Mem.StableName.$tc'StableName3_bytes" {
     System.Mem.StableName.$tc'StableName3_bytes:
         I8[] [39,83,116,97,98,108,101,78,97,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.532758243 UTC

[section ""data" . System.Mem.StableName.$tc'StableName2_closure" {
     System.Mem.StableName.$tc'StableName2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Mem.StableName.$tc'StableName3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.534690407 UTC

[section ""data" . System.Mem.StableName.$tc'StableName_closure" {
     System.Mem.StableName.$tc'StableName_closure:
         const GHC.Types.TyCon_con_info;
         const System.Mem.StableName.$trModule_closure+1;
         const System.Mem.StableName.$tc'StableName2_closure+1;
         const System.Mem.StableName.$tc'StableName1_closure+4;
         const 11629501114032097064;
         const 10388293122134847073;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.537174777 UTC

[section ""data" . System.Mem.StableName.StableName_closure" {
     System.Mem.StableName.StableName_closure:
         const System.Mem.StableName.StableName_info;
 },
 System.Mem.StableName.StableName_entry() //  [R2]
         { info_tbl: [(ccmqE,
                       label: System.Mem.StableName.StableName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmqE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccmqI; else goto ccmqH;
       ccmqI: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Mem.StableName.StableName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccmqH: // global
           I64[Hp - 8] = System.Mem.StableName.StableName_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.541643779 UTC

[System.Mem.StableName.StableName_con_entry() //  [R1]
         { info_tbl: [(ccmqP,
                       label: System.Mem.StableName.StableName_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,77,101,109,46,83,116,97,98,108,101,78,97,109,101,46,83,116,97,98,108,101,78,97,109,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccmqP: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:15.545071144 UTC

[section ""relreadonly" . ScmqW_srt" { ScmqW_srt:
 }]

