
==================== Pre unarise: ====================
2018-03-16 16:06:29.976319311 UTC

System.IO.putChar1
  :: GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U(U)>, Unf=OtherCon []] =
    [] \r [c_sbyQn eta_B1]
        GHC.IO.Handle.Text.hPutChar1
            GHC.IO.Handle.FD.stdout c_sbyQn eta_B1;

System.IO.putChar :: GHC.Types.Char -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U(U)>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] System.IO.putChar1 eta_B2 eta_B1;

System.IO.putStr :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [s_sbyQo eta_B1]
        GHC.IO.Handle.Text.hPutStr GHC.IO.Handle.FD.stdout s_sbyQo eta_B1;

System.IO.putStrLn :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [s_sbyQp eta_B1]
        GHC.IO.Handle.Text.hPutStrLn
            GHC.IO.Handle.FD.stdout s_sbyQp eta_B1;

System.IO.print
  :: forall a. GHC.Show.Show a => a -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*U(A,1*C1(U),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dShow_sbyQq x_sbyQr]
        let {
          sat_sbyQs [Occ=Once] :: GHC.Base.String
          [LclId] =
              [$dShow_sbyQq x_sbyQr] \u [] GHC.Show.show $dShow_sbyQq x_sbyQr;
        } in 
          GHC.IO.Handle.Text.hPutStr'
              GHC.IO.Handle.FD.stdout sat_sbyQs GHC.Types.True;

System.IO.getChar1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Char #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.Text.hGetChar6
            GHC.IO.Handle.FD.stdin
            GHC.IO.Handle.Text.hGetChar2
            eta_B1;

System.IO.getChar :: GHC.Types.IO GHC.Types.Char
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] System.IO.getChar1 eta_B1;

System.IO.getLine1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.Text.hGetLine4
            GHC.IO.Handle.FD.stdin
            GHC.IO.Handle.Text.hGetLine2
            eta_B1;

System.IO.getLine :: GHC.Types.IO GHC.Base.String
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] System.IO.getLine1 eta_B1;

System.IO.getContents1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.IO.Handle.Text.hGetContents1 GHC.IO.Handle.FD.stdin eta_B1;

System.IO.getContents :: GHC.Types.IO GHC.Base.String
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] System.IO.getContents1 eta_B1;

System.IO.localeEncoding :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.initLocaleEncoding;

System.IO.hReady2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

System.IO.hReady1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbyQt eta_sbyQu]
        GHC.IO.Handle.Text.hWaitForInput1
            h_sbyQt System.IO.hReady2 eta_sbyQu;

System.IO.hReady
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] System.IO.hReady1 eta_B2 eta_B1;

System.IO.hPrint
  :: forall a.
     GHC.Show.Show a =>
     GHC.IO.Handle.Types.Handle -> a -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Str=<L,1*U(A,1*C1(U),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sbyQv hdl_sbyQw eta_sbyQx]
        let {
          sat_sbyQy [Occ=Once] :: GHC.Base.String
          [LclId] =
              [$dShow_sbyQv eta_sbyQx] \u []
                  GHC.Show.show $dShow_sbyQv eta_sbyQx;
        } in 
          GHC.IO.Handle.Text.hPutStr' hdl_sbyQw sat_sbyQy GHC.Types.True;

System.IO.appendFile2
  :: forall r.
     GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> (GHC.IO.Handle.Types.Handle -> GHC.Types.IO r)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, r #)
[GblId,
 Arity=4,
 Str=<L,U><L,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [name_sbyQz mode_sbyQA eta_sbyQB eta1_sbyQC]
        case getMaskingState# [eta1_sbyQC] of {
          (#,#) ipv_sbyQE [Occ=Once*] ipv1_sbyQF [Occ=Once!] ->
              case ipv1_sbyQF of {
                __DEFAULT ->
                    case
                        GHC.IO.Handle.FD.openFile1 name_sbyQz mode_sbyQA ipv_sbyQE
                    of
                    { (#,#) ipv2_sbyQI [Occ=Once] ipv3_sbyQJ ->
                          let {
                            sat_sbyQR [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [ipv3_sbyQJ] \r [e1_sbyQM s_sbyQN]
                                    case GHC.IO.Handle.hClose1 ipv3_sbyQJ s_sbyQN of {
                                      (#,#) ipv4_sbyQP [Occ=Once] _ [Occ=Dead] ->
                                          raiseIO# [e1_sbyQM ipv4_sbyQP];
                                    }; } in
                          let {
                            sat_sbyQK [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [eta_sbyQB ipv3_sbyQJ] \u [] eta_sbyQB ipv3_sbyQJ; } in
                          let {
                            sat_sbyQL [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [sat_sbyQK] \r [eta_B1] maskAsyncExceptions# [sat_sbyQK eta_B1];
                          } in 
                            case catch# [sat_sbyQL sat_sbyQR ipv2_sbyQI] of {
                              (#,#) ipv4_sbyQT [Occ=Once] ipv5_sbyQU [Occ=Once] ->
                                  case GHC.IO.Handle.hClose1 ipv3_sbyQJ ipv4_sbyQT of {
                                    (#,#) ipv6_sbyQW [Occ=Once] _ [Occ=Dead] ->
                                        (#,#) [ipv6_sbyQW ipv5_sbyQU];
                                  };
                            };
                    };
                0# ->
                    let {
                      sat_sbyRg [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                      [LclId] =
                          [name_sbyQz mode_sbyQA eta_sbyQB] \r [s_sbyQY]
                              case GHC.IO.Handle.FD.openFile1 name_sbyQz mode_sbyQA s_sbyQY of {
                                (#,#) ipv2_sbyR0 [Occ=Once] ipv3_sbyR1 ->
                                    let {
                                      sat_sbyR9 [Occ=Once]
                                        :: GHC.Exception.SomeException
                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                                      [LclId] =
                                          [ipv3_sbyR1] \r [e1_sbyR4 s1_sbyR5]
                                              case GHC.IO.Handle.hClose1 ipv3_sbyR1 s1_sbyR5 of {
                                                (#,#) ipv4_sbyR7 [Occ=Once] _ [Occ=Dead] ->
                                                    raiseIO# [e1_sbyR4 ipv4_sbyR7];
                                              }; } in
                                    let {
                                      sat_sbyR2 [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                                      [LclId] =
                                          [eta_sbyQB ipv3_sbyR1] \u [] eta_sbyQB ipv3_sbyR1; } in
                                    let {
                                      sat_sbyR3 [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                                      [LclId] =
                                          [sat_sbyR2] \r [eta_B1]
                                              unmaskAsyncExceptions# [sat_sbyR2 eta_B1];
                                    } in 
                                      case catch# [sat_sbyR3 sat_sbyR9 ipv2_sbyR0] of {
                                        (#,#) ipv4_sbyRb [Occ=Once] ipv5_sbyRc [Occ=Once] ->
                                            case GHC.IO.Handle.hClose1 ipv3_sbyR1 ipv4_sbyRb of {
                                              (#,#) ipv6_sbyRe [Occ=Once] _ [Occ=Dead] ->
                                                  (#,#) [ipv6_sbyRe ipv5_sbyRc];
                                            };
                                      };
                              };
                    } in  maskAsyncExceptions# [sat_sbyRg ipv_sbyQE];
                1# ->
                    case
                        GHC.IO.Handle.FD.openFile1 name_sbyQz mode_sbyQA ipv_sbyQE
                    of
                    { (#,#) ipv2_sbyRi [Occ=Once] ipv3_sbyRj ->
                          let {
                            sat_sbyRr [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [ipv3_sbyRj] \r [e1_sbyRm s_sbyRn]
                                    case GHC.IO.Handle.hClose1 ipv3_sbyRj s_sbyRn of {
                                      (#,#) ipv4_sbyRp [Occ=Once] _ [Occ=Dead] ->
                                          raiseIO# [e1_sbyRm ipv4_sbyRp];
                                    }; } in
                          let {
                            sat_sbyRk [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [eta_sbyQB ipv3_sbyRj] \u [] eta_sbyQB ipv3_sbyRj; } in
                          let {
                            sat_sbyRl [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [sat_sbyRk] \r [eta_B1] maskUninterruptible# [sat_sbyRk eta_B1];
                          } in 
                            case catch# [sat_sbyRl sat_sbyRr ipv2_sbyRi] of {
                              (#,#) ipv4_sbyRt [Occ=Once] ipv5_sbyRu [Occ=Once] ->
                                  case GHC.IO.Handle.hClose1 ipv3_sbyRj ipv4_sbyRt of {
                                    (#,#) ipv6_sbyRw [Occ=Once] _ [Occ=Dead] ->
                                        (#,#) [ipv6_sbyRw ipv5_sbyRu];
                                  };
                            };
                    };
              };
        };

System.IO.withFile
  :: forall r.
     GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> (GHC.IO.Handle.Types.Handle -> GHC.Types.IO r)
     -> GHC.Types.IO r
[GblId,
 Arity=4,
 Str=<L,U><L,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        System.IO.appendFile2 eta_B4 eta_B3 eta_B2 eta_B1;

System.IO.appendFile1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [f_sbyRy txt_sbyRz eta_sbyRA]
        let {
          sat_sbyRC [Occ=Once]
            :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
          [LclId] =
              [txt_sbyRz] \r [hdl_sbyRB eta_B1]
                  GHC.IO.Handle.Text.hPutStr hdl_sbyRB txt_sbyRz eta_B1;
        } in 
          System.IO.appendFile2
              f_sbyRy GHC.IO.IOMode.AppendMode sat_sbyRC eta_sbyRA;

System.IO.appendFile
  :: GHC.IO.FilePath -> GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.IO.appendFile1 eta_B3 eta_B2 eta_B1;

System.IO.writeFile1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [f_sbyRD txt_sbyRE eta_sbyRF]
        let {
          sat_sbyRH [Occ=Once]
            :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
          [LclId] =
              [txt_sbyRE] \r [hdl_sbyRG eta_B1]
                  GHC.IO.Handle.Text.hPutStr hdl_sbyRG txt_sbyRE eta_B1;
        } in 
          System.IO.appendFile2
              f_sbyRD GHC.IO.IOMode.WriteMode sat_sbyRH eta_sbyRF;

System.IO.writeFile
  :: GHC.IO.FilePath -> GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.IO.writeFile1 eta_B3 eta_B2 eta_B1;

System.IO.withBinaryFile1
  :: forall r.
     GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> (GHC.IO.Handle.Types.Handle -> GHC.Types.IO r)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, r #)
[GblId,
 Arity=4,
 Str=<L,U><L,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [name_sbyRI mode_sbyRJ eta_sbyRK eta1_sbyRL]
        case getMaskingState# [eta1_sbyRL] of {
          (#,#) ipv_sbyRN [Occ=Once*] ipv1_sbyRO [Occ=Once!] ->
              case ipv1_sbyRO of {
                __DEFAULT ->
                    case
                        GHC.IO.Handle.FD.openBinaryFile1 name_sbyRI mode_sbyRJ ipv_sbyRN
                    of
                    { (#,#) ipv2_sbyRR [Occ=Once] ipv3_sbyRS ->
                          let {
                            sat_sbyS0 [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [ipv3_sbyRS] \r [e1_sbyRV s_sbyRW]
                                    case GHC.IO.Handle.hClose1 ipv3_sbyRS s_sbyRW of {
                                      (#,#) ipv4_sbyRY [Occ=Once] _ [Occ=Dead] ->
                                          raiseIO# [e1_sbyRV ipv4_sbyRY];
                                    }; } in
                          let {
                            sat_sbyRT [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [eta_sbyRK ipv3_sbyRS] \u [] eta_sbyRK ipv3_sbyRS; } in
                          let {
                            sat_sbyRU [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [sat_sbyRT] \r [eta_B1] maskAsyncExceptions# [sat_sbyRT eta_B1];
                          } in 
                            case catch# [sat_sbyRU sat_sbyS0 ipv2_sbyRR] of {
                              (#,#) ipv4_sbyS2 [Occ=Once] ipv5_sbyS3 [Occ=Once] ->
                                  case GHC.IO.Handle.hClose1 ipv3_sbyRS ipv4_sbyS2 of {
                                    (#,#) ipv6_sbyS5 [Occ=Once] _ [Occ=Dead] ->
                                        (#,#) [ipv6_sbyS5 ipv5_sbyS3];
                                  };
                            };
                    };
                0# ->
                    let {
                      sat_sbySp [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                      [LclId] =
                          [name_sbyRI mode_sbyRJ eta_sbyRK] \r [s_sbyS7]
                              case
                                  GHC.IO.Handle.FD.openBinaryFile1 name_sbyRI mode_sbyRJ s_sbyS7
                              of
                              { (#,#) ipv2_sbyS9 [Occ=Once] ipv3_sbySa ->
                                    let {
                                      sat_sbySi [Occ=Once]
                                        :: GHC.Exception.SomeException
                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                                      [LclId] =
                                          [ipv3_sbySa] \r [e1_sbySd s1_sbySe]
                                              case GHC.IO.Handle.hClose1 ipv3_sbySa s1_sbySe of {
                                                (#,#) ipv4_sbySg [Occ=Once] _ [Occ=Dead] ->
                                                    raiseIO# [e1_sbySd ipv4_sbySg];
                                              }; } in
                                    let {
                                      sat_sbySb [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                                      [LclId] =
                                          [eta_sbyRK ipv3_sbySa] \u [] eta_sbyRK ipv3_sbySa; } in
                                    let {
                                      sat_sbySc [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                                      [LclId] =
                                          [sat_sbySb] \r [eta_B1]
                                              unmaskAsyncExceptions# [sat_sbySb eta_B1];
                                    } in 
                                      case catch# [sat_sbySc sat_sbySi ipv2_sbyS9] of {
                                        (#,#) ipv4_sbySk [Occ=Once] ipv5_sbySl [Occ=Once] ->
                                            case GHC.IO.Handle.hClose1 ipv3_sbySa ipv4_sbySk of {
                                              (#,#) ipv6_sbySn [Occ=Once] _ [Occ=Dead] ->
                                                  (#,#) [ipv6_sbySn ipv5_sbySl];
                                            };
                                      };
                              };
                    } in  maskAsyncExceptions# [sat_sbySp ipv_sbyRN];
                1# ->
                    case
                        GHC.IO.Handle.FD.openBinaryFile1 name_sbyRI mode_sbyRJ ipv_sbyRN
                    of
                    { (#,#) ipv2_sbySr [Occ=Once] ipv3_sbySs ->
                          let {
                            sat_sbySA [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [ipv3_sbySs] \r [e1_sbySv s_sbySw]
                                    case GHC.IO.Handle.hClose1 ipv3_sbySs s_sbySw of {
                                      (#,#) ipv4_sbySy [Occ=Once] _ [Occ=Dead] ->
                                          raiseIO# [e1_sbySv ipv4_sbySy];
                                    }; } in
                          let {
                            sat_sbySt [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [eta_sbyRK ipv3_sbySs] \u [] eta_sbyRK ipv3_sbySs; } in
                          let {
                            sat_sbySu [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [sat_sbySt] \r [eta_B1] maskUninterruptible# [sat_sbySt eta_B1];
                          } in 
                            case catch# [sat_sbySu sat_sbySA ipv2_sbySr] of {
                              (#,#) ipv4_sbySC [Occ=Once] ipv5_sbySD [Occ=Once] ->
                                  case GHC.IO.Handle.hClose1 ipv3_sbySs ipv4_sbySC of {
                                    (#,#) ipv6_sbySF [Occ=Once] _ [Occ=Dead] ->
                                        (#,#) [ipv6_sbySF ipv5_sbySD];
                                  };
                            };
                    };
              };
        };

System.IO.withBinaryFile
  :: forall r.
     GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> (GHC.IO.Handle.Types.Handle -> GHC.Types.IO r)
     -> GHC.Types.IO r
[GblId,
 Arity=4,
 Str=<L,U><L,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        System.IO.withBinaryFile1 eta_B4 eta_B3 eta_B2 eta_B1;

lvl_rbyQ6
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IORef.IORef GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [s_sbySH]
        case noDuplicate# [s_sbySH] of s'_sbySI {
          __DEFAULT ->
              case newMutVar# [System.IO.hReady2 s'_sbySI] of {
                (#,#) ipv_sbySK [Occ=Once] ipv1_sbySL [Occ=Once] ->
                    let {
                      sat_sbySM [Occ=Once] :: GHC.IORef.IORef GHC.Types.Int
                      [LclId] =
                          CCCS GHC.STRef.STRef! [ipv1_sbySL];
                    } in  (#,#) [ipv_sbySK sat_sbySM];
              };
        };

tempCounter_rbxCH :: GHC.IORef.IORef GHC.Types.Int
[GblId] =
    [] \u []
        case lvl_rbyQ6 GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_sbySP [Occ=Once] -> ipv1_sbySP;
        };

pathSeparatorChar_rbxCK :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['/'#];

System.IO.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

System.IO.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$trModule4];

System.IO.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "System.IO"#;

System.IO.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$trModule2];

System.IO.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [System.IO.$trModule3
                                     System.IO.$trModule1];

$krep_rbyQ7 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.C.Error.$tcErrno
                                              GHC.Types.[]];

$krep1_rbyQ8 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.C.Types.$tcCInt
                                              GHC.Types.[]];

System.IO.$tcOpenNewFileResult2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OpenNewFileResult"#;

System.IO.$tcOpenNewFileResult1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$tcOpenNewFileResult2];

System.IO.$tcOpenNewFileResult :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9627069439367662246##
                                    2547759174955940786##
                                    System.IO.$trModule
                                    System.IO.$tcOpenNewFileResult1
                                    0#
                                    GHC.Types.krep$*];

System.IO.$tc'FileExists1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [System.IO.$tcOpenNewFileResult
                                              GHC.Types.[]];

System.IO.$tc'FileExists3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FileExists"#;

System.IO.$tc'FileExists2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$tc'FileExists3];

System.IO.$tc'FileExists :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6704133186904346962##
                                    16997416543076271011##
                                    System.IO.$trModule
                                    System.IO.$tc'FileExists2
                                    0#
                                    System.IO.$tc'FileExists1];

System.IO.$tc'NewFileCreated1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_rbyQ8
                                         System.IO.$tc'FileExists1];

System.IO.$tc'NewFileCreated3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'NewFileCreated"#;

System.IO.$tc'NewFileCreated2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$tc'NewFileCreated3];

System.IO.$tc'NewFileCreated :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9070829168557028496##
                                    15570227817593865145##
                                    System.IO.$trModule
                                    System.IO.$tc'NewFileCreated2
                                    0#
                                    System.IO.$tc'NewFileCreated1];

System.IO.$tc'OpenNewError1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rbyQ7
                                         System.IO.$tc'FileExists1];

System.IO.$tc'OpenNewError3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'OpenNewError"#;

System.IO.$tc'OpenNewError2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$tc'OpenNewError3];

System.IO.$tc'OpenNewError :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [300310999495895268##
                                    12582581010413704951##
                                    System.IO.$trModule
                                    System.IO.$tc'OpenNewError2
                                    0#
                                    System.IO.$tc'OpenNewError1];

lvl1_rbyQ9 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionFixIOException_$ctoException
            GHC.IO.Exception.FixIOException;

System.IO.fixIO3
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sbySQ] raiseIO# [lvl1_rbyQ9 eta_sbySQ];

System.IO.fixIO2
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [e1_sbySR]
        case e1_sbySR of wild_sbySS {
          GHC.Exception.SomeException $dException1_sbyST [Occ=Once]
                                      e3_sbySU [Occ=Once] ->
              case GHC.Exception.$p1Exception $dException1_sbyST of sat_sbySV {
                __DEFAULT ->
                    case
                        Data.Typeable.Internal.sameTypeRep
                            sat_sbySV GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3
                    of
                    { GHC.Types.False ->
                          let {
                            sat_sbySX [Occ=OnceT[0]]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_abxYz #)
                            [LclId] =
                                [wild_sbySS] \r [eta_B1] raiseIO# [wild_sbySS eta_B1];
                          } in  sat_sbySX;
                      GHC.Types.True ->
                          case e3_sbySU of {
                            GHC.IO.Exception.BlockedIndefinitelyOnMVar -> System.IO.fixIO3;
                          };
                    };
              };
        };

System.IO.fixIO1
  :: forall a.
     (a -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*C1(C1(U(U,U)))><S,U>, Unf=OtherCon []] =
    [] \r [k_sbySZ s_sbyT0]
        case newMVar# [s_sbyT0] of {
          (#,#) ipv_sbyT2 [Occ=Once] ipv1_sbyT3 ->
              let {
                sat_sbyT7 [Occ=Once] :: GHC.Types.IO a_abxYz
                [LclId] =
                    [ipv1_sbyT3] \r [eta_sbyT4]
                        let {
                          sat_sbyT6 [Occ=Once]
                            :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_abxYz #)
                          [LclId] =
                              [ipv1_sbyT3] \r [eta1_sbyT5] readMVar# [ipv1_sbyT3 eta1_sbyT5];
                        } in  catch# [sat_sbyT6 System.IO.fixIO2 eta_sbyT4];
              } in 
                case
                    GHC.IO.Unsafe.unsafeDupableInterleaveIO sat_sbyT7 ipv_sbyT2
                of
                { (#,#) ipv2_sbyT9 [Occ=Once] ipv3_sbyTa [Occ=Once] ->
                      case k_sbySZ ipv3_sbyTa ipv2_sbyT9 of {
                        (#,#) ipv4_sbyTc [Occ=Once] ipv5_sbyTd ->
                            case putMVar# [ipv1_sbyT3 ipv5_sbyTd ipv4_sbyTc] of s2#_sbyTe {
                              __DEFAULT -> (#,#) [s2#_sbyTe ipv5_sbyTd];
                            };
                      };
                };
        };

System.IO.fixIO
  :: forall a. (a -> GHC.Types.IO a) -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*C1(C1(U(U,U)))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] System.IO.fixIO1 eta_B2 eta_B1;

System.IO.readIO9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Prelude.readIO: no parse"#;

System.IO.readIO8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.IO.readIO9;

System.IO.readIO7 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.UserError
                                             GHC.Types.[]
                                             System.IO.readIO8
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

System.IO.readIO6 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            System.IO.readIO7;

System.IO.readIO5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Prelude.readIO: ambiguous parse"#;

System.IO.readIO4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.IO.readIO5;

System.IO.readIO3 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.UserError
                                             GHC.Types.[]
                                             System.IO.readIO4
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

System.IO.readIO2 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            System.IO.readIO3;

System.IO.readIO10 [Occ=LoopBreaker]
  :: forall a. [(a, GHC.Base.String)] -> [a]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbyTf]
        case ds_sbyTf of {
          [] -> [] [];
          : y_sbyTh [Occ=Once!] ys_sbyTi [Occ=Once] ->
              case y_sbyTh of {
                (,) x_sbyTk [Occ=OnceL] t_sbyTl [Occ=Once] ->
                    let {
                      lvl12_sbyTm [Occ=OnceL] :: [a_abxZC]
                      [LclId, Unf=OtherCon []] =
                          CCCS :! [x_sbyTk GHC.Types.[]]; } in
                    let {
                      z_sbyTn [Occ=OnceL] :: [a_abxZC]
                      [LclId] =
                          [ys_sbyTi] \u [] System.IO.readIO10 ys_sbyTi; } in
                    let {
                      go1_sbyTo [Occ=LoopBreaker]
                        :: [(GHC.Base.String, GHC.Base.String)] -> [a_abxZC]
                      [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                          sat-only [lvl12_sbyTm z_sbyTn go1_sbyTo] \r [ds1_sbyTp]
                              case ds1_sbyTp of {
                                [] -> z_sbyTn;
                                : y1_sbyTr [Occ=Once!] ys1_sbyTs [Occ=Once*] ->
                                    case y1_sbyTr of {
                                      (,) ds2_sbyTu [Occ=Once!] ds3_sbyTv [Occ=Once!] ->
                                          case ds2_sbyTu of {
                                            [] ->
                                                case ds3_sbyTv of {
                                                  [] ->
                                                      let {
                                                        sat_sbyTy [Occ=Once, Dmd=<L,1*U>]
                                                          :: [a_abxZC]
                                                        [LclId] =
                                                            [go1_sbyTo ys1_sbyTs] \s []
                                                                go1_sbyTo ys1_sbyTs;
                                                      } in  GHC.Base.++ lvl12_sbyTm sat_sbyTy;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      go1_sbyTo ys1_sbyTs;
                                                };
                                            : _ [Occ=Dead] _ [Occ=Dead] -> go1_sbyTo ys1_sbyTs;
                                          };
                                    };
                              };
                    } in 
                      case
                          Text.ParserCombinators.ReadP.run GHC.Read.lex1 t_sbyTl
                      of
                      sat_sbyTD
                      { __DEFAULT -> go1_sbyTo sat_sbyTD;
                      };
              };
        };

System.IO.readIO1
  :: forall a.
     GHC.Read.Read a =>
     GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Str=<S(C(C(S))LLL),1*U(1*C1(C1(U)),A,A,A)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_sbyTE s_sbyTF eta_sbyTG]
        case
            GHC.Read.readsPrec
                $dRead_sbyTE Text.ParserCombinators.ReadPrec.minPrec s_sbyTF
        of
        sat_sbyTH
        { __DEFAULT ->
              case System.IO.readIO10 sat_sbyTH of {
                [] -> raiseIO# [System.IO.readIO6 eta_sbyTG];
                : x_sbyTJ [Occ=Once] ds_sbyTK [Occ=Once!] ->
                    case ds_sbyTK of {
                      [] -> (#,#) [eta_sbyTG x_sbyTJ];
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          raiseIO# [System.IO.readIO2 eta_sbyTG];
                    };
              };
        };

System.IO.readIO
  :: forall a. GHC.Read.Read a => GHC.Base.String -> GHC.Types.IO a
[GblId,
 Arity=3,
 Str=<S(C(C(S))LLL),1*U(1*C1(C1(U)),A,A,A)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.IO.readIO1 eta_B3 eta_B2 eta_B1;

System.IO.readLn1
  :: forall a.
     GHC.Read.Read a =>
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(U)),A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_sbyTO s_sbyTP]
        case
            GHC.IO.Handle.Internals.wantReadableHandle_1
                GHC.IO.Handle.Text.hGetLine4
                GHC.IO.Handle.FD.stdin
                GHC.IO.Handle.Text.hGetLine2
                s_sbyTP
        of
        { (#,#) ipv_sbyTR [Occ=Once] ipv1_sbyTS [Occ=Once] ->
              System.IO.readIO1 $dRead_sbyTO ipv1_sbyTS ipv_sbyTR;
        };

System.IO.readLn :: forall a. GHC.Read.Read a => GHC.Types.IO a
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(U)),A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] System.IO.readLn1 eta_B2 eta_B1;

System.IO.readFile1
  :: GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [name_sbyTT s_sbyTU]
        case
            GHC.IO.Handle.FD.openFile1
                name_sbyTT GHC.IO.IOMode.ReadMode s_sbyTU
        of
        { (#,#) ipv_sbyTW [Occ=Once] ipv1_sbyTX [Occ=Once] ->
              GHC.IO.Handle.Text.hGetContents1 ipv1_sbyTX ipv_sbyTW;
        };

System.IO.readFile
  :: GHC.IO.FilePath -> GHC.Types.IO GHC.Base.String
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] System.IO.readFile1 eta_B2 eta_B1;

System.IO.interact1
  :: (GHC.Base.String -> GHC.Base.String)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [f_sbyTY s_sbyTZ]
        case
            GHC.IO.Handle.Text.hGetContents1 GHC.IO.Handle.FD.stdin s_sbyTZ
        of
        { (#,#) ipv_sbyU1 [Occ=Once] ipv1_sbyU2 [Occ=Once] ->
              let {
                sat_sbyU3 [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
                [LclId] =
                    [f_sbyTY ipv1_sbyU2] \s [] f_sbyTY ipv1_sbyU2;
              } in 
                GHC.IO.Handle.Text.hPutStr'
                    GHC.IO.Handle.FD.stdout sat_sbyU3 GHC.Types.False ipv_sbyU1;
        };

System.IO.interact
  :: (GHC.Base.String -> GHC.Base.String) -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] System.IO.interact1 eta_B2 eta_B1;

lvl2_rbyQa :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bug in System.IO.openTempFile"#;

lvl3_rbyQb :: ([GHC.Types.Char], [GHC.Types.Char])
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl2_rbyQa of sat_sbyU4 {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sbyU4;
        };

lvl4_rbyQc :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['.'#];

lvl5_rbyQd :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_sbyU5]
        case ds_sbyU5 of {
          GHC.Types.C# x_sbyU7 [Occ=Once!] ->
              case x_sbyU7 of {
                __DEFAULT -> GHC.Types.False [];
                '.'# -> GHC.Types.True [];
              };
        };

lvl6_rbyQe :: GHC.Int.Int32
[GblId] =
    [] \u []
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          (#,#) _ [Occ=Dead] ds1_sbyUc [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                (#,#) _ [Occ=Dead] ds3_sbyUg [Occ=Once] ->
                    case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                      (#,#) _ [Occ=Dead] ds5_sbyUk [Occ=Once] ->
                          case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                            (#,#) _ [Occ=Dead] ds7_sbyUo [Occ=Once] ->
                                case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                                  (#,#) _ [Occ=Dead] ds9_sbyUs [Occ=Once] ->
                                      case narrow32Int# [ds9_sbyUs] of sat_sbyUE {
                                        __DEFAULT ->
                                            case int2Word# [sat_sbyUE] of sat_sbyUF {
                                              __DEFAULT ->
                                                  case narrow32Int# [ds7_sbyUo] of sat_sbyUB {
                                                    __DEFAULT ->
                                                        case int2Word# [sat_sbyUB] of sat_sbyUC {
                                                          __DEFAULT ->
                                                              case
                                                                  narrow32Int# [ds5_sbyUk]
                                                              of
                                                              sat_sbyUy
                                                              { __DEFAULT ->
                                                                    case
                                                                        int2Word# [sat_sbyUy]
                                                                    of
                                                                    sat_sbyUz
                                                                    { __DEFAULT ->
                                                                          case
                                                                              narrow32Int# [ds3_sbyUg]
                                                                          of
                                                                          sat_sbyUv
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    int2Word# [sat_sbyUv]
                                                                                of
                                                                                sat_sbyUw
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow32Int# [ds1_sbyUc]
                                                                                      of
                                                                                      sat_sbyUt
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                int2Word# [sat_sbyUt]
                                                                                            of
                                                                                            sat_sbyUu
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      or# [sat_sbyUu
                                                                                                           sat_sbyUw]
                                                                                                  of
                                                                                                  sat_sbyUx
                                                                                                  { __DEFAULT ->
                                                                                                        case
                                                                                                            or# [sat_sbyUx
                                                                                                                 sat_sbyUz]
                                                                                                        of
                                                                                                        sat_sbyUA
                                                                                                        { __DEFAULT ->
                                                                                                              case
                                                                                                                  or# [sat_sbyUA
                                                                                                                       sat_sbyUC]
                                                                                                              of
                                                                                                              sat_sbyUD
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        or# [sat_sbyUD
                                                                                                                             sat_sbyUF]
                                                                                                                    of
                                                                                                                    sat_sbyUG
                                                                                                                    { __DEFAULT ->
                                                                                                                          case
                                                                                                                              word2Int# [sat_sbyUG]
                                                                                                                          of
                                                                                                                          sat_sbyUH
                                                                                                                          { __DEFAULT ->
                                                                                                                                GHC.Int.I32# [sat_sbyUH];
                                                                                                                          };
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

$wlvl_rbyQf
  :: GHC.Prim.Int#
     -> GHC.Base.String
     -> GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           ([GHC.Types.Char], GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=4, Str=<B,U><B,U><B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [ww_sbyUI w_sbyUJ w1_sbyUK w2_sbyUL]
        let {
          sat_sbyUO [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [ww_sbyUI w_sbyUJ w1_sbyUK] \u []
                  let {
                    sat_sbyUN [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        [ww_sbyUI w_sbyUJ w1_sbyUK] \u []
                            let {
                              sat_sbyUM [Occ=Once] :: GHC.Base.Maybe GHC.Base.String
                              [LclId] =
                                  CCCS GHC.Base.Just! [w1_sbyUK];
                            } in 
                              Foreign.C.Error.$werrnoToIOError
                                  w_sbyUJ ww_sbyUI GHC.Base.Nothing sat_sbyUM;
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbyUN;
        } in  raiseIO# [sat_sbyUO w2_sbyUL];

lvl7_rbyQg
  :: Foreign.C.Error.Errno
     -> GHC.Base.String
     -> GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           ([GHC.Types.Char], GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=4, Str=<B,1*U(U)><B,U><B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [w_sbyUP w1_sbyUQ w2_sbyUR w3_sbyUS]
        case w_sbyUP of {
          GHC.Int.I32# ww1_sbyUU [Occ=Once] ->
              $wlvl_rbyQf ww1_sbyUU w1_sbyUQ w2_sbyUR w3_sbyUS;
        };

lvl8_rbyQh :: GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U(U)>m, Unf=OtherCon []] =
    [] \r [n_sbyUV]
        let {
          sat_sbyUZ [Occ=Once] :: GHC.Types.Int
          [LclId] =
              [n_sbyUV] \u []
                  case n_sbyUV of {
                    GHC.Types.I# x_sbyUX [Occ=Once] ->
                        case +# [x_sbyUX 1#] of sat_sbyUY {
                          __DEFAULT -> GHC.Types.I# [sat_sbyUY];
                        };
                  };
        } in  (,) [sat_sbyUZ n_sbyUV];

go_rbyQi :: [GHC.Types.Char] -> GHC.Types.Char -> GHC.Types.Char
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U(U)>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_sbyV0 eta_sbyV1]
        case ds_sbyV0 of {
          [] -> eta_sbyV1;
          : y_sbyV3 [Occ=Once] ys_sbyV4 [Occ=Once] ->
              go_rbyQi ys_sbyV4 y_sbyV3;
        };

lvl9_rbyQj :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "-"#;

lvl10_rbyQk :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openTempFile': Template string must not contain path separator characters: "#;

lvl11_rbyQl
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Base.String
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_sbyV5 template_sbyV6]
        case
            GHC.CString.unpackAppendCString# lvl10_rbyQk template_sbyV6
        of
        sat_sbyV7
        { __DEFAULT -> GHC.IO.failIO1 sat_sbyV7 eta_sbyV5;
        };

System.IO.openBinaryTempFile5
  :: GHC.Base.String
     -> GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.Bool
     -> System.Posix.Types.CMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId,
 Arity=6,
 Str=<L,U><L,U><S,U><L,1*U><L,U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [loc_sbyV8
           tmp_dir_sbyV9
           template_sbyVa
           binary_sbyVb
           mode_sbyVc
           eta_sbyVd]
        case
            GHC.List.elem
                GHC.Classes.$fEqChar pathSeparatorChar_rbxCK template_sbyVa
        of
        { GHC.Types.False ->
              let {
                ds_sbyVf [Occ=OnceL!, Dmd=<L,U(U,U)>]
                  :: ([GHC.Types.Char], [GHC.Types.Char])
                [LclId] =
                    [template_sbyVa] \u []
                        case GHC.List.reverse1 template_sbyVa GHC.Types.[] of sat_sbyVg {
                          __DEFAULT ->
                              case GHC.List.$wbreak lvl5_rbyQd sat_sbyVg of {
                                (#,#) ww1_sbyVi [Occ=Once*] ww2_sbyVj [Occ=Once!] ->
                                    case ww2_sbyVj of {
                                      [] ->
                                          let {
                                            sat_sbyVl [Occ=Once] :: [GHC.Types.Char]
                                            [LclId] =
                                                [ww1_sbyVi] \u [] GHC.List.reverse ww1_sbyVi;
                                          } in  (,) [sat_sbyVl GHC.Types.[]];
                                      : ds1_sbyVm [Occ=Once!] rest_sbyVn [Occ=Once] ->
                                          case ds1_sbyVm of {
                                            GHC.Types.C# ds2_sbyVp [Occ=Once!] ->
                                                case ds2_sbyVp of {
                                                  __DEFAULT -> lvl3_rbyQb;
                                                  '.'# ->
                                                      let {
                                                        sat_sbyVs [Occ=Once] :: [GHC.Types.Char]
                                                        [LclId] =
                                                            [ww1_sbyVi] \u []
                                                                GHC.List.reverse ww1_sbyVi; } in
                                                      let {
                                                        sat_sbyVt [Occ=Once] :: [GHC.Types.Char]
                                                        [LclId] =
                                                            CCCS :! [lvl4_rbyQc sat_sbyVs]; } in
                                                      let {
                                                        sat_sbyVr [Occ=Once] :: [GHC.Types.Char]
                                                        [LclId] =
                                                            [rest_sbyVn] \u []
                                                                GHC.List.reverse rest_sbyVn;
                                                      } in  (,) [sat_sbyVr sat_sbyVt];
                                                };
                                          };
                                    };
                              };
                        }; } in
              let {
                oflags_sbyVu [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Int.Int32
                [LclId] =
                    [binary_sbyVb] \u []
                        case lvl6_rbyQe of wild1_sbyVv {
                          GHC.Int.I32# x#_sbyVw [Occ=Once] ->
                              case binary_sbyVb of {
                                GHC.Types.False -> wild1_sbyVv;
                                GHC.Types.True ->
                                    case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                                      (#,#) _ [Occ=Dead] ds2_sbyVB [Occ=Once] ->
                                          case narrow32Int# [ds2_sbyVB] of sat_sbyVD {
                                            __DEFAULT ->
                                                case int2Word# [sat_sbyVD] of sat_sbyVE {
                                                  __DEFAULT ->
                                                      case int2Word# [x#_sbyVw] of sat_sbyVC {
                                                        __DEFAULT ->
                                                            case
                                                                or# [sat_sbyVC sat_sbyVE]
                                                            of
                                                            sat_sbyVF
                                                            { __DEFAULT ->
                                                                  case
                                                                      word2Int# [sat_sbyVF]
                                                                  of
                                                                  sat_sbyVG
                                                                  { __DEFAULT ->
                                                                        GHC.Int.I32# [sat_sbyVG];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        }; } in
              let {
                lvl12_sbyVH [Occ=OnceL, Dmd=<L,C(C1(U(U,U)))>]
                  :: Foreign.C.String.CString
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Foreign.C.Types.CInt #)
                [LclId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
                    [mode_sbyVc oflags_sbyVu] \r [f_sbyVI eta1_sbyVJ]
                        case f_sbyVI of {
                          GHC.Ptr.Ptr ds4_sbyVL [Occ=Once] ->
                              case oflags_sbyVu of {
                                GHC.Int.I32# ds6_sbyVN [Occ=Once] ->
                                    case mode_sbyVc of {
                                      GHC.Word.W32# ds8_sbyVP [Occ=Once] ->
                                          case
                                              __pkg_ccall base-4.11.0.0 [ds4_sbyVL
                                                                         ds6_sbyVN
                                                                         ds8_sbyVP
                                                                         eta1_sbyVJ]
                                          of
                                          { (#,#) ds10_sbyVS [Occ=Once] ds11_sbyVT [Occ=Once] ->
                                                case narrow32Int# [ds11_sbyVT] of sat_sbyVU {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sbyVV [Occ=Once] :: GHC.Int.Int32
                                                        [LclId] =
                                                            CCCS GHC.Int.I32#! [sat_sbyVU];
                                                      } in  (#,#) [ds10_sbyVS sat_sbyVV];
                                                };
                                          };
                                    };
                              };
                        }; } in
              let {
                lvl13_sbyVW [Occ=OnceL!] :: GHC.Types.Bool
                [LclId] =
                    [tmp_dir_sbyV9] \u []
                        let {
                          sat_sbyVX [Occ=OnceL] :: GHC.Types.Char
                          [LclId] =
                              [tmp_dir_sbyV9] \u []
                                  go_rbyQi tmp_dir_sbyV9 GHC.List.lastError; } in
                        let {
                          sat_sbyVY [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              CCCS :! [sat_sbyVX GHC.Types.[]];
                        } in 
                          GHC.List.elem
                              GHC.Classes.$fEqChar pathSeparatorChar_rbxCK sat_sbyVY;
              } in 
                let-no-escape {
                  exit_sbyVZ [Occ=OnceL!T[2], Dmd=<L,C(C1(U(U,U)))>]
                    :: GHC.Prim.State# GHC.Prim.RealWorld
                       -> Foreign.C.Error.Errno
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                             (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
                  [LclId[JoinId(2)],
                   Arity=2,
                   Str=<B,U><B,1*U(U)>x,
                   Unf=OtherCon []] =
                      sat-only [loc_sbyV8 tmp_dir_sbyV9] \r [ipv_sbyW0 errno_sbyW1]
                          lvl7_rbyQg errno_sbyW1 loc_sbyV8 tmp_dir_sbyV9 ipv_sbyW0;
                } in 
                  let-no-escape {
                    findTempName_sbyW2 [Occ=LoopBreakerT[1]]
                      :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [tmp_dir_sbyV9
                                  ds_sbyVf
                                  lvl12_sbyVH
                                  lvl13_sbyVW
                                  exit_sbyVZ
                                  findTempName_sbyW2] \r [s_sbyW3]
                            case __pkg_ccall base-4.11.0.0 [s_sbyW3] of {
                              (#,#) ds1_sbyW6 [Occ=Once] ds2_sbyW7 [Occ=Once] ->
                                  case tempCounter_rbxCH of {
                                    GHC.STRef.STRef r#_sbyW9 [Occ=Once] ->
                                        case
                                            atomicModifyMutVar# [r#_sbyW9 lvl8_rbyQh ds1_sbyW6]
                                        of
                                        { (#,#) ipv_sbyWb [Occ=Once] ipv1_sbyWc [Occ=Once!] ->
                                              case
                                                  GHC.IO.Encoding.getFileSystemEncoding ipv_sbyWb
                                              of
                                              { (#,#) ipv2_sbyWe [Occ=Once] ipv3_sbyWf [Occ=Once] ->
                                                    let {
                                                      filepath_sbyWg :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [tmp_dir_sbyV9
                                                           ds_sbyVf
                                                           lvl13_sbyVW
                                                           ds2_sbyW7
                                                           ipv1_sbyWc] \u []
                                                              case ds_sbyVf of {
                                                                (,) prefix_sbyWi [Occ=Once]
                                                                    suffix_sbyWj [Occ=Once] ->
                                                                    let {
                                                                      sat_sbyWx [Occ=Once,
                                                                                 Dmd=<L,1*U>]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [ds2_sbyW7
                                                                           ipv1_sbyWc
                                                                           suffix_sbyWj] \s []
                                                                              case
                                                                                  narrow32Int# [ds2_sbyW7]
                                                                              of
                                                                              sat_sbyWk
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        GHC.Show.$wshowSignedInt
                                                                                            0#
                                                                                            sat_sbyWk
                                                                                            GHC.Types.[]
                                                                                    of
                                                                                    { (#,#) ww5_sbyWm [Occ=Once]
                                                                                            ww6_sbyWn [Occ=Once] ->
                                                                                          let {
                                                                                            sat_sbyWw [Occ=Once,
                                                                                                       Dmd=<L,1*U>]
                                                                                              :: [GHC.Types.Char]
                                                                                            [LclId] =
                                                                                                [ipv1_sbyWc
                                                                                                 suffix_sbyWj] \s []
                                                                                                    let {
                                                                                                      sat_sbyWv [Occ=Once]
                                                                                                        :: [GHC.Types.Char]
                                                                                                      [LclId] =
                                                                                                          [ipv1_sbyWc
                                                                                                           suffix_sbyWj] \u []
                                                                                                              case
                                                                                                                  ipv1_sbyWc
                                                                                                              of
                                                                                                              { GHC.Types.I# ww3_sbyWq [Occ=Once] ->
                                                                                                                    case
                                                                                                                        GHC.Show.$wshowSignedInt
                                                                                                                            0#
                                                                                                                            ww3_sbyWq
                                                                                                                            GHC.Types.[]
                                                                                                                    of
                                                                                                                    { (#,#) ww8_sbyWs [Occ=Once]
                                                                                                                            ww9_sbyWt [Occ=Once] ->
                                                                                                                          let {
                                                                                                                            sat_sbyWu [Occ=Once]
                                                                                                                              :: [GHC.Types.Char]
                                                                                                                            [LclId] =
                                                                                                                                CCCS :! [ww8_sbyWs
                                                                                                                                         ww9_sbyWt];
                                                                                                                          } in 
                                                                                                                            GHC.Base.++
                                                                                                                                sat_sbyWu
                                                                                                                                suffix_sbyWj;
                                                                                                                    };
                                                                                                              };
                                                                                                    } in 
                                                                                                      GHC.CString.unpackAppendCString#
                                                                                                          lvl9_rbyQj
                                                                                                          sat_sbyWv; } in
                                                                                          let {
                                                                                            sat_sbyWo [Occ=Once]
                                                                                              :: [GHC.Types.Char]
                                                                                            [LclId] =
                                                                                                CCCS :! [ww5_sbyWm
                                                                                                         ww6_sbyWn];
                                                                                          } in 
                                                                                            GHC.Base.++
                                                                                                sat_sbyWo
                                                                                                sat_sbyWw;
                                                                                    };
                                                                              };
                                                                    } in 
                                                                      case
                                                                          GHC.Base.++
                                                                              prefix_sbyWi sat_sbyWx
                                                                      of
                                                                      wild4_sbyWy
                                                                      { [] -> tmp_dir_sbyV9;
                                                                        : _ [Occ=Dead]
                                                                          _ [Occ=Dead] ->
                                                                            case
                                                                                tmp_dir_sbyV9
                                                                            of
                                                                            wild5_sbyWB
                                                                            { [] -> wild4_sbyWy;
                                                                              : _ [Occ=Dead]
                                                                                _ [Occ=Dead] ->
                                                                                  case
                                                                                      lvl13_sbyVW
                                                                                  of
                                                                                  { GHC.Types.False ->
                                                                                        let {
                                                                                          sat_sbyWF [Occ=Once]
                                                                                            :: [GHC.Types.Char]
                                                                                          [LclId] =
                                                                                              CCCS :! [pathSeparatorChar_rbxCK
                                                                                                       wild4_sbyWy];
                                                                                        } in 
                                                                                          GHC.Base.++
                                                                                              wild5_sbyWB
                                                                                              sat_sbyWF;
                                                                                    GHC.Types.True ->
                                                                                        GHC.Base.++
                                                                                            wild5_sbyWB
                                                                                            wild4_sbyWy;
                                                                                  };
                                                                            };
                                                                      };
                                                              };
                                                    } in 
                                                      case
                                                          GHC.Foreign.charIsRepresentable3
                                                              ipv3_sbyWf
                                                              filepath_sbyWg
                                                              lvl12_sbyVH
                                                              ipv2_sbyWe
                                                      of
                                                      { (#,#) ipv4_sbyWH [Occ=Once*]
                                                              ipv5_sbyWI [Occ=Once] ->
                                                            case ipv5_sbyWI of wild3_sbyWJ {
                                                              GHC.Int.I32# x_sbyWK [Occ=Once] ->
                                                                  let-no-escape {
                                                                    $j_sbyWL [Occ=Once*!T[2],
                                                                              Dmd=<L,1*C1(C1(U(U,U)))>]
                                                                      :: GHC.Prim.State#
                                                                           GHC.Prim.RealWorld
                                                                         -> System.IO.OpenNewFileResult
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               (GHC.IO.FilePath,
                                                                                GHC.IO.Handle.Types.Handle) #)
                                                                    [LclId[JoinId(2)],
                                                                     Arity=2,
                                                                     Str=<S,U><S,1*U>,
                                                                     Unf=OtherCon []] =
                                                                        sat-only [exit_sbyVZ
                                                                                  findTempName_sbyW2
                                                                                  filepath_sbyWg] \r [ipv6_sbyWM
                                                                                                      ipv7_sbyWN]
                                                                            case ipv7_sbyWN of {
                                                                              System.IO.NewFileCreated fd_sbyWP [Occ=Once] ->
                                                                                  case
                                                                                      GHC.IO.FD.$wmkFD
                                                                                          fd_sbyWP
                                                                                          GHC.IO.IOMode.ReadWriteMode
                                                                                          GHC.Base.Nothing
                                                                                          GHC.Types.True
                                                                                          ipv6_sbyWM
                                                                                  of
                                                                                  { (#,#) ipv8_sbyWR [Occ=Once]
                                                                                          ipv9_sbyWS [Occ=Once!] ->
                                                                                        case
                                                                                            ipv9_sbyWS
                                                                                        of
                                                                                        { (,) fD_sbyWU [Occ=Once]
                                                                                              fd_type_sbyWV [Occ=Once] ->
                                                                                              case
                                                                                                  GHC.IO.Encoding.getLocaleEncoding1
                                                                                              of
                                                                                              { (,) getLocaleEncoding3_sbyWX [Occ=Once]
                                                                                                    _ [Occ=Dead] ->
                                                                                                    case
                                                                                                        getLocaleEncoding3_sbyWX
                                                                                                            ipv8_sbyWR
                                                                                                    of
                                                                                                    { (#,#) ipv10_sbyX0 [Occ=Once]
                                                                                                            ipv11_sbyX1 [Occ=Once] ->
                                                                                                          let {
                                                                                                            sat_sbyX2 [Occ=Once]
                                                                                                              :: GHC.Base.Maybe
                                                                                                                   GHC.IO.Encoding.Types.TextEncoding
                                                                                                            [LclId] =
                                                                                                                CCCS GHC.Base.Just! [ipv11_sbyX1];
                                                                                                          } in 
                                                                                                            case
                                                                                                                GHC.IO.Handle.FD.fdToHandle5
                                                                                                                    fD_sbyWU
                                                                                                                    fd_type_sbyWV
                                                                                                                    filepath_sbyWg
                                                                                                                    GHC.IO.IOMode.ReadWriteMode
                                                                                                                    GHC.Types.False
                                                                                                                    sat_sbyX2
                                                                                                                    ipv10_sbyX0
                                                                                                            of
                                                                                                            { (#,#) ipv12_sbyX4 [Occ=Once]
                                                                                                                    ipv13_sbyX5 [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sbyX6 [Occ=Once]
                                                                                                                      :: ([GHC.Types.Char],
                                                                                                                          GHC.IO.Handle.Types.Handle)
                                                                                                                    [LclId] =
                                                                                                                        CCCS (,)! [filepath_sbyWg
                                                                                                                                   ipv13_sbyX5];
                                                                                                                  } in 
                                                                                                                    (#,#) [ipv12_sbyX4
                                                                                                                           sat_sbyX6];
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                  };
                                                                              System.IO.FileExists ->
                                                                                  findTempName_sbyW2
                                                                                      ipv6_sbyWM;
                                                                              System.IO.OpenNewError errno_sbyX7 [Occ=Once] ->
                                                                                  exit_sbyVZ
                                                                                      ipv6_sbyWM
                                                                                      errno_sbyX7;
                                                                            };
                                                                  } in 
                                                                    case <# [x_sbyWK 0#] of {
                                                                      __DEFAULT ->
                                                                          let {
                                                                            sat_sbyX9 [Occ=Once]
                                                                              :: System.IO.OpenNewFileResult
                                                                            [LclId] =
                                                                                CCCS System.IO.NewFileCreated! [wild3_sbyWJ];
                                                                          } in 
                                                                            $j_sbyWL
                                                                                ipv4_sbyWH
                                                                                sat_sbyX9;
                                                                      1# ->
                                                                          case
                                                                              __pkg_ccall base-4.11.0.0 [ipv4_sbyWH]
                                                                          of
                                                                          { (#,#) ds7_sbyXc [Occ=Once*]
                                                                                  ds8_sbyXd [Occ=Once] ->
                                                                                case
                                                                                    narrow32Int# [ds8_sbyXd]
                                                                                of
                                                                                wild5_sbyXe
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_sbyXf [Occ=Once]
                                                                                          :: Foreign.C.Error.Errno
                                                                                        [LclId] =
                                                                                            CCCS GHC.Int.I32#! [wild5_sbyXe]; } in
                                                                                      let {
                                                                                        sat_sbyXg [Occ=Once]
                                                                                          :: System.IO.OpenNewFileResult
                                                                                        [LclId] =
                                                                                            CCCS System.IO.OpenNewError! [sat_sbyXf];
                                                                                      } in 
                                                                                        $j_sbyWL
                                                                                            ds7_sbyXc
                                                                                            sat_sbyXg;
                                                                                  17# ->
                                                                                      $j_sbyWL
                                                                                          ds7_sbyXc
                                                                                          System.IO.FileExists;
                                                                                };
                                                                          };
                                                                    };
                                                            };
                                                      };
                                              };
                                        };
                                  };
                            };
                  } in  findTempName_sbyW2 eta_sbyVd;
          GHC.Types.True -> lvl11_rbyQl eta_sbyVd template_sbyVa;
        };

System.IO.openBinaryTempFileWithDefaultPermissions4
  :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openBinaryTempFileWithDefaultPermissions"#;

System.IO.openBinaryTempFileWithDefaultPermissions3
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            System.IO.openBinaryTempFileWithDefaultPermissions4;

System.IO.openBinaryTempFileWithDefaultPermissions2
  :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [438##];

System.IO.openBinaryTempFileWithDefaultPermissions1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [tmp_dir_sbyXh template_sbyXi eta_B1]
        System.IO.openBinaryTempFile5
            System.IO.openBinaryTempFileWithDefaultPermissions3
            tmp_dir_sbyXh
            template_sbyXi
            GHC.Types.True
            System.IO.openBinaryTempFileWithDefaultPermissions2
            eta_B1;

System.IO.openBinaryTempFileWithDefaultPermissions
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.IO (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.IO.openBinaryTempFileWithDefaultPermissions1
            eta_B3 eta_B2 eta_B1;

System.IO.openTempFileWithDefaultPermissions3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openTempFileWithDefaultPermissions"#;

System.IO.openTempFileWithDefaultPermissions2 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            System.IO.openTempFileWithDefaultPermissions3;

System.IO.openTempFileWithDefaultPermissions1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [tmp_dir_sbyXj template_sbyXk eta_B1]
        System.IO.openBinaryTempFile5
            System.IO.openTempFileWithDefaultPermissions2
            tmp_dir_sbyXj
            template_sbyXk
            GHC.Types.False
            System.IO.openBinaryTempFileWithDefaultPermissions2
            eta_B1;

System.IO.openTempFileWithDefaultPermissions
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.IO (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.IO.openTempFileWithDefaultPermissions1 eta_B3 eta_B2 eta_B1;

System.IO.openBinaryTempFile4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openBinaryTempFile"#;

System.IO.openBinaryTempFile3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.IO.openBinaryTempFile4;

System.IO.openBinaryTempFile2 :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [384##];

System.IO.openBinaryTempFile1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [tmp_dir_sbyXl template_sbyXm eta_B1]
        System.IO.openBinaryTempFile5
            System.IO.openBinaryTempFile3
            tmp_dir_sbyXl
            template_sbyXm
            GHC.Types.True
            System.IO.openBinaryTempFile2
            eta_B1;

System.IO.openBinaryTempFile
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.IO (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.IO.openBinaryTempFile1 eta_B3 eta_B2 eta_B1;

System.IO.openTempFile3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openTempFile"#;

System.IO.openTempFile2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.IO.openTempFile3;

System.IO.openTempFile1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [tmp_dir_sbyXn template_sbyXo eta_B1]
        System.IO.openBinaryTempFile5
            System.IO.openTempFile2
            tmp_dir_sbyXn
            template_sbyXo
            GHC.Types.False
            System.IO.openBinaryTempFile2
            eta_B1;

System.IO.openTempFile
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.IO (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.IO.openTempFile1 eta_B3 eta_B2 eta_B1;

System.IO.NewFileCreated
  :: Foreign.C.Types.CInt -> System.IO.OpenNewFileResult
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] System.IO.NewFileCreated [eta_B1];

System.IO.FileExists :: System.IO.OpenNewFileResult
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE System.IO.FileExists! [];

System.IO.OpenNewError
  :: Foreign.C.Error.Errno -> System.IO.OpenNewFileResult
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] System.IO.OpenNewError [eta_B1];


==================== STG syntax: ====================
2018-03-16 16:06:30.00345223 UTC

System.IO.putChar1
  :: GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U(U)>, Unf=OtherCon []] =
    [] \r [c_sbyQn void_0E]
        GHC.IO.Handle.Text.hPutChar1
            GHC.IO.Handle.FD.stdout c_sbyQn GHC.Prim.void#;

System.IO.putChar :: GHC.Types.Char -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U(U)>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] System.IO.putChar1 eta_B2 GHC.Prim.void#;

System.IO.putStr :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [s_sbyQo void_0E]
        GHC.IO.Handle.Text.hPutStr
            GHC.IO.Handle.FD.stdout s_sbyQo GHC.Prim.void#;

System.IO.putStrLn :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [s_sbyQp void_0E]
        GHC.IO.Handle.Text.hPutStrLn
            GHC.IO.Handle.FD.stdout s_sbyQp GHC.Prim.void#;

System.IO.print
  :: forall a. GHC.Show.Show a => a -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*U(A,1*C1(U),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dShow_sbyQq x_sbyQr]
        let {
          sat_sbyQs [Occ=Once] :: GHC.Base.String
          [LclId] =
              [$dShow_sbyQq x_sbyQr] \u [] GHC.Show.show $dShow_sbyQq x_sbyQr;
        } in 
          GHC.IO.Handle.Text.hPutStr'
              GHC.IO.Handle.FD.stdout sat_sbyQs GHC.Types.True;

System.IO.getChar1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Char #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.Text.hGetChar6
            GHC.IO.Handle.FD.stdin
            GHC.IO.Handle.Text.hGetChar2
            GHC.Prim.void#;

System.IO.getChar :: GHC.Types.IO GHC.Types.Char
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E] System.IO.getChar1 GHC.Prim.void#;

System.IO.getLine1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.Text.hGetLine4
            GHC.IO.Handle.FD.stdin
            GHC.IO.Handle.Text.hGetLine2
            GHC.Prim.void#;

System.IO.getLine :: GHC.Types.IO GHC.Base.String
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E] System.IO.getLine1 GHC.Prim.void#;

System.IO.getContents1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.IO.Handle.Text.hGetContents1
            GHC.IO.Handle.FD.stdin GHC.Prim.void#;

System.IO.getContents :: GHC.Types.IO GHC.Base.String
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E] System.IO.getContents1 GHC.Prim.void#;

System.IO.localeEncoding :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.initLocaleEncoding;

System.IO.hReady2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

System.IO.hReady1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbyQt void_0E]
        GHC.IO.Handle.Text.hWaitForInput1
            h_sbyQt System.IO.hReady2 GHC.Prim.void#;

System.IO.hReady
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] System.IO.hReady1 eta_B2 GHC.Prim.void#;

System.IO.hPrint
  :: forall a.
     GHC.Show.Show a =>
     GHC.IO.Handle.Types.Handle -> a -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Str=<L,1*U(A,1*C1(U),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sbyQv hdl_sbyQw eta_sbyQx]
        let {
          sat_sbyQy [Occ=Once] :: GHC.Base.String
          [LclId] =
              [$dShow_sbyQv eta_sbyQx] \u []
                  GHC.Show.show $dShow_sbyQv eta_sbyQx;
        } in 
          GHC.IO.Handle.Text.hPutStr' hdl_sbyQw sat_sbyQy GHC.Types.True;

System.IO.appendFile2
  :: forall r.
     GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> (GHC.IO.Handle.Types.Handle -> GHC.Types.IO r)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, r #)
[GblId,
 Arity=4,
 Str=<L,U><L,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [name_sbyQz mode_sbyQA eta_sbyQB void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sbyQF [Occ=Once!] ->
              case ipv1_sbyQF of {
                __DEFAULT ->
                    case
                        GHC.IO.Handle.FD.openFile1 name_sbyQz mode_sbyQA GHC.Prim.void#
                    of
                    { Unit# ipv3_sbyQJ ->
                          let {
                            sat_sbyQR [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [ipv3_sbyQJ] \r [e1_sbyQM void_0E]
                                    case GHC.IO.Handle.hClose1 ipv3_sbyQJ GHC.Prim.void# of {
                                      Unit# _ [Occ=Dead] -> raiseIO# [e1_sbyQM GHC.Prim.void#];
                                    }; } in
                          let {
                            sat_sbyQK [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [eta_sbyQB ipv3_sbyQJ] \u [] eta_sbyQB ipv3_sbyQJ; } in
                          let {
                            sat_sbyQL [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [sat_sbyQK] \r [void_0E]
                                    maskAsyncExceptions# [sat_sbyQK GHC.Prim.void#];
                          } in 
                            case catch# [sat_sbyQL sat_sbyQR GHC.Prim.void#] of {
                              Unit# ipv5_sbyQU [Occ=Once] ->
                                  case GHC.IO.Handle.hClose1 ipv3_sbyQJ GHC.Prim.void# of {
                                    Unit# _ [Occ=Dead] -> Unit# [ipv5_sbyQU];
                                  };
                            };
                    };
                0# ->
                    let {
                      sat_sbyRg [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                      [LclId] =
                          [name_sbyQz mode_sbyQA eta_sbyQB] \r [void_0E]
                              case
                                  GHC.IO.Handle.FD.openFile1 name_sbyQz mode_sbyQA GHC.Prim.void#
                              of
                              { Unit# ipv3_sbyR1 ->
                                    let {
                                      sat_sbyR9 [Occ=Once]
                                        :: GHC.Exception.SomeException
                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                                      [LclId] =
                                          [ipv3_sbyR1] \r [e1_sbyR4 void_0E]
                                              case
                                                  GHC.IO.Handle.hClose1 ipv3_sbyR1 GHC.Prim.void#
                                              of
                                              { Unit# _ [Occ=Dead] ->
                                                    raiseIO# [e1_sbyR4 GHC.Prim.void#];
                                              }; } in
                                    let {
                                      sat_sbyR2 [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                                      [LclId] =
                                          [eta_sbyQB ipv3_sbyR1] \u [] eta_sbyQB ipv3_sbyR1; } in
                                    let {
                                      sat_sbyR3 [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                                      [LclId] =
                                          [sat_sbyR2] \r [void_0E]
                                              unmaskAsyncExceptions# [sat_sbyR2 GHC.Prim.void#];
                                    } in 
                                      case catch# [sat_sbyR3 sat_sbyR9 GHC.Prim.void#] of {
                                        Unit# ipv5_sbyRc [Occ=Once] ->
                                            case
                                                GHC.IO.Handle.hClose1 ipv3_sbyR1 GHC.Prim.void#
                                            of
                                            { Unit# _ [Occ=Dead] -> Unit# [ipv5_sbyRc];
                                            };
                                      };
                              };
                    } in  maskAsyncExceptions# [sat_sbyRg GHC.Prim.void#];
                1# ->
                    case
                        GHC.IO.Handle.FD.openFile1 name_sbyQz mode_sbyQA GHC.Prim.void#
                    of
                    { Unit# ipv3_sbyRj ->
                          let {
                            sat_sbyRr [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [ipv3_sbyRj] \r [e1_sbyRm void_0E]
                                    case GHC.IO.Handle.hClose1 ipv3_sbyRj GHC.Prim.void# of {
                                      Unit# _ [Occ=Dead] -> raiseIO# [e1_sbyRm GHC.Prim.void#];
                                    }; } in
                          let {
                            sat_sbyRk [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [eta_sbyQB ipv3_sbyRj] \u [] eta_sbyQB ipv3_sbyRj; } in
                          let {
                            sat_sbyRl [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [sat_sbyRk] \r [void_0E]
                                    maskUninterruptible# [sat_sbyRk GHC.Prim.void#];
                          } in 
                            case catch# [sat_sbyRl sat_sbyRr GHC.Prim.void#] of {
                              Unit# ipv5_sbyRu [Occ=Once] ->
                                  case GHC.IO.Handle.hClose1 ipv3_sbyRj GHC.Prim.void# of {
                                    Unit# _ [Occ=Dead] -> Unit# [ipv5_sbyRu];
                                  };
                            };
                    };
              };
        };

System.IO.withFile
  :: forall r.
     GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> (GHC.IO.Handle.Types.Handle -> GHC.Types.IO r)
     -> GHC.Types.IO r
[GblId,
 Arity=4,
 Str=<L,U><L,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        System.IO.appendFile2 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

System.IO.appendFile1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [f_sbyRy txt_sbyRz void_0E]
        let {
          sat_sbyRC [Occ=Once]
            :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
          [LclId] =
              [txt_sbyRz] \r [hdl_sbyRB void_0E]
                  GHC.IO.Handle.Text.hPutStr hdl_sbyRB txt_sbyRz GHC.Prim.void#;
        } in 
          System.IO.appendFile2
              f_sbyRy GHC.IO.IOMode.AppendMode sat_sbyRC GHC.Prim.void#;

System.IO.appendFile
  :: GHC.IO.FilePath -> GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.IO.appendFile1 eta_B3 eta_B2 GHC.Prim.void#;

System.IO.writeFile1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [f_sbyRD txt_sbyRE void_0E]
        let {
          sat_sbyRH [Occ=Once]
            :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
          [LclId] =
              [txt_sbyRE] \r [hdl_sbyRG void_0E]
                  GHC.IO.Handle.Text.hPutStr hdl_sbyRG txt_sbyRE GHC.Prim.void#;
        } in 
          System.IO.appendFile2
              f_sbyRD GHC.IO.IOMode.WriteMode sat_sbyRH GHC.Prim.void#;

System.IO.writeFile
  :: GHC.IO.FilePath -> GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.IO.writeFile1 eta_B3 eta_B2 GHC.Prim.void#;

System.IO.withBinaryFile1
  :: forall r.
     GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> (GHC.IO.Handle.Types.Handle -> GHC.Types.IO r)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, r #)
[GblId,
 Arity=4,
 Str=<L,U><L,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [name_sbyRI mode_sbyRJ eta_sbyRK void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sbyRO [Occ=Once!] ->
              case ipv1_sbyRO of {
                __DEFAULT ->
                    case
                        GHC.IO.Handle.FD.openBinaryFile1
                            name_sbyRI mode_sbyRJ GHC.Prim.void#
                    of
                    { Unit# ipv3_sbyRS ->
                          let {
                            sat_sbyS0 [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [ipv3_sbyRS] \r [e1_sbyRV void_0E]
                                    case GHC.IO.Handle.hClose1 ipv3_sbyRS GHC.Prim.void# of {
                                      Unit# _ [Occ=Dead] -> raiseIO# [e1_sbyRV GHC.Prim.void#];
                                    }; } in
                          let {
                            sat_sbyRT [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [eta_sbyRK ipv3_sbyRS] \u [] eta_sbyRK ipv3_sbyRS; } in
                          let {
                            sat_sbyRU [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [sat_sbyRT] \r [void_0E]
                                    maskAsyncExceptions# [sat_sbyRT GHC.Prim.void#];
                          } in 
                            case catch# [sat_sbyRU sat_sbyS0 GHC.Prim.void#] of {
                              Unit# ipv5_sbyS3 [Occ=Once] ->
                                  case GHC.IO.Handle.hClose1 ipv3_sbyRS GHC.Prim.void# of {
                                    Unit# _ [Occ=Dead] -> Unit# [ipv5_sbyS3];
                                  };
                            };
                    };
                0# ->
                    let {
                      sat_sbySp [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                      [LclId] =
                          [name_sbyRI mode_sbyRJ eta_sbyRK] \r [void_0E]
                              case
                                  GHC.IO.Handle.FD.openBinaryFile1
                                      name_sbyRI mode_sbyRJ GHC.Prim.void#
                              of
                              { Unit# ipv3_sbySa ->
                                    let {
                                      sat_sbySi [Occ=Once]
                                        :: GHC.Exception.SomeException
                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                                      [LclId] =
                                          [ipv3_sbySa] \r [e1_sbySd void_0E]
                                              case
                                                  GHC.IO.Handle.hClose1 ipv3_sbySa GHC.Prim.void#
                                              of
                                              { Unit# _ [Occ=Dead] ->
                                                    raiseIO# [e1_sbySd GHC.Prim.void#];
                                              }; } in
                                    let {
                                      sat_sbySb [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                                      [LclId] =
                                          [eta_sbyRK ipv3_sbySa] \u [] eta_sbyRK ipv3_sbySa; } in
                                    let {
                                      sat_sbySc [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                                      [LclId] =
                                          [sat_sbySb] \r [void_0E]
                                              unmaskAsyncExceptions# [sat_sbySb GHC.Prim.void#];
                                    } in 
                                      case catch# [sat_sbySc sat_sbySi GHC.Prim.void#] of {
                                        Unit# ipv5_sbySl [Occ=Once] ->
                                            case
                                                GHC.IO.Handle.hClose1 ipv3_sbySa GHC.Prim.void#
                                            of
                                            { Unit# _ [Occ=Dead] -> Unit# [ipv5_sbySl];
                                            };
                                      };
                              };
                    } in  maskAsyncExceptions# [sat_sbySp GHC.Prim.void#];
                1# ->
                    case
                        GHC.IO.Handle.FD.openBinaryFile1
                            name_sbyRI mode_sbyRJ GHC.Prim.void#
                    of
                    { Unit# ipv3_sbySs ->
                          let {
                            sat_sbySA [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [ipv3_sbySs] \r [e1_sbySv void_0E]
                                    case GHC.IO.Handle.hClose1 ipv3_sbySs GHC.Prim.void# of {
                                      Unit# _ [Occ=Dead] -> raiseIO# [e1_sbySv GHC.Prim.void#];
                                    }; } in
                          let {
                            sat_sbySt [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [eta_sbyRK ipv3_sbySs] \u [] eta_sbyRK ipv3_sbySs; } in
                          let {
                            sat_sbySu [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [sat_sbySt] \r [void_0E]
                                    maskUninterruptible# [sat_sbySt GHC.Prim.void#];
                          } in 
                            case catch# [sat_sbySu sat_sbySA GHC.Prim.void#] of {
                              Unit# ipv5_sbySD [Occ=Once] ->
                                  case GHC.IO.Handle.hClose1 ipv3_sbySs GHC.Prim.void# of {
                                    Unit# _ [Occ=Dead] -> Unit# [ipv5_sbySD];
                                  };
                            };
                    };
              };
        };

System.IO.withBinaryFile
  :: forall r.
     GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> (GHC.IO.Handle.Types.Handle -> GHC.Types.IO r)
     -> GHC.Types.IO r
[GblId,
 Arity=4,
 Str=<L,U><L,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        System.IO.withBinaryFile1 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

lvl_rbyQ6
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IORef.IORef GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_sbySI {
          (##) ->
              case newMutVar# [System.IO.hReady2 GHC.Prim.void#] of {
                Unit# ipv1_sbySL [Occ=Once] ->
                    let {
                      sat_sbySM [Occ=Once] :: GHC.IORef.IORef GHC.Types.Int
                      [LclId] =
                          CCCS GHC.STRef.STRef! [ipv1_sbySL];
                    } in  Unit# [sat_sbySM];
              };
        };

tempCounter_rbxCH :: GHC.IORef.IORef GHC.Types.Int
[GblId] =
    [] \u []
        case lvl_rbyQ6 GHC.Prim.realWorld# of {
          Unit# ipv1_sbySP [Occ=Once] -> ipv1_sbySP;
        };

pathSeparatorChar_rbxCK :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['/'#];

System.IO.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

System.IO.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$trModule4];

System.IO.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "System.IO"#;

System.IO.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$trModule2];

System.IO.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [System.IO.$trModule3
                                     System.IO.$trModule1];

$krep_rbyQ7 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.C.Error.$tcErrno
                                              GHC.Types.[]];

$krep1_rbyQ8 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.C.Types.$tcCInt
                                              GHC.Types.[]];

System.IO.$tcOpenNewFileResult2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OpenNewFileResult"#;

System.IO.$tcOpenNewFileResult1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$tcOpenNewFileResult2];

System.IO.$tcOpenNewFileResult :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9627069439367662246##
                                    2547759174955940786##
                                    System.IO.$trModule
                                    System.IO.$tcOpenNewFileResult1
                                    0#
                                    GHC.Types.krep$*];

System.IO.$tc'FileExists1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [System.IO.$tcOpenNewFileResult
                                              GHC.Types.[]];

System.IO.$tc'FileExists3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FileExists"#;

System.IO.$tc'FileExists2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$tc'FileExists3];

System.IO.$tc'FileExists :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6704133186904346962##
                                    16997416543076271011##
                                    System.IO.$trModule
                                    System.IO.$tc'FileExists2
                                    0#
                                    System.IO.$tc'FileExists1];

System.IO.$tc'NewFileCreated1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_rbyQ8
                                         System.IO.$tc'FileExists1];

System.IO.$tc'NewFileCreated3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'NewFileCreated"#;

System.IO.$tc'NewFileCreated2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$tc'NewFileCreated3];

System.IO.$tc'NewFileCreated :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9070829168557028496##
                                    15570227817593865145##
                                    System.IO.$trModule
                                    System.IO.$tc'NewFileCreated2
                                    0#
                                    System.IO.$tc'NewFileCreated1];

System.IO.$tc'OpenNewError1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rbyQ7
                                         System.IO.$tc'FileExists1];

System.IO.$tc'OpenNewError3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'OpenNewError"#;

System.IO.$tc'OpenNewError2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$tc'OpenNewError3];

System.IO.$tc'OpenNewError :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [300310999495895268##
                                    12582581010413704951##
                                    System.IO.$trModule
                                    System.IO.$tc'OpenNewError2
                                    0#
                                    System.IO.$tc'OpenNewError1];

lvl1_rbyQ9 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionFixIOException_$ctoException
            GHC.IO.Exception.FixIOException;

System.IO.fixIO3
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E] raiseIO# [lvl1_rbyQ9 GHC.Prim.void#];

System.IO.fixIO2
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [e1_sbySR]
        case e1_sbySR of wild_sbySS {
          GHC.Exception.SomeException $dException1_sbyST [Occ=Once]
                                      e3_sbySU [Occ=Once] ->
              case GHC.Exception.$p1Exception $dException1_sbyST of sat_sbySV {
                __DEFAULT ->
                    case
                        Data.Typeable.Internal.sameTypeRep
                            sat_sbySV GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3
                    of
                    { GHC.Types.False ->
                          let {
                            sat_sbySX [Occ=OnceT[0]]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_abxYz #)
                            [LclId] =
                                [wild_sbySS] \r [void_0E] raiseIO# [wild_sbySS GHC.Prim.void#];
                          } in  sat_sbySX;
                      GHC.Types.True ->
                          case e3_sbySU of {
                            GHC.IO.Exception.BlockedIndefinitelyOnMVar -> System.IO.fixIO3;
                          };
                    };
              };
        };

System.IO.fixIO1
  :: forall a.
     (a -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*C1(C1(U(U,U)))><S,U>, Unf=OtherCon []] =
    [] \r [k_sbySZ void_0E]
        case newMVar# [GHC.Prim.void#] of {
          Unit# ipv1_sbyT3 ->
              let {
                sat_sbyT7 [Occ=Once] :: GHC.Types.IO a_abxYz
                [LclId] =
                    [ipv1_sbyT3] \r [void_0E]
                        let {
                          sat_sbyT6 [Occ=Once]
                            :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_abxYz #)
                          [LclId] =
                              [ipv1_sbyT3] \r [void_0E] readMVar# [ipv1_sbyT3 GHC.Prim.void#];
                        } in  catch# [sat_sbyT6 System.IO.fixIO2 GHC.Prim.void#];
              } in 
                case
                    GHC.IO.Unsafe.unsafeDupableInterleaveIO sat_sbyT7 GHC.Prim.void#
                of
                { Unit# ipv3_sbyTa [Occ=Once] ->
                      case k_sbySZ ipv3_sbyTa GHC.Prim.void# of {
                        Unit# ipv5_sbyTd ->
                            case putMVar# [ipv1_sbyT3 ipv5_sbyTd GHC.Prim.void#] of s2#_sbyTe {
                              (##) -> Unit# [ipv5_sbyTd];
                            };
                      };
                };
        };

System.IO.fixIO
  :: forall a. (a -> GHC.Types.IO a) -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*C1(C1(U(U,U)))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] System.IO.fixIO1 eta_B2 GHC.Prim.void#;

System.IO.readIO9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Prelude.readIO: no parse"#;

System.IO.readIO8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.IO.readIO9;

System.IO.readIO7 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.UserError
                                             GHC.Types.[]
                                             System.IO.readIO8
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

System.IO.readIO6 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            System.IO.readIO7;

System.IO.readIO5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Prelude.readIO: ambiguous parse"#;

System.IO.readIO4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.IO.readIO5;

System.IO.readIO3 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.UserError
                                             GHC.Types.[]
                                             System.IO.readIO4
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

System.IO.readIO2 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            System.IO.readIO3;

System.IO.readIO10 [Occ=LoopBreaker]
  :: forall a. [(a, GHC.Base.String)] -> [a]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbyTf]
        case ds_sbyTf of {
          [] -> [] [];
          : y_sbyTh [Occ=Once!] ys_sbyTi [Occ=Once] ->
              case y_sbyTh of {
                (,) x_sbyTk [Occ=OnceL] t_sbyTl [Occ=Once] ->
                    let {
                      lvl12_sbyTm [Occ=OnceL] :: [a_abxZC]
                      [LclId, Unf=OtherCon []] =
                          CCCS :! [x_sbyTk GHC.Types.[]]; } in
                    let {
                      z_sbyTn [Occ=OnceL] :: [a_abxZC]
                      [LclId] =
                          [ys_sbyTi] \u [] System.IO.readIO10 ys_sbyTi; } in
                    let {
                      go1_sbyTo [Occ=LoopBreaker]
                        :: [(GHC.Base.String, GHC.Base.String)] -> [a_abxZC]
                      [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                          sat-only [lvl12_sbyTm z_sbyTn go1_sbyTo] \r [ds1_sbyTp]
                              case ds1_sbyTp of {
                                [] -> z_sbyTn;
                                : y1_sbyTr [Occ=Once!] ys1_sbyTs [Occ=Once*] ->
                                    case y1_sbyTr of {
                                      (,) ds2_sbyTu [Occ=Once!] ds3_sbyTv [Occ=Once!] ->
                                          case ds2_sbyTu of {
                                            [] ->
                                                case ds3_sbyTv of {
                                                  [] ->
                                                      let {
                                                        sat_sbyTy [Occ=Once, Dmd=<L,1*U>]
                                                          :: [a_abxZC]
                                                        [LclId] =
                                                            [go1_sbyTo ys1_sbyTs] \s []
                                                                go1_sbyTo ys1_sbyTs;
                                                      } in  GHC.Base.++ lvl12_sbyTm sat_sbyTy;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      go1_sbyTo ys1_sbyTs;
                                                };
                                            : _ [Occ=Dead] _ [Occ=Dead] -> go1_sbyTo ys1_sbyTs;
                                          };
                                    };
                              };
                    } in 
                      case
                          Text.ParserCombinators.ReadP.run GHC.Read.lex1 t_sbyTl
                      of
                      sat_sbyTD
                      { __DEFAULT -> go1_sbyTo sat_sbyTD;
                      };
              };
        };

System.IO.readIO1
  :: forall a.
     GHC.Read.Read a =>
     GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Str=<S(C(C(S))LLL),1*U(1*C1(C1(U)),A,A,A)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_sbyTE s_sbyTF void_0E]
        case
            GHC.Read.readsPrec
                $dRead_sbyTE Text.ParserCombinators.ReadPrec.minPrec s_sbyTF
        of
        sat_sbyTH
        { __DEFAULT ->
              case System.IO.readIO10 sat_sbyTH of {
                [] -> raiseIO# [System.IO.readIO6 GHC.Prim.void#];
                : x_sbyTJ [Occ=Once] ds_sbyTK [Occ=Once!] ->
                    case ds_sbyTK of {
                      [] -> Unit# [x_sbyTJ];
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          raiseIO# [System.IO.readIO2 GHC.Prim.void#];
                    };
              };
        };

System.IO.readIO
  :: forall a. GHC.Read.Read a => GHC.Base.String -> GHC.Types.IO a
[GblId,
 Arity=3,
 Str=<S(C(C(S))LLL),1*U(1*C1(C1(U)),A,A,A)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.IO.readIO1 eta_B3 eta_B2 GHC.Prim.void#;

System.IO.readLn1
  :: forall a.
     GHC.Read.Read a =>
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(U)),A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_sbyTO void_0E]
        case
            GHC.IO.Handle.Internals.wantReadableHandle_1
                GHC.IO.Handle.Text.hGetLine4
                GHC.IO.Handle.FD.stdin
                GHC.IO.Handle.Text.hGetLine2
                GHC.Prim.void#
        of
        { Unit# ipv1_sbyTS [Occ=Once] ->
              System.IO.readIO1 $dRead_sbyTO ipv1_sbyTS GHC.Prim.void#;
        };

System.IO.readLn :: forall a. GHC.Read.Read a => GHC.Types.IO a
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(U)),A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] System.IO.readLn1 eta_B2 GHC.Prim.void#;

System.IO.readFile1
  :: GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [name_sbyTT void_0E]
        case
            GHC.IO.Handle.FD.openFile1
                name_sbyTT GHC.IO.IOMode.ReadMode GHC.Prim.void#
        of
        { Unit# ipv1_sbyTX [Occ=Once] ->
              GHC.IO.Handle.Text.hGetContents1 ipv1_sbyTX GHC.Prim.void#;
        };

System.IO.readFile
  :: GHC.IO.FilePath -> GHC.Types.IO GHC.Base.String
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] System.IO.readFile1 eta_B2 GHC.Prim.void#;

System.IO.interact1
  :: (GHC.Base.String -> GHC.Base.String)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [f_sbyTY void_0E]
        case
            GHC.IO.Handle.Text.hGetContents1
                GHC.IO.Handle.FD.stdin GHC.Prim.void#
        of
        { Unit# ipv1_sbyU2 [Occ=Once] ->
              let {
                sat_sbyU3 [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
                [LclId] =
                    [f_sbyTY ipv1_sbyU2] \s [] f_sbyTY ipv1_sbyU2;
              } in 
                GHC.IO.Handle.Text.hPutStr'
                    GHC.IO.Handle.FD.stdout sat_sbyU3 GHC.Types.False GHC.Prim.void#;
        };

System.IO.interact
  :: (GHC.Base.String -> GHC.Base.String) -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] System.IO.interact1 eta_B2 GHC.Prim.void#;

lvl2_rbyQa :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bug in System.IO.openTempFile"#;

lvl3_rbyQb :: ([GHC.Types.Char], [GHC.Types.Char])
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl2_rbyQa of sat_sbyU4 {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sbyU4;
        };

lvl4_rbyQc :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['.'#];

lvl5_rbyQd :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_sbyU5]
        case ds_sbyU5 of {
          GHC.Types.C# x_sbyU7 [Occ=Once!] ->
              case x_sbyU7 of {
                __DEFAULT -> GHC.Types.False [];
                '.'# -> GHC.Types.True [];
              };
        };

lvl6_rbyQe :: GHC.Int.Int32
[GblId] =
    [] \u []
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          Unit# ds1_sbyUc [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                Unit# ds3_sbyUg [Occ=Once] ->
                    case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                      Unit# ds5_sbyUk [Occ=Once] ->
                          case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                            Unit# ds7_sbyUo [Occ=Once] ->
                                case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                                  Unit# ds9_sbyUs [Occ=Once] ->
                                      case narrow32Int# [ds9_sbyUs] of sat_sbyUE {
                                        __DEFAULT ->
                                            case int2Word# [sat_sbyUE] of sat_sbyUF {
                                              __DEFAULT ->
                                                  case narrow32Int# [ds7_sbyUo] of sat_sbyUB {
                                                    __DEFAULT ->
                                                        case int2Word# [sat_sbyUB] of sat_sbyUC {
                                                          __DEFAULT ->
                                                              case
                                                                  narrow32Int# [ds5_sbyUk]
                                                              of
                                                              sat_sbyUy
                                                              { __DEFAULT ->
                                                                    case
                                                                        int2Word# [sat_sbyUy]
                                                                    of
                                                                    sat_sbyUz
                                                                    { __DEFAULT ->
                                                                          case
                                                                              narrow32Int# [ds3_sbyUg]
                                                                          of
                                                                          sat_sbyUv
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    int2Word# [sat_sbyUv]
                                                                                of
                                                                                sat_sbyUw
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow32Int# [ds1_sbyUc]
                                                                                      of
                                                                                      sat_sbyUt
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                int2Word# [sat_sbyUt]
                                                                                            of
                                                                                            sat_sbyUu
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      or# [sat_sbyUu
                                                                                                           sat_sbyUw]
                                                                                                  of
                                                                                                  sat_sbyUx
                                                                                                  { __DEFAULT ->
                                                                                                        case
                                                                                                            or# [sat_sbyUx
                                                                                                                 sat_sbyUz]
                                                                                                        of
                                                                                                        sat_sbyUA
                                                                                                        { __DEFAULT ->
                                                                                                              case
                                                                                                                  or# [sat_sbyUA
                                                                                                                       sat_sbyUC]
                                                                                                              of
                                                                                                              sat_sbyUD
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        or# [sat_sbyUD
                                                                                                                             sat_sbyUF]
                                                                                                                    of
                                                                                                                    sat_sbyUG
                                                                                                                    { __DEFAULT ->
                                                                                                                          case
                                                                                                                              word2Int# [sat_sbyUG]
                                                                                                                          of
                                                                                                                          sat_sbyUH
                                                                                                                          { __DEFAULT ->
                                                                                                                                GHC.Int.I32# [sat_sbyUH];
                                                                                                                          };
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

$wlvl_rbyQf
  :: GHC.Prim.Int#
     -> GHC.Base.String
     -> GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           ([GHC.Types.Char], GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=4, Str=<B,U><B,U><B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [ww_sbyUI w_sbyUJ w1_sbyUK void_0E]
        let {
          sat_sbyUO [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [ww_sbyUI w_sbyUJ w1_sbyUK] \u []
                  let {
                    sat_sbyUN [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        [ww_sbyUI w_sbyUJ w1_sbyUK] \u []
                            let {
                              sat_sbyUM [Occ=Once] :: GHC.Base.Maybe GHC.Base.String
                              [LclId] =
                                  CCCS GHC.Base.Just! [w1_sbyUK];
                            } in 
                              Foreign.C.Error.$werrnoToIOError
                                  w_sbyUJ ww_sbyUI GHC.Base.Nothing sat_sbyUM;
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbyUN;
        } in  raiseIO# [sat_sbyUO GHC.Prim.void#];

lvl7_rbyQg
  :: Foreign.C.Error.Errno
     -> GHC.Base.String
     -> GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           ([GHC.Types.Char], GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=4, Str=<B,1*U(U)><B,U><B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [w_sbyUP w1_sbyUQ w2_sbyUR void_0E]
        case w_sbyUP of {
          GHC.Int.I32# ww1_sbyUU [Occ=Once] ->
              $wlvl_rbyQf ww1_sbyUU w1_sbyUQ w2_sbyUR GHC.Prim.void#;
        };

lvl8_rbyQh :: GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U(U)>m, Unf=OtherCon []] =
    [] \r [n_sbyUV]
        let {
          sat_sbyUZ [Occ=Once] :: GHC.Types.Int
          [LclId] =
              [n_sbyUV] \u []
                  case n_sbyUV of {
                    GHC.Types.I# x_sbyUX [Occ=Once] ->
                        case +# [x_sbyUX 1#] of sat_sbyUY {
                          __DEFAULT -> GHC.Types.I# [sat_sbyUY];
                        };
                  };
        } in  (,) [sat_sbyUZ n_sbyUV];

go_rbyQi :: [GHC.Types.Char] -> GHC.Types.Char -> GHC.Types.Char
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U(U)>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_sbyV0 eta_sbyV1]
        case ds_sbyV0 of {
          [] -> eta_sbyV1;
          : y_sbyV3 [Occ=Once] ys_sbyV4 [Occ=Once] ->
              go_rbyQi ys_sbyV4 y_sbyV3;
        };

lvl9_rbyQj :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "-"#;

lvl10_rbyQk :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openTempFile': Template string must not contain path separator characters: "#;

lvl11_rbyQl
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Base.String
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [void_0E template_sbyV6]
        case
            GHC.CString.unpackAppendCString# lvl10_rbyQk template_sbyV6
        of
        sat_sbyV7
        { __DEFAULT -> GHC.IO.failIO1 sat_sbyV7 GHC.Prim.void#;
        };

System.IO.openBinaryTempFile5
  :: GHC.Base.String
     -> GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.Bool
     -> System.Posix.Types.CMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId,
 Arity=6,
 Str=<L,U><L,U><S,U><L,1*U><L,U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [loc_sbyV8
           tmp_dir_sbyV9
           template_sbyVa
           binary_sbyVb
           mode_sbyVc
           void_0E]
        case
            GHC.List.elem
                GHC.Classes.$fEqChar pathSeparatorChar_rbxCK template_sbyVa
        of
        { GHC.Types.False ->
              let {
                ds_sbyVf [Occ=OnceL!, Dmd=<L,U(U,U)>]
                  :: ([GHC.Types.Char], [GHC.Types.Char])
                [LclId] =
                    [template_sbyVa] \u []
                        case GHC.List.reverse1 template_sbyVa GHC.Types.[] of sat_sbyVg {
                          __DEFAULT ->
                              case GHC.List.$wbreak lvl5_rbyQd sat_sbyVg of {
                                (#,#) ww1_sbyVi [Occ=Once*] ww2_sbyVj [Occ=Once!] ->
                                    case ww2_sbyVj of {
                                      [] ->
                                          let {
                                            sat_sbyVl [Occ=Once] :: [GHC.Types.Char]
                                            [LclId] =
                                                [ww1_sbyVi] \u [] GHC.List.reverse ww1_sbyVi;
                                          } in  (,) [sat_sbyVl GHC.Types.[]];
                                      : ds1_sbyVm [Occ=Once!] rest_sbyVn [Occ=Once] ->
                                          case ds1_sbyVm of {
                                            GHC.Types.C# ds2_sbyVp [Occ=Once!] ->
                                                case ds2_sbyVp of {
                                                  __DEFAULT -> lvl3_rbyQb;
                                                  '.'# ->
                                                      let {
                                                        sat_sbyVs [Occ=Once] :: [GHC.Types.Char]
                                                        [LclId] =
                                                            [ww1_sbyVi] \u []
                                                                GHC.List.reverse ww1_sbyVi; } in
                                                      let {
                                                        sat_sbyVt [Occ=Once] :: [GHC.Types.Char]
                                                        [LclId] =
                                                            CCCS :! [lvl4_rbyQc sat_sbyVs]; } in
                                                      let {
                                                        sat_sbyVr [Occ=Once] :: [GHC.Types.Char]
                                                        [LclId] =
                                                            [rest_sbyVn] \u []
                                                                GHC.List.reverse rest_sbyVn;
                                                      } in  (,) [sat_sbyVr sat_sbyVt];
                                                };
                                          };
                                    };
                              };
                        }; } in
              let {
                oflags_sbyVu [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Int.Int32
                [LclId] =
                    [binary_sbyVb] \u []
                        case lvl6_rbyQe of wild1_sbyVv {
                          GHC.Int.I32# x#_sbyVw [Occ=Once] ->
                              case binary_sbyVb of {
                                GHC.Types.False -> wild1_sbyVv;
                                GHC.Types.True ->
                                    case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                                      Unit# ds2_sbyVB [Occ=Once] ->
                                          case narrow32Int# [ds2_sbyVB] of sat_sbyVD {
                                            __DEFAULT ->
                                                case int2Word# [sat_sbyVD] of sat_sbyVE {
                                                  __DEFAULT ->
                                                      case int2Word# [x#_sbyVw] of sat_sbyVC {
                                                        __DEFAULT ->
                                                            case
                                                                or# [sat_sbyVC sat_sbyVE]
                                                            of
                                                            sat_sbyVF
                                                            { __DEFAULT ->
                                                                  case
                                                                      word2Int# [sat_sbyVF]
                                                                  of
                                                                  sat_sbyVG
                                                                  { __DEFAULT ->
                                                                        GHC.Int.I32# [sat_sbyVG];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        }; } in
              let {
                lvl12_sbyVH [Occ=OnceL, Dmd=<L,C(C1(U(U,U)))>]
                  :: Foreign.C.String.CString
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Foreign.C.Types.CInt #)
                [LclId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
                    [mode_sbyVc oflags_sbyVu] \r [f_sbyVI void_0E]
                        case f_sbyVI of {
                          GHC.Ptr.Ptr ds4_sbyVL [Occ=Once] ->
                              case oflags_sbyVu of {
                                GHC.Int.I32# ds6_sbyVN [Occ=Once] ->
                                    case mode_sbyVc of {
                                      GHC.Word.W32# ds8_sbyVP [Occ=Once] ->
                                          case
                                              __pkg_ccall base-4.11.0.0 [ds4_sbyVL
                                                                         ds6_sbyVN
                                                                         ds8_sbyVP
                                                                         GHC.Prim.void#]
                                          of
                                          { Unit# ds11_sbyVT [Occ=Once] ->
                                                case narrow32Int# [ds11_sbyVT] of sat_sbyVU {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sbyVV [Occ=Once] :: GHC.Int.Int32
                                                        [LclId] =
                                                            CCCS GHC.Int.I32#! [sat_sbyVU];
                                                      } in  Unit# [sat_sbyVV];
                                                };
                                          };
                                    };
                              };
                        }; } in
              let {
                lvl13_sbyVW [Occ=OnceL!] :: GHC.Types.Bool
                [LclId] =
                    [tmp_dir_sbyV9] \u []
                        let {
                          sat_sbyVX [Occ=OnceL] :: GHC.Types.Char
                          [LclId] =
                              [tmp_dir_sbyV9] \u []
                                  go_rbyQi tmp_dir_sbyV9 GHC.List.lastError; } in
                        let {
                          sat_sbyVY [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              CCCS :! [sat_sbyVX GHC.Types.[]];
                        } in 
                          GHC.List.elem
                              GHC.Classes.$fEqChar pathSeparatorChar_rbxCK sat_sbyVY;
              } in 
                let-no-escape {
                  exit_sbyVZ [Occ=OnceL!T[2], Dmd=<L,C(C1(U(U,U)))>]
                    :: GHC.Prim.State# GHC.Prim.RealWorld
                       -> Foreign.C.Error.Errno
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                             (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
                  [LclId[JoinId(2)],
                   Arity=2,
                   Str=<B,U><B,1*U(U)>x,
                   Unf=OtherCon []] =
                      sat-only [loc_sbyV8 tmp_dir_sbyV9] \r [void_0E errno_sbyW1]
                          lvl7_rbyQg errno_sbyW1 loc_sbyV8 tmp_dir_sbyV9 GHC.Prim.void#;
                } in 
                  let-no-escape {
                    findTempName_sbyW2 [Occ=LoopBreakerT[1]]
                      :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [tmp_dir_sbyV9
                                  ds_sbyVf
                                  lvl12_sbyVH
                                  lvl13_sbyVW
                                  exit_sbyVZ
                                  findTempName_sbyW2] \r [void_0E]
                            case __pkg_ccall base-4.11.0.0 [GHC.Prim.void#] of {
                              Unit# ds2_sbyW7 [Occ=Once] ->
                                  case tempCounter_rbxCH of {
                                    GHC.STRef.STRef r#_sbyW9 [Occ=Once] ->
                                        case
                                            atomicModifyMutVar# [r#_sbyW9 lvl8_rbyQh GHC.Prim.void#]
                                        of
                                        { Unit# ipv1_sbyWc [Occ=Once!] ->
                                              case
                                                  GHC.IO.Encoding.getFileSystemEncoding
                                                      GHC.Prim.void#
                                              of
                                              { Unit# ipv3_sbyWf [Occ=Once] ->
                                                    let {
                                                      filepath_sbyWg :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [tmp_dir_sbyV9
                                                           ds_sbyVf
                                                           lvl13_sbyVW
                                                           ds2_sbyW7
                                                           ipv1_sbyWc] \u []
                                                              case ds_sbyVf of {
                                                                (,) prefix_sbyWi [Occ=Once]
                                                                    suffix_sbyWj [Occ=Once] ->
                                                                    let {
                                                                      sat_sbyWx [Occ=Once,
                                                                                 Dmd=<L,1*U>]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [ds2_sbyW7
                                                                           ipv1_sbyWc
                                                                           suffix_sbyWj] \s []
                                                                              case
                                                                                  narrow32Int# [ds2_sbyW7]
                                                                              of
                                                                              sat_sbyWk
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        GHC.Show.$wshowSignedInt
                                                                                            0#
                                                                                            sat_sbyWk
                                                                                            GHC.Types.[]
                                                                                    of
                                                                                    { (#,#) ww5_sbyWm [Occ=Once]
                                                                                            ww6_sbyWn [Occ=Once] ->
                                                                                          let {
                                                                                            sat_sbyWw [Occ=Once,
                                                                                                       Dmd=<L,1*U>]
                                                                                              :: [GHC.Types.Char]
                                                                                            [LclId] =
                                                                                                [ipv1_sbyWc
                                                                                                 suffix_sbyWj] \s []
                                                                                                    let {
                                                                                                      sat_sbyWv [Occ=Once]
                                                                                                        :: [GHC.Types.Char]
                                                                                                      [LclId] =
                                                                                                          [ipv1_sbyWc
                                                                                                           suffix_sbyWj] \u []
                                                                                                              case
                                                                                                                  ipv1_sbyWc
                                                                                                              of
                                                                                                              { GHC.Types.I# ww3_sbyWq [Occ=Once] ->
                                                                                                                    case
                                                                                                                        GHC.Show.$wshowSignedInt
                                                                                                                            0#
                                                                                                                            ww3_sbyWq
                                                                                                                            GHC.Types.[]
                                                                                                                    of
                                                                                                                    { (#,#) ww8_sbyWs [Occ=Once]
                                                                                                                            ww9_sbyWt [Occ=Once] ->
                                                                                                                          let {
                                                                                                                            sat_sbyWu [Occ=Once]
                                                                                                                              :: [GHC.Types.Char]
                                                                                                                            [LclId] =
                                                                                                                                CCCS :! [ww8_sbyWs
                                                                                                                                         ww9_sbyWt];
                                                                                                                          } in 
                                                                                                                            GHC.Base.++
                                                                                                                                sat_sbyWu
                                                                                                                                suffix_sbyWj;
                                                                                                                    };
                                                                                                              };
                                                                                                    } in 
                                                                                                      GHC.CString.unpackAppendCString#
                                                                                                          lvl9_rbyQj
                                                                                                          sat_sbyWv; } in
                                                                                          let {
                                                                                            sat_sbyWo [Occ=Once]
                                                                                              :: [GHC.Types.Char]
                                                                                            [LclId] =
                                                                                                CCCS :! [ww5_sbyWm
                                                                                                         ww6_sbyWn];
                                                                                          } in 
                                                                                            GHC.Base.++
                                                                                                sat_sbyWo
                                                                                                sat_sbyWw;
                                                                                    };
                                                                              };
                                                                    } in 
                                                                      case
                                                                          GHC.Base.++
                                                                              prefix_sbyWi sat_sbyWx
                                                                      of
                                                                      wild4_sbyWy
                                                                      { [] -> tmp_dir_sbyV9;
                                                                        : _ [Occ=Dead]
                                                                          _ [Occ=Dead] ->
                                                                            case
                                                                                tmp_dir_sbyV9
                                                                            of
                                                                            wild5_sbyWB
                                                                            { [] -> wild4_sbyWy;
                                                                              : _ [Occ=Dead]
                                                                                _ [Occ=Dead] ->
                                                                                  case
                                                                                      lvl13_sbyVW
                                                                                  of
                                                                                  { GHC.Types.False ->
                                                                                        let {
                                                                                          sat_sbyWF [Occ=Once]
                                                                                            :: [GHC.Types.Char]
                                                                                          [LclId] =
                                                                                              CCCS :! [pathSeparatorChar_rbxCK
                                                                                                       wild4_sbyWy];
                                                                                        } in 
                                                                                          GHC.Base.++
                                                                                              wild5_sbyWB
                                                                                              sat_sbyWF;
                                                                                    GHC.Types.True ->
                                                                                        GHC.Base.++
                                                                                            wild5_sbyWB
                                                                                            wild4_sbyWy;
                                                                                  };
                                                                            };
                                                                      };
                                                              };
                                                    } in 
                                                      case
                                                          GHC.Foreign.charIsRepresentable3
                                                              ipv3_sbyWf
                                                              filepath_sbyWg
                                                              lvl12_sbyVH
                                                              GHC.Prim.void#
                                                      of
                                                      { Unit# ipv5_sbyWI [Occ=Once] ->
                                                            case ipv5_sbyWI of wild3_sbyWJ {
                                                              GHC.Int.I32# x_sbyWK [Occ=Once] ->
                                                                  let-no-escape {
                                                                    $j_sbyWL [Occ=Once*!T[2],
                                                                              Dmd=<L,1*C1(C1(U(U,U)))>]
                                                                      :: GHC.Prim.State#
                                                                           GHC.Prim.RealWorld
                                                                         -> System.IO.OpenNewFileResult
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               (GHC.IO.FilePath,
                                                                                GHC.IO.Handle.Types.Handle) #)
                                                                    [LclId[JoinId(2)],
                                                                     Arity=2,
                                                                     Str=<S,U><S,1*U>,
                                                                     Unf=OtherCon []] =
                                                                        sat-only [exit_sbyVZ
                                                                                  findTempName_sbyW2
                                                                                  filepath_sbyWg] \r [void_0E
                                                                                                      ipv7_sbyWN]
                                                                            case ipv7_sbyWN of {
                                                                              System.IO.NewFileCreated fd_sbyWP [Occ=Once] ->
                                                                                  case
                                                                                      GHC.IO.FD.$wmkFD
                                                                                          fd_sbyWP
                                                                                          GHC.IO.IOMode.ReadWriteMode
                                                                                          GHC.Base.Nothing
                                                                                          GHC.Types.True
                                                                                          GHC.Prim.void#
                                                                                  of
                                                                                  { Unit# ipv9_sbyWS [Occ=Once!] ->
                                                                                        case
                                                                                            ipv9_sbyWS
                                                                                        of
                                                                                        { (,) fD_sbyWU [Occ=Once]
                                                                                              fd_type_sbyWV [Occ=Once] ->
                                                                                              case
                                                                                                  GHC.IO.Encoding.getLocaleEncoding1
                                                                                              of
                                                                                              { (,) getLocaleEncoding3_sbyWX [Occ=Once]
                                                                                                    _ [Occ=Dead] ->
                                                                                                    case
                                                                                                        getLocaleEncoding3_sbyWX
                                                                                                            GHC.Prim.void#
                                                                                                    of
                                                                                                    { Unit# ipv11_sbyX1 [Occ=Once] ->
                                                                                                          let {
                                                                                                            sat_sbyX2 [Occ=Once]
                                                                                                              :: GHC.Base.Maybe
                                                                                                                   GHC.IO.Encoding.Types.TextEncoding
                                                                                                            [LclId] =
                                                                                                                CCCS GHC.Base.Just! [ipv11_sbyX1];
                                                                                                          } in 
                                                                                                            case
                                                                                                                GHC.IO.Handle.FD.fdToHandle5
                                                                                                                    fD_sbyWU
                                                                                                                    fd_type_sbyWV
                                                                                                                    filepath_sbyWg
                                                                                                                    GHC.IO.IOMode.ReadWriteMode
                                                                                                                    GHC.Types.False
                                                                                                                    sat_sbyX2
                                                                                                                    GHC.Prim.void#
                                                                                                            of
                                                                                                            { Unit# ipv13_sbyX5 [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sbyX6 [Occ=Once]
                                                                                                                      :: ([GHC.Types.Char],
                                                                                                                          GHC.IO.Handle.Types.Handle)
                                                                                                                    [LclId] =
                                                                                                                        CCCS (,)! [filepath_sbyWg
                                                                                                                                   ipv13_sbyX5];
                                                                                                                  } in 
                                                                                                                    Unit# [sat_sbyX6];
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                  };
                                                                              System.IO.FileExists ->
                                                                                  findTempName_sbyW2
                                                                                      GHC.Prim.void#;
                                                                              System.IO.OpenNewError errno_sbyX7 [Occ=Once] ->
                                                                                  exit_sbyVZ
                                                                                      GHC.Prim.void#
                                                                                      errno_sbyX7;
                                                                            };
                                                                  } in 
                                                                    case <# [x_sbyWK 0#] of {
                                                                      __DEFAULT ->
                                                                          let {
                                                                            sat_sbyX9 [Occ=Once]
                                                                              :: System.IO.OpenNewFileResult
                                                                            [LclId] =
                                                                                CCCS System.IO.NewFileCreated! [wild3_sbyWJ];
                                                                          } in 
                                                                            $j_sbyWL
                                                                                GHC.Prim.void#
                                                                                sat_sbyX9;
                                                                      1# ->
                                                                          case
                                                                              __pkg_ccall base-4.11.0.0 [GHC.Prim.void#]
                                                                          of
                                                                          { Unit# ds8_sbyXd [Occ=Once] ->
                                                                                case
                                                                                    narrow32Int# [ds8_sbyXd]
                                                                                of
                                                                                wild5_sbyXe
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_sbyXf [Occ=Once]
                                                                                          :: Foreign.C.Error.Errno
                                                                                        [LclId] =
                                                                                            CCCS GHC.Int.I32#! [wild5_sbyXe]; } in
                                                                                      let {
                                                                                        sat_sbyXg [Occ=Once]
                                                                                          :: System.IO.OpenNewFileResult
                                                                                        [LclId] =
                                                                                            CCCS System.IO.OpenNewError! [sat_sbyXf];
                                                                                      } in 
                                                                                        $j_sbyWL
                                                                                            GHC.Prim.void#
                                                                                            sat_sbyXg;
                                                                                  17# ->
                                                                                      $j_sbyWL
                                                                                          GHC.Prim.void#
                                                                                          System.IO.FileExists;
                                                                                };
                                                                          };
                                                                    };
                                                            };
                                                      };
                                              };
                                        };
                                  };
                            };
                  } in  findTempName_sbyW2 GHC.Prim.void#;
          GHC.Types.True -> lvl11_rbyQl GHC.Prim.void# template_sbyVa;
        };

System.IO.openBinaryTempFileWithDefaultPermissions4
  :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openBinaryTempFileWithDefaultPermissions"#;

System.IO.openBinaryTempFileWithDefaultPermissions3
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            System.IO.openBinaryTempFileWithDefaultPermissions4;

System.IO.openBinaryTempFileWithDefaultPermissions2
  :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [438##];

System.IO.openBinaryTempFileWithDefaultPermissions1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [tmp_dir_sbyXh template_sbyXi void_0E]
        System.IO.openBinaryTempFile5
            System.IO.openBinaryTempFileWithDefaultPermissions3
            tmp_dir_sbyXh
            template_sbyXi
            GHC.Types.True
            System.IO.openBinaryTempFileWithDefaultPermissions2
            GHC.Prim.void#;

System.IO.openBinaryTempFileWithDefaultPermissions
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.IO (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.IO.openBinaryTempFileWithDefaultPermissions1
            eta_B3 eta_B2 GHC.Prim.void#;

System.IO.openTempFileWithDefaultPermissions3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openTempFileWithDefaultPermissions"#;

System.IO.openTempFileWithDefaultPermissions2 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            System.IO.openTempFileWithDefaultPermissions3;

System.IO.openTempFileWithDefaultPermissions1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [tmp_dir_sbyXj template_sbyXk void_0E]
        System.IO.openBinaryTempFile5
            System.IO.openTempFileWithDefaultPermissions2
            tmp_dir_sbyXj
            template_sbyXk
            GHC.Types.False
            System.IO.openBinaryTempFileWithDefaultPermissions2
            GHC.Prim.void#;

System.IO.openTempFileWithDefaultPermissions
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.IO (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.IO.openTempFileWithDefaultPermissions1
            eta_B3 eta_B2 GHC.Prim.void#;

System.IO.openBinaryTempFile4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openBinaryTempFile"#;

System.IO.openBinaryTempFile3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.IO.openBinaryTempFile4;

System.IO.openBinaryTempFile2 :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [384##];

System.IO.openBinaryTempFile1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [tmp_dir_sbyXl template_sbyXm void_0E]
        System.IO.openBinaryTempFile5
            System.IO.openBinaryTempFile3
            tmp_dir_sbyXl
            template_sbyXm
            GHC.Types.True
            System.IO.openBinaryTempFile2
            GHC.Prim.void#;

System.IO.openBinaryTempFile
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.IO (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.IO.openBinaryTempFile1 eta_B3 eta_B2 GHC.Prim.void#;

System.IO.openTempFile3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openTempFile"#;

System.IO.openTempFile2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.IO.openTempFile3;

System.IO.openTempFile1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [tmp_dir_sbyXn template_sbyXo void_0E]
        System.IO.openBinaryTempFile5
            System.IO.openTempFile2
            tmp_dir_sbyXn
            template_sbyXo
            GHC.Types.False
            System.IO.openBinaryTempFile2
            GHC.Prim.void#;

System.IO.openTempFile
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.IO (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.IO.openTempFile1 eta_B3 eta_B2 GHC.Prim.void#;

System.IO.NewFileCreated
  :: Foreign.C.Types.CInt -> System.IO.OpenNewFileResult
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] System.IO.NewFileCreated [eta_B1];

System.IO.FileExists :: System.IO.OpenNewFileResult
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE System.IO.FileExists! [];

System.IO.OpenNewError
  :: Foreign.C.Error.Errno -> System.IO.OpenNewFileResult
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] System.IO.OpenNewError [eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:06:32.156094637 UTC

System.IO.putChar1
  :: GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U(U)>, Unf=OtherCon []] =
    [] \r [c_sbAqQ eta_B1]
        GHC.IO.Handle.Text.hPutChar1
            GHC.IO.Handle.FD.stdout c_sbAqQ eta_B1;

System.IO.putChar :: GHC.Types.Char -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U(U)>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] System.IO.putChar1 eta_B2 eta_B1;

System.IO.putStr :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [s_sbAqR eta_B1]
        GHC.IO.Handle.Text.hPutStr GHC.IO.Handle.FD.stdout s_sbAqR eta_B1;

System.IO.putStrLn :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [s_sbAqS eta_B1]
        GHC.IO.Handle.Text.hPutStrLn
            GHC.IO.Handle.FD.stdout s_sbAqS eta_B1;

System.IO.print
  :: forall a. GHC.Show.Show a => a -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*U(A,1*C1(U),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dShow_sbAqT x_sbAqU]
        let {
          sat_sbAqV [Occ=Once] :: GHC.Base.String
          [LclId] =
              [$dShow_sbAqT x_sbAqU] \u [] GHC.Show.show $dShow_sbAqT x_sbAqU;
        } in 
          GHC.IO.Handle.Text.hPutStr'
              GHC.IO.Handle.FD.stdout sat_sbAqV GHC.Types.True;

System.IO.getChar1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Char #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.Text.hGetChar6
            GHC.IO.Handle.FD.stdin
            GHC.IO.Handle.Text.hGetChar2
            eta_B1;

System.IO.getChar :: GHC.Types.IO GHC.Types.Char
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] System.IO.getChar1 eta_B1;

System.IO.getLine1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.Text.hGetLine4
            GHC.IO.Handle.FD.stdin
            GHC.IO.Handle.Text.hGetLine2
            eta_B1;

System.IO.getLine :: GHC.Types.IO GHC.Base.String
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] System.IO.getLine1 eta_B1;

System.IO.getContents1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.IO.Handle.Text.hGetContents1 GHC.IO.Handle.FD.stdin eta_B1;

System.IO.getContents :: GHC.Types.IO GHC.Base.String
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] System.IO.getContents1 eta_B1;

System.IO.localeEncoding :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.initLocaleEncoding;

System.IO.hReady2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

System.IO.hReady1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbAqW eta_sbAqX]
        GHC.IO.Handle.Text.hWaitForInput1
            h_sbAqW System.IO.hReady2 eta_sbAqX;

System.IO.hReady
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] System.IO.hReady1 eta_B2 eta_B1;

System.IO.hPrint
  :: forall a.
     GHC.Show.Show a =>
     GHC.IO.Handle.Types.Handle -> a -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Str=<L,1*U(A,1*C1(U),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sbAqY hdl_sbAqZ eta_sbAr0]
        let {
          sat_sbAr1 [Occ=Once] :: GHC.Base.String
          [LclId] =
              [$dShow_sbAqY eta_sbAr0] \u []
                  GHC.Show.show $dShow_sbAqY eta_sbAr0;
        } in 
          GHC.IO.Handle.Text.hPutStr' hdl_sbAqZ sat_sbAr1 GHC.Types.True;

System.IO.appendFile2
  :: forall r.
     GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> (GHC.IO.Handle.Types.Handle -> GHC.Types.IO r)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, r #)
[GblId,
 Arity=4,
 Str=<L,U><L,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [name_sbAr2 mode_sbAr3 eta_sbAr4 eta1_sbAr5]
        case getMaskingState# [eta1_sbAr5] of {
          (#,#) ipv_sbAr7 [Occ=Once*] ipv1_sbAr8 [Occ=Once!] ->
              case ipv1_sbAr8 of {
                __DEFAULT ->
                    case
                        GHC.IO.Handle.FD.openFile1 name_sbAr2 mode_sbAr3 ipv_sbAr7
                    of
                    { (#,#) ipv2_sbArb [Occ=Once] ipv3_sbArc ->
                          let {
                            sat_sbArk [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [ipv3_sbArc] \r [e1_sbArf s_sbArg]
                                    case GHC.IO.Handle.hClose1 ipv3_sbArc s_sbArg of {
                                      (#,#) ipv4_sbAri [Occ=Once] _ [Occ=Dead] ->
                                          raiseIO# [e1_sbArf ipv4_sbAri];
                                    }; } in
                          let {
                            sat_sbArd [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [eta_sbAr4 ipv3_sbArc] \u [] eta_sbAr4 ipv3_sbArc; } in
                          let {
                            sat_sbAre [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [sat_sbArd] \r [eta_B1] maskAsyncExceptions# [sat_sbArd eta_B1];
                          } in 
                            case catch# [sat_sbAre sat_sbArk ipv2_sbArb] of {
                              (#,#) ipv4_sbArm [Occ=Once] ipv5_sbArn [Occ=Once] ->
                                  case GHC.IO.Handle.hClose1 ipv3_sbArc ipv4_sbArm of {
                                    (#,#) ipv6_sbArp [Occ=Once] _ [Occ=Dead] ->
                                        (#,#) [ipv6_sbArp ipv5_sbArn];
                                  };
                            };
                    };
                0# ->
                    let {
                      sat_sbArJ [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                      [LclId] =
                          [name_sbAr2 mode_sbAr3 eta_sbAr4] \r [s_sbArr]
                              case GHC.IO.Handle.FD.openFile1 name_sbAr2 mode_sbAr3 s_sbArr of {
                                (#,#) ipv2_sbArt [Occ=Once] ipv3_sbAru ->
                                    let {
                                      sat_sbArC [Occ=Once]
                                        :: GHC.Exception.SomeException
                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                                      [LclId] =
                                          [ipv3_sbAru] \r [e1_sbArx s1_sbAry]
                                              case GHC.IO.Handle.hClose1 ipv3_sbAru s1_sbAry of {
                                                (#,#) ipv4_sbArA [Occ=Once] _ [Occ=Dead] ->
                                                    raiseIO# [e1_sbArx ipv4_sbArA];
                                              }; } in
                                    let {
                                      sat_sbArv [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                                      [LclId] =
                                          [eta_sbAr4 ipv3_sbAru] \u [] eta_sbAr4 ipv3_sbAru; } in
                                    let {
                                      sat_sbArw [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                                      [LclId] =
                                          [sat_sbArv] \r [eta_B1]
                                              unmaskAsyncExceptions# [sat_sbArv eta_B1];
                                    } in 
                                      case catch# [sat_sbArw sat_sbArC ipv2_sbArt] of {
                                        (#,#) ipv4_sbArE [Occ=Once] ipv5_sbArF [Occ=Once] ->
                                            case GHC.IO.Handle.hClose1 ipv3_sbAru ipv4_sbArE of {
                                              (#,#) ipv6_sbArH [Occ=Once] _ [Occ=Dead] ->
                                                  (#,#) [ipv6_sbArH ipv5_sbArF];
                                            };
                                      };
                              };
                    } in  maskAsyncExceptions# [sat_sbArJ ipv_sbAr7];
                1# ->
                    case
                        GHC.IO.Handle.FD.openFile1 name_sbAr2 mode_sbAr3 ipv_sbAr7
                    of
                    { (#,#) ipv2_sbArL [Occ=Once] ipv3_sbArM ->
                          let {
                            sat_sbArU [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [ipv3_sbArM] \r [e1_sbArP s_sbArQ]
                                    case GHC.IO.Handle.hClose1 ipv3_sbArM s_sbArQ of {
                                      (#,#) ipv4_sbArS [Occ=Once] _ [Occ=Dead] ->
                                          raiseIO# [e1_sbArP ipv4_sbArS];
                                    }; } in
                          let {
                            sat_sbArN [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [eta_sbAr4 ipv3_sbArM] \u [] eta_sbAr4 ipv3_sbArM; } in
                          let {
                            sat_sbArO [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [sat_sbArN] \r [eta_B1] maskUninterruptible# [sat_sbArN eta_B1];
                          } in 
                            case catch# [sat_sbArO sat_sbArU ipv2_sbArL] of {
                              (#,#) ipv4_sbArW [Occ=Once] ipv5_sbArX [Occ=Once] ->
                                  case GHC.IO.Handle.hClose1 ipv3_sbArM ipv4_sbArW of {
                                    (#,#) ipv6_sbArZ [Occ=Once] _ [Occ=Dead] ->
                                        (#,#) [ipv6_sbArZ ipv5_sbArX];
                                  };
                            };
                    };
              };
        };

System.IO.withFile
  :: forall r.
     GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> (GHC.IO.Handle.Types.Handle -> GHC.Types.IO r)
     -> GHC.Types.IO r
[GblId,
 Arity=4,
 Str=<L,U><L,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        System.IO.appendFile2 eta_B4 eta_B3 eta_B2 eta_B1;

System.IO.appendFile1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [f_sbAs1 txt_sbAs2 eta_sbAs3]
        let {
          sat_sbAs5 [Occ=Once]
            :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
          [LclId] =
              [txt_sbAs2] \r [hdl_sbAs4 eta_B1]
                  GHC.IO.Handle.Text.hPutStr hdl_sbAs4 txt_sbAs2 eta_B1;
        } in 
          System.IO.appendFile2
              f_sbAs1 GHC.IO.IOMode.AppendMode sat_sbAs5 eta_sbAs3;

System.IO.appendFile
  :: GHC.IO.FilePath -> GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.IO.appendFile1 eta_B3 eta_B2 eta_B1;

System.IO.writeFile1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [f_sbAs6 txt_sbAs7 eta_sbAs8]
        let {
          sat_sbAsa [Occ=Once]
            :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
          [LclId] =
              [txt_sbAs7] \r [hdl_sbAs9 eta_B1]
                  GHC.IO.Handle.Text.hPutStr hdl_sbAs9 txt_sbAs7 eta_B1;
        } in 
          System.IO.appendFile2
              f_sbAs6 GHC.IO.IOMode.WriteMode sat_sbAsa eta_sbAs8;

System.IO.writeFile
  :: GHC.IO.FilePath -> GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.IO.writeFile1 eta_B3 eta_B2 eta_B1;

System.IO.withBinaryFile1
  :: forall r.
     GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> (GHC.IO.Handle.Types.Handle -> GHC.Types.IO r)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, r #)
[GblId,
 Arity=4,
 Str=<L,U><L,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [name_sbAsb mode_sbAsc eta_sbAsd eta1_sbAse]
        case getMaskingState# [eta1_sbAse] of {
          (#,#) ipv_sbAsg [Occ=Once*] ipv1_sbAsh [Occ=Once!] ->
              case ipv1_sbAsh of {
                __DEFAULT ->
                    case
                        GHC.IO.Handle.FD.openBinaryFile1 name_sbAsb mode_sbAsc ipv_sbAsg
                    of
                    { (#,#) ipv2_sbAsk [Occ=Once] ipv3_sbAsl ->
                          let {
                            sat_sbAst [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [ipv3_sbAsl] \r [e1_sbAso s_sbAsp]
                                    case GHC.IO.Handle.hClose1 ipv3_sbAsl s_sbAsp of {
                                      (#,#) ipv4_sbAsr [Occ=Once] _ [Occ=Dead] ->
                                          raiseIO# [e1_sbAso ipv4_sbAsr];
                                    }; } in
                          let {
                            sat_sbAsm [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [eta_sbAsd ipv3_sbAsl] \u [] eta_sbAsd ipv3_sbAsl; } in
                          let {
                            sat_sbAsn [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [sat_sbAsm] \r [eta_B1] maskAsyncExceptions# [sat_sbAsm eta_B1];
                          } in 
                            case catch# [sat_sbAsn sat_sbAst ipv2_sbAsk] of {
                              (#,#) ipv4_sbAsv [Occ=Once] ipv5_sbAsw [Occ=Once] ->
                                  case GHC.IO.Handle.hClose1 ipv3_sbAsl ipv4_sbAsv of {
                                    (#,#) ipv6_sbAsy [Occ=Once] _ [Occ=Dead] ->
                                        (#,#) [ipv6_sbAsy ipv5_sbAsw];
                                  };
                            };
                    };
                0# ->
                    let {
                      sat_sbAsS [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                      [LclId] =
                          [name_sbAsb mode_sbAsc eta_sbAsd] \r [s_sbAsA]
                              case
                                  GHC.IO.Handle.FD.openBinaryFile1 name_sbAsb mode_sbAsc s_sbAsA
                              of
                              { (#,#) ipv2_sbAsC [Occ=Once] ipv3_sbAsD ->
                                    let {
                                      sat_sbAsL [Occ=Once]
                                        :: GHC.Exception.SomeException
                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                                      [LclId] =
                                          [ipv3_sbAsD] \r [e1_sbAsG s1_sbAsH]
                                              case GHC.IO.Handle.hClose1 ipv3_sbAsD s1_sbAsH of {
                                                (#,#) ipv4_sbAsJ [Occ=Once] _ [Occ=Dead] ->
                                                    raiseIO# [e1_sbAsG ipv4_sbAsJ];
                                              }; } in
                                    let {
                                      sat_sbAsE [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                                      [LclId] =
                                          [eta_sbAsd ipv3_sbAsD] \u [] eta_sbAsd ipv3_sbAsD; } in
                                    let {
                                      sat_sbAsF [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                                      [LclId] =
                                          [sat_sbAsE] \r [eta_B1]
                                              unmaskAsyncExceptions# [sat_sbAsE eta_B1];
                                    } in 
                                      case catch# [sat_sbAsF sat_sbAsL ipv2_sbAsC] of {
                                        (#,#) ipv4_sbAsN [Occ=Once] ipv5_sbAsO [Occ=Once] ->
                                            case GHC.IO.Handle.hClose1 ipv3_sbAsD ipv4_sbAsN of {
                                              (#,#) ipv6_sbAsQ [Occ=Once] _ [Occ=Dead] ->
                                                  (#,#) [ipv6_sbAsQ ipv5_sbAsO];
                                            };
                                      };
                              };
                    } in  maskAsyncExceptions# [sat_sbAsS ipv_sbAsg];
                1# ->
                    case
                        GHC.IO.Handle.FD.openBinaryFile1 name_sbAsb mode_sbAsc ipv_sbAsg
                    of
                    { (#,#) ipv2_sbAsU [Occ=Once] ipv3_sbAsV ->
                          let {
                            sat_sbAt3 [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [ipv3_sbAsV] \r [e1_sbAsY s_sbAsZ]
                                    case GHC.IO.Handle.hClose1 ipv3_sbAsV s_sbAsZ of {
                                      (#,#) ipv4_sbAt1 [Occ=Once] _ [Occ=Dead] ->
                                          raiseIO# [e1_sbAsY ipv4_sbAt1];
                                    }; } in
                          let {
                            sat_sbAsW [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [eta_sbAsd ipv3_sbAsV] \u [] eta_sbAsd ipv3_sbAsV; } in
                          let {
                            sat_sbAsX [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [sat_sbAsW] \r [eta_B1] maskUninterruptible# [sat_sbAsW eta_B1];
                          } in 
                            case catch# [sat_sbAsX sat_sbAt3 ipv2_sbAsU] of {
                              (#,#) ipv4_sbAt5 [Occ=Once] ipv5_sbAt6 [Occ=Once] ->
                                  case GHC.IO.Handle.hClose1 ipv3_sbAsV ipv4_sbAt5 of {
                                    (#,#) ipv6_sbAt8 [Occ=Once] _ [Occ=Dead] ->
                                        (#,#) [ipv6_sbAt8 ipv5_sbAt6];
                                  };
                            };
                    };
              };
        };

System.IO.withBinaryFile
  :: forall r.
     GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> (GHC.IO.Handle.Types.Handle -> GHC.Types.IO r)
     -> GHC.Types.IO r
[GblId,
 Arity=4,
 Str=<L,U><L,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        System.IO.withBinaryFile1 eta_B4 eta_B3 eta_B2 eta_B1;

lvl_rbyQ6
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IORef.IORef GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [s_sbAta]
        case noDuplicate# [s_sbAta] of s'_sbAtb {
          __DEFAULT ->
              case newMutVar# [System.IO.hReady2 s'_sbAtb] of {
                (#,#) ipv_sbAtd [Occ=Once] ipv1_sbAte [Occ=Once] ->
                    let {
                      sat_sbAtf [Occ=Once] :: GHC.IORef.IORef GHC.Types.Int
                      [LclId] =
                          CCCS GHC.STRef.STRef! [ipv1_sbAte];
                    } in  (#,#) [ipv_sbAtd sat_sbAtf];
              };
        };

tempCounter_rbxCH :: GHC.IORef.IORef GHC.Types.Int
[GblId] =
    [] \u []
        case lvl_rbyQ6 GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_sbAti [Occ=Once] -> ipv1_sbAti;
        };

pathSeparatorChar_rbxCK :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['/'#];

System.IO.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

System.IO.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$trModule4];

System.IO.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "System.IO"#;

System.IO.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$trModule2];

System.IO.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [System.IO.$trModule3
                                     System.IO.$trModule1];

$krep_rbyQ7 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.C.Error.$tcErrno
                                              GHC.Types.[]];

$krep1_rbyQ8 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.C.Types.$tcCInt
                                              GHC.Types.[]];

System.IO.$tcOpenNewFileResult2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OpenNewFileResult"#;

System.IO.$tcOpenNewFileResult1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$tcOpenNewFileResult2];

System.IO.$tcOpenNewFileResult :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9627069439367662246##
                                    2547759174955940786##
                                    System.IO.$trModule
                                    System.IO.$tcOpenNewFileResult1
                                    0#
                                    GHC.Types.krep$*];

System.IO.$tc'FileExists1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [System.IO.$tcOpenNewFileResult
                                              GHC.Types.[]];

System.IO.$tc'FileExists3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FileExists"#;

System.IO.$tc'FileExists2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$tc'FileExists3];

System.IO.$tc'FileExists :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6704133186904346962##
                                    16997416543076271011##
                                    System.IO.$trModule
                                    System.IO.$tc'FileExists2
                                    0#
                                    System.IO.$tc'FileExists1];

System.IO.$tc'NewFileCreated1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_rbyQ8
                                         System.IO.$tc'FileExists1];

System.IO.$tc'NewFileCreated3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'NewFileCreated"#;

System.IO.$tc'NewFileCreated2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$tc'NewFileCreated3];

System.IO.$tc'NewFileCreated :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9070829168557028496##
                                    15570227817593865145##
                                    System.IO.$trModule
                                    System.IO.$tc'NewFileCreated2
                                    0#
                                    System.IO.$tc'NewFileCreated1];

System.IO.$tc'OpenNewError1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rbyQ7
                                         System.IO.$tc'FileExists1];

System.IO.$tc'OpenNewError3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'OpenNewError"#;

System.IO.$tc'OpenNewError2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$tc'OpenNewError3];

System.IO.$tc'OpenNewError :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [300310999495895268##
                                    12582581010413704951##
                                    System.IO.$trModule
                                    System.IO.$tc'OpenNewError2
                                    0#
                                    System.IO.$tc'OpenNewError1];

lvl1_rbyQ9 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionFixIOException_$ctoException
            GHC.IO.Exception.FixIOException;

System.IO.fixIO3
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sbAtj] raiseIO# [lvl1_rbyQ9 eta_sbAtj];

System.IO.fixIO2
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [e1_sbAtk]
        case e1_sbAtk of wild_sbAtl {
          GHC.Exception.SomeException $dException1_sbAtm [Occ=Once]
                                      e3_sbAtn [Occ=Once] ->
              case GHC.Exception.$p1Exception $dException1_sbAtm of sat_sbAto {
                __DEFAULT ->
                    case
                        Data.Typeable.Internal.sameTypeRep
                            sat_sbAto GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3
                    of
                    { GHC.Types.False ->
                          let {
                            sat_sbAtq [Occ=OnceT[0]]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_abxYz #)
                            [LclId] =
                                [wild_sbAtl] \r [eta_B1] raiseIO# [wild_sbAtl eta_B1];
                          } in  sat_sbAtq;
                      GHC.Types.True ->
                          case e3_sbAtn of {
                            GHC.IO.Exception.BlockedIndefinitelyOnMVar -> System.IO.fixIO3;
                          };
                    };
              };
        };

System.IO.fixIO1
  :: forall a.
     (a -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*C1(C1(U(U,U)))><S,U>, Unf=OtherCon []] =
    [] \r [k_sbAts s_sbAtt]
        case newMVar# [s_sbAtt] of {
          (#,#) ipv_sbAtv [Occ=Once] ipv1_sbAtw ->
              let {
                sat_sbAtA [Occ=Once] :: GHC.Types.IO a_abxYz
                [LclId] =
                    [ipv1_sbAtw] \r [eta_sbAtx]
                        let {
                          sat_sbAtz [Occ=Once]
                            :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_abxYz #)
                          [LclId] =
                              [ipv1_sbAtw] \r [eta1_sbAty] readMVar# [ipv1_sbAtw eta1_sbAty];
                        } in  catch# [sat_sbAtz System.IO.fixIO2 eta_sbAtx];
              } in 
                case
                    GHC.IO.Unsafe.unsafeDupableInterleaveIO sat_sbAtA ipv_sbAtv
                of
                { (#,#) ipv2_sbAtC [Occ=Once] ipv3_sbAtD [Occ=Once] ->
                      case k_sbAts ipv3_sbAtD ipv2_sbAtC of {
                        (#,#) ipv4_sbAtF [Occ=Once] ipv5_sbAtG ->
                            case putMVar# [ipv1_sbAtw ipv5_sbAtG ipv4_sbAtF] of s2#_sbAtH {
                              __DEFAULT -> (#,#) [s2#_sbAtH ipv5_sbAtG];
                            };
                      };
                };
        };

System.IO.fixIO
  :: forall a. (a -> GHC.Types.IO a) -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*C1(C1(U(U,U)))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] System.IO.fixIO1 eta_B2 eta_B1;

System.IO.readIO9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Prelude.readIO: no parse"#;

System.IO.readIO8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.IO.readIO9;

System.IO.readIO7 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.UserError
                                             GHC.Types.[]
                                             System.IO.readIO8
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

System.IO.readIO6 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            System.IO.readIO7;

System.IO.readIO5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Prelude.readIO: ambiguous parse"#;

System.IO.readIO4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.IO.readIO5;

System.IO.readIO3 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.UserError
                                             GHC.Types.[]
                                             System.IO.readIO4
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

System.IO.readIO2 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            System.IO.readIO3;

System.IO.readIO10 [Occ=LoopBreaker]
  :: forall a. [(a, GHC.Base.String)] -> [a]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbAtI]
        case ds_sbAtI of {
          [] -> [] [];
          : y_sbAtK [Occ=Once!] ys_sbAtL [Occ=Once] ->
              case y_sbAtK of {
                (,) x_sbAtN [Occ=OnceL] t_sbAtO [Occ=Once] ->
                    let {
                      lvl12_sbAtP [Occ=OnceL] :: [a_abxZC]
                      [LclId, Unf=OtherCon []] =
                          CCCS :! [x_sbAtN GHC.Types.[]]; } in
                    let {
                      z_sbAtQ [Occ=OnceL] :: [a_abxZC]
                      [LclId] =
                          [ys_sbAtL] \u [] System.IO.readIO10 ys_sbAtL; } in
                    let {
                      go1_sbAtR [Occ=LoopBreaker]
                        :: [(GHC.Base.String, GHC.Base.String)] -> [a_abxZC]
                      [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                          sat-only [lvl12_sbAtP z_sbAtQ go1_sbAtR] \r [ds1_sbAtS]
                              case ds1_sbAtS of {
                                [] -> z_sbAtQ;
                                : y1_sbAtU [Occ=Once!] ys1_sbAtV [Occ=Once*] ->
                                    case y1_sbAtU of {
                                      (,) ds2_sbAtX [Occ=Once!] ds3_sbAtY [Occ=Once!] ->
                                          case ds2_sbAtX of {
                                            [] ->
                                                case ds3_sbAtY of {
                                                  [] ->
                                                      let {
                                                        sat_sbAu1 [Occ=Once, Dmd=<L,1*U>]
                                                          :: [a_abxZC]
                                                        [LclId] =
                                                            [go1_sbAtR ys1_sbAtV] \s []
                                                                go1_sbAtR ys1_sbAtV;
                                                      } in  GHC.Base.++ lvl12_sbAtP sat_sbAu1;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      go1_sbAtR ys1_sbAtV;
                                                };
                                            : _ [Occ=Dead] _ [Occ=Dead] -> go1_sbAtR ys1_sbAtV;
                                          };
                                    };
                              };
                    } in 
                      case
                          Text.ParserCombinators.ReadP.run GHC.Read.lex1 t_sbAtO
                      of
                      sat_sbAu6
                      { __DEFAULT -> go1_sbAtR sat_sbAu6;
                      };
              };
        };

System.IO.readIO1
  :: forall a.
     GHC.Read.Read a =>
     GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Str=<S(C(C(S))LLL),1*U(1*C1(C1(U)),A,A,A)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_sbAu7 s_sbAu8 eta_sbAu9]
        case
            GHC.Read.readsPrec
                $dRead_sbAu7 Text.ParserCombinators.ReadPrec.minPrec s_sbAu8
        of
        sat_sbAua
        { __DEFAULT ->
              case System.IO.readIO10 sat_sbAua of {
                [] -> raiseIO# [System.IO.readIO6 eta_sbAu9];
                : x_sbAuc [Occ=Once] ds_sbAud [Occ=Once!] ->
                    case ds_sbAud of {
                      [] -> (#,#) [eta_sbAu9 x_sbAuc];
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          raiseIO# [System.IO.readIO2 eta_sbAu9];
                    };
              };
        };

System.IO.readIO
  :: forall a. GHC.Read.Read a => GHC.Base.String -> GHC.Types.IO a
[GblId,
 Arity=3,
 Str=<S(C(C(S))LLL),1*U(1*C1(C1(U)),A,A,A)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.IO.readIO1 eta_B3 eta_B2 eta_B1;

System.IO.readLn1
  :: forall a.
     GHC.Read.Read a =>
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(U)),A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_sbAuh s_sbAui]
        case
            GHC.IO.Handle.Internals.wantReadableHandle_1
                GHC.IO.Handle.Text.hGetLine4
                GHC.IO.Handle.FD.stdin
                GHC.IO.Handle.Text.hGetLine2
                s_sbAui
        of
        { (#,#) ipv_sbAuk [Occ=Once] ipv1_sbAul [Occ=Once] ->
              System.IO.readIO1 $dRead_sbAuh ipv1_sbAul ipv_sbAuk;
        };

System.IO.readLn :: forall a. GHC.Read.Read a => GHC.Types.IO a
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(U)),A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] System.IO.readLn1 eta_B2 eta_B1;

System.IO.readFile1
  :: GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [name_sbAum s_sbAun]
        case
            GHC.IO.Handle.FD.openFile1
                name_sbAum GHC.IO.IOMode.ReadMode s_sbAun
        of
        { (#,#) ipv_sbAup [Occ=Once] ipv1_sbAuq [Occ=Once] ->
              GHC.IO.Handle.Text.hGetContents1 ipv1_sbAuq ipv_sbAup;
        };

System.IO.readFile
  :: GHC.IO.FilePath -> GHC.Types.IO GHC.Base.String
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] System.IO.readFile1 eta_B2 eta_B1;

System.IO.interact1
  :: (GHC.Base.String -> GHC.Base.String)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [f_sbAur s_sbAus]
        case
            GHC.IO.Handle.Text.hGetContents1 GHC.IO.Handle.FD.stdin s_sbAus
        of
        { (#,#) ipv_sbAuu [Occ=Once] ipv1_sbAuv [Occ=Once] ->
              let {
                sat_sbAuw [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
                [LclId] =
                    [f_sbAur ipv1_sbAuv] \s [] f_sbAur ipv1_sbAuv;
              } in 
                GHC.IO.Handle.Text.hPutStr'
                    GHC.IO.Handle.FD.stdout sat_sbAuw GHC.Types.False ipv_sbAuu;
        };

System.IO.interact
  :: (GHC.Base.String -> GHC.Base.String) -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] System.IO.interact1 eta_B2 eta_B1;

lvl2_rbyQa :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bug in System.IO.openTempFile"#;

lvl3_rbyQb :: ([GHC.Types.Char], [GHC.Types.Char])
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl2_rbyQa of sat_sbAux {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sbAux;
        };

lvl4_rbyQc :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['.'#];

lvl5_rbyQd :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_sbAuy]
        case ds_sbAuy of {
          GHC.Types.C# x_sbAuA [Occ=Once!] ->
              case x_sbAuA of {
                __DEFAULT -> GHC.Types.False [];
                '.'# -> GHC.Types.True [];
              };
        };

lvl6_rbyQe :: GHC.Int.Int32
[GblId] =
    [] \u []
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          (#,#) _ [Occ=Dead] ds1_sbAuF [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                (#,#) _ [Occ=Dead] ds3_sbAuJ [Occ=Once] ->
                    case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                      (#,#) _ [Occ=Dead] ds5_sbAuN [Occ=Once] ->
                          case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                            (#,#) _ [Occ=Dead] ds7_sbAuR [Occ=Once] ->
                                case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                                  (#,#) _ [Occ=Dead] ds9_sbAuV [Occ=Once] ->
                                      case narrow32Int# [ds9_sbAuV] of sat_sbAv7 {
                                        __DEFAULT ->
                                            case int2Word# [sat_sbAv7] of sat_sbAv8 {
                                              __DEFAULT ->
                                                  case narrow32Int# [ds7_sbAuR] of sat_sbAv4 {
                                                    __DEFAULT ->
                                                        case int2Word# [sat_sbAv4] of sat_sbAv5 {
                                                          __DEFAULT ->
                                                              case
                                                                  narrow32Int# [ds5_sbAuN]
                                                              of
                                                              sat_sbAv1
                                                              { __DEFAULT ->
                                                                    case
                                                                        int2Word# [sat_sbAv1]
                                                                    of
                                                                    sat_sbAv2
                                                                    { __DEFAULT ->
                                                                          case
                                                                              narrow32Int# [ds3_sbAuJ]
                                                                          of
                                                                          sat_sbAuY
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    int2Word# [sat_sbAuY]
                                                                                of
                                                                                sat_sbAuZ
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow32Int# [ds1_sbAuF]
                                                                                      of
                                                                                      sat_sbAuW
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                int2Word# [sat_sbAuW]
                                                                                            of
                                                                                            sat_sbAuX
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      or# [sat_sbAuX
                                                                                                           sat_sbAuZ]
                                                                                                  of
                                                                                                  sat_sbAv0
                                                                                                  { __DEFAULT ->
                                                                                                        case
                                                                                                            or# [sat_sbAv0
                                                                                                                 sat_sbAv2]
                                                                                                        of
                                                                                                        sat_sbAv3
                                                                                                        { __DEFAULT ->
                                                                                                              case
                                                                                                                  or# [sat_sbAv3
                                                                                                                       sat_sbAv5]
                                                                                                              of
                                                                                                              sat_sbAv6
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        or# [sat_sbAv6
                                                                                                                             sat_sbAv8]
                                                                                                                    of
                                                                                                                    sat_sbAv9
                                                                                                                    { __DEFAULT ->
                                                                                                                          case
                                                                                                                              word2Int# [sat_sbAv9]
                                                                                                                          of
                                                                                                                          sat_sbAva
                                                                                                                          { __DEFAULT ->
                                                                                                                                GHC.Int.I32# [sat_sbAva];
                                                                                                                          };
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

$wlvl_rbyQf
  :: GHC.Prim.Int#
     -> GHC.Base.String
     -> GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           ([GHC.Types.Char], GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=4, Str=<B,U><B,U><B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [ww_sbAvb w_sbAvc w1_sbAvd w2_sbAve]
        let {
          sat_sbAvh [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [ww_sbAvb w_sbAvc w1_sbAvd] \u []
                  let {
                    sat_sbAvg [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        [ww_sbAvb w_sbAvc w1_sbAvd] \u []
                            let {
                              sat_sbAvf [Occ=Once] :: GHC.Base.Maybe GHC.Base.String
                              [LclId] =
                                  CCCS GHC.Base.Just! [w1_sbAvd];
                            } in 
                              Foreign.C.Error.$werrnoToIOError
                                  w_sbAvc ww_sbAvb GHC.Base.Nothing sat_sbAvf;
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbAvg;
        } in  raiseIO# [sat_sbAvh w2_sbAve];

lvl7_rbyQg
  :: Foreign.C.Error.Errno
     -> GHC.Base.String
     -> GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           ([GHC.Types.Char], GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=4, Str=<B,1*U(U)><B,U><B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [w_sbAvi w1_sbAvj w2_sbAvk w3_sbAvl]
        case w_sbAvi of {
          GHC.Int.I32# ww1_sbAvn [Occ=Once] ->
              $wlvl_rbyQf ww1_sbAvn w1_sbAvj w2_sbAvk w3_sbAvl;
        };

lvl8_rbyQh :: GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U(U)>m, Unf=OtherCon []] =
    [] \r [n_sbAvo]
        let {
          sat_sbAvs [Occ=Once] :: GHC.Types.Int
          [LclId] =
              [n_sbAvo] \u []
                  case n_sbAvo of {
                    GHC.Types.I# x_sbAvq [Occ=Once] ->
                        case +# [x_sbAvq 1#] of sat_sbAvr {
                          __DEFAULT -> GHC.Types.I# [sat_sbAvr];
                        };
                  };
        } in  (,) [sat_sbAvs n_sbAvo];

go_rbyQi :: [GHC.Types.Char] -> GHC.Types.Char -> GHC.Types.Char
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U(U)>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_sbAvt eta_sbAvu]
        case ds_sbAvt of {
          [] -> eta_sbAvu;
          : y_sbAvw [Occ=Once] ys_sbAvx [Occ=Once] ->
              go_rbyQi ys_sbAvx y_sbAvw;
        };

lvl9_rbyQj :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "-"#;

lvl10_rbyQk :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openTempFile': Template string must not contain path separator characters: "#;

lvl11_rbyQl
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Base.String
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_sbAvy template_sbAvz]
        case
            GHC.CString.unpackAppendCString# lvl10_rbyQk template_sbAvz
        of
        sat_sbAvA
        { __DEFAULT -> GHC.IO.failIO1 sat_sbAvA eta_sbAvy;
        };

System.IO.openBinaryTempFile5
  :: GHC.Base.String
     -> GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.Bool
     -> System.Posix.Types.CMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId,
 Arity=6,
 Str=<L,U><L,U><S,U><L,1*U><L,U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [loc_sbAvB
           tmp_dir_sbAvC
           template_sbAvD
           binary_sbAvE
           mode_sbAvF
           eta_sbAvG]
        case
            GHC.List.elem
                GHC.Classes.$fEqChar pathSeparatorChar_rbxCK template_sbAvD
        of
        { GHC.Types.False ->
              let {
                ds_sbAvI [Occ=OnceL!, Dmd=<L,U(U,U)>]
                  :: ([GHC.Types.Char], [GHC.Types.Char])
                [LclId] =
                    [template_sbAvD] \u []
                        case GHC.List.reverse1 template_sbAvD GHC.Types.[] of sat_sbAvJ {
                          __DEFAULT ->
                              case GHC.List.$wbreak lvl5_rbyQd sat_sbAvJ of {
                                (#,#) ww1_sbAvL [Occ=Once*] ww2_sbAvM [Occ=Once!] ->
                                    case ww2_sbAvM of {
                                      [] ->
                                          let {
                                            sat_sbAvO [Occ=Once] :: [GHC.Types.Char]
                                            [LclId] =
                                                [ww1_sbAvL] \u [] GHC.List.reverse ww1_sbAvL;
                                          } in  (,) [sat_sbAvO GHC.Types.[]];
                                      : ds1_sbAvP [Occ=Once!] rest_sbAvQ [Occ=Once] ->
                                          case ds1_sbAvP of {
                                            GHC.Types.C# ds2_sbAvS [Occ=Once!] ->
                                                case ds2_sbAvS of {
                                                  __DEFAULT -> lvl3_rbyQb;
                                                  '.'# ->
                                                      let {
                                                        sat_sbAvV [Occ=Once] :: [GHC.Types.Char]
                                                        [LclId] =
                                                            [ww1_sbAvL] \u []
                                                                GHC.List.reverse ww1_sbAvL; } in
                                                      let {
                                                        sat_sbAvW [Occ=Once] :: [GHC.Types.Char]
                                                        [LclId] =
                                                            CCCS :! [lvl4_rbyQc sat_sbAvV]; } in
                                                      let {
                                                        sat_sbAvU [Occ=Once] :: [GHC.Types.Char]
                                                        [LclId] =
                                                            [rest_sbAvQ] \u []
                                                                GHC.List.reverse rest_sbAvQ;
                                                      } in  (,) [sat_sbAvU sat_sbAvW];
                                                };
                                          };
                                    };
                              };
                        }; } in
              let {
                oflags_sbAvX [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Int.Int32
                [LclId] =
                    [binary_sbAvE] \u []
                        case lvl6_rbyQe of wild1_sbAvY {
                          GHC.Int.I32# x#_sbAvZ [Occ=Once] ->
                              case binary_sbAvE of {
                                GHC.Types.False -> wild1_sbAvY;
                                GHC.Types.True ->
                                    case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                                      (#,#) _ [Occ=Dead] ds2_sbAw4 [Occ=Once] ->
                                          case narrow32Int# [ds2_sbAw4] of sat_sbAw6 {
                                            __DEFAULT ->
                                                case int2Word# [sat_sbAw6] of sat_sbAw7 {
                                                  __DEFAULT ->
                                                      case int2Word# [x#_sbAvZ] of sat_sbAw5 {
                                                        __DEFAULT ->
                                                            case
                                                                or# [sat_sbAw5 sat_sbAw7]
                                                            of
                                                            sat_sbAw8
                                                            { __DEFAULT ->
                                                                  case
                                                                      word2Int# [sat_sbAw8]
                                                                  of
                                                                  sat_sbAw9
                                                                  { __DEFAULT ->
                                                                        GHC.Int.I32# [sat_sbAw9];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        }; } in
              let {
                lvl12_sbAwa [Occ=OnceL, Dmd=<L,C(C1(U(U,U)))>]
                  :: Foreign.C.String.CString
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Foreign.C.Types.CInt #)
                [LclId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
                    [mode_sbAvF oflags_sbAvX] \r [f_sbAwb eta1_sbAwc]
                        case f_sbAwb of {
                          GHC.Ptr.Ptr ds4_sbAwe [Occ=Once] ->
                              case oflags_sbAvX of {
                                GHC.Int.I32# ds6_sbAwg [Occ=Once] ->
                                    case mode_sbAvF of {
                                      GHC.Word.W32# ds8_sbAwi [Occ=Once] ->
                                          case
                                              __pkg_ccall base-4.11.0.0 [ds4_sbAwe
                                                                         ds6_sbAwg
                                                                         ds8_sbAwi
                                                                         eta1_sbAwc]
                                          of
                                          { (#,#) ds10_sbAwl [Occ=Once] ds11_sbAwm [Occ=Once] ->
                                                case narrow32Int# [ds11_sbAwm] of sat_sbAwn {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sbAwo [Occ=Once] :: GHC.Int.Int32
                                                        [LclId] =
                                                            CCCS GHC.Int.I32#! [sat_sbAwn];
                                                      } in  (#,#) [ds10_sbAwl sat_sbAwo];
                                                };
                                          };
                                    };
                              };
                        }; } in
              let {
                lvl13_sbAwp [Occ=OnceL!] :: GHC.Types.Bool
                [LclId] =
                    [tmp_dir_sbAvC] \u []
                        let {
                          sat_sbAwq [Occ=OnceL] :: GHC.Types.Char
                          [LclId] =
                              [tmp_dir_sbAvC] \u []
                                  go_rbyQi tmp_dir_sbAvC GHC.List.lastError; } in
                        let {
                          sat_sbAwr [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              CCCS :! [sat_sbAwq GHC.Types.[]];
                        } in 
                          GHC.List.elem
                              GHC.Classes.$fEqChar pathSeparatorChar_rbxCK sat_sbAwr;
              } in 
                let-no-escape {
                  exit_sbAws [Occ=OnceL!T[2], Dmd=<L,C(C1(U(U,U)))>]
                    :: GHC.Prim.State# GHC.Prim.RealWorld
                       -> Foreign.C.Error.Errno
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                             (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
                  [LclId[JoinId(2)],
                   Arity=2,
                   Str=<B,U><B,1*U(U)>x,
                   Unf=OtherCon []] =
                      sat-only [loc_sbAvB tmp_dir_sbAvC] \r [ipv_sbAwt errno_sbAwu]
                          lvl7_rbyQg errno_sbAwu loc_sbAvB tmp_dir_sbAvC ipv_sbAwt;
                } in 
                  let-no-escape {
                    findTempName_sbAwv [Occ=LoopBreakerT[1]]
                      :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [tmp_dir_sbAvC
                                  ds_sbAvI
                                  lvl12_sbAwa
                                  lvl13_sbAwp
                                  exit_sbAws
                                  findTempName_sbAwv] \r [s_sbAww]
                            case __pkg_ccall base-4.11.0.0 [s_sbAww] of {
                              (#,#) ds1_sbAwz [Occ=Once] ds2_sbAwA [Occ=Once] ->
                                  case tempCounter_rbxCH of {
                                    GHC.STRef.STRef r#_sbAwC [Occ=Once] ->
                                        case
                                            atomicModifyMutVar# [r#_sbAwC lvl8_rbyQh ds1_sbAwz]
                                        of
                                        { (#,#) ipv_sbAwE [Occ=Once] ipv1_sbAwF [Occ=Once!] ->
                                              case
                                                  GHC.IO.Encoding.getFileSystemEncoding ipv_sbAwE
                                              of
                                              { (#,#) ipv2_sbAwH [Occ=Once] ipv3_sbAwI [Occ=Once] ->
                                                    let {
                                                      filepath_sbAwJ :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [tmp_dir_sbAvC
                                                           ds_sbAvI
                                                           lvl13_sbAwp
                                                           ds2_sbAwA
                                                           ipv1_sbAwF] \u []
                                                              case ds_sbAvI of {
                                                                (,) prefix_sbAwL [Occ=Once]
                                                                    suffix_sbAwM [Occ=Once] ->
                                                                    let {
                                                                      sat_sbAx0 [Occ=Once,
                                                                                 Dmd=<L,1*U>]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [ds2_sbAwA
                                                                           ipv1_sbAwF
                                                                           suffix_sbAwM] \s []
                                                                              case
                                                                                  narrow32Int# [ds2_sbAwA]
                                                                              of
                                                                              sat_sbAwN
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        GHC.Show.$wshowSignedInt
                                                                                            0#
                                                                                            sat_sbAwN
                                                                                            GHC.Types.[]
                                                                                    of
                                                                                    { (#,#) ww5_sbAwP [Occ=Once]
                                                                                            ww6_sbAwQ [Occ=Once] ->
                                                                                          let {
                                                                                            sat_sbAwZ [Occ=Once,
                                                                                                       Dmd=<L,1*U>]
                                                                                              :: [GHC.Types.Char]
                                                                                            [LclId] =
                                                                                                [ipv1_sbAwF
                                                                                                 suffix_sbAwM] \s []
                                                                                                    let {
                                                                                                      sat_sbAwY [Occ=Once]
                                                                                                        :: [GHC.Types.Char]
                                                                                                      [LclId] =
                                                                                                          [ipv1_sbAwF
                                                                                                           suffix_sbAwM] \u []
                                                                                                              case
                                                                                                                  ipv1_sbAwF
                                                                                                              of
                                                                                                              { GHC.Types.I# ww3_sbAwT [Occ=Once] ->
                                                                                                                    case
                                                                                                                        GHC.Show.$wshowSignedInt
                                                                                                                            0#
                                                                                                                            ww3_sbAwT
                                                                                                                            GHC.Types.[]
                                                                                                                    of
                                                                                                                    { (#,#) ww8_sbAwV [Occ=Once]
                                                                                                                            ww9_sbAwW [Occ=Once] ->
                                                                                                                          let {
                                                                                                                            sat_sbAwX [Occ=Once]
                                                                                                                              :: [GHC.Types.Char]
                                                                                                                            [LclId] =
                                                                                                                                CCCS :! [ww8_sbAwV
                                                                                                                                         ww9_sbAwW];
                                                                                                                          } in 
                                                                                                                            GHC.Base.++
                                                                                                                                sat_sbAwX
                                                                                                                                suffix_sbAwM;
                                                                                                                    };
                                                                                                              };
                                                                                                    } in 
                                                                                                      GHC.CString.unpackAppendCString#
                                                                                                          lvl9_rbyQj
                                                                                                          sat_sbAwY; } in
                                                                                          let {
                                                                                            sat_sbAwR [Occ=Once]
                                                                                              :: [GHC.Types.Char]
                                                                                            [LclId] =
                                                                                                CCCS :! [ww5_sbAwP
                                                                                                         ww6_sbAwQ];
                                                                                          } in 
                                                                                            GHC.Base.++
                                                                                                sat_sbAwR
                                                                                                sat_sbAwZ;
                                                                                    };
                                                                              };
                                                                    } in 
                                                                      case
                                                                          GHC.Base.++
                                                                              prefix_sbAwL sat_sbAx0
                                                                      of
                                                                      wild4_sbAx1
                                                                      { [] -> tmp_dir_sbAvC;
                                                                        : _ [Occ=Dead]
                                                                          _ [Occ=Dead] ->
                                                                            case
                                                                                tmp_dir_sbAvC
                                                                            of
                                                                            wild5_sbAx4
                                                                            { [] -> wild4_sbAx1;
                                                                              : _ [Occ=Dead]
                                                                                _ [Occ=Dead] ->
                                                                                  case
                                                                                      lvl13_sbAwp
                                                                                  of
                                                                                  { GHC.Types.False ->
                                                                                        let {
                                                                                          sat_sbAx8 [Occ=Once]
                                                                                            :: [GHC.Types.Char]
                                                                                          [LclId] =
                                                                                              CCCS :! [pathSeparatorChar_rbxCK
                                                                                                       wild4_sbAx1];
                                                                                        } in 
                                                                                          GHC.Base.++
                                                                                              wild5_sbAx4
                                                                                              sat_sbAx8;
                                                                                    GHC.Types.True ->
                                                                                        GHC.Base.++
                                                                                            wild5_sbAx4
                                                                                            wild4_sbAx1;
                                                                                  };
                                                                            };
                                                                      };
                                                              };
                                                    } in 
                                                      case
                                                          GHC.Foreign.charIsRepresentable3
                                                              ipv3_sbAwI
                                                              filepath_sbAwJ
                                                              lvl12_sbAwa
                                                              ipv2_sbAwH
                                                      of
                                                      { (#,#) ipv4_sbAxa [Occ=Once*]
                                                              ipv5_sbAxb [Occ=Once] ->
                                                            case ipv5_sbAxb of wild3_sbAxc {
                                                              GHC.Int.I32# x_sbAxd [Occ=Once] ->
                                                                  let-no-escape {
                                                                    $j_sbAxe [Occ=Once*!T[2],
                                                                              Dmd=<L,1*C1(C1(U(U,U)))>]
                                                                      :: GHC.Prim.State#
                                                                           GHC.Prim.RealWorld
                                                                         -> System.IO.OpenNewFileResult
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               (GHC.IO.FilePath,
                                                                                GHC.IO.Handle.Types.Handle) #)
                                                                    [LclId[JoinId(2)],
                                                                     Arity=2,
                                                                     Str=<S,U><S,1*U>,
                                                                     Unf=OtherCon []] =
                                                                        sat-only [exit_sbAws
                                                                                  findTempName_sbAwv
                                                                                  filepath_sbAwJ] \r [ipv6_sbAxf
                                                                                                      ipv7_sbAxg]
                                                                            case ipv7_sbAxg of {
                                                                              System.IO.NewFileCreated fd_sbAxi [Occ=Once] ->
                                                                                  case
                                                                                      GHC.IO.FD.$wmkFD
                                                                                          fd_sbAxi
                                                                                          GHC.IO.IOMode.ReadWriteMode
                                                                                          GHC.Base.Nothing
                                                                                          GHC.Types.True
                                                                                          ipv6_sbAxf
                                                                                  of
                                                                                  { (#,#) ipv8_sbAxk [Occ=Once]
                                                                                          ipv9_sbAxl [Occ=Once!] ->
                                                                                        case
                                                                                            ipv9_sbAxl
                                                                                        of
                                                                                        { (,) fD_sbAxn [Occ=Once]
                                                                                              fd_type_sbAxo [Occ=Once] ->
                                                                                              case
                                                                                                  GHC.IO.Encoding.getLocaleEncoding1
                                                                                              of
                                                                                              { (,) getLocaleEncoding3_sbAxq [Occ=Once]
                                                                                                    _ [Occ=Dead] ->
                                                                                                    case
                                                                                                        getLocaleEncoding3_sbAxq
                                                                                                            ipv8_sbAxk
                                                                                                    of
                                                                                                    { (#,#) ipv10_sbAxt [Occ=Once]
                                                                                                            ipv11_sbAxu [Occ=Once] ->
                                                                                                          let {
                                                                                                            sat_sbAxv [Occ=Once]
                                                                                                              :: GHC.Base.Maybe
                                                                                                                   GHC.IO.Encoding.Types.TextEncoding
                                                                                                            [LclId] =
                                                                                                                CCCS GHC.Base.Just! [ipv11_sbAxu];
                                                                                                          } in 
                                                                                                            case
                                                                                                                GHC.IO.Handle.FD.fdToHandle5
                                                                                                                    fD_sbAxn
                                                                                                                    fd_type_sbAxo
                                                                                                                    filepath_sbAwJ
                                                                                                                    GHC.IO.IOMode.ReadWriteMode
                                                                                                                    GHC.Types.False
                                                                                                                    sat_sbAxv
                                                                                                                    ipv10_sbAxt
                                                                                                            of
                                                                                                            { (#,#) ipv12_sbAxx [Occ=Once]
                                                                                                                    ipv13_sbAxy [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sbAxz [Occ=Once]
                                                                                                                      :: ([GHC.Types.Char],
                                                                                                                          GHC.IO.Handle.Types.Handle)
                                                                                                                    [LclId] =
                                                                                                                        CCCS (,)! [filepath_sbAwJ
                                                                                                                                   ipv13_sbAxy];
                                                                                                                  } in 
                                                                                                                    (#,#) [ipv12_sbAxx
                                                                                                                           sat_sbAxz];
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                  };
                                                                              System.IO.FileExists ->
                                                                                  findTempName_sbAwv
                                                                                      ipv6_sbAxf;
                                                                              System.IO.OpenNewError errno_sbAxA [Occ=Once] ->
                                                                                  exit_sbAws
                                                                                      ipv6_sbAxf
                                                                                      errno_sbAxA;
                                                                            };
                                                                  } in 
                                                                    case <# [x_sbAxd 0#] of {
                                                                      __DEFAULT ->
                                                                          let {
                                                                            sat_sbAxC [Occ=Once]
                                                                              :: System.IO.OpenNewFileResult
                                                                            [LclId] =
                                                                                CCCS System.IO.NewFileCreated! [wild3_sbAxc];
                                                                          } in 
                                                                            $j_sbAxe
                                                                                ipv4_sbAxa
                                                                                sat_sbAxC;
                                                                      1# ->
                                                                          case
                                                                              __pkg_ccall base-4.11.0.0 [ipv4_sbAxa]
                                                                          of
                                                                          { (#,#) ds7_sbAxF [Occ=Once*]
                                                                                  ds8_sbAxG [Occ=Once] ->
                                                                                case
                                                                                    narrow32Int# [ds8_sbAxG]
                                                                                of
                                                                                wild5_sbAxH
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_sbAxI [Occ=Once]
                                                                                          :: Foreign.C.Error.Errno
                                                                                        [LclId] =
                                                                                            CCCS GHC.Int.I32#! [wild5_sbAxH]; } in
                                                                                      let {
                                                                                        sat_sbAxJ [Occ=Once]
                                                                                          :: System.IO.OpenNewFileResult
                                                                                        [LclId] =
                                                                                            CCCS System.IO.OpenNewError! [sat_sbAxI];
                                                                                      } in 
                                                                                        $j_sbAxe
                                                                                            ds7_sbAxF
                                                                                            sat_sbAxJ;
                                                                                  17# ->
                                                                                      $j_sbAxe
                                                                                          ds7_sbAxF
                                                                                          System.IO.FileExists;
                                                                                };
                                                                          };
                                                                    };
                                                            };
                                                      };
                                              };
                                        };
                                  };
                            };
                  } in  findTempName_sbAwv eta_sbAvG;
          GHC.Types.True -> lvl11_rbyQl eta_sbAvG template_sbAvD;
        };

System.IO.openBinaryTempFileWithDefaultPermissions4
  :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openBinaryTempFileWithDefaultPermissions"#;

System.IO.openBinaryTempFileWithDefaultPermissions3
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            System.IO.openBinaryTempFileWithDefaultPermissions4;

System.IO.openBinaryTempFileWithDefaultPermissions2
  :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [438##];

System.IO.openBinaryTempFileWithDefaultPermissions1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [tmp_dir_sbAxK template_sbAxL eta_B1]
        System.IO.openBinaryTempFile5
            System.IO.openBinaryTempFileWithDefaultPermissions3
            tmp_dir_sbAxK
            template_sbAxL
            GHC.Types.True
            System.IO.openBinaryTempFileWithDefaultPermissions2
            eta_B1;

System.IO.openBinaryTempFileWithDefaultPermissions
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.IO (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.IO.openBinaryTempFileWithDefaultPermissions1
            eta_B3 eta_B2 eta_B1;

System.IO.openTempFileWithDefaultPermissions3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openTempFileWithDefaultPermissions"#;

System.IO.openTempFileWithDefaultPermissions2 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            System.IO.openTempFileWithDefaultPermissions3;

System.IO.openTempFileWithDefaultPermissions1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [tmp_dir_sbAxM template_sbAxN eta_B1]
        System.IO.openBinaryTempFile5
            System.IO.openTempFileWithDefaultPermissions2
            tmp_dir_sbAxM
            template_sbAxN
            GHC.Types.False
            System.IO.openBinaryTempFileWithDefaultPermissions2
            eta_B1;

System.IO.openTempFileWithDefaultPermissions
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.IO (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.IO.openTempFileWithDefaultPermissions1 eta_B3 eta_B2 eta_B1;

System.IO.openBinaryTempFile4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openBinaryTempFile"#;

System.IO.openBinaryTempFile3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.IO.openBinaryTempFile4;

System.IO.openBinaryTempFile2 :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [384##];

System.IO.openBinaryTempFile1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [tmp_dir_sbAxO template_sbAxP eta_B1]
        System.IO.openBinaryTempFile5
            System.IO.openBinaryTempFile3
            tmp_dir_sbAxO
            template_sbAxP
            GHC.Types.True
            System.IO.openBinaryTempFile2
            eta_B1;

System.IO.openBinaryTempFile
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.IO (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.IO.openBinaryTempFile1 eta_B3 eta_B2 eta_B1;

System.IO.openTempFile3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openTempFile"#;

System.IO.openTempFile2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.IO.openTempFile3;

System.IO.openTempFile1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [tmp_dir_sbAxQ template_sbAxR eta_B1]
        System.IO.openBinaryTempFile5
            System.IO.openTempFile2
            tmp_dir_sbAxQ
            template_sbAxR
            GHC.Types.False
            System.IO.openBinaryTempFile2
            eta_B1;

System.IO.openTempFile
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.IO (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.IO.openTempFile1 eta_B3 eta_B2 eta_B1;

System.IO.NewFileCreated
  :: Foreign.C.Types.CInt -> System.IO.OpenNewFileResult
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] System.IO.NewFileCreated [eta_B1];

System.IO.FileExists :: System.IO.OpenNewFileResult
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE System.IO.FileExists! [];

System.IO.OpenNewError
  :: Foreign.C.Error.Errno -> System.IO.OpenNewFileResult
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] System.IO.OpenNewError [eta_B1];


==================== STG syntax: ====================
2018-03-16 16:06:32.197622005 UTC

System.IO.putChar1
  :: GHC.Types.Char
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U(U)>, Unf=OtherCon []] =
    [] \r [c_sbAqQ void_0E]
        GHC.IO.Handle.Text.hPutChar1
            GHC.IO.Handle.FD.stdout c_sbAqQ GHC.Prim.void#;

System.IO.putChar :: GHC.Types.Char -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U(U)>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] System.IO.putChar1 eta_B2 GHC.Prim.void#;

System.IO.putStr :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [s_sbAqR void_0E]
        GHC.IO.Handle.Text.hPutStr
            GHC.IO.Handle.FD.stdout s_sbAqR GHC.Prim.void#;

System.IO.putStrLn :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U>, Unf=OtherCon []] =
    [] \r [s_sbAqS void_0E]
        GHC.IO.Handle.Text.hPutStrLn
            GHC.IO.Handle.FD.stdout s_sbAqS GHC.Prim.void#;

System.IO.print
  :: forall a. GHC.Show.Show a => a -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*U(A,1*C1(U),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dShow_sbAqT x_sbAqU]
        let {
          sat_sbAqV [Occ=Once] :: GHC.Base.String
          [LclId] =
              [$dShow_sbAqT x_sbAqU] \u [] GHC.Show.show $dShow_sbAqT x_sbAqU;
        } in 
          GHC.IO.Handle.Text.hPutStr'
              GHC.IO.Handle.FD.stdout sat_sbAqV GHC.Types.True;

System.IO.getChar1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Char #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.Text.hGetChar6
            GHC.IO.Handle.FD.stdin
            GHC.IO.Handle.Text.hGetChar2
            GHC.Prim.void#;

System.IO.getChar :: GHC.Types.IO GHC.Types.Char
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E] System.IO.getChar1 GHC.Prim.void#;

System.IO.getLine1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.IO.Handle.Internals.wantReadableHandle_1
            GHC.IO.Handle.Text.hGetLine4
            GHC.IO.Handle.FD.stdin
            GHC.IO.Handle.Text.hGetLine2
            GHC.Prim.void#;

System.IO.getLine :: GHC.Types.IO GHC.Base.String
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E] System.IO.getLine1 GHC.Prim.void#;

System.IO.getContents1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.IO.Handle.Text.hGetContents1
            GHC.IO.Handle.FD.stdin GHC.Prim.void#;

System.IO.getContents :: GHC.Types.IO GHC.Base.String
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E] System.IO.getContents1 GHC.Prim.void#;

System.IO.localeEncoding :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.initLocaleEncoding;

System.IO.hReady2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

System.IO.hReady1
  :: GHC.IO.Handle.Types.Handle
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [h_sbAqW void_0E]
        GHC.IO.Handle.Text.hWaitForInput1
            h_sbAqW System.IO.hReady2 GHC.Prim.void#;

System.IO.hReady
  :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] System.IO.hReady1 eta_B2 GHC.Prim.void#;

System.IO.hPrint
  :: forall a.
     GHC.Show.Show a =>
     GHC.IO.Handle.Types.Handle -> a -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Str=<L,1*U(A,1*C1(U),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sbAqY hdl_sbAqZ eta_sbAr0]
        let {
          sat_sbAr1 [Occ=Once] :: GHC.Base.String
          [LclId] =
              [$dShow_sbAqY eta_sbAr0] \u []
                  GHC.Show.show $dShow_sbAqY eta_sbAr0;
        } in 
          GHC.IO.Handle.Text.hPutStr' hdl_sbAqZ sat_sbAr1 GHC.Types.True;

System.IO.appendFile2
  :: forall r.
     GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> (GHC.IO.Handle.Types.Handle -> GHC.Types.IO r)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, r #)
[GblId,
 Arity=4,
 Str=<L,U><L,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [name_sbAr2 mode_sbAr3 eta_sbAr4 void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sbAr8 [Occ=Once!] ->
              case ipv1_sbAr8 of {
                __DEFAULT ->
                    case
                        GHC.IO.Handle.FD.openFile1 name_sbAr2 mode_sbAr3 GHC.Prim.void#
                    of
                    { Unit# ipv3_sbArc ->
                          let {
                            sat_sbArk [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [ipv3_sbArc] \r [e1_sbArf void_0E]
                                    case GHC.IO.Handle.hClose1 ipv3_sbArc GHC.Prim.void# of {
                                      Unit# _ [Occ=Dead] -> raiseIO# [e1_sbArf GHC.Prim.void#];
                                    }; } in
                          let {
                            sat_sbArd [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [eta_sbAr4 ipv3_sbArc] \u [] eta_sbAr4 ipv3_sbArc; } in
                          let {
                            sat_sbAre [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [sat_sbArd] \r [void_0E]
                                    maskAsyncExceptions# [sat_sbArd GHC.Prim.void#];
                          } in 
                            case catch# [sat_sbAre sat_sbArk GHC.Prim.void#] of {
                              Unit# ipv5_sbArn [Occ=Once] ->
                                  case GHC.IO.Handle.hClose1 ipv3_sbArc GHC.Prim.void# of {
                                    Unit# _ [Occ=Dead] -> Unit# [ipv5_sbArn];
                                  };
                            };
                    };
                0# ->
                    let {
                      sat_sbArJ [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                      [LclId] =
                          [name_sbAr2 mode_sbAr3 eta_sbAr4] \r [void_0E]
                              case
                                  GHC.IO.Handle.FD.openFile1 name_sbAr2 mode_sbAr3 GHC.Prim.void#
                              of
                              { Unit# ipv3_sbAru ->
                                    let {
                                      sat_sbArC [Occ=Once]
                                        :: GHC.Exception.SomeException
                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                                      [LclId] =
                                          [ipv3_sbAru] \r [e1_sbArx void_0E]
                                              case
                                                  GHC.IO.Handle.hClose1 ipv3_sbAru GHC.Prim.void#
                                              of
                                              { Unit# _ [Occ=Dead] ->
                                                    raiseIO# [e1_sbArx GHC.Prim.void#];
                                              }; } in
                                    let {
                                      sat_sbArv [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                                      [LclId] =
                                          [eta_sbAr4 ipv3_sbAru] \u [] eta_sbAr4 ipv3_sbAru; } in
                                    let {
                                      sat_sbArw [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                                      [LclId] =
                                          [sat_sbArv] \r [void_0E]
                                              unmaskAsyncExceptions# [sat_sbArv GHC.Prim.void#];
                                    } in 
                                      case catch# [sat_sbArw sat_sbArC GHC.Prim.void#] of {
                                        Unit# ipv5_sbArF [Occ=Once] ->
                                            case
                                                GHC.IO.Handle.hClose1 ipv3_sbAru GHC.Prim.void#
                                            of
                                            { Unit# _ [Occ=Dead] -> Unit# [ipv5_sbArF];
                                            };
                                      };
                              };
                    } in  maskAsyncExceptions# [sat_sbArJ GHC.Prim.void#];
                1# ->
                    case
                        GHC.IO.Handle.FD.openFile1 name_sbAr2 mode_sbAr3 GHC.Prim.void#
                    of
                    { Unit# ipv3_sbArM ->
                          let {
                            sat_sbArU [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [ipv3_sbArM] \r [e1_sbArP void_0E]
                                    case GHC.IO.Handle.hClose1 ipv3_sbArM GHC.Prim.void# of {
                                      Unit# _ [Occ=Dead] -> raiseIO# [e1_sbArP GHC.Prim.void#];
                                    }; } in
                          let {
                            sat_sbArN [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [eta_sbAr4 ipv3_sbArM] \u [] eta_sbAr4 ipv3_sbArM; } in
                          let {
                            sat_sbArO [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZi #)
                            [LclId] =
                                [sat_sbArN] \r [void_0E]
                                    maskUninterruptible# [sat_sbArN GHC.Prim.void#];
                          } in 
                            case catch# [sat_sbArO sat_sbArU GHC.Prim.void#] of {
                              Unit# ipv5_sbArX [Occ=Once] ->
                                  case GHC.IO.Handle.hClose1 ipv3_sbArM GHC.Prim.void# of {
                                    Unit# _ [Occ=Dead] -> Unit# [ipv5_sbArX];
                                  };
                            };
                    };
              };
        };

System.IO.withFile
  :: forall r.
     GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> (GHC.IO.Handle.Types.Handle -> GHC.Types.IO r)
     -> GHC.Types.IO r
[GblId,
 Arity=4,
 Str=<L,U><L,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        System.IO.appendFile2 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

System.IO.appendFile1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [f_sbAs1 txt_sbAs2 void_0E]
        let {
          sat_sbAs5 [Occ=Once]
            :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
          [LclId] =
              [txt_sbAs2] \r [hdl_sbAs4 void_0E]
                  GHC.IO.Handle.Text.hPutStr hdl_sbAs4 txt_sbAs2 GHC.Prim.void#;
        } in 
          System.IO.appendFile2
              f_sbAs1 GHC.IO.IOMode.AppendMode sat_sbAs5 GHC.Prim.void#;

System.IO.appendFile
  :: GHC.IO.FilePath -> GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.IO.appendFile1 eta_B3 eta_B2 GHC.Prim.void#;

System.IO.writeFile1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [f_sbAs6 txt_sbAs7 void_0E]
        let {
          sat_sbAsa [Occ=Once]
            :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
          [LclId] =
              [txt_sbAs7] \r [hdl_sbAs9 void_0E]
                  GHC.IO.Handle.Text.hPutStr hdl_sbAs9 txt_sbAs7 GHC.Prim.void#;
        } in 
          System.IO.appendFile2
              f_sbAs6 GHC.IO.IOMode.WriteMode sat_sbAsa GHC.Prim.void#;

System.IO.writeFile
  :: GHC.IO.FilePath -> GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=3, Str=<L,U><L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.IO.writeFile1 eta_B3 eta_B2 GHC.Prim.void#;

System.IO.withBinaryFile1
  :: forall r.
     GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> (GHC.IO.Handle.Types.Handle -> GHC.Types.IO r)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, r #)
[GblId,
 Arity=4,
 Str=<L,U><L,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [name_sbAsb mode_sbAsc eta_sbAsd void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sbAsh [Occ=Once!] ->
              case ipv1_sbAsh of {
                __DEFAULT ->
                    case
                        GHC.IO.Handle.FD.openBinaryFile1
                            name_sbAsb mode_sbAsc GHC.Prim.void#
                    of
                    { Unit# ipv3_sbAsl ->
                          let {
                            sat_sbAst [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [ipv3_sbAsl] \r [e1_sbAso void_0E]
                                    case GHC.IO.Handle.hClose1 ipv3_sbAsl GHC.Prim.void# of {
                                      Unit# _ [Occ=Dead] -> raiseIO# [e1_sbAso GHC.Prim.void#];
                                    }; } in
                          let {
                            sat_sbAsm [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [eta_sbAsd ipv3_sbAsl] \u [] eta_sbAsd ipv3_sbAsl; } in
                          let {
                            sat_sbAsn [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [sat_sbAsm] \r [void_0E]
                                    maskAsyncExceptions# [sat_sbAsm GHC.Prim.void#];
                          } in 
                            case catch# [sat_sbAsn sat_sbAst GHC.Prim.void#] of {
                              Unit# ipv5_sbAsw [Occ=Once] ->
                                  case GHC.IO.Handle.hClose1 ipv3_sbAsl GHC.Prim.void# of {
                                    Unit# _ [Occ=Dead] -> Unit# [ipv5_sbAsw];
                                  };
                            };
                    };
                0# ->
                    let {
                      sat_sbAsS [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                      [LclId] =
                          [name_sbAsb mode_sbAsc eta_sbAsd] \r [void_0E]
                              case
                                  GHC.IO.Handle.FD.openBinaryFile1
                                      name_sbAsb mode_sbAsc GHC.Prim.void#
                              of
                              { Unit# ipv3_sbAsD ->
                                    let {
                                      sat_sbAsL [Occ=Once]
                                        :: GHC.Exception.SomeException
                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                                      [LclId] =
                                          [ipv3_sbAsD] \r [e1_sbAsG void_0E]
                                              case
                                                  GHC.IO.Handle.hClose1 ipv3_sbAsD GHC.Prim.void#
                                              of
                                              { Unit# _ [Occ=Dead] ->
                                                    raiseIO# [e1_sbAsG GHC.Prim.void#];
                                              }; } in
                                    let {
                                      sat_sbAsE [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                                      [LclId] =
                                          [eta_sbAsd ipv3_sbAsD] \u [] eta_sbAsd ipv3_sbAsD; } in
                                    let {
                                      sat_sbAsF [Occ=Once]
                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                                      [LclId] =
                                          [sat_sbAsE] \r [void_0E]
                                              unmaskAsyncExceptions# [sat_sbAsE GHC.Prim.void#];
                                    } in 
                                      case catch# [sat_sbAsF sat_sbAsL GHC.Prim.void#] of {
                                        Unit# ipv5_sbAsO [Occ=Once] ->
                                            case
                                                GHC.IO.Handle.hClose1 ipv3_sbAsD GHC.Prim.void#
                                            of
                                            { Unit# _ [Occ=Dead] -> Unit# [ipv5_sbAsO];
                                            };
                                      };
                              };
                    } in  maskAsyncExceptions# [sat_sbAsS GHC.Prim.void#];
                1# ->
                    case
                        GHC.IO.Handle.FD.openBinaryFile1
                            name_sbAsb mode_sbAsc GHC.Prim.void#
                    of
                    { Unit# ipv3_sbAsV ->
                          let {
                            sat_sbAt3 [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [ipv3_sbAsV] \r [e1_sbAsY void_0E]
                                    case GHC.IO.Handle.hClose1 ipv3_sbAsV GHC.Prim.void# of {
                                      Unit# _ [Occ=Dead] -> raiseIO# [e1_sbAsY GHC.Prim.void#];
                                    }; } in
                          let {
                            sat_sbAsW [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [eta_sbAsd ipv3_sbAsV] \u [] eta_sbAsd ipv3_sbAsV; } in
                          let {
                            sat_sbAsX [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, r_abxZ7 #)
                            [LclId] =
                                [sat_sbAsW] \r [void_0E]
                                    maskUninterruptible# [sat_sbAsW GHC.Prim.void#];
                          } in 
                            case catch# [sat_sbAsX sat_sbAt3 GHC.Prim.void#] of {
                              Unit# ipv5_sbAt6 [Occ=Once] ->
                                  case GHC.IO.Handle.hClose1 ipv3_sbAsV GHC.Prim.void# of {
                                    Unit# _ [Occ=Dead] -> Unit# [ipv5_sbAt6];
                                  };
                            };
                    };
              };
        };

System.IO.withBinaryFile
  :: forall r.
     GHC.IO.FilePath
     -> GHC.IO.IOMode.IOMode
     -> (GHC.IO.Handle.Types.Handle -> GHC.Types.IO r)
     -> GHC.Types.IO r
[GblId,
 Arity=4,
 Str=<L,U><L,U><L,1*C1(C1(U))><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        System.IO.withBinaryFile1 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

lvl_rbyQ6
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IORef.IORef GHC.Types.Int #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    sat-only [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_sbAtb {
          (##) ->
              case newMutVar# [System.IO.hReady2 GHC.Prim.void#] of {
                Unit# ipv1_sbAte [Occ=Once] ->
                    let {
                      sat_sbAtf [Occ=Once] :: GHC.IORef.IORef GHC.Types.Int
                      [LclId] =
                          CCCS GHC.STRef.STRef! [ipv1_sbAte];
                    } in  Unit# [sat_sbAtf];
              };
        };

tempCounter_rbxCH :: GHC.IORef.IORef GHC.Types.Int
[GblId] =
    [] \u []
        case lvl_rbyQ6 GHC.Prim.realWorld# of {
          Unit# ipv1_sbAti [Occ=Once] -> ipv1_sbAti;
        };

pathSeparatorChar_rbxCK :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['/'#];

System.IO.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

System.IO.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$trModule4];

System.IO.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "System.IO"#;

System.IO.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$trModule2];

System.IO.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [System.IO.$trModule3
                                     System.IO.$trModule1];

$krep_rbyQ7 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.C.Error.$tcErrno
                                              GHC.Types.[]];

$krep1_rbyQ8 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Foreign.C.Types.$tcCInt
                                              GHC.Types.[]];

System.IO.$tcOpenNewFileResult2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OpenNewFileResult"#;

System.IO.$tcOpenNewFileResult1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$tcOpenNewFileResult2];

System.IO.$tcOpenNewFileResult :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9627069439367662246##
                                    2547759174955940786##
                                    System.IO.$trModule
                                    System.IO.$tcOpenNewFileResult1
                                    0#
                                    GHC.Types.krep$*];

System.IO.$tc'FileExists1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [System.IO.$tcOpenNewFileResult
                                              GHC.Types.[]];

System.IO.$tc'FileExists3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FileExists"#;

System.IO.$tc'FileExists2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$tc'FileExists3];

System.IO.$tc'FileExists :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6704133186904346962##
                                    16997416543076271011##
                                    System.IO.$trModule
                                    System.IO.$tc'FileExists2
                                    0#
                                    System.IO.$tc'FileExists1];

System.IO.$tc'NewFileCreated1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_rbyQ8
                                         System.IO.$tc'FileExists1];

System.IO.$tc'NewFileCreated3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'NewFileCreated"#;

System.IO.$tc'NewFileCreated2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$tc'NewFileCreated3];

System.IO.$tc'NewFileCreated :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9070829168557028496##
                                    15570227817593865145##
                                    System.IO.$trModule
                                    System.IO.$tc'NewFileCreated2
                                    0#
                                    System.IO.$tc'NewFileCreated1];

System.IO.$tc'OpenNewError1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rbyQ7
                                         System.IO.$tc'FileExists1];

System.IO.$tc'OpenNewError3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'OpenNewError"#;

System.IO.$tc'OpenNewError2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.IO.$tc'OpenNewError3];

System.IO.$tc'OpenNewError :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [300310999495895268##
                                    12582581010413704951##
                                    System.IO.$trModule
                                    System.IO.$tc'OpenNewError2
                                    0#
                                    System.IO.$tc'OpenNewError1];

lvl1_rbyQ9 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionFixIOException_$ctoException
            GHC.IO.Exception.FixIOException;

System.IO.fixIO3
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E] raiseIO# [lvl1_rbyQ9 GHC.Prim.void#];

System.IO.fixIO2
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [e1_sbAtk]
        case e1_sbAtk of wild_sbAtl {
          GHC.Exception.SomeException $dException1_sbAtm [Occ=Once]
                                      e3_sbAtn [Occ=Once] ->
              case GHC.Exception.$p1Exception $dException1_sbAtm of sat_sbAto {
                __DEFAULT ->
                    case
                        Data.Typeable.Internal.sameTypeRep
                            sat_sbAto GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3
                    of
                    { GHC.Types.False ->
                          let {
                            sat_sbAtq [Occ=OnceT[0]]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_abxYz #)
                            [LclId] =
                                [wild_sbAtl] \r [void_0E] raiseIO# [wild_sbAtl GHC.Prim.void#];
                          } in  sat_sbAtq;
                      GHC.Types.True ->
                          case e3_sbAtn of {
                            GHC.IO.Exception.BlockedIndefinitelyOnMVar -> System.IO.fixIO3;
                          };
                    };
              };
        };

System.IO.fixIO1
  :: forall a.
     (a -> GHC.Types.IO a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*C1(C1(U(U,U)))><S,U>, Unf=OtherCon []] =
    [] \r [k_sbAts void_0E]
        case newMVar# [GHC.Prim.void#] of {
          Unit# ipv1_sbAtw ->
              let {
                sat_sbAtA [Occ=Once] :: GHC.Types.IO a_abxYz
                [LclId] =
                    [ipv1_sbAtw] \r [void_0E]
                        let {
                          sat_sbAtz [Occ=Once]
                            :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_abxYz #)
                          [LclId] =
                              [ipv1_sbAtw] \r [void_0E] readMVar# [ipv1_sbAtw GHC.Prim.void#];
                        } in  catch# [sat_sbAtz System.IO.fixIO2 GHC.Prim.void#];
              } in 
                case
                    GHC.IO.Unsafe.unsafeDupableInterleaveIO sat_sbAtA GHC.Prim.void#
                of
                { Unit# ipv3_sbAtD [Occ=Once] ->
                      case k_sbAts ipv3_sbAtD GHC.Prim.void# of {
                        Unit# ipv5_sbAtG ->
                            case putMVar# [ipv1_sbAtw ipv5_sbAtG GHC.Prim.void#] of s2#_sbAtH {
                              (##) -> Unit# [ipv5_sbAtG];
                            };
                      };
                };
        };

System.IO.fixIO
  :: forall a. (a -> GHC.Types.IO a) -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*C1(C1(U(U,U)))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] System.IO.fixIO1 eta_B2 GHC.Prim.void#;

System.IO.readIO9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Prelude.readIO: no parse"#;

System.IO.readIO8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.IO.readIO9;

System.IO.readIO7 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.UserError
                                             GHC.Types.[]
                                             System.IO.readIO8
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

System.IO.readIO6 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            System.IO.readIO7;

System.IO.readIO5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Prelude.readIO: ambiguous parse"#;

System.IO.readIO4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.IO.readIO5;

System.IO.readIO3 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.UserError
                                             GHC.Types.[]
                                             System.IO.readIO4
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

System.IO.readIO2 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            System.IO.readIO3;

System.IO.readIO10 [Occ=LoopBreaker]
  :: forall a. [(a, GHC.Base.String)] -> [a]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sbAtI]
        case ds_sbAtI of {
          [] -> [] [];
          : y_sbAtK [Occ=Once!] ys_sbAtL [Occ=Once] ->
              case y_sbAtK of {
                (,) x_sbAtN [Occ=OnceL] t_sbAtO [Occ=Once] ->
                    let {
                      lvl12_sbAtP [Occ=OnceL] :: [a_abxZC]
                      [LclId, Unf=OtherCon []] =
                          CCCS :! [x_sbAtN GHC.Types.[]]; } in
                    let {
                      z_sbAtQ [Occ=OnceL] :: [a_abxZC]
                      [LclId] =
                          [ys_sbAtL] \u [] System.IO.readIO10 ys_sbAtL; } in
                    let {
                      go1_sbAtR [Occ=LoopBreaker]
                        :: [(GHC.Base.String, GHC.Base.String)] -> [a_abxZC]
                      [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                          sat-only [lvl12_sbAtP z_sbAtQ go1_sbAtR] \r [ds1_sbAtS]
                              case ds1_sbAtS of {
                                [] -> z_sbAtQ;
                                : y1_sbAtU [Occ=Once!] ys1_sbAtV [Occ=Once*] ->
                                    case y1_sbAtU of {
                                      (,) ds2_sbAtX [Occ=Once!] ds3_sbAtY [Occ=Once!] ->
                                          case ds2_sbAtX of {
                                            [] ->
                                                case ds3_sbAtY of {
                                                  [] ->
                                                      let {
                                                        sat_sbAu1 [Occ=Once, Dmd=<L,1*U>]
                                                          :: [a_abxZC]
                                                        [LclId] =
                                                            [go1_sbAtR ys1_sbAtV] \s []
                                                                go1_sbAtR ys1_sbAtV;
                                                      } in  GHC.Base.++ lvl12_sbAtP sat_sbAu1;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      go1_sbAtR ys1_sbAtV;
                                                };
                                            : _ [Occ=Dead] _ [Occ=Dead] -> go1_sbAtR ys1_sbAtV;
                                          };
                                    };
                              };
                    } in 
                      case
                          Text.ParserCombinators.ReadP.run GHC.Read.lex1 t_sbAtO
                      of
                      sat_sbAu6
                      { __DEFAULT -> go1_sbAtR sat_sbAu6;
                      };
              };
        };

System.IO.readIO1
  :: forall a.
     GHC.Read.Read a =>
     GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Str=<S(C(C(S))LLL),1*U(1*C1(C1(U)),A,A,A)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_sbAu7 s_sbAu8 void_0E]
        case
            GHC.Read.readsPrec
                $dRead_sbAu7 Text.ParserCombinators.ReadPrec.minPrec s_sbAu8
        of
        sat_sbAua
        { __DEFAULT ->
              case System.IO.readIO10 sat_sbAua of {
                [] -> raiseIO# [System.IO.readIO6 GHC.Prim.void#];
                : x_sbAuc [Occ=Once] ds_sbAud [Occ=Once!] ->
                    case ds_sbAud of {
                      [] -> Unit# [x_sbAuc];
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          raiseIO# [System.IO.readIO2 GHC.Prim.void#];
                    };
              };
        };

System.IO.readIO
  :: forall a. GHC.Read.Read a => GHC.Base.String -> GHC.Types.IO a
[GblId,
 Arity=3,
 Str=<S(C(C(S))LLL),1*U(1*C1(C1(U)),A,A,A)><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.IO.readIO1 eta_B3 eta_B2 GHC.Prim.void#;

System.IO.readLn1
  :: forall a.
     GHC.Read.Read a =>
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(U)),A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_sbAuh void_0E]
        case
            GHC.IO.Handle.Internals.wantReadableHandle_1
                GHC.IO.Handle.Text.hGetLine4
                GHC.IO.Handle.FD.stdin
                GHC.IO.Handle.Text.hGetLine2
                GHC.Prim.void#
        of
        { Unit# ipv1_sbAul [Occ=Once] ->
              System.IO.readIO1 $dRead_sbAuh ipv1_sbAul GHC.Prim.void#;
        };

System.IO.readLn :: forall a. GHC.Read.Read a => GHC.Types.IO a
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(U)),A,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] System.IO.readLn1 eta_B2 GHC.Prim.void#;

System.IO.readFile1
  :: GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [name_sbAum void_0E]
        case
            GHC.IO.Handle.FD.openFile1
                name_sbAum GHC.IO.IOMode.ReadMode GHC.Prim.void#
        of
        { Unit# ipv1_sbAuq [Occ=Once] ->
              GHC.IO.Handle.Text.hGetContents1 ipv1_sbAuq GHC.Prim.void#;
        };

System.IO.readFile
  :: GHC.IO.FilePath -> GHC.Types.IO GHC.Base.String
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] System.IO.readFile1 eta_B2 GHC.Prim.void#;

System.IO.interact1
  :: (GHC.Base.String -> GHC.Base.String)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [f_sbAur void_0E]
        case
            GHC.IO.Handle.Text.hGetContents1
                GHC.IO.Handle.FD.stdin GHC.Prim.void#
        of
        { Unit# ipv1_sbAuv [Occ=Once] ->
              let {
                sat_sbAuw [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
                [LclId] =
                    [f_sbAur ipv1_sbAuv] \s [] f_sbAur ipv1_sbAuv;
              } in 
                GHC.IO.Handle.Text.hPutStr'
                    GHC.IO.Handle.FD.stdout sat_sbAuw GHC.Types.False GHC.Prim.void#;
        };

System.IO.interact
  :: (GHC.Base.String -> GHC.Base.String) -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] System.IO.interact1 eta_B2 GHC.Prim.void#;

lvl2_rbyQa :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bug in System.IO.openTempFile"#;

lvl3_rbyQb :: ([GHC.Types.Char], [GHC.Types.Char])
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl2_rbyQa of sat_sbAux {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sbAux;
        };

lvl4_rbyQc :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['.'#];

lvl5_rbyQd :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_sbAuy]
        case ds_sbAuy of {
          GHC.Types.C# x_sbAuA [Occ=Once!] ->
              case x_sbAuA of {
                __DEFAULT -> GHC.Types.False [];
                '.'# -> GHC.Types.True [];
              };
        };

lvl6_rbyQe :: GHC.Int.Int32
[GblId] =
    [] \u []
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          Unit# ds1_sbAuF [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                Unit# ds3_sbAuJ [Occ=Once] ->
                    case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                      Unit# ds5_sbAuN [Occ=Once] ->
                          case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                            Unit# ds7_sbAuR [Occ=Once] ->
                                case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                                  Unit# ds9_sbAuV [Occ=Once] ->
                                      case narrow32Int# [ds9_sbAuV] of sat_sbAv7 {
                                        __DEFAULT ->
                                            case int2Word# [sat_sbAv7] of sat_sbAv8 {
                                              __DEFAULT ->
                                                  case narrow32Int# [ds7_sbAuR] of sat_sbAv4 {
                                                    __DEFAULT ->
                                                        case int2Word# [sat_sbAv4] of sat_sbAv5 {
                                                          __DEFAULT ->
                                                              case
                                                                  narrow32Int# [ds5_sbAuN]
                                                              of
                                                              sat_sbAv1
                                                              { __DEFAULT ->
                                                                    case
                                                                        int2Word# [sat_sbAv1]
                                                                    of
                                                                    sat_sbAv2
                                                                    { __DEFAULT ->
                                                                          case
                                                                              narrow32Int# [ds3_sbAuJ]
                                                                          of
                                                                          sat_sbAuY
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    int2Word# [sat_sbAuY]
                                                                                of
                                                                                sat_sbAuZ
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          narrow32Int# [ds1_sbAuF]
                                                                                      of
                                                                                      sat_sbAuW
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                int2Word# [sat_sbAuW]
                                                                                            of
                                                                                            sat_sbAuX
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      or# [sat_sbAuX
                                                                                                           sat_sbAuZ]
                                                                                                  of
                                                                                                  sat_sbAv0
                                                                                                  { __DEFAULT ->
                                                                                                        case
                                                                                                            or# [sat_sbAv0
                                                                                                                 sat_sbAv2]
                                                                                                        of
                                                                                                        sat_sbAv3
                                                                                                        { __DEFAULT ->
                                                                                                              case
                                                                                                                  or# [sat_sbAv3
                                                                                                                       sat_sbAv5]
                                                                                                              of
                                                                                                              sat_sbAv6
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        or# [sat_sbAv6
                                                                                                                             sat_sbAv8]
                                                                                                                    of
                                                                                                                    sat_sbAv9
                                                                                                                    { __DEFAULT ->
                                                                                                                          case
                                                                                                                              word2Int# [sat_sbAv9]
                                                                                                                          of
                                                                                                                          sat_sbAva
                                                                                                                          { __DEFAULT ->
                                                                                                                                GHC.Int.I32# [sat_sbAva];
                                                                                                                          };
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

$wlvl_rbyQf
  :: GHC.Prim.Int#
     -> GHC.Base.String
     -> GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           ([GHC.Types.Char], GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=4, Str=<B,U><B,U><B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [ww_sbAvb w_sbAvc w1_sbAvd void_0E]
        let {
          sat_sbAvh [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [ww_sbAvb w_sbAvc w1_sbAvd] \u []
                  let {
                    sat_sbAvg [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        [ww_sbAvb w_sbAvc w1_sbAvd] \u []
                            let {
                              sat_sbAvf [Occ=Once] :: GHC.Base.Maybe GHC.Base.String
                              [LclId] =
                                  CCCS GHC.Base.Just! [w1_sbAvd];
                            } in 
                              Foreign.C.Error.$werrnoToIOError
                                  w_sbAvc ww_sbAvb GHC.Base.Nothing sat_sbAvf;
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_sbAvg;
        } in  raiseIO# [sat_sbAvh GHC.Prim.void#];

lvl7_rbyQg
  :: Foreign.C.Error.Errno
     -> GHC.Base.String
     -> GHC.IO.FilePath
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           ([GHC.Types.Char], GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=4, Str=<B,1*U(U)><B,U><B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [w_sbAvi w1_sbAvj w2_sbAvk void_0E]
        case w_sbAvi of {
          GHC.Int.I32# ww1_sbAvn [Occ=Once] ->
              $wlvl_rbyQf ww1_sbAvn w1_sbAvj w2_sbAvk GHC.Prim.void#;
        };

lvl8_rbyQh :: GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U(U)>m, Unf=OtherCon []] =
    [] \r [n_sbAvo]
        let {
          sat_sbAvs [Occ=Once] :: GHC.Types.Int
          [LclId] =
              [n_sbAvo] \u []
                  case n_sbAvo of {
                    GHC.Types.I# x_sbAvq [Occ=Once] ->
                        case +# [x_sbAvq 1#] of sat_sbAvr {
                          __DEFAULT -> GHC.Types.I# [sat_sbAvr];
                        };
                  };
        } in  (,) [sat_sbAvs n_sbAvo];

go_rbyQi :: [GHC.Types.Char] -> GHC.Types.Char -> GHC.Types.Char
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U(U)>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_sbAvt eta_sbAvu]
        case ds_sbAvt of {
          [] -> eta_sbAvu;
          : y_sbAvw [Occ=Once] ys_sbAvx [Occ=Once] ->
              go_rbyQi ys_sbAvx y_sbAvw;
        };

lvl9_rbyQj :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "-"#;

lvl10_rbyQk :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openTempFile': Template string must not contain path separator characters: "#;

lvl11_rbyQl
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Base.String
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [void_0E template_sbAvz]
        case
            GHC.CString.unpackAppendCString# lvl10_rbyQk template_sbAvz
        of
        sat_sbAvA
        { __DEFAULT -> GHC.IO.failIO1 sat_sbAvA GHC.Prim.void#;
        };

System.IO.openBinaryTempFile5
  :: GHC.Base.String
     -> GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.Bool
     -> System.Posix.Types.CMode
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId,
 Arity=6,
 Str=<L,U><L,U><S,U><L,1*U><L,U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [loc_sbAvB
           tmp_dir_sbAvC
           template_sbAvD
           binary_sbAvE
           mode_sbAvF
           void_0E]
        case
            GHC.List.elem
                GHC.Classes.$fEqChar pathSeparatorChar_rbxCK template_sbAvD
        of
        { GHC.Types.False ->
              let {
                ds_sbAvI [Occ=OnceL!, Dmd=<L,U(U,U)>]
                  :: ([GHC.Types.Char], [GHC.Types.Char])
                [LclId] =
                    [template_sbAvD] \u []
                        case GHC.List.reverse1 template_sbAvD GHC.Types.[] of sat_sbAvJ {
                          __DEFAULT ->
                              case GHC.List.$wbreak lvl5_rbyQd sat_sbAvJ of {
                                (#,#) ww1_sbAvL [Occ=Once*] ww2_sbAvM [Occ=Once!] ->
                                    case ww2_sbAvM of {
                                      [] ->
                                          let {
                                            sat_sbAvO [Occ=Once] :: [GHC.Types.Char]
                                            [LclId] =
                                                [ww1_sbAvL] \u [] GHC.List.reverse ww1_sbAvL;
                                          } in  (,) [sat_sbAvO GHC.Types.[]];
                                      : ds1_sbAvP [Occ=Once!] rest_sbAvQ [Occ=Once] ->
                                          case ds1_sbAvP of {
                                            GHC.Types.C# ds2_sbAvS [Occ=Once!] ->
                                                case ds2_sbAvS of {
                                                  __DEFAULT -> lvl3_rbyQb;
                                                  '.'# ->
                                                      let {
                                                        sat_sbAvV [Occ=Once] :: [GHC.Types.Char]
                                                        [LclId] =
                                                            [ww1_sbAvL] \u []
                                                                GHC.List.reverse ww1_sbAvL; } in
                                                      let {
                                                        sat_sbAvW [Occ=Once] :: [GHC.Types.Char]
                                                        [LclId] =
                                                            CCCS :! [lvl4_rbyQc sat_sbAvV]; } in
                                                      let {
                                                        sat_sbAvU [Occ=Once] :: [GHC.Types.Char]
                                                        [LclId] =
                                                            [rest_sbAvQ] \u []
                                                                GHC.List.reverse rest_sbAvQ;
                                                      } in  (,) [sat_sbAvU sat_sbAvW];
                                                };
                                          };
                                    };
                              };
                        }; } in
              let {
                oflags_sbAvX [Occ=OnceL!, Dmd=<L,U(U)>] :: GHC.Int.Int32
                [LclId] =
                    [binary_sbAvE] \u []
                        case lvl6_rbyQe of wild1_sbAvY {
                          GHC.Int.I32# x#_sbAvZ [Occ=Once] ->
                              case binary_sbAvE of {
                                GHC.Types.False -> wild1_sbAvY;
                                GHC.Types.True ->
                                    case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
                                      Unit# ds2_sbAw4 [Occ=Once] ->
                                          case narrow32Int# [ds2_sbAw4] of sat_sbAw6 {
                                            __DEFAULT ->
                                                case int2Word# [sat_sbAw6] of sat_sbAw7 {
                                                  __DEFAULT ->
                                                      case int2Word# [x#_sbAvZ] of sat_sbAw5 {
                                                        __DEFAULT ->
                                                            case
                                                                or# [sat_sbAw5 sat_sbAw7]
                                                            of
                                                            sat_sbAw8
                                                            { __DEFAULT ->
                                                                  case
                                                                      word2Int# [sat_sbAw8]
                                                                  of
                                                                  sat_sbAw9
                                                                  { __DEFAULT ->
                                                                        GHC.Int.I32# [sat_sbAw9];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        }; } in
              let {
                lvl12_sbAwa [Occ=OnceL, Dmd=<L,C(C1(U(U,U)))>]
                  :: Foreign.C.String.CString
                     -> GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Foreign.C.Types.CInt #)
                [LclId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
                    [mode_sbAvF oflags_sbAvX] \r [f_sbAwb void_0E]
                        case f_sbAwb of {
                          GHC.Ptr.Ptr ds4_sbAwe [Occ=Once] ->
                              case oflags_sbAvX of {
                                GHC.Int.I32# ds6_sbAwg [Occ=Once] ->
                                    case mode_sbAvF of {
                                      GHC.Word.W32# ds8_sbAwi [Occ=Once] ->
                                          case
                                              __pkg_ccall base-4.11.0.0 [ds4_sbAwe
                                                                         ds6_sbAwg
                                                                         ds8_sbAwi
                                                                         GHC.Prim.void#]
                                          of
                                          { Unit# ds11_sbAwm [Occ=Once] ->
                                                case narrow32Int# [ds11_sbAwm] of sat_sbAwn {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sbAwo [Occ=Once] :: GHC.Int.Int32
                                                        [LclId] =
                                                            CCCS GHC.Int.I32#! [sat_sbAwn];
                                                      } in  Unit# [sat_sbAwo];
                                                };
                                          };
                                    };
                              };
                        }; } in
              let {
                lvl13_sbAwp [Occ=OnceL!] :: GHC.Types.Bool
                [LclId] =
                    [tmp_dir_sbAvC] \u []
                        let {
                          sat_sbAwq [Occ=OnceL] :: GHC.Types.Char
                          [LclId] =
                              [tmp_dir_sbAvC] \u []
                                  go_rbyQi tmp_dir_sbAvC GHC.List.lastError; } in
                        let {
                          sat_sbAwr [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              CCCS :! [sat_sbAwq GHC.Types.[]];
                        } in 
                          GHC.List.elem
                              GHC.Classes.$fEqChar pathSeparatorChar_rbxCK sat_sbAwr;
              } in 
                let-no-escape {
                  exit_sbAws [Occ=OnceL!T[2], Dmd=<L,C(C1(U(U,U)))>]
                    :: GHC.Prim.State# GHC.Prim.RealWorld
                       -> Foreign.C.Error.Errno
                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                             (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
                  [LclId[JoinId(2)],
                   Arity=2,
                   Str=<B,U><B,1*U(U)>x,
                   Unf=OtherCon []] =
                      sat-only [loc_sbAvB tmp_dir_sbAvC] \r [void_0E errno_sbAwu]
                          lvl7_rbyQg errno_sbAwu loc_sbAvB tmp_dir_sbAvC GHC.Prim.void#;
                } in 
                  let-no-escape {
                    findTempName_sbAwv [Occ=LoopBreakerT[1]]
                      :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [tmp_dir_sbAvC
                                  ds_sbAvI
                                  lvl12_sbAwa
                                  lvl13_sbAwp
                                  exit_sbAws
                                  findTempName_sbAwv] \r [void_0E]
                            case __pkg_ccall base-4.11.0.0 [GHC.Prim.void#] of {
                              Unit# ds2_sbAwA [Occ=Once] ->
                                  case tempCounter_rbxCH of {
                                    GHC.STRef.STRef r#_sbAwC [Occ=Once] ->
                                        case
                                            atomicModifyMutVar# [r#_sbAwC lvl8_rbyQh GHC.Prim.void#]
                                        of
                                        { Unit# ipv1_sbAwF [Occ=Once!] ->
                                              case
                                                  GHC.IO.Encoding.getFileSystemEncoding
                                                      GHC.Prim.void#
                                              of
                                              { Unit# ipv3_sbAwI [Occ=Once] ->
                                                    let {
                                                      filepath_sbAwJ :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [tmp_dir_sbAvC
                                                           ds_sbAvI
                                                           lvl13_sbAwp
                                                           ds2_sbAwA
                                                           ipv1_sbAwF] \u []
                                                              case ds_sbAvI of {
                                                                (,) prefix_sbAwL [Occ=Once]
                                                                    suffix_sbAwM [Occ=Once] ->
                                                                    let {
                                                                      sat_sbAx0 [Occ=Once,
                                                                                 Dmd=<L,1*U>]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [ds2_sbAwA
                                                                           ipv1_sbAwF
                                                                           suffix_sbAwM] \s []
                                                                              case
                                                                                  narrow32Int# [ds2_sbAwA]
                                                                              of
                                                                              sat_sbAwN
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        GHC.Show.$wshowSignedInt
                                                                                            0#
                                                                                            sat_sbAwN
                                                                                            GHC.Types.[]
                                                                                    of
                                                                                    { (#,#) ww5_sbAwP [Occ=Once]
                                                                                            ww6_sbAwQ [Occ=Once] ->
                                                                                          let {
                                                                                            sat_sbAwZ [Occ=Once,
                                                                                                       Dmd=<L,1*U>]
                                                                                              :: [GHC.Types.Char]
                                                                                            [LclId] =
                                                                                                [ipv1_sbAwF
                                                                                                 suffix_sbAwM] \s []
                                                                                                    let {
                                                                                                      sat_sbAwY [Occ=Once]
                                                                                                        :: [GHC.Types.Char]
                                                                                                      [LclId] =
                                                                                                          [ipv1_sbAwF
                                                                                                           suffix_sbAwM] \u []
                                                                                                              case
                                                                                                                  ipv1_sbAwF
                                                                                                              of
                                                                                                              { GHC.Types.I# ww3_sbAwT [Occ=Once] ->
                                                                                                                    case
                                                                                                                        GHC.Show.$wshowSignedInt
                                                                                                                            0#
                                                                                                                            ww3_sbAwT
                                                                                                                            GHC.Types.[]
                                                                                                                    of
                                                                                                                    { (#,#) ww8_sbAwV [Occ=Once]
                                                                                                                            ww9_sbAwW [Occ=Once] ->
                                                                                                                          let {
                                                                                                                            sat_sbAwX [Occ=Once]
                                                                                                                              :: [GHC.Types.Char]
                                                                                                                            [LclId] =
                                                                                                                                CCCS :! [ww8_sbAwV
                                                                                                                                         ww9_sbAwW];
                                                                                                                          } in 
                                                                                                                            GHC.Base.++
                                                                                                                                sat_sbAwX
                                                                                                                                suffix_sbAwM;
                                                                                                                    };
                                                                                                              };
                                                                                                    } in 
                                                                                                      GHC.CString.unpackAppendCString#
                                                                                                          lvl9_rbyQj
                                                                                                          sat_sbAwY; } in
                                                                                          let {
                                                                                            sat_sbAwR [Occ=Once]
                                                                                              :: [GHC.Types.Char]
                                                                                            [LclId] =
                                                                                                CCCS :! [ww5_sbAwP
                                                                                                         ww6_sbAwQ];
                                                                                          } in 
                                                                                            GHC.Base.++
                                                                                                sat_sbAwR
                                                                                                sat_sbAwZ;
                                                                                    };
                                                                              };
                                                                    } in 
                                                                      case
                                                                          GHC.Base.++
                                                                              prefix_sbAwL sat_sbAx0
                                                                      of
                                                                      wild4_sbAx1
                                                                      { [] -> tmp_dir_sbAvC;
                                                                        : _ [Occ=Dead]
                                                                          _ [Occ=Dead] ->
                                                                            case
                                                                                tmp_dir_sbAvC
                                                                            of
                                                                            wild5_sbAx4
                                                                            { [] -> wild4_sbAx1;
                                                                              : _ [Occ=Dead]
                                                                                _ [Occ=Dead] ->
                                                                                  case
                                                                                      lvl13_sbAwp
                                                                                  of
                                                                                  { GHC.Types.False ->
                                                                                        let {
                                                                                          sat_sbAx8 [Occ=Once]
                                                                                            :: [GHC.Types.Char]
                                                                                          [LclId] =
                                                                                              CCCS :! [pathSeparatorChar_rbxCK
                                                                                                       wild4_sbAx1];
                                                                                        } in 
                                                                                          GHC.Base.++
                                                                                              wild5_sbAx4
                                                                                              sat_sbAx8;
                                                                                    GHC.Types.True ->
                                                                                        GHC.Base.++
                                                                                            wild5_sbAx4
                                                                                            wild4_sbAx1;
                                                                                  };
                                                                            };
                                                                      };
                                                              };
                                                    } in 
                                                      case
                                                          GHC.Foreign.charIsRepresentable3
                                                              ipv3_sbAwI
                                                              filepath_sbAwJ
                                                              lvl12_sbAwa
                                                              GHC.Prim.void#
                                                      of
                                                      { Unit# ipv5_sbAxb [Occ=Once] ->
                                                            case ipv5_sbAxb of wild3_sbAxc {
                                                              GHC.Int.I32# x_sbAxd [Occ=Once] ->
                                                                  let-no-escape {
                                                                    $j_sbAxe [Occ=Once*!T[2],
                                                                              Dmd=<L,1*C1(C1(U(U,U)))>]
                                                                      :: GHC.Prim.State#
                                                                           GHC.Prim.RealWorld
                                                                         -> System.IO.OpenNewFileResult
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               (GHC.IO.FilePath,
                                                                                GHC.IO.Handle.Types.Handle) #)
                                                                    [LclId[JoinId(2)],
                                                                     Arity=2,
                                                                     Str=<S,U><S,1*U>,
                                                                     Unf=OtherCon []] =
                                                                        sat-only [exit_sbAws
                                                                                  findTempName_sbAwv
                                                                                  filepath_sbAwJ] \r [void_0E
                                                                                                      ipv7_sbAxg]
                                                                            case ipv7_sbAxg of {
                                                                              System.IO.NewFileCreated fd_sbAxi [Occ=Once] ->
                                                                                  case
                                                                                      GHC.IO.FD.$wmkFD
                                                                                          fd_sbAxi
                                                                                          GHC.IO.IOMode.ReadWriteMode
                                                                                          GHC.Base.Nothing
                                                                                          GHC.Types.True
                                                                                          GHC.Prim.void#
                                                                                  of
                                                                                  { Unit# ipv9_sbAxl [Occ=Once!] ->
                                                                                        case
                                                                                            ipv9_sbAxl
                                                                                        of
                                                                                        { (,) fD_sbAxn [Occ=Once]
                                                                                              fd_type_sbAxo [Occ=Once] ->
                                                                                              case
                                                                                                  GHC.IO.Encoding.getLocaleEncoding1
                                                                                              of
                                                                                              { (,) getLocaleEncoding3_sbAxq [Occ=Once]
                                                                                                    _ [Occ=Dead] ->
                                                                                                    case
                                                                                                        getLocaleEncoding3_sbAxq
                                                                                                            GHC.Prim.void#
                                                                                                    of
                                                                                                    { Unit# ipv11_sbAxu [Occ=Once] ->
                                                                                                          let {
                                                                                                            sat_sbAxv [Occ=Once]
                                                                                                              :: GHC.Base.Maybe
                                                                                                                   GHC.IO.Encoding.Types.TextEncoding
                                                                                                            [LclId] =
                                                                                                                CCCS GHC.Base.Just! [ipv11_sbAxu];
                                                                                                          } in 
                                                                                                            case
                                                                                                                GHC.IO.Handle.FD.fdToHandle5
                                                                                                                    fD_sbAxn
                                                                                                                    fd_type_sbAxo
                                                                                                                    filepath_sbAwJ
                                                                                                                    GHC.IO.IOMode.ReadWriteMode
                                                                                                                    GHC.Types.False
                                                                                                                    sat_sbAxv
                                                                                                                    GHC.Prim.void#
                                                                                                            of
                                                                                                            { Unit# ipv13_sbAxy [Occ=Once] ->
                                                                                                                  let {
                                                                                                                    sat_sbAxz [Occ=Once]
                                                                                                                      :: ([GHC.Types.Char],
                                                                                                                          GHC.IO.Handle.Types.Handle)
                                                                                                                    [LclId] =
                                                                                                                        CCCS (,)! [filepath_sbAwJ
                                                                                                                                   ipv13_sbAxy];
                                                                                                                  } in 
                                                                                                                    Unit# [sat_sbAxz];
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                  };
                                                                              System.IO.FileExists ->
                                                                                  findTempName_sbAwv
                                                                                      GHC.Prim.void#;
                                                                              System.IO.OpenNewError errno_sbAxA [Occ=Once] ->
                                                                                  exit_sbAws
                                                                                      GHC.Prim.void#
                                                                                      errno_sbAxA;
                                                                            };
                                                                  } in 
                                                                    case <# [x_sbAxd 0#] of {
                                                                      __DEFAULT ->
                                                                          let {
                                                                            sat_sbAxC [Occ=Once]
                                                                              :: System.IO.OpenNewFileResult
                                                                            [LclId] =
                                                                                CCCS System.IO.NewFileCreated! [wild3_sbAxc];
                                                                          } in 
                                                                            $j_sbAxe
                                                                                GHC.Prim.void#
                                                                                sat_sbAxC;
                                                                      1# ->
                                                                          case
                                                                              __pkg_ccall base-4.11.0.0 [GHC.Prim.void#]
                                                                          of
                                                                          { Unit# ds8_sbAxG [Occ=Once] ->
                                                                                case
                                                                                    narrow32Int# [ds8_sbAxG]
                                                                                of
                                                                                wild5_sbAxH
                                                                                { __DEFAULT ->
                                                                                      let {
                                                                                        sat_sbAxI [Occ=Once]
                                                                                          :: Foreign.C.Error.Errno
                                                                                        [LclId] =
                                                                                            CCCS GHC.Int.I32#! [wild5_sbAxH]; } in
                                                                                      let {
                                                                                        sat_sbAxJ [Occ=Once]
                                                                                          :: System.IO.OpenNewFileResult
                                                                                        [LclId] =
                                                                                            CCCS System.IO.OpenNewError! [sat_sbAxI];
                                                                                      } in 
                                                                                        $j_sbAxe
                                                                                            GHC.Prim.void#
                                                                                            sat_sbAxJ;
                                                                                  17# ->
                                                                                      $j_sbAxe
                                                                                          GHC.Prim.void#
                                                                                          System.IO.FileExists;
                                                                                };
                                                                          };
                                                                    };
                                                            };
                                                      };
                                              };
                                        };
                                  };
                            };
                  } in  findTempName_sbAwv GHC.Prim.void#;
          GHC.Types.True -> lvl11_rbyQl GHC.Prim.void# template_sbAvD;
        };

System.IO.openBinaryTempFileWithDefaultPermissions4
  :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openBinaryTempFileWithDefaultPermissions"#;

System.IO.openBinaryTempFileWithDefaultPermissions3
  :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            System.IO.openBinaryTempFileWithDefaultPermissions4;

System.IO.openBinaryTempFileWithDefaultPermissions2
  :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [438##];

System.IO.openBinaryTempFileWithDefaultPermissions1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [tmp_dir_sbAxK template_sbAxL void_0E]
        System.IO.openBinaryTempFile5
            System.IO.openBinaryTempFileWithDefaultPermissions3
            tmp_dir_sbAxK
            template_sbAxL
            GHC.Types.True
            System.IO.openBinaryTempFileWithDefaultPermissions2
            GHC.Prim.void#;

System.IO.openBinaryTempFileWithDefaultPermissions
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.IO (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.IO.openBinaryTempFileWithDefaultPermissions1
            eta_B3 eta_B2 GHC.Prim.void#;

System.IO.openTempFileWithDefaultPermissions3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openTempFileWithDefaultPermissions"#;

System.IO.openTempFileWithDefaultPermissions2 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString#
            System.IO.openTempFileWithDefaultPermissions3;

System.IO.openTempFileWithDefaultPermissions1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [tmp_dir_sbAxM template_sbAxN void_0E]
        System.IO.openBinaryTempFile5
            System.IO.openTempFileWithDefaultPermissions2
            tmp_dir_sbAxM
            template_sbAxN
            GHC.Types.False
            System.IO.openBinaryTempFileWithDefaultPermissions2
            GHC.Prim.void#;

System.IO.openTempFileWithDefaultPermissions
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.IO (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.IO.openTempFileWithDefaultPermissions1
            eta_B3 eta_B2 GHC.Prim.void#;

System.IO.openBinaryTempFile4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openBinaryTempFile"#;

System.IO.openBinaryTempFile3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.IO.openBinaryTempFile4;

System.IO.openBinaryTempFile2 :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [384##];

System.IO.openBinaryTempFile1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [tmp_dir_sbAxO template_sbAxP void_0E]
        System.IO.openBinaryTempFile5
            System.IO.openBinaryTempFile3
            tmp_dir_sbAxO
            template_sbAxP
            GHC.Types.True
            System.IO.openBinaryTempFile2
            GHC.Prim.void#;

System.IO.openBinaryTempFile
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.IO (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.IO.openBinaryTempFile1 eta_B3 eta_B2 GHC.Prim.void#;

System.IO.openTempFile3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "openTempFile"#;

System.IO.openTempFile2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.IO.openTempFile3;

System.IO.openTempFile1
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle) #)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [tmp_dir_sbAxQ template_sbAxR void_0E]
        System.IO.openBinaryTempFile5
            System.IO.openTempFile2
            tmp_dir_sbAxQ
            template_sbAxR
            GHC.Types.False
            System.IO.openBinaryTempFile2
            GHC.Prim.void#;

System.IO.openTempFile
  :: GHC.IO.FilePath
     -> GHC.Base.String
     -> GHC.Types.IO (GHC.IO.FilePath, GHC.IO.Handle.Types.Handle)
[GblId, Arity=3, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.IO.openTempFile1 eta_B3 eta_B2 GHC.Prim.void#;

System.IO.NewFileCreated
  :: Foreign.C.Types.CInt -> System.IO.OpenNewFileResult
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] System.IO.NewFileCreated [eta_B1];

System.IO.FileExists :: System.IO.OpenNewFileResult
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE System.IO.FileExists! [];

System.IO.OpenNewError
  :: Foreign.C.Error.Errno -> System.IO.OpenNewFileResult
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m3,
 Unf=OtherCon []] =
    [] \r [eta_B1] System.IO.OpenNewError [eta_B1];

