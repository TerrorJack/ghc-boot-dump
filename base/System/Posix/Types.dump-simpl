
==================== Tidy Core ====================
2018-03-16 16:04:18.702562424 UTC

Result size of Tidy Core
  = {terms: 2,940, types: 986, coercions: 11,190, joins: 0/0}

-- RHS size: {terms: 4, types: 1, coercions: 31, joins: 0/0}
System.Posix.Types.$fShowFd [InlPrag=NOUSERINLINE CONLIKE]
  :: Show Fd
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Fd
                       GHC.Int.$fShowInt32_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Int32 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> Fd -> [Char] -> [Char] :: *))
                       GHC.Int.$fShowInt32_$cshow
                       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                               ->_R <[Char]>_R
                               :: (Int32 -> [Char] :: *) ~R# (Fd -> [Char] :: *))
                       GHC.Int.$fShowInt32_$cshowList
                       `cast` (([Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Int32] -> [Char] -> [Char] :: *)
                                  ~R# ([Fd] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowFd
  = GHC.Show.C:Show
      @ Fd
      (GHC.Int.$fShowInt32_$cshowsPrec
       `cast` (<Int>_R
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Int32 -> [Char] -> [Char] :: *)
                  ~R# (Int -> Fd -> [Char] -> [Char] :: *)))
      (GHC.Int.$fShowInt32_$cshow
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <[Char]>_R
               :: (Int32 -> [Char] :: *) ~R# (Fd -> [Char] :: *)))
      (GHC.Int.$fShowInt32_$cshowList
       `cast` (([Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Int32] -> [Char] -> [Char] :: *)
                  ~R# ([Fd] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fReadFd [InlPrag=NOUSERINLINE CONLIKE]
  :: Read Fd
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: Fd
                       GHC.Int.$fReadInt32_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,)
                                         (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                         <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Int32, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(Fd, [Char])] :: *))
                       GHC.Int.$fReadInt32_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])])_R
                                         <[Char]>_R)_R])_R
                               :: ([Char] -> [([Int32], [Char])] :: *)
                                  ~R# ([Char] -> [([Fd], [Char])] :: *))
                       GHC.Int.$fReadInt6
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Int32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                     (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Int32 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Fd :: *))
                       GHC.Int.$fReadInt4
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Int32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                       ([System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Int32] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [Fd] :: *))]
System.Posix.Types.$fReadFd
  = GHC.Read.C:Read
      @ Fd
      (GHC.Int.$fReadInt32_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,)
                         (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                         <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Int32, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(Fd, [Char])] :: *)))
      (GHC.Int.$fReadInt32_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])])_R
                         <[Char]>_R)_R])_R
               :: ([Char] -> [([Int32], [Char])] :: *)
                  ~R# ([Char] -> [([Fd], [Char])] :: *)))
      (GHC.Int.$fReadInt6
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Int32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Int32 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec Fd :: *)))
      (GHC.Int.$fReadInt4
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Int32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                       ([System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Int32] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [Fd] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 10, joins: 0/0}
System.Posix.Types.$fBoundedFd [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded Fd
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: Fd
                          GHC.Int.$fBoundedInt32_$cminBound
                          `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                  :: (Int32 :: *) ~R# (Fd :: *))
                          GHC.Int.$fBoundedInt32_$cmaxBound
                          `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                  :: (Int32 :: *) ~R# (Fd :: *))]
System.Posix.Types.$fBoundedFd
  = GHC.Enum.C:Bounded
      @ Fd
      (GHC.Int.$fBoundedInt32_$cminBound
       `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 :: *) ~R# (Fd :: *)))
      (GHC.Int.$fBoundedInt32_$cmaxBound
       `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 :: *) ~R# (Fd :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 108, joins: 0/0}
System.Posix.Types.$fStorableFd [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable Fd
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: Fd
                                   Foreign.Storable.$fStorableInt32_$calignment
                                   `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                           ->_R <Int>_R
                                           :: (Int32 -> Int :: *) ~R# (Fd -> Int :: *))
                                   Foreign.Storable.$fStorableInt32_$calignment
                                   `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                           ->_R <Int>_R
                                           :: (Int32 -> Int :: *) ~R# (Fd -> Int :: *))
                                   GHC.Storable.readInt32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, Fd))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]))
                                           :: (Ptr Int32
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int32 #) :: *)
                                              ~R# (Ptr Fd -> Int -> IO Fd :: *))
                                   GHC.Storable.writeInt32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, Fd))_R
                                           ->_R <Int>_R
                                           ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Int32
                                               -> Int
                                               -> Int32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr Fd -> Int -> Fd -> IO () :: *))
                                   Foreign.Storable.$fStorableInt14
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int32 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO Fd :: *))
                                   Foreign.Storable.$fStorableInt13
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Int32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> Fd -> IO () :: *))
                                   Foreign.Storable.$fStorableInt12
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, Fd))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]))
                                           :: (Ptr Int32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int32 #) :: *)
                                              ~R# (Ptr Fd -> IO Fd :: *))
                                   Foreign.Storable.$fStorableInt11
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, Fd))_R
                                           ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Int32
                                               -> Int32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr Fd -> Fd -> IO () :: *))]
System.Posix.Types.$fStorableFd
  = Foreign.Storable.C:Storable
      @ Fd
      (Foreign.Storable.$fStorableInt32_$calignment
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (Fd -> Int :: *)))
      (Foreign.Storable.$fStorableInt32_$calignment
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (Fd -> Int :: *)))
      (GHC.Storable.readInt32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, Fd))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0]
                             (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]))
               :: (Ptr Int32
                   -> Int -> State# RealWorld -> (# State# RealWorld, Int32 #) :: *)
                  ~R# (Ptr Fd -> Int -> IO Fd :: *)))
      (GHC.Storable.writeInt32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, Fd))_R
               ->_R <Int>_R
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Int32
                   -> Int
                   -> Int32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr Fd -> Int -> Fd -> IO () :: *)))
      (Foreign.Storable.$fStorableInt14
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0]
                             (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Int32 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO Fd :: *)))
      (Foreign.Storable.$fStorableInt13
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Int32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> Fd -> IO () :: *)))
      (Foreign.Storable.$fStorableInt12
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, Fd))_R
               ->_R Sym (GHC.Types.N:IO[0]
                             (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]))
               :: (Ptr Int32
                   -> State# RealWorld -> (# State# RealWorld, Int32 #) :: *)
                  ~R# (Ptr Fd -> IO Fd :: *)))
      (Foreign.Storable.$fStorableInt11
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, Fd))_R
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Int32
                   -> Int32 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr Fd -> Fd -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 108, joins: 0/0}
System.Posix.Types.$fEnumFd [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum Fd
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: Fd
                       GHC.Int.$fEnumInt32_$csucc
                       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                               :: (Int32 -> Int32 :: *) ~R# (Fd -> Fd :: *))
                       GHC.Int.$fEnumInt32_$cpred
                       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                               :: (Int32 -> Int32 :: *) ~R# (Fd -> Fd :: *))
                       GHC.Int.$fEnumInt32_$ctoEnum
                       `cast` (<Int>_R
                               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                               :: (Int -> Int32 :: *) ~R# (Int -> Fd :: *))
                       GHC.Int.$fEnumInt32_$cfromEnum
                       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                               ->_R <Int>_R
                               :: (Int32 -> Int :: *) ~R# (Fd -> Int :: *))
                       GHC.Int.$fEnumInt32_$cenumFrom
                       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                               ->_R ([Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])])_R
                               :: (Int32 -> [Int32] :: *) ~R# (Fd -> [Fd] :: *))
                       GHC.Int.$fEnumInt32_$cenumFromThen
                       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                               ->_R ([Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])])_R
                               :: (Int32 -> Int32 -> [Int32] :: *) ~R# (Fd -> Fd -> [Fd] :: *))
                       GHC.Int.$fEnumInt32_$cenumFromTo
                       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                               ->_R ([Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])])_R
                               :: (Int32 -> Int32 -> [Int32] :: *) ~R# (Fd -> Fd -> [Fd] :: *))
                       GHC.Int.$fEnumInt32_$cenumFromThenTo
                       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                               ->_R ([Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])])_R
                               :: (Int32 -> Int32 -> Int32 -> [Int32] :: *)
                                  ~R# (Fd -> Fd -> Fd -> [Fd] :: *))]
System.Posix.Types.$fEnumFd
  = GHC.Enum.C:Enum
      @ Fd
      (GHC.Int.$fEnumInt32_$csucc
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int32 :: *) ~R# (Fd -> Fd :: *)))
      (GHC.Int.$fEnumInt32_$cpred
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int32 :: *) ~R# (Fd -> Fd :: *)))
      (GHC.Int.$fEnumInt32_$ctoEnum
       `cast` (<Int>_R
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int -> Int32 :: *) ~R# (Int -> Fd :: *)))
      (GHC.Int.$fEnumInt32_$cfromEnum
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (Fd -> Int :: *)))
      (GHC.Int.$fEnumInt32_$cenumFrom
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R ([Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])])_R
               :: (Int32 -> [Int32] :: *) ~R# (Fd -> [Fd] :: *)))
      (GHC.Int.$fEnumInt32_$cenumFromThen
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R ([Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])])_R
               :: (Int32 -> Int32 -> [Int32] :: *) ~R# (Fd -> Fd -> [Fd] :: *)))
      (GHC.Int.$fEnumInt32_$cenumFromTo
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R ([Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])])_R
               :: (Int32 -> Int32 -> [Int32] :: *) ~R# (Fd -> Fd -> [Fd] :: *)))
      (GHC.Int.$fEnumInt32_$cenumFromThenTo
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R ([Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])])_R
               :: (Int32 -> Int32 -> Int32 -> [Int32] :: *)
                  ~R# (Fd -> Fd -> Fd -> [Fd] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 91, joins: 0/0}
System.Posix.Types.$fNumFd [InlPrag=NOUSERINLINE CONLIKE] :: Num Fd
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: Fd
                     GHC.Int.$fNumInt32_$c+
                     `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                             ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                             ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                             :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *))
                     GHC.Int.$fNumInt32_$c-
                     `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                             ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                             ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                             :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *))
                     GHC.Int.$fNumInt32_$c*
                     `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                             ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                             ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                             :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *))
                     GHC.Int.$fNumInt32_$cnegate
                     `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                             ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                             :: (Int32 -> Int32 :: *) ~R# (Fd -> Fd :: *))
                     GHC.Int.$fNumInt32_$cabs
                     `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                             ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                             :: (Int32 -> Int32 :: *) ~R# (Fd -> Fd :: *))
                     GHC.Int.$fNumInt32_$csignum
                     `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                             ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                             :: (Int32 -> Int32 :: *) ~R# (Fd -> Fd :: *))
                     GHC.Int.$fNumInt32_$cfromInteger
                     `cast` (<Integer>_R
                             ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                             :: (Integer -> Int32 :: *) ~R# (Integer -> Fd :: *))]
System.Posix.Types.$fNumFd
  = GHC.Num.C:Num
      @ Fd
      (GHC.Int.$fNumInt32_$c+
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *)))
      (GHC.Int.$fNumInt32_$c-
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *)))
      (GHC.Int.$fNumInt32_$c*
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *)))
      (GHC.Int.$fNumInt32_$cnegate
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int32 :: *) ~R# (Fd -> Fd :: *)))
      (GHC.Int.$fNumInt32_$cabs
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int32 :: *) ~R# (Fd -> Fd :: *)))
      (GHC.Int.$fNumInt32_$csignum
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int32 :: *) ~R# (Fd -> Fd :: *)))
      (GHC.Int.$fNumInt32_$cfromInteger
       `cast` (<Integer>_R
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Integer -> Int32 :: *) ~R# (Integer -> Fd :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 26, joins: 0/0}
System.Posix.Types.$fEqFd [InlPrag=NOUSERINLINE CONLIKE] :: Eq Fd
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: Fd
                        GHC.Int.eqInt32
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R <Bool>_R
                                :: (Int32 -> Int32 -> Bool :: *) ~R# (Fd -> Fd -> Bool :: *))
                        GHC.Int.neInt32
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R <Bool>_R
                                :: (Int32 -> Int32 -> Bool :: *) ~R# (Fd -> Fd -> Bool :: *))]
System.Posix.Types.$fEqFd
  = GHC.Classes.C:Eq
      @ Fd
      (GHC.Int.eqInt32
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *) ~R# (Fd -> Fd -> Bool :: *)))
      (GHC.Int.neInt32
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *) ~R# (Fd -> Fd -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 99, joins: 0/0}
System.Posix.Types.$fOrdFd [InlPrag=NOUSERINLINE CONLIKE] :: Ord Fd
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: Fd
                         System.Posix.Types.$fEqFd
                         GHC.Int.$fOrdInt32_$ccompare
                         `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                 ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                 ->_R <Ordering>_R
                                 :: (Int32 -> Int32 -> Ordering :: *)
                                    ~R# (Fd -> Fd -> Ordering :: *))
                         GHC.Int.ltInt32
                         `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                 ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                 ->_R <Bool>_R
                                 :: (Int32 -> Int32 -> Bool :: *) ~R# (Fd -> Fd -> Bool :: *))
                         GHC.Int.leInt32
                         `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                 ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                 ->_R <Bool>_R
                                 :: (Int32 -> Int32 -> Bool :: *) ~R# (Fd -> Fd -> Bool :: *))
                         GHC.Int.gtInt32
                         `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                 ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                 ->_R <Bool>_R
                                 :: (Int32 -> Int32 -> Bool :: *) ~R# (Fd -> Fd -> Bool :: *))
                         GHC.Int.geInt32
                         `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                 ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                 ->_R <Bool>_R
                                 :: (Int32 -> Int32 -> Bool :: *) ~R# (Fd -> Fd -> Bool :: *))
                         GHC.Int.$fOrdInt32_$cmax
                         `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                 ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                 ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                 :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *))
                         GHC.Int.$fOrdInt32_$cmin
                         `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                 ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                 ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                 :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *))]
System.Posix.Types.$fOrdFd
  = GHC.Classes.C:Ord
      @ Fd
      System.Posix.Types.$fEqFd
      (GHC.Int.$fOrdInt32_$ccompare
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Ordering>_R
               :: (Int32 -> Int32 -> Ordering :: *)
                  ~R# (Fd -> Fd -> Ordering :: *)))
      (GHC.Int.ltInt32
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *) ~R# (Fd -> Fd -> Bool :: *)))
      (GHC.Int.leInt32
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *) ~R# (Fd -> Fd -> Bool :: *)))
      (GHC.Int.gtInt32
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *) ~R# (Fd -> Fd -> Bool :: *)))
      (GHC.Int.geInt32
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *) ~R# (Fd -> Fd -> Bool :: *)))
      (GHC.Int.$fOrdInt32_$cmax
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *)))
      (GHC.Int.$fOrdInt32_$cmin
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 8, joins: 0/0}
System.Posix.Types.$fRealFd [InlPrag=NOUSERINLINE CONLIKE]
  :: Real Fd
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: Fd
                       System.Posix.Types.$fNumFd
                       System.Posix.Types.$fOrdFd
                       GHC.Int.$fRealInt32_$ctoRational
                       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                               ->_R <Ratio Integer>_R
                               :: (Int32 -> Ratio Integer :: *) ~R# (Fd -> Ratio Integer :: *))]
System.Posix.Types.$fRealFd
  = GHC.Real.C:Real
      @ Fd
      System.Posix.Types.$fNumFd
      System.Posix.Types.$fOrdFd
      (GHC.Int.$fRealInt32_$ctoRational
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Ratio Integer>_R
               :: (Int32 -> Ratio Integer :: *) ~R# (Fd -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 121, joins: 0/0}
System.Posix.Types.$fIntegralFd [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral Fd
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: Fd
                           System.Posix.Types.$fRealFd
                           System.Posix.Types.$fEnumFd
                           GHC.Int.$fIntegralInt32_$cquot
                           `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                   ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                   ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                   :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *))
                           GHC.Int.$fIntegralInt32_$crem
                           `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                   ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                   ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                   :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *))
                           GHC.Int.$fIntegralInt32_$cdiv
                           `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                   ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                   ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                   :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *))
                           GHC.Int.$fIntegralInt32_$cmod
                           `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                   ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                   ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                   :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *))
                           GHC.Int.$fIntegralInt32_$cquotRem
                           `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                   ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                   ->_R ((,)
                                           (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                           (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])))_R
                                   :: (Int32 -> Int32 -> (Int32, Int32) :: *)
                                      ~R# (Fd -> Fd -> (Fd, Fd) :: *))
                           GHC.Int.$fIntegralInt32_$cdivMod
                           `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                   ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                   ->_R ((,)
                                           (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                           (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])))_R
                                   :: (Int32 -> Int32 -> (Int32, Int32) :: *)
                                      ~R# (Fd -> Fd -> (Fd, Fd) :: *))
                           GHC.Int.$fIntegralInt32_$ctoInteger
                           `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                   ->_R <Integer>_R
                                   :: (Int32 -> Integer :: *) ~R# (Fd -> Integer :: *))]
System.Posix.Types.$fIntegralFd
  = GHC.Real.C:Integral
      @ Fd
      System.Posix.Types.$fRealFd
      System.Posix.Types.$fEnumFd
      (GHC.Int.$fIntegralInt32_$cquot
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *)))
      (GHC.Int.$fIntegralInt32_$crem
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *)))
      (GHC.Int.$fIntegralInt32_$cdiv
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *)))
      (GHC.Int.$fIntegralInt32_$cmod
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *)))
      (GHC.Int.$fIntegralInt32_$cquotRem
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R ((,)
                       (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                       (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])))_R
               :: (Int32 -> Int32 -> (Int32, Int32) :: *)
                  ~R# (Fd -> Fd -> (Fd, Fd) :: *)))
      (GHC.Int.$fIntegralInt32_$cdivMod
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R ((,)
                       (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                       (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])))_R
               :: (Int32 -> Int32 -> (Int32, Int32) :: *)
                  ~R# (Fd -> Fd -> (Fd, Fd) :: *)))
      (GHC.Int.$fIntegralInt32_$ctoInteger
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Integer>_R
               :: (Int32 -> Integer :: *) ~R# (Fd -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 254, joins: 0/0}
System.Posix.Types.$fBitsFd [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits Fd
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: Fd
                        System.Posix.Types.$fEqFd
                        GHC.Int.$fBitsInt32_$c.&.
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *))
                        GHC.Int.$fBitsInt32_$c.|.
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *))
                        GHC.Int.$fBitsInt32_$cxor
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *))
                        GHC.Int.$fBitsInt32_$ccomplement
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                :: (Int32 -> Int32 :: *) ~R# (Fd -> Fd :: *))
                        GHC.Int.$fBitsInt32_$cshift
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *))
                        GHC.Int.$fBitsInt32_$crotate
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *))
                        GHC.Int.$fBitsInt6
                        `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                :: (Int32 :: *) ~R# (Fd :: *))
                        GHC.Int.$fBitsInt32_$cbit
                        `cast` (<Int>_R
                                ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                :: (Int -> Int32 :: *) ~R# (Int -> Fd :: *))
                        GHC.Int.$fBitsInt32_$csetBit
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *))
                        GHC.Int.$fBitsInt32_$cclearBit
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *))
                        GHC.Int.$fBitsInt32_$ccomplementBit
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *))
                        GHC.Int.$fBitsInt32_$ctestBit
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R <Int -> Bool>_R
                                :: (Int32 -> Int -> Bool :: *) ~R# (Fd -> Int -> Bool :: *))
                        GHC.Int.$fBitsInt32_$cbitSizeMaybe
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R <Maybe Int>_R
                                :: (Int32 -> Maybe Int :: *) ~R# (Fd -> Maybe Int :: *))
                        GHC.Int.$fBitsInt32_$cfiniteBitSize
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R <Int>_R
                                :: (Int32 -> Int :: *) ~R# (Fd -> Int :: *))
                        GHC.Int.$fBitsInt32_$cisSigned
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R <Bool>_R
                                :: (Int32 -> Bool :: *) ~R# (Fd -> Bool :: *))
                        GHC.Int.$fBitsInt32_$cshiftL
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *))
                        GHC.Int.$fBitsInt32_$cunsafeShiftL
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *))
                        GHC.Int.$fBitsInt32_$cshiftR
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *))
                        GHC.Int.$fBitsInt32_$cunsafeShiftR
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *))
                        GHC.Int.$fBitsInt32_$crotateL
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *))
                        GHC.Int.$fBitsInt32_$crotateR
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R <Int>_R
                                ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *))
                        GHC.Int.$fBitsInt32_$cpopCount
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                ->_R <Int>_R
                                :: (Int32 -> Int :: *) ~R# (Fd -> Int :: *))]
System.Posix.Types.$fBitsFd
  = Data.Bits.C:Bits
      @ Fd
      System.Posix.Types.$fEqFd
      (GHC.Int.$fBitsInt32_$c.&.
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *)))
      (GHC.Int.$fBitsInt32_$c.|.
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *)))
      (GHC.Int.$fBitsInt32_$cxor
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (Fd -> Fd -> Fd :: *)))
      (GHC.Int.$fBitsInt32_$ccomplement
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int32 :: *) ~R# (Fd -> Fd :: *)))
      (GHC.Int.$fBitsInt32_$cshift
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *)))
      (GHC.Int.$fBitsInt32_$crotate
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *)))
      (GHC.Int.$fBitsInt6
       `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 :: *) ~R# (Fd :: *)))
      (GHC.Int.$fBitsInt32_$cbit
       `cast` (<Int>_R
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int -> Int32 :: *) ~R# (Int -> Fd :: *)))
      (GHC.Int.$fBitsInt32_$csetBit
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *)))
      (GHC.Int.$fBitsInt32_$cclearBit
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *)))
      (GHC.Int.$fBitsInt32_$ccomplementBit
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *)))
      (GHC.Int.$fBitsInt32_$ctestBit
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int -> Bool>_R
               :: (Int32 -> Int -> Bool :: *) ~R# (Fd -> Int -> Bool :: *)))
      (GHC.Int.$fBitsInt32_$cbitSizeMaybe
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Maybe Int>_R
               :: (Int32 -> Maybe Int :: *) ~R# (Fd -> Maybe Int :: *)))
      (GHC.Int.$fBitsInt32_$cfiniteBitSize
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (Fd -> Int :: *)))
      (GHC.Int.$fBitsInt32_$cisSigned
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Bool>_R
               :: (Int32 -> Bool :: *) ~R# (Fd -> Bool :: *)))
      (GHC.Int.$fBitsInt32_$cshiftL
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *)))
      (GHC.Int.$fBitsInt32_$cunsafeShiftL
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *)))
      (GHC.Int.$fBitsInt32_$cshiftR
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *)))
      (GHC.Int.$fBitsInt32_$cunsafeShiftR
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *)))
      (GHC.Int.$fBitsInt32_$crotateL
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *)))
      (GHC.Int.$fBitsInt32_$crotateR
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               ->_R Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (Fd -> Int -> Fd :: *)))
      (GHC.Int.$fBitsInt32_$cpopCount
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (Fd -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 21, joins: 0/0}
System.Posix.Types.$fFiniteBitsFd [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits Fd
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: Fd
                              System.Posix.Types.$fBitsFd
                              GHC.Int.$fBitsInt32_$cfiniteBitSize
                              `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                      ->_R <Int>_R
                                      :: (Int32 -> Int :: *) ~R# (Fd -> Int :: *))
                              GHC.Int.$fFiniteBitsInt32_$ccountLeadingZeros
                              `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                      ->_R <Int>_R
                                      :: (Int32 -> Int :: *) ~R# (Fd -> Int :: *))
                              GHC.Int.$fFiniteBitsInt32_$ccountTrailingZeros
                              `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
                                      ->_R <Int>_R
                                      :: (Int32 -> Int :: *) ~R# (Fd -> Int :: *))]
System.Posix.Types.$fFiniteBitsFd
  = Data.Bits.C:FiniteBits
      @ Fd
      System.Posix.Types.$fBitsFd
      (GHC.Int.$fBitsInt32_$cfiniteBitSize
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (Fd -> Int :: *)))
      (GHC.Int.$fFiniteBitsInt32_$ccountLeadingZeros
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (Fd -> Int :: *)))
      (GHC.Int.$fFiniteBitsInt32_$ccountTrailingZeros
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0]))
               ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (Fd -> Int :: *)))

-- RHS size: {terms: 4, types: 4, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCTimer [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CTimer
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CTimer
                       (GHC.Ptr.$fShowFunPtr_$cshowsPrec @ ())
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CTimer[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Ptr () -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CTimer -> [Char] -> [Char] :: *))
                       (GHC.Ptr.$fShowPtr_$cshow @ ())
                       `cast` (Sym (System.Posix.Types.N:CTimer[0]) ->_R <[Char]>_R
                               :: (Ptr () -> [Char] :: *) ~R# (CTimer -> [Char] :: *))
                       (GHC.Ptr.$fShowPtr_$cshowList @ ())
                       `cast` (([Sym (System.Posix.Types.N:CTimer[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Ptr ()] -> [Char] -> [Char] :: *)
                                  ~R# ([CTimer] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCTimer
  = GHC.Show.C:Show
      @ CTimer
      ((GHC.Ptr.$fShowFunPtr_$cshowsPrec @ ())
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CTimer[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Ptr () -> [Char] -> [Char] :: *)
                  ~R# (Int -> CTimer -> [Char] -> [Char] :: *)))
      ((GHC.Ptr.$fShowPtr_$cshow @ ())
       `cast` (Sym (System.Posix.Types.N:CTimer[0]) ->_R <[Char]>_R
               :: (Ptr () -> [Char] :: *) ~R# (CTimer -> [Char] :: *)))
      ((GHC.Ptr.$fShowPtr_$cshowList @ ())
       `cast` (([Sym (System.Posix.Types.N:CTimer[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Ptr ()] -> [Char] -> [Char] :: *)
                  ~R# ([CTimer] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 9, types: 9, coercions: 91, joins: 0/0}
System.Posix.Types.$fStorableCTimer [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CTimer
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CTimer
                                   (Foreign.Storable.$fStorablePtr_$calignment @ ())
                                   `cast` (Sym (System.Posix.Types.N:CTimer[0]) ->_R <Int>_R
                                           :: (Ptr () -> Int :: *) ~R# (CTimer -> Int :: *))
                                   (Foreign.Storable.$fStorablePtr_$calignment @ ())
                                   `cast` (Sym (System.Posix.Types.N:CTimer[0]) ->_R <Int>_R
                                           :: (Ptr () -> Int :: *) ~R# (CTimer -> Int :: *))
                                   (GHC.Storable.readPtrOffPtr1 @ ())
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Ptr (), CTimer))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CTimer[0]))
                                           :: (Ptr (Ptr ())
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Ptr () #) :: *)
                                              ~R# (Ptr CTimer -> Int -> IO CTimer :: *))
                                   (GHC.Storable.writePtrOffPtr1 @ ())
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Ptr (), CTimer))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CTimer[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr (Ptr ())
                                               -> Int
                                               -> Ptr ()
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CTimer -> Int -> CTimer -> IO () :: *))
                                   (Foreign.Storable.$fStorablePtr4 @ ())
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CTimer[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Ptr () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CTimer :: *))
                                   (Foreign.Storable.$fStorablePtr3 @ ())
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CTimer[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Ptr ()
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> CTimer -> IO () :: *))
                                   (Foreign.Storable.$fStorablePtr2 @ ())
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Ptr (), CTimer))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CTimer[0]))
                                           :: (Ptr (Ptr ())
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Ptr () #) :: *)
                                              ~R# (Ptr CTimer -> IO CTimer :: *))
                                   (Foreign.Storable.$fStorablePtr1 @ ())
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Ptr (), CTimer))_R
                                           ->_R Sym (System.Posix.Types.N:CTimer[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr (Ptr ())
                                               -> Ptr ()
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CTimer -> CTimer -> IO () :: *))]
System.Posix.Types.$fStorableCTimer
  = Foreign.Storable.C:Storable
      @ CTimer
      ((Foreign.Storable.$fStorablePtr_$calignment @ ())
       `cast` (Sym (System.Posix.Types.N:CTimer[0]) ->_R <Int>_R
               :: (Ptr () -> Int :: *) ~R# (CTimer -> Int :: *)))
      ((Foreign.Storable.$fStorablePtr_$calignment @ ())
       `cast` (Sym (System.Posix.Types.N:CTimer[0]) ->_R <Int>_R
               :: (Ptr () -> Int :: *) ~R# (CTimer -> Int :: *)))
      ((GHC.Storable.readPtrOffPtr1 @ ())
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Ptr (), CTimer))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CTimer[0]))
               :: (Ptr (Ptr ())
                   -> Int -> State# RealWorld -> (# State# RealWorld, Ptr () #) :: *)
                  ~R# (Ptr CTimer -> Int -> IO CTimer :: *)))
      ((GHC.Storable.writePtrOffPtr1 @ ())
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Ptr (), CTimer))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CTimer[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr (Ptr ())
                   -> Int
                   -> Ptr ()
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CTimer -> Int -> CTimer -> IO () :: *)))
      ((Foreign.Storable.$fStorablePtr4 @ ())
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CTimer[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Ptr () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CTimer :: *)))
      ((Foreign.Storable.$fStorablePtr3 @ ())
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CTimer[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Ptr ()
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CTimer -> IO () :: *)))
      ((Foreign.Storable.$fStorablePtr2 @ ())
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Ptr (), CTimer))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CTimer[0]))
               :: (Ptr (Ptr ())
                   -> State# RealWorld -> (# State# RealWorld, Ptr () #) :: *)
                  ~R# (Ptr CTimer -> IO CTimer :: *)))
      ((Foreign.Storable.$fStorablePtr1 @ ())
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Ptr (), CTimer))_R
               ->_R Sym (System.Posix.Types.N:CTimer[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr (Ptr ())
                   -> Ptr () -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CTimer -> CTimer -> IO () :: *)))

-- RHS size: {terms: 3, types: 3, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCTimer [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CTimer
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CTimer
                        (GHC.Ptr.$fEqPtr_$c== @ ())
                        `cast` (Sym (System.Posix.Types.N:CTimer[0])
                                ->_R Sym (System.Posix.Types.N:CTimer[0])
                                ->_R <Bool>_R
                                :: (Ptr () -> Ptr () -> Bool :: *)
                                   ~R# (CTimer -> CTimer -> Bool :: *))
                        (GHC.Ptr.$fEqPtr_$c/= @ ())
                        `cast` (Sym (System.Posix.Types.N:CTimer[0])
                                ->_R Sym (System.Posix.Types.N:CTimer[0])
                                ->_R <Bool>_R
                                :: (Ptr () -> Ptr () -> Bool :: *)
                                   ~R# (CTimer -> CTimer -> Bool :: *))]
System.Posix.Types.$fEqCTimer
  = GHC.Classes.C:Eq
      @ CTimer
      ((GHC.Ptr.$fEqPtr_$c== @ ())
       `cast` (Sym (System.Posix.Types.N:CTimer[0])
               ->_R Sym (System.Posix.Types.N:CTimer[0])
               ->_R <Bool>_R
               :: (Ptr () -> Ptr () -> Bool :: *)
                  ~R# (CTimer -> CTimer -> Bool :: *)))
      ((GHC.Ptr.$fEqPtr_$c/= @ ())
       `cast` (Sym (System.Posix.Types.N:CTimer[0])
               ->_R Sym (System.Posix.Types.N:CTimer[0])
               ->_R <Bool>_R
               :: (Ptr () -> Ptr () -> Bool :: *)
                  ~R# (CTimer -> CTimer -> Bool :: *)))

-- RHS size: {terms: 9, types: 8, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCTimer [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CTimer
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CTimer
                         System.Posix.Types.$fEqCTimer
                         (GHC.Ptr.$fOrdPtr_$ccompare @ ())
                         `cast` (Sym (System.Posix.Types.N:CTimer[0])
                                 ->_R Sym (System.Posix.Types.N:CTimer[0])
                                 ->_R <Ordering>_R
                                 :: (Ptr () -> Ptr () -> Ordering :: *)
                                    ~R# (CTimer -> CTimer -> Ordering :: *))
                         (GHC.Ptr.$fOrdPtr_$c< @ ())
                         `cast` (Sym (System.Posix.Types.N:CTimer[0])
                                 ->_R Sym (System.Posix.Types.N:CTimer[0])
                                 ->_R <Bool>_R
                                 :: (Ptr () -> Ptr () -> Bool :: *)
                                    ~R# (CTimer -> CTimer -> Bool :: *))
                         (GHC.Ptr.$fOrdPtr_$c<= @ ())
                         `cast` (Sym (System.Posix.Types.N:CTimer[0])
                                 ->_R Sym (System.Posix.Types.N:CTimer[0])
                                 ->_R <Bool>_R
                                 :: (Ptr () -> Ptr () -> Bool :: *)
                                    ~R# (CTimer -> CTimer -> Bool :: *))
                         (GHC.Ptr.$fOrdPtr_$c> @ ())
                         `cast` (Sym (System.Posix.Types.N:CTimer[0])
                                 ->_R Sym (System.Posix.Types.N:CTimer[0])
                                 ->_R <Bool>_R
                                 :: (Ptr () -> Ptr () -> Bool :: *)
                                    ~R# (CTimer -> CTimer -> Bool :: *))
                         (GHC.Ptr.$fOrdPtr_$c>= @ ())
                         `cast` (Sym (System.Posix.Types.N:CTimer[0])
                                 ->_R Sym (System.Posix.Types.N:CTimer[0])
                                 ->_R <Bool>_R
                                 :: (Ptr () -> Ptr () -> Bool :: *)
                                    ~R# (CTimer -> CTimer -> Bool :: *))
                         (GHC.Ptr.$fOrdPtr_$cmax @ ())
                         `cast` (Sym (System.Posix.Types.N:CTimer[0])
                                 ->_R Sym (System.Posix.Types.N:CTimer[0])
                                 ->_R Sym (System.Posix.Types.N:CTimer[0])
                                 :: (Ptr () -> Ptr () -> Ptr () :: *)
                                    ~R# (CTimer -> CTimer -> CTimer :: *))
                         (GHC.Ptr.$fOrdPtr_$cmin @ ())
                         `cast` (Sym (System.Posix.Types.N:CTimer[0])
                                 ->_R Sym (System.Posix.Types.N:CTimer[0])
                                 ->_R Sym (System.Posix.Types.N:CTimer[0])
                                 :: (Ptr () -> Ptr () -> Ptr () :: *)
                                    ~R# (CTimer -> CTimer -> CTimer :: *))]
System.Posix.Types.$fOrdCTimer
  = GHC.Classes.C:Ord
      @ CTimer
      System.Posix.Types.$fEqCTimer
      ((GHC.Ptr.$fOrdPtr_$ccompare @ ())
       `cast` (Sym (System.Posix.Types.N:CTimer[0])
               ->_R Sym (System.Posix.Types.N:CTimer[0])
               ->_R <Ordering>_R
               :: (Ptr () -> Ptr () -> Ordering :: *)
                  ~R# (CTimer -> CTimer -> Ordering :: *)))
      ((GHC.Ptr.$fOrdPtr_$c< @ ())
       `cast` (Sym (System.Posix.Types.N:CTimer[0])
               ->_R Sym (System.Posix.Types.N:CTimer[0])
               ->_R <Bool>_R
               :: (Ptr () -> Ptr () -> Bool :: *)
                  ~R# (CTimer -> CTimer -> Bool :: *)))
      ((GHC.Ptr.$fOrdPtr_$c<= @ ())
       `cast` (Sym (System.Posix.Types.N:CTimer[0])
               ->_R Sym (System.Posix.Types.N:CTimer[0])
               ->_R <Bool>_R
               :: (Ptr () -> Ptr () -> Bool :: *)
                  ~R# (CTimer -> CTimer -> Bool :: *)))
      ((GHC.Ptr.$fOrdPtr_$c> @ ())
       `cast` (Sym (System.Posix.Types.N:CTimer[0])
               ->_R Sym (System.Posix.Types.N:CTimer[0])
               ->_R <Bool>_R
               :: (Ptr () -> Ptr () -> Bool :: *)
                  ~R# (CTimer -> CTimer -> Bool :: *)))
      ((GHC.Ptr.$fOrdPtr_$c>= @ ())
       `cast` (Sym (System.Posix.Types.N:CTimer[0])
               ->_R Sym (System.Posix.Types.N:CTimer[0])
               ->_R <Bool>_R
               :: (Ptr () -> Ptr () -> Bool :: *)
                  ~R# (CTimer -> CTimer -> Bool :: *)))
      ((GHC.Ptr.$fOrdPtr_$cmax @ ())
       `cast` (Sym (System.Posix.Types.N:CTimer[0])
               ->_R Sym (System.Posix.Types.N:CTimer[0])
               ->_R Sym (System.Posix.Types.N:CTimer[0])
               :: (Ptr () -> Ptr () -> Ptr () :: *)
                  ~R# (CTimer -> CTimer -> CTimer :: *)))
      ((GHC.Ptr.$fOrdPtr_$cmin @ ())
       `cast` (Sym (System.Posix.Types.N:CTimer[0])
               ->_R Sym (System.Posix.Types.N:CTimer[0])
               ->_R Sym (System.Posix.Types.N:CTimer[0])
               :: (Ptr () -> Ptr () -> Ptr () :: *)
                  ~R# (CTimer -> CTimer -> CTimer :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCKey [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CKey
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CKey
                       GHC.Int.$fShowInt32_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CKey[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Int32 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CKey -> [Char] -> [Char] :: *))
                       GHC.Int.$fShowInt32_$cshow
                       `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <[Char]>_R
                               :: (Int32 -> [Char] :: *) ~R# (CKey -> [Char] :: *))
                       GHC.Int.$fShowInt32_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CKey[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Int32] -> [Char] -> [Char] :: *)
                                  ~R# ([CKey] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCKey
  = GHC.Show.C:Show
      @ CKey
      (GHC.Int.$fShowInt32_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Int32 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CKey -> [Char] -> [Char] :: *)))
      (GHC.Int.$fShowInt32_$cshow
       `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <[Char]>_R
               :: (Int32 -> [Char] :: *) ~R# (CKey -> [Char] :: *)))
      (GHC.Int.$fShowInt32_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CKey[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Int32] -> [Char] -> [Char] :: *)
                  ~R# ([CKey] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCKey [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CKey
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CKey
                       GHC.Int.$fReadInt32_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,) (Sym (System.Posix.Types.N:CKey[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Int32, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CKey, [Char])] :: *))
                       GHC.Int.$fReadInt32_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CKey[0])])_R <[Char]>_R)_R])_R
                               :: ([Char] -> [([Int32], [Char])] :: *)
                                  ~R# ([Char] -> [([CKey], [Char])] :: *))
                       GHC.Int.$fReadInt6
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Int32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                     (System.Posix.Types.N:CKey[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Int32 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CKey :: *))
                       GHC.Int.$fReadInt4
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Int32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                       ([System.Posix.Types.N:CKey[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Int32] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CKey] :: *))]
System.Posix.Types.$fReadCKey
  = GHC.Read.C:Read
      @ CKey
      (GHC.Int.$fReadInt32_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,) (Sym (System.Posix.Types.N:CKey[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Int32, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CKey, [Char])] :: *)))
      (GHC.Int.$fReadInt32_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CKey[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Int32], [Char])] :: *)
                  ~R# ([Char] -> [([CKey], [Char])] :: *)))
      (GHC.Int.$fReadInt6
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Int32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     (System.Posix.Types.N:CKey[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Int32 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CKey :: *)))
      (GHC.Int.$fReadInt4
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Int32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                       ([System.Posix.Types.N:CKey[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Int32] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CKey] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
System.Posix.Types.$fBoundedCKey [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded CKey
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: CKey
                          GHC.Int.$fBoundedInt32_$cminBound
                          `cast` (Sym (System.Posix.Types.N:CKey[0])
                                  :: (Int32 :: *) ~R# (CKey :: *))
                          GHC.Int.$fBoundedInt32_$cmaxBound
                          `cast` (Sym (System.Posix.Types.N:CKey[0])
                                  :: (Int32 :: *) ~R# (CKey :: *))]
System.Posix.Types.$fBoundedCKey
  = GHC.Enum.C:Bounded
      @ CKey
      (GHC.Int.$fBoundedInt32_$cminBound
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 :: *) ~R# (CKey :: *)))
      (GHC.Int.$fBoundedInt32_$cmaxBound
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 :: *) ~R# (CKey :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCKey [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CKey
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CKey
                                   Foreign.Storable.$fStorableInt32_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Int>_R
                                           :: (Int32 -> Int :: *) ~R# (CKey -> Int :: *))
                                   Foreign.Storable.$fStorableInt32_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Int>_R
                                           :: (Int32 -> Int :: *) ~R# (CKey -> Int :: *))
                                   GHC.Storable.readInt32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CKey))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CKey[0]))
                                           :: (Ptr Int32
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int32 #) :: *)
                                              ~R# (Ptr CKey -> Int -> IO CKey :: *))
                                   GHC.Storable.writeInt32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CKey))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CKey[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Int32
                                               -> Int
                                               -> Int32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CKey -> Int -> CKey -> IO () :: *))
                                   Foreign.Storable.$fStorableInt14
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CKey[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int32 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CKey :: *))
                                   Foreign.Storable.$fStorableInt13
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CKey[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Int32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> CKey -> IO () :: *))
                                   Foreign.Storable.$fStorableInt12
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CKey))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CKey[0]))
                                           :: (Ptr Int32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int32 #) :: *)
                                              ~R# (Ptr CKey -> IO CKey :: *))
                                   Foreign.Storable.$fStorableInt11
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CKey))_R
                                           ->_R Sym (System.Posix.Types.N:CKey[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Int32
                                               -> Int32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CKey -> CKey -> IO () :: *))]
System.Posix.Types.$fStorableCKey
  = Foreign.Storable.C:Storable
      @ CKey
      (Foreign.Storable.$fStorableInt32_$calignment
       `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CKey -> Int :: *)))
      (Foreign.Storable.$fStorableInt32_$calignment
       `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CKey -> Int :: *)))
      (GHC.Storable.readInt32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CKey))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CKey[0]))
               :: (Ptr Int32
                   -> Int -> State# RealWorld -> (# State# RealWorld, Int32 #) :: *)
                  ~R# (Ptr CKey -> Int -> IO CKey :: *)))
      (GHC.Storable.writeInt32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CKey))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Int32
                   -> Int
                   -> Int32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CKey -> Int -> CKey -> IO () :: *)))
      (Foreign.Storable.$fStorableInt14
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CKey[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Int32 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CKey :: *)))
      (Foreign.Storable.$fStorableInt13
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Int32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CKey -> IO () :: *)))
      (Foreign.Storable.$fStorableInt12
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CKey))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CKey[0]))
               :: (Ptr Int32
                   -> State# RealWorld -> (# State# RealWorld, Int32 #) :: *)
                  ~R# (Ptr CKey -> IO CKey :: *)))
      (Foreign.Storable.$fStorableInt11
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CKey))_R
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Int32
                   -> Int32 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CKey -> CKey -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCKey [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CKey
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CKey
                       GHC.Int.$fEnumInt32_$csucc
                       `cast` (Sym (System.Posix.Types.N:CKey[0])
                               ->_R Sym (System.Posix.Types.N:CKey[0])
                               :: (Int32 -> Int32 :: *) ~R# (CKey -> CKey :: *))
                       GHC.Int.$fEnumInt32_$cpred
                       `cast` (Sym (System.Posix.Types.N:CKey[0])
                               ->_R Sym (System.Posix.Types.N:CKey[0])
                               :: (Int32 -> Int32 :: *) ~R# (CKey -> CKey :: *))
                       GHC.Int.$fEnumInt32_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CKey[0])
                               :: (Int -> Int32 :: *) ~R# (Int -> CKey :: *))
                       GHC.Int.$fEnumInt32_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Int>_R
                               :: (Int32 -> Int :: *) ~R# (CKey -> Int :: *))
                       GHC.Int.$fEnumInt32_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CKey[0])
                               ->_R ([Sym (System.Posix.Types.N:CKey[0])])_R
                               :: (Int32 -> [Int32] :: *) ~R# (CKey -> [CKey] :: *))
                       GHC.Int.$fEnumInt32_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CKey[0])
                               ->_R Sym (System.Posix.Types.N:CKey[0])
                               ->_R ([Sym (System.Posix.Types.N:CKey[0])])_R
                               :: (Int32 -> Int32 -> [Int32] :: *)
                                  ~R# (CKey -> CKey -> [CKey] :: *))
                       GHC.Int.$fEnumInt32_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CKey[0])
                               ->_R Sym (System.Posix.Types.N:CKey[0])
                               ->_R ([Sym (System.Posix.Types.N:CKey[0])])_R
                               :: (Int32 -> Int32 -> [Int32] :: *)
                                  ~R# (CKey -> CKey -> [CKey] :: *))
                       GHC.Int.$fEnumInt32_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CKey[0])
                               ->_R Sym (System.Posix.Types.N:CKey[0])
                               ->_R Sym (System.Posix.Types.N:CKey[0])
                               ->_R ([Sym (System.Posix.Types.N:CKey[0])])_R
                               :: (Int32 -> Int32 -> Int32 -> [Int32] :: *)
                                  ~R# (CKey -> CKey -> CKey -> [CKey] :: *))]
System.Posix.Types.$fEnumCKey
  = GHC.Enum.C:Enum
      @ CKey
      (GHC.Int.$fEnumInt32_$csucc
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int32 :: *) ~R# (CKey -> CKey :: *)))
      (GHC.Int.$fEnumInt32_$cpred
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int32 :: *) ~R# (CKey -> CKey :: *)))
      (GHC.Int.$fEnumInt32_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int -> Int32 :: *) ~R# (Int -> CKey :: *)))
      (GHC.Int.$fEnumInt32_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CKey -> Int :: *)))
      (GHC.Int.$fEnumInt32_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R ([Sym (System.Posix.Types.N:CKey[0])])_R
               :: (Int32 -> [Int32] :: *) ~R# (CKey -> [CKey] :: *)))
      (GHC.Int.$fEnumInt32_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R ([Sym (System.Posix.Types.N:CKey[0])])_R
               :: (Int32 -> Int32 -> [Int32] :: *)
                  ~R# (CKey -> CKey -> [CKey] :: *)))
      (GHC.Int.$fEnumInt32_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R ([Sym (System.Posix.Types.N:CKey[0])])_R
               :: (Int32 -> Int32 -> [Int32] :: *)
                  ~R# (CKey -> CKey -> [CKey] :: *)))
      (GHC.Int.$fEnumInt32_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R ([Sym (System.Posix.Types.N:CKey[0])])_R
               :: (Int32 -> Int32 -> Int32 -> [Int32] :: *)
                  ~R# (CKey -> CKey -> CKey -> [CKey] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCKey [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CKey
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CKey
                     GHC.Int.$fNumInt32_$c+
                     `cast` (Sym (System.Posix.Types.N:CKey[0])
                             ->_R Sym (System.Posix.Types.N:CKey[0])
                             ->_R Sym (System.Posix.Types.N:CKey[0])
                             :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *))
                     GHC.Int.$fNumInt32_$c-
                     `cast` (Sym (System.Posix.Types.N:CKey[0])
                             ->_R Sym (System.Posix.Types.N:CKey[0])
                             ->_R Sym (System.Posix.Types.N:CKey[0])
                             :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *))
                     GHC.Int.$fNumInt32_$c*
                     `cast` (Sym (System.Posix.Types.N:CKey[0])
                             ->_R Sym (System.Posix.Types.N:CKey[0])
                             ->_R Sym (System.Posix.Types.N:CKey[0])
                             :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *))
                     GHC.Int.$fNumInt32_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CKey[0])
                             ->_R Sym (System.Posix.Types.N:CKey[0])
                             :: (Int32 -> Int32 :: *) ~R# (CKey -> CKey :: *))
                     GHC.Int.$fNumInt32_$cabs
                     `cast` (Sym (System.Posix.Types.N:CKey[0])
                             ->_R Sym (System.Posix.Types.N:CKey[0])
                             :: (Int32 -> Int32 :: *) ~R# (CKey -> CKey :: *))
                     GHC.Int.$fNumInt32_$csignum
                     `cast` (Sym (System.Posix.Types.N:CKey[0])
                             ->_R Sym (System.Posix.Types.N:CKey[0])
                             :: (Int32 -> Int32 :: *) ~R# (CKey -> CKey :: *))
                     GHC.Int.$fNumInt32_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CKey[0])
                             :: (Integer -> Int32 :: *) ~R# (Integer -> CKey :: *))]
System.Posix.Types.$fNumCKey
  = GHC.Num.C:Num
      @ CKey
      (GHC.Int.$fNumInt32_$c+
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *)))
      (GHC.Int.$fNumInt32_$c-
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *)))
      (GHC.Int.$fNumInt32_$c*
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *)))
      (GHC.Int.$fNumInt32_$cnegate
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int32 :: *) ~R# (CKey -> CKey :: *)))
      (GHC.Int.$fNumInt32_$cabs
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int32 :: *) ~R# (CKey -> CKey :: *)))
      (GHC.Int.$fNumInt32_$csignum
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int32 :: *) ~R# (CKey -> CKey :: *)))
      (GHC.Int.$fNumInt32_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Integer -> Int32 :: *) ~R# (Integer -> CKey :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCKey [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CKey
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CKey
                        GHC.Int.eqInt32
                        `cast` (Sym (System.Posix.Types.N:CKey[0])
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                ->_R <Bool>_R
                                :: (Int32 -> Int32 -> Bool :: *) ~R# (CKey -> CKey -> Bool :: *))
                        GHC.Int.neInt32
                        `cast` (Sym (System.Posix.Types.N:CKey[0])
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                ->_R <Bool>_R
                                :: (Int32 -> Int32 -> Bool :: *) ~R# (CKey -> CKey -> Bool :: *))]
System.Posix.Types.$fEqCKey
  = GHC.Classes.C:Eq
      @ CKey
      (GHC.Int.eqInt32
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *) ~R# (CKey -> CKey -> Bool :: *)))
      (GHC.Int.neInt32
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *) ~R# (CKey -> CKey -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCKey [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CKey
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CKey
                         System.Posix.Types.$fEqCKey
                         GHC.Int.$fOrdInt32_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CKey[0])
                                 ->_R Sym (System.Posix.Types.N:CKey[0])
                                 ->_R <Ordering>_R
                                 :: (Int32 -> Int32 -> Ordering :: *)
                                    ~R# (CKey -> CKey -> Ordering :: *))
                         GHC.Int.ltInt32
                         `cast` (Sym (System.Posix.Types.N:CKey[0])
                                 ->_R Sym (System.Posix.Types.N:CKey[0])
                                 ->_R <Bool>_R
                                 :: (Int32 -> Int32 -> Bool :: *) ~R# (CKey -> CKey -> Bool :: *))
                         GHC.Int.leInt32
                         `cast` (Sym (System.Posix.Types.N:CKey[0])
                                 ->_R Sym (System.Posix.Types.N:CKey[0])
                                 ->_R <Bool>_R
                                 :: (Int32 -> Int32 -> Bool :: *) ~R# (CKey -> CKey -> Bool :: *))
                         GHC.Int.gtInt32
                         `cast` (Sym (System.Posix.Types.N:CKey[0])
                                 ->_R Sym (System.Posix.Types.N:CKey[0])
                                 ->_R <Bool>_R
                                 :: (Int32 -> Int32 -> Bool :: *) ~R# (CKey -> CKey -> Bool :: *))
                         GHC.Int.geInt32
                         `cast` (Sym (System.Posix.Types.N:CKey[0])
                                 ->_R Sym (System.Posix.Types.N:CKey[0])
                                 ->_R <Bool>_R
                                 :: (Int32 -> Int32 -> Bool :: *) ~R# (CKey -> CKey -> Bool :: *))
                         GHC.Int.$fOrdInt32_$cmax
                         `cast` (Sym (System.Posix.Types.N:CKey[0])
                                 ->_R Sym (System.Posix.Types.N:CKey[0])
                                 ->_R Sym (System.Posix.Types.N:CKey[0])
                                 :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *))
                         GHC.Int.$fOrdInt32_$cmin
                         `cast` (Sym (System.Posix.Types.N:CKey[0])
                                 ->_R Sym (System.Posix.Types.N:CKey[0])
                                 ->_R Sym (System.Posix.Types.N:CKey[0])
                                 :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *))]
System.Posix.Types.$fOrdCKey
  = GHC.Classes.C:Ord
      @ CKey
      System.Posix.Types.$fEqCKey
      (GHC.Int.$fOrdInt32_$ccompare
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R <Ordering>_R
               :: (Int32 -> Int32 -> Ordering :: *)
                  ~R# (CKey -> CKey -> Ordering :: *)))
      (GHC.Int.ltInt32
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *) ~R# (CKey -> CKey -> Bool :: *)))
      (GHC.Int.leInt32
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *) ~R# (CKey -> CKey -> Bool :: *)))
      (GHC.Int.gtInt32
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *) ~R# (CKey -> CKey -> Bool :: *)))
      (GHC.Int.geInt32
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *) ~R# (CKey -> CKey -> Bool :: *)))
      (GHC.Int.$fOrdInt32_$cmax
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *)))
      (GHC.Int.$fOrdInt32_$cmin
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCKey [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CKey
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CKey
                       System.Posix.Types.$fNumCKey
                       System.Posix.Types.$fOrdCKey
                       GHC.Int.$fRealInt32_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Ratio Integer>_R
                               :: (Int32 -> Ratio Integer :: *) ~R# (CKey -> Ratio Integer :: *))]
System.Posix.Types.$fRealCKey
  = GHC.Real.C:Real
      @ CKey
      System.Posix.Types.$fNumCKey
      System.Posix.Types.$fOrdCKey
      (GHC.Int.$fRealInt32_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Ratio Integer>_R
               :: (Int32 -> Ratio Integer :: *) ~R# (CKey -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 58, joins: 0/0}
System.Posix.Types.$fIntegralCKey [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral CKey
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: CKey
                           System.Posix.Types.$fRealCKey
                           System.Posix.Types.$fEnumCKey
                           GHC.Int.$fIntegralInt32_$cquot
                           `cast` (Sym (System.Posix.Types.N:CKey[0])
                                   ->_R Sym (System.Posix.Types.N:CKey[0])
                                   ->_R Sym (System.Posix.Types.N:CKey[0])
                                   :: (Int32 -> Int32 -> Int32 :: *)
                                      ~R# (CKey -> CKey -> CKey :: *))
                           GHC.Int.$fIntegralInt32_$crem
                           `cast` (Sym (System.Posix.Types.N:CKey[0])
                                   ->_R Sym (System.Posix.Types.N:CKey[0])
                                   ->_R Sym (System.Posix.Types.N:CKey[0])
                                   :: (Int32 -> Int32 -> Int32 :: *)
                                      ~R# (CKey -> CKey -> CKey :: *))
                           GHC.Int.$fIntegralInt32_$cdiv
                           `cast` (Sym (System.Posix.Types.N:CKey[0])
                                   ->_R Sym (System.Posix.Types.N:CKey[0])
                                   ->_R Sym (System.Posix.Types.N:CKey[0])
                                   :: (Int32 -> Int32 -> Int32 :: *)
                                      ~R# (CKey -> CKey -> CKey :: *))
                           GHC.Int.$fIntegralInt32_$cmod
                           `cast` (Sym (System.Posix.Types.N:CKey[0])
                                   ->_R Sym (System.Posix.Types.N:CKey[0])
                                   ->_R Sym (System.Posix.Types.N:CKey[0])
                                   :: (Int32 -> Int32 -> Int32 :: *)
                                      ~R# (CKey -> CKey -> CKey :: *))
                           GHC.Int.$fIntegralInt32_$cquotRem
                           `cast` (Sym (System.Posix.Types.N:CKey[0])
                                   ->_R Sym (System.Posix.Types.N:CKey[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CKey[0]))
                                           (Sym (System.Posix.Types.N:CKey[0])))_R
                                   :: (Int32 -> Int32 -> (Int32, Int32) :: *)
                                      ~R# (CKey -> CKey -> (CKey, CKey) :: *))
                           GHC.Int.$fIntegralInt32_$cdivMod
                           `cast` (Sym (System.Posix.Types.N:CKey[0])
                                   ->_R Sym (System.Posix.Types.N:CKey[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CKey[0]))
                                           (Sym (System.Posix.Types.N:CKey[0])))_R
                                   :: (Int32 -> Int32 -> (Int32, Int32) :: *)
                                      ~R# (CKey -> CKey -> (CKey, CKey) :: *))
                           GHC.Int.$fIntegralInt32_$ctoInteger
                           `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Integer>_R
                                   :: (Int32 -> Integer :: *) ~R# (CKey -> Integer :: *))]
System.Posix.Types.$fIntegralCKey
  = GHC.Real.C:Integral
      @ CKey
      System.Posix.Types.$fRealCKey
      System.Posix.Types.$fEnumCKey
      (GHC.Int.$fIntegralInt32_$cquot
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *)))
      (GHC.Int.$fIntegralInt32_$crem
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *)))
      (GHC.Int.$fIntegralInt32_$cdiv
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *)))
      (GHC.Int.$fIntegralInt32_$cmod
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *)))
      (GHC.Int.$fIntegralInt32_$cquotRem
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CKey[0]))
                       (Sym (System.Posix.Types.N:CKey[0])))_R
               :: (Int32 -> Int32 -> (Int32, Int32) :: *)
                  ~R# (CKey -> CKey -> (CKey, CKey) :: *)))
      (GHC.Int.$fIntegralInt32_$cdivMod
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CKey[0]))
                       (Sym (System.Posix.Types.N:CKey[0])))_R
               :: (Int32 -> Int32 -> (Int32, Int32) :: *)
                  ~R# (CKey -> CKey -> (CKey, CKey) :: *)))
      (GHC.Int.$fIntegralInt32_$ctoInteger
       `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Integer>_R
               :: (Int32 -> Integer :: *) ~R# (CKey -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
System.Posix.Types.$fBitsCKey [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits CKey
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: CKey
                        System.Posix.Types.$fEqCKey
                        GHC.Int.$fBitsInt32_$c.&.
                        `cast` (Sym (System.Posix.Types.N:CKey[0])
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *))
                        GHC.Int.$fBitsInt32_$c.|.
                        `cast` (Sym (System.Posix.Types.N:CKey[0])
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *))
                        GHC.Int.$fBitsInt32_$cxor
                        `cast` (Sym (System.Posix.Types.N:CKey[0])
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *))
                        GHC.Int.$fBitsInt32_$ccomplement
                        `cast` (Sym (System.Posix.Types.N:CKey[0])
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                :: (Int32 -> Int32 :: *) ~R# (CKey -> CKey :: *))
                        GHC.Int.$fBitsInt32_$cshift
                        `cast` (Sym (System.Posix.Types.N:CKey[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *))
                        GHC.Int.$fBitsInt32_$crotate
                        `cast` (Sym (System.Posix.Types.N:CKey[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *))
                        GHC.Int.$fBitsInt6
                        `cast` (Sym (System.Posix.Types.N:CKey[0])
                                :: (Int32 :: *) ~R# (CKey :: *))
                        GHC.Int.$fBitsInt32_$cbit
                        `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CKey[0])
                                :: (Int -> Int32 :: *) ~R# (Int -> CKey :: *))
                        GHC.Int.$fBitsInt32_$csetBit
                        `cast` (Sym (System.Posix.Types.N:CKey[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *))
                        GHC.Int.$fBitsInt32_$cclearBit
                        `cast` (Sym (System.Posix.Types.N:CKey[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *))
                        GHC.Int.$fBitsInt32_$ccomplementBit
                        `cast` (Sym (System.Posix.Types.N:CKey[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *))
                        GHC.Int.$fBitsInt32_$ctestBit
                        `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Int -> Bool>_R
                                :: (Int32 -> Int -> Bool :: *) ~R# (CKey -> Int -> Bool :: *))
                        GHC.Int.$fBitsInt32_$cbitSizeMaybe
                        `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Maybe Int>_R
                                :: (Int32 -> Maybe Int :: *) ~R# (CKey -> Maybe Int :: *))
                        GHC.Int.$fBitsInt32_$cfiniteBitSize
                        `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Int>_R
                                :: (Int32 -> Int :: *) ~R# (CKey -> Int :: *))
                        GHC.Int.$fBitsInt32_$cisSigned
                        `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Bool>_R
                                :: (Int32 -> Bool :: *) ~R# (CKey -> Bool :: *))
                        GHC.Int.$fBitsInt32_$cshiftL
                        `cast` (Sym (System.Posix.Types.N:CKey[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *))
                        GHC.Int.$fBitsInt32_$cunsafeShiftL
                        `cast` (Sym (System.Posix.Types.N:CKey[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *))
                        GHC.Int.$fBitsInt32_$cshiftR
                        `cast` (Sym (System.Posix.Types.N:CKey[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *))
                        GHC.Int.$fBitsInt32_$cunsafeShiftR
                        `cast` (Sym (System.Posix.Types.N:CKey[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *))
                        GHC.Int.$fBitsInt32_$crotateL
                        `cast` (Sym (System.Posix.Types.N:CKey[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *))
                        GHC.Int.$fBitsInt32_$crotateR
                        `cast` (Sym (System.Posix.Types.N:CKey[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CKey[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *))
                        GHC.Int.$fBitsInt32_$cpopCount
                        `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Int>_R
                                :: (Int32 -> Int :: *) ~R# (CKey -> Int :: *))]
System.Posix.Types.$fBitsCKey
  = Data.Bits.C:Bits
      @ CKey
      System.Posix.Types.$fEqCKey
      (GHC.Int.$fBitsInt32_$c.&.
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *)))
      (GHC.Int.$fBitsInt32_$c.|.
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *)))
      (GHC.Int.$fBitsInt32_$cxor
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CKey -> CKey -> CKey :: *)))
      (GHC.Int.$fBitsInt32_$ccomplement
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int32 :: *) ~R# (CKey -> CKey :: *)))
      (GHC.Int.$fBitsInt32_$cshift
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *)))
      (GHC.Int.$fBitsInt32_$crotate
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *)))
      (GHC.Int.$fBitsInt6
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 :: *) ~R# (CKey :: *)))
      (GHC.Int.$fBitsInt32_$cbit
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int -> Int32 :: *) ~R# (Int -> CKey :: *)))
      (GHC.Int.$fBitsInt32_$csetBit
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *)))
      (GHC.Int.$fBitsInt32_$cclearBit
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *)))
      (GHC.Int.$fBitsInt32_$ccomplementBit
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *)))
      (GHC.Int.$fBitsInt32_$ctestBit
       `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Int -> Bool>_R
               :: (Int32 -> Int -> Bool :: *) ~R# (CKey -> Int -> Bool :: *)))
      (GHC.Int.$fBitsInt32_$cbitSizeMaybe
       `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Maybe Int>_R
               :: (Int32 -> Maybe Int :: *) ~R# (CKey -> Maybe Int :: *)))
      (GHC.Int.$fBitsInt32_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CKey -> Int :: *)))
      (GHC.Int.$fBitsInt32_$cisSigned
       `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Bool>_R
               :: (Int32 -> Bool :: *) ~R# (CKey -> Bool :: *)))
      (GHC.Int.$fBitsInt32_$cshiftL
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *)))
      (GHC.Int.$fBitsInt32_$cunsafeShiftL
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *)))
      (GHC.Int.$fBitsInt32_$cshiftR
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *)))
      (GHC.Int.$fBitsInt32_$cunsafeShiftR
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *)))
      (GHC.Int.$fBitsInt32_$crotateL
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *)))
      (GHC.Int.$fBitsInt32_$crotateR
       `cast` (Sym (System.Posix.Types.N:CKey[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CKey[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CKey -> Int -> CKey :: *)))
      (GHC.Int.$fBitsInt32_$cpopCount
       `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CKey -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
System.Posix.Types.$fFiniteBitsCKey [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits CKey
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: CKey
                              System.Posix.Types.$fBitsCKey
                              GHC.Int.$fBitsInt32_$cfiniteBitSize
                              `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Int>_R
                                      :: (Int32 -> Int :: *) ~R# (CKey -> Int :: *))
                              GHC.Int.$fFiniteBitsInt32_$ccountLeadingZeros
                              `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Int>_R
                                      :: (Int32 -> Int :: *) ~R# (CKey -> Int :: *))
                              GHC.Int.$fFiniteBitsInt32_$ccountTrailingZeros
                              `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Int>_R
                                      :: (Int32 -> Int :: *) ~R# (CKey -> Int :: *))]
System.Posix.Types.$fFiniteBitsCKey
  = Data.Bits.C:FiniteBits
      @ CKey
      System.Posix.Types.$fBitsCKey
      (GHC.Int.$fBitsInt32_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CKey -> Int :: *)))
      (GHC.Int.$fFiniteBitsInt32_$ccountLeadingZeros
       `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CKey -> Int :: *)))
      (GHC.Int.$fFiniteBitsInt32_$ccountTrailingZeros
       `cast` (Sym (System.Posix.Types.N:CKey[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CKey -> Int :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCId [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CId
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CId
                       GHC.Word.$fShowWord32_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CId[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Word32 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CId -> [Char] -> [Char] :: *))
                       GHC.Word.$fShowWord32_$cshow
                       `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <[Char]>_R
                               :: (Word32 -> [Char] :: *) ~R# (CId -> [Char] :: *))
                       GHC.Word.$fShowWord32_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CId[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Word32] -> [Char] -> [Char] :: *)
                                  ~R# ([CId] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCId
  = GHC.Show.C:Show
      @ CId
      (GHC.Word.$fShowWord32_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Word32 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CId -> [Char] -> [Char] :: *)))
      (GHC.Word.$fShowWord32_$cshow
       `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <[Char]>_R
               :: (Word32 -> [Char] :: *) ~R# (CId -> [Char] :: *)))
      (GHC.Word.$fShowWord32_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CId[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Word32] -> [Char] -> [Char] :: *)
                  ~R# ([CId] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCId [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CId
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CId
                       GHC.Read.$fReadWord32_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,) (Sym (System.Posix.Types.N:CId[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Word32, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CId, [Char])] :: *))
                       GHC.Read.$fReadWord32_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CId[0])])_R <[Char]>_R)_R])_R
                               :: ([Char] -> [([Word32], [Char])] :: *)
                                  ~R# ([Char] -> [([CId], [Char])] :: *))
                       GHC.Read.$fReadWord10
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Word32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      (System.Posix.Types.N:CId[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Word32 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CId :: *))
                       GHC.Read.$fReadWord7
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Word32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        ([System.Posix.Types.N:CId[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Word32] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CId] :: *))]
System.Posix.Types.$fReadCId
  = GHC.Read.C:Read
      @ CId
      (GHC.Read.$fReadWord32_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,) (Sym (System.Posix.Types.N:CId[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Word32, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CId, [Char])] :: *)))
      (GHC.Read.$fReadWord32_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CId[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Word32], [Char])] :: *)
                  ~R# ([Char] -> [([CId], [Char])] :: *)))
      (GHC.Read.$fReadWord10
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Word32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      (System.Posix.Types.N:CId[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Word32 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CId :: *)))
      (GHC.Read.$fReadWord7
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Word32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        ([System.Posix.Types.N:CId[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Word32] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CId] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
System.Posix.Types.$fBoundedCId [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded CId
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: CId
                          GHC.Word.$fBitsWord32_$cminBound
                          `cast` (Sym (System.Posix.Types.N:CId[0])
                                  :: (Word32 :: *) ~R# (CId :: *))
                          GHC.Word.$fBoundedWord32_$cmaxBound
                          `cast` (Sym (System.Posix.Types.N:CId[0])
                                  :: (Word32 :: *) ~R# (CId :: *))]
System.Posix.Types.$fBoundedCId
  = GHC.Enum.C:Bounded
      @ CId
      (GHC.Word.$fBitsWord32_$cminBound
       `cast` (Sym (System.Posix.Types.N:CId[0])
               :: (Word32 :: *) ~R# (CId :: *)))
      (GHC.Word.$fBoundedWord32_$cmaxBound
       `cast` (Sym (System.Posix.Types.N:CId[0])
               :: (Word32 :: *) ~R# (CId :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCId [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CId
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CId
                                   Foreign.Storable.$fStorableWord32_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Int>_R
                                           :: (Word32 -> Int :: *) ~R# (CId -> Int :: *))
                                   Foreign.Storable.$fStorableWord32_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Int>_R
                                           :: (Word32 -> Int :: *) ~R# (CId -> Int :: *))
                                   GHC.Storable.readWord32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CId))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CId[0]))
                                           :: (Ptr Word32
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word32 #) :: *)
                                              ~R# (Ptr CId -> Int -> IO CId :: *))
                                   GHC.Storable.writeWord32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CId))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CId[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word32
                                               -> Int
                                               -> Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CId -> Int -> CId -> IO () :: *))
                                   Foreign.Storable.$fStorableWord13
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CId[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word32 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CId :: *))
                                   Foreign.Storable.$fStorableWord12
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CId[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> CId -> IO () :: *))
                                   Foreign.Storable.$fStorableWord11
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CId))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CId[0]))
                                           :: (Ptr Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word32 #) :: *)
                                              ~R# (Ptr CId -> IO CId :: *))
                                   Foreign.Storable.$fStorableWord10
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CId))_R
                                           ->_R Sym (System.Posix.Types.N:CId[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word32
                                               -> Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CId -> CId -> IO () :: *))]
System.Posix.Types.$fStorableCId
  = Foreign.Storable.C:Storable
      @ CId
      (Foreign.Storable.$fStorableWord32_$calignment
       `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CId -> Int :: *)))
      (Foreign.Storable.$fStorableWord32_$calignment
       `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CId -> Int :: *)))
      (GHC.Storable.readWord32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CId))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CId[0]))
               :: (Ptr Word32
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word32 #) :: *)
                  ~R# (Ptr CId -> Int -> IO CId :: *)))
      (GHC.Storable.writeWord32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CId))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word32
                   -> Int
                   -> Word32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CId -> Int -> CId -> IO () :: *)))
      (Foreign.Storable.$fStorableWord13
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CId[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word32 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CId :: *)))
      (Foreign.Storable.$fStorableWord12
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Word32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CId -> IO () :: *)))
      (Foreign.Storable.$fStorableWord11
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CId))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CId[0]))
               :: (Ptr Word32
                   -> State# RealWorld -> (# State# RealWorld, Word32 #) :: *)
                  ~R# (Ptr CId -> IO CId :: *)))
      (Foreign.Storable.$fStorableWord10
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CId))_R
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word32
                   -> Word32 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CId -> CId -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCId [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CId
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CId
                       GHC.Word.$fEnumWord32_$csucc
                       `cast` (Sym (System.Posix.Types.N:CId[0])
                               ->_R Sym (System.Posix.Types.N:CId[0])
                               :: (Word32 -> Word32 :: *) ~R# (CId -> CId :: *))
                       GHC.Word.$fEnumWord32_$cpred
                       `cast` (Sym (System.Posix.Types.N:CId[0])
                               ->_R Sym (System.Posix.Types.N:CId[0])
                               :: (Word32 -> Word32 :: *) ~R# (CId -> CId :: *))
                       GHC.Word.$fEnumWord32_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CId[0])
                               :: (Int -> Word32 :: *) ~R# (Int -> CId :: *))
                       GHC.Word.$fEnumWord32_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Int>_R
                               :: (Word32 -> Int :: *) ~R# (CId -> Int :: *))
                       GHC.Word.$fEnumWord32_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CId[0])
                               ->_R ([Sym (System.Posix.Types.N:CId[0])])_R
                               :: (Word32 -> [Word32] :: *) ~R# (CId -> [CId] :: *))
                       GHC.Word.$fEnumWord32_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CId[0])
                               ->_R Sym (System.Posix.Types.N:CId[0])
                               ->_R ([Sym (System.Posix.Types.N:CId[0])])_R
                               :: (Word32 -> Word32 -> [Word32] :: *)
                                  ~R# (CId -> CId -> [CId] :: *))
                       GHC.Word.$fEnumWord32_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CId[0])
                               ->_R Sym (System.Posix.Types.N:CId[0])
                               ->_R ([Sym (System.Posix.Types.N:CId[0])])_R
                               :: (Word32 -> Word32 -> [Word32] :: *)
                                  ~R# (CId -> CId -> [CId] :: *))
                       GHC.Word.$fEnumWord32_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CId[0])
                               ->_R Sym (System.Posix.Types.N:CId[0])
                               ->_R Sym (System.Posix.Types.N:CId[0])
                               ->_R ([Sym (System.Posix.Types.N:CId[0])])_R
                               :: (Word32 -> Word32 -> Word32 -> [Word32] :: *)
                                  ~R# (CId -> CId -> CId -> [CId] :: *))]
System.Posix.Types.$fEnumCId
  = GHC.Enum.C:Enum
      @ CId
      (GHC.Word.$fEnumWord32_$csucc
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Word32 :: *) ~R# (CId -> CId :: *)))
      (GHC.Word.$fEnumWord32_$cpred
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Word32 :: *) ~R# (CId -> CId :: *)))
      (GHC.Word.$fEnumWord32_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Int -> Word32 :: *) ~R# (Int -> CId :: *)))
      (GHC.Word.$fEnumWord32_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CId -> Int :: *)))
      (GHC.Word.$fEnumWord32_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R ([Sym (System.Posix.Types.N:CId[0])])_R
               :: (Word32 -> [Word32] :: *) ~R# (CId -> [CId] :: *)))
      (GHC.Word.$fEnumWord32_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R ([Sym (System.Posix.Types.N:CId[0])])_R
               :: (Word32 -> Word32 -> [Word32] :: *)
                  ~R# (CId -> CId -> [CId] :: *)))
      (GHC.Word.$fEnumWord32_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R ([Sym (System.Posix.Types.N:CId[0])])_R
               :: (Word32 -> Word32 -> [Word32] :: *)
                  ~R# (CId -> CId -> [CId] :: *)))
      (GHC.Word.$fEnumWord32_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R ([Sym (System.Posix.Types.N:CId[0])])_R
               :: (Word32 -> Word32 -> Word32 -> [Word32] :: *)
                  ~R# (CId -> CId -> CId -> [CId] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCId [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CId
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CId
                     GHC.Word.$fNumWord32_$c+
                     `cast` (Sym (System.Posix.Types.N:CId[0])
                             ->_R Sym (System.Posix.Types.N:CId[0])
                             ->_R Sym (System.Posix.Types.N:CId[0])
                             :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *))
                     GHC.Word.$fNumWord32_$c-
                     `cast` (Sym (System.Posix.Types.N:CId[0])
                             ->_R Sym (System.Posix.Types.N:CId[0])
                             ->_R Sym (System.Posix.Types.N:CId[0])
                             :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *))
                     GHC.Word.$fNumWord32_$c*
                     `cast` (Sym (System.Posix.Types.N:CId[0])
                             ->_R Sym (System.Posix.Types.N:CId[0])
                             ->_R Sym (System.Posix.Types.N:CId[0])
                             :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *))
                     GHC.Word.$fNumWord32_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CId[0])
                             ->_R Sym (System.Posix.Types.N:CId[0])
                             :: (Word32 -> Word32 :: *) ~R# (CId -> CId :: *))
                     GHC.Word.$fNumWord32_$cabs
                     `cast` (Sym (System.Posix.Types.N:CId[0])
                             ->_R Sym (System.Posix.Types.N:CId[0])
                             :: (Word32 -> Word32 :: *) ~R# (CId -> CId :: *))
                     GHC.Word.$fNumWord32_$csignum
                     `cast` (Sym (System.Posix.Types.N:CId[0])
                             ->_R Sym (System.Posix.Types.N:CId[0])
                             :: (Word32 -> Word32 :: *) ~R# (CId -> CId :: *))
                     GHC.Word.$fNumWord32_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CId[0])
                             :: (Integer -> Word32 :: *) ~R# (Integer -> CId :: *))]
System.Posix.Types.$fNumCId
  = GHC.Num.C:Num
      @ CId
      (GHC.Word.$fNumWord32_$c+
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *)))
      (GHC.Word.$fNumWord32_$c-
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *)))
      (GHC.Word.$fNumWord32_$c*
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *)))
      (GHC.Word.$fNumWord32_$cnegate
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Word32 :: *) ~R# (CId -> CId :: *)))
      (GHC.Word.$fNumWord32_$cabs
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Word32 :: *) ~R# (CId -> CId :: *)))
      (GHC.Word.$fNumWord32_$csignum
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Word32 :: *) ~R# (CId -> CId :: *)))
      (GHC.Word.$fNumWord32_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Integer -> Word32 :: *) ~R# (Integer -> CId :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCId [InlPrag=NOUSERINLINE CONLIKE] :: Eq CId
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CId
                        GHC.Word.eqWord32
                        `cast` (Sym (System.Posix.Types.N:CId[0])
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                ->_R <Bool>_R
                                :: (Word32 -> Word32 -> Bool :: *) ~R# (CId -> CId -> Bool :: *))
                        GHC.Word.neWord32
                        `cast` (Sym (System.Posix.Types.N:CId[0])
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                ->_R <Bool>_R
                                :: (Word32 -> Word32 -> Bool :: *) ~R# (CId -> CId -> Bool :: *))]
System.Posix.Types.$fEqCId
  = GHC.Classes.C:Eq
      @ CId
      (GHC.Word.eqWord32
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *) ~R# (CId -> CId -> Bool :: *)))
      (GHC.Word.neWord32
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *) ~R# (CId -> CId -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCId [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CId
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CId
                         System.Posix.Types.$fEqCId
                         GHC.Word.$fOrdWord32_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CId[0])
                                 ->_R Sym (System.Posix.Types.N:CId[0])
                                 ->_R <Ordering>_R
                                 :: (Word32 -> Word32 -> Ordering :: *)
                                    ~R# (CId -> CId -> Ordering :: *))
                         GHC.Word.ltWord32
                         `cast` (Sym (System.Posix.Types.N:CId[0])
                                 ->_R Sym (System.Posix.Types.N:CId[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *) ~R# (CId -> CId -> Bool :: *))
                         GHC.Word.leWord32
                         `cast` (Sym (System.Posix.Types.N:CId[0])
                                 ->_R Sym (System.Posix.Types.N:CId[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *) ~R# (CId -> CId -> Bool :: *))
                         GHC.Word.gtWord32
                         `cast` (Sym (System.Posix.Types.N:CId[0])
                                 ->_R Sym (System.Posix.Types.N:CId[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *) ~R# (CId -> CId -> Bool :: *))
                         GHC.Word.geWord32
                         `cast` (Sym (System.Posix.Types.N:CId[0])
                                 ->_R Sym (System.Posix.Types.N:CId[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *) ~R# (CId -> CId -> Bool :: *))
                         GHC.Word.$fOrdWord32_$cmax
                         `cast` (Sym (System.Posix.Types.N:CId[0])
                                 ->_R Sym (System.Posix.Types.N:CId[0])
                                 ->_R Sym (System.Posix.Types.N:CId[0])
                                 :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *))
                         GHC.Word.$fOrdWord32_$cmin
                         `cast` (Sym (System.Posix.Types.N:CId[0])
                                 ->_R Sym (System.Posix.Types.N:CId[0])
                                 ->_R Sym (System.Posix.Types.N:CId[0])
                                 :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *))]
System.Posix.Types.$fOrdCId
  = GHC.Classes.C:Ord
      @ CId
      System.Posix.Types.$fEqCId
      (GHC.Word.$fOrdWord32_$ccompare
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R <Ordering>_R
               :: (Word32 -> Word32 -> Ordering :: *)
                  ~R# (CId -> CId -> Ordering :: *)))
      (GHC.Word.ltWord32
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *) ~R# (CId -> CId -> Bool :: *)))
      (GHC.Word.leWord32
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *) ~R# (CId -> CId -> Bool :: *)))
      (GHC.Word.gtWord32
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *) ~R# (CId -> CId -> Bool :: *)))
      (GHC.Word.geWord32
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *) ~R# (CId -> CId -> Bool :: *)))
      (GHC.Word.$fOrdWord32_$cmax
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *)))
      (GHC.Word.$fOrdWord32_$cmin
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCId [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CId
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CId
                       System.Posix.Types.$fNumCId
                       System.Posix.Types.$fOrdCId
                       GHC.Word.$fRealWord32_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Ratio Integer>_R
                               :: (Word32 -> Ratio Integer :: *) ~R# (CId -> Ratio Integer :: *))]
System.Posix.Types.$fRealCId
  = GHC.Real.C:Real
      @ CId
      System.Posix.Types.$fNumCId
      System.Posix.Types.$fOrdCId
      (GHC.Word.$fRealWord32_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Ratio Integer>_R
               :: (Word32 -> Ratio Integer :: *) ~R# (CId -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 58, joins: 0/0}
System.Posix.Types.$fIntegralCId [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral CId
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: CId
                           System.Posix.Types.$fRealCId
                           System.Posix.Types.$fEnumCId
                           GHC.Word.$fIntegralWord32_$cquot
                           `cast` (Sym (System.Posix.Types.N:CId[0])
                                   ->_R Sym (System.Posix.Types.N:CId[0])
                                   ->_R Sym (System.Posix.Types.N:CId[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CId -> CId -> CId :: *))
                           GHC.Word.$fIntegralWord32_$crem
                           `cast` (Sym (System.Posix.Types.N:CId[0])
                                   ->_R Sym (System.Posix.Types.N:CId[0])
                                   ->_R Sym (System.Posix.Types.N:CId[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CId -> CId -> CId :: *))
                           GHC.Word.$fIntegralWord32_$cquot
                           `cast` (Sym (System.Posix.Types.N:CId[0])
                                   ->_R Sym (System.Posix.Types.N:CId[0])
                                   ->_R Sym (System.Posix.Types.N:CId[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CId -> CId -> CId :: *))
                           GHC.Word.$fIntegralWord32_$crem
                           `cast` (Sym (System.Posix.Types.N:CId[0])
                                   ->_R Sym (System.Posix.Types.N:CId[0])
                                   ->_R Sym (System.Posix.Types.N:CId[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CId -> CId -> CId :: *))
                           GHC.Word.$fIntegralWord32_$cquotRem
                           `cast` (Sym (System.Posix.Types.N:CId[0])
                                   ->_R Sym (System.Posix.Types.N:CId[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CId[0]))
                                           (Sym (System.Posix.Types.N:CId[0])))_R
                                   :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                                      ~R# (CId -> CId -> (CId, CId) :: *))
                           GHC.Word.$fIntegralWord32_$cdivMod
                           `cast` (Sym (System.Posix.Types.N:CId[0])
                                   ->_R Sym (System.Posix.Types.N:CId[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CId[0]))
                                           (Sym (System.Posix.Types.N:CId[0])))_R
                                   :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                                      ~R# (CId -> CId -> (CId, CId) :: *))
                           GHC.Word.$ctoInteger2
                           `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Integer>_R
                                   :: (Word32 -> Integer :: *) ~R# (CId -> Integer :: *))]
System.Posix.Types.$fIntegralCId
  = GHC.Real.C:Integral
      @ CId
      System.Posix.Types.$fRealCId
      System.Posix.Types.$fEnumCId
      (GHC.Word.$fIntegralWord32_$cquot
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *)))
      (GHC.Word.$fIntegralWord32_$crem
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *)))
      (GHC.Word.$fIntegralWord32_$cquot
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *)))
      (GHC.Word.$fIntegralWord32_$crem
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *)))
      (GHC.Word.$fIntegralWord32_$cquotRem
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CId[0]))
                       (Sym (System.Posix.Types.N:CId[0])))_R
               :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                  ~R# (CId -> CId -> (CId, CId) :: *)))
      (GHC.Word.$fIntegralWord32_$cdivMod
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CId[0]))
                       (Sym (System.Posix.Types.N:CId[0])))_R
               :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                  ~R# (CId -> CId -> (CId, CId) :: *)))
      (GHC.Word.$ctoInteger2
       `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Integer>_R
               :: (Word32 -> Integer :: *) ~R# (CId -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
System.Posix.Types.$fBitsCId [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits CId
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: CId
                        System.Posix.Types.$fEqCId
                        GHC.Word.$fBitsWord32_$c.&.
                        `cast` (Sym (System.Posix.Types.N:CId[0])
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *))
                        GHC.Word.$fBitsWord32_$c.|.
                        `cast` (Sym (System.Posix.Types.N:CId[0])
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *))
                        GHC.Word.$fBitsWord32_$cxor
                        `cast` (Sym (System.Posix.Types.N:CId[0])
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *))
                        GHC.Word.$fBitsWord32_$ccomplement
                        `cast` (Sym (System.Posix.Types.N:CId[0])
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                :: (Word32 -> Word32 :: *) ~R# (CId -> CId :: *))
                        GHC.Word.$fBitsWord32_$cshift
                        `cast` (Sym (System.Posix.Types.N:CId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *))
                        GHC.Word.$fBitsWord32_$crotate
                        `cast` (Sym (System.Posix.Types.N:CId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *))
                        GHC.Word.$fBitsWord32_$cminBound
                        `cast` (Sym (System.Posix.Types.N:CId[0])
                                :: (Word32 :: *) ~R# (CId :: *))
                        GHC.Word.$fBitsWord32_$cbit
                        `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CId[0])
                                :: (Int -> Word32 :: *) ~R# (Int -> CId :: *))
                        GHC.Word.$fBitsWord32_$csetBit
                        `cast` (Sym (System.Posix.Types.N:CId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *))
                        GHC.Word.$fBitsWord32_$cclearBit
                        `cast` (Sym (System.Posix.Types.N:CId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *))
                        GHC.Word.$fBitsWord32_$ccomplementBit
                        `cast` (Sym (System.Posix.Types.N:CId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *))
                        GHC.Word.$fBitsWord32_$ctestBit
                        `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Int -> Bool>_R
                                :: (Word32 -> Int -> Bool :: *) ~R# (CId -> Int -> Bool :: *))
                        GHC.Word.$fBitsWord32_$cbitSizeMaybe
                        `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Maybe Int>_R
                                :: (Word32 -> Maybe Int :: *) ~R# (CId -> Maybe Int :: *))
                        GHC.Word.$fBitsWord32_$cfiniteBitSize
                        `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Int>_R
                                :: (Word32 -> Int :: *) ~R# (CId -> Int :: *))
                        GHC.Word.$fBitsWord32_$cisSigned
                        `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Bool>_R
                                :: (Word32 -> Bool :: *) ~R# (CId -> Bool :: *))
                        GHC.Word.$fBitsWord32_$cshiftL
                        `cast` (Sym (System.Posix.Types.N:CId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *))
                        GHC.Word.$fBitsWord32_$cunsafeShiftL
                        `cast` (Sym (System.Posix.Types.N:CId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *))
                        GHC.Word.$fBitsWord32_$cshiftR
                        `cast` (Sym (System.Posix.Types.N:CId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *))
                        GHC.Word.$fBitsWord32_$cunsafeShiftR
                        `cast` (Sym (System.Posix.Types.N:CId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *))
                        GHC.Word.$fBitsWord32_$crotateL
                        `cast` (Sym (System.Posix.Types.N:CId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *))
                        GHC.Word.$fBitsWord32_$crotateR
                        `cast` (Sym (System.Posix.Types.N:CId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CId[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *))
                        GHC.Word.$fBitsWord32_$cpopCount
                        `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Int>_R
                                :: (Word32 -> Int :: *) ~R# (CId -> Int :: *))]
System.Posix.Types.$fBitsCId
  = Data.Bits.C:Bits
      @ CId
      System.Posix.Types.$fEqCId
      (GHC.Word.$fBitsWord32_$c.&.
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *)))
      (GHC.Word.$fBitsWord32_$c.|.
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *)))
      (GHC.Word.$fBitsWord32_$cxor
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Word32 -> Word32 :: *) ~R# (CId -> CId -> CId :: *)))
      (GHC.Word.$fBitsWord32_$ccomplement
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Word32 :: *) ~R# (CId -> CId :: *)))
      (GHC.Word.$fBitsWord32_$cshift
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *)))
      (GHC.Word.$fBitsWord32_$crotate
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *)))
      (GHC.Word.$fBitsWord32_$cminBound
       `cast` (Sym (System.Posix.Types.N:CId[0])
               :: (Word32 :: *) ~R# (CId :: *)))
      (GHC.Word.$fBitsWord32_$cbit
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Int -> Word32 :: *) ~R# (Int -> CId :: *)))
      (GHC.Word.$fBitsWord32_$csetBit
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *)))
      (GHC.Word.$fBitsWord32_$cclearBit
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *)))
      (GHC.Word.$fBitsWord32_$ccomplementBit
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *)))
      (GHC.Word.$fBitsWord32_$ctestBit
       `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Int -> Bool>_R
               :: (Word32 -> Int -> Bool :: *) ~R# (CId -> Int -> Bool :: *)))
      (GHC.Word.$fBitsWord32_$cbitSizeMaybe
       `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Maybe Int>_R
               :: (Word32 -> Maybe Int :: *) ~R# (CId -> Maybe Int :: *)))
      (GHC.Word.$fBitsWord32_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CId -> Int :: *)))
      (GHC.Word.$fBitsWord32_$cisSigned
       `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Bool>_R
               :: (Word32 -> Bool :: *) ~R# (CId -> Bool :: *)))
      (GHC.Word.$fBitsWord32_$cshiftL
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *)))
      (GHC.Word.$fBitsWord32_$cunsafeShiftL
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *)))
      (GHC.Word.$fBitsWord32_$cshiftR
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *)))
      (GHC.Word.$fBitsWord32_$cunsafeShiftR
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *)))
      (GHC.Word.$fBitsWord32_$crotateL
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *)))
      (GHC.Word.$fBitsWord32_$crotateR
       `cast` (Sym (System.Posix.Types.N:CId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CId[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CId -> Int -> CId :: *)))
      (GHC.Word.$fBitsWord32_$cpopCount
       `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CId -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
System.Posix.Types.$fFiniteBitsCId [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits CId
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: CId
                              System.Posix.Types.$fBitsCId
                              GHC.Word.$fBitsWord32_$cfiniteBitSize
                              `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Int>_R
                                      :: (Word32 -> Int :: *) ~R# (CId -> Int :: *))
                              GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
                              `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Int>_R
                                      :: (Word32 -> Int :: *) ~R# (CId -> Int :: *))
                              GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros
                              `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Int>_R
                                      :: (Word32 -> Int :: *) ~R# (CId -> Int :: *))]
System.Posix.Types.$fFiniteBitsCId
  = Data.Bits.C:FiniteBits
      @ CId
      System.Posix.Types.$fBitsCId
      (GHC.Word.$fBitsWord32_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CId -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
       `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CId -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros
       `cast` (Sym (System.Posix.Types.N:CId[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CId -> Int :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCFsFilCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CFsFilCnt
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CFsFilCnt
                       GHC.Word.$fShowWord64_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Word64 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CFsFilCnt -> [Char] -> [Char] :: *))
                       GHC.Word.$fShowWord64_$cshow
                       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <[Char]>_R
                               :: (Word64 -> [Char] :: *) ~R# (CFsFilCnt -> [Char] :: *))
                       GHC.Word.$fShowWord64_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CFsFilCnt[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Word64] -> [Char] -> [Char] :: *)
                                  ~R# ([CFsFilCnt] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCFsFilCnt
  = GHC.Show.C:Show
      @ CFsFilCnt
      (GHC.Word.$fShowWord64_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Word64 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CFsFilCnt -> [Char] -> [Char] :: *)))
      (GHC.Word.$fShowWord64_$cshow
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <[Char]>_R
               :: (Word64 -> [Char] :: *) ~R# (CFsFilCnt -> [Char] :: *)))
      (GHC.Word.$fShowWord64_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CFsFilCnt[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Word64] -> [Char] -> [Char] :: *)
                  ~R# ([CFsFilCnt] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCFsFilCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CFsFilCnt
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CFsFilCnt
                       GHC.Read.$fReadWord64_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,)
                                         (Sym (System.Posix.Types.N:CFsFilCnt[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Word64, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CFsFilCnt, [Char])] :: *))
                       GHC.Read.$fReadWord64_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CFsFilCnt[0])])_R
                                         <[Char]>_R)_R])_R
                               :: ([Char] -> [([Word64], [Char])] :: *)
                                  ~R# ([Char] -> [([CFsFilCnt], [Char])] :: *))
                       GHC.Read.$fReadWord13
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Word64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      (System.Posix.Types.N:CFsFilCnt[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Word64 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CFsFilCnt :: *))
                       GHC.Read.$fReadWord11
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Word64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        ([System.Posix.Types.N:CFsFilCnt[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Word64] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CFsFilCnt] :: *))]
System.Posix.Types.$fReadCFsFilCnt
  = GHC.Read.C:Read
      @ CFsFilCnt
      (GHC.Read.$fReadWord64_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,)
                         (Sym (System.Posix.Types.N:CFsFilCnt[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Word64, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CFsFilCnt, [Char])] :: *)))
      (GHC.Read.$fReadWord64_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CFsFilCnt[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Word64], [Char])] :: *)
                  ~R# ([Char] -> [([CFsFilCnt], [Char])] :: *)))
      (GHC.Read.$fReadWord13
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Word64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      (System.Posix.Types.N:CFsFilCnt[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Word64 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CFsFilCnt :: *)))
      (GHC.Read.$fReadWord11
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Word64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        ([System.Posix.Types.N:CFsFilCnt[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Word64] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CFsFilCnt] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
System.Posix.Types.$fBoundedCFsFilCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded CFsFilCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: CFsFilCnt
                          GHC.Word.$fBitsWord7
                          `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                  :: (Word64 :: *) ~R# (CFsFilCnt :: *))
                          GHC.Word.$fBoundedWord64_$cmaxBound
                          `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                  :: (Word64 :: *) ~R# (CFsFilCnt :: *))]
System.Posix.Types.$fBoundedCFsFilCnt
  = GHC.Enum.C:Bounded
      @ CFsFilCnt
      (GHC.Word.$fBitsWord7
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 :: *) ~R# (CFsFilCnt :: *)))
      (GHC.Word.$fBoundedWord64_$cmaxBound
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 :: *) ~R# (CFsFilCnt :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCFsFilCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CFsFilCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CFsFilCnt
                                   Foreign.Storable.$fStorableWord64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Int>_R
                                           :: (Word64 -> Int :: *) ~R# (CFsFilCnt -> Int :: *))
                                   Foreign.Storable.$fStorableWord64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Int>_R
                                           :: (Word64 -> Int :: *) ~R# (CFsFilCnt -> Int :: *))
                                   GHC.Storable.readWord64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CFsFilCnt))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CFsFilCnt[0]))
                                           :: (Ptr Word64
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word64 #) :: *)
                                              ~R# (Ptr CFsFilCnt -> Int -> IO CFsFilCnt :: *))
                                   GHC.Storable.writeWord64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CFsFilCnt))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word64
                                               -> Int
                                               -> Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CFsFilCnt -> Int -> CFsFilCnt -> IO () :: *))
                                   Foreign.Storable.$fStorableWord18
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CFsFilCnt[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word64 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CFsFilCnt :: *))
                                   Foreign.Storable.$fStorableWord17
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b.
                                                   Ptr b -> Int -> CFsFilCnt -> IO () :: *))
                                   Foreign.Storable.$fStorableWord15
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CFsFilCnt))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CFsFilCnt[0]))
                                           :: (Ptr Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word64 #) :: *)
                                              ~R# (Ptr CFsFilCnt -> IO CFsFilCnt :: *))
                                   Foreign.Storable.$fStorableWord14
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CFsFilCnt))_R
                                           ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word64
                                               -> Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CFsFilCnt -> CFsFilCnt -> IO () :: *))]
System.Posix.Types.$fStorableCFsFilCnt
  = Foreign.Storable.C:Storable
      @ CFsFilCnt
      (Foreign.Storable.$fStorableWord64_$calignment
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CFsFilCnt -> Int :: *)))
      (Foreign.Storable.$fStorableWord64_$calignment
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CFsFilCnt -> Int :: *)))
      (GHC.Storable.readWord64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CFsFilCnt))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CFsFilCnt[0]))
               :: (Ptr Word64
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                  ~R# (Ptr CFsFilCnt -> Int -> IO CFsFilCnt :: *)))
      (GHC.Storable.writeWord64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CFsFilCnt))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word64
                   -> Int
                   -> Word64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CFsFilCnt -> Int -> CFsFilCnt -> IO () :: *)))
      (Foreign.Storable.$fStorableWord18
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CFsFilCnt[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CFsFilCnt :: *)))
      (Foreign.Storable.$fStorableWord17
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Word64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CFsFilCnt -> IO () :: *)))
      (Foreign.Storable.$fStorableWord15
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CFsFilCnt))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CFsFilCnt[0]))
               :: (Ptr Word64
                   -> State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                  ~R# (Ptr CFsFilCnt -> IO CFsFilCnt :: *)))
      (Foreign.Storable.$fStorableWord14
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CFsFilCnt))_R
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word64
                   -> Word64 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CFsFilCnt -> CFsFilCnt -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCFsFilCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CFsFilCnt
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CFsFilCnt
                       GHC.Word.$fEnumWord64_$csucc
                       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                               :: (Word64 -> Word64 :: *) ~R# (CFsFilCnt -> CFsFilCnt :: *))
                       GHC.Word.$fEnumWord64_$cpred
                       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                               :: (Word64 -> Word64 :: *) ~R# (CFsFilCnt -> CFsFilCnt :: *))
                       GHC.Word.$fEnumWord64_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                               :: (Int -> Word64 :: *) ~R# (Int -> CFsFilCnt :: *))
                       GHC.Word.$fEnumWord64_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Int>_R
                               :: (Word64 -> Int :: *) ~R# (CFsFilCnt -> Int :: *))
                       GHC.Word.$fEnumWord64_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                               ->_R ([Sym (System.Posix.Types.N:CFsFilCnt[0])])_R
                               :: (Word64 -> [Word64] :: *) ~R# (CFsFilCnt -> [CFsFilCnt] :: *))
                       GHC.Word.$fEnumWord64_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                               ->_R ([Sym (System.Posix.Types.N:CFsFilCnt[0])])_R
                               :: (Word64 -> Word64 -> [Word64] :: *)
                                  ~R# (CFsFilCnt -> CFsFilCnt -> [CFsFilCnt] :: *))
                       GHC.Word.$fEnumWord64_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                               ->_R ([Sym (System.Posix.Types.N:CFsFilCnt[0])])_R
                               :: (Word64 -> Word64 -> [Word64] :: *)
                                  ~R# (CFsFilCnt -> CFsFilCnt -> [CFsFilCnt] :: *))
                       GHC.Word.$fEnumWord64_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                               ->_R ([Sym (System.Posix.Types.N:CFsFilCnt[0])])_R
                               :: (Word64 -> Word64 -> Word64 -> [Word64] :: *)
                                  ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt -> [CFsFilCnt] :: *))]
System.Posix.Types.$fEnumCFsFilCnt
  = GHC.Enum.C:Enum
      @ CFsFilCnt
      (GHC.Word.$fEnumWord64_$csucc
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Word64 :: *) ~R# (CFsFilCnt -> CFsFilCnt :: *)))
      (GHC.Word.$fEnumWord64_$cpred
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Word64 :: *) ~R# (CFsFilCnt -> CFsFilCnt :: *)))
      (GHC.Word.$fEnumWord64_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Int -> Word64 :: *) ~R# (Int -> CFsFilCnt :: *)))
      (GHC.Word.$fEnumWord64_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CFsFilCnt -> Int :: *)))
      (GHC.Word.$fEnumWord64_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R ([Sym (System.Posix.Types.N:CFsFilCnt[0])])_R
               :: (Word64 -> [Word64] :: *) ~R# (CFsFilCnt -> [CFsFilCnt] :: *)))
      (GHC.Word.$fEnumWord64_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R ([Sym (System.Posix.Types.N:CFsFilCnt[0])])_R
               :: (Word64 -> Word64 -> [Word64] :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> [CFsFilCnt] :: *)))
      (GHC.Word.$fEnumWord64_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R ([Sym (System.Posix.Types.N:CFsFilCnt[0])])_R
               :: (Word64 -> Word64 -> [Word64] :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> [CFsFilCnt] :: *)))
      (GHC.Word.$fEnumWord64_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R ([Sym (System.Posix.Types.N:CFsFilCnt[0])])_R
               :: (Word64 -> Word64 -> Word64 -> [Word64] :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt -> [CFsFilCnt] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCFsFilCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CFsFilCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CFsFilCnt
                     GHC.Word.$fNumWord64_$c+
                     `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                             ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                             ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                             :: (Word64 -> Word64 -> Word64 :: *)
                                ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *))
                     GHC.Word.$fNumWord64_$c-
                     `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                             ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                             ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                             :: (Word64 -> Word64 -> Word64 :: *)
                                ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *))
                     GHC.Word.$fNumWord64_$c*
                     `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                             ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                             ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                             :: (Word64 -> Word64 -> Word64 :: *)
                                ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *))
                     GHC.Word.$fNumWord64_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                             ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                             :: (Word64 -> Word64 :: *) ~R# (CFsFilCnt -> CFsFilCnt :: *))
                     GHC.Word.$fNumWord64_$cabs
                     `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                             ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                             :: (Word64 -> Word64 :: *) ~R# (CFsFilCnt -> CFsFilCnt :: *))
                     GHC.Word.$fNumWord64_$csignum
                     `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                             ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                             :: (Word64 -> Word64 :: *) ~R# (CFsFilCnt -> CFsFilCnt :: *))
                     GHC.Word.$fNumWord64_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                             :: (Integer -> Word64 :: *) ~R# (Integer -> CFsFilCnt :: *))]
System.Posix.Types.$fNumCFsFilCnt
  = GHC.Num.C:Num
      @ CFsFilCnt
      (GHC.Word.$fNumWord64_$c+
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *)))
      (GHC.Word.$fNumWord64_$c-
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *)))
      (GHC.Word.$fNumWord64_$c*
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *)))
      (GHC.Word.$fNumWord64_$cnegate
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Word64 :: *) ~R# (CFsFilCnt -> CFsFilCnt :: *)))
      (GHC.Word.$fNumWord64_$cabs
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Word64 :: *) ~R# (CFsFilCnt -> CFsFilCnt :: *)))
      (GHC.Word.$fNumWord64_$csignum
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Word64 :: *) ~R# (CFsFilCnt -> CFsFilCnt :: *)))
      (GHC.Word.$fNumWord64_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Integer -> Word64 :: *) ~R# (Integer -> CFsFilCnt :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCFsFilCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CFsFilCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CFsFilCnt
                        GHC.Word.eqWord64
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R <Bool>_R
                                :: (Word64 -> Word64 -> Bool :: *)
                                   ~R# (CFsFilCnt -> CFsFilCnt -> Bool :: *))
                        GHC.Word.neWord64
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R <Bool>_R
                                :: (Word64 -> Word64 -> Bool :: *)
                                   ~R# (CFsFilCnt -> CFsFilCnt -> Bool :: *))]
System.Posix.Types.$fEqCFsFilCnt
  = GHC.Classes.C:Eq
      @ CFsFilCnt
      (GHC.Word.eqWord64
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> Bool :: *)))
      (GHC.Word.neWord64
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCFsFilCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CFsFilCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CFsFilCnt
                         System.Posix.Types.$fEqCFsFilCnt
                         GHC.Word.$fOrdWord64_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                 ->_R <Ordering>_R
                                 :: (Word64 -> Word64 -> Ordering :: *)
                                    ~R# (CFsFilCnt -> CFsFilCnt -> Ordering :: *))
                         GHC.Word.ltWord64
                         `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *)
                                    ~R# (CFsFilCnt -> CFsFilCnt -> Bool :: *))
                         GHC.Word.leWord64
                         `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *)
                                    ~R# (CFsFilCnt -> CFsFilCnt -> Bool :: *))
                         GHC.Word.gtWord64
                         `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *)
                                    ~R# (CFsFilCnt -> CFsFilCnt -> Bool :: *))
                         GHC.Word.geWord64
                         `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *)
                                    ~R# (CFsFilCnt -> CFsFilCnt -> Bool :: *))
                         GHC.Word.$fOrdWord64_$cmax
                         `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                 :: (Word64 -> Word64 -> Word64 :: *)
                                    ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *))
                         GHC.Word.$fOrdWord64_$cmin
                         `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                 :: (Word64 -> Word64 -> Word64 :: *)
                                    ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *))]
System.Posix.Types.$fOrdCFsFilCnt
  = GHC.Classes.C:Ord
      @ CFsFilCnt
      System.Posix.Types.$fEqCFsFilCnt
      (GHC.Word.$fOrdWord64_$ccompare
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Ordering>_R
               :: (Word64 -> Word64 -> Ordering :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> Ordering :: *)))
      (GHC.Word.ltWord64
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> Bool :: *)))
      (GHC.Word.leWord64
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> Bool :: *)))
      (GHC.Word.gtWord64
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> Bool :: *)))
      (GHC.Word.geWord64
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> Bool :: *)))
      (GHC.Word.$fOrdWord64_$cmax
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *)))
      (GHC.Word.$fOrdWord64_$cmin
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCFsFilCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CFsFilCnt
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CFsFilCnt
                       System.Posix.Types.$fNumCFsFilCnt
                       System.Posix.Types.$fOrdCFsFilCnt
                       GHC.Word.$fRealWord64_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                               ->_R <Ratio Integer>_R
                               :: (Word64 -> Ratio Integer :: *)
                                  ~R# (CFsFilCnt -> Ratio Integer :: *))]
System.Posix.Types.$fRealCFsFilCnt
  = GHC.Real.C:Real
      @ CFsFilCnt
      System.Posix.Types.$fNumCFsFilCnt
      System.Posix.Types.$fOrdCFsFilCnt
      (GHC.Word.$fRealWord64_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Ratio Integer>_R
               :: (Word64 -> Ratio Integer :: *)
                  ~R# (CFsFilCnt -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 58, joins: 0/0}
System.Posix.Types.$fIntegralCFsFilCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral CFsFilCnt
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: CFsFilCnt
                           System.Posix.Types.$fRealCFsFilCnt
                           System.Posix.Types.$fEnumCFsFilCnt
                           GHC.Word.$fIntegralWord64_$cdiv
                           `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *))
                           GHC.Word.$fIntegralWord64_$cmod
                           `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *))
                           GHC.Word.$fIntegralWord64_$cdiv
                           `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *))
                           GHC.Word.$fIntegralWord64_$cmod
                           `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *))
                           GHC.Word.$fIntegralWord64_$cquotRem
                           `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CFsFilCnt[0]))
                                           (Sym (System.Posix.Types.N:CFsFilCnt[0])))_R
                                   :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                                      ~R# (CFsFilCnt -> CFsFilCnt -> (CFsFilCnt, CFsFilCnt) :: *))
                           GHC.Word.$fIntegralWord64_$cdivMod
                           `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CFsFilCnt[0]))
                                           (Sym (System.Posix.Types.N:CFsFilCnt[0])))_R
                                   :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                                      ~R# (CFsFilCnt -> CFsFilCnt -> (CFsFilCnt, CFsFilCnt) :: *))
                           GHC.Word.$fIntegralWord64_$ctoInteger
                           `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Integer>_R
                                   :: (Word64 -> Integer :: *) ~R# (CFsFilCnt -> Integer :: *))]
System.Posix.Types.$fIntegralCFsFilCnt
  = GHC.Real.C:Integral
      @ CFsFilCnt
      System.Posix.Types.$fRealCFsFilCnt
      System.Posix.Types.$fEnumCFsFilCnt
      (GHC.Word.$fIntegralWord64_$cdiv
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *)))
      (GHC.Word.$fIntegralWord64_$cmod
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *)))
      (GHC.Word.$fIntegralWord64_$cdiv
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *)))
      (GHC.Word.$fIntegralWord64_$cmod
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *)))
      (GHC.Word.$fIntegralWord64_$cquotRem
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CFsFilCnt[0]))
                       (Sym (System.Posix.Types.N:CFsFilCnt[0])))_R
               :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> (CFsFilCnt, CFsFilCnt) :: *)))
      (GHC.Word.$fIntegralWord64_$cdivMod
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CFsFilCnt[0]))
                       (Sym (System.Posix.Types.N:CFsFilCnt[0])))_R
               :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> (CFsFilCnt, CFsFilCnt) :: *)))
      (GHC.Word.$fIntegralWord64_$ctoInteger
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Integer>_R
               :: (Word64 -> Integer :: *) ~R# (CFsFilCnt -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
System.Posix.Types.$fBitsCFsFilCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits CFsFilCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: CFsFilCnt
                        System.Posix.Types.$fEqCFsFilCnt
                        GHC.Word.$fBitsWord64_$c.&.
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                :: (Word64 -> Word64 -> Word64 :: *)
                                   ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *))
                        GHC.Word.$fBitsWord64_$c.|.
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                :: (Word64 -> Word64 -> Word64 :: *)
                                   ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *))
                        GHC.Word.$fBitsWord64_$cxor
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                :: (Word64 -> Word64 -> Word64 :: *)
                                   ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *))
                        GHC.Word.$fBitsWord64_$ccomplement
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                :: (Word64 -> Word64 :: *) ~R# (CFsFilCnt -> CFsFilCnt :: *))
                        GHC.Word.$fBitsWord64_$cshift
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *))
                        GHC.Word.$fBitsWord64_$crotate
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *))
                        GHC.Word.$fBitsWord7
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                :: (Word64 :: *) ~R# (CFsFilCnt :: *))
                        GHC.Word.$fBitsWord64_$cbit
                        `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                :: (Int -> Word64 :: *) ~R# (Int -> CFsFilCnt :: *))
                        GHC.Word.$fBitsWord64_$csetBit
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *))
                        GHC.Word.$fBitsWord64_$cclearBit
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *))
                        GHC.Word.$fBitsWord64_$ccomplementBit
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *))
                        GHC.Word.$fBitsWord64_$ctestBit
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R <Int -> Bool>_R
                                :: (Word64 -> Int -> Bool :: *)
                                   ~R# (CFsFilCnt -> Int -> Bool :: *))
                        GHC.Word.$fBitsWord64_$cbitSizeMaybe
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Maybe Int>_R
                                :: (Word64 -> Maybe Int :: *) ~R# (CFsFilCnt -> Maybe Int :: *))
                        GHC.Word.$fBitsWord64_$cfiniteBitSize
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Int>_R
                                :: (Word64 -> Int :: *) ~R# (CFsFilCnt -> Int :: *))
                        GHC.Word.$fBitsWord64_$cisSigned
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Bool>_R
                                :: (Word64 -> Bool :: *) ~R# (CFsFilCnt -> Bool :: *))
                        GHC.Word.$fBitsWord64_$cshiftL
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *))
                        GHC.Word.$fBitsWord64_$cunsafeShiftL
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *))
                        GHC.Word.$fBitsWord64_$cshiftR
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *))
                        GHC.Word.$fBitsWord64_$cunsafeShiftR
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *))
                        GHC.Word.$fBitsWord64_$crotateL
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *))
                        GHC.Word.$fBitsWord64_$crotateR
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *))
                        GHC.Word.$fBitsWord64_$cpopCount
                        `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Int>_R
                                :: (Word64 -> Int :: *) ~R# (CFsFilCnt -> Int :: *))]
System.Posix.Types.$fBitsCFsFilCnt
  = Data.Bits.C:Bits
      @ CFsFilCnt
      System.Posix.Types.$fEqCFsFilCnt
      (GHC.Word.$fBitsWord64_$c.&.
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *)))
      (GHC.Word.$fBitsWord64_$c.|.
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *)))
      (GHC.Word.$fBitsWord64_$cxor
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsFilCnt -> CFsFilCnt -> CFsFilCnt :: *)))
      (GHC.Word.$fBitsWord64_$ccomplement
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Word64 :: *) ~R# (CFsFilCnt -> CFsFilCnt :: *)))
      (GHC.Word.$fBitsWord64_$cshift
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *)))
      (GHC.Word.$fBitsWord64_$crotate
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *)))
      (GHC.Word.$fBitsWord7
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 :: *) ~R# (CFsFilCnt :: *)))
      (GHC.Word.$fBitsWord64_$cbit
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Int -> Word64 :: *) ~R# (Int -> CFsFilCnt :: *)))
      (GHC.Word.$fBitsWord64_$csetBit
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *)))
      (GHC.Word.$fBitsWord64_$cclearBit
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *)))
      (GHC.Word.$fBitsWord64_$ccomplementBit
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *)))
      (GHC.Word.$fBitsWord64_$ctestBit
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Int -> Bool>_R
               :: (Word64 -> Int -> Bool :: *)
                  ~R# (CFsFilCnt -> Int -> Bool :: *)))
      (GHC.Word.$fBitsWord64_$cbitSizeMaybe
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Maybe Int>_R
               :: (Word64 -> Maybe Int :: *) ~R# (CFsFilCnt -> Maybe Int :: *)))
      (GHC.Word.$fBitsWord64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CFsFilCnt -> Int :: *)))
      (GHC.Word.$fBitsWord64_$cisSigned
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Bool>_R
               :: (Word64 -> Bool :: *) ~R# (CFsFilCnt -> Bool :: *)))
      (GHC.Word.$fBitsWord64_$cshiftL
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *)))
      (GHC.Word.$fBitsWord64_$cunsafeShiftL
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *)))
      (GHC.Word.$fBitsWord64_$cshiftR
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *)))
      (GHC.Word.$fBitsWord64_$cunsafeShiftR
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *)))
      (GHC.Word.$fBitsWord64_$crotateL
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *)))
      (GHC.Word.$fBitsWord64_$crotateR
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsFilCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsFilCnt -> Int -> CFsFilCnt :: *)))
      (GHC.Word.$fBitsWord64_$cpopCount
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CFsFilCnt -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
System.Posix.Types.$fFiniteBitsCFsFilCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits CFsFilCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: CFsFilCnt
                              System.Posix.Types.$fBitsCFsFilCnt
                              GHC.Word.$fBitsWord64_$cfiniteBitSize
                              `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Int>_R
                                      :: (Word64 -> Int :: *) ~R# (CFsFilCnt -> Int :: *))
                              GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                              `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Int>_R
                                      :: (Word64 -> Int :: *) ~R# (CFsFilCnt -> Int :: *))
                              GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                              `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Int>_R
                                      :: (Word64 -> Int :: *) ~R# (CFsFilCnt -> Int :: *))]
System.Posix.Types.$fFiniteBitsCFsFilCnt
  = Data.Bits.C:FiniteBits
      @ CFsFilCnt
      System.Posix.Types.$fBitsCFsFilCnt
      (GHC.Word.$fBitsWord64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CFsFilCnt -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CFsFilCnt -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
       `cast` (Sym (System.Posix.Types.N:CFsFilCnt[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CFsFilCnt -> Int :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCFsBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CFsBlkCnt
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CFsBlkCnt
                       GHC.Word.$fShowWord64_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Word64 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CFsBlkCnt -> [Char] -> [Char] :: *))
                       GHC.Word.$fShowWord64_$cshow
                       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <[Char]>_R
                               :: (Word64 -> [Char] :: *) ~R# (CFsBlkCnt -> [Char] :: *))
                       GHC.Word.$fShowWord64_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CFsBlkCnt[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Word64] -> [Char] -> [Char] :: *)
                                  ~R# ([CFsBlkCnt] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCFsBlkCnt
  = GHC.Show.C:Show
      @ CFsBlkCnt
      (GHC.Word.$fShowWord64_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Word64 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CFsBlkCnt -> [Char] -> [Char] :: *)))
      (GHC.Word.$fShowWord64_$cshow
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <[Char]>_R
               :: (Word64 -> [Char] :: *) ~R# (CFsBlkCnt -> [Char] :: *)))
      (GHC.Word.$fShowWord64_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CFsBlkCnt[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Word64] -> [Char] -> [Char] :: *)
                  ~R# ([CFsBlkCnt] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCFsBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CFsBlkCnt
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CFsBlkCnt
                       GHC.Read.$fReadWord64_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,)
                                         (Sym (System.Posix.Types.N:CFsBlkCnt[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Word64, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CFsBlkCnt, [Char])] :: *))
                       GHC.Read.$fReadWord64_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CFsBlkCnt[0])])_R
                                         <[Char]>_R)_R])_R
                               :: ([Char] -> [([Word64], [Char])] :: *)
                                  ~R# ([Char] -> [([CFsBlkCnt], [Char])] :: *))
                       GHC.Read.$fReadWord13
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Word64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      (System.Posix.Types.N:CFsBlkCnt[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Word64 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CFsBlkCnt :: *))
                       GHC.Read.$fReadWord11
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Word64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        ([System.Posix.Types.N:CFsBlkCnt[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Word64] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CFsBlkCnt] :: *))]
System.Posix.Types.$fReadCFsBlkCnt
  = GHC.Read.C:Read
      @ CFsBlkCnt
      (GHC.Read.$fReadWord64_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,)
                         (Sym (System.Posix.Types.N:CFsBlkCnt[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Word64, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CFsBlkCnt, [Char])] :: *)))
      (GHC.Read.$fReadWord64_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CFsBlkCnt[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Word64], [Char])] :: *)
                  ~R# ([Char] -> [([CFsBlkCnt], [Char])] :: *)))
      (GHC.Read.$fReadWord13
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Word64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      (System.Posix.Types.N:CFsBlkCnt[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Word64 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CFsBlkCnt :: *)))
      (GHC.Read.$fReadWord11
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Word64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        ([System.Posix.Types.N:CFsBlkCnt[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Word64] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CFsBlkCnt] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
System.Posix.Types.$fBoundedCFsBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded CFsBlkCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: CFsBlkCnt
                          GHC.Word.$fBitsWord7
                          `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                  :: (Word64 :: *) ~R# (CFsBlkCnt :: *))
                          GHC.Word.$fBoundedWord64_$cmaxBound
                          `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                  :: (Word64 :: *) ~R# (CFsBlkCnt :: *))]
System.Posix.Types.$fBoundedCFsBlkCnt
  = GHC.Enum.C:Bounded
      @ CFsBlkCnt
      (GHC.Word.$fBitsWord7
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 :: *) ~R# (CFsBlkCnt :: *)))
      (GHC.Word.$fBoundedWord64_$cmaxBound
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 :: *) ~R# (CFsBlkCnt :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCFsBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CFsBlkCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CFsBlkCnt
                                   Foreign.Storable.$fStorableWord64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Int>_R
                                           :: (Word64 -> Int :: *) ~R# (CFsBlkCnt -> Int :: *))
                                   Foreign.Storable.$fStorableWord64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Int>_R
                                           :: (Word64 -> Int :: *) ~R# (CFsBlkCnt -> Int :: *))
                                   GHC.Storable.readWord64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CFsBlkCnt))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CFsBlkCnt[0]))
                                           :: (Ptr Word64
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word64 #) :: *)
                                              ~R# (Ptr CFsBlkCnt -> Int -> IO CFsBlkCnt :: *))
                                   GHC.Storable.writeWord64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CFsBlkCnt))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word64
                                               -> Int
                                               -> Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CFsBlkCnt -> Int -> CFsBlkCnt -> IO () :: *))
                                   Foreign.Storable.$fStorableWord18
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CFsBlkCnt[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word64 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CFsBlkCnt :: *))
                                   Foreign.Storable.$fStorableWord17
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b.
                                                   Ptr b -> Int -> CFsBlkCnt -> IO () :: *))
                                   Foreign.Storable.$fStorableWord15
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CFsBlkCnt))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CFsBlkCnt[0]))
                                           :: (Ptr Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word64 #) :: *)
                                              ~R# (Ptr CFsBlkCnt -> IO CFsBlkCnt :: *))
                                   Foreign.Storable.$fStorableWord14
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CFsBlkCnt))_R
                                           ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word64
                                               -> Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CFsBlkCnt -> CFsBlkCnt -> IO () :: *))]
System.Posix.Types.$fStorableCFsBlkCnt
  = Foreign.Storable.C:Storable
      @ CFsBlkCnt
      (Foreign.Storable.$fStorableWord64_$calignment
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CFsBlkCnt -> Int :: *)))
      (Foreign.Storable.$fStorableWord64_$calignment
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CFsBlkCnt -> Int :: *)))
      (GHC.Storable.readWord64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CFsBlkCnt))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CFsBlkCnt[0]))
               :: (Ptr Word64
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                  ~R# (Ptr CFsBlkCnt -> Int -> IO CFsBlkCnt :: *)))
      (GHC.Storable.writeWord64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CFsBlkCnt))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word64
                   -> Int
                   -> Word64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CFsBlkCnt -> Int -> CFsBlkCnt -> IO () :: *)))
      (Foreign.Storable.$fStorableWord18
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CFsBlkCnt[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CFsBlkCnt :: *)))
      (Foreign.Storable.$fStorableWord17
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Word64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CFsBlkCnt -> IO () :: *)))
      (Foreign.Storable.$fStorableWord15
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CFsBlkCnt))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CFsBlkCnt[0]))
               :: (Ptr Word64
                   -> State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                  ~R# (Ptr CFsBlkCnt -> IO CFsBlkCnt :: *)))
      (Foreign.Storable.$fStorableWord14
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CFsBlkCnt))_R
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word64
                   -> Word64 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CFsBlkCnt -> CFsBlkCnt -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCFsBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CFsBlkCnt
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CFsBlkCnt
                       GHC.Word.$fEnumWord64_$csucc
                       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                               :: (Word64 -> Word64 :: *) ~R# (CFsBlkCnt -> CFsBlkCnt :: *))
                       GHC.Word.$fEnumWord64_$cpred
                       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                               :: (Word64 -> Word64 :: *) ~R# (CFsBlkCnt -> CFsBlkCnt :: *))
                       GHC.Word.$fEnumWord64_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                               :: (Int -> Word64 :: *) ~R# (Int -> CFsBlkCnt :: *))
                       GHC.Word.$fEnumWord64_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Int>_R
                               :: (Word64 -> Int :: *) ~R# (CFsBlkCnt -> Int :: *))
                       GHC.Word.$fEnumWord64_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                               ->_R ([Sym (System.Posix.Types.N:CFsBlkCnt[0])])_R
                               :: (Word64 -> [Word64] :: *) ~R# (CFsBlkCnt -> [CFsBlkCnt] :: *))
                       GHC.Word.$fEnumWord64_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                               ->_R ([Sym (System.Posix.Types.N:CFsBlkCnt[0])])_R
                               :: (Word64 -> Word64 -> [Word64] :: *)
                                  ~R# (CFsBlkCnt -> CFsBlkCnt -> [CFsBlkCnt] :: *))
                       GHC.Word.$fEnumWord64_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                               ->_R ([Sym (System.Posix.Types.N:CFsBlkCnt[0])])_R
                               :: (Word64 -> Word64 -> [Word64] :: *)
                                  ~R# (CFsBlkCnt -> CFsBlkCnt -> [CFsBlkCnt] :: *))
                       GHC.Word.$fEnumWord64_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                               ->_R ([Sym (System.Posix.Types.N:CFsBlkCnt[0])])_R
                               :: (Word64 -> Word64 -> Word64 -> [Word64] :: *)
                                  ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt -> [CFsBlkCnt] :: *))]
System.Posix.Types.$fEnumCFsBlkCnt
  = GHC.Enum.C:Enum
      @ CFsBlkCnt
      (GHC.Word.$fEnumWord64_$csucc
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Word64 :: *) ~R# (CFsBlkCnt -> CFsBlkCnt :: *)))
      (GHC.Word.$fEnumWord64_$cpred
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Word64 :: *) ~R# (CFsBlkCnt -> CFsBlkCnt :: *)))
      (GHC.Word.$fEnumWord64_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Int -> Word64 :: *) ~R# (Int -> CFsBlkCnt :: *)))
      (GHC.Word.$fEnumWord64_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CFsBlkCnt -> Int :: *)))
      (GHC.Word.$fEnumWord64_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R ([Sym (System.Posix.Types.N:CFsBlkCnt[0])])_R
               :: (Word64 -> [Word64] :: *) ~R# (CFsBlkCnt -> [CFsBlkCnt] :: *)))
      (GHC.Word.$fEnumWord64_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R ([Sym (System.Posix.Types.N:CFsBlkCnt[0])])_R
               :: (Word64 -> Word64 -> [Word64] :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> [CFsBlkCnt] :: *)))
      (GHC.Word.$fEnumWord64_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R ([Sym (System.Posix.Types.N:CFsBlkCnt[0])])_R
               :: (Word64 -> Word64 -> [Word64] :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> [CFsBlkCnt] :: *)))
      (GHC.Word.$fEnumWord64_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R ([Sym (System.Posix.Types.N:CFsBlkCnt[0])])_R
               :: (Word64 -> Word64 -> Word64 -> [Word64] :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt -> [CFsBlkCnt] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCFsBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CFsBlkCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CFsBlkCnt
                     GHC.Word.$fNumWord64_$c+
                     `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                             ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                             ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                             :: (Word64 -> Word64 -> Word64 :: *)
                                ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *))
                     GHC.Word.$fNumWord64_$c-
                     `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                             ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                             ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                             :: (Word64 -> Word64 -> Word64 :: *)
                                ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *))
                     GHC.Word.$fNumWord64_$c*
                     `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                             ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                             ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                             :: (Word64 -> Word64 -> Word64 :: *)
                                ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *))
                     GHC.Word.$fNumWord64_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                             ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                             :: (Word64 -> Word64 :: *) ~R# (CFsBlkCnt -> CFsBlkCnt :: *))
                     GHC.Word.$fNumWord64_$cabs
                     `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                             ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                             :: (Word64 -> Word64 :: *) ~R# (CFsBlkCnt -> CFsBlkCnt :: *))
                     GHC.Word.$fNumWord64_$csignum
                     `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                             ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                             :: (Word64 -> Word64 :: *) ~R# (CFsBlkCnt -> CFsBlkCnt :: *))
                     GHC.Word.$fNumWord64_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                             :: (Integer -> Word64 :: *) ~R# (Integer -> CFsBlkCnt :: *))]
System.Posix.Types.$fNumCFsBlkCnt
  = GHC.Num.C:Num
      @ CFsBlkCnt
      (GHC.Word.$fNumWord64_$c+
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *)))
      (GHC.Word.$fNumWord64_$c-
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *)))
      (GHC.Word.$fNumWord64_$c*
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *)))
      (GHC.Word.$fNumWord64_$cnegate
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Word64 :: *) ~R# (CFsBlkCnt -> CFsBlkCnt :: *)))
      (GHC.Word.$fNumWord64_$cabs
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Word64 :: *) ~R# (CFsBlkCnt -> CFsBlkCnt :: *)))
      (GHC.Word.$fNumWord64_$csignum
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Word64 :: *) ~R# (CFsBlkCnt -> CFsBlkCnt :: *)))
      (GHC.Word.$fNumWord64_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Integer -> Word64 :: *) ~R# (Integer -> CFsBlkCnt :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCFsBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CFsBlkCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CFsBlkCnt
                        GHC.Word.eqWord64
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R <Bool>_R
                                :: (Word64 -> Word64 -> Bool :: *)
                                   ~R# (CFsBlkCnt -> CFsBlkCnt -> Bool :: *))
                        GHC.Word.neWord64
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R <Bool>_R
                                :: (Word64 -> Word64 -> Bool :: *)
                                   ~R# (CFsBlkCnt -> CFsBlkCnt -> Bool :: *))]
System.Posix.Types.$fEqCFsBlkCnt
  = GHC.Classes.C:Eq
      @ CFsBlkCnt
      (GHC.Word.eqWord64
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> Bool :: *)))
      (GHC.Word.neWord64
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCFsBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CFsBlkCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CFsBlkCnt
                         System.Posix.Types.$fEqCFsBlkCnt
                         GHC.Word.$fOrdWord64_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                 ->_R <Ordering>_R
                                 :: (Word64 -> Word64 -> Ordering :: *)
                                    ~R# (CFsBlkCnt -> CFsBlkCnt -> Ordering :: *))
                         GHC.Word.ltWord64
                         `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *)
                                    ~R# (CFsBlkCnt -> CFsBlkCnt -> Bool :: *))
                         GHC.Word.leWord64
                         `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *)
                                    ~R# (CFsBlkCnt -> CFsBlkCnt -> Bool :: *))
                         GHC.Word.gtWord64
                         `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *)
                                    ~R# (CFsBlkCnt -> CFsBlkCnt -> Bool :: *))
                         GHC.Word.geWord64
                         `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *)
                                    ~R# (CFsBlkCnt -> CFsBlkCnt -> Bool :: *))
                         GHC.Word.$fOrdWord64_$cmax
                         `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                 :: (Word64 -> Word64 -> Word64 :: *)
                                    ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *))
                         GHC.Word.$fOrdWord64_$cmin
                         `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                 :: (Word64 -> Word64 -> Word64 :: *)
                                    ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *))]
System.Posix.Types.$fOrdCFsBlkCnt
  = GHC.Classes.C:Ord
      @ CFsBlkCnt
      System.Posix.Types.$fEqCFsBlkCnt
      (GHC.Word.$fOrdWord64_$ccompare
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Ordering>_R
               :: (Word64 -> Word64 -> Ordering :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> Ordering :: *)))
      (GHC.Word.ltWord64
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> Bool :: *)))
      (GHC.Word.leWord64
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> Bool :: *)))
      (GHC.Word.gtWord64
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> Bool :: *)))
      (GHC.Word.geWord64
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> Bool :: *)))
      (GHC.Word.$fOrdWord64_$cmax
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *)))
      (GHC.Word.$fOrdWord64_$cmin
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCFsBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CFsBlkCnt
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CFsBlkCnt
                       System.Posix.Types.$fNumCFsBlkCnt
                       System.Posix.Types.$fOrdCFsBlkCnt
                       GHC.Word.$fRealWord64_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                               ->_R <Ratio Integer>_R
                               :: (Word64 -> Ratio Integer :: *)
                                  ~R# (CFsBlkCnt -> Ratio Integer :: *))]
System.Posix.Types.$fRealCFsBlkCnt
  = GHC.Real.C:Real
      @ CFsBlkCnt
      System.Posix.Types.$fNumCFsBlkCnt
      System.Posix.Types.$fOrdCFsBlkCnt
      (GHC.Word.$fRealWord64_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Ratio Integer>_R
               :: (Word64 -> Ratio Integer :: *)
                  ~R# (CFsBlkCnt -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 58, joins: 0/0}
System.Posix.Types.$fIntegralCFsBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral CFsBlkCnt
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: CFsBlkCnt
                           System.Posix.Types.$fRealCFsBlkCnt
                           System.Posix.Types.$fEnumCFsBlkCnt
                           GHC.Word.$fIntegralWord64_$cdiv
                           `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *))
                           GHC.Word.$fIntegralWord64_$cmod
                           `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *))
                           GHC.Word.$fIntegralWord64_$cdiv
                           `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *))
                           GHC.Word.$fIntegralWord64_$cmod
                           `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *))
                           GHC.Word.$fIntegralWord64_$cquotRem
                           `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CFsBlkCnt[0]))
                                           (Sym (System.Posix.Types.N:CFsBlkCnt[0])))_R
                                   :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                                      ~R# (CFsBlkCnt -> CFsBlkCnt -> (CFsBlkCnt, CFsBlkCnt) :: *))
                           GHC.Word.$fIntegralWord64_$cdivMod
                           `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CFsBlkCnt[0]))
                                           (Sym (System.Posix.Types.N:CFsBlkCnt[0])))_R
                                   :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                                      ~R# (CFsBlkCnt -> CFsBlkCnt -> (CFsBlkCnt, CFsBlkCnt) :: *))
                           GHC.Word.$fIntegralWord64_$ctoInteger
                           `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Integer>_R
                                   :: (Word64 -> Integer :: *) ~R# (CFsBlkCnt -> Integer :: *))]
System.Posix.Types.$fIntegralCFsBlkCnt
  = GHC.Real.C:Integral
      @ CFsBlkCnt
      System.Posix.Types.$fRealCFsBlkCnt
      System.Posix.Types.$fEnumCFsBlkCnt
      (GHC.Word.$fIntegralWord64_$cdiv
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *)))
      (GHC.Word.$fIntegralWord64_$cmod
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *)))
      (GHC.Word.$fIntegralWord64_$cdiv
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *)))
      (GHC.Word.$fIntegralWord64_$cmod
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *)))
      (GHC.Word.$fIntegralWord64_$cquotRem
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CFsBlkCnt[0]))
                       (Sym (System.Posix.Types.N:CFsBlkCnt[0])))_R
               :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> (CFsBlkCnt, CFsBlkCnt) :: *)))
      (GHC.Word.$fIntegralWord64_$cdivMod
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CFsBlkCnt[0]))
                       (Sym (System.Posix.Types.N:CFsBlkCnt[0])))_R
               :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> (CFsBlkCnt, CFsBlkCnt) :: *)))
      (GHC.Word.$fIntegralWord64_$ctoInteger
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Integer>_R
               :: (Word64 -> Integer :: *) ~R# (CFsBlkCnt -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
System.Posix.Types.$fBitsCFsBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits CFsBlkCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: CFsBlkCnt
                        System.Posix.Types.$fEqCFsBlkCnt
                        GHC.Word.$fBitsWord64_$c.&.
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                :: (Word64 -> Word64 -> Word64 :: *)
                                   ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *))
                        GHC.Word.$fBitsWord64_$c.|.
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                :: (Word64 -> Word64 -> Word64 :: *)
                                   ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *))
                        GHC.Word.$fBitsWord64_$cxor
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                :: (Word64 -> Word64 -> Word64 :: *)
                                   ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *))
                        GHC.Word.$fBitsWord64_$ccomplement
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                :: (Word64 -> Word64 :: *) ~R# (CFsBlkCnt -> CFsBlkCnt :: *))
                        GHC.Word.$fBitsWord64_$cshift
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *))
                        GHC.Word.$fBitsWord64_$crotate
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *))
                        GHC.Word.$fBitsWord7
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                :: (Word64 :: *) ~R# (CFsBlkCnt :: *))
                        GHC.Word.$fBitsWord64_$cbit
                        `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                :: (Int -> Word64 :: *) ~R# (Int -> CFsBlkCnt :: *))
                        GHC.Word.$fBitsWord64_$csetBit
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *))
                        GHC.Word.$fBitsWord64_$cclearBit
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *))
                        GHC.Word.$fBitsWord64_$ccomplementBit
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *))
                        GHC.Word.$fBitsWord64_$ctestBit
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R <Int -> Bool>_R
                                :: (Word64 -> Int -> Bool :: *)
                                   ~R# (CFsBlkCnt -> Int -> Bool :: *))
                        GHC.Word.$fBitsWord64_$cbitSizeMaybe
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Maybe Int>_R
                                :: (Word64 -> Maybe Int :: *) ~R# (CFsBlkCnt -> Maybe Int :: *))
                        GHC.Word.$fBitsWord64_$cfiniteBitSize
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Int>_R
                                :: (Word64 -> Int :: *) ~R# (CFsBlkCnt -> Int :: *))
                        GHC.Word.$fBitsWord64_$cisSigned
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Bool>_R
                                :: (Word64 -> Bool :: *) ~R# (CFsBlkCnt -> Bool :: *))
                        GHC.Word.$fBitsWord64_$cshiftL
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *))
                        GHC.Word.$fBitsWord64_$cunsafeShiftL
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *))
                        GHC.Word.$fBitsWord64_$cshiftR
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *))
                        GHC.Word.$fBitsWord64_$cunsafeShiftR
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *))
                        GHC.Word.$fBitsWord64_$crotateL
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *))
                        GHC.Word.$fBitsWord64_$crotateR
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *))
                        GHC.Word.$fBitsWord64_$cpopCount
                        `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Int>_R
                                :: (Word64 -> Int :: *) ~R# (CFsBlkCnt -> Int :: *))]
System.Posix.Types.$fBitsCFsBlkCnt
  = Data.Bits.C:Bits
      @ CFsBlkCnt
      System.Posix.Types.$fEqCFsBlkCnt
      (GHC.Word.$fBitsWord64_$c.&.
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *)))
      (GHC.Word.$fBitsWord64_$c.|.
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *)))
      (GHC.Word.$fBitsWord64_$cxor
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CFsBlkCnt -> CFsBlkCnt -> CFsBlkCnt :: *)))
      (GHC.Word.$fBitsWord64_$ccomplement
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Word64 :: *) ~R# (CFsBlkCnt -> CFsBlkCnt :: *)))
      (GHC.Word.$fBitsWord64_$cshift
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *)))
      (GHC.Word.$fBitsWord64_$crotate
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *)))
      (GHC.Word.$fBitsWord7
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 :: *) ~R# (CFsBlkCnt :: *)))
      (GHC.Word.$fBitsWord64_$cbit
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Int -> Word64 :: *) ~R# (Int -> CFsBlkCnt :: *)))
      (GHC.Word.$fBitsWord64_$csetBit
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *)))
      (GHC.Word.$fBitsWord64_$cclearBit
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *)))
      (GHC.Word.$fBitsWord64_$ccomplementBit
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *)))
      (GHC.Word.$fBitsWord64_$ctestBit
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Int -> Bool>_R
               :: (Word64 -> Int -> Bool :: *)
                  ~R# (CFsBlkCnt -> Int -> Bool :: *)))
      (GHC.Word.$fBitsWord64_$cbitSizeMaybe
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Maybe Int>_R
               :: (Word64 -> Maybe Int :: *) ~R# (CFsBlkCnt -> Maybe Int :: *)))
      (GHC.Word.$fBitsWord64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CFsBlkCnt -> Int :: *)))
      (GHC.Word.$fBitsWord64_$cisSigned
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Bool>_R
               :: (Word64 -> Bool :: *) ~R# (CFsBlkCnt -> Bool :: *)))
      (GHC.Word.$fBitsWord64_$cshiftL
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *)))
      (GHC.Word.$fBitsWord64_$cunsafeShiftL
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *)))
      (GHC.Word.$fBitsWord64_$cshiftR
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *)))
      (GHC.Word.$fBitsWord64_$cunsafeShiftR
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *)))
      (GHC.Word.$fBitsWord64_$crotateL
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *)))
      (GHC.Word.$fBitsWord64_$crotateR
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CFsBlkCnt[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CFsBlkCnt -> Int -> CFsBlkCnt :: *)))
      (GHC.Word.$fBitsWord64_$cpopCount
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CFsBlkCnt -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
System.Posix.Types.$fFiniteBitsCFsBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits CFsBlkCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: CFsBlkCnt
                              System.Posix.Types.$fBitsCFsBlkCnt
                              GHC.Word.$fBitsWord64_$cfiniteBitSize
                              `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Int>_R
                                      :: (Word64 -> Int :: *) ~R# (CFsBlkCnt -> Int :: *))
                              GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                              `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Int>_R
                                      :: (Word64 -> Int :: *) ~R# (CFsBlkCnt -> Int :: *))
                              GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                              `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Int>_R
                                      :: (Word64 -> Int :: *) ~R# (CFsBlkCnt -> Int :: *))]
System.Posix.Types.$fFiniteBitsCFsBlkCnt
  = Data.Bits.C:FiniteBits
      @ CFsBlkCnt
      System.Posix.Types.$fBitsCFsBlkCnt
      (GHC.Word.$fBitsWord64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CFsBlkCnt -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CFsBlkCnt -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
       `cast` (Sym (System.Posix.Types.N:CFsBlkCnt[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CFsBlkCnt -> Int :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCClockId [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CClockId
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CClockId
                       GHC.Int.$fShowInt32_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CClockId[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Int32 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CClockId -> [Char] -> [Char] :: *))
                       GHC.Int.$fShowInt32_$cshow
                       `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <[Char]>_R
                               :: (Int32 -> [Char] :: *) ~R# (CClockId -> [Char] :: *))
                       GHC.Int.$fShowInt32_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CClockId[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Int32] -> [Char] -> [Char] :: *)
                                  ~R# ([CClockId] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCClockId
  = GHC.Show.C:Show
      @ CClockId
      (GHC.Int.$fShowInt32_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Int32 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CClockId -> [Char] -> [Char] :: *)))
      (GHC.Int.$fShowInt32_$cshow
       `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <[Char]>_R
               :: (Int32 -> [Char] :: *) ~R# (CClockId -> [Char] :: *)))
      (GHC.Int.$fShowInt32_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CClockId[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Int32] -> [Char] -> [Char] :: *)
                  ~R# ([CClockId] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCClockId [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CClockId
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CClockId
                       GHC.Int.$fReadInt32_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,)
                                         (Sym (System.Posix.Types.N:CClockId[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Int32, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CClockId, [Char])] :: *))
                       GHC.Int.$fReadInt32_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CClockId[0])])_R
                                         <[Char]>_R)_R])_R
                               :: ([Char] -> [([Int32], [Char])] :: *)
                                  ~R# ([Char] -> [([CClockId], [Char])] :: *))
                       GHC.Int.$fReadInt6
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Int32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                     (System.Posix.Types.N:CClockId[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Int32 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CClockId :: *))
                       GHC.Int.$fReadInt4
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Int32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                       ([System.Posix.Types.N:CClockId[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Int32] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CClockId] :: *))]
System.Posix.Types.$fReadCClockId
  = GHC.Read.C:Read
      @ CClockId
      (GHC.Int.$fReadInt32_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,)
                         (Sym (System.Posix.Types.N:CClockId[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Int32, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CClockId, [Char])] :: *)))
      (GHC.Int.$fReadInt32_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CClockId[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Int32], [Char])] :: *)
                  ~R# ([Char] -> [([CClockId], [Char])] :: *)))
      (GHC.Int.$fReadInt6
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Int32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     (System.Posix.Types.N:CClockId[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Int32 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CClockId :: *)))
      (GHC.Int.$fReadInt4
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Int32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                       ([System.Posix.Types.N:CClockId[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Int32] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CClockId] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
System.Posix.Types.$fBoundedCClockId [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded CClockId
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: CClockId
                          GHC.Int.$fBoundedInt32_$cminBound
                          `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                  :: (Int32 :: *) ~R# (CClockId :: *))
                          GHC.Int.$fBoundedInt32_$cmaxBound
                          `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                  :: (Int32 :: *) ~R# (CClockId :: *))]
System.Posix.Types.$fBoundedCClockId
  = GHC.Enum.C:Bounded
      @ CClockId
      (GHC.Int.$fBoundedInt32_$cminBound
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 :: *) ~R# (CClockId :: *)))
      (GHC.Int.$fBoundedInt32_$cmaxBound
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 :: *) ~R# (CClockId :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCClockId [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CClockId
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CClockId
                                   Foreign.Storable.$fStorableInt32_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Int>_R
                                           :: (Int32 -> Int :: *) ~R# (CClockId -> Int :: *))
                                   Foreign.Storable.$fStorableInt32_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Int>_R
                                           :: (Int32 -> Int :: *) ~R# (CClockId -> Int :: *))
                                   GHC.Storable.readInt32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CClockId))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CClockId[0]))
                                           :: (Ptr Int32
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int32 #) :: *)
                                              ~R# (Ptr CClockId -> Int -> IO CClockId :: *))
                                   GHC.Storable.writeInt32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CClockId))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CClockId[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Int32
                                               -> Int
                                               -> Int32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CClockId -> Int -> CClockId -> IO () :: *))
                                   Foreign.Storable.$fStorableInt14
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CClockId[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int32 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CClockId :: *))
                                   Foreign.Storable.$fStorableInt13
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CClockId[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Int32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b.
                                                   Ptr b -> Int -> CClockId -> IO () :: *))
                                   Foreign.Storable.$fStorableInt12
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CClockId))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CClockId[0]))
                                           :: (Ptr Int32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int32 #) :: *)
                                              ~R# (Ptr CClockId -> IO CClockId :: *))
                                   Foreign.Storable.$fStorableInt11
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CClockId))_R
                                           ->_R Sym (System.Posix.Types.N:CClockId[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Int32
                                               -> Int32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CClockId -> CClockId -> IO () :: *))]
System.Posix.Types.$fStorableCClockId
  = Foreign.Storable.C:Storable
      @ CClockId
      (Foreign.Storable.$fStorableInt32_$calignment
       `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CClockId -> Int :: *)))
      (Foreign.Storable.$fStorableInt32_$calignment
       `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CClockId -> Int :: *)))
      (GHC.Storable.readInt32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CClockId))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CClockId[0]))
               :: (Ptr Int32
                   -> Int -> State# RealWorld -> (# State# RealWorld, Int32 #) :: *)
                  ~R# (Ptr CClockId -> Int -> IO CClockId :: *)))
      (GHC.Storable.writeInt32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CClockId))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Int32
                   -> Int
                   -> Int32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CClockId -> Int -> CClockId -> IO () :: *)))
      (Foreign.Storable.$fStorableInt14
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CClockId[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Int32 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CClockId :: *)))
      (Foreign.Storable.$fStorableInt13
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Int32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CClockId -> IO () :: *)))
      (Foreign.Storable.$fStorableInt12
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CClockId))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CClockId[0]))
               :: (Ptr Int32
                   -> State# RealWorld -> (# State# RealWorld, Int32 #) :: *)
                  ~R# (Ptr CClockId -> IO CClockId :: *)))
      (Foreign.Storable.$fStorableInt11
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CClockId))_R
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Int32
                   -> Int32 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CClockId -> CClockId -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCClockId [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CClockId
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CClockId
                       GHC.Int.$fEnumInt32_$csucc
                       `cast` (Sym (System.Posix.Types.N:CClockId[0])
                               ->_R Sym (System.Posix.Types.N:CClockId[0])
                               :: (Int32 -> Int32 :: *) ~R# (CClockId -> CClockId :: *))
                       GHC.Int.$fEnumInt32_$cpred
                       `cast` (Sym (System.Posix.Types.N:CClockId[0])
                               ->_R Sym (System.Posix.Types.N:CClockId[0])
                               :: (Int32 -> Int32 :: *) ~R# (CClockId -> CClockId :: *))
                       GHC.Int.$fEnumInt32_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CClockId[0])
                               :: (Int -> Int32 :: *) ~R# (Int -> CClockId :: *))
                       GHC.Int.$fEnumInt32_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Int>_R
                               :: (Int32 -> Int :: *) ~R# (CClockId -> Int :: *))
                       GHC.Int.$fEnumInt32_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CClockId[0])
                               ->_R ([Sym (System.Posix.Types.N:CClockId[0])])_R
                               :: (Int32 -> [Int32] :: *) ~R# (CClockId -> [CClockId] :: *))
                       GHC.Int.$fEnumInt32_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CClockId[0])
                               ->_R Sym (System.Posix.Types.N:CClockId[0])
                               ->_R ([Sym (System.Posix.Types.N:CClockId[0])])_R
                               :: (Int32 -> Int32 -> [Int32] :: *)
                                  ~R# (CClockId -> CClockId -> [CClockId] :: *))
                       GHC.Int.$fEnumInt32_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CClockId[0])
                               ->_R Sym (System.Posix.Types.N:CClockId[0])
                               ->_R ([Sym (System.Posix.Types.N:CClockId[0])])_R
                               :: (Int32 -> Int32 -> [Int32] :: *)
                                  ~R# (CClockId -> CClockId -> [CClockId] :: *))
                       GHC.Int.$fEnumInt32_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CClockId[0])
                               ->_R Sym (System.Posix.Types.N:CClockId[0])
                               ->_R Sym (System.Posix.Types.N:CClockId[0])
                               ->_R ([Sym (System.Posix.Types.N:CClockId[0])])_R
                               :: (Int32 -> Int32 -> Int32 -> [Int32] :: *)
                                  ~R# (CClockId -> CClockId -> CClockId -> [CClockId] :: *))]
System.Posix.Types.$fEnumCClockId
  = GHC.Enum.C:Enum
      @ CClockId
      (GHC.Int.$fEnumInt32_$csucc
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int32 :: *) ~R# (CClockId -> CClockId :: *)))
      (GHC.Int.$fEnumInt32_$cpred
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int32 :: *) ~R# (CClockId -> CClockId :: *)))
      (GHC.Int.$fEnumInt32_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int -> Int32 :: *) ~R# (Int -> CClockId :: *)))
      (GHC.Int.$fEnumInt32_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CClockId -> Int :: *)))
      (GHC.Int.$fEnumInt32_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R ([Sym (System.Posix.Types.N:CClockId[0])])_R
               :: (Int32 -> [Int32] :: *) ~R# (CClockId -> [CClockId] :: *)))
      (GHC.Int.$fEnumInt32_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R ([Sym (System.Posix.Types.N:CClockId[0])])_R
               :: (Int32 -> Int32 -> [Int32] :: *)
                  ~R# (CClockId -> CClockId -> [CClockId] :: *)))
      (GHC.Int.$fEnumInt32_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R ([Sym (System.Posix.Types.N:CClockId[0])])_R
               :: (Int32 -> Int32 -> [Int32] :: *)
                  ~R# (CClockId -> CClockId -> [CClockId] :: *)))
      (GHC.Int.$fEnumInt32_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R ([Sym (System.Posix.Types.N:CClockId[0])])_R
               :: (Int32 -> Int32 -> Int32 -> [Int32] :: *)
                  ~R# (CClockId -> CClockId -> CClockId -> [CClockId] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCClockId [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CClockId
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CClockId
                     GHC.Int.$fNumInt32_$c+
                     `cast` (Sym (System.Posix.Types.N:CClockId[0])
                             ->_R Sym (System.Posix.Types.N:CClockId[0])
                             ->_R Sym (System.Posix.Types.N:CClockId[0])
                             :: (Int32 -> Int32 -> Int32 :: *)
                                ~R# (CClockId -> CClockId -> CClockId :: *))
                     GHC.Int.$fNumInt32_$c-
                     `cast` (Sym (System.Posix.Types.N:CClockId[0])
                             ->_R Sym (System.Posix.Types.N:CClockId[0])
                             ->_R Sym (System.Posix.Types.N:CClockId[0])
                             :: (Int32 -> Int32 -> Int32 :: *)
                                ~R# (CClockId -> CClockId -> CClockId :: *))
                     GHC.Int.$fNumInt32_$c*
                     `cast` (Sym (System.Posix.Types.N:CClockId[0])
                             ->_R Sym (System.Posix.Types.N:CClockId[0])
                             ->_R Sym (System.Posix.Types.N:CClockId[0])
                             :: (Int32 -> Int32 -> Int32 :: *)
                                ~R# (CClockId -> CClockId -> CClockId :: *))
                     GHC.Int.$fNumInt32_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CClockId[0])
                             ->_R Sym (System.Posix.Types.N:CClockId[0])
                             :: (Int32 -> Int32 :: *) ~R# (CClockId -> CClockId :: *))
                     GHC.Int.$fNumInt32_$cabs
                     `cast` (Sym (System.Posix.Types.N:CClockId[0])
                             ->_R Sym (System.Posix.Types.N:CClockId[0])
                             :: (Int32 -> Int32 :: *) ~R# (CClockId -> CClockId :: *))
                     GHC.Int.$fNumInt32_$csignum
                     `cast` (Sym (System.Posix.Types.N:CClockId[0])
                             ->_R Sym (System.Posix.Types.N:CClockId[0])
                             :: (Int32 -> Int32 :: *) ~R# (CClockId -> CClockId :: *))
                     GHC.Int.$fNumInt32_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CClockId[0])
                             :: (Integer -> Int32 :: *) ~R# (Integer -> CClockId :: *))]
System.Posix.Types.$fNumCClockId
  = GHC.Num.C:Num
      @ CClockId
      (GHC.Int.$fNumInt32_$c+
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int32 -> Int32 :: *)
                  ~R# (CClockId -> CClockId -> CClockId :: *)))
      (GHC.Int.$fNumInt32_$c-
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int32 -> Int32 :: *)
                  ~R# (CClockId -> CClockId -> CClockId :: *)))
      (GHC.Int.$fNumInt32_$c*
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int32 -> Int32 :: *)
                  ~R# (CClockId -> CClockId -> CClockId :: *)))
      (GHC.Int.$fNumInt32_$cnegate
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int32 :: *) ~R# (CClockId -> CClockId :: *)))
      (GHC.Int.$fNumInt32_$cabs
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int32 :: *) ~R# (CClockId -> CClockId :: *)))
      (GHC.Int.$fNumInt32_$csignum
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int32 :: *) ~R# (CClockId -> CClockId :: *)))
      (GHC.Int.$fNumInt32_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Integer -> Int32 :: *) ~R# (Integer -> CClockId :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCClockId [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CClockId
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CClockId
                        GHC.Int.eqInt32
                        `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                ->_R <Bool>_R
                                :: (Int32 -> Int32 -> Bool :: *)
                                   ~R# (CClockId -> CClockId -> Bool :: *))
                        GHC.Int.neInt32
                        `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                ->_R <Bool>_R
                                :: (Int32 -> Int32 -> Bool :: *)
                                   ~R# (CClockId -> CClockId -> Bool :: *))]
System.Posix.Types.$fEqCClockId
  = GHC.Classes.C:Eq
      @ CClockId
      (GHC.Int.eqInt32
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *)
                  ~R# (CClockId -> CClockId -> Bool :: *)))
      (GHC.Int.neInt32
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *)
                  ~R# (CClockId -> CClockId -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCClockId [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CClockId
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CClockId
                         System.Posix.Types.$fEqCClockId
                         GHC.Int.$fOrdInt32_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                 ->_R Sym (System.Posix.Types.N:CClockId[0])
                                 ->_R <Ordering>_R
                                 :: (Int32 -> Int32 -> Ordering :: *)
                                    ~R# (CClockId -> CClockId -> Ordering :: *))
                         GHC.Int.ltInt32
                         `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                 ->_R Sym (System.Posix.Types.N:CClockId[0])
                                 ->_R <Bool>_R
                                 :: (Int32 -> Int32 -> Bool :: *)
                                    ~R# (CClockId -> CClockId -> Bool :: *))
                         GHC.Int.leInt32
                         `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                 ->_R Sym (System.Posix.Types.N:CClockId[0])
                                 ->_R <Bool>_R
                                 :: (Int32 -> Int32 -> Bool :: *)
                                    ~R# (CClockId -> CClockId -> Bool :: *))
                         GHC.Int.gtInt32
                         `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                 ->_R Sym (System.Posix.Types.N:CClockId[0])
                                 ->_R <Bool>_R
                                 :: (Int32 -> Int32 -> Bool :: *)
                                    ~R# (CClockId -> CClockId -> Bool :: *))
                         GHC.Int.geInt32
                         `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                 ->_R Sym (System.Posix.Types.N:CClockId[0])
                                 ->_R <Bool>_R
                                 :: (Int32 -> Int32 -> Bool :: *)
                                    ~R# (CClockId -> CClockId -> Bool :: *))
                         GHC.Int.$fOrdInt32_$cmax
                         `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                 ->_R Sym (System.Posix.Types.N:CClockId[0])
                                 ->_R Sym (System.Posix.Types.N:CClockId[0])
                                 :: (Int32 -> Int32 -> Int32 :: *)
                                    ~R# (CClockId -> CClockId -> CClockId :: *))
                         GHC.Int.$fOrdInt32_$cmin
                         `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                 ->_R Sym (System.Posix.Types.N:CClockId[0])
                                 ->_R Sym (System.Posix.Types.N:CClockId[0])
                                 :: (Int32 -> Int32 -> Int32 :: *)
                                    ~R# (CClockId -> CClockId -> CClockId :: *))]
System.Posix.Types.$fOrdCClockId
  = GHC.Classes.C:Ord
      @ CClockId
      System.Posix.Types.$fEqCClockId
      (GHC.Int.$fOrdInt32_$ccompare
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Ordering>_R
               :: (Int32 -> Int32 -> Ordering :: *)
                  ~R# (CClockId -> CClockId -> Ordering :: *)))
      (GHC.Int.ltInt32
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *)
                  ~R# (CClockId -> CClockId -> Bool :: *)))
      (GHC.Int.leInt32
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *)
                  ~R# (CClockId -> CClockId -> Bool :: *)))
      (GHC.Int.gtInt32
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *)
                  ~R# (CClockId -> CClockId -> Bool :: *)))
      (GHC.Int.geInt32
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *)
                  ~R# (CClockId -> CClockId -> Bool :: *)))
      (GHC.Int.$fOrdInt32_$cmax
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int32 -> Int32 :: *)
                  ~R# (CClockId -> CClockId -> CClockId :: *)))
      (GHC.Int.$fOrdInt32_$cmin
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int32 -> Int32 :: *)
                  ~R# (CClockId -> CClockId -> CClockId :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCClockId [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CClockId
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CClockId
                       System.Posix.Types.$fNumCClockId
                       System.Posix.Types.$fOrdCClockId
                       GHC.Int.$fRealInt32_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CClockId[0])
                               ->_R <Ratio Integer>_R
                               :: (Int32 -> Ratio Integer :: *)
                                  ~R# (CClockId -> Ratio Integer :: *))]
System.Posix.Types.$fRealCClockId
  = GHC.Real.C:Real
      @ CClockId
      System.Posix.Types.$fNumCClockId
      System.Posix.Types.$fOrdCClockId
      (GHC.Int.$fRealInt32_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Ratio Integer>_R
               :: (Int32 -> Ratio Integer :: *)
                  ~R# (CClockId -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 58, joins: 0/0}
System.Posix.Types.$fIntegralCClockId [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral CClockId
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: CClockId
                           System.Posix.Types.$fRealCClockId
                           System.Posix.Types.$fEnumCClockId
                           GHC.Int.$fIntegralInt32_$cquot
                           `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                   ->_R Sym (System.Posix.Types.N:CClockId[0])
                                   ->_R Sym (System.Posix.Types.N:CClockId[0])
                                   :: (Int32 -> Int32 -> Int32 :: *)
                                      ~R# (CClockId -> CClockId -> CClockId :: *))
                           GHC.Int.$fIntegralInt32_$crem
                           `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                   ->_R Sym (System.Posix.Types.N:CClockId[0])
                                   ->_R Sym (System.Posix.Types.N:CClockId[0])
                                   :: (Int32 -> Int32 -> Int32 :: *)
                                      ~R# (CClockId -> CClockId -> CClockId :: *))
                           GHC.Int.$fIntegralInt32_$cdiv
                           `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                   ->_R Sym (System.Posix.Types.N:CClockId[0])
                                   ->_R Sym (System.Posix.Types.N:CClockId[0])
                                   :: (Int32 -> Int32 -> Int32 :: *)
                                      ~R# (CClockId -> CClockId -> CClockId :: *))
                           GHC.Int.$fIntegralInt32_$cmod
                           `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                   ->_R Sym (System.Posix.Types.N:CClockId[0])
                                   ->_R Sym (System.Posix.Types.N:CClockId[0])
                                   :: (Int32 -> Int32 -> Int32 :: *)
                                      ~R# (CClockId -> CClockId -> CClockId :: *))
                           GHC.Int.$fIntegralInt32_$cquotRem
                           `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                   ->_R Sym (System.Posix.Types.N:CClockId[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CClockId[0]))
                                           (Sym (System.Posix.Types.N:CClockId[0])))_R
                                   :: (Int32 -> Int32 -> (Int32, Int32) :: *)
                                      ~R# (CClockId -> CClockId -> (CClockId, CClockId) :: *))
                           GHC.Int.$fIntegralInt32_$cdivMod
                           `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                   ->_R Sym (System.Posix.Types.N:CClockId[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CClockId[0]))
                                           (Sym (System.Posix.Types.N:CClockId[0])))_R
                                   :: (Int32 -> Int32 -> (Int32, Int32) :: *)
                                      ~R# (CClockId -> CClockId -> (CClockId, CClockId) :: *))
                           GHC.Int.$fIntegralInt32_$ctoInteger
                           `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Integer>_R
                                   :: (Int32 -> Integer :: *) ~R# (CClockId -> Integer :: *))]
System.Posix.Types.$fIntegralCClockId
  = GHC.Real.C:Integral
      @ CClockId
      System.Posix.Types.$fRealCClockId
      System.Posix.Types.$fEnumCClockId
      (GHC.Int.$fIntegralInt32_$cquot
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int32 -> Int32 :: *)
                  ~R# (CClockId -> CClockId -> CClockId :: *)))
      (GHC.Int.$fIntegralInt32_$crem
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int32 -> Int32 :: *)
                  ~R# (CClockId -> CClockId -> CClockId :: *)))
      (GHC.Int.$fIntegralInt32_$cdiv
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int32 -> Int32 :: *)
                  ~R# (CClockId -> CClockId -> CClockId :: *)))
      (GHC.Int.$fIntegralInt32_$cmod
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int32 -> Int32 :: *)
                  ~R# (CClockId -> CClockId -> CClockId :: *)))
      (GHC.Int.$fIntegralInt32_$cquotRem
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CClockId[0]))
                       (Sym (System.Posix.Types.N:CClockId[0])))_R
               :: (Int32 -> Int32 -> (Int32, Int32) :: *)
                  ~R# (CClockId -> CClockId -> (CClockId, CClockId) :: *)))
      (GHC.Int.$fIntegralInt32_$cdivMod
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CClockId[0]))
                       (Sym (System.Posix.Types.N:CClockId[0])))_R
               :: (Int32 -> Int32 -> (Int32, Int32) :: *)
                  ~R# (CClockId -> CClockId -> (CClockId, CClockId) :: *)))
      (GHC.Int.$fIntegralInt32_$ctoInteger
       `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Integer>_R
               :: (Int32 -> Integer :: *) ~R# (CClockId -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
System.Posix.Types.$fBitsCClockId [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits CClockId
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: CClockId
                        System.Posix.Types.$fEqCClockId
                        GHC.Int.$fBitsInt32_$c.&.
                        `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                :: (Int32 -> Int32 -> Int32 :: *)
                                   ~R# (CClockId -> CClockId -> CClockId :: *))
                        GHC.Int.$fBitsInt32_$c.|.
                        `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                :: (Int32 -> Int32 -> Int32 :: *)
                                   ~R# (CClockId -> CClockId -> CClockId :: *))
                        GHC.Int.$fBitsInt32_$cxor
                        `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                :: (Int32 -> Int32 -> Int32 :: *)
                                   ~R# (CClockId -> CClockId -> CClockId :: *))
                        GHC.Int.$fBitsInt32_$ccomplement
                        `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                :: (Int32 -> Int32 :: *) ~R# (CClockId -> CClockId :: *))
                        GHC.Int.$fBitsInt32_$cshift
                        `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                :: (Int32 -> Int -> Int32 :: *)
                                   ~R# (CClockId -> Int -> CClockId :: *))
                        GHC.Int.$fBitsInt32_$crotate
                        `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                :: (Int32 -> Int -> Int32 :: *)
                                   ~R# (CClockId -> Int -> CClockId :: *))
                        GHC.Int.$fBitsInt6
                        `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                :: (Int32 :: *) ~R# (CClockId :: *))
                        GHC.Int.$fBitsInt32_$cbit
                        `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CClockId[0])
                                :: (Int -> Int32 :: *) ~R# (Int -> CClockId :: *))
                        GHC.Int.$fBitsInt32_$csetBit
                        `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                :: (Int32 -> Int -> Int32 :: *)
                                   ~R# (CClockId -> Int -> CClockId :: *))
                        GHC.Int.$fBitsInt32_$cclearBit
                        `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                :: (Int32 -> Int -> Int32 :: *)
                                   ~R# (CClockId -> Int -> CClockId :: *))
                        GHC.Int.$fBitsInt32_$ccomplementBit
                        `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                :: (Int32 -> Int -> Int32 :: *)
                                   ~R# (CClockId -> Int -> CClockId :: *))
                        GHC.Int.$fBitsInt32_$ctestBit
                        `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Int -> Bool>_R
                                :: (Int32 -> Int -> Bool :: *) ~R# (CClockId -> Int -> Bool :: *))
                        GHC.Int.$fBitsInt32_$cbitSizeMaybe
                        `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Maybe Int>_R
                                :: (Int32 -> Maybe Int :: *) ~R# (CClockId -> Maybe Int :: *))
                        GHC.Int.$fBitsInt32_$cfiniteBitSize
                        `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Int>_R
                                :: (Int32 -> Int :: *) ~R# (CClockId -> Int :: *))
                        GHC.Int.$fBitsInt32_$cisSigned
                        `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Bool>_R
                                :: (Int32 -> Bool :: *) ~R# (CClockId -> Bool :: *))
                        GHC.Int.$fBitsInt32_$cshiftL
                        `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                :: (Int32 -> Int -> Int32 :: *)
                                   ~R# (CClockId -> Int -> CClockId :: *))
                        GHC.Int.$fBitsInt32_$cunsafeShiftL
                        `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                :: (Int32 -> Int -> Int32 :: *)
                                   ~R# (CClockId -> Int -> CClockId :: *))
                        GHC.Int.$fBitsInt32_$cshiftR
                        `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                :: (Int32 -> Int -> Int32 :: *)
                                   ~R# (CClockId -> Int -> CClockId :: *))
                        GHC.Int.$fBitsInt32_$cunsafeShiftR
                        `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                :: (Int32 -> Int -> Int32 :: *)
                                   ~R# (CClockId -> Int -> CClockId :: *))
                        GHC.Int.$fBitsInt32_$crotateL
                        `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                :: (Int32 -> Int -> Int32 :: *)
                                   ~R# (CClockId -> Int -> CClockId :: *))
                        GHC.Int.$fBitsInt32_$crotateR
                        `cast` (Sym (System.Posix.Types.N:CClockId[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CClockId[0])
                                :: (Int32 -> Int -> Int32 :: *)
                                   ~R# (CClockId -> Int -> CClockId :: *))
                        GHC.Int.$fBitsInt32_$cpopCount
                        `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Int>_R
                                :: (Int32 -> Int :: *) ~R# (CClockId -> Int :: *))]
System.Posix.Types.$fBitsCClockId
  = Data.Bits.C:Bits
      @ CClockId
      System.Posix.Types.$fEqCClockId
      (GHC.Int.$fBitsInt32_$c.&.
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int32 -> Int32 :: *)
                  ~R# (CClockId -> CClockId -> CClockId :: *)))
      (GHC.Int.$fBitsInt32_$c.|.
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int32 -> Int32 :: *)
                  ~R# (CClockId -> CClockId -> CClockId :: *)))
      (GHC.Int.$fBitsInt32_$cxor
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int32 -> Int32 :: *)
                  ~R# (CClockId -> CClockId -> CClockId :: *)))
      (GHC.Int.$fBitsInt32_$ccomplement
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int32 :: *) ~R# (CClockId -> CClockId :: *)))
      (GHC.Int.$fBitsInt32_$cshift
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int -> Int32 :: *)
                  ~R# (CClockId -> Int -> CClockId :: *)))
      (GHC.Int.$fBitsInt32_$crotate
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int -> Int32 :: *)
                  ~R# (CClockId -> Int -> CClockId :: *)))
      (GHC.Int.$fBitsInt6
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 :: *) ~R# (CClockId :: *)))
      (GHC.Int.$fBitsInt32_$cbit
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int -> Int32 :: *) ~R# (Int -> CClockId :: *)))
      (GHC.Int.$fBitsInt32_$csetBit
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int -> Int32 :: *)
                  ~R# (CClockId -> Int -> CClockId :: *)))
      (GHC.Int.$fBitsInt32_$cclearBit
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int -> Int32 :: *)
                  ~R# (CClockId -> Int -> CClockId :: *)))
      (GHC.Int.$fBitsInt32_$ccomplementBit
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int -> Int32 :: *)
                  ~R# (CClockId -> Int -> CClockId :: *)))
      (GHC.Int.$fBitsInt32_$ctestBit
       `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Int -> Bool>_R
               :: (Int32 -> Int -> Bool :: *) ~R# (CClockId -> Int -> Bool :: *)))
      (GHC.Int.$fBitsInt32_$cbitSizeMaybe
       `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Maybe Int>_R
               :: (Int32 -> Maybe Int :: *) ~R# (CClockId -> Maybe Int :: *)))
      (GHC.Int.$fBitsInt32_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CClockId -> Int :: *)))
      (GHC.Int.$fBitsInt32_$cisSigned
       `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Bool>_R
               :: (Int32 -> Bool :: *) ~R# (CClockId -> Bool :: *)))
      (GHC.Int.$fBitsInt32_$cshiftL
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int -> Int32 :: *)
                  ~R# (CClockId -> Int -> CClockId :: *)))
      (GHC.Int.$fBitsInt32_$cunsafeShiftL
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int -> Int32 :: *)
                  ~R# (CClockId -> Int -> CClockId :: *)))
      (GHC.Int.$fBitsInt32_$cshiftR
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int -> Int32 :: *)
                  ~R# (CClockId -> Int -> CClockId :: *)))
      (GHC.Int.$fBitsInt32_$cunsafeShiftR
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int -> Int32 :: *)
                  ~R# (CClockId -> Int -> CClockId :: *)))
      (GHC.Int.$fBitsInt32_$crotateL
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int -> Int32 :: *)
                  ~R# (CClockId -> Int -> CClockId :: *)))
      (GHC.Int.$fBitsInt32_$crotateR
       `cast` (Sym (System.Posix.Types.N:CClockId[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CClockId[0])
               :: (Int32 -> Int -> Int32 :: *)
                  ~R# (CClockId -> Int -> CClockId :: *)))
      (GHC.Int.$fBitsInt32_$cpopCount
       `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CClockId -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
System.Posix.Types.$fFiniteBitsCClockId [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits CClockId
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: CClockId
                              System.Posix.Types.$fBitsCClockId
                              GHC.Int.$fBitsInt32_$cfiniteBitSize
                              `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Int>_R
                                      :: (Int32 -> Int :: *) ~R# (CClockId -> Int :: *))
                              GHC.Int.$fFiniteBitsInt32_$ccountLeadingZeros
                              `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Int>_R
                                      :: (Int32 -> Int :: *) ~R# (CClockId -> Int :: *))
                              GHC.Int.$fFiniteBitsInt32_$ccountTrailingZeros
                              `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Int>_R
                                      :: (Int32 -> Int :: *) ~R# (CClockId -> Int :: *))]
System.Posix.Types.$fFiniteBitsCClockId
  = Data.Bits.C:FiniteBits
      @ CClockId
      System.Posix.Types.$fBitsCClockId
      (GHC.Int.$fBitsInt32_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CClockId -> Int :: *)))
      (GHC.Int.$fFiniteBitsInt32_$ccountLeadingZeros
       `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CClockId -> Int :: *)))
      (GHC.Int.$fFiniteBitsInt32_$ccountTrailingZeros
       `cast` (Sym (System.Posix.Types.N:CClockId[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CClockId -> Int :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CBlkCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CBlkCnt
                       GHC.Int.$fShowInt64_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Int64 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CBlkCnt -> [Char] -> [Char] :: *))
                       GHC.Int.$fShowInt64_$cshow
                       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <[Char]>_R
                               :: (Int64 -> [Char] :: *) ~R# (CBlkCnt -> [Char] :: *))
                       GHC.Int.$fShowInt64_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CBlkCnt[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Int64] -> [Char] -> [Char] :: *)
                                  ~R# ([CBlkCnt] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCBlkCnt
  = GHC.Show.C:Show
      @ CBlkCnt
      (GHC.Int.$fShowInt64_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Int64 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CBlkCnt -> [Char] -> [Char] :: *)))
      (GHC.Int.$fShowInt64_$cshow
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <[Char]>_R
               :: (Int64 -> [Char] :: *) ~R# (CBlkCnt -> [Char] :: *)))
      (GHC.Int.$fShowInt64_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CBlkCnt[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Int64] -> [Char] -> [Char] :: *)
                  ~R# ([CBlkCnt] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CBlkCnt
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CBlkCnt
                       GHC.Int.$fReadInt64_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,)
                                         (Sym (System.Posix.Types.N:CBlkCnt[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Int64, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CBlkCnt, [Char])] :: *))
                       GHC.Int.$fReadInt64_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CBlkCnt[0])])_R
                                         <[Char]>_R)_R])_R
                               :: ([Char] -> [([Int64], [Char])] :: *)
                                  ~R# ([Char] -> [([CBlkCnt], [Char])] :: *))
                       GHC.Int.$fReadInt10
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Int64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                     (System.Posix.Types.N:CBlkCnt[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Int64 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CBlkCnt :: *))
                       GHC.Int.$fReadInt7
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Int64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                       ([System.Posix.Types.N:CBlkCnt[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Int64] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CBlkCnt] :: *))]
System.Posix.Types.$fReadCBlkCnt
  = GHC.Read.C:Read
      @ CBlkCnt
      (GHC.Int.$fReadInt64_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,)
                         (Sym (System.Posix.Types.N:CBlkCnt[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Int64, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CBlkCnt, [Char])] :: *)))
      (GHC.Int.$fReadInt64_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CBlkCnt[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Int64], [Char])] :: *)
                  ~R# ([Char] -> [([CBlkCnt], [Char])] :: *)))
      (GHC.Int.$fReadInt10
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Int64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     (System.Posix.Types.N:CBlkCnt[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Int64 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CBlkCnt :: *)))
      (GHC.Int.$fReadInt7
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Int64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                       ([System.Posix.Types.N:CBlkCnt[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Int64] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CBlkCnt] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
System.Posix.Types.$fBoundedCBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded CBlkCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: CBlkCnt
                          GHC.Int.$fBoundedInt64_$cminBound
                          `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                  :: (Int64 :: *) ~R# (CBlkCnt :: *))
                          GHC.Int.$fBoundedInt64_$cmaxBound
                          `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                  :: (Int64 :: *) ~R# (CBlkCnt :: *))]
System.Posix.Types.$fBoundedCBlkCnt
  = GHC.Enum.C:Bounded
      @ CBlkCnt
      (GHC.Int.$fBoundedInt64_$cminBound
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 :: *) ~R# (CBlkCnt :: *)))
      (GHC.Int.$fBoundedInt64_$cmaxBound
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 :: *) ~R# (CBlkCnt :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CBlkCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CBlkCnt
                                   Foreign.Storable.$fStorableInt64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Int>_R
                                           :: (Int64 -> Int :: *) ~R# (CBlkCnt -> Int :: *))
                                   Foreign.Storable.$fStorableInt64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Int>_R
                                           :: (Int64 -> Int :: *) ~R# (CBlkCnt -> Int :: *))
                                   GHC.Storable.readInt64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CBlkCnt))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CBlkCnt[0]))
                                           :: (Ptr Int64
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int64 #) :: *)
                                              ~R# (Ptr CBlkCnt -> Int -> IO CBlkCnt :: *))
                                   GHC.Storable.writeInt64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CBlkCnt))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Int64
                                               -> Int
                                               -> Int64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CBlkCnt -> Int -> CBlkCnt -> IO () :: *))
                                   Foreign.Storable.$fStorableInt19
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CBlkCnt[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int64 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CBlkCnt :: *))
                                   Foreign.Storable.$fStorableInt18
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Int64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> CBlkCnt -> IO () :: *))
                                   Foreign.Storable.$fStorableInt17
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CBlkCnt))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CBlkCnt[0]))
                                           :: (Ptr Int64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int64 #) :: *)
                                              ~R# (Ptr CBlkCnt -> IO CBlkCnt :: *))
                                   Foreign.Storable.$fStorableInt15
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CBlkCnt))_R
                                           ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Int64
                                               -> Int64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CBlkCnt -> CBlkCnt -> IO () :: *))]
System.Posix.Types.$fStorableCBlkCnt
  = Foreign.Storable.C:Storable
      @ CBlkCnt
      (Foreign.Storable.$fStorableInt64_$calignment
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CBlkCnt -> Int :: *)))
      (Foreign.Storable.$fStorableInt64_$calignment
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CBlkCnt -> Int :: *)))
      (GHC.Storable.readInt64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CBlkCnt))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CBlkCnt[0]))
               :: (Ptr Int64
                   -> Int -> State# RealWorld -> (# State# RealWorld, Int64 #) :: *)
                  ~R# (Ptr CBlkCnt -> Int -> IO CBlkCnt :: *)))
      (GHC.Storable.writeInt64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CBlkCnt))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Int64
                   -> Int
                   -> Int64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CBlkCnt -> Int -> CBlkCnt -> IO () :: *)))
      (Foreign.Storable.$fStorableInt19
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CBlkCnt[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Int64 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CBlkCnt :: *)))
      (Foreign.Storable.$fStorableInt18
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Int64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CBlkCnt -> IO () :: *)))
      (Foreign.Storable.$fStorableInt17
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CBlkCnt))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CBlkCnt[0]))
               :: (Ptr Int64
                   -> State# RealWorld -> (# State# RealWorld, Int64 #) :: *)
                  ~R# (Ptr CBlkCnt -> IO CBlkCnt :: *)))
      (Foreign.Storable.$fStorableInt15
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CBlkCnt))_R
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Int64
                   -> Int64 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CBlkCnt -> CBlkCnt -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CBlkCnt
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CBlkCnt
                       GHC.Int.$fEnumInt64_$csucc
                       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                               :: (Int64 -> Int64 :: *) ~R# (CBlkCnt -> CBlkCnt :: *))
                       GHC.Int.$fEnumInt64_$cpred
                       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                               :: (Int64 -> Int64 :: *) ~R# (CBlkCnt -> CBlkCnt :: *))
                       GHC.Int.$fEnumInt64_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                               :: (Int -> Int64 :: *) ~R# (Int -> CBlkCnt :: *))
                       GHC.Int.$fEnumInt64_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Int>_R
                               :: (Int64 -> Int :: *) ~R# (CBlkCnt -> Int :: *))
                       GHC.Int.$fEnumInt64_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                               ->_R ([Sym (System.Posix.Types.N:CBlkCnt[0])])_R
                               :: (Int64 -> [Int64] :: *) ~R# (CBlkCnt -> [CBlkCnt] :: *))
                       GHC.Int.$fEnumInt64_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                               ->_R ([Sym (System.Posix.Types.N:CBlkCnt[0])])_R
                               :: (Int64 -> Int64 -> [Int64] :: *)
                                  ~R# (CBlkCnt -> CBlkCnt -> [CBlkCnt] :: *))
                       GHC.Int.$fEnumInt64_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                               ->_R ([Sym (System.Posix.Types.N:CBlkCnt[0])])_R
                               :: (Int64 -> Int64 -> [Int64] :: *)
                                  ~R# (CBlkCnt -> CBlkCnt -> [CBlkCnt] :: *))
                       GHC.Int.$fEnumInt64_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                               ->_R ([Sym (System.Posix.Types.N:CBlkCnt[0])])_R
                               :: (Int64 -> Int64 -> Int64 -> [Int64] :: *)
                                  ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt -> [CBlkCnt] :: *))]
System.Posix.Types.$fEnumCBlkCnt
  = GHC.Enum.C:Enum
      @ CBlkCnt
      (GHC.Int.$fEnumInt64_$csucc
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int64 :: *) ~R# (CBlkCnt -> CBlkCnt :: *)))
      (GHC.Int.$fEnumInt64_$cpred
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int64 :: *) ~R# (CBlkCnt -> CBlkCnt :: *)))
      (GHC.Int.$fEnumInt64_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int -> Int64 :: *) ~R# (Int -> CBlkCnt :: *)))
      (GHC.Int.$fEnumInt64_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CBlkCnt -> Int :: *)))
      (GHC.Int.$fEnumInt64_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R ([Sym (System.Posix.Types.N:CBlkCnt[0])])_R
               :: (Int64 -> [Int64] :: *) ~R# (CBlkCnt -> [CBlkCnt] :: *)))
      (GHC.Int.$fEnumInt64_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R ([Sym (System.Posix.Types.N:CBlkCnt[0])])_R
               :: (Int64 -> Int64 -> [Int64] :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> [CBlkCnt] :: *)))
      (GHC.Int.$fEnumInt64_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R ([Sym (System.Posix.Types.N:CBlkCnt[0])])_R
               :: (Int64 -> Int64 -> [Int64] :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> [CBlkCnt] :: *)))
      (GHC.Int.$fEnumInt64_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R ([Sym (System.Posix.Types.N:CBlkCnt[0])])_R
               :: (Int64 -> Int64 -> Int64 -> [Int64] :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt -> [CBlkCnt] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CBlkCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CBlkCnt
                     GHC.Int.$fNumInt64_$c+
                     `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                             ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                             ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                             :: (Int64 -> Int64 -> Int64 :: *)
                                ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *))
                     GHC.Int.$fNumInt64_$c-
                     `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                             ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                             ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                             :: (Int64 -> Int64 -> Int64 :: *)
                                ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *))
                     GHC.Int.$fNumInt64_$c*
                     `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                             ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                             ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                             :: (Int64 -> Int64 -> Int64 :: *)
                                ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *))
                     GHC.Int.$fNumInt64_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                             ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                             :: (Int64 -> Int64 :: *) ~R# (CBlkCnt -> CBlkCnt :: *))
                     GHC.Int.$fNumInt64_$cabs
                     `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                             ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                             :: (Int64 -> Int64 :: *) ~R# (CBlkCnt -> CBlkCnt :: *))
                     GHC.Int.$fNumInt64_$csignum
                     `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                             ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                             :: (Int64 -> Int64 :: *) ~R# (CBlkCnt -> CBlkCnt :: *))
                     GHC.Int.$fNumInt64_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                             :: (Integer -> Int64 :: *) ~R# (Integer -> CBlkCnt :: *))]
System.Posix.Types.$fNumCBlkCnt
  = GHC.Num.C:Num
      @ CBlkCnt
      (GHC.Int.$fNumInt64_$c+
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *)))
      (GHC.Int.$fNumInt64_$c-
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *)))
      (GHC.Int.$fNumInt64_$c*
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *)))
      (GHC.Int.$fNumInt64_$cnegate
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int64 :: *) ~R# (CBlkCnt -> CBlkCnt :: *)))
      (GHC.Int.$fNumInt64_$cabs
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int64 :: *) ~R# (CBlkCnt -> CBlkCnt :: *)))
      (GHC.Int.$fNumInt64_$csignum
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int64 :: *) ~R# (CBlkCnt -> CBlkCnt :: *)))
      (GHC.Int.$fNumInt64_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Integer -> Int64 :: *) ~R# (Integer -> CBlkCnt :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CBlkCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CBlkCnt
                        GHC.Int.eqInt64
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R <Bool>_R
                                :: (Int64 -> Int64 -> Bool :: *)
                                   ~R# (CBlkCnt -> CBlkCnt -> Bool :: *))
                        GHC.Int.neInt64
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R <Bool>_R
                                :: (Int64 -> Int64 -> Bool :: *)
                                   ~R# (CBlkCnt -> CBlkCnt -> Bool :: *))]
System.Posix.Types.$fEqCBlkCnt
  = GHC.Classes.C:Eq
      @ CBlkCnt
      (GHC.Int.eqInt64
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> Bool :: *)))
      (GHC.Int.neInt64
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CBlkCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CBlkCnt
                         System.Posix.Types.$fEqCBlkCnt
                         GHC.Int.$fOrdInt64_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                 ->_R <Ordering>_R
                                 :: (Int64 -> Int64 -> Ordering :: *)
                                    ~R# (CBlkCnt -> CBlkCnt -> Ordering :: *))
                         GHC.Int.ltInt64
                         `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                 ->_R <Bool>_R
                                 :: (Int64 -> Int64 -> Bool :: *)
                                    ~R# (CBlkCnt -> CBlkCnt -> Bool :: *))
                         GHC.Int.leInt64
                         `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                 ->_R <Bool>_R
                                 :: (Int64 -> Int64 -> Bool :: *)
                                    ~R# (CBlkCnt -> CBlkCnt -> Bool :: *))
                         GHC.Int.gtInt64
                         `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                 ->_R <Bool>_R
                                 :: (Int64 -> Int64 -> Bool :: *)
                                    ~R# (CBlkCnt -> CBlkCnt -> Bool :: *))
                         GHC.Int.geInt64
                         `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                 ->_R <Bool>_R
                                 :: (Int64 -> Int64 -> Bool :: *)
                                    ~R# (CBlkCnt -> CBlkCnt -> Bool :: *))
                         GHC.Int.$fOrdInt64_$cmax
                         `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                 :: (Int64 -> Int64 -> Int64 :: *)
                                    ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *))
                         GHC.Int.$fOrdInt64_$cmin
                         `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                 ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                 :: (Int64 -> Int64 -> Int64 :: *)
                                    ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *))]
System.Posix.Types.$fOrdCBlkCnt
  = GHC.Classes.C:Ord
      @ CBlkCnt
      System.Posix.Types.$fEqCBlkCnt
      (GHC.Int.$fOrdInt64_$ccompare
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Ordering>_R
               :: (Int64 -> Int64 -> Ordering :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> Ordering :: *)))
      (GHC.Int.ltInt64
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> Bool :: *)))
      (GHC.Int.leInt64
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> Bool :: *)))
      (GHC.Int.gtInt64
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> Bool :: *)))
      (GHC.Int.geInt64
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> Bool :: *)))
      (GHC.Int.$fOrdInt64_$cmax
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *)))
      (GHC.Int.$fOrdInt64_$cmin
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CBlkCnt
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CBlkCnt
                       System.Posix.Types.$fNumCBlkCnt
                       System.Posix.Types.$fOrdCBlkCnt
                       GHC.Int.$fRealInt64_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                               ->_R <Ratio Integer>_R
                               :: (Int64 -> Ratio Integer :: *)
                                  ~R# (CBlkCnt -> Ratio Integer :: *))]
System.Posix.Types.$fRealCBlkCnt
  = GHC.Real.C:Real
      @ CBlkCnt
      System.Posix.Types.$fNumCBlkCnt
      System.Posix.Types.$fOrdCBlkCnt
      (GHC.Int.$fRealInt64_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Ratio Integer>_R
               :: (Int64 -> Ratio Integer :: *)
                  ~R# (CBlkCnt -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 58, joins: 0/0}
System.Posix.Types.$fIntegralCBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral CBlkCnt
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: CBlkCnt
                           System.Posix.Types.$fRealCBlkCnt
                           System.Posix.Types.$fEnumCBlkCnt
                           GHC.Int.$fIntegralInt64_$cquot
                           `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                   :: (Int64 -> Int64 -> Int64 :: *)
                                      ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *))
                           GHC.Int.$fIntegralInt64_$crem
                           `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                   :: (Int64 -> Int64 -> Int64 :: *)
                                      ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *))
                           GHC.Int.$fIntegralInt64_$cdiv
                           `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                   :: (Int64 -> Int64 -> Int64 :: *)
                                      ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *))
                           GHC.Int.$fIntegralInt64_$cmod
                           `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                   :: (Int64 -> Int64 -> Int64 :: *)
                                      ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *))
                           GHC.Int.$fIntegralInt64_$cquotRem
                           `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CBlkCnt[0]))
                                           (Sym (System.Posix.Types.N:CBlkCnt[0])))_R
                                   :: (Int64 -> Int64 -> (Int64, Int64) :: *)
                                      ~R# (CBlkCnt -> CBlkCnt -> (CBlkCnt, CBlkCnt) :: *))
                           GHC.Int.$fIntegralInt64_$cdivMod
                           `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CBlkCnt[0]))
                                           (Sym (System.Posix.Types.N:CBlkCnt[0])))_R
                                   :: (Int64 -> Int64 -> (Int64, Int64) :: *)
                                      ~R# (CBlkCnt -> CBlkCnt -> (CBlkCnt, CBlkCnt) :: *))
                           GHC.Int.$fIntegralInt64_$ctoInteger
                           `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Integer>_R
                                   :: (Int64 -> Integer :: *) ~R# (CBlkCnt -> Integer :: *))]
System.Posix.Types.$fIntegralCBlkCnt
  = GHC.Real.C:Integral
      @ CBlkCnt
      System.Posix.Types.$fRealCBlkCnt
      System.Posix.Types.$fEnumCBlkCnt
      (GHC.Int.$fIntegralInt64_$cquot
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *)))
      (GHC.Int.$fIntegralInt64_$crem
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *)))
      (GHC.Int.$fIntegralInt64_$cdiv
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *)))
      (GHC.Int.$fIntegralInt64_$cmod
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *)))
      (GHC.Int.$fIntegralInt64_$cquotRem
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CBlkCnt[0]))
                       (Sym (System.Posix.Types.N:CBlkCnt[0])))_R
               :: (Int64 -> Int64 -> (Int64, Int64) :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> (CBlkCnt, CBlkCnt) :: *)))
      (GHC.Int.$fIntegralInt64_$cdivMod
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CBlkCnt[0]))
                       (Sym (System.Posix.Types.N:CBlkCnt[0])))_R
               :: (Int64 -> Int64 -> (Int64, Int64) :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> (CBlkCnt, CBlkCnt) :: *)))
      (GHC.Int.$fIntegralInt64_$ctoInteger
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Integer>_R
               :: (Int64 -> Integer :: *) ~R# (CBlkCnt -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
System.Posix.Types.$fBitsCBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits CBlkCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: CBlkCnt
                        System.Posix.Types.$fEqCBlkCnt
                        GHC.Int.$fBitsInt64_$c.&.
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                :: (Int64 -> Int64 -> Int64 :: *)
                                   ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *))
                        GHC.Int.$fBitsInt64_$c.|.
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                :: (Int64 -> Int64 -> Int64 :: *)
                                   ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *))
                        GHC.Int.$fBitsInt64_$cxor
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                :: (Int64 -> Int64 -> Int64 :: *)
                                   ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *))
                        GHC.Int.$fBitsInt64_$ccomplement
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                :: (Int64 -> Int64 :: *) ~R# (CBlkCnt -> CBlkCnt :: *))
                        GHC.Int.$fBitsInt64_$cshift
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkCnt -> Int -> CBlkCnt :: *))
                        GHC.Int.$fBitsInt64_$crotate
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkCnt -> Int -> CBlkCnt :: *))
                        GHC.Int.$fBitsInt10
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                :: (Int64 :: *) ~R# (CBlkCnt :: *))
                        GHC.Int.$fBitsInt64_$cbit
                        `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                :: (Int -> Int64 :: *) ~R# (Int -> CBlkCnt :: *))
                        GHC.Int.$fBitsInt64_$csetBit
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkCnt -> Int -> CBlkCnt :: *))
                        GHC.Int.$fBitsInt64_$cclearBit
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkCnt -> Int -> CBlkCnt :: *))
                        GHC.Int.$fBitsInt64_$ccomplementBit
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkCnt -> Int -> CBlkCnt :: *))
                        GHC.Int.$fBitsInt64_$ctestBit
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Int -> Bool>_R
                                :: (Int64 -> Int -> Bool :: *) ~R# (CBlkCnt -> Int -> Bool :: *))
                        GHC.Int.$fBitsInt64_$cbitSizeMaybe
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Maybe Int>_R
                                :: (Int64 -> Maybe Int :: *) ~R# (CBlkCnt -> Maybe Int :: *))
                        GHC.Int.$fBitsInt64_$cfiniteBitSize
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Int>_R
                                :: (Int64 -> Int :: *) ~R# (CBlkCnt -> Int :: *))
                        GHC.Int.$fBitsInt64_$cisSigned
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Bool>_R
                                :: (Int64 -> Bool :: *) ~R# (CBlkCnt -> Bool :: *))
                        GHC.Int.$fBitsInt64_$cshiftL
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkCnt -> Int -> CBlkCnt :: *))
                        GHC.Int.$fBitsInt64_$cunsafeShiftL
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkCnt -> Int -> CBlkCnt :: *))
                        GHC.Int.$fBitsInt64_$cshiftR
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkCnt -> Int -> CBlkCnt :: *))
                        GHC.Int.$fBitsInt64_$cunsafeShiftR
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkCnt -> Int -> CBlkCnt :: *))
                        GHC.Int.$fBitsInt64_$crotateL
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkCnt -> Int -> CBlkCnt :: *))
                        GHC.Int.$fBitsInt64_$crotateR
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkCnt -> Int -> CBlkCnt :: *))
                        GHC.Int.$fBitsInt64_$cpopCount
                        `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Int>_R
                                :: (Int64 -> Int :: *) ~R# (CBlkCnt -> Int :: *))]
System.Posix.Types.$fBitsCBlkCnt
  = Data.Bits.C:Bits
      @ CBlkCnt
      System.Posix.Types.$fEqCBlkCnt
      (GHC.Int.$fBitsInt64_$c.&.
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *)))
      (GHC.Int.$fBitsInt64_$c.|.
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *)))
      (GHC.Int.$fBitsInt64_$cxor
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkCnt -> CBlkCnt -> CBlkCnt :: *)))
      (GHC.Int.$fBitsInt64_$ccomplement
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int64 :: *) ~R# (CBlkCnt -> CBlkCnt :: *)))
      (GHC.Int.$fBitsInt64_$cshift
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkCnt -> Int -> CBlkCnt :: *)))
      (GHC.Int.$fBitsInt64_$crotate
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkCnt -> Int -> CBlkCnt :: *)))
      (GHC.Int.$fBitsInt10
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 :: *) ~R# (CBlkCnt :: *)))
      (GHC.Int.$fBitsInt64_$cbit
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int -> Int64 :: *) ~R# (Int -> CBlkCnt :: *)))
      (GHC.Int.$fBitsInt64_$csetBit
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkCnt -> Int -> CBlkCnt :: *)))
      (GHC.Int.$fBitsInt64_$cclearBit
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkCnt -> Int -> CBlkCnt :: *)))
      (GHC.Int.$fBitsInt64_$ccomplementBit
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkCnt -> Int -> CBlkCnt :: *)))
      (GHC.Int.$fBitsInt64_$ctestBit
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Int -> Bool>_R
               :: (Int64 -> Int -> Bool :: *) ~R# (CBlkCnt -> Int -> Bool :: *)))
      (GHC.Int.$fBitsInt64_$cbitSizeMaybe
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Maybe Int>_R
               :: (Int64 -> Maybe Int :: *) ~R# (CBlkCnt -> Maybe Int :: *)))
      (GHC.Int.$fBitsInt64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CBlkCnt -> Int :: *)))
      (GHC.Int.$fBitsInt64_$cisSigned
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Bool>_R
               :: (Int64 -> Bool :: *) ~R# (CBlkCnt -> Bool :: *)))
      (GHC.Int.$fBitsInt64_$cshiftL
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkCnt -> Int -> CBlkCnt :: *)))
      (GHC.Int.$fBitsInt64_$cunsafeShiftL
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkCnt -> Int -> CBlkCnt :: *)))
      (GHC.Int.$fBitsInt64_$cshiftR
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkCnt -> Int -> CBlkCnt :: *)))
      (GHC.Int.$fBitsInt64_$cunsafeShiftR
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkCnt -> Int -> CBlkCnt :: *)))
      (GHC.Int.$fBitsInt64_$crotateL
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkCnt -> Int -> CBlkCnt :: *)))
      (GHC.Int.$fBitsInt64_$crotateR
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkCnt[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkCnt -> Int -> CBlkCnt :: *)))
      (GHC.Int.$fBitsInt64_$cpopCount
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CBlkCnt -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
System.Posix.Types.$fFiniteBitsCBlkCnt [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits CBlkCnt
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: CBlkCnt
                              System.Posix.Types.$fBitsCBlkCnt
                              GHC.Int.$fBitsInt64_$cfiniteBitSize
                              `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Int>_R
                                      :: (Int64 -> Int :: *) ~R# (CBlkCnt -> Int :: *))
                              GHC.Int.$fFiniteBitsInt64_$ccountLeadingZeros
                              `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Int>_R
                                      :: (Int64 -> Int :: *) ~R# (CBlkCnt -> Int :: *))
                              GHC.Int.$fFiniteBitsInt64_$ccountTrailingZeros
                              `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Int>_R
                                      :: (Int64 -> Int :: *) ~R# (CBlkCnt -> Int :: *))]
System.Posix.Types.$fFiniteBitsCBlkCnt
  = Data.Bits.C:FiniteBits
      @ CBlkCnt
      System.Posix.Types.$fBitsCBlkCnt
      (GHC.Int.$fBitsInt64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CBlkCnt -> Int :: *)))
      (GHC.Int.$fFiniteBitsInt64_$ccountLeadingZeros
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CBlkCnt -> Int :: *)))
      (GHC.Int.$fFiniteBitsInt64_$ccountTrailingZeros
       `cast` (Sym (System.Posix.Types.N:CBlkCnt[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CBlkCnt -> Int :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCBlkSize [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CBlkSize
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CBlkSize
                       GHC.Int.$fShowInt64_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Int64 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CBlkSize -> [Char] -> [Char] :: *))
                       GHC.Int.$fShowInt64_$cshow
                       `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <[Char]>_R
                               :: (Int64 -> [Char] :: *) ~R# (CBlkSize -> [Char] :: *))
                       GHC.Int.$fShowInt64_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CBlkSize[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Int64] -> [Char] -> [Char] :: *)
                                  ~R# ([CBlkSize] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCBlkSize
  = GHC.Show.C:Show
      @ CBlkSize
      (GHC.Int.$fShowInt64_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Int64 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CBlkSize -> [Char] -> [Char] :: *)))
      (GHC.Int.$fShowInt64_$cshow
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <[Char]>_R
               :: (Int64 -> [Char] :: *) ~R# (CBlkSize -> [Char] :: *)))
      (GHC.Int.$fShowInt64_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CBlkSize[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Int64] -> [Char] -> [Char] :: *)
                  ~R# ([CBlkSize] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCBlkSize [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CBlkSize
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CBlkSize
                       GHC.Int.$fReadInt64_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,)
                                         (Sym (System.Posix.Types.N:CBlkSize[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Int64, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CBlkSize, [Char])] :: *))
                       GHC.Int.$fReadInt64_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CBlkSize[0])])_R
                                         <[Char]>_R)_R])_R
                               :: ([Char] -> [([Int64], [Char])] :: *)
                                  ~R# ([Char] -> [([CBlkSize], [Char])] :: *))
                       GHC.Int.$fReadInt10
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Int64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                     (System.Posix.Types.N:CBlkSize[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Int64 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CBlkSize :: *))
                       GHC.Int.$fReadInt7
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Int64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                       ([System.Posix.Types.N:CBlkSize[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Int64] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CBlkSize] :: *))]
System.Posix.Types.$fReadCBlkSize
  = GHC.Read.C:Read
      @ CBlkSize
      (GHC.Int.$fReadInt64_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,)
                         (Sym (System.Posix.Types.N:CBlkSize[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Int64, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CBlkSize, [Char])] :: *)))
      (GHC.Int.$fReadInt64_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CBlkSize[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Int64], [Char])] :: *)
                  ~R# ([Char] -> [([CBlkSize], [Char])] :: *)))
      (GHC.Int.$fReadInt10
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Int64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     (System.Posix.Types.N:CBlkSize[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Int64 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CBlkSize :: *)))
      (GHC.Int.$fReadInt7
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Int64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                       ([System.Posix.Types.N:CBlkSize[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Int64] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CBlkSize] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
System.Posix.Types.$fBoundedCBlkSize [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded CBlkSize
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: CBlkSize
                          GHC.Int.$fBoundedInt64_$cminBound
                          `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                  :: (Int64 :: *) ~R# (CBlkSize :: *))
                          GHC.Int.$fBoundedInt64_$cmaxBound
                          `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                  :: (Int64 :: *) ~R# (CBlkSize :: *))]
System.Posix.Types.$fBoundedCBlkSize
  = GHC.Enum.C:Bounded
      @ CBlkSize
      (GHC.Int.$fBoundedInt64_$cminBound
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 :: *) ~R# (CBlkSize :: *)))
      (GHC.Int.$fBoundedInt64_$cmaxBound
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 :: *) ~R# (CBlkSize :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCBlkSize [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CBlkSize
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CBlkSize
                                   Foreign.Storable.$fStorableInt64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Int>_R
                                           :: (Int64 -> Int :: *) ~R# (CBlkSize -> Int :: *))
                                   Foreign.Storable.$fStorableInt64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Int>_R
                                           :: (Int64 -> Int :: *) ~R# (CBlkSize -> Int :: *))
                                   GHC.Storable.readInt64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CBlkSize))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CBlkSize[0]))
                                           :: (Ptr Int64
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int64 #) :: *)
                                              ~R# (Ptr CBlkSize -> Int -> IO CBlkSize :: *))
                                   GHC.Storable.writeInt64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CBlkSize))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Int64
                                               -> Int
                                               -> Int64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CBlkSize -> Int -> CBlkSize -> IO () :: *))
                                   Foreign.Storable.$fStorableInt19
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CBlkSize[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int64 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CBlkSize :: *))
                                   Foreign.Storable.$fStorableInt18
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Int64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b.
                                                   Ptr b -> Int -> CBlkSize -> IO () :: *))
                                   Foreign.Storable.$fStorableInt17
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CBlkSize))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CBlkSize[0]))
                                           :: (Ptr Int64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int64 #) :: *)
                                              ~R# (Ptr CBlkSize -> IO CBlkSize :: *))
                                   Foreign.Storable.$fStorableInt15
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CBlkSize))_R
                                           ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Int64
                                               -> Int64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CBlkSize -> CBlkSize -> IO () :: *))]
System.Posix.Types.$fStorableCBlkSize
  = Foreign.Storable.C:Storable
      @ CBlkSize
      (Foreign.Storable.$fStorableInt64_$calignment
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CBlkSize -> Int :: *)))
      (Foreign.Storable.$fStorableInt64_$calignment
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CBlkSize -> Int :: *)))
      (GHC.Storable.readInt64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CBlkSize))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CBlkSize[0]))
               :: (Ptr Int64
                   -> Int -> State# RealWorld -> (# State# RealWorld, Int64 #) :: *)
                  ~R# (Ptr CBlkSize -> Int -> IO CBlkSize :: *)))
      (GHC.Storable.writeInt64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CBlkSize))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Int64
                   -> Int
                   -> Int64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CBlkSize -> Int -> CBlkSize -> IO () :: *)))
      (Foreign.Storable.$fStorableInt19
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CBlkSize[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Int64 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CBlkSize :: *)))
      (Foreign.Storable.$fStorableInt18
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Int64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CBlkSize -> IO () :: *)))
      (Foreign.Storable.$fStorableInt17
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CBlkSize))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CBlkSize[0]))
               :: (Ptr Int64
                   -> State# RealWorld -> (# State# RealWorld, Int64 #) :: *)
                  ~R# (Ptr CBlkSize -> IO CBlkSize :: *)))
      (Foreign.Storable.$fStorableInt15
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CBlkSize))_R
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Int64
                   -> Int64 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CBlkSize -> CBlkSize -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCBlkSize [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CBlkSize
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CBlkSize
                       GHC.Int.$fEnumInt64_$csucc
                       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                               :: (Int64 -> Int64 :: *) ~R# (CBlkSize -> CBlkSize :: *))
                       GHC.Int.$fEnumInt64_$cpred
                       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                               :: (Int64 -> Int64 :: *) ~R# (CBlkSize -> CBlkSize :: *))
                       GHC.Int.$fEnumInt64_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                               :: (Int -> Int64 :: *) ~R# (Int -> CBlkSize :: *))
                       GHC.Int.$fEnumInt64_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Int>_R
                               :: (Int64 -> Int :: *) ~R# (CBlkSize -> Int :: *))
                       GHC.Int.$fEnumInt64_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                               ->_R ([Sym (System.Posix.Types.N:CBlkSize[0])])_R
                               :: (Int64 -> [Int64] :: *) ~R# (CBlkSize -> [CBlkSize] :: *))
                       GHC.Int.$fEnumInt64_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                               ->_R ([Sym (System.Posix.Types.N:CBlkSize[0])])_R
                               :: (Int64 -> Int64 -> [Int64] :: *)
                                  ~R# (CBlkSize -> CBlkSize -> [CBlkSize] :: *))
                       GHC.Int.$fEnumInt64_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                               ->_R ([Sym (System.Posix.Types.N:CBlkSize[0])])_R
                               :: (Int64 -> Int64 -> [Int64] :: *)
                                  ~R# (CBlkSize -> CBlkSize -> [CBlkSize] :: *))
                       GHC.Int.$fEnumInt64_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                               ->_R ([Sym (System.Posix.Types.N:CBlkSize[0])])_R
                               :: (Int64 -> Int64 -> Int64 -> [Int64] :: *)
                                  ~R# (CBlkSize -> CBlkSize -> CBlkSize -> [CBlkSize] :: *))]
System.Posix.Types.$fEnumCBlkSize
  = GHC.Enum.C:Enum
      @ CBlkSize
      (GHC.Int.$fEnumInt64_$csucc
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int64 :: *) ~R# (CBlkSize -> CBlkSize :: *)))
      (GHC.Int.$fEnumInt64_$cpred
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int64 :: *) ~R# (CBlkSize -> CBlkSize :: *)))
      (GHC.Int.$fEnumInt64_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int -> Int64 :: *) ~R# (Int -> CBlkSize :: *)))
      (GHC.Int.$fEnumInt64_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CBlkSize -> Int :: *)))
      (GHC.Int.$fEnumInt64_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R ([Sym (System.Posix.Types.N:CBlkSize[0])])_R
               :: (Int64 -> [Int64] :: *) ~R# (CBlkSize -> [CBlkSize] :: *)))
      (GHC.Int.$fEnumInt64_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R ([Sym (System.Posix.Types.N:CBlkSize[0])])_R
               :: (Int64 -> Int64 -> [Int64] :: *)
                  ~R# (CBlkSize -> CBlkSize -> [CBlkSize] :: *)))
      (GHC.Int.$fEnumInt64_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R ([Sym (System.Posix.Types.N:CBlkSize[0])])_R
               :: (Int64 -> Int64 -> [Int64] :: *)
                  ~R# (CBlkSize -> CBlkSize -> [CBlkSize] :: *)))
      (GHC.Int.$fEnumInt64_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R ([Sym (System.Posix.Types.N:CBlkSize[0])])_R
               :: (Int64 -> Int64 -> Int64 -> [Int64] :: *)
                  ~R# (CBlkSize -> CBlkSize -> CBlkSize -> [CBlkSize] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCBlkSize [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CBlkSize
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CBlkSize
                     GHC.Int.$fNumInt64_$c+
                     `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                             ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                             ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                             :: (Int64 -> Int64 -> Int64 :: *)
                                ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *))
                     GHC.Int.$fNumInt64_$c-
                     `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                             ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                             ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                             :: (Int64 -> Int64 -> Int64 :: *)
                                ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *))
                     GHC.Int.$fNumInt64_$c*
                     `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                             ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                             ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                             :: (Int64 -> Int64 -> Int64 :: *)
                                ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *))
                     GHC.Int.$fNumInt64_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                             ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                             :: (Int64 -> Int64 :: *) ~R# (CBlkSize -> CBlkSize :: *))
                     GHC.Int.$fNumInt64_$cabs
                     `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                             ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                             :: (Int64 -> Int64 :: *) ~R# (CBlkSize -> CBlkSize :: *))
                     GHC.Int.$fNumInt64_$csignum
                     `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                             ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                             :: (Int64 -> Int64 :: *) ~R# (CBlkSize -> CBlkSize :: *))
                     GHC.Int.$fNumInt64_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                             :: (Integer -> Int64 :: *) ~R# (Integer -> CBlkSize :: *))]
System.Posix.Types.$fNumCBlkSize
  = GHC.Num.C:Num
      @ CBlkSize
      (GHC.Int.$fNumInt64_$c+
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *)))
      (GHC.Int.$fNumInt64_$c-
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *)))
      (GHC.Int.$fNumInt64_$c*
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *)))
      (GHC.Int.$fNumInt64_$cnegate
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int64 :: *) ~R# (CBlkSize -> CBlkSize :: *)))
      (GHC.Int.$fNumInt64_$cabs
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int64 :: *) ~R# (CBlkSize -> CBlkSize :: *)))
      (GHC.Int.$fNumInt64_$csignum
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int64 :: *) ~R# (CBlkSize -> CBlkSize :: *)))
      (GHC.Int.$fNumInt64_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Integer -> Int64 :: *) ~R# (Integer -> CBlkSize :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCBlkSize [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CBlkSize
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CBlkSize
                        GHC.Int.eqInt64
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R <Bool>_R
                                :: (Int64 -> Int64 -> Bool :: *)
                                   ~R# (CBlkSize -> CBlkSize -> Bool :: *))
                        GHC.Int.neInt64
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R <Bool>_R
                                :: (Int64 -> Int64 -> Bool :: *)
                                   ~R# (CBlkSize -> CBlkSize -> Bool :: *))]
System.Posix.Types.$fEqCBlkSize
  = GHC.Classes.C:Eq
      @ CBlkSize
      (GHC.Int.eqInt64
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *)
                  ~R# (CBlkSize -> CBlkSize -> Bool :: *)))
      (GHC.Int.neInt64
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *)
                  ~R# (CBlkSize -> CBlkSize -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCBlkSize [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CBlkSize
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CBlkSize
                         System.Posix.Types.$fEqCBlkSize
                         GHC.Int.$fOrdInt64_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                 ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                 ->_R <Ordering>_R
                                 :: (Int64 -> Int64 -> Ordering :: *)
                                    ~R# (CBlkSize -> CBlkSize -> Ordering :: *))
                         GHC.Int.ltInt64
                         `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                 ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                 ->_R <Bool>_R
                                 :: (Int64 -> Int64 -> Bool :: *)
                                    ~R# (CBlkSize -> CBlkSize -> Bool :: *))
                         GHC.Int.leInt64
                         `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                 ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                 ->_R <Bool>_R
                                 :: (Int64 -> Int64 -> Bool :: *)
                                    ~R# (CBlkSize -> CBlkSize -> Bool :: *))
                         GHC.Int.gtInt64
                         `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                 ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                 ->_R <Bool>_R
                                 :: (Int64 -> Int64 -> Bool :: *)
                                    ~R# (CBlkSize -> CBlkSize -> Bool :: *))
                         GHC.Int.geInt64
                         `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                 ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                 ->_R <Bool>_R
                                 :: (Int64 -> Int64 -> Bool :: *)
                                    ~R# (CBlkSize -> CBlkSize -> Bool :: *))
                         GHC.Int.$fOrdInt64_$cmax
                         `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                 ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                 ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                 :: (Int64 -> Int64 -> Int64 :: *)
                                    ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *))
                         GHC.Int.$fOrdInt64_$cmin
                         `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                 ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                 ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                 :: (Int64 -> Int64 -> Int64 :: *)
                                    ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *))]
System.Posix.Types.$fOrdCBlkSize
  = GHC.Classes.C:Ord
      @ CBlkSize
      System.Posix.Types.$fEqCBlkSize
      (GHC.Int.$fOrdInt64_$ccompare
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Ordering>_R
               :: (Int64 -> Int64 -> Ordering :: *)
                  ~R# (CBlkSize -> CBlkSize -> Ordering :: *)))
      (GHC.Int.ltInt64
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *)
                  ~R# (CBlkSize -> CBlkSize -> Bool :: *)))
      (GHC.Int.leInt64
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *)
                  ~R# (CBlkSize -> CBlkSize -> Bool :: *)))
      (GHC.Int.gtInt64
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *)
                  ~R# (CBlkSize -> CBlkSize -> Bool :: *)))
      (GHC.Int.geInt64
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *)
                  ~R# (CBlkSize -> CBlkSize -> Bool :: *)))
      (GHC.Int.$fOrdInt64_$cmax
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *)))
      (GHC.Int.$fOrdInt64_$cmin
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCBlkSize [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CBlkSize
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CBlkSize
                       System.Posix.Types.$fNumCBlkSize
                       System.Posix.Types.$fOrdCBlkSize
                       GHC.Int.$fRealInt64_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                               ->_R <Ratio Integer>_R
                               :: (Int64 -> Ratio Integer :: *)
                                  ~R# (CBlkSize -> Ratio Integer :: *))]
System.Posix.Types.$fRealCBlkSize
  = GHC.Real.C:Real
      @ CBlkSize
      System.Posix.Types.$fNumCBlkSize
      System.Posix.Types.$fOrdCBlkSize
      (GHC.Int.$fRealInt64_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Ratio Integer>_R
               :: (Int64 -> Ratio Integer :: *)
                  ~R# (CBlkSize -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 58, joins: 0/0}
System.Posix.Types.$fIntegralCBlkSize [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral CBlkSize
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: CBlkSize
                           System.Posix.Types.$fRealCBlkSize
                           System.Posix.Types.$fEnumCBlkSize
                           GHC.Int.$fIntegralInt64_$cquot
                           `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                   :: (Int64 -> Int64 -> Int64 :: *)
                                      ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *))
                           GHC.Int.$fIntegralInt64_$crem
                           `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                   :: (Int64 -> Int64 -> Int64 :: *)
                                      ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *))
                           GHC.Int.$fIntegralInt64_$cdiv
                           `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                   :: (Int64 -> Int64 -> Int64 :: *)
                                      ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *))
                           GHC.Int.$fIntegralInt64_$cmod
                           `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                   :: (Int64 -> Int64 -> Int64 :: *)
                                      ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *))
                           GHC.Int.$fIntegralInt64_$cquotRem
                           `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CBlkSize[0]))
                                           (Sym (System.Posix.Types.N:CBlkSize[0])))_R
                                   :: (Int64 -> Int64 -> (Int64, Int64) :: *)
                                      ~R# (CBlkSize -> CBlkSize -> (CBlkSize, CBlkSize) :: *))
                           GHC.Int.$fIntegralInt64_$cdivMod
                           `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                   ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CBlkSize[0]))
                                           (Sym (System.Posix.Types.N:CBlkSize[0])))_R
                                   :: (Int64 -> Int64 -> (Int64, Int64) :: *)
                                      ~R# (CBlkSize -> CBlkSize -> (CBlkSize, CBlkSize) :: *))
                           GHC.Int.$fIntegralInt64_$ctoInteger
                           `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Integer>_R
                                   :: (Int64 -> Integer :: *) ~R# (CBlkSize -> Integer :: *))]
System.Posix.Types.$fIntegralCBlkSize
  = GHC.Real.C:Integral
      @ CBlkSize
      System.Posix.Types.$fRealCBlkSize
      System.Posix.Types.$fEnumCBlkSize
      (GHC.Int.$fIntegralInt64_$cquot
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *)))
      (GHC.Int.$fIntegralInt64_$crem
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *)))
      (GHC.Int.$fIntegralInt64_$cdiv
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *)))
      (GHC.Int.$fIntegralInt64_$cmod
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *)))
      (GHC.Int.$fIntegralInt64_$cquotRem
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CBlkSize[0]))
                       (Sym (System.Posix.Types.N:CBlkSize[0])))_R
               :: (Int64 -> Int64 -> (Int64, Int64) :: *)
                  ~R# (CBlkSize -> CBlkSize -> (CBlkSize, CBlkSize) :: *)))
      (GHC.Int.$fIntegralInt64_$cdivMod
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CBlkSize[0]))
                       (Sym (System.Posix.Types.N:CBlkSize[0])))_R
               :: (Int64 -> Int64 -> (Int64, Int64) :: *)
                  ~R# (CBlkSize -> CBlkSize -> (CBlkSize, CBlkSize) :: *)))
      (GHC.Int.$fIntegralInt64_$ctoInteger
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Integer>_R
               :: (Int64 -> Integer :: *) ~R# (CBlkSize -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
System.Posix.Types.$fBitsCBlkSize [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits CBlkSize
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: CBlkSize
                        System.Posix.Types.$fEqCBlkSize
                        GHC.Int.$fBitsInt64_$c.&.
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                :: (Int64 -> Int64 -> Int64 :: *)
                                   ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *))
                        GHC.Int.$fBitsInt64_$c.|.
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                :: (Int64 -> Int64 -> Int64 :: *)
                                   ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *))
                        GHC.Int.$fBitsInt64_$cxor
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                :: (Int64 -> Int64 -> Int64 :: *)
                                   ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *))
                        GHC.Int.$fBitsInt64_$ccomplement
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                :: (Int64 -> Int64 :: *) ~R# (CBlkSize -> CBlkSize :: *))
                        GHC.Int.$fBitsInt64_$cshift
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkSize -> Int -> CBlkSize :: *))
                        GHC.Int.$fBitsInt64_$crotate
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkSize -> Int -> CBlkSize :: *))
                        GHC.Int.$fBitsInt10
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                :: (Int64 :: *) ~R# (CBlkSize :: *))
                        GHC.Int.$fBitsInt64_$cbit
                        `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                :: (Int -> Int64 :: *) ~R# (Int -> CBlkSize :: *))
                        GHC.Int.$fBitsInt64_$csetBit
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkSize -> Int -> CBlkSize :: *))
                        GHC.Int.$fBitsInt64_$cclearBit
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkSize -> Int -> CBlkSize :: *))
                        GHC.Int.$fBitsInt64_$ccomplementBit
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkSize -> Int -> CBlkSize :: *))
                        GHC.Int.$fBitsInt64_$ctestBit
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Int -> Bool>_R
                                :: (Int64 -> Int -> Bool :: *) ~R# (CBlkSize -> Int -> Bool :: *))
                        GHC.Int.$fBitsInt64_$cbitSizeMaybe
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Maybe Int>_R
                                :: (Int64 -> Maybe Int :: *) ~R# (CBlkSize -> Maybe Int :: *))
                        GHC.Int.$fBitsInt64_$cfiniteBitSize
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Int>_R
                                :: (Int64 -> Int :: *) ~R# (CBlkSize -> Int :: *))
                        GHC.Int.$fBitsInt64_$cisSigned
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Bool>_R
                                :: (Int64 -> Bool :: *) ~R# (CBlkSize -> Bool :: *))
                        GHC.Int.$fBitsInt64_$cshiftL
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkSize -> Int -> CBlkSize :: *))
                        GHC.Int.$fBitsInt64_$cunsafeShiftL
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkSize -> Int -> CBlkSize :: *))
                        GHC.Int.$fBitsInt64_$cshiftR
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkSize -> Int -> CBlkSize :: *))
                        GHC.Int.$fBitsInt64_$cunsafeShiftR
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkSize -> Int -> CBlkSize :: *))
                        GHC.Int.$fBitsInt64_$crotateL
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkSize -> Int -> CBlkSize :: *))
                        GHC.Int.$fBitsInt64_$crotateR
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CBlkSize[0])
                                :: (Int64 -> Int -> Int64 :: *)
                                   ~R# (CBlkSize -> Int -> CBlkSize :: *))
                        GHC.Int.$fBitsInt64_$cpopCount
                        `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Int>_R
                                :: (Int64 -> Int :: *) ~R# (CBlkSize -> Int :: *))]
System.Posix.Types.$fBitsCBlkSize
  = Data.Bits.C:Bits
      @ CBlkSize
      System.Posix.Types.$fEqCBlkSize
      (GHC.Int.$fBitsInt64_$c.&.
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *)))
      (GHC.Int.$fBitsInt64_$c.|.
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *)))
      (GHC.Int.$fBitsInt64_$cxor
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CBlkSize -> CBlkSize -> CBlkSize :: *)))
      (GHC.Int.$fBitsInt64_$ccomplement
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int64 :: *) ~R# (CBlkSize -> CBlkSize :: *)))
      (GHC.Int.$fBitsInt64_$cshift
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkSize -> Int -> CBlkSize :: *)))
      (GHC.Int.$fBitsInt64_$crotate
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkSize -> Int -> CBlkSize :: *)))
      (GHC.Int.$fBitsInt10
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 :: *) ~R# (CBlkSize :: *)))
      (GHC.Int.$fBitsInt64_$cbit
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int -> Int64 :: *) ~R# (Int -> CBlkSize :: *)))
      (GHC.Int.$fBitsInt64_$csetBit
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkSize -> Int -> CBlkSize :: *)))
      (GHC.Int.$fBitsInt64_$cclearBit
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkSize -> Int -> CBlkSize :: *)))
      (GHC.Int.$fBitsInt64_$ccomplementBit
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkSize -> Int -> CBlkSize :: *)))
      (GHC.Int.$fBitsInt64_$ctestBit
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Int -> Bool>_R
               :: (Int64 -> Int -> Bool :: *) ~R# (CBlkSize -> Int -> Bool :: *)))
      (GHC.Int.$fBitsInt64_$cbitSizeMaybe
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Maybe Int>_R
               :: (Int64 -> Maybe Int :: *) ~R# (CBlkSize -> Maybe Int :: *)))
      (GHC.Int.$fBitsInt64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CBlkSize -> Int :: *)))
      (GHC.Int.$fBitsInt64_$cisSigned
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Bool>_R
               :: (Int64 -> Bool :: *) ~R# (CBlkSize -> Bool :: *)))
      (GHC.Int.$fBitsInt64_$cshiftL
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkSize -> Int -> CBlkSize :: *)))
      (GHC.Int.$fBitsInt64_$cunsafeShiftL
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkSize -> Int -> CBlkSize :: *)))
      (GHC.Int.$fBitsInt64_$cshiftR
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkSize -> Int -> CBlkSize :: *)))
      (GHC.Int.$fBitsInt64_$cunsafeShiftR
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkSize -> Int -> CBlkSize :: *)))
      (GHC.Int.$fBitsInt64_$crotateL
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkSize -> Int -> CBlkSize :: *)))
      (GHC.Int.$fBitsInt64_$crotateR
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CBlkSize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CBlkSize -> Int -> CBlkSize :: *)))
      (GHC.Int.$fBitsInt64_$cpopCount
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CBlkSize -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
System.Posix.Types.$fFiniteBitsCBlkSize [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits CBlkSize
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: CBlkSize
                              System.Posix.Types.$fBitsCBlkSize
                              GHC.Int.$fBitsInt64_$cfiniteBitSize
                              `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Int>_R
                                      :: (Int64 -> Int :: *) ~R# (CBlkSize -> Int :: *))
                              GHC.Int.$fFiniteBitsInt64_$ccountLeadingZeros
                              `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Int>_R
                                      :: (Int64 -> Int :: *) ~R# (CBlkSize -> Int :: *))
                              GHC.Int.$fFiniteBitsInt64_$ccountTrailingZeros
                              `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Int>_R
                                      :: (Int64 -> Int :: *) ~R# (CBlkSize -> Int :: *))]
System.Posix.Types.$fFiniteBitsCBlkSize
  = Data.Bits.C:FiniteBits
      @ CBlkSize
      System.Posix.Types.$fBitsCBlkSize
      (GHC.Int.$fBitsInt64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CBlkSize -> Int :: *)))
      (GHC.Int.$fFiniteBitsInt64_$ccountLeadingZeros
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CBlkSize -> Int :: *)))
      (GHC.Int.$fFiniteBitsInt64_$ccountTrailingZeros
       `cast` (Sym (System.Posix.Types.N:CBlkSize[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CBlkSize -> Int :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCRLim [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CRLim
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CRLim
                       GHC.Word.$fShowWord64_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CRLim[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Word64 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CRLim -> [Char] -> [Char] :: *))
                       GHC.Word.$fShowWord64_$cshow
                       `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <[Char]>_R
                               :: (Word64 -> [Char] :: *) ~R# (CRLim -> [Char] :: *))
                       GHC.Word.$fShowWord64_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CRLim[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Word64] -> [Char] -> [Char] :: *)
                                  ~R# ([CRLim] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCRLim
  = GHC.Show.C:Show
      @ CRLim
      (GHC.Word.$fShowWord64_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Word64 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CRLim -> [Char] -> [Char] :: *)))
      (GHC.Word.$fShowWord64_$cshow
       `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <[Char]>_R
               :: (Word64 -> [Char] :: *) ~R# (CRLim -> [Char] :: *)))
      (GHC.Word.$fShowWord64_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CRLim[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Word64] -> [Char] -> [Char] :: *)
                  ~R# ([CRLim] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCRLim [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CRLim
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CRLim
                       GHC.Read.$fReadWord64_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,) (Sym (System.Posix.Types.N:CRLim[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Word64, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CRLim, [Char])] :: *))
                       GHC.Read.$fReadWord64_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CRLim[0])])_R <[Char]>_R)_R])_R
                               :: ([Char] -> [([Word64], [Char])] :: *)
                                  ~R# ([Char] -> [([CRLim], [Char])] :: *))
                       GHC.Read.$fReadWord13
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Word64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      (System.Posix.Types.N:CRLim[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Word64 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CRLim :: *))
                       GHC.Read.$fReadWord11
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Word64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        ([System.Posix.Types.N:CRLim[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Word64] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CRLim] :: *))]
System.Posix.Types.$fReadCRLim
  = GHC.Read.C:Read
      @ CRLim
      (GHC.Read.$fReadWord64_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,) (Sym (System.Posix.Types.N:CRLim[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Word64, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CRLim, [Char])] :: *)))
      (GHC.Read.$fReadWord64_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CRLim[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Word64], [Char])] :: *)
                  ~R# ([Char] -> [([CRLim], [Char])] :: *)))
      (GHC.Read.$fReadWord13
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Word64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      (System.Posix.Types.N:CRLim[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Word64 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CRLim :: *)))
      (GHC.Read.$fReadWord11
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Word64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        ([System.Posix.Types.N:CRLim[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Word64] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CRLim] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
System.Posix.Types.$fBoundedCRLim [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded CRLim
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: CRLim
                          GHC.Word.$fBitsWord7
                          `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                  :: (Word64 :: *) ~R# (CRLim :: *))
                          GHC.Word.$fBoundedWord64_$cmaxBound
                          `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                  :: (Word64 :: *) ~R# (CRLim :: *))]
System.Posix.Types.$fBoundedCRLim
  = GHC.Enum.C:Bounded
      @ CRLim
      (GHC.Word.$fBitsWord7
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 :: *) ~R# (CRLim :: *)))
      (GHC.Word.$fBoundedWord64_$cmaxBound
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 :: *) ~R# (CRLim :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCRLim [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CRLim
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CRLim
                                   Foreign.Storable.$fStorableWord64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Int>_R
                                           :: (Word64 -> Int :: *) ~R# (CRLim -> Int :: *))
                                   Foreign.Storable.$fStorableWord64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Int>_R
                                           :: (Word64 -> Int :: *) ~R# (CRLim -> Int :: *))
                                   GHC.Storable.readWord64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CRLim))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CRLim[0]))
                                           :: (Ptr Word64
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word64 #) :: *)
                                              ~R# (Ptr CRLim -> Int -> IO CRLim :: *))
                                   GHC.Storable.writeWord64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CRLim))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CRLim[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word64
                                               -> Int
                                               -> Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CRLim -> Int -> CRLim -> IO () :: *))
                                   Foreign.Storable.$fStorableWord18
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CRLim[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word64 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CRLim :: *))
                                   Foreign.Storable.$fStorableWord17
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CRLim[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> CRLim -> IO () :: *))
                                   Foreign.Storable.$fStorableWord15
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CRLim))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CRLim[0]))
                                           :: (Ptr Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word64 #) :: *)
                                              ~R# (Ptr CRLim -> IO CRLim :: *))
                                   Foreign.Storable.$fStorableWord14
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CRLim))_R
                                           ->_R Sym (System.Posix.Types.N:CRLim[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word64
                                               -> Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CRLim -> CRLim -> IO () :: *))]
System.Posix.Types.$fStorableCRLim
  = Foreign.Storable.C:Storable
      @ CRLim
      (Foreign.Storable.$fStorableWord64_$calignment
       `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CRLim -> Int :: *)))
      (Foreign.Storable.$fStorableWord64_$calignment
       `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CRLim -> Int :: *)))
      (GHC.Storable.readWord64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CRLim))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CRLim[0]))
               :: (Ptr Word64
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                  ~R# (Ptr CRLim -> Int -> IO CRLim :: *)))
      (GHC.Storable.writeWord64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CRLim))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word64
                   -> Int
                   -> Word64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CRLim -> Int -> CRLim -> IO () :: *)))
      (Foreign.Storable.$fStorableWord18
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CRLim[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CRLim :: *)))
      (Foreign.Storable.$fStorableWord17
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Word64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CRLim -> IO () :: *)))
      (Foreign.Storable.$fStorableWord15
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CRLim))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CRLim[0]))
               :: (Ptr Word64
                   -> State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                  ~R# (Ptr CRLim -> IO CRLim :: *)))
      (Foreign.Storable.$fStorableWord14
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CRLim))_R
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word64
                   -> Word64 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CRLim -> CRLim -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCRLim [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CRLim
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CRLim
                       GHC.Word.$fEnumWord64_$csucc
                       `cast` (Sym (System.Posix.Types.N:CRLim[0])
                               ->_R Sym (System.Posix.Types.N:CRLim[0])
                               :: (Word64 -> Word64 :: *) ~R# (CRLim -> CRLim :: *))
                       GHC.Word.$fEnumWord64_$cpred
                       `cast` (Sym (System.Posix.Types.N:CRLim[0])
                               ->_R Sym (System.Posix.Types.N:CRLim[0])
                               :: (Word64 -> Word64 :: *) ~R# (CRLim -> CRLim :: *))
                       GHC.Word.$fEnumWord64_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CRLim[0])
                               :: (Int -> Word64 :: *) ~R# (Int -> CRLim :: *))
                       GHC.Word.$fEnumWord64_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Int>_R
                               :: (Word64 -> Int :: *) ~R# (CRLim -> Int :: *))
                       GHC.Word.$fEnumWord64_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CRLim[0])
                               ->_R ([Sym (System.Posix.Types.N:CRLim[0])])_R
                               :: (Word64 -> [Word64] :: *) ~R# (CRLim -> [CRLim] :: *))
                       GHC.Word.$fEnumWord64_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CRLim[0])
                               ->_R Sym (System.Posix.Types.N:CRLim[0])
                               ->_R ([Sym (System.Posix.Types.N:CRLim[0])])_R
                               :: (Word64 -> Word64 -> [Word64] :: *)
                                  ~R# (CRLim -> CRLim -> [CRLim] :: *))
                       GHC.Word.$fEnumWord64_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CRLim[0])
                               ->_R Sym (System.Posix.Types.N:CRLim[0])
                               ->_R ([Sym (System.Posix.Types.N:CRLim[0])])_R
                               :: (Word64 -> Word64 -> [Word64] :: *)
                                  ~R# (CRLim -> CRLim -> [CRLim] :: *))
                       GHC.Word.$fEnumWord64_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CRLim[0])
                               ->_R Sym (System.Posix.Types.N:CRLim[0])
                               ->_R Sym (System.Posix.Types.N:CRLim[0])
                               ->_R ([Sym (System.Posix.Types.N:CRLim[0])])_R
                               :: (Word64 -> Word64 -> Word64 -> [Word64] :: *)
                                  ~R# (CRLim -> CRLim -> CRLim -> [CRLim] :: *))]
System.Posix.Types.$fEnumCRLim
  = GHC.Enum.C:Enum
      @ CRLim
      (GHC.Word.$fEnumWord64_$csucc
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Word64 :: *) ~R# (CRLim -> CRLim :: *)))
      (GHC.Word.$fEnumWord64_$cpred
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Word64 :: *) ~R# (CRLim -> CRLim :: *)))
      (GHC.Word.$fEnumWord64_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Int -> Word64 :: *) ~R# (Int -> CRLim :: *)))
      (GHC.Word.$fEnumWord64_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CRLim -> Int :: *)))
      (GHC.Word.$fEnumWord64_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R ([Sym (System.Posix.Types.N:CRLim[0])])_R
               :: (Word64 -> [Word64] :: *) ~R# (CRLim -> [CRLim] :: *)))
      (GHC.Word.$fEnumWord64_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R ([Sym (System.Posix.Types.N:CRLim[0])])_R
               :: (Word64 -> Word64 -> [Word64] :: *)
                  ~R# (CRLim -> CRLim -> [CRLim] :: *)))
      (GHC.Word.$fEnumWord64_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R ([Sym (System.Posix.Types.N:CRLim[0])])_R
               :: (Word64 -> Word64 -> [Word64] :: *)
                  ~R# (CRLim -> CRLim -> [CRLim] :: *)))
      (GHC.Word.$fEnumWord64_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R ([Sym (System.Posix.Types.N:CRLim[0])])_R
               :: (Word64 -> Word64 -> Word64 -> [Word64] :: *)
                  ~R# (CRLim -> CRLim -> CRLim -> [CRLim] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCRLim [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CRLim
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CRLim
                     GHC.Word.$fNumWord64_$c+
                     `cast` (Sym (System.Posix.Types.N:CRLim[0])
                             ->_R Sym (System.Posix.Types.N:CRLim[0])
                             ->_R Sym (System.Posix.Types.N:CRLim[0])
                             :: (Word64 -> Word64 -> Word64 :: *)
                                ~R# (CRLim -> CRLim -> CRLim :: *))
                     GHC.Word.$fNumWord64_$c-
                     `cast` (Sym (System.Posix.Types.N:CRLim[0])
                             ->_R Sym (System.Posix.Types.N:CRLim[0])
                             ->_R Sym (System.Posix.Types.N:CRLim[0])
                             :: (Word64 -> Word64 -> Word64 :: *)
                                ~R# (CRLim -> CRLim -> CRLim :: *))
                     GHC.Word.$fNumWord64_$c*
                     `cast` (Sym (System.Posix.Types.N:CRLim[0])
                             ->_R Sym (System.Posix.Types.N:CRLim[0])
                             ->_R Sym (System.Posix.Types.N:CRLim[0])
                             :: (Word64 -> Word64 -> Word64 :: *)
                                ~R# (CRLim -> CRLim -> CRLim :: *))
                     GHC.Word.$fNumWord64_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CRLim[0])
                             ->_R Sym (System.Posix.Types.N:CRLim[0])
                             :: (Word64 -> Word64 :: *) ~R# (CRLim -> CRLim :: *))
                     GHC.Word.$fNumWord64_$cabs
                     `cast` (Sym (System.Posix.Types.N:CRLim[0])
                             ->_R Sym (System.Posix.Types.N:CRLim[0])
                             :: (Word64 -> Word64 :: *) ~R# (CRLim -> CRLim :: *))
                     GHC.Word.$fNumWord64_$csignum
                     `cast` (Sym (System.Posix.Types.N:CRLim[0])
                             ->_R Sym (System.Posix.Types.N:CRLim[0])
                             :: (Word64 -> Word64 :: *) ~R# (CRLim -> CRLim :: *))
                     GHC.Word.$fNumWord64_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CRLim[0])
                             :: (Integer -> Word64 :: *) ~R# (Integer -> CRLim :: *))]
System.Posix.Types.$fNumCRLim
  = GHC.Num.C:Num
      @ CRLim
      (GHC.Word.$fNumWord64_$c+
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CRLim -> CRLim -> CRLim :: *)))
      (GHC.Word.$fNumWord64_$c-
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CRLim -> CRLim -> CRLim :: *)))
      (GHC.Word.$fNumWord64_$c*
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CRLim -> CRLim -> CRLim :: *)))
      (GHC.Word.$fNumWord64_$cnegate
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Word64 :: *) ~R# (CRLim -> CRLim :: *)))
      (GHC.Word.$fNumWord64_$cabs
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Word64 :: *) ~R# (CRLim -> CRLim :: *)))
      (GHC.Word.$fNumWord64_$csignum
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Word64 :: *) ~R# (CRLim -> CRLim :: *)))
      (GHC.Word.$fNumWord64_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Integer -> Word64 :: *) ~R# (Integer -> CRLim :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCRLim [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CRLim
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CRLim
                        GHC.Word.eqWord64
                        `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                ->_R <Bool>_R
                                :: (Word64 -> Word64 -> Bool :: *)
                                   ~R# (CRLim -> CRLim -> Bool :: *))
                        GHC.Word.neWord64
                        `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                ->_R <Bool>_R
                                :: (Word64 -> Word64 -> Bool :: *)
                                   ~R# (CRLim -> CRLim -> Bool :: *))]
System.Posix.Types.$fEqCRLim
  = GHC.Classes.C:Eq
      @ CRLim
      (GHC.Word.eqWord64
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CRLim -> CRLim -> Bool :: *)))
      (GHC.Word.neWord64
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CRLim -> CRLim -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCRLim [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CRLim
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CRLim
                         System.Posix.Types.$fEqCRLim
                         GHC.Word.$fOrdWord64_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                 ->_R Sym (System.Posix.Types.N:CRLim[0])
                                 ->_R <Ordering>_R
                                 :: (Word64 -> Word64 -> Ordering :: *)
                                    ~R# (CRLim -> CRLim -> Ordering :: *))
                         GHC.Word.ltWord64
                         `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                 ->_R Sym (System.Posix.Types.N:CRLim[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *)
                                    ~R# (CRLim -> CRLim -> Bool :: *))
                         GHC.Word.leWord64
                         `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                 ->_R Sym (System.Posix.Types.N:CRLim[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *)
                                    ~R# (CRLim -> CRLim -> Bool :: *))
                         GHC.Word.gtWord64
                         `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                 ->_R Sym (System.Posix.Types.N:CRLim[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *)
                                    ~R# (CRLim -> CRLim -> Bool :: *))
                         GHC.Word.geWord64
                         `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                 ->_R Sym (System.Posix.Types.N:CRLim[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *)
                                    ~R# (CRLim -> CRLim -> Bool :: *))
                         GHC.Word.$fOrdWord64_$cmax
                         `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                 ->_R Sym (System.Posix.Types.N:CRLim[0])
                                 ->_R Sym (System.Posix.Types.N:CRLim[0])
                                 :: (Word64 -> Word64 -> Word64 :: *)
                                    ~R# (CRLim -> CRLim -> CRLim :: *))
                         GHC.Word.$fOrdWord64_$cmin
                         `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                 ->_R Sym (System.Posix.Types.N:CRLim[0])
                                 ->_R Sym (System.Posix.Types.N:CRLim[0])
                                 :: (Word64 -> Word64 -> Word64 :: *)
                                    ~R# (CRLim -> CRLim -> CRLim :: *))]
System.Posix.Types.$fOrdCRLim
  = GHC.Classes.C:Ord
      @ CRLim
      System.Posix.Types.$fEqCRLim
      (GHC.Word.$fOrdWord64_$ccompare
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R <Ordering>_R
               :: (Word64 -> Word64 -> Ordering :: *)
                  ~R# (CRLim -> CRLim -> Ordering :: *)))
      (GHC.Word.ltWord64
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CRLim -> CRLim -> Bool :: *)))
      (GHC.Word.leWord64
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CRLim -> CRLim -> Bool :: *)))
      (GHC.Word.gtWord64
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CRLim -> CRLim -> Bool :: *)))
      (GHC.Word.geWord64
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CRLim -> CRLim -> Bool :: *)))
      (GHC.Word.$fOrdWord64_$cmax
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CRLim -> CRLim -> CRLim :: *)))
      (GHC.Word.$fOrdWord64_$cmin
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CRLim -> CRLim -> CRLim :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCRLim [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CRLim
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CRLim
                       System.Posix.Types.$fNumCRLim
                       System.Posix.Types.$fOrdCRLim
                       GHC.Word.$fRealWord64_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Ratio Integer>_R
                               :: (Word64 -> Ratio Integer :: *)
                                  ~R# (CRLim -> Ratio Integer :: *))]
System.Posix.Types.$fRealCRLim
  = GHC.Real.C:Real
      @ CRLim
      System.Posix.Types.$fNumCRLim
      System.Posix.Types.$fOrdCRLim
      (GHC.Word.$fRealWord64_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Ratio Integer>_R
               :: (Word64 -> Ratio Integer :: *)
                  ~R# (CRLim -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 58, joins: 0/0}
System.Posix.Types.$fIntegralCRLim [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral CRLim
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: CRLim
                           System.Posix.Types.$fRealCRLim
                           System.Posix.Types.$fEnumCRLim
                           GHC.Word.$fIntegralWord64_$cdiv
                           `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                   ->_R Sym (System.Posix.Types.N:CRLim[0])
                                   ->_R Sym (System.Posix.Types.N:CRLim[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CRLim -> CRLim -> CRLim :: *))
                           GHC.Word.$fIntegralWord64_$cmod
                           `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                   ->_R Sym (System.Posix.Types.N:CRLim[0])
                                   ->_R Sym (System.Posix.Types.N:CRLim[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CRLim -> CRLim -> CRLim :: *))
                           GHC.Word.$fIntegralWord64_$cdiv
                           `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                   ->_R Sym (System.Posix.Types.N:CRLim[0])
                                   ->_R Sym (System.Posix.Types.N:CRLim[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CRLim -> CRLim -> CRLim :: *))
                           GHC.Word.$fIntegralWord64_$cmod
                           `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                   ->_R Sym (System.Posix.Types.N:CRLim[0])
                                   ->_R Sym (System.Posix.Types.N:CRLim[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CRLim -> CRLim -> CRLim :: *))
                           GHC.Word.$fIntegralWord64_$cquotRem
                           `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                   ->_R Sym (System.Posix.Types.N:CRLim[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CRLim[0]))
                                           (Sym (System.Posix.Types.N:CRLim[0])))_R
                                   :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                                      ~R# (CRLim -> CRLim -> (CRLim, CRLim) :: *))
                           GHC.Word.$fIntegralWord64_$cdivMod
                           `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                   ->_R Sym (System.Posix.Types.N:CRLim[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CRLim[0]))
                                           (Sym (System.Posix.Types.N:CRLim[0])))_R
                                   :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                                      ~R# (CRLim -> CRLim -> (CRLim, CRLim) :: *))
                           GHC.Word.$fIntegralWord64_$ctoInteger
                           `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Integer>_R
                                   :: (Word64 -> Integer :: *) ~R# (CRLim -> Integer :: *))]
System.Posix.Types.$fIntegralCRLim
  = GHC.Real.C:Integral
      @ CRLim
      System.Posix.Types.$fRealCRLim
      System.Posix.Types.$fEnumCRLim
      (GHC.Word.$fIntegralWord64_$cdiv
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CRLim -> CRLim -> CRLim :: *)))
      (GHC.Word.$fIntegralWord64_$cmod
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CRLim -> CRLim -> CRLim :: *)))
      (GHC.Word.$fIntegralWord64_$cdiv
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CRLim -> CRLim -> CRLim :: *)))
      (GHC.Word.$fIntegralWord64_$cmod
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CRLim -> CRLim -> CRLim :: *)))
      (GHC.Word.$fIntegralWord64_$cquotRem
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CRLim[0]))
                       (Sym (System.Posix.Types.N:CRLim[0])))_R
               :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                  ~R# (CRLim -> CRLim -> (CRLim, CRLim) :: *)))
      (GHC.Word.$fIntegralWord64_$cdivMod
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CRLim[0]))
                       (Sym (System.Posix.Types.N:CRLim[0])))_R
               :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                  ~R# (CRLim -> CRLim -> (CRLim, CRLim) :: *)))
      (GHC.Word.$fIntegralWord64_$ctoInteger
       `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Integer>_R
               :: (Word64 -> Integer :: *) ~R# (CRLim -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
System.Posix.Types.$fBitsCRLim [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits CRLim
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: CRLim
                        System.Posix.Types.$fEqCRLim
                        GHC.Word.$fBitsWord64_$c.&.
                        `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                :: (Word64 -> Word64 -> Word64 :: *)
                                   ~R# (CRLim -> CRLim -> CRLim :: *))
                        GHC.Word.$fBitsWord64_$c.|.
                        `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                :: (Word64 -> Word64 -> Word64 :: *)
                                   ~R# (CRLim -> CRLim -> CRLim :: *))
                        GHC.Word.$fBitsWord64_$cxor
                        `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                :: (Word64 -> Word64 -> Word64 :: *)
                                   ~R# (CRLim -> CRLim -> CRLim :: *))
                        GHC.Word.$fBitsWord64_$ccomplement
                        `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                :: (Word64 -> Word64 :: *) ~R# (CRLim -> CRLim :: *))
                        GHC.Word.$fBitsWord64_$cshift
                        `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CRLim -> Int -> CRLim :: *))
                        GHC.Word.$fBitsWord64_$crotate
                        `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CRLim -> Int -> CRLim :: *))
                        GHC.Word.$fBitsWord7
                        `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                :: (Word64 :: *) ~R# (CRLim :: *))
                        GHC.Word.$fBitsWord64_$cbit
                        `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CRLim[0])
                                :: (Int -> Word64 :: *) ~R# (Int -> CRLim :: *))
                        GHC.Word.$fBitsWord64_$csetBit
                        `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CRLim -> Int -> CRLim :: *))
                        GHC.Word.$fBitsWord64_$cclearBit
                        `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CRLim -> Int -> CRLim :: *))
                        GHC.Word.$fBitsWord64_$ccomplementBit
                        `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CRLim -> Int -> CRLim :: *))
                        GHC.Word.$fBitsWord64_$ctestBit
                        `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Int -> Bool>_R
                                :: (Word64 -> Int -> Bool :: *) ~R# (CRLim -> Int -> Bool :: *))
                        GHC.Word.$fBitsWord64_$cbitSizeMaybe
                        `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Maybe Int>_R
                                :: (Word64 -> Maybe Int :: *) ~R# (CRLim -> Maybe Int :: *))
                        GHC.Word.$fBitsWord64_$cfiniteBitSize
                        `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Int>_R
                                :: (Word64 -> Int :: *) ~R# (CRLim -> Int :: *))
                        GHC.Word.$fBitsWord64_$cisSigned
                        `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Bool>_R
                                :: (Word64 -> Bool :: *) ~R# (CRLim -> Bool :: *))
                        GHC.Word.$fBitsWord64_$cshiftL
                        `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CRLim -> Int -> CRLim :: *))
                        GHC.Word.$fBitsWord64_$cunsafeShiftL
                        `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CRLim -> Int -> CRLim :: *))
                        GHC.Word.$fBitsWord64_$cshiftR
                        `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CRLim -> Int -> CRLim :: *))
                        GHC.Word.$fBitsWord64_$cunsafeShiftR
                        `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CRLim -> Int -> CRLim :: *))
                        GHC.Word.$fBitsWord64_$crotateL
                        `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CRLim -> Int -> CRLim :: *))
                        GHC.Word.$fBitsWord64_$crotateR
                        `cast` (Sym (System.Posix.Types.N:CRLim[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CRLim[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CRLim -> Int -> CRLim :: *))
                        GHC.Word.$fBitsWord64_$cpopCount
                        `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Int>_R
                                :: (Word64 -> Int :: *) ~R# (CRLim -> Int :: *))]
System.Posix.Types.$fBitsCRLim
  = Data.Bits.C:Bits
      @ CRLim
      System.Posix.Types.$fEqCRLim
      (GHC.Word.$fBitsWord64_$c.&.
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CRLim -> CRLim -> CRLim :: *)))
      (GHC.Word.$fBitsWord64_$c.|.
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CRLim -> CRLim -> CRLim :: *)))
      (GHC.Word.$fBitsWord64_$cxor
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CRLim -> CRLim -> CRLim :: *)))
      (GHC.Word.$fBitsWord64_$ccomplement
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Word64 :: *) ~R# (CRLim -> CRLim :: *)))
      (GHC.Word.$fBitsWord64_$cshift
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CRLim -> Int -> CRLim :: *)))
      (GHC.Word.$fBitsWord64_$crotate
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CRLim -> Int -> CRLim :: *)))
      (GHC.Word.$fBitsWord7
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 :: *) ~R# (CRLim :: *)))
      (GHC.Word.$fBitsWord64_$cbit
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Int -> Word64 :: *) ~R# (Int -> CRLim :: *)))
      (GHC.Word.$fBitsWord64_$csetBit
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CRLim -> Int -> CRLim :: *)))
      (GHC.Word.$fBitsWord64_$cclearBit
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CRLim -> Int -> CRLim :: *)))
      (GHC.Word.$fBitsWord64_$ccomplementBit
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CRLim -> Int -> CRLim :: *)))
      (GHC.Word.$fBitsWord64_$ctestBit
       `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Int -> Bool>_R
               :: (Word64 -> Int -> Bool :: *) ~R# (CRLim -> Int -> Bool :: *)))
      (GHC.Word.$fBitsWord64_$cbitSizeMaybe
       `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Maybe Int>_R
               :: (Word64 -> Maybe Int :: *) ~R# (CRLim -> Maybe Int :: *)))
      (GHC.Word.$fBitsWord64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CRLim -> Int :: *)))
      (GHC.Word.$fBitsWord64_$cisSigned
       `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Bool>_R
               :: (Word64 -> Bool :: *) ~R# (CRLim -> Bool :: *)))
      (GHC.Word.$fBitsWord64_$cshiftL
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CRLim -> Int -> CRLim :: *)))
      (GHC.Word.$fBitsWord64_$cunsafeShiftL
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CRLim -> Int -> CRLim :: *)))
      (GHC.Word.$fBitsWord64_$cshiftR
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CRLim -> Int -> CRLim :: *)))
      (GHC.Word.$fBitsWord64_$cunsafeShiftR
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CRLim -> Int -> CRLim :: *)))
      (GHC.Word.$fBitsWord64_$crotateL
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CRLim -> Int -> CRLim :: *)))
      (GHC.Word.$fBitsWord64_$crotateR
       `cast` (Sym (System.Posix.Types.N:CRLim[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CRLim[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CRLim -> Int -> CRLim :: *)))
      (GHC.Word.$fBitsWord64_$cpopCount
       `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CRLim -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
System.Posix.Types.$fFiniteBitsCRLim [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits CRLim
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: CRLim
                              System.Posix.Types.$fBitsCRLim
                              GHC.Word.$fBitsWord64_$cfiniteBitSize
                              `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Int>_R
                                      :: (Word64 -> Int :: *) ~R# (CRLim -> Int :: *))
                              GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                              `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Int>_R
                                      :: (Word64 -> Int :: *) ~R# (CRLim -> Int :: *))
                              GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                              `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Int>_R
                                      :: (Word64 -> Int :: *) ~R# (CRLim -> Int :: *))]
System.Posix.Types.$fFiniteBitsCRLim
  = Data.Bits.C:FiniteBits
      @ CRLim
      System.Posix.Types.$fBitsCRLim
      (GHC.Word.$fBitsWord64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CRLim -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
       `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CRLim -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
       `cast` (Sym (System.Posix.Types.N:CRLim[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CRLim -> Int :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCTcflag [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CTcflag
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CTcflag
                       GHC.Word.$fShowWord32_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CTcflag[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Word32 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CTcflag -> [Char] -> [Char] :: *))
                       GHC.Word.$fShowWord32_$cshow
                       `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <[Char]>_R
                               :: (Word32 -> [Char] :: *) ~R# (CTcflag -> [Char] :: *))
                       GHC.Word.$fShowWord32_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CTcflag[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Word32] -> [Char] -> [Char] :: *)
                                  ~R# ([CTcflag] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCTcflag
  = GHC.Show.C:Show
      @ CTcflag
      (GHC.Word.$fShowWord32_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Word32 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CTcflag -> [Char] -> [Char] :: *)))
      (GHC.Word.$fShowWord32_$cshow
       `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <[Char]>_R
               :: (Word32 -> [Char] :: *) ~R# (CTcflag -> [Char] :: *)))
      (GHC.Word.$fShowWord32_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CTcflag[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Word32] -> [Char] -> [Char] :: *)
                  ~R# ([CTcflag] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCTcflag [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CTcflag
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CTcflag
                       GHC.Read.$fReadWord32_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,)
                                         (Sym (System.Posix.Types.N:CTcflag[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Word32, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CTcflag, [Char])] :: *))
                       GHC.Read.$fReadWord32_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CTcflag[0])])_R
                                         <[Char]>_R)_R])_R
                               :: ([Char] -> [([Word32], [Char])] :: *)
                                  ~R# ([Char] -> [([CTcflag], [Char])] :: *))
                       GHC.Read.$fReadWord10
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Word32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      (System.Posix.Types.N:CTcflag[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Word32 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CTcflag :: *))
                       GHC.Read.$fReadWord7
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Word32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        ([System.Posix.Types.N:CTcflag[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Word32] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CTcflag] :: *))]
System.Posix.Types.$fReadCTcflag
  = GHC.Read.C:Read
      @ CTcflag
      (GHC.Read.$fReadWord32_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,)
                         (Sym (System.Posix.Types.N:CTcflag[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Word32, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CTcflag, [Char])] :: *)))
      (GHC.Read.$fReadWord32_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CTcflag[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Word32], [Char])] :: *)
                  ~R# ([Char] -> [([CTcflag], [Char])] :: *)))
      (GHC.Read.$fReadWord10
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Word32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      (System.Posix.Types.N:CTcflag[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Word32 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CTcflag :: *)))
      (GHC.Read.$fReadWord7
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Word32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        ([System.Posix.Types.N:CTcflag[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Word32] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CTcflag] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
System.Posix.Types.$fBoundedCTcflag [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded CTcflag
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: CTcflag
                          GHC.Word.$fBitsWord32_$cminBound
                          `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                  :: (Word32 :: *) ~R# (CTcflag :: *))
                          GHC.Word.$fBoundedWord32_$cmaxBound
                          `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                  :: (Word32 :: *) ~R# (CTcflag :: *))]
System.Posix.Types.$fBoundedCTcflag
  = GHC.Enum.C:Bounded
      @ CTcflag
      (GHC.Word.$fBitsWord32_$cminBound
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 :: *) ~R# (CTcflag :: *)))
      (GHC.Word.$fBoundedWord32_$cmaxBound
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 :: *) ~R# (CTcflag :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCTcflag [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CTcflag
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CTcflag
                                   Foreign.Storable.$fStorableWord32_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Int>_R
                                           :: (Word32 -> Int :: *) ~R# (CTcflag -> Int :: *))
                                   Foreign.Storable.$fStorableWord32_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Int>_R
                                           :: (Word32 -> Int :: *) ~R# (CTcflag -> Int :: *))
                                   GHC.Storable.readWord32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CTcflag))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CTcflag[0]))
                                           :: (Ptr Word32
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word32 #) :: *)
                                              ~R# (Ptr CTcflag -> Int -> IO CTcflag :: *))
                                   GHC.Storable.writeWord32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CTcflag))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word32
                                               -> Int
                                               -> Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CTcflag -> Int -> CTcflag -> IO () :: *))
                                   Foreign.Storable.$fStorableWord13
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CTcflag[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word32 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CTcflag :: *))
                                   Foreign.Storable.$fStorableWord12
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> CTcflag -> IO () :: *))
                                   Foreign.Storable.$fStorableWord11
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CTcflag))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CTcflag[0]))
                                           :: (Ptr Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word32 #) :: *)
                                              ~R# (Ptr CTcflag -> IO CTcflag :: *))
                                   Foreign.Storable.$fStorableWord10
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CTcflag))_R
                                           ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word32
                                               -> Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CTcflag -> CTcflag -> IO () :: *))]
System.Posix.Types.$fStorableCTcflag
  = Foreign.Storable.C:Storable
      @ CTcflag
      (Foreign.Storable.$fStorableWord32_$calignment
       `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CTcflag -> Int :: *)))
      (Foreign.Storable.$fStorableWord32_$calignment
       `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CTcflag -> Int :: *)))
      (GHC.Storable.readWord32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CTcflag))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CTcflag[0]))
               :: (Ptr Word32
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word32 #) :: *)
                  ~R# (Ptr CTcflag -> Int -> IO CTcflag :: *)))
      (GHC.Storable.writeWord32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CTcflag))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word32
                   -> Int
                   -> Word32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CTcflag -> Int -> CTcflag -> IO () :: *)))
      (Foreign.Storable.$fStorableWord13
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CTcflag[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word32 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CTcflag :: *)))
      (Foreign.Storable.$fStorableWord12
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Word32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CTcflag -> IO () :: *)))
      (Foreign.Storable.$fStorableWord11
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CTcflag))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CTcflag[0]))
               :: (Ptr Word32
                   -> State# RealWorld -> (# State# RealWorld, Word32 #) :: *)
                  ~R# (Ptr CTcflag -> IO CTcflag :: *)))
      (Foreign.Storable.$fStorableWord10
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CTcflag))_R
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word32
                   -> Word32 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CTcflag -> CTcflag -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCTcflag [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CTcflag
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CTcflag
                       GHC.Word.$fEnumWord32_$csucc
                       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                               ->_R Sym (System.Posix.Types.N:CTcflag[0])
                               :: (Word32 -> Word32 :: *) ~R# (CTcflag -> CTcflag :: *))
                       GHC.Word.$fEnumWord32_$cpred
                       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                               ->_R Sym (System.Posix.Types.N:CTcflag[0])
                               :: (Word32 -> Word32 :: *) ~R# (CTcflag -> CTcflag :: *))
                       GHC.Word.$fEnumWord32_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CTcflag[0])
                               :: (Int -> Word32 :: *) ~R# (Int -> CTcflag :: *))
                       GHC.Word.$fEnumWord32_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Int>_R
                               :: (Word32 -> Int :: *) ~R# (CTcflag -> Int :: *))
                       GHC.Word.$fEnumWord32_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                               ->_R ([Sym (System.Posix.Types.N:CTcflag[0])])_R
                               :: (Word32 -> [Word32] :: *) ~R# (CTcflag -> [CTcflag] :: *))
                       GHC.Word.$fEnumWord32_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                               ->_R Sym (System.Posix.Types.N:CTcflag[0])
                               ->_R ([Sym (System.Posix.Types.N:CTcflag[0])])_R
                               :: (Word32 -> Word32 -> [Word32] :: *)
                                  ~R# (CTcflag -> CTcflag -> [CTcflag] :: *))
                       GHC.Word.$fEnumWord32_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                               ->_R Sym (System.Posix.Types.N:CTcflag[0])
                               ->_R ([Sym (System.Posix.Types.N:CTcflag[0])])_R
                               :: (Word32 -> Word32 -> [Word32] :: *)
                                  ~R# (CTcflag -> CTcflag -> [CTcflag] :: *))
                       GHC.Word.$fEnumWord32_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                               ->_R Sym (System.Posix.Types.N:CTcflag[0])
                               ->_R Sym (System.Posix.Types.N:CTcflag[0])
                               ->_R ([Sym (System.Posix.Types.N:CTcflag[0])])_R
                               :: (Word32 -> Word32 -> Word32 -> [Word32] :: *)
                                  ~R# (CTcflag -> CTcflag -> CTcflag -> [CTcflag] :: *))]
System.Posix.Types.$fEnumCTcflag
  = GHC.Enum.C:Enum
      @ CTcflag
      (GHC.Word.$fEnumWord32_$csucc
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Word32 :: *) ~R# (CTcflag -> CTcflag :: *)))
      (GHC.Word.$fEnumWord32_$cpred
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Word32 :: *) ~R# (CTcflag -> CTcflag :: *)))
      (GHC.Word.$fEnumWord32_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Int -> Word32 :: *) ~R# (Int -> CTcflag :: *)))
      (GHC.Word.$fEnumWord32_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CTcflag -> Int :: *)))
      (GHC.Word.$fEnumWord32_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R ([Sym (System.Posix.Types.N:CTcflag[0])])_R
               :: (Word32 -> [Word32] :: *) ~R# (CTcflag -> [CTcflag] :: *)))
      (GHC.Word.$fEnumWord32_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R ([Sym (System.Posix.Types.N:CTcflag[0])])_R
               :: (Word32 -> Word32 -> [Word32] :: *)
                  ~R# (CTcflag -> CTcflag -> [CTcflag] :: *)))
      (GHC.Word.$fEnumWord32_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R ([Sym (System.Posix.Types.N:CTcflag[0])])_R
               :: (Word32 -> Word32 -> [Word32] :: *)
                  ~R# (CTcflag -> CTcflag -> [CTcflag] :: *)))
      (GHC.Word.$fEnumWord32_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R ([Sym (System.Posix.Types.N:CTcflag[0])])_R
               :: (Word32 -> Word32 -> Word32 -> [Word32] :: *)
                  ~R# (CTcflag -> CTcflag -> CTcflag -> [CTcflag] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCTcflag [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CTcflag
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CTcflag
                     GHC.Word.$fNumWord32_$c+
                     `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                             ->_R Sym (System.Posix.Types.N:CTcflag[0])
                             ->_R Sym (System.Posix.Types.N:CTcflag[0])
                             :: (Word32 -> Word32 -> Word32 :: *)
                                ~R# (CTcflag -> CTcflag -> CTcflag :: *))
                     GHC.Word.$fNumWord32_$c-
                     `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                             ->_R Sym (System.Posix.Types.N:CTcflag[0])
                             ->_R Sym (System.Posix.Types.N:CTcflag[0])
                             :: (Word32 -> Word32 -> Word32 :: *)
                                ~R# (CTcflag -> CTcflag -> CTcflag :: *))
                     GHC.Word.$fNumWord32_$c*
                     `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                             ->_R Sym (System.Posix.Types.N:CTcflag[0])
                             ->_R Sym (System.Posix.Types.N:CTcflag[0])
                             :: (Word32 -> Word32 -> Word32 :: *)
                                ~R# (CTcflag -> CTcflag -> CTcflag :: *))
                     GHC.Word.$fNumWord32_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                             ->_R Sym (System.Posix.Types.N:CTcflag[0])
                             :: (Word32 -> Word32 :: *) ~R# (CTcflag -> CTcflag :: *))
                     GHC.Word.$fNumWord32_$cabs
                     `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                             ->_R Sym (System.Posix.Types.N:CTcflag[0])
                             :: (Word32 -> Word32 :: *) ~R# (CTcflag -> CTcflag :: *))
                     GHC.Word.$fNumWord32_$csignum
                     `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                             ->_R Sym (System.Posix.Types.N:CTcflag[0])
                             :: (Word32 -> Word32 :: *) ~R# (CTcflag -> CTcflag :: *))
                     GHC.Word.$fNumWord32_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CTcflag[0])
                             :: (Integer -> Word32 :: *) ~R# (Integer -> CTcflag :: *))]
System.Posix.Types.$fNumCTcflag
  = GHC.Num.C:Num
      @ CTcflag
      (GHC.Word.$fNumWord32_$c+
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CTcflag -> CTcflag -> CTcflag :: *)))
      (GHC.Word.$fNumWord32_$c-
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CTcflag -> CTcflag -> CTcflag :: *)))
      (GHC.Word.$fNumWord32_$c*
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CTcflag -> CTcflag -> CTcflag :: *)))
      (GHC.Word.$fNumWord32_$cnegate
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Word32 :: *) ~R# (CTcflag -> CTcflag :: *)))
      (GHC.Word.$fNumWord32_$cabs
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Word32 :: *) ~R# (CTcflag -> CTcflag :: *)))
      (GHC.Word.$fNumWord32_$csignum
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Word32 :: *) ~R# (CTcflag -> CTcflag :: *)))
      (GHC.Word.$fNumWord32_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Integer -> Word32 :: *) ~R# (Integer -> CTcflag :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCTcflag [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CTcflag
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CTcflag
                        GHC.Word.eqWord32
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R <Bool>_R
                                :: (Word32 -> Word32 -> Bool :: *)
                                   ~R# (CTcflag -> CTcflag -> Bool :: *))
                        GHC.Word.neWord32
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R <Bool>_R
                                :: (Word32 -> Word32 -> Bool :: *)
                                   ~R# (CTcflag -> CTcflag -> Bool :: *))]
System.Posix.Types.$fEqCTcflag
  = GHC.Classes.C:Eq
      @ CTcflag
      (GHC.Word.eqWord32
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CTcflag -> CTcflag -> Bool :: *)))
      (GHC.Word.neWord32
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CTcflag -> CTcflag -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCTcflag [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CTcflag
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CTcflag
                         System.Posix.Types.$fEqCTcflag
                         GHC.Word.$fOrdWord32_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                 ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                 ->_R <Ordering>_R
                                 :: (Word32 -> Word32 -> Ordering :: *)
                                    ~R# (CTcflag -> CTcflag -> Ordering :: *))
                         GHC.Word.ltWord32
                         `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                 ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *)
                                    ~R# (CTcflag -> CTcflag -> Bool :: *))
                         GHC.Word.leWord32
                         `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                 ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *)
                                    ~R# (CTcflag -> CTcflag -> Bool :: *))
                         GHC.Word.gtWord32
                         `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                 ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *)
                                    ~R# (CTcflag -> CTcflag -> Bool :: *))
                         GHC.Word.geWord32
                         `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                 ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *)
                                    ~R# (CTcflag -> CTcflag -> Bool :: *))
                         GHC.Word.$fOrdWord32_$cmax
                         `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                 ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                 ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                 :: (Word32 -> Word32 -> Word32 :: *)
                                    ~R# (CTcflag -> CTcflag -> CTcflag :: *))
                         GHC.Word.$fOrdWord32_$cmin
                         `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                 ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                 ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                 :: (Word32 -> Word32 -> Word32 :: *)
                                    ~R# (CTcflag -> CTcflag -> CTcflag :: *))]
System.Posix.Types.$fOrdCTcflag
  = GHC.Classes.C:Ord
      @ CTcflag
      System.Posix.Types.$fEqCTcflag
      (GHC.Word.$fOrdWord32_$ccompare
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Ordering>_R
               :: (Word32 -> Word32 -> Ordering :: *)
                  ~R# (CTcflag -> CTcflag -> Ordering :: *)))
      (GHC.Word.ltWord32
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CTcflag -> CTcflag -> Bool :: *)))
      (GHC.Word.leWord32
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CTcflag -> CTcflag -> Bool :: *)))
      (GHC.Word.gtWord32
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CTcflag -> CTcflag -> Bool :: *)))
      (GHC.Word.geWord32
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CTcflag -> CTcflag -> Bool :: *)))
      (GHC.Word.$fOrdWord32_$cmax
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CTcflag -> CTcflag -> CTcflag :: *)))
      (GHC.Word.$fOrdWord32_$cmin
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CTcflag -> CTcflag -> CTcflag :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCTcflag [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CTcflag
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CTcflag
                       System.Posix.Types.$fNumCTcflag
                       System.Posix.Types.$fOrdCTcflag
                       GHC.Word.$fRealWord32_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                               ->_R <Ratio Integer>_R
                               :: (Word32 -> Ratio Integer :: *)
                                  ~R# (CTcflag -> Ratio Integer :: *))]
System.Posix.Types.$fRealCTcflag
  = GHC.Real.C:Real
      @ CTcflag
      System.Posix.Types.$fNumCTcflag
      System.Posix.Types.$fOrdCTcflag
      (GHC.Word.$fRealWord32_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Ratio Integer>_R
               :: (Word32 -> Ratio Integer :: *)
                  ~R# (CTcflag -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 58, joins: 0/0}
System.Posix.Types.$fIntegralCTcflag [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral CTcflag
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: CTcflag
                           System.Posix.Types.$fRealCTcflag
                           System.Posix.Types.$fEnumCTcflag
                           GHC.Word.$fIntegralWord32_$cquot
                           `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                   ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                   ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CTcflag -> CTcflag -> CTcflag :: *))
                           GHC.Word.$fIntegralWord32_$crem
                           `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                   ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                   ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CTcflag -> CTcflag -> CTcflag :: *))
                           GHC.Word.$fIntegralWord32_$cquot
                           `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                   ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                   ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CTcflag -> CTcflag -> CTcflag :: *))
                           GHC.Word.$fIntegralWord32_$crem
                           `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                   ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                   ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CTcflag -> CTcflag -> CTcflag :: *))
                           GHC.Word.$fIntegralWord32_$cquotRem
                           `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                   ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CTcflag[0]))
                                           (Sym (System.Posix.Types.N:CTcflag[0])))_R
                                   :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                                      ~R# (CTcflag -> CTcflag -> (CTcflag, CTcflag) :: *))
                           GHC.Word.$fIntegralWord32_$cdivMod
                           `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                   ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CTcflag[0]))
                                           (Sym (System.Posix.Types.N:CTcflag[0])))_R
                                   :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                                      ~R# (CTcflag -> CTcflag -> (CTcflag, CTcflag) :: *))
                           GHC.Word.$ctoInteger2
                           `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Integer>_R
                                   :: (Word32 -> Integer :: *) ~R# (CTcflag -> Integer :: *))]
System.Posix.Types.$fIntegralCTcflag
  = GHC.Real.C:Integral
      @ CTcflag
      System.Posix.Types.$fRealCTcflag
      System.Posix.Types.$fEnumCTcflag
      (GHC.Word.$fIntegralWord32_$cquot
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CTcflag -> CTcflag -> CTcflag :: *)))
      (GHC.Word.$fIntegralWord32_$crem
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CTcflag -> CTcflag -> CTcflag :: *)))
      (GHC.Word.$fIntegralWord32_$cquot
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CTcflag -> CTcflag -> CTcflag :: *)))
      (GHC.Word.$fIntegralWord32_$crem
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CTcflag -> CTcflag -> CTcflag :: *)))
      (GHC.Word.$fIntegralWord32_$cquotRem
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CTcflag[0]))
                       (Sym (System.Posix.Types.N:CTcflag[0])))_R
               :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                  ~R# (CTcflag -> CTcflag -> (CTcflag, CTcflag) :: *)))
      (GHC.Word.$fIntegralWord32_$cdivMod
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CTcflag[0]))
                       (Sym (System.Posix.Types.N:CTcflag[0])))_R
               :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                  ~R# (CTcflag -> CTcflag -> (CTcflag, CTcflag) :: *)))
      (GHC.Word.$ctoInteger2
       `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Integer>_R
               :: (Word32 -> Integer :: *) ~R# (CTcflag -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
System.Posix.Types.$fBitsCTcflag [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits CTcflag
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: CTcflag
                        System.Posix.Types.$fEqCTcflag
                        GHC.Word.$fBitsWord32_$c.&.
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                :: (Word32 -> Word32 -> Word32 :: *)
                                   ~R# (CTcflag -> CTcflag -> CTcflag :: *))
                        GHC.Word.$fBitsWord32_$c.|.
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                :: (Word32 -> Word32 -> Word32 :: *)
                                   ~R# (CTcflag -> CTcflag -> CTcflag :: *))
                        GHC.Word.$fBitsWord32_$cxor
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                :: (Word32 -> Word32 -> Word32 :: *)
                                   ~R# (CTcflag -> CTcflag -> CTcflag :: *))
                        GHC.Word.$fBitsWord32_$ccomplement
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                :: (Word32 -> Word32 :: *) ~R# (CTcflag -> CTcflag :: *))
                        GHC.Word.$fBitsWord32_$cshift
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (CTcflag -> Int -> CTcflag :: *))
                        GHC.Word.$fBitsWord32_$crotate
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (CTcflag -> Int -> CTcflag :: *))
                        GHC.Word.$fBitsWord32_$cminBound
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                :: (Word32 :: *) ~R# (CTcflag :: *))
                        GHC.Word.$fBitsWord32_$cbit
                        `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                :: (Int -> Word32 :: *) ~R# (Int -> CTcflag :: *))
                        GHC.Word.$fBitsWord32_$csetBit
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (CTcflag -> Int -> CTcflag :: *))
                        GHC.Word.$fBitsWord32_$cclearBit
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (CTcflag -> Int -> CTcflag :: *))
                        GHC.Word.$fBitsWord32_$ccomplementBit
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (CTcflag -> Int -> CTcflag :: *))
                        GHC.Word.$fBitsWord32_$ctestBit
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Int -> Bool>_R
                                :: (Word32 -> Int -> Bool :: *) ~R# (CTcflag -> Int -> Bool :: *))
                        GHC.Word.$fBitsWord32_$cbitSizeMaybe
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Maybe Int>_R
                                :: (Word32 -> Maybe Int :: *) ~R# (CTcflag -> Maybe Int :: *))
                        GHC.Word.$fBitsWord32_$cfiniteBitSize
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Int>_R
                                :: (Word32 -> Int :: *) ~R# (CTcflag -> Int :: *))
                        GHC.Word.$fBitsWord32_$cisSigned
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Bool>_R
                                :: (Word32 -> Bool :: *) ~R# (CTcflag -> Bool :: *))
                        GHC.Word.$fBitsWord32_$cshiftL
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (CTcflag -> Int -> CTcflag :: *))
                        GHC.Word.$fBitsWord32_$cunsafeShiftL
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (CTcflag -> Int -> CTcflag :: *))
                        GHC.Word.$fBitsWord32_$cshiftR
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (CTcflag -> Int -> CTcflag :: *))
                        GHC.Word.$fBitsWord32_$cunsafeShiftR
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (CTcflag -> Int -> CTcflag :: *))
                        GHC.Word.$fBitsWord32_$crotateL
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (CTcflag -> Int -> CTcflag :: *))
                        GHC.Word.$fBitsWord32_$crotateR
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CTcflag[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (CTcflag -> Int -> CTcflag :: *))
                        GHC.Word.$fBitsWord32_$cpopCount
                        `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Int>_R
                                :: (Word32 -> Int :: *) ~R# (CTcflag -> Int :: *))]
System.Posix.Types.$fBitsCTcflag
  = Data.Bits.C:Bits
      @ CTcflag
      System.Posix.Types.$fEqCTcflag
      (GHC.Word.$fBitsWord32_$c.&.
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CTcflag -> CTcflag -> CTcflag :: *)))
      (GHC.Word.$fBitsWord32_$c.|.
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CTcflag -> CTcflag -> CTcflag :: *)))
      (GHC.Word.$fBitsWord32_$cxor
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CTcflag -> CTcflag -> CTcflag :: *)))
      (GHC.Word.$fBitsWord32_$ccomplement
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Word32 :: *) ~R# (CTcflag -> CTcflag :: *)))
      (GHC.Word.$fBitsWord32_$cshift
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CTcflag -> Int -> CTcflag :: *)))
      (GHC.Word.$fBitsWord32_$crotate
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CTcflag -> Int -> CTcflag :: *)))
      (GHC.Word.$fBitsWord32_$cminBound
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 :: *) ~R# (CTcflag :: *)))
      (GHC.Word.$fBitsWord32_$cbit
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Int -> Word32 :: *) ~R# (Int -> CTcflag :: *)))
      (GHC.Word.$fBitsWord32_$csetBit
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CTcflag -> Int -> CTcflag :: *)))
      (GHC.Word.$fBitsWord32_$cclearBit
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CTcflag -> Int -> CTcflag :: *)))
      (GHC.Word.$fBitsWord32_$ccomplementBit
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CTcflag -> Int -> CTcflag :: *)))
      (GHC.Word.$fBitsWord32_$ctestBit
       `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Int -> Bool>_R
               :: (Word32 -> Int -> Bool :: *) ~R# (CTcflag -> Int -> Bool :: *)))
      (GHC.Word.$fBitsWord32_$cbitSizeMaybe
       `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Maybe Int>_R
               :: (Word32 -> Maybe Int :: *) ~R# (CTcflag -> Maybe Int :: *)))
      (GHC.Word.$fBitsWord32_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CTcflag -> Int :: *)))
      (GHC.Word.$fBitsWord32_$cisSigned
       `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Bool>_R
               :: (Word32 -> Bool :: *) ~R# (CTcflag -> Bool :: *)))
      (GHC.Word.$fBitsWord32_$cshiftL
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CTcflag -> Int -> CTcflag :: *)))
      (GHC.Word.$fBitsWord32_$cunsafeShiftL
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CTcflag -> Int -> CTcflag :: *)))
      (GHC.Word.$fBitsWord32_$cshiftR
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CTcflag -> Int -> CTcflag :: *)))
      (GHC.Word.$fBitsWord32_$cunsafeShiftR
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CTcflag -> Int -> CTcflag :: *)))
      (GHC.Word.$fBitsWord32_$crotateL
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CTcflag -> Int -> CTcflag :: *)))
      (GHC.Word.$fBitsWord32_$crotateR
       `cast` (Sym (System.Posix.Types.N:CTcflag[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CTcflag[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CTcflag -> Int -> CTcflag :: *)))
      (GHC.Word.$fBitsWord32_$cpopCount
       `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CTcflag -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
System.Posix.Types.$fFiniteBitsCTcflag [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits CTcflag
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: CTcflag
                              System.Posix.Types.$fBitsCTcflag
                              GHC.Word.$fBitsWord32_$cfiniteBitSize
                              `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Int>_R
                                      :: (Word32 -> Int :: *) ~R# (CTcflag -> Int :: *))
                              GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
                              `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Int>_R
                                      :: (Word32 -> Int :: *) ~R# (CTcflag -> Int :: *))
                              GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros
                              `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Int>_R
                                      :: (Word32 -> Int :: *) ~R# (CTcflag -> Int :: *))]
System.Posix.Types.$fFiniteBitsCTcflag
  = Data.Bits.C:FiniteBits
      @ CTcflag
      System.Posix.Types.$fBitsCTcflag
      (GHC.Word.$fBitsWord32_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CTcflag -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
       `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CTcflag -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros
       `cast` (Sym (System.Posix.Types.N:CTcflag[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CTcflag -> Int :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCSpeed [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CSpeed
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CSpeed
                       GHC.Word.$fShowWord32_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CSpeed[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Word32 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CSpeed -> [Char] -> [Char] :: *))
                       GHC.Word.$fShowWord32_$cshow
                       `cast` (Sym (System.Posix.Types.N:CSpeed[0]) ->_R <[Char]>_R
                               :: (Word32 -> [Char] :: *) ~R# (CSpeed -> [Char] :: *))
                       GHC.Word.$fShowWord32_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CSpeed[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Word32] -> [Char] -> [Char] :: *)
                                  ~R# ([CSpeed] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCSpeed
  = GHC.Show.C:Show
      @ CSpeed
      (GHC.Word.$fShowWord32_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Word32 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CSpeed -> [Char] -> [Char] :: *)))
      (GHC.Word.$fShowWord32_$cshow
       `cast` (Sym (System.Posix.Types.N:CSpeed[0]) ->_R <[Char]>_R
               :: (Word32 -> [Char] :: *) ~R# (CSpeed -> [Char] :: *)))
      (GHC.Word.$fShowWord32_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CSpeed[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Word32] -> [Char] -> [Char] :: *)
                  ~R# ([CSpeed] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCSpeed [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CSpeed
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CSpeed
                       GHC.Read.$fReadWord32_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,)
                                         (Sym (System.Posix.Types.N:CSpeed[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Word32, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CSpeed, [Char])] :: *))
                       GHC.Read.$fReadWord32_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CSpeed[0])])_R
                                         <[Char]>_R)_R])_R
                               :: ([Char] -> [([Word32], [Char])] :: *)
                                  ~R# ([Char] -> [([CSpeed], [Char])] :: *))
                       GHC.Read.$fReadWord10
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Word32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      (System.Posix.Types.N:CSpeed[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Word32 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CSpeed :: *))
                       GHC.Read.$fReadWord7
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Word32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        ([System.Posix.Types.N:CSpeed[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Word32] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CSpeed] :: *))]
System.Posix.Types.$fReadCSpeed
  = GHC.Read.C:Read
      @ CSpeed
      (GHC.Read.$fReadWord32_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,)
                         (Sym (System.Posix.Types.N:CSpeed[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Word32, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CSpeed, [Char])] :: *)))
      (GHC.Read.$fReadWord32_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CSpeed[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Word32], [Char])] :: *)
                  ~R# ([Char] -> [([CSpeed], [Char])] :: *)))
      (GHC.Read.$fReadWord10
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Word32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      (System.Posix.Types.N:CSpeed[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Word32 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CSpeed :: *)))
      (GHC.Read.$fReadWord7
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Word32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        ([System.Posix.Types.N:CSpeed[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Word32] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CSpeed] :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCSpeed [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CSpeed
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CSpeed
                                   Foreign.Storable.$fStorableWord32_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CSpeed[0]) ->_R <Int>_R
                                           :: (Word32 -> Int :: *) ~R# (CSpeed -> Int :: *))
                                   Foreign.Storable.$fStorableWord32_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CSpeed[0]) ->_R <Int>_R
                                           :: (Word32 -> Int :: *) ~R# (CSpeed -> Int :: *))
                                   GHC.Storable.readWord32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CSpeed))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CSpeed[0]))
                                           :: (Ptr Word32
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word32 #) :: *)
                                              ~R# (Ptr CSpeed -> Int -> IO CSpeed :: *))
                                   GHC.Storable.writeWord32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CSpeed))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CSpeed[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word32
                                               -> Int
                                               -> Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CSpeed -> Int -> CSpeed -> IO () :: *))
                                   Foreign.Storable.$fStorableWord13
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CSpeed[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word32 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CSpeed :: *))
                                   Foreign.Storable.$fStorableWord12
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CSpeed[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> CSpeed -> IO () :: *))
                                   Foreign.Storable.$fStorableWord11
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CSpeed))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CSpeed[0]))
                                           :: (Ptr Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word32 #) :: *)
                                              ~R# (Ptr CSpeed -> IO CSpeed :: *))
                                   Foreign.Storable.$fStorableWord10
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CSpeed))_R
                                           ->_R Sym (System.Posix.Types.N:CSpeed[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word32
                                               -> Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CSpeed -> CSpeed -> IO () :: *))]
System.Posix.Types.$fStorableCSpeed
  = Foreign.Storable.C:Storable
      @ CSpeed
      (Foreign.Storable.$fStorableWord32_$calignment
       `cast` (Sym (System.Posix.Types.N:CSpeed[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CSpeed -> Int :: *)))
      (Foreign.Storable.$fStorableWord32_$calignment
       `cast` (Sym (System.Posix.Types.N:CSpeed[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CSpeed -> Int :: *)))
      (GHC.Storable.readWord32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CSpeed))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CSpeed[0]))
               :: (Ptr Word32
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word32 #) :: *)
                  ~R# (Ptr CSpeed -> Int -> IO CSpeed :: *)))
      (GHC.Storable.writeWord32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CSpeed))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word32
                   -> Int
                   -> Word32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CSpeed -> Int -> CSpeed -> IO () :: *)))
      (Foreign.Storable.$fStorableWord13
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CSpeed[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word32 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CSpeed :: *)))
      (Foreign.Storable.$fStorableWord12
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Word32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CSpeed -> IO () :: *)))
      (Foreign.Storable.$fStorableWord11
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CSpeed))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CSpeed[0]))
               :: (Ptr Word32
                   -> State# RealWorld -> (# State# RealWorld, Word32 #) :: *)
                  ~R# (Ptr CSpeed -> IO CSpeed :: *)))
      (Foreign.Storable.$fStorableWord10
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CSpeed))_R
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word32
                   -> Word32 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CSpeed -> CSpeed -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCSpeed [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CSpeed
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CSpeed
                       GHC.Word.$fEnumWord32_$csucc
                       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                               ->_R Sym (System.Posix.Types.N:CSpeed[0])
                               :: (Word32 -> Word32 :: *) ~R# (CSpeed -> CSpeed :: *))
                       GHC.Word.$fEnumWord32_$cpred
                       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                               ->_R Sym (System.Posix.Types.N:CSpeed[0])
                               :: (Word32 -> Word32 :: *) ~R# (CSpeed -> CSpeed :: *))
                       GHC.Word.$fEnumWord32_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CSpeed[0])
                               :: (Int -> Word32 :: *) ~R# (Int -> CSpeed :: *))
                       GHC.Word.$fEnumWord32_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CSpeed[0]) ->_R <Int>_R
                               :: (Word32 -> Int :: *) ~R# (CSpeed -> Int :: *))
                       GHC.Word.$fEnumWord32_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                               ->_R ([Sym (System.Posix.Types.N:CSpeed[0])])_R
                               :: (Word32 -> [Word32] :: *) ~R# (CSpeed -> [CSpeed] :: *))
                       GHC.Word.$fEnumWord32_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                               ->_R Sym (System.Posix.Types.N:CSpeed[0])
                               ->_R ([Sym (System.Posix.Types.N:CSpeed[0])])_R
                               :: (Word32 -> Word32 -> [Word32] :: *)
                                  ~R# (CSpeed -> CSpeed -> [CSpeed] :: *))
                       GHC.Word.$fEnumWord32_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                               ->_R Sym (System.Posix.Types.N:CSpeed[0])
                               ->_R ([Sym (System.Posix.Types.N:CSpeed[0])])_R
                               :: (Word32 -> Word32 -> [Word32] :: *)
                                  ~R# (CSpeed -> CSpeed -> [CSpeed] :: *))
                       GHC.Word.$fEnumWord32_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                               ->_R Sym (System.Posix.Types.N:CSpeed[0])
                               ->_R Sym (System.Posix.Types.N:CSpeed[0])
                               ->_R ([Sym (System.Posix.Types.N:CSpeed[0])])_R
                               :: (Word32 -> Word32 -> Word32 -> [Word32] :: *)
                                  ~R# (CSpeed -> CSpeed -> CSpeed -> [CSpeed] :: *))]
System.Posix.Types.$fEnumCSpeed
  = GHC.Enum.C:Enum
      @ CSpeed
      (GHC.Word.$fEnumWord32_$csucc
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               :: (Word32 -> Word32 :: *) ~R# (CSpeed -> CSpeed :: *)))
      (GHC.Word.$fEnumWord32_$cpred
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               :: (Word32 -> Word32 :: *) ~R# (CSpeed -> CSpeed :: *)))
      (GHC.Word.$fEnumWord32_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CSpeed[0])
               :: (Int -> Word32 :: *) ~R# (Int -> CSpeed :: *)))
      (GHC.Word.$fEnumWord32_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CSpeed[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CSpeed -> Int :: *)))
      (GHC.Word.$fEnumWord32_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R ([Sym (System.Posix.Types.N:CSpeed[0])])_R
               :: (Word32 -> [Word32] :: *) ~R# (CSpeed -> [CSpeed] :: *)))
      (GHC.Word.$fEnumWord32_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R ([Sym (System.Posix.Types.N:CSpeed[0])])_R
               :: (Word32 -> Word32 -> [Word32] :: *)
                  ~R# (CSpeed -> CSpeed -> [CSpeed] :: *)))
      (GHC.Word.$fEnumWord32_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R ([Sym (System.Posix.Types.N:CSpeed[0])])_R
               :: (Word32 -> Word32 -> [Word32] :: *)
                  ~R# (CSpeed -> CSpeed -> [CSpeed] :: *)))
      (GHC.Word.$fEnumWord32_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R ([Sym (System.Posix.Types.N:CSpeed[0])])_R
               :: (Word32 -> Word32 -> Word32 -> [Word32] :: *)
                  ~R# (CSpeed -> CSpeed -> CSpeed -> [CSpeed] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCSpeed [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CSpeed
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CSpeed
                     GHC.Word.$fNumWord32_$c+
                     `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                             ->_R Sym (System.Posix.Types.N:CSpeed[0])
                             ->_R Sym (System.Posix.Types.N:CSpeed[0])
                             :: (Word32 -> Word32 -> Word32 :: *)
                                ~R# (CSpeed -> CSpeed -> CSpeed :: *))
                     GHC.Word.$fNumWord32_$c-
                     `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                             ->_R Sym (System.Posix.Types.N:CSpeed[0])
                             ->_R Sym (System.Posix.Types.N:CSpeed[0])
                             :: (Word32 -> Word32 -> Word32 :: *)
                                ~R# (CSpeed -> CSpeed -> CSpeed :: *))
                     GHC.Word.$fNumWord32_$c*
                     `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                             ->_R Sym (System.Posix.Types.N:CSpeed[0])
                             ->_R Sym (System.Posix.Types.N:CSpeed[0])
                             :: (Word32 -> Word32 -> Word32 :: *)
                                ~R# (CSpeed -> CSpeed -> CSpeed :: *))
                     GHC.Word.$fNumWord32_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                             ->_R Sym (System.Posix.Types.N:CSpeed[0])
                             :: (Word32 -> Word32 :: *) ~R# (CSpeed -> CSpeed :: *))
                     GHC.Word.$fNumWord32_$cabs
                     `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                             ->_R Sym (System.Posix.Types.N:CSpeed[0])
                             :: (Word32 -> Word32 :: *) ~R# (CSpeed -> CSpeed :: *))
                     GHC.Word.$fNumWord32_$csignum
                     `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                             ->_R Sym (System.Posix.Types.N:CSpeed[0])
                             :: (Word32 -> Word32 :: *) ~R# (CSpeed -> CSpeed :: *))
                     GHC.Word.$fNumWord32_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CSpeed[0])
                             :: (Integer -> Word32 :: *) ~R# (Integer -> CSpeed :: *))]
System.Posix.Types.$fNumCSpeed
  = GHC.Num.C:Num
      @ CSpeed
      (GHC.Word.$fNumWord32_$c+
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CSpeed -> CSpeed -> CSpeed :: *)))
      (GHC.Word.$fNumWord32_$c-
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CSpeed -> CSpeed -> CSpeed :: *)))
      (GHC.Word.$fNumWord32_$c*
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CSpeed -> CSpeed -> CSpeed :: *)))
      (GHC.Word.$fNumWord32_$cnegate
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               :: (Word32 -> Word32 :: *) ~R# (CSpeed -> CSpeed :: *)))
      (GHC.Word.$fNumWord32_$cabs
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               :: (Word32 -> Word32 :: *) ~R# (CSpeed -> CSpeed :: *)))
      (GHC.Word.$fNumWord32_$csignum
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               :: (Word32 -> Word32 :: *) ~R# (CSpeed -> CSpeed :: *)))
      (GHC.Word.$fNumWord32_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CSpeed[0])
               :: (Integer -> Word32 :: *) ~R# (Integer -> CSpeed :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCSpeed [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CSpeed
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CSpeed
                        GHC.Word.eqWord32
                        `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                                ->_R Sym (System.Posix.Types.N:CSpeed[0])
                                ->_R <Bool>_R
                                :: (Word32 -> Word32 -> Bool :: *)
                                   ~R# (CSpeed -> CSpeed -> Bool :: *))
                        GHC.Word.neWord32
                        `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                                ->_R Sym (System.Posix.Types.N:CSpeed[0])
                                ->_R <Bool>_R
                                :: (Word32 -> Word32 -> Bool :: *)
                                   ~R# (CSpeed -> CSpeed -> Bool :: *))]
System.Posix.Types.$fEqCSpeed
  = GHC.Classes.C:Eq
      @ CSpeed
      (GHC.Word.eqWord32
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CSpeed -> CSpeed -> Bool :: *)))
      (GHC.Word.neWord32
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CSpeed -> CSpeed -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCSpeed [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CSpeed
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CSpeed
                         System.Posix.Types.$fEqCSpeed
                         GHC.Word.$fOrdWord32_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                                 ->_R Sym (System.Posix.Types.N:CSpeed[0])
                                 ->_R <Ordering>_R
                                 :: (Word32 -> Word32 -> Ordering :: *)
                                    ~R# (CSpeed -> CSpeed -> Ordering :: *))
                         GHC.Word.ltWord32
                         `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                                 ->_R Sym (System.Posix.Types.N:CSpeed[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *)
                                    ~R# (CSpeed -> CSpeed -> Bool :: *))
                         GHC.Word.leWord32
                         `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                                 ->_R Sym (System.Posix.Types.N:CSpeed[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *)
                                    ~R# (CSpeed -> CSpeed -> Bool :: *))
                         GHC.Word.gtWord32
                         `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                                 ->_R Sym (System.Posix.Types.N:CSpeed[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *)
                                    ~R# (CSpeed -> CSpeed -> Bool :: *))
                         GHC.Word.geWord32
                         `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                                 ->_R Sym (System.Posix.Types.N:CSpeed[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *)
                                    ~R# (CSpeed -> CSpeed -> Bool :: *))
                         GHC.Word.$fOrdWord32_$cmax
                         `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                                 ->_R Sym (System.Posix.Types.N:CSpeed[0])
                                 ->_R Sym (System.Posix.Types.N:CSpeed[0])
                                 :: (Word32 -> Word32 -> Word32 :: *)
                                    ~R# (CSpeed -> CSpeed -> CSpeed :: *))
                         GHC.Word.$fOrdWord32_$cmin
                         `cast` (Sym (System.Posix.Types.N:CSpeed[0])
                                 ->_R Sym (System.Posix.Types.N:CSpeed[0])
                                 ->_R Sym (System.Posix.Types.N:CSpeed[0])
                                 :: (Word32 -> Word32 -> Word32 :: *)
                                    ~R# (CSpeed -> CSpeed -> CSpeed :: *))]
System.Posix.Types.$fOrdCSpeed
  = GHC.Classes.C:Ord
      @ CSpeed
      System.Posix.Types.$fEqCSpeed
      (GHC.Word.$fOrdWord32_$ccompare
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R <Ordering>_R
               :: (Word32 -> Word32 -> Ordering :: *)
                  ~R# (CSpeed -> CSpeed -> Ordering :: *)))
      (GHC.Word.ltWord32
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CSpeed -> CSpeed -> Bool :: *)))
      (GHC.Word.leWord32
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CSpeed -> CSpeed -> Bool :: *)))
      (GHC.Word.gtWord32
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CSpeed -> CSpeed -> Bool :: *)))
      (GHC.Word.geWord32
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CSpeed -> CSpeed -> Bool :: *)))
      (GHC.Word.$fOrdWord32_$cmax
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CSpeed -> CSpeed -> CSpeed :: *)))
      (GHC.Word.$fOrdWord32_$cmin
       `cast` (Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               ->_R Sym (System.Posix.Types.N:CSpeed[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CSpeed -> CSpeed -> CSpeed :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCSpeed [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CSpeed
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CSpeed
                       System.Posix.Types.$fNumCSpeed
                       System.Posix.Types.$fOrdCSpeed
                       GHC.Word.$fRealWord32_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CSpeed[0]) ->_R <Ratio Integer>_R
                               :: (Word32 -> Ratio Integer :: *)
                                  ~R# (CSpeed -> Ratio Integer :: *))]
System.Posix.Types.$fRealCSpeed
  = GHC.Real.C:Real
      @ CSpeed
      System.Posix.Types.$fNumCSpeed
      System.Posix.Types.$fOrdCSpeed
      (GHC.Word.$fRealWord32_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CSpeed[0]) ->_R <Ratio Integer>_R
               :: (Word32 -> Ratio Integer :: *)
                  ~R# (CSpeed -> Ratio Integer :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCCc [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CCc
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CCc
                       GHC.Word.$fShowWord8_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CCc[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Word8 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CCc -> [Char] -> [Char] :: *))
                       GHC.Word.$fShowWord8_$cshow
                       `cast` (Sym (System.Posix.Types.N:CCc[0]) ->_R <[Char]>_R
                               :: (Word8 -> [Char] :: *) ~R# (CCc -> [Char] :: *))
                       GHC.Word.$fShowWord8_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CCc[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Word8] -> [Char] -> [Char] :: *)
                                  ~R# ([CCc] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCCc
  = GHC.Show.C:Show
      @ CCc
      (GHC.Word.$fShowWord8_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Word8 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CCc -> [Char] -> [Char] :: *)))
      (GHC.Word.$fShowWord8_$cshow
       `cast` (Sym (System.Posix.Types.N:CCc[0]) ->_R <[Char]>_R
               :: (Word8 -> [Char] :: *) ~R# (CCc -> [Char] :: *)))
      (GHC.Word.$fShowWord8_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CCc[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Word8] -> [Char] -> [Char] :: *)
                  ~R# ([CCc] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCCc [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CCc
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CCc
                       GHC.Read.$fReadWord8_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,) (Sym (System.Posix.Types.N:CCc[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Word8, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CCc, [Char])] :: *))
                       GHC.Read.$fReadWord8_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CCc[0])])_R <[Char]>_R)_R])_R
                               :: ([Char] -> [([Word8], [Char])] :: *)
                                  ~R# ([Char] -> [([CCc], [Char])] :: *))
                       GHC.Read.$fReadWord17
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Word8>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                     (System.Posix.Types.N:CCc[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Word8 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CCc :: *))
                       GHC.Read.$fReadWord14
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Word8]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                       ([System.Posix.Types.N:CCc[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Word8] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CCc] :: *))]
System.Posix.Types.$fReadCCc
  = GHC.Read.C:Read
      @ CCc
      (GHC.Read.$fReadWord8_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,) (Sym (System.Posix.Types.N:CCc[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Word8, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CCc, [Char])] :: *)))
      (GHC.Read.$fReadWord8_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CCc[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Word8], [Char])] :: *)
                  ~R# ([Char] -> [([CCc], [Char])] :: *)))
      (GHC.Read.$fReadWord17
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Word8>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     (System.Posix.Types.N:CCc[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Word8 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CCc :: *)))
      (GHC.Read.$fReadWord14
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Word8]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                       ([System.Posix.Types.N:CCc[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Word8] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CCc] :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCCc [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CCc
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CCc
                                   Foreign.Storable.$fStorableWord8_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CCc[0]) ->_R <Int>_R
                                           :: (Word8 -> Int :: *) ~R# (CCc -> Int :: *))
                                   Foreign.Storable.$fStorableWord8_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CCc[0]) ->_R <Int>_R
                                           :: (Word8 -> Int :: *) ~R# (CCc -> Int :: *))
                                   GHC.Storable.readWord8OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word8, CCc))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CCc[0]))
                                           :: (Ptr Word8
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word8 #) :: *)
                                              ~R# (Ptr CCc -> Int -> IO CCc :: *))
                                   GHC.Storable.writeWord8OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word8, CCc))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CCc[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word8
                                               -> Int
                                               -> Word8
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CCc -> Int -> CCc -> IO () :: *))
                                   Foreign.Storable.$fStorableWord22
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CCc[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word8 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CCc :: *))
                                   Foreign.Storable.$fStorableWord21
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CCc[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Word8
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> CCc -> IO () :: *))
                                   Foreign.Storable.$fStorableWord20
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word8, CCc))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CCc[0]))
                                           :: (Ptr Word8
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word8 #) :: *)
                                              ~R# (Ptr CCc -> IO CCc :: *))
                                   Foreign.Storable.$fStorableWord19
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word8, CCc))_R
                                           ->_R Sym (System.Posix.Types.N:CCc[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word8
                                               -> Word8
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CCc -> CCc -> IO () :: *))]
System.Posix.Types.$fStorableCCc
  = Foreign.Storable.C:Storable
      @ CCc
      (Foreign.Storable.$fStorableWord8_$calignment
       `cast` (Sym (System.Posix.Types.N:CCc[0]) ->_R <Int>_R
               :: (Word8 -> Int :: *) ~R# (CCc -> Int :: *)))
      (Foreign.Storable.$fStorableWord8_$calignment
       `cast` (Sym (System.Posix.Types.N:CCc[0]) ->_R <Int>_R
               :: (Word8 -> Int :: *) ~R# (CCc -> Int :: *)))
      (GHC.Storable.readWord8OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word8, CCc))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CCc[0]))
               :: (Ptr Word8
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word8 #) :: *)
                  ~R# (Ptr CCc -> Int -> IO CCc :: *)))
      (GHC.Storable.writeWord8OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word8, CCc))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word8
                   -> Int
                   -> Word8
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CCc -> Int -> CCc -> IO () :: *)))
      (Foreign.Storable.$fStorableWord22
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CCc[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word8 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CCc :: *)))
      (Foreign.Storable.$fStorableWord21
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Word8
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CCc -> IO () :: *)))
      (Foreign.Storable.$fStorableWord20
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word8, CCc))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CCc[0]))
               :: (Ptr Word8
                   -> State# RealWorld -> (# State# RealWorld, Word8 #) :: *)
                  ~R# (Ptr CCc -> IO CCc :: *)))
      (Foreign.Storable.$fStorableWord19
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word8, CCc))_R
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word8
                   -> Word8 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CCc -> CCc -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCCc [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CCc
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CCc
                       GHC.Word.$fEnumWord8_$csucc
                       `cast` (Sym (System.Posix.Types.N:CCc[0])
                               ->_R Sym (System.Posix.Types.N:CCc[0])
                               :: (Word8 -> Word8 :: *) ~R# (CCc -> CCc :: *))
                       GHC.Word.$fEnumWord8_$cpred
                       `cast` (Sym (System.Posix.Types.N:CCc[0])
                               ->_R Sym (System.Posix.Types.N:CCc[0])
                               :: (Word8 -> Word8 :: *) ~R# (CCc -> CCc :: *))
                       GHC.Word.$fEnumWord8_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CCc[0])
                               :: (Int -> Word8 :: *) ~R# (Int -> CCc :: *))
                       GHC.Word.$fEnumWord8_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CCc[0]) ->_R <Int>_R
                               :: (Word8 -> Int :: *) ~R# (CCc -> Int :: *))
                       GHC.Word.$fEnumWord8_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CCc[0])
                               ->_R ([Sym (System.Posix.Types.N:CCc[0])])_R
                               :: (Word8 -> [Word8] :: *) ~R# (CCc -> [CCc] :: *))
                       GHC.Word.$fEnumWord8_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CCc[0])
                               ->_R Sym (System.Posix.Types.N:CCc[0])
                               ->_R ([Sym (System.Posix.Types.N:CCc[0])])_R
                               :: (Word8 -> Word8 -> [Word8] :: *) ~R# (CCc -> CCc -> [CCc] :: *))
                       GHC.Word.$fEnumWord8_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CCc[0])
                               ->_R Sym (System.Posix.Types.N:CCc[0])
                               ->_R ([Sym (System.Posix.Types.N:CCc[0])])_R
                               :: (Word8 -> Word8 -> [Word8] :: *) ~R# (CCc -> CCc -> [CCc] :: *))
                       GHC.Word.$fEnumWord8_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CCc[0])
                               ->_R Sym (System.Posix.Types.N:CCc[0])
                               ->_R Sym (System.Posix.Types.N:CCc[0])
                               ->_R ([Sym (System.Posix.Types.N:CCc[0])])_R
                               :: (Word8 -> Word8 -> Word8 -> [Word8] :: *)
                                  ~R# (CCc -> CCc -> CCc -> [CCc] :: *))]
System.Posix.Types.$fEnumCCc
  = GHC.Enum.C:Enum
      @ CCc
      (GHC.Word.$fEnumWord8_$csucc
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               :: (Word8 -> Word8 :: *) ~R# (CCc -> CCc :: *)))
      (GHC.Word.$fEnumWord8_$cpred
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               :: (Word8 -> Word8 :: *) ~R# (CCc -> CCc :: *)))
      (GHC.Word.$fEnumWord8_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CCc[0])
               :: (Int -> Word8 :: *) ~R# (Int -> CCc :: *)))
      (GHC.Word.$fEnumWord8_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CCc[0]) ->_R <Int>_R
               :: (Word8 -> Int :: *) ~R# (CCc -> Int :: *)))
      (GHC.Word.$fEnumWord8_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R ([Sym (System.Posix.Types.N:CCc[0])])_R
               :: (Word8 -> [Word8] :: *) ~R# (CCc -> [CCc] :: *)))
      (GHC.Word.$fEnumWord8_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R ([Sym (System.Posix.Types.N:CCc[0])])_R
               :: (Word8 -> Word8 -> [Word8] :: *)
                  ~R# (CCc -> CCc -> [CCc] :: *)))
      (GHC.Word.$fEnumWord8_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R ([Sym (System.Posix.Types.N:CCc[0])])_R
               :: (Word8 -> Word8 -> [Word8] :: *)
                  ~R# (CCc -> CCc -> [CCc] :: *)))
      (GHC.Word.$fEnumWord8_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R ([Sym (System.Posix.Types.N:CCc[0])])_R
               :: (Word8 -> Word8 -> Word8 -> [Word8] :: *)
                  ~R# (CCc -> CCc -> CCc -> [CCc] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCCc [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CCc
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CCc
                     GHC.Word.$fNumWord8_$c+
                     `cast` (Sym (System.Posix.Types.N:CCc[0])
                             ->_R Sym (System.Posix.Types.N:CCc[0])
                             ->_R Sym (System.Posix.Types.N:CCc[0])
                             :: (Word8 -> Word8 -> Word8 :: *) ~R# (CCc -> CCc -> CCc :: *))
                     GHC.Word.$fNumWord8_$c-
                     `cast` (Sym (System.Posix.Types.N:CCc[0])
                             ->_R Sym (System.Posix.Types.N:CCc[0])
                             ->_R Sym (System.Posix.Types.N:CCc[0])
                             :: (Word8 -> Word8 -> Word8 :: *) ~R# (CCc -> CCc -> CCc :: *))
                     GHC.Word.$fNumWord8_$c*
                     `cast` (Sym (System.Posix.Types.N:CCc[0])
                             ->_R Sym (System.Posix.Types.N:CCc[0])
                             ->_R Sym (System.Posix.Types.N:CCc[0])
                             :: (Word8 -> Word8 -> Word8 :: *) ~R# (CCc -> CCc -> CCc :: *))
                     GHC.Word.$fNumWord8_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CCc[0])
                             ->_R Sym (System.Posix.Types.N:CCc[0])
                             :: (Word8 -> Word8 :: *) ~R# (CCc -> CCc :: *))
                     GHC.Word.$fNumWord8_$cabs
                     `cast` (Sym (System.Posix.Types.N:CCc[0])
                             ->_R Sym (System.Posix.Types.N:CCc[0])
                             :: (Word8 -> Word8 :: *) ~R# (CCc -> CCc :: *))
                     GHC.Word.$fNumWord8_$csignum
                     `cast` (Sym (System.Posix.Types.N:CCc[0])
                             ->_R Sym (System.Posix.Types.N:CCc[0])
                             :: (Word8 -> Word8 :: *) ~R# (CCc -> CCc :: *))
                     GHC.Word.$fNumWord8_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CCc[0])
                             :: (Integer -> Word8 :: *) ~R# (Integer -> CCc :: *))]
System.Posix.Types.$fNumCCc
  = GHC.Num.C:Num
      @ CCc
      (GHC.Word.$fNumWord8_$c+
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               :: (Word8 -> Word8 -> Word8 :: *) ~R# (CCc -> CCc -> CCc :: *)))
      (GHC.Word.$fNumWord8_$c-
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               :: (Word8 -> Word8 -> Word8 :: *) ~R# (CCc -> CCc -> CCc :: *)))
      (GHC.Word.$fNumWord8_$c*
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               :: (Word8 -> Word8 -> Word8 :: *) ~R# (CCc -> CCc -> CCc :: *)))
      (GHC.Word.$fNumWord8_$cnegate
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               :: (Word8 -> Word8 :: *) ~R# (CCc -> CCc :: *)))
      (GHC.Word.$fNumWord8_$cabs
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               :: (Word8 -> Word8 :: *) ~R# (CCc -> CCc :: *)))
      (GHC.Word.$fNumWord8_$csignum
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               :: (Word8 -> Word8 :: *) ~R# (CCc -> CCc :: *)))
      (GHC.Word.$fNumWord8_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CCc[0])
               :: (Integer -> Word8 :: *) ~R# (Integer -> CCc :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCCc [InlPrag=NOUSERINLINE CONLIKE] :: Eq CCc
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CCc
                        GHC.Word.eqWord8
                        `cast` (Sym (System.Posix.Types.N:CCc[0])
                                ->_R Sym (System.Posix.Types.N:CCc[0])
                                ->_R <Bool>_R
                                :: (Word8 -> Word8 -> Bool :: *) ~R# (CCc -> CCc -> Bool :: *))
                        GHC.Word.neWord8
                        `cast` (Sym (System.Posix.Types.N:CCc[0])
                                ->_R Sym (System.Posix.Types.N:CCc[0])
                                ->_R <Bool>_R
                                :: (Word8 -> Word8 -> Bool :: *) ~R# (CCc -> CCc -> Bool :: *))]
System.Posix.Types.$fEqCCc
  = GHC.Classes.C:Eq
      @ CCc
      (GHC.Word.eqWord8
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R <Bool>_R
               :: (Word8 -> Word8 -> Bool :: *) ~R# (CCc -> CCc -> Bool :: *)))
      (GHC.Word.neWord8
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R <Bool>_R
               :: (Word8 -> Word8 -> Bool :: *) ~R# (CCc -> CCc -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCCc [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CCc
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CCc
                         System.Posix.Types.$fEqCCc
                         GHC.Word.$fOrdWord8_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CCc[0])
                                 ->_R Sym (System.Posix.Types.N:CCc[0])
                                 ->_R <Ordering>_R
                                 :: (Word8 -> Word8 -> Ordering :: *)
                                    ~R# (CCc -> CCc -> Ordering :: *))
                         GHC.Word.ltWord8
                         `cast` (Sym (System.Posix.Types.N:CCc[0])
                                 ->_R Sym (System.Posix.Types.N:CCc[0])
                                 ->_R <Bool>_R
                                 :: (Word8 -> Word8 -> Bool :: *) ~R# (CCc -> CCc -> Bool :: *))
                         GHC.Word.leWord8
                         `cast` (Sym (System.Posix.Types.N:CCc[0])
                                 ->_R Sym (System.Posix.Types.N:CCc[0])
                                 ->_R <Bool>_R
                                 :: (Word8 -> Word8 -> Bool :: *) ~R# (CCc -> CCc -> Bool :: *))
                         GHC.Word.gtWord8
                         `cast` (Sym (System.Posix.Types.N:CCc[0])
                                 ->_R Sym (System.Posix.Types.N:CCc[0])
                                 ->_R <Bool>_R
                                 :: (Word8 -> Word8 -> Bool :: *) ~R# (CCc -> CCc -> Bool :: *))
                         GHC.Word.geWord8
                         `cast` (Sym (System.Posix.Types.N:CCc[0])
                                 ->_R Sym (System.Posix.Types.N:CCc[0])
                                 ->_R <Bool>_R
                                 :: (Word8 -> Word8 -> Bool :: *) ~R# (CCc -> CCc -> Bool :: *))
                         GHC.Word.$fOrdWord8_$cmax
                         `cast` (Sym (System.Posix.Types.N:CCc[0])
                                 ->_R Sym (System.Posix.Types.N:CCc[0])
                                 ->_R Sym (System.Posix.Types.N:CCc[0])
                                 :: (Word8 -> Word8 -> Word8 :: *) ~R# (CCc -> CCc -> CCc :: *))
                         GHC.Word.$fOrdWord8_$cmin
                         `cast` (Sym (System.Posix.Types.N:CCc[0])
                                 ->_R Sym (System.Posix.Types.N:CCc[0])
                                 ->_R Sym (System.Posix.Types.N:CCc[0])
                                 :: (Word8 -> Word8 -> Word8 :: *) ~R# (CCc -> CCc -> CCc :: *))]
System.Posix.Types.$fOrdCCc
  = GHC.Classes.C:Ord
      @ CCc
      System.Posix.Types.$fEqCCc
      (GHC.Word.$fOrdWord8_$ccompare
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R <Ordering>_R
               :: (Word8 -> Word8 -> Ordering :: *)
                  ~R# (CCc -> CCc -> Ordering :: *)))
      (GHC.Word.ltWord8
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R <Bool>_R
               :: (Word8 -> Word8 -> Bool :: *) ~R# (CCc -> CCc -> Bool :: *)))
      (GHC.Word.leWord8
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R <Bool>_R
               :: (Word8 -> Word8 -> Bool :: *) ~R# (CCc -> CCc -> Bool :: *)))
      (GHC.Word.gtWord8
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R <Bool>_R
               :: (Word8 -> Word8 -> Bool :: *) ~R# (CCc -> CCc -> Bool :: *)))
      (GHC.Word.geWord8
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R <Bool>_R
               :: (Word8 -> Word8 -> Bool :: *) ~R# (CCc -> CCc -> Bool :: *)))
      (GHC.Word.$fOrdWord8_$cmax
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               :: (Word8 -> Word8 -> Word8 :: *) ~R# (CCc -> CCc -> CCc :: *)))
      (GHC.Word.$fOrdWord8_$cmin
       `cast` (Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               ->_R Sym (System.Posix.Types.N:CCc[0])
               :: (Word8 -> Word8 -> Word8 :: *) ~R# (CCc -> CCc -> CCc :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCCc [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CCc
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CCc
                       System.Posix.Types.$fNumCCc
                       System.Posix.Types.$fOrdCCc
                       GHC.Word.$fRealWord8_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CCc[0]) ->_R <Ratio Integer>_R
                               :: (Word8 -> Ratio Integer :: *) ~R# (CCc -> Ratio Integer :: *))]
System.Posix.Types.$fRealCCc
  = GHC.Real.C:Real
      @ CCc
      System.Posix.Types.$fNumCCc
      System.Posix.Types.$fOrdCCc
      (GHC.Word.$fRealWord8_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CCc[0]) ->_R <Ratio Integer>_R
               :: (Word8 -> Ratio Integer :: *) ~R# (CCc -> Ratio Integer :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCUid [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CUid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CUid
                       GHC.Word.$fShowWord32_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CUid[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Word32 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CUid -> [Char] -> [Char] :: *))
                       GHC.Word.$fShowWord32_$cshow
                       `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <[Char]>_R
                               :: (Word32 -> [Char] :: *) ~R# (CUid -> [Char] :: *))
                       GHC.Word.$fShowWord32_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CUid[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Word32] -> [Char] -> [Char] :: *)
                                  ~R# ([CUid] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCUid
  = GHC.Show.C:Show
      @ CUid
      (GHC.Word.$fShowWord32_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Word32 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CUid -> [Char] -> [Char] :: *)))
      (GHC.Word.$fShowWord32_$cshow
       `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <[Char]>_R
               :: (Word32 -> [Char] :: *) ~R# (CUid -> [Char] :: *)))
      (GHC.Word.$fShowWord32_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CUid[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Word32] -> [Char] -> [Char] :: *)
                  ~R# ([CUid] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCUid [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CUid
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CUid
                       GHC.Read.$fReadWord32_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,) (Sym (System.Posix.Types.N:CUid[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Word32, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CUid, [Char])] :: *))
                       GHC.Read.$fReadWord32_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CUid[0])])_R <[Char]>_R)_R])_R
                               :: ([Char] -> [([Word32], [Char])] :: *)
                                  ~R# ([Char] -> [([CUid], [Char])] :: *))
                       GHC.Read.$fReadWord10
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Word32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      (System.Posix.Types.N:CUid[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Word32 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CUid :: *))
                       GHC.Read.$fReadWord7
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Word32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        ([System.Posix.Types.N:CUid[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Word32] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CUid] :: *))]
System.Posix.Types.$fReadCUid
  = GHC.Read.C:Read
      @ CUid
      (GHC.Read.$fReadWord32_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,) (Sym (System.Posix.Types.N:CUid[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Word32, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CUid, [Char])] :: *)))
      (GHC.Read.$fReadWord32_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CUid[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Word32], [Char])] :: *)
                  ~R# ([Char] -> [([CUid], [Char])] :: *)))
      (GHC.Read.$fReadWord10
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Word32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      (System.Posix.Types.N:CUid[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Word32 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CUid :: *)))
      (GHC.Read.$fReadWord7
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Word32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        ([System.Posix.Types.N:CUid[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Word32] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CUid] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
System.Posix.Types.$fBoundedCUid [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded CUid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: CUid
                          GHC.Word.$fBitsWord32_$cminBound
                          `cast` (Sym (System.Posix.Types.N:CUid[0])
                                  :: (Word32 :: *) ~R# (CUid :: *))
                          GHC.Word.$fBoundedWord32_$cmaxBound
                          `cast` (Sym (System.Posix.Types.N:CUid[0])
                                  :: (Word32 :: *) ~R# (CUid :: *))]
System.Posix.Types.$fBoundedCUid
  = GHC.Enum.C:Bounded
      @ CUid
      (GHC.Word.$fBitsWord32_$cminBound
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 :: *) ~R# (CUid :: *)))
      (GHC.Word.$fBoundedWord32_$cmaxBound
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 :: *) ~R# (CUid :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCUid [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CUid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CUid
                                   Foreign.Storable.$fStorableWord32_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Int>_R
                                           :: (Word32 -> Int :: *) ~R# (CUid -> Int :: *))
                                   Foreign.Storable.$fStorableWord32_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Int>_R
                                           :: (Word32 -> Int :: *) ~R# (CUid -> Int :: *))
                                   GHC.Storable.readWord32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CUid))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CUid[0]))
                                           :: (Ptr Word32
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word32 #) :: *)
                                              ~R# (Ptr CUid -> Int -> IO CUid :: *))
                                   GHC.Storable.writeWord32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CUid))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CUid[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word32
                                               -> Int
                                               -> Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CUid -> Int -> CUid -> IO () :: *))
                                   Foreign.Storable.$fStorableWord13
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CUid[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word32 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CUid :: *))
                                   Foreign.Storable.$fStorableWord12
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CUid[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> CUid -> IO () :: *))
                                   Foreign.Storable.$fStorableWord11
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CUid))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CUid[0]))
                                           :: (Ptr Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word32 #) :: *)
                                              ~R# (Ptr CUid -> IO CUid :: *))
                                   Foreign.Storable.$fStorableWord10
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CUid))_R
                                           ->_R Sym (System.Posix.Types.N:CUid[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word32
                                               -> Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CUid -> CUid -> IO () :: *))]
System.Posix.Types.$fStorableCUid
  = Foreign.Storable.C:Storable
      @ CUid
      (Foreign.Storable.$fStorableWord32_$calignment
       `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CUid -> Int :: *)))
      (Foreign.Storable.$fStorableWord32_$calignment
       `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CUid -> Int :: *)))
      (GHC.Storable.readWord32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CUid))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CUid[0]))
               :: (Ptr Word32
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word32 #) :: *)
                  ~R# (Ptr CUid -> Int -> IO CUid :: *)))
      (GHC.Storable.writeWord32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CUid))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word32
                   -> Int
                   -> Word32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CUid -> Int -> CUid -> IO () :: *)))
      (Foreign.Storable.$fStorableWord13
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CUid[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word32 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CUid :: *)))
      (Foreign.Storable.$fStorableWord12
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Word32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CUid -> IO () :: *)))
      (Foreign.Storable.$fStorableWord11
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CUid))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CUid[0]))
               :: (Ptr Word32
                   -> State# RealWorld -> (# State# RealWorld, Word32 #) :: *)
                  ~R# (Ptr CUid -> IO CUid :: *)))
      (Foreign.Storable.$fStorableWord10
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CUid))_R
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word32
                   -> Word32 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CUid -> CUid -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCUid [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CUid
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CUid
                       GHC.Word.$fEnumWord32_$csucc
                       `cast` (Sym (System.Posix.Types.N:CUid[0])
                               ->_R Sym (System.Posix.Types.N:CUid[0])
                               :: (Word32 -> Word32 :: *) ~R# (CUid -> CUid :: *))
                       GHC.Word.$fEnumWord32_$cpred
                       `cast` (Sym (System.Posix.Types.N:CUid[0])
                               ->_R Sym (System.Posix.Types.N:CUid[0])
                               :: (Word32 -> Word32 :: *) ~R# (CUid -> CUid :: *))
                       GHC.Word.$fEnumWord32_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CUid[0])
                               :: (Int -> Word32 :: *) ~R# (Int -> CUid :: *))
                       GHC.Word.$fEnumWord32_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Int>_R
                               :: (Word32 -> Int :: *) ~R# (CUid -> Int :: *))
                       GHC.Word.$fEnumWord32_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CUid[0])
                               ->_R ([Sym (System.Posix.Types.N:CUid[0])])_R
                               :: (Word32 -> [Word32] :: *) ~R# (CUid -> [CUid] :: *))
                       GHC.Word.$fEnumWord32_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CUid[0])
                               ->_R Sym (System.Posix.Types.N:CUid[0])
                               ->_R ([Sym (System.Posix.Types.N:CUid[0])])_R
                               :: (Word32 -> Word32 -> [Word32] :: *)
                                  ~R# (CUid -> CUid -> [CUid] :: *))
                       GHC.Word.$fEnumWord32_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CUid[0])
                               ->_R Sym (System.Posix.Types.N:CUid[0])
                               ->_R ([Sym (System.Posix.Types.N:CUid[0])])_R
                               :: (Word32 -> Word32 -> [Word32] :: *)
                                  ~R# (CUid -> CUid -> [CUid] :: *))
                       GHC.Word.$fEnumWord32_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CUid[0])
                               ->_R Sym (System.Posix.Types.N:CUid[0])
                               ->_R Sym (System.Posix.Types.N:CUid[0])
                               ->_R ([Sym (System.Posix.Types.N:CUid[0])])_R
                               :: (Word32 -> Word32 -> Word32 -> [Word32] :: *)
                                  ~R# (CUid -> CUid -> CUid -> [CUid] :: *))]
System.Posix.Types.$fEnumCUid
  = GHC.Enum.C:Enum
      @ CUid
      (GHC.Word.$fEnumWord32_$csucc
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Word32 :: *) ~R# (CUid -> CUid :: *)))
      (GHC.Word.$fEnumWord32_$cpred
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Word32 :: *) ~R# (CUid -> CUid :: *)))
      (GHC.Word.$fEnumWord32_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Int -> Word32 :: *) ~R# (Int -> CUid :: *)))
      (GHC.Word.$fEnumWord32_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CUid -> Int :: *)))
      (GHC.Word.$fEnumWord32_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R ([Sym (System.Posix.Types.N:CUid[0])])_R
               :: (Word32 -> [Word32] :: *) ~R# (CUid -> [CUid] :: *)))
      (GHC.Word.$fEnumWord32_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R ([Sym (System.Posix.Types.N:CUid[0])])_R
               :: (Word32 -> Word32 -> [Word32] :: *)
                  ~R# (CUid -> CUid -> [CUid] :: *)))
      (GHC.Word.$fEnumWord32_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R ([Sym (System.Posix.Types.N:CUid[0])])_R
               :: (Word32 -> Word32 -> [Word32] :: *)
                  ~R# (CUid -> CUid -> [CUid] :: *)))
      (GHC.Word.$fEnumWord32_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R ([Sym (System.Posix.Types.N:CUid[0])])_R
               :: (Word32 -> Word32 -> Word32 -> [Word32] :: *)
                  ~R# (CUid -> CUid -> CUid -> [CUid] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCUid [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CUid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CUid
                     GHC.Word.$fNumWord32_$c+
                     `cast` (Sym (System.Posix.Types.N:CUid[0])
                             ->_R Sym (System.Posix.Types.N:CUid[0])
                             ->_R Sym (System.Posix.Types.N:CUid[0])
                             :: (Word32 -> Word32 -> Word32 :: *)
                                ~R# (CUid -> CUid -> CUid :: *))
                     GHC.Word.$fNumWord32_$c-
                     `cast` (Sym (System.Posix.Types.N:CUid[0])
                             ->_R Sym (System.Posix.Types.N:CUid[0])
                             ->_R Sym (System.Posix.Types.N:CUid[0])
                             :: (Word32 -> Word32 -> Word32 :: *)
                                ~R# (CUid -> CUid -> CUid :: *))
                     GHC.Word.$fNumWord32_$c*
                     `cast` (Sym (System.Posix.Types.N:CUid[0])
                             ->_R Sym (System.Posix.Types.N:CUid[0])
                             ->_R Sym (System.Posix.Types.N:CUid[0])
                             :: (Word32 -> Word32 -> Word32 :: *)
                                ~R# (CUid -> CUid -> CUid :: *))
                     GHC.Word.$fNumWord32_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CUid[0])
                             ->_R Sym (System.Posix.Types.N:CUid[0])
                             :: (Word32 -> Word32 :: *) ~R# (CUid -> CUid :: *))
                     GHC.Word.$fNumWord32_$cabs
                     `cast` (Sym (System.Posix.Types.N:CUid[0])
                             ->_R Sym (System.Posix.Types.N:CUid[0])
                             :: (Word32 -> Word32 :: *) ~R# (CUid -> CUid :: *))
                     GHC.Word.$fNumWord32_$csignum
                     `cast` (Sym (System.Posix.Types.N:CUid[0])
                             ->_R Sym (System.Posix.Types.N:CUid[0])
                             :: (Word32 -> Word32 :: *) ~R# (CUid -> CUid :: *))
                     GHC.Word.$fNumWord32_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CUid[0])
                             :: (Integer -> Word32 :: *) ~R# (Integer -> CUid :: *))]
System.Posix.Types.$fNumCUid
  = GHC.Num.C:Num
      @ CUid
      (GHC.Word.$fNumWord32_$c+
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CUid -> CUid -> CUid :: *)))
      (GHC.Word.$fNumWord32_$c-
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CUid -> CUid -> CUid :: *)))
      (GHC.Word.$fNumWord32_$c*
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CUid -> CUid -> CUid :: *)))
      (GHC.Word.$fNumWord32_$cnegate
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Word32 :: *) ~R# (CUid -> CUid :: *)))
      (GHC.Word.$fNumWord32_$cabs
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Word32 :: *) ~R# (CUid -> CUid :: *)))
      (GHC.Word.$fNumWord32_$csignum
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Word32 :: *) ~R# (CUid -> CUid :: *)))
      (GHC.Word.$fNumWord32_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Integer -> Word32 :: *) ~R# (Integer -> CUid :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCUid [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CUid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CUid
                        GHC.Word.eqWord32
                        `cast` (Sym (System.Posix.Types.N:CUid[0])
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                ->_R <Bool>_R
                                :: (Word32 -> Word32 -> Bool :: *) ~R# (CUid -> CUid -> Bool :: *))
                        GHC.Word.neWord32
                        `cast` (Sym (System.Posix.Types.N:CUid[0])
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                ->_R <Bool>_R
                                :: (Word32 -> Word32 -> Bool :: *)
                                   ~R# (CUid -> CUid -> Bool :: *))]
System.Posix.Types.$fEqCUid
  = GHC.Classes.C:Eq
      @ CUid
      (GHC.Word.eqWord32
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CUid -> CUid -> Bool :: *)))
      (GHC.Word.neWord32
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CUid -> CUid -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCUid [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CUid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CUid
                         System.Posix.Types.$fEqCUid
                         GHC.Word.$fOrdWord32_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CUid[0])
                                 ->_R Sym (System.Posix.Types.N:CUid[0])
                                 ->_R <Ordering>_R
                                 :: (Word32 -> Word32 -> Ordering :: *)
                                    ~R# (CUid -> CUid -> Ordering :: *))
                         GHC.Word.ltWord32
                         `cast` (Sym (System.Posix.Types.N:CUid[0])
                                 ->_R Sym (System.Posix.Types.N:CUid[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *) ~R# (CUid -> CUid -> Bool :: *))
                         GHC.Word.leWord32
                         `cast` (Sym (System.Posix.Types.N:CUid[0])
                                 ->_R Sym (System.Posix.Types.N:CUid[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *) ~R# (CUid -> CUid -> Bool :: *))
                         GHC.Word.gtWord32
                         `cast` (Sym (System.Posix.Types.N:CUid[0])
                                 ->_R Sym (System.Posix.Types.N:CUid[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *) ~R# (CUid -> CUid -> Bool :: *))
                         GHC.Word.geWord32
                         `cast` (Sym (System.Posix.Types.N:CUid[0])
                                 ->_R Sym (System.Posix.Types.N:CUid[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *) ~R# (CUid -> CUid -> Bool :: *))
                         GHC.Word.$fOrdWord32_$cmax
                         `cast` (Sym (System.Posix.Types.N:CUid[0])
                                 ->_R Sym (System.Posix.Types.N:CUid[0])
                                 ->_R Sym (System.Posix.Types.N:CUid[0])
                                 :: (Word32 -> Word32 -> Word32 :: *)
                                    ~R# (CUid -> CUid -> CUid :: *))
                         GHC.Word.$fOrdWord32_$cmin
                         `cast` (Sym (System.Posix.Types.N:CUid[0])
                                 ->_R Sym (System.Posix.Types.N:CUid[0])
                                 ->_R Sym (System.Posix.Types.N:CUid[0])
                                 :: (Word32 -> Word32 -> Word32 :: *)
                                    ~R# (CUid -> CUid -> CUid :: *))]
System.Posix.Types.$fOrdCUid
  = GHC.Classes.C:Ord
      @ CUid
      System.Posix.Types.$fEqCUid
      (GHC.Word.$fOrdWord32_$ccompare
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R <Ordering>_R
               :: (Word32 -> Word32 -> Ordering :: *)
                  ~R# (CUid -> CUid -> Ordering :: *)))
      (GHC.Word.ltWord32
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CUid -> CUid -> Bool :: *)))
      (GHC.Word.leWord32
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CUid -> CUid -> Bool :: *)))
      (GHC.Word.gtWord32
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CUid -> CUid -> Bool :: *)))
      (GHC.Word.geWord32
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CUid -> CUid -> Bool :: *)))
      (GHC.Word.$fOrdWord32_$cmax
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CUid -> CUid -> CUid :: *)))
      (GHC.Word.$fOrdWord32_$cmin
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CUid -> CUid -> CUid :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCUid [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CUid
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CUid
                       System.Posix.Types.$fNumCUid
                       System.Posix.Types.$fOrdCUid
                       GHC.Word.$fRealWord32_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Ratio Integer>_R
                               :: (Word32 -> Ratio Integer :: *)
                                  ~R# (CUid -> Ratio Integer :: *))]
System.Posix.Types.$fRealCUid
  = GHC.Real.C:Real
      @ CUid
      System.Posix.Types.$fNumCUid
      System.Posix.Types.$fOrdCUid
      (GHC.Word.$fRealWord32_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Ratio Integer>_R
               :: (Word32 -> Ratio Integer :: *)
                  ~R# (CUid -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 58, joins: 0/0}
System.Posix.Types.$fIntegralCUid [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral CUid
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: CUid
                           System.Posix.Types.$fRealCUid
                           System.Posix.Types.$fEnumCUid
                           GHC.Word.$fIntegralWord32_$cquot
                           `cast` (Sym (System.Posix.Types.N:CUid[0])
                                   ->_R Sym (System.Posix.Types.N:CUid[0])
                                   ->_R Sym (System.Posix.Types.N:CUid[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CUid -> CUid -> CUid :: *))
                           GHC.Word.$fIntegralWord32_$crem
                           `cast` (Sym (System.Posix.Types.N:CUid[0])
                                   ->_R Sym (System.Posix.Types.N:CUid[0])
                                   ->_R Sym (System.Posix.Types.N:CUid[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CUid -> CUid -> CUid :: *))
                           GHC.Word.$fIntegralWord32_$cquot
                           `cast` (Sym (System.Posix.Types.N:CUid[0])
                                   ->_R Sym (System.Posix.Types.N:CUid[0])
                                   ->_R Sym (System.Posix.Types.N:CUid[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CUid -> CUid -> CUid :: *))
                           GHC.Word.$fIntegralWord32_$crem
                           `cast` (Sym (System.Posix.Types.N:CUid[0])
                                   ->_R Sym (System.Posix.Types.N:CUid[0])
                                   ->_R Sym (System.Posix.Types.N:CUid[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CUid -> CUid -> CUid :: *))
                           GHC.Word.$fIntegralWord32_$cquotRem
                           `cast` (Sym (System.Posix.Types.N:CUid[0])
                                   ->_R Sym (System.Posix.Types.N:CUid[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CUid[0]))
                                           (Sym (System.Posix.Types.N:CUid[0])))_R
                                   :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                                      ~R# (CUid -> CUid -> (CUid, CUid) :: *))
                           GHC.Word.$fIntegralWord32_$cdivMod
                           `cast` (Sym (System.Posix.Types.N:CUid[0])
                                   ->_R Sym (System.Posix.Types.N:CUid[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CUid[0]))
                                           (Sym (System.Posix.Types.N:CUid[0])))_R
                                   :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                                      ~R# (CUid -> CUid -> (CUid, CUid) :: *))
                           GHC.Word.$ctoInteger2
                           `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Integer>_R
                                   :: (Word32 -> Integer :: *) ~R# (CUid -> Integer :: *))]
System.Posix.Types.$fIntegralCUid
  = GHC.Real.C:Integral
      @ CUid
      System.Posix.Types.$fRealCUid
      System.Posix.Types.$fEnumCUid
      (GHC.Word.$fIntegralWord32_$cquot
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CUid -> CUid -> CUid :: *)))
      (GHC.Word.$fIntegralWord32_$crem
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CUid -> CUid -> CUid :: *)))
      (GHC.Word.$fIntegralWord32_$cquot
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CUid -> CUid -> CUid :: *)))
      (GHC.Word.$fIntegralWord32_$crem
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CUid -> CUid -> CUid :: *)))
      (GHC.Word.$fIntegralWord32_$cquotRem
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CUid[0]))
                       (Sym (System.Posix.Types.N:CUid[0])))_R
               :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                  ~R# (CUid -> CUid -> (CUid, CUid) :: *)))
      (GHC.Word.$fIntegralWord32_$cdivMod
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CUid[0]))
                       (Sym (System.Posix.Types.N:CUid[0])))_R
               :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                  ~R# (CUid -> CUid -> (CUid, CUid) :: *)))
      (GHC.Word.$ctoInteger2
       `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Integer>_R
               :: (Word32 -> Integer :: *) ~R# (CUid -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
System.Posix.Types.$fBitsCUid [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits CUid
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: CUid
                        System.Posix.Types.$fEqCUid
                        GHC.Word.$fBitsWord32_$c.&.
                        `cast` (Sym (System.Posix.Types.N:CUid[0])
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                :: (Word32 -> Word32 -> Word32 :: *)
                                   ~R# (CUid -> CUid -> CUid :: *))
                        GHC.Word.$fBitsWord32_$c.|.
                        `cast` (Sym (System.Posix.Types.N:CUid[0])
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                :: (Word32 -> Word32 -> Word32 :: *)
                                   ~R# (CUid -> CUid -> CUid :: *))
                        GHC.Word.$fBitsWord32_$cxor
                        `cast` (Sym (System.Posix.Types.N:CUid[0])
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                :: (Word32 -> Word32 -> Word32 :: *)
                                   ~R# (CUid -> CUid -> CUid :: *))
                        GHC.Word.$fBitsWord32_$ccomplement
                        `cast` (Sym (System.Posix.Types.N:CUid[0])
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                :: (Word32 -> Word32 :: *) ~R# (CUid -> CUid :: *))
                        GHC.Word.$fBitsWord32_$cshift
                        `cast` (Sym (System.Posix.Types.N:CUid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *))
                        GHC.Word.$fBitsWord32_$crotate
                        `cast` (Sym (System.Posix.Types.N:CUid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *))
                        GHC.Word.$fBitsWord32_$cminBound
                        `cast` (Sym (System.Posix.Types.N:CUid[0])
                                :: (Word32 :: *) ~R# (CUid :: *))
                        GHC.Word.$fBitsWord32_$cbit
                        `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CUid[0])
                                :: (Int -> Word32 :: *) ~R# (Int -> CUid :: *))
                        GHC.Word.$fBitsWord32_$csetBit
                        `cast` (Sym (System.Posix.Types.N:CUid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *))
                        GHC.Word.$fBitsWord32_$cclearBit
                        `cast` (Sym (System.Posix.Types.N:CUid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *))
                        GHC.Word.$fBitsWord32_$ccomplementBit
                        `cast` (Sym (System.Posix.Types.N:CUid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *))
                        GHC.Word.$fBitsWord32_$ctestBit
                        `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Int -> Bool>_R
                                :: (Word32 -> Int -> Bool :: *) ~R# (CUid -> Int -> Bool :: *))
                        GHC.Word.$fBitsWord32_$cbitSizeMaybe
                        `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Maybe Int>_R
                                :: (Word32 -> Maybe Int :: *) ~R# (CUid -> Maybe Int :: *))
                        GHC.Word.$fBitsWord32_$cfiniteBitSize
                        `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Int>_R
                                :: (Word32 -> Int :: *) ~R# (CUid -> Int :: *))
                        GHC.Word.$fBitsWord32_$cisSigned
                        `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Bool>_R
                                :: (Word32 -> Bool :: *) ~R# (CUid -> Bool :: *))
                        GHC.Word.$fBitsWord32_$cshiftL
                        `cast` (Sym (System.Posix.Types.N:CUid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *))
                        GHC.Word.$fBitsWord32_$cunsafeShiftL
                        `cast` (Sym (System.Posix.Types.N:CUid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *))
                        GHC.Word.$fBitsWord32_$cshiftR
                        `cast` (Sym (System.Posix.Types.N:CUid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *))
                        GHC.Word.$fBitsWord32_$cunsafeShiftR
                        `cast` (Sym (System.Posix.Types.N:CUid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *))
                        GHC.Word.$fBitsWord32_$crotateL
                        `cast` (Sym (System.Posix.Types.N:CUid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *))
                        GHC.Word.$fBitsWord32_$crotateR
                        `cast` (Sym (System.Posix.Types.N:CUid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CUid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *))
                        GHC.Word.$fBitsWord32_$cpopCount
                        `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Int>_R
                                :: (Word32 -> Int :: *) ~R# (CUid -> Int :: *))]
System.Posix.Types.$fBitsCUid
  = Data.Bits.C:Bits
      @ CUid
      System.Posix.Types.$fEqCUid
      (GHC.Word.$fBitsWord32_$c.&.
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CUid -> CUid -> CUid :: *)))
      (GHC.Word.$fBitsWord32_$c.|.
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CUid -> CUid -> CUid :: *)))
      (GHC.Word.$fBitsWord32_$cxor
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CUid -> CUid -> CUid :: *)))
      (GHC.Word.$fBitsWord32_$ccomplement
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Word32 :: *) ~R# (CUid -> CUid :: *)))
      (GHC.Word.$fBitsWord32_$cshift
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *)))
      (GHC.Word.$fBitsWord32_$crotate
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *)))
      (GHC.Word.$fBitsWord32_$cminBound
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 :: *) ~R# (CUid :: *)))
      (GHC.Word.$fBitsWord32_$cbit
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Int -> Word32 :: *) ~R# (Int -> CUid :: *)))
      (GHC.Word.$fBitsWord32_$csetBit
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *)))
      (GHC.Word.$fBitsWord32_$cclearBit
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *)))
      (GHC.Word.$fBitsWord32_$ccomplementBit
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *)))
      (GHC.Word.$fBitsWord32_$ctestBit
       `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Int -> Bool>_R
               :: (Word32 -> Int -> Bool :: *) ~R# (CUid -> Int -> Bool :: *)))
      (GHC.Word.$fBitsWord32_$cbitSizeMaybe
       `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Maybe Int>_R
               :: (Word32 -> Maybe Int :: *) ~R# (CUid -> Maybe Int :: *)))
      (GHC.Word.$fBitsWord32_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CUid -> Int :: *)))
      (GHC.Word.$fBitsWord32_$cisSigned
       `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Bool>_R
               :: (Word32 -> Bool :: *) ~R# (CUid -> Bool :: *)))
      (GHC.Word.$fBitsWord32_$cshiftL
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *)))
      (GHC.Word.$fBitsWord32_$cunsafeShiftL
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *)))
      (GHC.Word.$fBitsWord32_$cshiftR
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *)))
      (GHC.Word.$fBitsWord32_$cunsafeShiftR
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *)))
      (GHC.Word.$fBitsWord32_$crotateL
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *)))
      (GHC.Word.$fBitsWord32_$crotateR
       `cast` (Sym (System.Posix.Types.N:CUid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CUid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CUid -> Int -> CUid :: *)))
      (GHC.Word.$fBitsWord32_$cpopCount
       `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CUid -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
System.Posix.Types.$fFiniteBitsCUid [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits CUid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: CUid
                              System.Posix.Types.$fBitsCUid
                              GHC.Word.$fBitsWord32_$cfiniteBitSize
                              `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Int>_R
                                      :: (Word32 -> Int :: *) ~R# (CUid -> Int :: *))
                              GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
                              `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Int>_R
                                      :: (Word32 -> Int :: *) ~R# (CUid -> Int :: *))
                              GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros
                              `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Int>_R
                                      :: (Word32 -> Int :: *) ~R# (CUid -> Int :: *))]
System.Posix.Types.$fFiniteBitsCUid
  = Data.Bits.C:FiniteBits
      @ CUid
      System.Posix.Types.$fBitsCUid
      (GHC.Word.$fBitsWord32_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CUid -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
       `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CUid -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros
       `cast` (Sym (System.Posix.Types.N:CUid[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CUid -> Int :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCNlink [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CNlink
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CNlink
                       GHC.Word.$fShowWord64_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CNlink[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Word64 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CNlink -> [Char] -> [Char] :: *))
                       GHC.Word.$fShowWord64_$cshow
                       `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <[Char]>_R
                               :: (Word64 -> [Char] :: *) ~R# (CNlink -> [Char] :: *))
                       GHC.Word.$fShowWord64_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CNlink[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Word64] -> [Char] -> [Char] :: *)
                                  ~R# ([CNlink] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCNlink
  = GHC.Show.C:Show
      @ CNlink
      (GHC.Word.$fShowWord64_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Word64 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CNlink -> [Char] -> [Char] :: *)))
      (GHC.Word.$fShowWord64_$cshow
       `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <[Char]>_R
               :: (Word64 -> [Char] :: *) ~R# (CNlink -> [Char] :: *)))
      (GHC.Word.$fShowWord64_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CNlink[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Word64] -> [Char] -> [Char] :: *)
                  ~R# ([CNlink] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCNlink [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CNlink
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CNlink
                       GHC.Read.$fReadWord64_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,)
                                         (Sym (System.Posix.Types.N:CNlink[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Word64, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CNlink, [Char])] :: *))
                       GHC.Read.$fReadWord64_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CNlink[0])])_R
                                         <[Char]>_R)_R])_R
                               :: ([Char] -> [([Word64], [Char])] :: *)
                                  ~R# ([Char] -> [([CNlink], [Char])] :: *))
                       GHC.Read.$fReadWord13
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Word64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      (System.Posix.Types.N:CNlink[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Word64 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CNlink :: *))
                       GHC.Read.$fReadWord11
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Word64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        ([System.Posix.Types.N:CNlink[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Word64] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CNlink] :: *))]
System.Posix.Types.$fReadCNlink
  = GHC.Read.C:Read
      @ CNlink
      (GHC.Read.$fReadWord64_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,)
                         (Sym (System.Posix.Types.N:CNlink[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Word64, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CNlink, [Char])] :: *)))
      (GHC.Read.$fReadWord64_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CNlink[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Word64], [Char])] :: *)
                  ~R# ([Char] -> [([CNlink], [Char])] :: *)))
      (GHC.Read.$fReadWord13
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Word64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      (System.Posix.Types.N:CNlink[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Word64 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CNlink :: *)))
      (GHC.Read.$fReadWord11
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Word64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        ([System.Posix.Types.N:CNlink[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Word64] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CNlink] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
System.Posix.Types.$fBoundedCNlink [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded CNlink
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: CNlink
                          GHC.Word.$fBitsWord7
                          `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                  :: (Word64 :: *) ~R# (CNlink :: *))
                          GHC.Word.$fBoundedWord64_$cmaxBound
                          `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                  :: (Word64 :: *) ~R# (CNlink :: *))]
System.Posix.Types.$fBoundedCNlink
  = GHC.Enum.C:Bounded
      @ CNlink
      (GHC.Word.$fBitsWord7
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 :: *) ~R# (CNlink :: *)))
      (GHC.Word.$fBoundedWord64_$cmaxBound
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 :: *) ~R# (CNlink :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCNlink [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CNlink
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CNlink
                                   Foreign.Storable.$fStorableWord64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Int>_R
                                           :: (Word64 -> Int :: *) ~R# (CNlink -> Int :: *))
                                   Foreign.Storable.$fStorableWord64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Int>_R
                                           :: (Word64 -> Int :: *) ~R# (CNlink -> Int :: *))
                                   GHC.Storable.readWord64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CNlink))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CNlink[0]))
                                           :: (Ptr Word64
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word64 #) :: *)
                                              ~R# (Ptr CNlink -> Int -> IO CNlink :: *))
                                   GHC.Storable.writeWord64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CNlink))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CNlink[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word64
                                               -> Int
                                               -> Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CNlink -> Int -> CNlink -> IO () :: *))
                                   Foreign.Storable.$fStorableWord18
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CNlink[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word64 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CNlink :: *))
                                   Foreign.Storable.$fStorableWord17
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CNlink[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> CNlink -> IO () :: *))
                                   Foreign.Storable.$fStorableWord15
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CNlink))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CNlink[0]))
                                           :: (Ptr Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word64 #) :: *)
                                              ~R# (Ptr CNlink -> IO CNlink :: *))
                                   Foreign.Storable.$fStorableWord14
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CNlink))_R
                                           ->_R Sym (System.Posix.Types.N:CNlink[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word64
                                               -> Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CNlink -> CNlink -> IO () :: *))]
System.Posix.Types.$fStorableCNlink
  = Foreign.Storable.C:Storable
      @ CNlink
      (Foreign.Storable.$fStorableWord64_$calignment
       `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CNlink -> Int :: *)))
      (Foreign.Storable.$fStorableWord64_$calignment
       `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CNlink -> Int :: *)))
      (GHC.Storable.readWord64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CNlink))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CNlink[0]))
               :: (Ptr Word64
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                  ~R# (Ptr CNlink -> Int -> IO CNlink :: *)))
      (GHC.Storable.writeWord64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CNlink))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word64
                   -> Int
                   -> Word64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CNlink -> Int -> CNlink -> IO () :: *)))
      (Foreign.Storable.$fStorableWord18
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CNlink[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CNlink :: *)))
      (Foreign.Storable.$fStorableWord17
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Word64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CNlink -> IO () :: *)))
      (Foreign.Storable.$fStorableWord15
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CNlink))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CNlink[0]))
               :: (Ptr Word64
                   -> State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                  ~R# (Ptr CNlink -> IO CNlink :: *)))
      (Foreign.Storable.$fStorableWord14
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CNlink))_R
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word64
                   -> Word64 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CNlink -> CNlink -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCNlink [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CNlink
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CNlink
                       GHC.Word.$fEnumWord64_$csucc
                       `cast` (Sym (System.Posix.Types.N:CNlink[0])
                               ->_R Sym (System.Posix.Types.N:CNlink[0])
                               :: (Word64 -> Word64 :: *) ~R# (CNlink -> CNlink :: *))
                       GHC.Word.$fEnumWord64_$cpred
                       `cast` (Sym (System.Posix.Types.N:CNlink[0])
                               ->_R Sym (System.Posix.Types.N:CNlink[0])
                               :: (Word64 -> Word64 :: *) ~R# (CNlink -> CNlink :: *))
                       GHC.Word.$fEnumWord64_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CNlink[0])
                               :: (Int -> Word64 :: *) ~R# (Int -> CNlink :: *))
                       GHC.Word.$fEnumWord64_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Int>_R
                               :: (Word64 -> Int :: *) ~R# (CNlink -> Int :: *))
                       GHC.Word.$fEnumWord64_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CNlink[0])
                               ->_R ([Sym (System.Posix.Types.N:CNlink[0])])_R
                               :: (Word64 -> [Word64] :: *) ~R# (CNlink -> [CNlink] :: *))
                       GHC.Word.$fEnumWord64_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CNlink[0])
                               ->_R Sym (System.Posix.Types.N:CNlink[0])
                               ->_R ([Sym (System.Posix.Types.N:CNlink[0])])_R
                               :: (Word64 -> Word64 -> [Word64] :: *)
                                  ~R# (CNlink -> CNlink -> [CNlink] :: *))
                       GHC.Word.$fEnumWord64_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CNlink[0])
                               ->_R Sym (System.Posix.Types.N:CNlink[0])
                               ->_R ([Sym (System.Posix.Types.N:CNlink[0])])_R
                               :: (Word64 -> Word64 -> [Word64] :: *)
                                  ~R# (CNlink -> CNlink -> [CNlink] :: *))
                       GHC.Word.$fEnumWord64_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CNlink[0])
                               ->_R Sym (System.Posix.Types.N:CNlink[0])
                               ->_R Sym (System.Posix.Types.N:CNlink[0])
                               ->_R ([Sym (System.Posix.Types.N:CNlink[0])])_R
                               :: (Word64 -> Word64 -> Word64 -> [Word64] :: *)
                                  ~R# (CNlink -> CNlink -> CNlink -> [CNlink] :: *))]
System.Posix.Types.$fEnumCNlink
  = GHC.Enum.C:Enum
      @ CNlink
      (GHC.Word.$fEnumWord64_$csucc
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Word64 :: *) ~R# (CNlink -> CNlink :: *)))
      (GHC.Word.$fEnumWord64_$cpred
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Word64 :: *) ~R# (CNlink -> CNlink :: *)))
      (GHC.Word.$fEnumWord64_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Int -> Word64 :: *) ~R# (Int -> CNlink :: *)))
      (GHC.Word.$fEnumWord64_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CNlink -> Int :: *)))
      (GHC.Word.$fEnumWord64_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R ([Sym (System.Posix.Types.N:CNlink[0])])_R
               :: (Word64 -> [Word64] :: *) ~R# (CNlink -> [CNlink] :: *)))
      (GHC.Word.$fEnumWord64_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R ([Sym (System.Posix.Types.N:CNlink[0])])_R
               :: (Word64 -> Word64 -> [Word64] :: *)
                  ~R# (CNlink -> CNlink -> [CNlink] :: *)))
      (GHC.Word.$fEnumWord64_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R ([Sym (System.Posix.Types.N:CNlink[0])])_R
               :: (Word64 -> Word64 -> [Word64] :: *)
                  ~R# (CNlink -> CNlink -> [CNlink] :: *)))
      (GHC.Word.$fEnumWord64_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R ([Sym (System.Posix.Types.N:CNlink[0])])_R
               :: (Word64 -> Word64 -> Word64 -> [Word64] :: *)
                  ~R# (CNlink -> CNlink -> CNlink -> [CNlink] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCNlink [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CNlink
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CNlink
                     GHC.Word.$fNumWord64_$c+
                     `cast` (Sym (System.Posix.Types.N:CNlink[0])
                             ->_R Sym (System.Posix.Types.N:CNlink[0])
                             ->_R Sym (System.Posix.Types.N:CNlink[0])
                             :: (Word64 -> Word64 -> Word64 :: *)
                                ~R# (CNlink -> CNlink -> CNlink :: *))
                     GHC.Word.$fNumWord64_$c-
                     `cast` (Sym (System.Posix.Types.N:CNlink[0])
                             ->_R Sym (System.Posix.Types.N:CNlink[0])
                             ->_R Sym (System.Posix.Types.N:CNlink[0])
                             :: (Word64 -> Word64 -> Word64 :: *)
                                ~R# (CNlink -> CNlink -> CNlink :: *))
                     GHC.Word.$fNumWord64_$c*
                     `cast` (Sym (System.Posix.Types.N:CNlink[0])
                             ->_R Sym (System.Posix.Types.N:CNlink[0])
                             ->_R Sym (System.Posix.Types.N:CNlink[0])
                             :: (Word64 -> Word64 -> Word64 :: *)
                                ~R# (CNlink -> CNlink -> CNlink :: *))
                     GHC.Word.$fNumWord64_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CNlink[0])
                             ->_R Sym (System.Posix.Types.N:CNlink[0])
                             :: (Word64 -> Word64 :: *) ~R# (CNlink -> CNlink :: *))
                     GHC.Word.$fNumWord64_$cabs
                     `cast` (Sym (System.Posix.Types.N:CNlink[0])
                             ->_R Sym (System.Posix.Types.N:CNlink[0])
                             :: (Word64 -> Word64 :: *) ~R# (CNlink -> CNlink :: *))
                     GHC.Word.$fNumWord64_$csignum
                     `cast` (Sym (System.Posix.Types.N:CNlink[0])
                             ->_R Sym (System.Posix.Types.N:CNlink[0])
                             :: (Word64 -> Word64 :: *) ~R# (CNlink -> CNlink :: *))
                     GHC.Word.$fNumWord64_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CNlink[0])
                             :: (Integer -> Word64 :: *) ~R# (Integer -> CNlink :: *))]
System.Posix.Types.$fNumCNlink
  = GHC.Num.C:Num
      @ CNlink
      (GHC.Word.$fNumWord64_$c+
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CNlink -> CNlink -> CNlink :: *)))
      (GHC.Word.$fNumWord64_$c-
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CNlink -> CNlink -> CNlink :: *)))
      (GHC.Word.$fNumWord64_$c*
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CNlink -> CNlink -> CNlink :: *)))
      (GHC.Word.$fNumWord64_$cnegate
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Word64 :: *) ~R# (CNlink -> CNlink :: *)))
      (GHC.Word.$fNumWord64_$cabs
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Word64 :: *) ~R# (CNlink -> CNlink :: *)))
      (GHC.Word.$fNumWord64_$csignum
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Word64 :: *) ~R# (CNlink -> CNlink :: *)))
      (GHC.Word.$fNumWord64_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Integer -> Word64 :: *) ~R# (Integer -> CNlink :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCNlink [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CNlink
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CNlink
                        GHC.Word.eqWord64
                        `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                ->_R <Bool>_R
                                :: (Word64 -> Word64 -> Bool :: *)
                                   ~R# (CNlink -> CNlink -> Bool :: *))
                        GHC.Word.neWord64
                        `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                ->_R <Bool>_R
                                :: (Word64 -> Word64 -> Bool :: *)
                                   ~R# (CNlink -> CNlink -> Bool :: *))]
System.Posix.Types.$fEqCNlink
  = GHC.Classes.C:Eq
      @ CNlink
      (GHC.Word.eqWord64
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CNlink -> CNlink -> Bool :: *)))
      (GHC.Word.neWord64
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CNlink -> CNlink -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCNlink [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CNlink
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CNlink
                         System.Posix.Types.$fEqCNlink
                         GHC.Word.$fOrdWord64_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                 ->_R Sym (System.Posix.Types.N:CNlink[0])
                                 ->_R <Ordering>_R
                                 :: (Word64 -> Word64 -> Ordering :: *)
                                    ~R# (CNlink -> CNlink -> Ordering :: *))
                         GHC.Word.ltWord64
                         `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                 ->_R Sym (System.Posix.Types.N:CNlink[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *)
                                    ~R# (CNlink -> CNlink -> Bool :: *))
                         GHC.Word.leWord64
                         `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                 ->_R Sym (System.Posix.Types.N:CNlink[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *)
                                    ~R# (CNlink -> CNlink -> Bool :: *))
                         GHC.Word.gtWord64
                         `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                 ->_R Sym (System.Posix.Types.N:CNlink[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *)
                                    ~R# (CNlink -> CNlink -> Bool :: *))
                         GHC.Word.geWord64
                         `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                 ->_R Sym (System.Posix.Types.N:CNlink[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *)
                                    ~R# (CNlink -> CNlink -> Bool :: *))
                         GHC.Word.$fOrdWord64_$cmax
                         `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                 ->_R Sym (System.Posix.Types.N:CNlink[0])
                                 ->_R Sym (System.Posix.Types.N:CNlink[0])
                                 :: (Word64 -> Word64 -> Word64 :: *)
                                    ~R# (CNlink -> CNlink -> CNlink :: *))
                         GHC.Word.$fOrdWord64_$cmin
                         `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                 ->_R Sym (System.Posix.Types.N:CNlink[0])
                                 ->_R Sym (System.Posix.Types.N:CNlink[0])
                                 :: (Word64 -> Word64 -> Word64 :: *)
                                    ~R# (CNlink -> CNlink -> CNlink :: *))]
System.Posix.Types.$fOrdCNlink
  = GHC.Classes.C:Ord
      @ CNlink
      System.Posix.Types.$fEqCNlink
      (GHC.Word.$fOrdWord64_$ccompare
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R <Ordering>_R
               :: (Word64 -> Word64 -> Ordering :: *)
                  ~R# (CNlink -> CNlink -> Ordering :: *)))
      (GHC.Word.ltWord64
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CNlink -> CNlink -> Bool :: *)))
      (GHC.Word.leWord64
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CNlink -> CNlink -> Bool :: *)))
      (GHC.Word.gtWord64
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CNlink -> CNlink -> Bool :: *)))
      (GHC.Word.geWord64
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CNlink -> CNlink -> Bool :: *)))
      (GHC.Word.$fOrdWord64_$cmax
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CNlink -> CNlink -> CNlink :: *)))
      (GHC.Word.$fOrdWord64_$cmin
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CNlink -> CNlink -> CNlink :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCNlink [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CNlink
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CNlink
                       System.Posix.Types.$fNumCNlink
                       System.Posix.Types.$fOrdCNlink
                       GHC.Word.$fRealWord64_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Ratio Integer>_R
                               :: (Word64 -> Ratio Integer :: *)
                                  ~R# (CNlink -> Ratio Integer :: *))]
System.Posix.Types.$fRealCNlink
  = GHC.Real.C:Real
      @ CNlink
      System.Posix.Types.$fNumCNlink
      System.Posix.Types.$fOrdCNlink
      (GHC.Word.$fRealWord64_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Ratio Integer>_R
               :: (Word64 -> Ratio Integer :: *)
                  ~R# (CNlink -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 58, joins: 0/0}
System.Posix.Types.$fIntegralCNlink [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral CNlink
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: CNlink
                           System.Posix.Types.$fRealCNlink
                           System.Posix.Types.$fEnumCNlink
                           GHC.Word.$fIntegralWord64_$cdiv
                           `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                   ->_R Sym (System.Posix.Types.N:CNlink[0])
                                   ->_R Sym (System.Posix.Types.N:CNlink[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CNlink -> CNlink -> CNlink :: *))
                           GHC.Word.$fIntegralWord64_$cmod
                           `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                   ->_R Sym (System.Posix.Types.N:CNlink[0])
                                   ->_R Sym (System.Posix.Types.N:CNlink[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CNlink -> CNlink -> CNlink :: *))
                           GHC.Word.$fIntegralWord64_$cdiv
                           `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                   ->_R Sym (System.Posix.Types.N:CNlink[0])
                                   ->_R Sym (System.Posix.Types.N:CNlink[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CNlink -> CNlink -> CNlink :: *))
                           GHC.Word.$fIntegralWord64_$cmod
                           `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                   ->_R Sym (System.Posix.Types.N:CNlink[0])
                                   ->_R Sym (System.Posix.Types.N:CNlink[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CNlink -> CNlink -> CNlink :: *))
                           GHC.Word.$fIntegralWord64_$cquotRem
                           `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                   ->_R Sym (System.Posix.Types.N:CNlink[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CNlink[0]))
                                           (Sym (System.Posix.Types.N:CNlink[0])))_R
                                   :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                                      ~R# (CNlink -> CNlink -> (CNlink, CNlink) :: *))
                           GHC.Word.$fIntegralWord64_$cdivMod
                           `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                   ->_R Sym (System.Posix.Types.N:CNlink[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CNlink[0]))
                                           (Sym (System.Posix.Types.N:CNlink[0])))_R
                                   :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                                      ~R# (CNlink -> CNlink -> (CNlink, CNlink) :: *))
                           GHC.Word.$fIntegralWord64_$ctoInteger
                           `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Integer>_R
                                   :: (Word64 -> Integer :: *) ~R# (CNlink -> Integer :: *))]
System.Posix.Types.$fIntegralCNlink
  = GHC.Real.C:Integral
      @ CNlink
      System.Posix.Types.$fRealCNlink
      System.Posix.Types.$fEnumCNlink
      (GHC.Word.$fIntegralWord64_$cdiv
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CNlink -> CNlink -> CNlink :: *)))
      (GHC.Word.$fIntegralWord64_$cmod
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CNlink -> CNlink -> CNlink :: *)))
      (GHC.Word.$fIntegralWord64_$cdiv
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CNlink -> CNlink -> CNlink :: *)))
      (GHC.Word.$fIntegralWord64_$cmod
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CNlink -> CNlink -> CNlink :: *)))
      (GHC.Word.$fIntegralWord64_$cquotRem
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CNlink[0]))
                       (Sym (System.Posix.Types.N:CNlink[0])))_R
               :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                  ~R# (CNlink -> CNlink -> (CNlink, CNlink) :: *)))
      (GHC.Word.$fIntegralWord64_$cdivMod
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CNlink[0]))
                       (Sym (System.Posix.Types.N:CNlink[0])))_R
               :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                  ~R# (CNlink -> CNlink -> (CNlink, CNlink) :: *)))
      (GHC.Word.$fIntegralWord64_$ctoInteger
       `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Integer>_R
               :: (Word64 -> Integer :: *) ~R# (CNlink -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
System.Posix.Types.$fBitsCNlink [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits CNlink
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: CNlink
                        System.Posix.Types.$fEqCNlink
                        GHC.Word.$fBitsWord64_$c.&.
                        `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                :: (Word64 -> Word64 -> Word64 :: *)
                                   ~R# (CNlink -> CNlink -> CNlink :: *))
                        GHC.Word.$fBitsWord64_$c.|.
                        `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                :: (Word64 -> Word64 -> Word64 :: *)
                                   ~R# (CNlink -> CNlink -> CNlink :: *))
                        GHC.Word.$fBitsWord64_$cxor
                        `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                :: (Word64 -> Word64 -> Word64 :: *)
                                   ~R# (CNlink -> CNlink -> CNlink :: *))
                        GHC.Word.$fBitsWord64_$ccomplement
                        `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                :: (Word64 -> Word64 :: *) ~R# (CNlink -> CNlink :: *))
                        GHC.Word.$fBitsWord64_$cshift
                        `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CNlink -> Int -> CNlink :: *))
                        GHC.Word.$fBitsWord64_$crotate
                        `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CNlink -> Int -> CNlink :: *))
                        GHC.Word.$fBitsWord7
                        `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                :: (Word64 :: *) ~R# (CNlink :: *))
                        GHC.Word.$fBitsWord64_$cbit
                        `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CNlink[0])
                                :: (Int -> Word64 :: *) ~R# (Int -> CNlink :: *))
                        GHC.Word.$fBitsWord64_$csetBit
                        `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CNlink -> Int -> CNlink :: *))
                        GHC.Word.$fBitsWord64_$cclearBit
                        `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CNlink -> Int -> CNlink :: *))
                        GHC.Word.$fBitsWord64_$ccomplementBit
                        `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CNlink -> Int -> CNlink :: *))
                        GHC.Word.$fBitsWord64_$ctestBit
                        `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Int -> Bool>_R
                                :: (Word64 -> Int -> Bool :: *) ~R# (CNlink -> Int -> Bool :: *))
                        GHC.Word.$fBitsWord64_$cbitSizeMaybe
                        `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Maybe Int>_R
                                :: (Word64 -> Maybe Int :: *) ~R# (CNlink -> Maybe Int :: *))
                        GHC.Word.$fBitsWord64_$cfiniteBitSize
                        `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Int>_R
                                :: (Word64 -> Int :: *) ~R# (CNlink -> Int :: *))
                        GHC.Word.$fBitsWord64_$cisSigned
                        `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Bool>_R
                                :: (Word64 -> Bool :: *) ~R# (CNlink -> Bool :: *))
                        GHC.Word.$fBitsWord64_$cshiftL
                        `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CNlink -> Int -> CNlink :: *))
                        GHC.Word.$fBitsWord64_$cunsafeShiftL
                        `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CNlink -> Int -> CNlink :: *))
                        GHC.Word.$fBitsWord64_$cshiftR
                        `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CNlink -> Int -> CNlink :: *))
                        GHC.Word.$fBitsWord64_$cunsafeShiftR
                        `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CNlink -> Int -> CNlink :: *))
                        GHC.Word.$fBitsWord64_$crotateL
                        `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CNlink -> Int -> CNlink :: *))
                        GHC.Word.$fBitsWord64_$crotateR
                        `cast` (Sym (System.Posix.Types.N:CNlink[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CNlink[0])
                                :: (Word64 -> Int -> Word64 :: *)
                                   ~R# (CNlink -> Int -> CNlink :: *))
                        GHC.Word.$fBitsWord64_$cpopCount
                        `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Int>_R
                                :: (Word64 -> Int :: *) ~R# (CNlink -> Int :: *))]
System.Posix.Types.$fBitsCNlink
  = Data.Bits.C:Bits
      @ CNlink
      System.Posix.Types.$fEqCNlink
      (GHC.Word.$fBitsWord64_$c.&.
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CNlink -> CNlink -> CNlink :: *)))
      (GHC.Word.$fBitsWord64_$c.|.
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CNlink -> CNlink -> CNlink :: *)))
      (GHC.Word.$fBitsWord64_$cxor
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CNlink -> CNlink -> CNlink :: *)))
      (GHC.Word.$fBitsWord64_$ccomplement
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Word64 :: *) ~R# (CNlink -> CNlink :: *)))
      (GHC.Word.$fBitsWord64_$cshift
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CNlink -> Int -> CNlink :: *)))
      (GHC.Word.$fBitsWord64_$crotate
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CNlink -> Int -> CNlink :: *)))
      (GHC.Word.$fBitsWord7
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 :: *) ~R# (CNlink :: *)))
      (GHC.Word.$fBitsWord64_$cbit
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Int -> Word64 :: *) ~R# (Int -> CNlink :: *)))
      (GHC.Word.$fBitsWord64_$csetBit
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CNlink -> Int -> CNlink :: *)))
      (GHC.Word.$fBitsWord64_$cclearBit
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CNlink -> Int -> CNlink :: *)))
      (GHC.Word.$fBitsWord64_$ccomplementBit
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CNlink -> Int -> CNlink :: *)))
      (GHC.Word.$fBitsWord64_$ctestBit
       `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Int -> Bool>_R
               :: (Word64 -> Int -> Bool :: *) ~R# (CNlink -> Int -> Bool :: *)))
      (GHC.Word.$fBitsWord64_$cbitSizeMaybe
       `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Maybe Int>_R
               :: (Word64 -> Maybe Int :: *) ~R# (CNlink -> Maybe Int :: *)))
      (GHC.Word.$fBitsWord64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CNlink -> Int :: *)))
      (GHC.Word.$fBitsWord64_$cisSigned
       `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Bool>_R
               :: (Word64 -> Bool :: *) ~R# (CNlink -> Bool :: *)))
      (GHC.Word.$fBitsWord64_$cshiftL
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CNlink -> Int -> CNlink :: *)))
      (GHC.Word.$fBitsWord64_$cunsafeShiftL
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CNlink -> Int -> CNlink :: *)))
      (GHC.Word.$fBitsWord64_$cshiftR
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CNlink -> Int -> CNlink :: *)))
      (GHC.Word.$fBitsWord64_$cunsafeShiftR
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CNlink -> Int -> CNlink :: *)))
      (GHC.Word.$fBitsWord64_$crotateL
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CNlink -> Int -> CNlink :: *)))
      (GHC.Word.$fBitsWord64_$crotateR
       `cast` (Sym (System.Posix.Types.N:CNlink[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CNlink[0])
               :: (Word64 -> Int -> Word64 :: *)
                  ~R# (CNlink -> Int -> CNlink :: *)))
      (GHC.Word.$fBitsWord64_$cpopCount
       `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CNlink -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
System.Posix.Types.$fFiniteBitsCNlink [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits CNlink
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: CNlink
                              System.Posix.Types.$fBitsCNlink
                              GHC.Word.$fBitsWord64_$cfiniteBitSize
                              `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Int>_R
                                      :: (Word64 -> Int :: *) ~R# (CNlink -> Int :: *))
                              GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                              `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Int>_R
                                      :: (Word64 -> Int :: *) ~R# (CNlink -> Int :: *))
                              GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                              `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Int>_R
                                      :: (Word64 -> Int :: *) ~R# (CNlink -> Int :: *))]
System.Posix.Types.$fFiniteBitsCNlink
  = Data.Bits.C:FiniteBits
      @ CNlink
      System.Posix.Types.$fBitsCNlink
      (GHC.Word.$fBitsWord64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CNlink -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
       `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CNlink -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
       `cast` (Sym (System.Posix.Types.N:CNlink[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CNlink -> Int :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCGid [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CGid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CGid
                       GHC.Word.$fShowWord32_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CGid[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Word32 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CGid -> [Char] -> [Char] :: *))
                       GHC.Word.$fShowWord32_$cshow
                       `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <[Char]>_R
                               :: (Word32 -> [Char] :: *) ~R# (CGid -> [Char] :: *))
                       GHC.Word.$fShowWord32_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CGid[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Word32] -> [Char] -> [Char] :: *)
                                  ~R# ([CGid] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCGid
  = GHC.Show.C:Show
      @ CGid
      (GHC.Word.$fShowWord32_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Word32 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CGid -> [Char] -> [Char] :: *)))
      (GHC.Word.$fShowWord32_$cshow
       `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <[Char]>_R
               :: (Word32 -> [Char] :: *) ~R# (CGid -> [Char] :: *)))
      (GHC.Word.$fShowWord32_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CGid[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Word32] -> [Char] -> [Char] :: *)
                  ~R# ([CGid] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCGid [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CGid
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CGid
                       GHC.Read.$fReadWord32_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,) (Sym (System.Posix.Types.N:CGid[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Word32, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CGid, [Char])] :: *))
                       GHC.Read.$fReadWord32_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CGid[0])])_R <[Char]>_R)_R])_R
                               :: ([Char] -> [([Word32], [Char])] :: *)
                                  ~R# ([Char] -> [([CGid], [Char])] :: *))
                       GHC.Read.$fReadWord10
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Word32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      (System.Posix.Types.N:CGid[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Word32 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CGid :: *))
                       GHC.Read.$fReadWord7
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Word32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        ([System.Posix.Types.N:CGid[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Word32] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CGid] :: *))]
System.Posix.Types.$fReadCGid
  = GHC.Read.C:Read
      @ CGid
      (GHC.Read.$fReadWord32_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,) (Sym (System.Posix.Types.N:CGid[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Word32, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CGid, [Char])] :: *)))
      (GHC.Read.$fReadWord32_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CGid[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Word32], [Char])] :: *)
                  ~R# ([Char] -> [([CGid], [Char])] :: *)))
      (GHC.Read.$fReadWord10
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Word32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      (System.Posix.Types.N:CGid[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Word32 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CGid :: *)))
      (GHC.Read.$fReadWord7
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Word32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        ([System.Posix.Types.N:CGid[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Word32] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CGid] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
System.Posix.Types.$fBoundedCGid [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded CGid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: CGid
                          GHC.Word.$fBitsWord32_$cminBound
                          `cast` (Sym (System.Posix.Types.N:CGid[0])
                                  :: (Word32 :: *) ~R# (CGid :: *))
                          GHC.Word.$fBoundedWord32_$cmaxBound
                          `cast` (Sym (System.Posix.Types.N:CGid[0])
                                  :: (Word32 :: *) ~R# (CGid :: *))]
System.Posix.Types.$fBoundedCGid
  = GHC.Enum.C:Bounded
      @ CGid
      (GHC.Word.$fBitsWord32_$cminBound
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 :: *) ~R# (CGid :: *)))
      (GHC.Word.$fBoundedWord32_$cmaxBound
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 :: *) ~R# (CGid :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCGid [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CGid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CGid
                                   Foreign.Storable.$fStorableWord32_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Int>_R
                                           :: (Word32 -> Int :: *) ~R# (CGid -> Int :: *))
                                   Foreign.Storable.$fStorableWord32_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Int>_R
                                           :: (Word32 -> Int :: *) ~R# (CGid -> Int :: *))
                                   GHC.Storable.readWord32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CGid))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CGid[0]))
                                           :: (Ptr Word32
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word32 #) :: *)
                                              ~R# (Ptr CGid -> Int -> IO CGid :: *))
                                   GHC.Storable.writeWord32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CGid))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CGid[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word32
                                               -> Int
                                               -> Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CGid -> Int -> CGid -> IO () :: *))
                                   Foreign.Storable.$fStorableWord13
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CGid[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word32 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CGid :: *))
                                   Foreign.Storable.$fStorableWord12
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CGid[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> CGid -> IO () :: *))
                                   Foreign.Storable.$fStorableWord11
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CGid))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CGid[0]))
                                           :: (Ptr Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word32 #) :: *)
                                              ~R# (Ptr CGid -> IO CGid :: *))
                                   Foreign.Storable.$fStorableWord10
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CGid))_R
                                           ->_R Sym (System.Posix.Types.N:CGid[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word32
                                               -> Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CGid -> CGid -> IO () :: *))]
System.Posix.Types.$fStorableCGid
  = Foreign.Storable.C:Storable
      @ CGid
      (Foreign.Storable.$fStorableWord32_$calignment
       `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CGid -> Int :: *)))
      (Foreign.Storable.$fStorableWord32_$calignment
       `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CGid -> Int :: *)))
      (GHC.Storable.readWord32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CGid))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CGid[0]))
               :: (Ptr Word32
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word32 #) :: *)
                  ~R# (Ptr CGid -> Int -> IO CGid :: *)))
      (GHC.Storable.writeWord32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CGid))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word32
                   -> Int
                   -> Word32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CGid -> Int -> CGid -> IO () :: *)))
      (Foreign.Storable.$fStorableWord13
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CGid[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word32 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CGid :: *)))
      (Foreign.Storable.$fStorableWord12
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Word32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CGid -> IO () :: *)))
      (Foreign.Storable.$fStorableWord11
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CGid))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CGid[0]))
               :: (Ptr Word32
                   -> State# RealWorld -> (# State# RealWorld, Word32 #) :: *)
                  ~R# (Ptr CGid -> IO CGid :: *)))
      (Foreign.Storable.$fStorableWord10
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CGid))_R
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word32
                   -> Word32 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CGid -> CGid -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCGid [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CGid
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CGid
                       GHC.Word.$fEnumWord32_$csucc
                       `cast` (Sym (System.Posix.Types.N:CGid[0])
                               ->_R Sym (System.Posix.Types.N:CGid[0])
                               :: (Word32 -> Word32 :: *) ~R# (CGid -> CGid :: *))
                       GHC.Word.$fEnumWord32_$cpred
                       `cast` (Sym (System.Posix.Types.N:CGid[0])
                               ->_R Sym (System.Posix.Types.N:CGid[0])
                               :: (Word32 -> Word32 :: *) ~R# (CGid -> CGid :: *))
                       GHC.Word.$fEnumWord32_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CGid[0])
                               :: (Int -> Word32 :: *) ~R# (Int -> CGid :: *))
                       GHC.Word.$fEnumWord32_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Int>_R
                               :: (Word32 -> Int :: *) ~R# (CGid -> Int :: *))
                       GHC.Word.$fEnumWord32_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CGid[0])
                               ->_R ([Sym (System.Posix.Types.N:CGid[0])])_R
                               :: (Word32 -> [Word32] :: *) ~R# (CGid -> [CGid] :: *))
                       GHC.Word.$fEnumWord32_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CGid[0])
                               ->_R Sym (System.Posix.Types.N:CGid[0])
                               ->_R ([Sym (System.Posix.Types.N:CGid[0])])_R
                               :: (Word32 -> Word32 -> [Word32] :: *)
                                  ~R# (CGid -> CGid -> [CGid] :: *))
                       GHC.Word.$fEnumWord32_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CGid[0])
                               ->_R Sym (System.Posix.Types.N:CGid[0])
                               ->_R ([Sym (System.Posix.Types.N:CGid[0])])_R
                               :: (Word32 -> Word32 -> [Word32] :: *)
                                  ~R# (CGid -> CGid -> [CGid] :: *))
                       GHC.Word.$fEnumWord32_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CGid[0])
                               ->_R Sym (System.Posix.Types.N:CGid[0])
                               ->_R Sym (System.Posix.Types.N:CGid[0])
                               ->_R ([Sym (System.Posix.Types.N:CGid[0])])_R
                               :: (Word32 -> Word32 -> Word32 -> [Word32] :: *)
                                  ~R# (CGid -> CGid -> CGid -> [CGid] :: *))]
System.Posix.Types.$fEnumCGid
  = GHC.Enum.C:Enum
      @ CGid
      (GHC.Word.$fEnumWord32_$csucc
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Word32 :: *) ~R# (CGid -> CGid :: *)))
      (GHC.Word.$fEnumWord32_$cpred
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Word32 :: *) ~R# (CGid -> CGid :: *)))
      (GHC.Word.$fEnumWord32_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Int -> Word32 :: *) ~R# (Int -> CGid :: *)))
      (GHC.Word.$fEnumWord32_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CGid -> Int :: *)))
      (GHC.Word.$fEnumWord32_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R ([Sym (System.Posix.Types.N:CGid[0])])_R
               :: (Word32 -> [Word32] :: *) ~R# (CGid -> [CGid] :: *)))
      (GHC.Word.$fEnumWord32_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R ([Sym (System.Posix.Types.N:CGid[0])])_R
               :: (Word32 -> Word32 -> [Word32] :: *)
                  ~R# (CGid -> CGid -> [CGid] :: *)))
      (GHC.Word.$fEnumWord32_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R ([Sym (System.Posix.Types.N:CGid[0])])_R
               :: (Word32 -> Word32 -> [Word32] :: *)
                  ~R# (CGid -> CGid -> [CGid] :: *)))
      (GHC.Word.$fEnumWord32_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R ([Sym (System.Posix.Types.N:CGid[0])])_R
               :: (Word32 -> Word32 -> Word32 -> [Word32] :: *)
                  ~R# (CGid -> CGid -> CGid -> [CGid] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCGid [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CGid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CGid
                     GHC.Word.$fNumWord32_$c+
                     `cast` (Sym (System.Posix.Types.N:CGid[0])
                             ->_R Sym (System.Posix.Types.N:CGid[0])
                             ->_R Sym (System.Posix.Types.N:CGid[0])
                             :: (Word32 -> Word32 -> Word32 :: *)
                                ~R# (CGid -> CGid -> CGid :: *))
                     GHC.Word.$fNumWord32_$c-
                     `cast` (Sym (System.Posix.Types.N:CGid[0])
                             ->_R Sym (System.Posix.Types.N:CGid[0])
                             ->_R Sym (System.Posix.Types.N:CGid[0])
                             :: (Word32 -> Word32 -> Word32 :: *)
                                ~R# (CGid -> CGid -> CGid :: *))
                     GHC.Word.$fNumWord32_$c*
                     `cast` (Sym (System.Posix.Types.N:CGid[0])
                             ->_R Sym (System.Posix.Types.N:CGid[0])
                             ->_R Sym (System.Posix.Types.N:CGid[0])
                             :: (Word32 -> Word32 -> Word32 :: *)
                                ~R# (CGid -> CGid -> CGid :: *))
                     GHC.Word.$fNumWord32_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CGid[0])
                             ->_R Sym (System.Posix.Types.N:CGid[0])
                             :: (Word32 -> Word32 :: *) ~R# (CGid -> CGid :: *))
                     GHC.Word.$fNumWord32_$cabs
                     `cast` (Sym (System.Posix.Types.N:CGid[0])
                             ->_R Sym (System.Posix.Types.N:CGid[0])
                             :: (Word32 -> Word32 :: *) ~R# (CGid -> CGid :: *))
                     GHC.Word.$fNumWord32_$csignum
                     `cast` (Sym (System.Posix.Types.N:CGid[0])
                             ->_R Sym (System.Posix.Types.N:CGid[0])
                             :: (Word32 -> Word32 :: *) ~R# (CGid -> CGid :: *))
                     GHC.Word.$fNumWord32_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CGid[0])
                             :: (Integer -> Word32 :: *) ~R# (Integer -> CGid :: *))]
System.Posix.Types.$fNumCGid
  = GHC.Num.C:Num
      @ CGid
      (GHC.Word.$fNumWord32_$c+
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CGid -> CGid -> CGid :: *)))
      (GHC.Word.$fNumWord32_$c-
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CGid -> CGid -> CGid :: *)))
      (GHC.Word.$fNumWord32_$c*
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CGid -> CGid -> CGid :: *)))
      (GHC.Word.$fNumWord32_$cnegate
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Word32 :: *) ~R# (CGid -> CGid :: *)))
      (GHC.Word.$fNumWord32_$cabs
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Word32 :: *) ~R# (CGid -> CGid :: *)))
      (GHC.Word.$fNumWord32_$csignum
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Word32 :: *) ~R# (CGid -> CGid :: *)))
      (GHC.Word.$fNumWord32_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Integer -> Word32 :: *) ~R# (Integer -> CGid :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCGid [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CGid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CGid
                        GHC.Word.eqWord32
                        `cast` (Sym (System.Posix.Types.N:CGid[0])
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                ->_R <Bool>_R
                                :: (Word32 -> Word32 -> Bool :: *) ~R# (CGid -> CGid -> Bool :: *))
                        GHC.Word.neWord32
                        `cast` (Sym (System.Posix.Types.N:CGid[0])
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                ->_R <Bool>_R
                                :: (Word32 -> Word32 -> Bool :: *)
                                   ~R# (CGid -> CGid -> Bool :: *))]
System.Posix.Types.$fEqCGid
  = GHC.Classes.C:Eq
      @ CGid
      (GHC.Word.eqWord32
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CGid -> CGid -> Bool :: *)))
      (GHC.Word.neWord32
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CGid -> CGid -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCGid [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CGid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CGid
                         System.Posix.Types.$fEqCGid
                         GHC.Word.$fOrdWord32_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CGid[0])
                                 ->_R Sym (System.Posix.Types.N:CGid[0])
                                 ->_R <Ordering>_R
                                 :: (Word32 -> Word32 -> Ordering :: *)
                                    ~R# (CGid -> CGid -> Ordering :: *))
                         GHC.Word.ltWord32
                         `cast` (Sym (System.Posix.Types.N:CGid[0])
                                 ->_R Sym (System.Posix.Types.N:CGid[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *) ~R# (CGid -> CGid -> Bool :: *))
                         GHC.Word.leWord32
                         `cast` (Sym (System.Posix.Types.N:CGid[0])
                                 ->_R Sym (System.Posix.Types.N:CGid[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *) ~R# (CGid -> CGid -> Bool :: *))
                         GHC.Word.gtWord32
                         `cast` (Sym (System.Posix.Types.N:CGid[0])
                                 ->_R Sym (System.Posix.Types.N:CGid[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *) ~R# (CGid -> CGid -> Bool :: *))
                         GHC.Word.geWord32
                         `cast` (Sym (System.Posix.Types.N:CGid[0])
                                 ->_R Sym (System.Posix.Types.N:CGid[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *) ~R# (CGid -> CGid -> Bool :: *))
                         GHC.Word.$fOrdWord32_$cmax
                         `cast` (Sym (System.Posix.Types.N:CGid[0])
                                 ->_R Sym (System.Posix.Types.N:CGid[0])
                                 ->_R Sym (System.Posix.Types.N:CGid[0])
                                 :: (Word32 -> Word32 -> Word32 :: *)
                                    ~R# (CGid -> CGid -> CGid :: *))
                         GHC.Word.$fOrdWord32_$cmin
                         `cast` (Sym (System.Posix.Types.N:CGid[0])
                                 ->_R Sym (System.Posix.Types.N:CGid[0])
                                 ->_R Sym (System.Posix.Types.N:CGid[0])
                                 :: (Word32 -> Word32 -> Word32 :: *)
                                    ~R# (CGid -> CGid -> CGid :: *))]
System.Posix.Types.$fOrdCGid
  = GHC.Classes.C:Ord
      @ CGid
      System.Posix.Types.$fEqCGid
      (GHC.Word.$fOrdWord32_$ccompare
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R <Ordering>_R
               :: (Word32 -> Word32 -> Ordering :: *)
                  ~R# (CGid -> CGid -> Ordering :: *)))
      (GHC.Word.ltWord32
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CGid -> CGid -> Bool :: *)))
      (GHC.Word.leWord32
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CGid -> CGid -> Bool :: *)))
      (GHC.Word.gtWord32
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CGid -> CGid -> Bool :: *)))
      (GHC.Word.geWord32
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CGid -> CGid -> Bool :: *)))
      (GHC.Word.$fOrdWord32_$cmax
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CGid -> CGid -> CGid :: *)))
      (GHC.Word.$fOrdWord32_$cmin
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CGid -> CGid -> CGid :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCGid [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CGid
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CGid
                       System.Posix.Types.$fNumCGid
                       System.Posix.Types.$fOrdCGid
                       GHC.Word.$fRealWord32_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Ratio Integer>_R
                               :: (Word32 -> Ratio Integer :: *)
                                  ~R# (CGid -> Ratio Integer :: *))]
System.Posix.Types.$fRealCGid
  = GHC.Real.C:Real
      @ CGid
      System.Posix.Types.$fNumCGid
      System.Posix.Types.$fOrdCGid
      (GHC.Word.$fRealWord32_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Ratio Integer>_R
               :: (Word32 -> Ratio Integer :: *)
                  ~R# (CGid -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 58, joins: 0/0}
System.Posix.Types.$fIntegralCGid [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral CGid
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: CGid
                           System.Posix.Types.$fRealCGid
                           System.Posix.Types.$fEnumCGid
                           GHC.Word.$fIntegralWord32_$cquot
                           `cast` (Sym (System.Posix.Types.N:CGid[0])
                                   ->_R Sym (System.Posix.Types.N:CGid[0])
                                   ->_R Sym (System.Posix.Types.N:CGid[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CGid -> CGid -> CGid :: *))
                           GHC.Word.$fIntegralWord32_$crem
                           `cast` (Sym (System.Posix.Types.N:CGid[0])
                                   ->_R Sym (System.Posix.Types.N:CGid[0])
                                   ->_R Sym (System.Posix.Types.N:CGid[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CGid -> CGid -> CGid :: *))
                           GHC.Word.$fIntegralWord32_$cquot
                           `cast` (Sym (System.Posix.Types.N:CGid[0])
                                   ->_R Sym (System.Posix.Types.N:CGid[0])
                                   ->_R Sym (System.Posix.Types.N:CGid[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CGid -> CGid -> CGid :: *))
                           GHC.Word.$fIntegralWord32_$crem
                           `cast` (Sym (System.Posix.Types.N:CGid[0])
                                   ->_R Sym (System.Posix.Types.N:CGid[0])
                                   ->_R Sym (System.Posix.Types.N:CGid[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CGid -> CGid -> CGid :: *))
                           GHC.Word.$fIntegralWord32_$cquotRem
                           `cast` (Sym (System.Posix.Types.N:CGid[0])
                                   ->_R Sym (System.Posix.Types.N:CGid[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CGid[0]))
                                           (Sym (System.Posix.Types.N:CGid[0])))_R
                                   :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                                      ~R# (CGid -> CGid -> (CGid, CGid) :: *))
                           GHC.Word.$fIntegralWord32_$cdivMod
                           `cast` (Sym (System.Posix.Types.N:CGid[0])
                                   ->_R Sym (System.Posix.Types.N:CGid[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CGid[0]))
                                           (Sym (System.Posix.Types.N:CGid[0])))_R
                                   :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                                      ~R# (CGid -> CGid -> (CGid, CGid) :: *))
                           GHC.Word.$ctoInteger2
                           `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Integer>_R
                                   :: (Word32 -> Integer :: *) ~R# (CGid -> Integer :: *))]
System.Posix.Types.$fIntegralCGid
  = GHC.Real.C:Integral
      @ CGid
      System.Posix.Types.$fRealCGid
      System.Posix.Types.$fEnumCGid
      (GHC.Word.$fIntegralWord32_$cquot
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CGid -> CGid -> CGid :: *)))
      (GHC.Word.$fIntegralWord32_$crem
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CGid -> CGid -> CGid :: *)))
      (GHC.Word.$fIntegralWord32_$cquot
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CGid -> CGid -> CGid :: *)))
      (GHC.Word.$fIntegralWord32_$crem
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CGid -> CGid -> CGid :: *)))
      (GHC.Word.$fIntegralWord32_$cquotRem
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CGid[0]))
                       (Sym (System.Posix.Types.N:CGid[0])))_R
               :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                  ~R# (CGid -> CGid -> (CGid, CGid) :: *)))
      (GHC.Word.$fIntegralWord32_$cdivMod
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CGid[0]))
                       (Sym (System.Posix.Types.N:CGid[0])))_R
               :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                  ~R# (CGid -> CGid -> (CGid, CGid) :: *)))
      (GHC.Word.$ctoInteger2
       `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Integer>_R
               :: (Word32 -> Integer :: *) ~R# (CGid -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
System.Posix.Types.$fBitsCGid [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits CGid
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: CGid
                        System.Posix.Types.$fEqCGid
                        GHC.Word.$fBitsWord32_$c.&.
                        `cast` (Sym (System.Posix.Types.N:CGid[0])
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                :: (Word32 -> Word32 -> Word32 :: *)
                                   ~R# (CGid -> CGid -> CGid :: *))
                        GHC.Word.$fBitsWord32_$c.|.
                        `cast` (Sym (System.Posix.Types.N:CGid[0])
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                :: (Word32 -> Word32 -> Word32 :: *)
                                   ~R# (CGid -> CGid -> CGid :: *))
                        GHC.Word.$fBitsWord32_$cxor
                        `cast` (Sym (System.Posix.Types.N:CGid[0])
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                :: (Word32 -> Word32 -> Word32 :: *)
                                   ~R# (CGid -> CGid -> CGid :: *))
                        GHC.Word.$fBitsWord32_$ccomplement
                        `cast` (Sym (System.Posix.Types.N:CGid[0])
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                :: (Word32 -> Word32 :: *) ~R# (CGid -> CGid :: *))
                        GHC.Word.$fBitsWord32_$cshift
                        `cast` (Sym (System.Posix.Types.N:CGid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *))
                        GHC.Word.$fBitsWord32_$crotate
                        `cast` (Sym (System.Posix.Types.N:CGid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *))
                        GHC.Word.$fBitsWord32_$cminBound
                        `cast` (Sym (System.Posix.Types.N:CGid[0])
                                :: (Word32 :: *) ~R# (CGid :: *))
                        GHC.Word.$fBitsWord32_$cbit
                        `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CGid[0])
                                :: (Int -> Word32 :: *) ~R# (Int -> CGid :: *))
                        GHC.Word.$fBitsWord32_$csetBit
                        `cast` (Sym (System.Posix.Types.N:CGid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *))
                        GHC.Word.$fBitsWord32_$cclearBit
                        `cast` (Sym (System.Posix.Types.N:CGid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *))
                        GHC.Word.$fBitsWord32_$ccomplementBit
                        `cast` (Sym (System.Posix.Types.N:CGid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *))
                        GHC.Word.$fBitsWord32_$ctestBit
                        `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Int -> Bool>_R
                                :: (Word32 -> Int -> Bool :: *) ~R# (CGid -> Int -> Bool :: *))
                        GHC.Word.$fBitsWord32_$cbitSizeMaybe
                        `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Maybe Int>_R
                                :: (Word32 -> Maybe Int :: *) ~R# (CGid -> Maybe Int :: *))
                        GHC.Word.$fBitsWord32_$cfiniteBitSize
                        `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Int>_R
                                :: (Word32 -> Int :: *) ~R# (CGid -> Int :: *))
                        GHC.Word.$fBitsWord32_$cisSigned
                        `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Bool>_R
                                :: (Word32 -> Bool :: *) ~R# (CGid -> Bool :: *))
                        GHC.Word.$fBitsWord32_$cshiftL
                        `cast` (Sym (System.Posix.Types.N:CGid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *))
                        GHC.Word.$fBitsWord32_$cunsafeShiftL
                        `cast` (Sym (System.Posix.Types.N:CGid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *))
                        GHC.Word.$fBitsWord32_$cshiftR
                        `cast` (Sym (System.Posix.Types.N:CGid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *))
                        GHC.Word.$fBitsWord32_$cunsafeShiftR
                        `cast` (Sym (System.Posix.Types.N:CGid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *))
                        GHC.Word.$fBitsWord32_$crotateL
                        `cast` (Sym (System.Posix.Types.N:CGid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *))
                        GHC.Word.$fBitsWord32_$crotateR
                        `cast` (Sym (System.Posix.Types.N:CGid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CGid[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *))
                        GHC.Word.$fBitsWord32_$cpopCount
                        `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Int>_R
                                :: (Word32 -> Int :: *) ~R# (CGid -> Int :: *))]
System.Posix.Types.$fBitsCGid
  = Data.Bits.C:Bits
      @ CGid
      System.Posix.Types.$fEqCGid
      (GHC.Word.$fBitsWord32_$c.&.
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CGid -> CGid -> CGid :: *)))
      (GHC.Word.$fBitsWord32_$c.|.
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CGid -> CGid -> CGid :: *)))
      (GHC.Word.$fBitsWord32_$cxor
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CGid -> CGid -> CGid :: *)))
      (GHC.Word.$fBitsWord32_$ccomplement
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Word32 :: *) ~R# (CGid -> CGid :: *)))
      (GHC.Word.$fBitsWord32_$cshift
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *)))
      (GHC.Word.$fBitsWord32_$crotate
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *)))
      (GHC.Word.$fBitsWord32_$cminBound
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 :: *) ~R# (CGid :: *)))
      (GHC.Word.$fBitsWord32_$cbit
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Int -> Word32 :: *) ~R# (Int -> CGid :: *)))
      (GHC.Word.$fBitsWord32_$csetBit
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *)))
      (GHC.Word.$fBitsWord32_$cclearBit
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *)))
      (GHC.Word.$fBitsWord32_$ccomplementBit
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *)))
      (GHC.Word.$fBitsWord32_$ctestBit
       `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Int -> Bool>_R
               :: (Word32 -> Int -> Bool :: *) ~R# (CGid -> Int -> Bool :: *)))
      (GHC.Word.$fBitsWord32_$cbitSizeMaybe
       `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Maybe Int>_R
               :: (Word32 -> Maybe Int :: *) ~R# (CGid -> Maybe Int :: *)))
      (GHC.Word.$fBitsWord32_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CGid -> Int :: *)))
      (GHC.Word.$fBitsWord32_$cisSigned
       `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Bool>_R
               :: (Word32 -> Bool :: *) ~R# (CGid -> Bool :: *)))
      (GHC.Word.$fBitsWord32_$cshiftL
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *)))
      (GHC.Word.$fBitsWord32_$cunsafeShiftL
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *)))
      (GHC.Word.$fBitsWord32_$cshiftR
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *)))
      (GHC.Word.$fBitsWord32_$cunsafeShiftR
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *)))
      (GHC.Word.$fBitsWord32_$crotateL
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *)))
      (GHC.Word.$fBitsWord32_$crotateR
       `cast` (Sym (System.Posix.Types.N:CGid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CGid[0])
               :: (Word32 -> Int -> Word32 :: *) ~R# (CGid -> Int -> CGid :: *)))
      (GHC.Word.$fBitsWord32_$cpopCount
       `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CGid -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
System.Posix.Types.$fFiniteBitsCGid [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits CGid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: CGid
                              System.Posix.Types.$fBitsCGid
                              GHC.Word.$fBitsWord32_$cfiniteBitSize
                              `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Int>_R
                                      :: (Word32 -> Int :: *) ~R# (CGid -> Int :: *))
                              GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
                              `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Int>_R
                                      :: (Word32 -> Int :: *) ~R# (CGid -> Int :: *))
                              GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros
                              `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Int>_R
                                      :: (Word32 -> Int :: *) ~R# (CGid -> Int :: *))]
System.Posix.Types.$fFiniteBitsCGid
  = Data.Bits.C:FiniteBits
      @ CGid
      System.Posix.Types.$fBitsCGid
      (GHC.Word.$fBitsWord32_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CGid -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
       `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CGid -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros
       `cast` (Sym (System.Posix.Types.N:CGid[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CGid -> Int :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCSsize [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CSsize
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CSsize
                       GHC.Int.$fShowInt64_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CSsize[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Int64 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CSsize -> [Char] -> [Char] :: *))
                       GHC.Int.$fShowInt64_$cshow
                       `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <[Char]>_R
                               :: (Int64 -> [Char] :: *) ~R# (CSsize -> [Char] :: *))
                       GHC.Int.$fShowInt64_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CSsize[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Int64] -> [Char] -> [Char] :: *)
                                  ~R# ([CSsize] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCSsize
  = GHC.Show.C:Show
      @ CSsize
      (GHC.Int.$fShowInt64_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Int64 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CSsize -> [Char] -> [Char] :: *)))
      (GHC.Int.$fShowInt64_$cshow
       `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <[Char]>_R
               :: (Int64 -> [Char] :: *) ~R# (CSsize -> [Char] :: *)))
      (GHC.Int.$fShowInt64_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CSsize[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Int64] -> [Char] -> [Char] :: *)
                  ~R# ([CSsize] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCSsize [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CSsize
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CSsize
                       GHC.Int.$fReadInt64_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,)
                                         (Sym (System.Posix.Types.N:CSsize[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Int64, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CSsize, [Char])] :: *))
                       GHC.Int.$fReadInt64_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CSsize[0])])_R
                                         <[Char]>_R)_R])_R
                               :: ([Char] -> [([Int64], [Char])] :: *)
                                  ~R# ([Char] -> [([CSsize], [Char])] :: *))
                       GHC.Int.$fReadInt10
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Int64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                     (System.Posix.Types.N:CSsize[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Int64 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CSsize :: *))
                       GHC.Int.$fReadInt7
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Int64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                       ([System.Posix.Types.N:CSsize[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Int64] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CSsize] :: *))]
System.Posix.Types.$fReadCSsize
  = GHC.Read.C:Read
      @ CSsize
      (GHC.Int.$fReadInt64_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,)
                         (Sym (System.Posix.Types.N:CSsize[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Int64, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CSsize, [Char])] :: *)))
      (GHC.Int.$fReadInt64_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CSsize[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Int64], [Char])] :: *)
                  ~R# ([Char] -> [([CSsize], [Char])] :: *)))
      (GHC.Int.$fReadInt10
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Int64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     (System.Posix.Types.N:CSsize[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Int64 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CSsize :: *)))
      (GHC.Int.$fReadInt7
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Int64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                       ([System.Posix.Types.N:CSsize[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Int64] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CSsize] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
System.Posix.Types.$fBoundedCSsize [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded CSsize
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: CSsize
                          GHC.Int.$fBoundedInt64_$cminBound
                          `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                  :: (Int64 :: *) ~R# (CSsize :: *))
                          GHC.Int.$fBoundedInt64_$cmaxBound
                          `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                  :: (Int64 :: *) ~R# (CSsize :: *))]
System.Posix.Types.$fBoundedCSsize
  = GHC.Enum.C:Bounded
      @ CSsize
      (GHC.Int.$fBoundedInt64_$cminBound
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 :: *) ~R# (CSsize :: *)))
      (GHC.Int.$fBoundedInt64_$cmaxBound
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 :: *) ~R# (CSsize :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCSsize [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CSsize
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CSsize
                                   Foreign.Storable.$fStorableInt64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Int>_R
                                           :: (Int64 -> Int :: *) ~R# (CSsize -> Int :: *))
                                   Foreign.Storable.$fStorableInt64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Int>_R
                                           :: (Int64 -> Int :: *) ~R# (CSsize -> Int :: *))
                                   GHC.Storable.readInt64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CSsize))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CSsize[0]))
                                           :: (Ptr Int64
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int64 #) :: *)
                                              ~R# (Ptr CSsize -> Int -> IO CSsize :: *))
                                   GHC.Storable.writeInt64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CSsize))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CSsize[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Int64
                                               -> Int
                                               -> Int64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CSsize -> Int -> CSsize -> IO () :: *))
                                   Foreign.Storable.$fStorableInt19
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CSsize[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int64 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CSsize :: *))
                                   Foreign.Storable.$fStorableInt18
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CSsize[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Int64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> CSsize -> IO () :: *))
                                   Foreign.Storable.$fStorableInt17
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CSsize))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CSsize[0]))
                                           :: (Ptr Int64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int64 #) :: *)
                                              ~R# (Ptr CSsize -> IO CSsize :: *))
                                   Foreign.Storable.$fStorableInt15
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CSsize))_R
                                           ->_R Sym (System.Posix.Types.N:CSsize[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Int64
                                               -> Int64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CSsize -> CSsize -> IO () :: *))]
System.Posix.Types.$fStorableCSsize
  = Foreign.Storable.C:Storable
      @ CSsize
      (Foreign.Storable.$fStorableInt64_$calignment
       `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CSsize -> Int :: *)))
      (Foreign.Storable.$fStorableInt64_$calignment
       `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CSsize -> Int :: *)))
      (GHC.Storable.readInt64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CSsize))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CSsize[0]))
               :: (Ptr Int64
                   -> Int -> State# RealWorld -> (# State# RealWorld, Int64 #) :: *)
                  ~R# (Ptr CSsize -> Int -> IO CSsize :: *)))
      (GHC.Storable.writeInt64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CSsize))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Int64
                   -> Int
                   -> Int64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CSsize -> Int -> CSsize -> IO () :: *)))
      (Foreign.Storable.$fStorableInt19
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CSsize[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Int64 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CSsize :: *)))
      (Foreign.Storable.$fStorableInt18
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Int64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CSsize -> IO () :: *)))
      (Foreign.Storable.$fStorableInt17
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CSsize))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CSsize[0]))
               :: (Ptr Int64
                   -> State# RealWorld -> (# State# RealWorld, Int64 #) :: *)
                  ~R# (Ptr CSsize -> IO CSsize :: *)))
      (Foreign.Storable.$fStorableInt15
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, CSsize))_R
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Int64
                   -> Int64 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CSsize -> CSsize -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCSsize [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CSsize
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CSsize
                       GHC.Int.$fEnumInt64_$csucc
                       `cast` (Sym (System.Posix.Types.N:CSsize[0])
                               ->_R Sym (System.Posix.Types.N:CSsize[0])
                               :: (Int64 -> Int64 :: *) ~R# (CSsize -> CSsize :: *))
                       GHC.Int.$fEnumInt64_$cpred
                       `cast` (Sym (System.Posix.Types.N:CSsize[0])
                               ->_R Sym (System.Posix.Types.N:CSsize[0])
                               :: (Int64 -> Int64 :: *) ~R# (CSsize -> CSsize :: *))
                       GHC.Int.$fEnumInt64_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CSsize[0])
                               :: (Int -> Int64 :: *) ~R# (Int -> CSsize :: *))
                       GHC.Int.$fEnumInt64_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Int>_R
                               :: (Int64 -> Int :: *) ~R# (CSsize -> Int :: *))
                       GHC.Int.$fEnumInt64_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CSsize[0])
                               ->_R ([Sym (System.Posix.Types.N:CSsize[0])])_R
                               :: (Int64 -> [Int64] :: *) ~R# (CSsize -> [CSsize] :: *))
                       GHC.Int.$fEnumInt64_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CSsize[0])
                               ->_R Sym (System.Posix.Types.N:CSsize[0])
                               ->_R ([Sym (System.Posix.Types.N:CSsize[0])])_R
                               :: (Int64 -> Int64 -> [Int64] :: *)
                                  ~R# (CSsize -> CSsize -> [CSsize] :: *))
                       GHC.Int.$fEnumInt64_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CSsize[0])
                               ->_R Sym (System.Posix.Types.N:CSsize[0])
                               ->_R ([Sym (System.Posix.Types.N:CSsize[0])])_R
                               :: (Int64 -> Int64 -> [Int64] :: *)
                                  ~R# (CSsize -> CSsize -> [CSsize] :: *))
                       GHC.Int.$fEnumInt64_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CSsize[0])
                               ->_R Sym (System.Posix.Types.N:CSsize[0])
                               ->_R Sym (System.Posix.Types.N:CSsize[0])
                               ->_R ([Sym (System.Posix.Types.N:CSsize[0])])_R
                               :: (Int64 -> Int64 -> Int64 -> [Int64] :: *)
                                  ~R# (CSsize -> CSsize -> CSsize -> [CSsize] :: *))]
System.Posix.Types.$fEnumCSsize
  = GHC.Enum.C:Enum
      @ CSsize
      (GHC.Int.$fEnumInt64_$csucc
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int64 :: *) ~R# (CSsize -> CSsize :: *)))
      (GHC.Int.$fEnumInt64_$cpred
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int64 :: *) ~R# (CSsize -> CSsize :: *)))
      (GHC.Int.$fEnumInt64_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int -> Int64 :: *) ~R# (Int -> CSsize :: *)))
      (GHC.Int.$fEnumInt64_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CSsize -> Int :: *)))
      (GHC.Int.$fEnumInt64_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R ([Sym (System.Posix.Types.N:CSsize[0])])_R
               :: (Int64 -> [Int64] :: *) ~R# (CSsize -> [CSsize] :: *)))
      (GHC.Int.$fEnumInt64_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R ([Sym (System.Posix.Types.N:CSsize[0])])_R
               :: (Int64 -> Int64 -> [Int64] :: *)
                  ~R# (CSsize -> CSsize -> [CSsize] :: *)))
      (GHC.Int.$fEnumInt64_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R ([Sym (System.Posix.Types.N:CSsize[0])])_R
               :: (Int64 -> Int64 -> [Int64] :: *)
                  ~R# (CSsize -> CSsize -> [CSsize] :: *)))
      (GHC.Int.$fEnumInt64_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R ([Sym (System.Posix.Types.N:CSsize[0])])_R
               :: (Int64 -> Int64 -> Int64 -> [Int64] :: *)
                  ~R# (CSsize -> CSsize -> CSsize -> [CSsize] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCSsize [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CSsize
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CSsize
                     GHC.Int.$fNumInt64_$c+
                     `cast` (Sym (System.Posix.Types.N:CSsize[0])
                             ->_R Sym (System.Posix.Types.N:CSsize[0])
                             ->_R Sym (System.Posix.Types.N:CSsize[0])
                             :: (Int64 -> Int64 -> Int64 :: *)
                                ~R# (CSsize -> CSsize -> CSsize :: *))
                     GHC.Int.$fNumInt64_$c-
                     `cast` (Sym (System.Posix.Types.N:CSsize[0])
                             ->_R Sym (System.Posix.Types.N:CSsize[0])
                             ->_R Sym (System.Posix.Types.N:CSsize[0])
                             :: (Int64 -> Int64 -> Int64 :: *)
                                ~R# (CSsize -> CSsize -> CSsize :: *))
                     GHC.Int.$fNumInt64_$c*
                     `cast` (Sym (System.Posix.Types.N:CSsize[0])
                             ->_R Sym (System.Posix.Types.N:CSsize[0])
                             ->_R Sym (System.Posix.Types.N:CSsize[0])
                             :: (Int64 -> Int64 -> Int64 :: *)
                                ~R# (CSsize -> CSsize -> CSsize :: *))
                     GHC.Int.$fNumInt64_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CSsize[0])
                             ->_R Sym (System.Posix.Types.N:CSsize[0])
                             :: (Int64 -> Int64 :: *) ~R# (CSsize -> CSsize :: *))
                     GHC.Int.$fNumInt64_$cabs
                     `cast` (Sym (System.Posix.Types.N:CSsize[0])
                             ->_R Sym (System.Posix.Types.N:CSsize[0])
                             :: (Int64 -> Int64 :: *) ~R# (CSsize -> CSsize :: *))
                     GHC.Int.$fNumInt64_$csignum
                     `cast` (Sym (System.Posix.Types.N:CSsize[0])
                             ->_R Sym (System.Posix.Types.N:CSsize[0])
                             :: (Int64 -> Int64 :: *) ~R# (CSsize -> CSsize :: *))
                     GHC.Int.$fNumInt64_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CSsize[0])
                             :: (Integer -> Int64 :: *) ~R# (Integer -> CSsize :: *))]
System.Posix.Types.$fNumCSsize
  = GHC.Num.C:Num
      @ CSsize
      (GHC.Int.$fNumInt64_$c+
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CSsize -> CSsize -> CSsize :: *)))
      (GHC.Int.$fNumInt64_$c-
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CSsize -> CSsize -> CSsize :: *)))
      (GHC.Int.$fNumInt64_$c*
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CSsize -> CSsize -> CSsize :: *)))
      (GHC.Int.$fNumInt64_$cnegate
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int64 :: *) ~R# (CSsize -> CSsize :: *)))
      (GHC.Int.$fNumInt64_$cabs
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int64 :: *) ~R# (CSsize -> CSsize :: *)))
      (GHC.Int.$fNumInt64_$csignum
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int64 :: *) ~R# (CSsize -> CSsize :: *)))
      (GHC.Int.$fNumInt64_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Integer -> Int64 :: *) ~R# (Integer -> CSsize :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCSsize [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CSsize
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CSsize
                        GHC.Int.eqInt64
                        `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                ->_R <Bool>_R
                                :: (Int64 -> Int64 -> Bool :: *)
                                   ~R# (CSsize -> CSsize -> Bool :: *))
                        GHC.Int.neInt64
                        `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                ->_R <Bool>_R
                                :: (Int64 -> Int64 -> Bool :: *)
                                   ~R# (CSsize -> CSsize -> Bool :: *))]
System.Posix.Types.$fEqCSsize
  = GHC.Classes.C:Eq
      @ CSsize
      (GHC.Int.eqInt64
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *)
                  ~R# (CSsize -> CSsize -> Bool :: *)))
      (GHC.Int.neInt64
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *)
                  ~R# (CSsize -> CSsize -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCSsize [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CSsize
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CSsize
                         System.Posix.Types.$fEqCSsize
                         GHC.Int.$fOrdInt64_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                 ->_R Sym (System.Posix.Types.N:CSsize[0])
                                 ->_R <Ordering>_R
                                 :: (Int64 -> Int64 -> Ordering :: *)
                                    ~R# (CSsize -> CSsize -> Ordering :: *))
                         GHC.Int.ltInt64
                         `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                 ->_R Sym (System.Posix.Types.N:CSsize[0])
                                 ->_R <Bool>_R
                                 :: (Int64 -> Int64 -> Bool :: *)
                                    ~R# (CSsize -> CSsize -> Bool :: *))
                         GHC.Int.leInt64
                         `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                 ->_R Sym (System.Posix.Types.N:CSsize[0])
                                 ->_R <Bool>_R
                                 :: (Int64 -> Int64 -> Bool :: *)
                                    ~R# (CSsize -> CSsize -> Bool :: *))
                         GHC.Int.gtInt64
                         `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                 ->_R Sym (System.Posix.Types.N:CSsize[0])
                                 ->_R <Bool>_R
                                 :: (Int64 -> Int64 -> Bool :: *)
                                    ~R# (CSsize -> CSsize -> Bool :: *))
                         GHC.Int.geInt64
                         `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                 ->_R Sym (System.Posix.Types.N:CSsize[0])
                                 ->_R <Bool>_R
                                 :: (Int64 -> Int64 -> Bool :: *)
                                    ~R# (CSsize -> CSsize -> Bool :: *))
                         GHC.Int.$fOrdInt64_$cmax
                         `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                 ->_R Sym (System.Posix.Types.N:CSsize[0])
                                 ->_R Sym (System.Posix.Types.N:CSsize[0])
                                 :: (Int64 -> Int64 -> Int64 :: *)
                                    ~R# (CSsize -> CSsize -> CSsize :: *))
                         GHC.Int.$fOrdInt64_$cmin
                         `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                 ->_R Sym (System.Posix.Types.N:CSsize[0])
                                 ->_R Sym (System.Posix.Types.N:CSsize[0])
                                 :: (Int64 -> Int64 -> Int64 :: *)
                                    ~R# (CSsize -> CSsize -> CSsize :: *))]
System.Posix.Types.$fOrdCSsize
  = GHC.Classes.C:Ord
      @ CSsize
      System.Posix.Types.$fEqCSsize
      (GHC.Int.$fOrdInt64_$ccompare
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R <Ordering>_R
               :: (Int64 -> Int64 -> Ordering :: *)
                  ~R# (CSsize -> CSsize -> Ordering :: *)))
      (GHC.Int.ltInt64
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *)
                  ~R# (CSsize -> CSsize -> Bool :: *)))
      (GHC.Int.leInt64
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *)
                  ~R# (CSsize -> CSsize -> Bool :: *)))
      (GHC.Int.gtInt64
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *)
                  ~R# (CSsize -> CSsize -> Bool :: *)))
      (GHC.Int.geInt64
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *)
                  ~R# (CSsize -> CSsize -> Bool :: *)))
      (GHC.Int.$fOrdInt64_$cmax
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CSsize -> CSsize -> CSsize :: *)))
      (GHC.Int.$fOrdInt64_$cmin
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CSsize -> CSsize -> CSsize :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCSsize [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CSsize
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CSsize
                       System.Posix.Types.$fNumCSsize
                       System.Posix.Types.$fOrdCSsize
                       GHC.Int.$fRealInt64_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Ratio Integer>_R
                               :: (Int64 -> Ratio Integer :: *)
                                  ~R# (CSsize -> Ratio Integer :: *))]
System.Posix.Types.$fRealCSsize
  = GHC.Real.C:Real
      @ CSsize
      System.Posix.Types.$fNumCSsize
      System.Posix.Types.$fOrdCSsize
      (GHC.Int.$fRealInt64_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Ratio Integer>_R
               :: (Int64 -> Ratio Integer :: *)
                  ~R# (CSsize -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 58, joins: 0/0}
System.Posix.Types.$fIntegralCSsize [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral CSsize
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: CSsize
                           System.Posix.Types.$fRealCSsize
                           System.Posix.Types.$fEnumCSsize
                           GHC.Int.$fIntegralInt64_$cquot
                           `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                   ->_R Sym (System.Posix.Types.N:CSsize[0])
                                   ->_R Sym (System.Posix.Types.N:CSsize[0])
                                   :: (Int64 -> Int64 -> Int64 :: *)
                                      ~R# (CSsize -> CSsize -> CSsize :: *))
                           GHC.Int.$fIntegralInt64_$crem
                           `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                   ->_R Sym (System.Posix.Types.N:CSsize[0])
                                   ->_R Sym (System.Posix.Types.N:CSsize[0])
                                   :: (Int64 -> Int64 -> Int64 :: *)
                                      ~R# (CSsize -> CSsize -> CSsize :: *))
                           GHC.Int.$fIntegralInt64_$cdiv
                           `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                   ->_R Sym (System.Posix.Types.N:CSsize[0])
                                   ->_R Sym (System.Posix.Types.N:CSsize[0])
                                   :: (Int64 -> Int64 -> Int64 :: *)
                                      ~R# (CSsize -> CSsize -> CSsize :: *))
                           GHC.Int.$fIntegralInt64_$cmod
                           `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                   ->_R Sym (System.Posix.Types.N:CSsize[0])
                                   ->_R Sym (System.Posix.Types.N:CSsize[0])
                                   :: (Int64 -> Int64 -> Int64 :: *)
                                      ~R# (CSsize -> CSsize -> CSsize :: *))
                           GHC.Int.$fIntegralInt64_$cquotRem
                           `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                   ->_R Sym (System.Posix.Types.N:CSsize[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CSsize[0]))
                                           (Sym (System.Posix.Types.N:CSsize[0])))_R
                                   :: (Int64 -> Int64 -> (Int64, Int64) :: *)
                                      ~R# (CSsize -> CSsize -> (CSsize, CSsize) :: *))
                           GHC.Int.$fIntegralInt64_$cdivMod
                           `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                   ->_R Sym (System.Posix.Types.N:CSsize[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CSsize[0]))
                                           (Sym (System.Posix.Types.N:CSsize[0])))_R
                                   :: (Int64 -> Int64 -> (Int64, Int64) :: *)
                                      ~R# (CSsize -> CSsize -> (CSsize, CSsize) :: *))
                           GHC.Int.$fIntegralInt64_$ctoInteger
                           `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Integer>_R
                                   :: (Int64 -> Integer :: *) ~R# (CSsize -> Integer :: *))]
System.Posix.Types.$fIntegralCSsize
  = GHC.Real.C:Integral
      @ CSsize
      System.Posix.Types.$fRealCSsize
      System.Posix.Types.$fEnumCSsize
      (GHC.Int.$fIntegralInt64_$cquot
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CSsize -> CSsize -> CSsize :: *)))
      (GHC.Int.$fIntegralInt64_$crem
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CSsize -> CSsize -> CSsize :: *)))
      (GHC.Int.$fIntegralInt64_$cdiv
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CSsize -> CSsize -> CSsize :: *)))
      (GHC.Int.$fIntegralInt64_$cmod
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CSsize -> CSsize -> CSsize :: *)))
      (GHC.Int.$fIntegralInt64_$cquotRem
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CSsize[0]))
                       (Sym (System.Posix.Types.N:CSsize[0])))_R
               :: (Int64 -> Int64 -> (Int64, Int64) :: *)
                  ~R# (CSsize -> CSsize -> (CSsize, CSsize) :: *)))
      (GHC.Int.$fIntegralInt64_$cdivMod
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CSsize[0]))
                       (Sym (System.Posix.Types.N:CSsize[0])))_R
               :: (Int64 -> Int64 -> (Int64, Int64) :: *)
                  ~R# (CSsize -> CSsize -> (CSsize, CSsize) :: *)))
      (GHC.Int.$fIntegralInt64_$ctoInteger
       `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Integer>_R
               :: (Int64 -> Integer :: *) ~R# (CSsize -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
System.Posix.Types.$fBitsCSsize [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits CSsize
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: CSsize
                        System.Posix.Types.$fEqCSsize
                        GHC.Int.$fBitsInt64_$c.&.
                        `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                :: (Int64 -> Int64 -> Int64 :: *)
                                   ~R# (CSsize -> CSsize -> CSsize :: *))
                        GHC.Int.$fBitsInt64_$c.|.
                        `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                :: (Int64 -> Int64 -> Int64 :: *)
                                   ~R# (CSsize -> CSsize -> CSsize :: *))
                        GHC.Int.$fBitsInt64_$cxor
                        `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                :: (Int64 -> Int64 -> Int64 :: *)
                                   ~R# (CSsize -> CSsize -> CSsize :: *))
                        GHC.Int.$fBitsInt64_$ccomplement
                        `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                :: (Int64 -> Int64 :: *) ~R# (CSsize -> CSsize :: *))
                        GHC.Int.$fBitsInt64_$cshift
                        `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (CSsize -> Int -> CSsize :: *))
                        GHC.Int.$fBitsInt64_$crotate
                        `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (CSsize -> Int -> CSsize :: *))
                        GHC.Int.$fBitsInt10
                        `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                :: (Int64 :: *) ~R# (CSsize :: *))
                        GHC.Int.$fBitsInt64_$cbit
                        `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CSsize[0])
                                :: (Int -> Int64 :: *) ~R# (Int -> CSsize :: *))
                        GHC.Int.$fBitsInt64_$csetBit
                        `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (CSsize -> Int -> CSsize :: *))
                        GHC.Int.$fBitsInt64_$cclearBit
                        `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (CSsize -> Int -> CSsize :: *))
                        GHC.Int.$fBitsInt64_$ccomplementBit
                        `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (CSsize -> Int -> CSsize :: *))
                        GHC.Int.$fBitsInt64_$ctestBit
                        `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Int -> Bool>_R
                                :: (Int64 -> Int -> Bool :: *) ~R# (CSsize -> Int -> Bool :: *))
                        GHC.Int.$fBitsInt64_$cbitSizeMaybe
                        `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Maybe Int>_R
                                :: (Int64 -> Maybe Int :: *) ~R# (CSsize -> Maybe Int :: *))
                        GHC.Int.$fBitsInt64_$cfiniteBitSize
                        `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Int>_R
                                :: (Int64 -> Int :: *) ~R# (CSsize -> Int :: *))
                        GHC.Int.$fBitsInt64_$cisSigned
                        `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Bool>_R
                                :: (Int64 -> Bool :: *) ~R# (CSsize -> Bool :: *))
                        GHC.Int.$fBitsInt64_$cshiftL
                        `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (CSsize -> Int -> CSsize :: *))
                        GHC.Int.$fBitsInt64_$cunsafeShiftL
                        `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (CSsize -> Int -> CSsize :: *))
                        GHC.Int.$fBitsInt64_$cshiftR
                        `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (CSsize -> Int -> CSsize :: *))
                        GHC.Int.$fBitsInt64_$cunsafeShiftR
                        `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (CSsize -> Int -> CSsize :: *))
                        GHC.Int.$fBitsInt64_$crotateL
                        `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (CSsize -> Int -> CSsize :: *))
                        GHC.Int.$fBitsInt64_$crotateR
                        `cast` (Sym (System.Posix.Types.N:CSsize[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CSsize[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (CSsize -> Int -> CSsize :: *))
                        GHC.Int.$fBitsInt64_$cpopCount
                        `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Int>_R
                                :: (Int64 -> Int :: *) ~R# (CSsize -> Int :: *))]
System.Posix.Types.$fBitsCSsize
  = Data.Bits.C:Bits
      @ CSsize
      System.Posix.Types.$fEqCSsize
      (GHC.Int.$fBitsInt64_$c.&.
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CSsize -> CSsize -> CSsize :: *)))
      (GHC.Int.$fBitsInt64_$c.|.
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CSsize -> CSsize -> CSsize :: *)))
      (GHC.Int.$fBitsInt64_$cxor
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int64 -> Int64 :: *)
                  ~R# (CSsize -> CSsize -> CSsize :: *)))
      (GHC.Int.$fBitsInt64_$ccomplement
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int64 :: *) ~R# (CSsize -> CSsize :: *)))
      (GHC.Int.$fBitsInt64_$cshift
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CSsize -> Int -> CSsize :: *)))
      (GHC.Int.$fBitsInt64_$crotate
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CSsize -> Int -> CSsize :: *)))
      (GHC.Int.$fBitsInt10
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 :: *) ~R# (CSsize :: *)))
      (GHC.Int.$fBitsInt64_$cbit
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int -> Int64 :: *) ~R# (Int -> CSsize :: *)))
      (GHC.Int.$fBitsInt64_$csetBit
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CSsize -> Int -> CSsize :: *)))
      (GHC.Int.$fBitsInt64_$cclearBit
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CSsize -> Int -> CSsize :: *)))
      (GHC.Int.$fBitsInt64_$ccomplementBit
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CSsize -> Int -> CSsize :: *)))
      (GHC.Int.$fBitsInt64_$ctestBit
       `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Int -> Bool>_R
               :: (Int64 -> Int -> Bool :: *) ~R# (CSsize -> Int -> Bool :: *)))
      (GHC.Int.$fBitsInt64_$cbitSizeMaybe
       `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Maybe Int>_R
               :: (Int64 -> Maybe Int :: *) ~R# (CSsize -> Maybe Int :: *)))
      (GHC.Int.$fBitsInt64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CSsize -> Int :: *)))
      (GHC.Int.$fBitsInt64_$cisSigned
       `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Bool>_R
               :: (Int64 -> Bool :: *) ~R# (CSsize -> Bool :: *)))
      (GHC.Int.$fBitsInt64_$cshiftL
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CSsize -> Int -> CSsize :: *)))
      (GHC.Int.$fBitsInt64_$cunsafeShiftL
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CSsize -> Int -> CSsize :: *)))
      (GHC.Int.$fBitsInt64_$cshiftR
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CSsize -> Int -> CSsize :: *)))
      (GHC.Int.$fBitsInt64_$cunsafeShiftR
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CSsize -> Int -> CSsize :: *)))
      (GHC.Int.$fBitsInt64_$crotateL
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CSsize -> Int -> CSsize :: *)))
      (GHC.Int.$fBitsInt64_$crotateR
       `cast` (Sym (System.Posix.Types.N:CSsize[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CSsize[0])
               :: (Int64 -> Int -> Int64 :: *)
                  ~R# (CSsize -> Int -> CSsize :: *)))
      (GHC.Int.$fBitsInt64_$cpopCount
       `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CSsize -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
System.Posix.Types.$fFiniteBitsCSsize [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits CSsize
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: CSsize
                              System.Posix.Types.$fBitsCSsize
                              GHC.Int.$fBitsInt64_$cfiniteBitSize
                              `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Int>_R
                                      :: (Int64 -> Int :: *) ~R# (CSsize -> Int :: *))
                              GHC.Int.$fFiniteBitsInt64_$ccountLeadingZeros
                              `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Int>_R
                                      :: (Int64 -> Int :: *) ~R# (CSsize -> Int :: *))
                              GHC.Int.$fFiniteBitsInt64_$ccountTrailingZeros
                              `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Int>_R
                                      :: (Int64 -> Int :: *) ~R# (CSsize -> Int :: *))]
System.Posix.Types.$fFiniteBitsCSsize
  = Data.Bits.C:FiniteBits
      @ CSsize
      System.Posix.Types.$fBitsCSsize
      (GHC.Int.$fBitsInt64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CSsize -> Int :: *)))
      (GHC.Int.$fFiniteBitsInt64_$ccountLeadingZeros
       `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CSsize -> Int :: *)))
      (GHC.Int.$fFiniteBitsInt64_$ccountTrailingZeros
       `cast` (Sym (System.Posix.Types.N:CSsize[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (CSsize -> Int :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCPid [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CPid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CPid
                       GHC.Int.$fShowInt32_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CPid[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Int32 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CPid -> [Char] -> [Char] :: *))
                       GHC.Int.$fShowInt32_$cshow
                       `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <[Char]>_R
                               :: (Int32 -> [Char] :: *) ~R# (CPid -> [Char] :: *))
                       GHC.Int.$fShowInt32_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CPid[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Int32] -> [Char] -> [Char] :: *)
                                  ~R# ([CPid] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCPid
  = GHC.Show.C:Show
      @ CPid
      (GHC.Int.$fShowInt32_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Int32 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CPid -> [Char] -> [Char] :: *)))
      (GHC.Int.$fShowInt32_$cshow
       `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <[Char]>_R
               :: (Int32 -> [Char] :: *) ~R# (CPid -> [Char] :: *)))
      (GHC.Int.$fShowInt32_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CPid[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Int32] -> [Char] -> [Char] :: *)
                  ~R# ([CPid] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCPid [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CPid
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CPid
                       GHC.Int.$fReadInt32_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,) (Sym (System.Posix.Types.N:CPid[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Int32, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CPid, [Char])] :: *))
                       GHC.Int.$fReadInt32_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CPid[0])])_R <[Char]>_R)_R])_R
                               :: ([Char] -> [([Int32], [Char])] :: *)
                                  ~R# ([Char] -> [([CPid], [Char])] :: *))
                       GHC.Int.$fReadInt6
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Int32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                     (System.Posix.Types.N:CPid[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Int32 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CPid :: *))
                       GHC.Int.$fReadInt4
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Int32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                       ([System.Posix.Types.N:CPid[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Int32] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CPid] :: *))]
System.Posix.Types.$fReadCPid
  = GHC.Read.C:Read
      @ CPid
      (GHC.Int.$fReadInt32_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,) (Sym (System.Posix.Types.N:CPid[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Int32, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CPid, [Char])] :: *)))
      (GHC.Int.$fReadInt32_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CPid[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Int32], [Char])] :: *)
                  ~R# ([Char] -> [([CPid], [Char])] :: *)))
      (GHC.Int.$fReadInt6
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Int32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     (System.Posix.Types.N:CPid[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Int32 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CPid :: *)))
      (GHC.Int.$fReadInt4
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Int32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                       ([System.Posix.Types.N:CPid[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Int32] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CPid] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
System.Posix.Types.$fBoundedCPid [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded CPid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: CPid
                          GHC.Int.$fBoundedInt32_$cminBound
                          `cast` (Sym (System.Posix.Types.N:CPid[0])
                                  :: (Int32 :: *) ~R# (CPid :: *))
                          GHC.Int.$fBoundedInt32_$cmaxBound
                          `cast` (Sym (System.Posix.Types.N:CPid[0])
                                  :: (Int32 :: *) ~R# (CPid :: *))]
System.Posix.Types.$fBoundedCPid
  = GHC.Enum.C:Bounded
      @ CPid
      (GHC.Int.$fBoundedInt32_$cminBound
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 :: *) ~R# (CPid :: *)))
      (GHC.Int.$fBoundedInt32_$cmaxBound
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 :: *) ~R# (CPid :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCPid [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CPid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CPid
                                   Foreign.Storable.$fStorableInt32_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Int>_R
                                           :: (Int32 -> Int :: *) ~R# (CPid -> Int :: *))
                                   Foreign.Storable.$fStorableInt32_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Int>_R
                                           :: (Int32 -> Int :: *) ~R# (CPid -> Int :: *))
                                   GHC.Storable.readInt32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CPid))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CPid[0]))
                                           :: (Ptr Int32
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int32 #) :: *)
                                              ~R# (Ptr CPid -> Int -> IO CPid :: *))
                                   GHC.Storable.writeInt32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CPid))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CPid[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Int32
                                               -> Int
                                               -> Int32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CPid -> Int -> CPid -> IO () :: *))
                                   Foreign.Storable.$fStorableInt14
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CPid[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int32 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CPid :: *))
                                   Foreign.Storable.$fStorableInt13
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CPid[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Int32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> CPid -> IO () :: *))
                                   Foreign.Storable.$fStorableInt12
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CPid))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CPid[0]))
                                           :: (Ptr Int32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int32 #) :: *)
                                              ~R# (Ptr CPid -> IO CPid :: *))
                                   Foreign.Storable.$fStorableInt11
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CPid))_R
                                           ->_R Sym (System.Posix.Types.N:CPid[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Int32
                                               -> Int32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CPid -> CPid -> IO () :: *))]
System.Posix.Types.$fStorableCPid
  = Foreign.Storable.C:Storable
      @ CPid
      (Foreign.Storable.$fStorableInt32_$calignment
       `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CPid -> Int :: *)))
      (Foreign.Storable.$fStorableInt32_$calignment
       `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CPid -> Int :: *)))
      (GHC.Storable.readInt32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CPid))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CPid[0]))
               :: (Ptr Int32
                   -> Int -> State# RealWorld -> (# State# RealWorld, Int32 #) :: *)
                  ~R# (Ptr CPid -> Int -> IO CPid :: *)))
      (GHC.Storable.writeInt32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CPid))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Int32
                   -> Int
                   -> Int32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CPid -> Int -> CPid -> IO () :: *)))
      (Foreign.Storable.$fStorableInt14
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CPid[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Int32 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CPid :: *)))
      (Foreign.Storable.$fStorableInt13
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Int32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CPid -> IO () :: *)))
      (Foreign.Storable.$fStorableInt12
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CPid))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CPid[0]))
               :: (Ptr Int32
                   -> State# RealWorld -> (# State# RealWorld, Int32 #) :: *)
                  ~R# (Ptr CPid -> IO CPid :: *)))
      (Foreign.Storable.$fStorableInt11
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int32, CPid))_R
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Int32
                   -> Int32 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CPid -> CPid -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCPid [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CPid
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CPid
                       GHC.Int.$fEnumInt32_$csucc
                       `cast` (Sym (System.Posix.Types.N:CPid[0])
                               ->_R Sym (System.Posix.Types.N:CPid[0])
                               :: (Int32 -> Int32 :: *) ~R# (CPid -> CPid :: *))
                       GHC.Int.$fEnumInt32_$cpred
                       `cast` (Sym (System.Posix.Types.N:CPid[0])
                               ->_R Sym (System.Posix.Types.N:CPid[0])
                               :: (Int32 -> Int32 :: *) ~R# (CPid -> CPid :: *))
                       GHC.Int.$fEnumInt32_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CPid[0])
                               :: (Int -> Int32 :: *) ~R# (Int -> CPid :: *))
                       GHC.Int.$fEnumInt32_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Int>_R
                               :: (Int32 -> Int :: *) ~R# (CPid -> Int :: *))
                       GHC.Int.$fEnumInt32_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CPid[0])
                               ->_R ([Sym (System.Posix.Types.N:CPid[0])])_R
                               :: (Int32 -> [Int32] :: *) ~R# (CPid -> [CPid] :: *))
                       GHC.Int.$fEnumInt32_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CPid[0])
                               ->_R Sym (System.Posix.Types.N:CPid[0])
                               ->_R ([Sym (System.Posix.Types.N:CPid[0])])_R
                               :: (Int32 -> Int32 -> [Int32] :: *)
                                  ~R# (CPid -> CPid -> [CPid] :: *))
                       GHC.Int.$fEnumInt32_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CPid[0])
                               ->_R Sym (System.Posix.Types.N:CPid[0])
                               ->_R ([Sym (System.Posix.Types.N:CPid[0])])_R
                               :: (Int32 -> Int32 -> [Int32] :: *)
                                  ~R# (CPid -> CPid -> [CPid] :: *))
                       GHC.Int.$fEnumInt32_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CPid[0])
                               ->_R Sym (System.Posix.Types.N:CPid[0])
                               ->_R Sym (System.Posix.Types.N:CPid[0])
                               ->_R ([Sym (System.Posix.Types.N:CPid[0])])_R
                               :: (Int32 -> Int32 -> Int32 -> [Int32] :: *)
                                  ~R# (CPid -> CPid -> CPid -> [CPid] :: *))]
System.Posix.Types.$fEnumCPid
  = GHC.Enum.C:Enum
      @ CPid
      (GHC.Int.$fEnumInt32_$csucc
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int32 :: *) ~R# (CPid -> CPid :: *)))
      (GHC.Int.$fEnumInt32_$cpred
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int32 :: *) ~R# (CPid -> CPid :: *)))
      (GHC.Int.$fEnumInt32_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int -> Int32 :: *) ~R# (Int -> CPid :: *)))
      (GHC.Int.$fEnumInt32_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CPid -> Int :: *)))
      (GHC.Int.$fEnumInt32_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R ([Sym (System.Posix.Types.N:CPid[0])])_R
               :: (Int32 -> [Int32] :: *) ~R# (CPid -> [CPid] :: *)))
      (GHC.Int.$fEnumInt32_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R ([Sym (System.Posix.Types.N:CPid[0])])_R
               :: (Int32 -> Int32 -> [Int32] :: *)
                  ~R# (CPid -> CPid -> [CPid] :: *)))
      (GHC.Int.$fEnumInt32_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R ([Sym (System.Posix.Types.N:CPid[0])])_R
               :: (Int32 -> Int32 -> [Int32] :: *)
                  ~R# (CPid -> CPid -> [CPid] :: *)))
      (GHC.Int.$fEnumInt32_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R ([Sym (System.Posix.Types.N:CPid[0])])_R
               :: (Int32 -> Int32 -> Int32 -> [Int32] :: *)
                  ~R# (CPid -> CPid -> CPid -> [CPid] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCPid [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CPid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CPid
                     GHC.Int.$fNumInt32_$c+
                     `cast` (Sym (System.Posix.Types.N:CPid[0])
                             ->_R Sym (System.Posix.Types.N:CPid[0])
                             ->_R Sym (System.Posix.Types.N:CPid[0])
                             :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *))
                     GHC.Int.$fNumInt32_$c-
                     `cast` (Sym (System.Posix.Types.N:CPid[0])
                             ->_R Sym (System.Posix.Types.N:CPid[0])
                             ->_R Sym (System.Posix.Types.N:CPid[0])
                             :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *))
                     GHC.Int.$fNumInt32_$c*
                     `cast` (Sym (System.Posix.Types.N:CPid[0])
                             ->_R Sym (System.Posix.Types.N:CPid[0])
                             ->_R Sym (System.Posix.Types.N:CPid[0])
                             :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *))
                     GHC.Int.$fNumInt32_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CPid[0])
                             ->_R Sym (System.Posix.Types.N:CPid[0])
                             :: (Int32 -> Int32 :: *) ~R# (CPid -> CPid :: *))
                     GHC.Int.$fNumInt32_$cabs
                     `cast` (Sym (System.Posix.Types.N:CPid[0])
                             ->_R Sym (System.Posix.Types.N:CPid[0])
                             :: (Int32 -> Int32 :: *) ~R# (CPid -> CPid :: *))
                     GHC.Int.$fNumInt32_$csignum
                     `cast` (Sym (System.Posix.Types.N:CPid[0])
                             ->_R Sym (System.Posix.Types.N:CPid[0])
                             :: (Int32 -> Int32 :: *) ~R# (CPid -> CPid :: *))
                     GHC.Int.$fNumInt32_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CPid[0])
                             :: (Integer -> Int32 :: *) ~R# (Integer -> CPid :: *))]
System.Posix.Types.$fNumCPid
  = GHC.Num.C:Num
      @ CPid
      (GHC.Int.$fNumInt32_$c+
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *)))
      (GHC.Int.$fNumInt32_$c-
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *)))
      (GHC.Int.$fNumInt32_$c*
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *)))
      (GHC.Int.$fNumInt32_$cnegate
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int32 :: *) ~R# (CPid -> CPid :: *)))
      (GHC.Int.$fNumInt32_$cabs
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int32 :: *) ~R# (CPid -> CPid :: *)))
      (GHC.Int.$fNumInt32_$csignum
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int32 :: *) ~R# (CPid -> CPid :: *)))
      (GHC.Int.$fNumInt32_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Integer -> Int32 :: *) ~R# (Integer -> CPid :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCPid [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CPid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CPid
                        GHC.Int.eqInt32
                        `cast` (Sym (System.Posix.Types.N:CPid[0])
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                ->_R <Bool>_R
                                :: (Int32 -> Int32 -> Bool :: *) ~R# (CPid -> CPid -> Bool :: *))
                        GHC.Int.neInt32
                        `cast` (Sym (System.Posix.Types.N:CPid[0])
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                ->_R <Bool>_R
                                :: (Int32 -> Int32 -> Bool :: *) ~R# (CPid -> CPid -> Bool :: *))]
System.Posix.Types.$fEqCPid
  = GHC.Classes.C:Eq
      @ CPid
      (GHC.Int.eqInt32
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *) ~R# (CPid -> CPid -> Bool :: *)))
      (GHC.Int.neInt32
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *) ~R# (CPid -> CPid -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCPid [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CPid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CPid
                         System.Posix.Types.$fEqCPid
                         GHC.Int.$fOrdInt32_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CPid[0])
                                 ->_R Sym (System.Posix.Types.N:CPid[0])
                                 ->_R <Ordering>_R
                                 :: (Int32 -> Int32 -> Ordering :: *)
                                    ~R# (CPid -> CPid -> Ordering :: *))
                         GHC.Int.ltInt32
                         `cast` (Sym (System.Posix.Types.N:CPid[0])
                                 ->_R Sym (System.Posix.Types.N:CPid[0])
                                 ->_R <Bool>_R
                                 :: (Int32 -> Int32 -> Bool :: *) ~R# (CPid -> CPid -> Bool :: *))
                         GHC.Int.leInt32
                         `cast` (Sym (System.Posix.Types.N:CPid[0])
                                 ->_R Sym (System.Posix.Types.N:CPid[0])
                                 ->_R <Bool>_R
                                 :: (Int32 -> Int32 -> Bool :: *) ~R# (CPid -> CPid -> Bool :: *))
                         GHC.Int.gtInt32
                         `cast` (Sym (System.Posix.Types.N:CPid[0])
                                 ->_R Sym (System.Posix.Types.N:CPid[0])
                                 ->_R <Bool>_R
                                 :: (Int32 -> Int32 -> Bool :: *) ~R# (CPid -> CPid -> Bool :: *))
                         GHC.Int.geInt32
                         `cast` (Sym (System.Posix.Types.N:CPid[0])
                                 ->_R Sym (System.Posix.Types.N:CPid[0])
                                 ->_R <Bool>_R
                                 :: (Int32 -> Int32 -> Bool :: *) ~R# (CPid -> CPid -> Bool :: *))
                         GHC.Int.$fOrdInt32_$cmax
                         `cast` (Sym (System.Posix.Types.N:CPid[0])
                                 ->_R Sym (System.Posix.Types.N:CPid[0])
                                 ->_R Sym (System.Posix.Types.N:CPid[0])
                                 :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *))
                         GHC.Int.$fOrdInt32_$cmin
                         `cast` (Sym (System.Posix.Types.N:CPid[0])
                                 ->_R Sym (System.Posix.Types.N:CPid[0])
                                 ->_R Sym (System.Posix.Types.N:CPid[0])
                                 :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *))]
System.Posix.Types.$fOrdCPid
  = GHC.Classes.C:Ord
      @ CPid
      System.Posix.Types.$fEqCPid
      (GHC.Int.$fOrdInt32_$ccompare
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R <Ordering>_R
               :: (Int32 -> Int32 -> Ordering :: *)
                  ~R# (CPid -> CPid -> Ordering :: *)))
      (GHC.Int.ltInt32
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *) ~R# (CPid -> CPid -> Bool :: *)))
      (GHC.Int.leInt32
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *) ~R# (CPid -> CPid -> Bool :: *)))
      (GHC.Int.gtInt32
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *) ~R# (CPid -> CPid -> Bool :: *)))
      (GHC.Int.geInt32
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R <Bool>_R
               :: (Int32 -> Int32 -> Bool :: *) ~R# (CPid -> CPid -> Bool :: *)))
      (GHC.Int.$fOrdInt32_$cmax
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *)))
      (GHC.Int.$fOrdInt32_$cmin
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCPid [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CPid
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CPid
                       System.Posix.Types.$fNumCPid
                       System.Posix.Types.$fOrdCPid
                       GHC.Int.$fRealInt32_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Ratio Integer>_R
                               :: (Int32 -> Ratio Integer :: *) ~R# (CPid -> Ratio Integer :: *))]
System.Posix.Types.$fRealCPid
  = GHC.Real.C:Real
      @ CPid
      System.Posix.Types.$fNumCPid
      System.Posix.Types.$fOrdCPid
      (GHC.Int.$fRealInt32_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Ratio Integer>_R
               :: (Int32 -> Ratio Integer :: *) ~R# (CPid -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 58, joins: 0/0}
System.Posix.Types.$fIntegralCPid [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral CPid
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: CPid
                           System.Posix.Types.$fRealCPid
                           System.Posix.Types.$fEnumCPid
                           GHC.Int.$fIntegralInt32_$cquot
                           `cast` (Sym (System.Posix.Types.N:CPid[0])
                                   ->_R Sym (System.Posix.Types.N:CPid[0])
                                   ->_R Sym (System.Posix.Types.N:CPid[0])
                                   :: (Int32 -> Int32 -> Int32 :: *)
                                      ~R# (CPid -> CPid -> CPid :: *))
                           GHC.Int.$fIntegralInt32_$crem
                           `cast` (Sym (System.Posix.Types.N:CPid[0])
                                   ->_R Sym (System.Posix.Types.N:CPid[0])
                                   ->_R Sym (System.Posix.Types.N:CPid[0])
                                   :: (Int32 -> Int32 -> Int32 :: *)
                                      ~R# (CPid -> CPid -> CPid :: *))
                           GHC.Int.$fIntegralInt32_$cdiv
                           `cast` (Sym (System.Posix.Types.N:CPid[0])
                                   ->_R Sym (System.Posix.Types.N:CPid[0])
                                   ->_R Sym (System.Posix.Types.N:CPid[0])
                                   :: (Int32 -> Int32 -> Int32 :: *)
                                      ~R# (CPid -> CPid -> CPid :: *))
                           GHC.Int.$fIntegralInt32_$cmod
                           `cast` (Sym (System.Posix.Types.N:CPid[0])
                                   ->_R Sym (System.Posix.Types.N:CPid[0])
                                   ->_R Sym (System.Posix.Types.N:CPid[0])
                                   :: (Int32 -> Int32 -> Int32 :: *)
                                      ~R# (CPid -> CPid -> CPid :: *))
                           GHC.Int.$fIntegralInt32_$cquotRem
                           `cast` (Sym (System.Posix.Types.N:CPid[0])
                                   ->_R Sym (System.Posix.Types.N:CPid[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CPid[0]))
                                           (Sym (System.Posix.Types.N:CPid[0])))_R
                                   :: (Int32 -> Int32 -> (Int32, Int32) :: *)
                                      ~R# (CPid -> CPid -> (CPid, CPid) :: *))
                           GHC.Int.$fIntegralInt32_$cdivMod
                           `cast` (Sym (System.Posix.Types.N:CPid[0])
                                   ->_R Sym (System.Posix.Types.N:CPid[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CPid[0]))
                                           (Sym (System.Posix.Types.N:CPid[0])))_R
                                   :: (Int32 -> Int32 -> (Int32, Int32) :: *)
                                      ~R# (CPid -> CPid -> (CPid, CPid) :: *))
                           GHC.Int.$fIntegralInt32_$ctoInteger
                           `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Integer>_R
                                   :: (Int32 -> Integer :: *) ~R# (CPid -> Integer :: *))]
System.Posix.Types.$fIntegralCPid
  = GHC.Real.C:Integral
      @ CPid
      System.Posix.Types.$fRealCPid
      System.Posix.Types.$fEnumCPid
      (GHC.Int.$fIntegralInt32_$cquot
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *)))
      (GHC.Int.$fIntegralInt32_$crem
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *)))
      (GHC.Int.$fIntegralInt32_$cdiv
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *)))
      (GHC.Int.$fIntegralInt32_$cmod
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *)))
      (GHC.Int.$fIntegralInt32_$cquotRem
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CPid[0]))
                       (Sym (System.Posix.Types.N:CPid[0])))_R
               :: (Int32 -> Int32 -> (Int32, Int32) :: *)
                  ~R# (CPid -> CPid -> (CPid, CPid) :: *)))
      (GHC.Int.$fIntegralInt32_$cdivMod
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CPid[0]))
                       (Sym (System.Posix.Types.N:CPid[0])))_R
               :: (Int32 -> Int32 -> (Int32, Int32) :: *)
                  ~R# (CPid -> CPid -> (CPid, CPid) :: *)))
      (GHC.Int.$fIntegralInt32_$ctoInteger
       `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Integer>_R
               :: (Int32 -> Integer :: *) ~R# (CPid -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
System.Posix.Types.$fBitsCPid [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits CPid
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: CPid
                        System.Posix.Types.$fEqCPid
                        GHC.Int.$fBitsInt32_$c.&.
                        `cast` (Sym (System.Posix.Types.N:CPid[0])
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *))
                        GHC.Int.$fBitsInt32_$c.|.
                        `cast` (Sym (System.Posix.Types.N:CPid[0])
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *))
                        GHC.Int.$fBitsInt32_$cxor
                        `cast` (Sym (System.Posix.Types.N:CPid[0])
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *))
                        GHC.Int.$fBitsInt32_$ccomplement
                        `cast` (Sym (System.Posix.Types.N:CPid[0])
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                :: (Int32 -> Int32 :: *) ~R# (CPid -> CPid :: *))
                        GHC.Int.$fBitsInt32_$cshift
                        `cast` (Sym (System.Posix.Types.N:CPid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *))
                        GHC.Int.$fBitsInt32_$crotate
                        `cast` (Sym (System.Posix.Types.N:CPid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *))
                        GHC.Int.$fBitsInt6
                        `cast` (Sym (System.Posix.Types.N:CPid[0])
                                :: (Int32 :: *) ~R# (CPid :: *))
                        GHC.Int.$fBitsInt32_$cbit
                        `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CPid[0])
                                :: (Int -> Int32 :: *) ~R# (Int -> CPid :: *))
                        GHC.Int.$fBitsInt32_$csetBit
                        `cast` (Sym (System.Posix.Types.N:CPid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *))
                        GHC.Int.$fBitsInt32_$cclearBit
                        `cast` (Sym (System.Posix.Types.N:CPid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *))
                        GHC.Int.$fBitsInt32_$ccomplementBit
                        `cast` (Sym (System.Posix.Types.N:CPid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *))
                        GHC.Int.$fBitsInt32_$ctestBit
                        `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Int -> Bool>_R
                                :: (Int32 -> Int -> Bool :: *) ~R# (CPid -> Int -> Bool :: *))
                        GHC.Int.$fBitsInt32_$cbitSizeMaybe
                        `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Maybe Int>_R
                                :: (Int32 -> Maybe Int :: *) ~R# (CPid -> Maybe Int :: *))
                        GHC.Int.$fBitsInt32_$cfiniteBitSize
                        `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Int>_R
                                :: (Int32 -> Int :: *) ~R# (CPid -> Int :: *))
                        GHC.Int.$fBitsInt32_$cisSigned
                        `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Bool>_R
                                :: (Int32 -> Bool :: *) ~R# (CPid -> Bool :: *))
                        GHC.Int.$fBitsInt32_$cshiftL
                        `cast` (Sym (System.Posix.Types.N:CPid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *))
                        GHC.Int.$fBitsInt32_$cunsafeShiftL
                        `cast` (Sym (System.Posix.Types.N:CPid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *))
                        GHC.Int.$fBitsInt32_$cshiftR
                        `cast` (Sym (System.Posix.Types.N:CPid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *))
                        GHC.Int.$fBitsInt32_$cunsafeShiftR
                        `cast` (Sym (System.Posix.Types.N:CPid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *))
                        GHC.Int.$fBitsInt32_$crotateL
                        `cast` (Sym (System.Posix.Types.N:CPid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *))
                        GHC.Int.$fBitsInt32_$crotateR
                        `cast` (Sym (System.Posix.Types.N:CPid[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CPid[0])
                                :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *))
                        GHC.Int.$fBitsInt32_$cpopCount
                        `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Int>_R
                                :: (Int32 -> Int :: *) ~R# (CPid -> Int :: *))]
System.Posix.Types.$fBitsCPid
  = Data.Bits.C:Bits
      @ CPid
      System.Posix.Types.$fEqCPid
      (GHC.Int.$fBitsInt32_$c.&.
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *)))
      (GHC.Int.$fBitsInt32_$c.|.
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *)))
      (GHC.Int.$fBitsInt32_$cxor
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int32 -> Int32 :: *) ~R# (CPid -> CPid -> CPid :: *)))
      (GHC.Int.$fBitsInt32_$ccomplement
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int32 :: *) ~R# (CPid -> CPid :: *)))
      (GHC.Int.$fBitsInt32_$cshift
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *)))
      (GHC.Int.$fBitsInt32_$crotate
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *)))
      (GHC.Int.$fBitsInt6
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 :: *) ~R# (CPid :: *)))
      (GHC.Int.$fBitsInt32_$cbit
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int -> Int32 :: *) ~R# (Int -> CPid :: *)))
      (GHC.Int.$fBitsInt32_$csetBit
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *)))
      (GHC.Int.$fBitsInt32_$cclearBit
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *)))
      (GHC.Int.$fBitsInt32_$ccomplementBit
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *)))
      (GHC.Int.$fBitsInt32_$ctestBit
       `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Int -> Bool>_R
               :: (Int32 -> Int -> Bool :: *) ~R# (CPid -> Int -> Bool :: *)))
      (GHC.Int.$fBitsInt32_$cbitSizeMaybe
       `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Maybe Int>_R
               :: (Int32 -> Maybe Int :: *) ~R# (CPid -> Maybe Int :: *)))
      (GHC.Int.$fBitsInt32_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CPid -> Int :: *)))
      (GHC.Int.$fBitsInt32_$cisSigned
       `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Bool>_R
               :: (Int32 -> Bool :: *) ~R# (CPid -> Bool :: *)))
      (GHC.Int.$fBitsInt32_$cshiftL
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *)))
      (GHC.Int.$fBitsInt32_$cunsafeShiftL
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *)))
      (GHC.Int.$fBitsInt32_$cshiftR
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *)))
      (GHC.Int.$fBitsInt32_$cunsafeShiftR
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *)))
      (GHC.Int.$fBitsInt32_$crotateL
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *)))
      (GHC.Int.$fBitsInt32_$crotateR
       `cast` (Sym (System.Posix.Types.N:CPid[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CPid[0])
               :: (Int32 -> Int -> Int32 :: *) ~R# (CPid -> Int -> CPid :: *)))
      (GHC.Int.$fBitsInt32_$cpopCount
       `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CPid -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
System.Posix.Types.$fFiniteBitsCPid [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits CPid
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: CPid
                              System.Posix.Types.$fBitsCPid
                              GHC.Int.$fBitsInt32_$cfiniteBitSize
                              `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Int>_R
                                      :: (Int32 -> Int :: *) ~R# (CPid -> Int :: *))
                              GHC.Int.$fFiniteBitsInt32_$ccountLeadingZeros
                              `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Int>_R
                                      :: (Int32 -> Int :: *) ~R# (CPid -> Int :: *))
                              GHC.Int.$fFiniteBitsInt32_$ccountTrailingZeros
                              `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Int>_R
                                      :: (Int32 -> Int :: *) ~R# (CPid -> Int :: *))]
System.Posix.Types.$fFiniteBitsCPid
  = Data.Bits.C:FiniteBits
      @ CPid
      System.Posix.Types.$fBitsCPid
      (GHC.Int.$fBitsInt32_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CPid -> Int :: *)))
      (GHC.Int.$fFiniteBitsInt32_$ccountLeadingZeros
       `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CPid -> Int :: *)))
      (GHC.Int.$fFiniteBitsInt32_$ccountTrailingZeros
       `cast` (Sym (System.Posix.Types.N:CPid[0]) ->_R <Int>_R
               :: (Int32 -> Int :: *) ~R# (CPid -> Int :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCOff [InlPrag=NOUSERINLINE CONLIKE]
  :: Show COff
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: COff
                       GHC.Int.$fShowInt64_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:COff[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Int64 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> COff -> [Char] -> [Char] :: *))
                       GHC.Int.$fShowInt64_$cshow
                       `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <[Char]>_R
                               :: (Int64 -> [Char] :: *) ~R# (COff -> [Char] :: *))
                       GHC.Int.$fShowInt64_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:COff[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Int64] -> [Char] -> [Char] :: *)
                                  ~R# ([COff] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCOff
  = GHC.Show.C:Show
      @ COff
      (GHC.Int.$fShowInt64_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Int64 -> [Char] -> [Char] :: *)
                  ~R# (Int -> COff -> [Char] -> [Char] :: *)))
      (GHC.Int.$fShowInt64_$cshow
       `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <[Char]>_R
               :: (Int64 -> [Char] :: *) ~R# (COff -> [Char] :: *)))
      (GHC.Int.$fShowInt64_$cshowList
       `cast` (([Sym (System.Posix.Types.N:COff[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Int64] -> [Char] -> [Char] :: *)
                  ~R# ([COff] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCOff [InlPrag=NOUSERINLINE CONLIKE]
  :: Read COff
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: COff
                       GHC.Int.$fReadInt64_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,) (Sym (System.Posix.Types.N:COff[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Int64, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(COff, [Char])] :: *))
                       GHC.Int.$fReadInt64_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:COff[0])])_R <[Char]>_R)_R])_R
                               :: ([Char] -> [([Int64], [Char])] :: *)
                                  ~R# ([Char] -> [([COff], [Char])] :: *))
                       GHC.Int.$fReadInt10
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Int64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                     (System.Posix.Types.N:COff[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Int64 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec COff :: *))
                       GHC.Int.$fReadInt7
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Int64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                       ([System.Posix.Types.N:COff[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Int64] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [COff] :: *))]
System.Posix.Types.$fReadCOff
  = GHC.Read.C:Read
      @ COff
      (GHC.Int.$fReadInt64_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,) (Sym (System.Posix.Types.N:COff[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Int64, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(COff, [Char])] :: *)))
      (GHC.Int.$fReadInt64_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:COff[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Int64], [Char])] :: *)
                  ~R# ([Char] -> [([COff], [Char])] :: *)))
      (GHC.Int.$fReadInt10
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Int64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     (System.Posix.Types.N:COff[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Int64 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec COff :: *)))
      (GHC.Int.$fReadInt7
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Int64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                       ([System.Posix.Types.N:COff[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Int64] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [COff] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
System.Posix.Types.$fBoundedCOff [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded COff
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: COff
                          GHC.Int.$fBoundedInt64_$cminBound
                          `cast` (Sym (System.Posix.Types.N:COff[0])
                                  :: (Int64 :: *) ~R# (COff :: *))
                          GHC.Int.$fBoundedInt64_$cmaxBound
                          `cast` (Sym (System.Posix.Types.N:COff[0])
                                  :: (Int64 :: *) ~R# (COff :: *))]
System.Posix.Types.$fBoundedCOff
  = GHC.Enum.C:Bounded
      @ COff
      (GHC.Int.$fBoundedInt64_$cminBound
       `cast` (Sym (System.Posix.Types.N:COff[0])
               :: (Int64 :: *) ~R# (COff :: *)))
      (GHC.Int.$fBoundedInt64_$cmaxBound
       `cast` (Sym (System.Posix.Types.N:COff[0])
               :: (Int64 :: *) ~R# (COff :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCOff [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable COff
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: COff
                                   Foreign.Storable.$fStorableInt64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Int>_R
                                           :: (Int64 -> Int :: *) ~R# (COff -> Int :: *))
                                   Foreign.Storable.$fStorableInt64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Int>_R
                                           :: (Int64 -> Int :: *) ~R# (COff -> Int :: *))
                                   GHC.Storable.readInt64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, COff))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:COff[0]))
                                           :: (Ptr Int64
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int64 #) :: *)
                                              ~R# (Ptr COff -> Int -> IO COff :: *))
                                   GHC.Storable.writeInt64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, COff))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:COff[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Int64
                                               -> Int
                                               -> Int64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr COff -> Int -> COff -> IO () :: *))
                                   Foreign.Storable.$fStorableInt19
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:COff[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int64 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO COff :: *))
                                   Foreign.Storable.$fStorableInt18
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:COff[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Int64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> COff -> IO () :: *))
                                   Foreign.Storable.$fStorableInt17
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, COff))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:COff[0]))
                                           :: (Ptr Int64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Int64 #) :: *)
                                              ~R# (Ptr COff -> IO COff :: *))
                                   Foreign.Storable.$fStorableInt15
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, COff))_R
                                           ->_R Sym (System.Posix.Types.N:COff[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Int64
                                               -> Int64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr COff -> COff -> IO () :: *))]
System.Posix.Types.$fStorableCOff
  = Foreign.Storable.C:Storable
      @ COff
      (Foreign.Storable.$fStorableInt64_$calignment
       `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (COff -> Int :: *)))
      (Foreign.Storable.$fStorableInt64_$calignment
       `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (COff -> Int :: *)))
      (GHC.Storable.readInt64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, COff))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:COff[0]))
               :: (Ptr Int64
                   -> Int -> State# RealWorld -> (# State# RealWorld, Int64 #) :: *)
                  ~R# (Ptr COff -> Int -> IO COff :: *)))
      (GHC.Storable.writeInt64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, COff))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Int64
                   -> Int
                   -> Int64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr COff -> Int -> COff -> IO () :: *)))
      (Foreign.Storable.$fStorableInt19
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:COff[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Int64 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO COff :: *)))
      (Foreign.Storable.$fStorableInt18
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Int64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> COff -> IO () :: *)))
      (Foreign.Storable.$fStorableInt17
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, COff))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:COff[0]))
               :: (Ptr Int64
                   -> State# RealWorld -> (# State# RealWorld, Int64 #) :: *)
                  ~R# (Ptr COff -> IO COff :: *)))
      (Foreign.Storable.$fStorableInt15
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Int64, COff))_R
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Int64
                   -> Int64 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr COff -> COff -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCOff [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum COff
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: COff
                       GHC.Int.$fEnumInt64_$csucc
                       `cast` (Sym (System.Posix.Types.N:COff[0])
                               ->_R Sym (System.Posix.Types.N:COff[0])
                               :: (Int64 -> Int64 :: *) ~R# (COff -> COff :: *))
                       GHC.Int.$fEnumInt64_$cpred
                       `cast` (Sym (System.Posix.Types.N:COff[0])
                               ->_R Sym (System.Posix.Types.N:COff[0])
                               :: (Int64 -> Int64 :: *) ~R# (COff -> COff :: *))
                       GHC.Int.$fEnumInt64_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:COff[0])
                               :: (Int -> Int64 :: *) ~R# (Int -> COff :: *))
                       GHC.Int.$fEnumInt64_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Int>_R
                               :: (Int64 -> Int :: *) ~R# (COff -> Int :: *))
                       GHC.Int.$fEnumInt64_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:COff[0])
                               ->_R ([Sym (System.Posix.Types.N:COff[0])])_R
                               :: (Int64 -> [Int64] :: *) ~R# (COff -> [COff] :: *))
                       GHC.Int.$fEnumInt64_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:COff[0])
                               ->_R Sym (System.Posix.Types.N:COff[0])
                               ->_R ([Sym (System.Posix.Types.N:COff[0])])_R
                               :: (Int64 -> Int64 -> [Int64] :: *)
                                  ~R# (COff -> COff -> [COff] :: *))
                       GHC.Int.$fEnumInt64_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:COff[0])
                               ->_R Sym (System.Posix.Types.N:COff[0])
                               ->_R ([Sym (System.Posix.Types.N:COff[0])])_R
                               :: (Int64 -> Int64 -> [Int64] :: *)
                                  ~R# (COff -> COff -> [COff] :: *))
                       GHC.Int.$fEnumInt64_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:COff[0])
                               ->_R Sym (System.Posix.Types.N:COff[0])
                               ->_R Sym (System.Posix.Types.N:COff[0])
                               ->_R ([Sym (System.Posix.Types.N:COff[0])])_R
                               :: (Int64 -> Int64 -> Int64 -> [Int64] :: *)
                                  ~R# (COff -> COff -> COff -> [COff] :: *))]
System.Posix.Types.$fEnumCOff
  = GHC.Enum.C:Enum
      @ COff
      (GHC.Int.$fEnumInt64_$csucc
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int64 :: *) ~R# (COff -> COff :: *)))
      (GHC.Int.$fEnumInt64_$cpred
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int64 :: *) ~R# (COff -> COff :: *)))
      (GHC.Int.$fEnumInt64_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int -> Int64 :: *) ~R# (Int -> COff :: *)))
      (GHC.Int.$fEnumInt64_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (COff -> Int :: *)))
      (GHC.Int.$fEnumInt64_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R ([Sym (System.Posix.Types.N:COff[0])])_R
               :: (Int64 -> [Int64] :: *) ~R# (COff -> [COff] :: *)))
      (GHC.Int.$fEnumInt64_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R ([Sym (System.Posix.Types.N:COff[0])])_R
               :: (Int64 -> Int64 -> [Int64] :: *)
                  ~R# (COff -> COff -> [COff] :: *)))
      (GHC.Int.$fEnumInt64_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R ([Sym (System.Posix.Types.N:COff[0])])_R
               :: (Int64 -> Int64 -> [Int64] :: *)
                  ~R# (COff -> COff -> [COff] :: *)))
      (GHC.Int.$fEnumInt64_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R ([Sym (System.Posix.Types.N:COff[0])])_R
               :: (Int64 -> Int64 -> Int64 -> [Int64] :: *)
                  ~R# (COff -> COff -> COff -> [COff] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCOff [InlPrag=NOUSERINLINE CONLIKE]
  :: Num COff
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: COff
                     GHC.Int.$fNumInt64_$c+
                     `cast` (Sym (System.Posix.Types.N:COff[0])
                             ->_R Sym (System.Posix.Types.N:COff[0])
                             ->_R Sym (System.Posix.Types.N:COff[0])
                             :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *))
                     GHC.Int.$fNumInt64_$c-
                     `cast` (Sym (System.Posix.Types.N:COff[0])
                             ->_R Sym (System.Posix.Types.N:COff[0])
                             ->_R Sym (System.Posix.Types.N:COff[0])
                             :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *))
                     GHC.Int.$fNumInt64_$c*
                     `cast` (Sym (System.Posix.Types.N:COff[0])
                             ->_R Sym (System.Posix.Types.N:COff[0])
                             ->_R Sym (System.Posix.Types.N:COff[0])
                             :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *))
                     GHC.Int.$fNumInt64_$cnegate
                     `cast` (Sym (System.Posix.Types.N:COff[0])
                             ->_R Sym (System.Posix.Types.N:COff[0])
                             :: (Int64 -> Int64 :: *) ~R# (COff -> COff :: *))
                     GHC.Int.$fNumInt64_$cabs
                     `cast` (Sym (System.Posix.Types.N:COff[0])
                             ->_R Sym (System.Posix.Types.N:COff[0])
                             :: (Int64 -> Int64 :: *) ~R# (COff -> COff :: *))
                     GHC.Int.$fNumInt64_$csignum
                     `cast` (Sym (System.Posix.Types.N:COff[0])
                             ->_R Sym (System.Posix.Types.N:COff[0])
                             :: (Int64 -> Int64 :: *) ~R# (COff -> COff :: *))
                     GHC.Int.$fNumInt64_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:COff[0])
                             :: (Integer -> Int64 :: *) ~R# (Integer -> COff :: *))]
System.Posix.Types.$fNumCOff
  = GHC.Num.C:Num
      @ COff
      (GHC.Int.$fNumInt64_$c+
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *)))
      (GHC.Int.$fNumInt64_$c-
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *)))
      (GHC.Int.$fNumInt64_$c*
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *)))
      (GHC.Int.$fNumInt64_$cnegate
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int64 :: *) ~R# (COff -> COff :: *)))
      (GHC.Int.$fNumInt64_$cabs
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int64 :: *) ~R# (COff -> COff :: *)))
      (GHC.Int.$fNumInt64_$csignum
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int64 :: *) ~R# (COff -> COff :: *)))
      (GHC.Int.$fNumInt64_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Integer -> Int64 :: *) ~R# (Integer -> COff :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCOff [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq COff
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: COff
                        GHC.Int.eqInt64
                        `cast` (Sym (System.Posix.Types.N:COff[0])
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                ->_R <Bool>_R
                                :: (Int64 -> Int64 -> Bool :: *) ~R# (COff -> COff -> Bool :: *))
                        GHC.Int.neInt64
                        `cast` (Sym (System.Posix.Types.N:COff[0])
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                ->_R <Bool>_R
                                :: (Int64 -> Int64 -> Bool :: *) ~R# (COff -> COff -> Bool :: *))]
System.Posix.Types.$fEqCOff
  = GHC.Classes.C:Eq
      @ COff
      (GHC.Int.eqInt64
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *) ~R# (COff -> COff -> Bool :: *)))
      (GHC.Int.neInt64
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *) ~R# (COff -> COff -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCOff [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord COff
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: COff
                         System.Posix.Types.$fEqCOff
                         GHC.Int.$fOrdInt64_$ccompare
                         `cast` (Sym (System.Posix.Types.N:COff[0])
                                 ->_R Sym (System.Posix.Types.N:COff[0])
                                 ->_R <Ordering>_R
                                 :: (Int64 -> Int64 -> Ordering :: *)
                                    ~R# (COff -> COff -> Ordering :: *))
                         GHC.Int.ltInt64
                         `cast` (Sym (System.Posix.Types.N:COff[0])
                                 ->_R Sym (System.Posix.Types.N:COff[0])
                                 ->_R <Bool>_R
                                 :: (Int64 -> Int64 -> Bool :: *) ~R# (COff -> COff -> Bool :: *))
                         GHC.Int.leInt64
                         `cast` (Sym (System.Posix.Types.N:COff[0])
                                 ->_R Sym (System.Posix.Types.N:COff[0])
                                 ->_R <Bool>_R
                                 :: (Int64 -> Int64 -> Bool :: *) ~R# (COff -> COff -> Bool :: *))
                         GHC.Int.gtInt64
                         `cast` (Sym (System.Posix.Types.N:COff[0])
                                 ->_R Sym (System.Posix.Types.N:COff[0])
                                 ->_R <Bool>_R
                                 :: (Int64 -> Int64 -> Bool :: *) ~R# (COff -> COff -> Bool :: *))
                         GHC.Int.geInt64
                         `cast` (Sym (System.Posix.Types.N:COff[0])
                                 ->_R Sym (System.Posix.Types.N:COff[0])
                                 ->_R <Bool>_R
                                 :: (Int64 -> Int64 -> Bool :: *) ~R# (COff -> COff -> Bool :: *))
                         GHC.Int.$fOrdInt64_$cmax
                         `cast` (Sym (System.Posix.Types.N:COff[0])
                                 ->_R Sym (System.Posix.Types.N:COff[0])
                                 ->_R Sym (System.Posix.Types.N:COff[0])
                                 :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *))
                         GHC.Int.$fOrdInt64_$cmin
                         `cast` (Sym (System.Posix.Types.N:COff[0])
                                 ->_R Sym (System.Posix.Types.N:COff[0])
                                 ->_R Sym (System.Posix.Types.N:COff[0])
                                 :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *))]
System.Posix.Types.$fOrdCOff
  = GHC.Classes.C:Ord
      @ COff
      System.Posix.Types.$fEqCOff
      (GHC.Int.$fOrdInt64_$ccompare
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R <Ordering>_R
               :: (Int64 -> Int64 -> Ordering :: *)
                  ~R# (COff -> COff -> Ordering :: *)))
      (GHC.Int.ltInt64
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *) ~R# (COff -> COff -> Bool :: *)))
      (GHC.Int.leInt64
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *) ~R# (COff -> COff -> Bool :: *)))
      (GHC.Int.gtInt64
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *) ~R# (COff -> COff -> Bool :: *)))
      (GHC.Int.geInt64
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R <Bool>_R
               :: (Int64 -> Int64 -> Bool :: *) ~R# (COff -> COff -> Bool :: *)))
      (GHC.Int.$fOrdInt64_$cmax
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *)))
      (GHC.Int.$fOrdInt64_$cmin
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCOff [InlPrag=NOUSERINLINE CONLIKE]
  :: Real COff
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: COff
                       System.Posix.Types.$fNumCOff
                       System.Posix.Types.$fOrdCOff
                       GHC.Int.$fRealInt64_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Ratio Integer>_R
                               :: (Int64 -> Ratio Integer :: *) ~R# (COff -> Ratio Integer :: *))]
System.Posix.Types.$fRealCOff
  = GHC.Real.C:Real
      @ COff
      System.Posix.Types.$fNumCOff
      System.Posix.Types.$fOrdCOff
      (GHC.Int.$fRealInt64_$ctoRational
       `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Ratio Integer>_R
               :: (Int64 -> Ratio Integer :: *) ~R# (COff -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 58, joins: 0/0}
System.Posix.Types.$fIntegralCOff [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral COff
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: COff
                           System.Posix.Types.$fRealCOff
                           System.Posix.Types.$fEnumCOff
                           GHC.Int.$fIntegralInt64_$cquot
                           `cast` (Sym (System.Posix.Types.N:COff[0])
                                   ->_R Sym (System.Posix.Types.N:COff[0])
                                   ->_R Sym (System.Posix.Types.N:COff[0])
                                   :: (Int64 -> Int64 -> Int64 :: *)
                                      ~R# (COff -> COff -> COff :: *))
                           GHC.Int.$fIntegralInt64_$crem
                           `cast` (Sym (System.Posix.Types.N:COff[0])
                                   ->_R Sym (System.Posix.Types.N:COff[0])
                                   ->_R Sym (System.Posix.Types.N:COff[0])
                                   :: (Int64 -> Int64 -> Int64 :: *)
                                      ~R# (COff -> COff -> COff :: *))
                           GHC.Int.$fIntegralInt64_$cdiv
                           `cast` (Sym (System.Posix.Types.N:COff[0])
                                   ->_R Sym (System.Posix.Types.N:COff[0])
                                   ->_R Sym (System.Posix.Types.N:COff[0])
                                   :: (Int64 -> Int64 -> Int64 :: *)
                                      ~R# (COff -> COff -> COff :: *))
                           GHC.Int.$fIntegralInt64_$cmod
                           `cast` (Sym (System.Posix.Types.N:COff[0])
                                   ->_R Sym (System.Posix.Types.N:COff[0])
                                   ->_R Sym (System.Posix.Types.N:COff[0])
                                   :: (Int64 -> Int64 -> Int64 :: *)
                                      ~R# (COff -> COff -> COff :: *))
                           GHC.Int.$fIntegralInt64_$cquotRem
                           `cast` (Sym (System.Posix.Types.N:COff[0])
                                   ->_R Sym (System.Posix.Types.N:COff[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:COff[0]))
                                           (Sym (System.Posix.Types.N:COff[0])))_R
                                   :: (Int64 -> Int64 -> (Int64, Int64) :: *)
                                      ~R# (COff -> COff -> (COff, COff) :: *))
                           GHC.Int.$fIntegralInt64_$cdivMod
                           `cast` (Sym (System.Posix.Types.N:COff[0])
                                   ->_R Sym (System.Posix.Types.N:COff[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:COff[0]))
                                           (Sym (System.Posix.Types.N:COff[0])))_R
                                   :: (Int64 -> Int64 -> (Int64, Int64) :: *)
                                      ~R# (COff -> COff -> (COff, COff) :: *))
                           GHC.Int.$fIntegralInt64_$ctoInteger
                           `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Integer>_R
                                   :: (Int64 -> Integer :: *) ~R# (COff -> Integer :: *))]
System.Posix.Types.$fIntegralCOff
  = GHC.Real.C:Integral
      @ COff
      System.Posix.Types.$fRealCOff
      System.Posix.Types.$fEnumCOff
      (GHC.Int.$fIntegralInt64_$cquot
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *)))
      (GHC.Int.$fIntegralInt64_$crem
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *)))
      (GHC.Int.$fIntegralInt64_$cdiv
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *)))
      (GHC.Int.$fIntegralInt64_$cmod
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *)))
      (GHC.Int.$fIntegralInt64_$cquotRem
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:COff[0]))
                       (Sym (System.Posix.Types.N:COff[0])))_R
               :: (Int64 -> Int64 -> (Int64, Int64) :: *)
                  ~R# (COff -> COff -> (COff, COff) :: *)))
      (GHC.Int.$fIntegralInt64_$cdivMod
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:COff[0]))
                       (Sym (System.Posix.Types.N:COff[0])))_R
               :: (Int64 -> Int64 -> (Int64, Int64) :: *)
                  ~R# (COff -> COff -> (COff, COff) :: *)))
      (GHC.Int.$fIntegralInt64_$ctoInteger
       `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Integer>_R
               :: (Int64 -> Integer :: *) ~R# (COff -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
System.Posix.Types.$fBitsCOff [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits COff
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: COff
                        System.Posix.Types.$fEqCOff
                        GHC.Int.$fBitsInt64_$c.&.
                        `cast` (Sym (System.Posix.Types.N:COff[0])
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *))
                        GHC.Int.$fBitsInt64_$c.|.
                        `cast` (Sym (System.Posix.Types.N:COff[0])
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *))
                        GHC.Int.$fBitsInt64_$cxor
                        `cast` (Sym (System.Posix.Types.N:COff[0])
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *))
                        GHC.Int.$fBitsInt64_$ccomplement
                        `cast` (Sym (System.Posix.Types.N:COff[0])
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                :: (Int64 -> Int64 :: *) ~R# (COff -> COff :: *))
                        GHC.Int.$fBitsInt64_$cshift
                        `cast` (Sym (System.Posix.Types.N:COff[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *))
                        GHC.Int.$fBitsInt64_$crotate
                        `cast` (Sym (System.Posix.Types.N:COff[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *))
                        GHC.Int.$fBitsInt10
                        `cast` (Sym (System.Posix.Types.N:COff[0])
                                :: (Int64 :: *) ~R# (COff :: *))
                        GHC.Int.$fBitsInt64_$cbit
                        `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:COff[0])
                                :: (Int -> Int64 :: *) ~R# (Int -> COff :: *))
                        GHC.Int.$fBitsInt64_$csetBit
                        `cast` (Sym (System.Posix.Types.N:COff[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *))
                        GHC.Int.$fBitsInt64_$cclearBit
                        `cast` (Sym (System.Posix.Types.N:COff[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *))
                        GHC.Int.$fBitsInt64_$ccomplementBit
                        `cast` (Sym (System.Posix.Types.N:COff[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *))
                        GHC.Int.$fBitsInt64_$ctestBit
                        `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Int -> Bool>_R
                                :: (Int64 -> Int -> Bool :: *) ~R# (COff -> Int -> Bool :: *))
                        GHC.Int.$fBitsInt64_$cbitSizeMaybe
                        `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Maybe Int>_R
                                :: (Int64 -> Maybe Int :: *) ~R# (COff -> Maybe Int :: *))
                        GHC.Int.$fBitsInt64_$cfiniteBitSize
                        `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Int>_R
                                :: (Int64 -> Int :: *) ~R# (COff -> Int :: *))
                        GHC.Int.$fBitsInt64_$cisSigned
                        `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Bool>_R
                                :: (Int64 -> Bool :: *) ~R# (COff -> Bool :: *))
                        GHC.Int.$fBitsInt64_$cshiftL
                        `cast` (Sym (System.Posix.Types.N:COff[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *))
                        GHC.Int.$fBitsInt64_$cunsafeShiftL
                        `cast` (Sym (System.Posix.Types.N:COff[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *))
                        GHC.Int.$fBitsInt64_$cshiftR
                        `cast` (Sym (System.Posix.Types.N:COff[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *))
                        GHC.Int.$fBitsInt64_$cunsafeShiftR
                        `cast` (Sym (System.Posix.Types.N:COff[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *))
                        GHC.Int.$fBitsInt64_$crotateL
                        `cast` (Sym (System.Posix.Types.N:COff[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *))
                        GHC.Int.$fBitsInt64_$crotateR
                        `cast` (Sym (System.Posix.Types.N:COff[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:COff[0])
                                :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *))
                        GHC.Int.$fBitsInt64_$cpopCount
                        `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Int>_R
                                :: (Int64 -> Int :: *) ~R# (COff -> Int :: *))]
System.Posix.Types.$fBitsCOff
  = Data.Bits.C:Bits
      @ COff
      System.Posix.Types.$fEqCOff
      (GHC.Int.$fBitsInt64_$c.&.
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *)))
      (GHC.Int.$fBitsInt64_$c.|.
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *)))
      (GHC.Int.$fBitsInt64_$cxor
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int64 -> Int64 :: *) ~R# (COff -> COff -> COff :: *)))
      (GHC.Int.$fBitsInt64_$ccomplement
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int64 :: *) ~R# (COff -> COff :: *)))
      (GHC.Int.$fBitsInt64_$cshift
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *)))
      (GHC.Int.$fBitsInt64_$crotate
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *)))
      (GHC.Int.$fBitsInt10
       `cast` (Sym (System.Posix.Types.N:COff[0])
               :: (Int64 :: *) ~R# (COff :: *)))
      (GHC.Int.$fBitsInt64_$cbit
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int -> Int64 :: *) ~R# (Int -> COff :: *)))
      (GHC.Int.$fBitsInt64_$csetBit
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *)))
      (GHC.Int.$fBitsInt64_$cclearBit
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *)))
      (GHC.Int.$fBitsInt64_$ccomplementBit
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *)))
      (GHC.Int.$fBitsInt64_$ctestBit
       `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Int -> Bool>_R
               :: (Int64 -> Int -> Bool :: *) ~R# (COff -> Int -> Bool :: *)))
      (GHC.Int.$fBitsInt64_$cbitSizeMaybe
       `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Maybe Int>_R
               :: (Int64 -> Maybe Int :: *) ~R# (COff -> Maybe Int :: *)))
      (GHC.Int.$fBitsInt64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (COff -> Int :: *)))
      (GHC.Int.$fBitsInt64_$cisSigned
       `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Bool>_R
               :: (Int64 -> Bool :: *) ~R# (COff -> Bool :: *)))
      (GHC.Int.$fBitsInt64_$cshiftL
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *)))
      (GHC.Int.$fBitsInt64_$cunsafeShiftL
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *)))
      (GHC.Int.$fBitsInt64_$cshiftR
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *)))
      (GHC.Int.$fBitsInt64_$cunsafeShiftR
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *)))
      (GHC.Int.$fBitsInt64_$crotateL
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *)))
      (GHC.Int.$fBitsInt64_$crotateR
       `cast` (Sym (System.Posix.Types.N:COff[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:COff[0])
               :: (Int64 -> Int -> Int64 :: *) ~R# (COff -> Int -> COff :: *)))
      (GHC.Int.$fBitsInt64_$cpopCount
       `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (COff -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
System.Posix.Types.$fFiniteBitsCOff [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits COff
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: COff
                              System.Posix.Types.$fBitsCOff
                              GHC.Int.$fBitsInt64_$cfiniteBitSize
                              `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Int>_R
                                      :: (Int64 -> Int :: *) ~R# (COff -> Int :: *))
                              GHC.Int.$fFiniteBitsInt64_$ccountLeadingZeros
                              `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Int>_R
                                      :: (Int64 -> Int :: *) ~R# (COff -> Int :: *))
                              GHC.Int.$fFiniteBitsInt64_$ccountTrailingZeros
                              `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Int>_R
                                      :: (Int64 -> Int :: *) ~R# (COff -> Int :: *))]
System.Posix.Types.$fFiniteBitsCOff
  = Data.Bits.C:FiniteBits
      @ COff
      System.Posix.Types.$fBitsCOff
      (GHC.Int.$fBitsInt64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (COff -> Int :: *)))
      (GHC.Int.$fFiniteBitsInt64_$ccountLeadingZeros
       `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (COff -> Int :: *)))
      (GHC.Int.$fFiniteBitsInt64_$ccountTrailingZeros
       `cast` (Sym (System.Posix.Types.N:COff[0]) ->_R <Int>_R
               :: (Int64 -> Int :: *) ~R# (COff -> Int :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CMode
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CMode
                       GHC.Word.$fShowWord32_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CMode[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Word32 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CMode -> [Char] -> [Char] :: *))
                       GHC.Word.$fShowWord32_$cshow
                       `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <[Char]>_R
                               :: (Word32 -> [Char] :: *) ~R# (CMode -> [Char] :: *))
                       GHC.Word.$fShowWord32_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CMode[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Word32] -> [Char] -> [Char] :: *)
                                  ~R# ([CMode] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCMode
  = GHC.Show.C:Show
      @ CMode
      (GHC.Word.$fShowWord32_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Word32 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CMode -> [Char] -> [Char] :: *)))
      (GHC.Word.$fShowWord32_$cshow
       `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <[Char]>_R
               :: (Word32 -> [Char] :: *) ~R# (CMode -> [Char] :: *)))
      (GHC.Word.$fShowWord32_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CMode[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Word32] -> [Char] -> [Char] :: *)
                  ~R# ([CMode] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CMode
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CMode
                       GHC.Read.$fReadWord32_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,) (Sym (System.Posix.Types.N:CMode[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Word32, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CMode, [Char])] :: *))
                       GHC.Read.$fReadWord32_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CMode[0])])_R <[Char]>_R)_R])_R
                               :: ([Char] -> [([Word32], [Char])] :: *)
                                  ~R# ([Char] -> [([CMode], [Char])] :: *))
                       GHC.Read.$fReadWord10
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Word32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      (System.Posix.Types.N:CMode[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Word32 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CMode :: *))
                       GHC.Read.$fReadWord7
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Word32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        ([System.Posix.Types.N:CMode[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Word32] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CMode] :: *))]
System.Posix.Types.$fReadCMode
  = GHC.Read.C:Read
      @ CMode
      (GHC.Read.$fReadWord32_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,) (Sym (System.Posix.Types.N:CMode[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Word32, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CMode, [Char])] :: *)))
      (GHC.Read.$fReadWord32_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CMode[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Word32], [Char])] :: *)
                  ~R# ([Char] -> [([CMode], [Char])] :: *)))
      (GHC.Read.$fReadWord10
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Word32>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      (System.Posix.Types.N:CMode[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Word32 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CMode :: *)))
      (GHC.Read.$fReadWord7
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Word32]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        ([System.Posix.Types.N:CMode[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Word32] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CMode] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
System.Posix.Types.$fBoundedCMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded CMode
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: CMode
                          GHC.Word.$fBitsWord32_$cminBound
                          `cast` (Sym (System.Posix.Types.N:CMode[0])
                                  :: (Word32 :: *) ~R# (CMode :: *))
                          GHC.Word.$fBoundedWord32_$cmaxBound
                          `cast` (Sym (System.Posix.Types.N:CMode[0])
                                  :: (Word32 :: *) ~R# (CMode :: *))]
System.Posix.Types.$fBoundedCMode
  = GHC.Enum.C:Bounded
      @ CMode
      (GHC.Word.$fBitsWord32_$cminBound
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 :: *) ~R# (CMode :: *)))
      (GHC.Word.$fBoundedWord32_$cmaxBound
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 :: *) ~R# (CMode :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CMode
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CMode
                                   Foreign.Storable.$fStorableWord32_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Int>_R
                                           :: (Word32 -> Int :: *) ~R# (CMode -> Int :: *))
                                   Foreign.Storable.$fStorableWord32_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Int>_R
                                           :: (Word32 -> Int :: *) ~R# (CMode -> Int :: *))
                                   GHC.Storable.readWord32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CMode))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CMode[0]))
                                           :: (Ptr Word32
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word32 #) :: *)
                                              ~R# (Ptr CMode -> Int -> IO CMode :: *))
                                   GHC.Storable.writeWord32OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CMode))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CMode[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word32
                                               -> Int
                                               -> Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CMode -> Int -> CMode -> IO () :: *))
                                   Foreign.Storable.$fStorableWord13
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CMode[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word32 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CMode :: *))
                                   Foreign.Storable.$fStorableWord12
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CMode[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> CMode -> IO () :: *))
                                   Foreign.Storable.$fStorableWord11
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CMode))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CMode[0]))
                                           :: (Ptr Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word32 #) :: *)
                                              ~R# (Ptr CMode -> IO CMode :: *))
                                   Foreign.Storable.$fStorableWord10
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CMode))_R
                                           ->_R Sym (System.Posix.Types.N:CMode[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word32
                                               -> Word32
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CMode -> CMode -> IO () :: *))]
System.Posix.Types.$fStorableCMode
  = Foreign.Storable.C:Storable
      @ CMode
      (Foreign.Storable.$fStorableWord32_$calignment
       `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CMode -> Int :: *)))
      (Foreign.Storable.$fStorableWord32_$calignment
       `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CMode -> Int :: *)))
      (GHC.Storable.readWord32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CMode))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CMode[0]))
               :: (Ptr Word32
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word32 #) :: *)
                  ~R# (Ptr CMode -> Int -> IO CMode :: *)))
      (GHC.Storable.writeWord32OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CMode))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word32
                   -> Int
                   -> Word32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CMode -> Int -> CMode -> IO () :: *)))
      (Foreign.Storable.$fStorableWord13
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CMode[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word32 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CMode :: *)))
      (Foreign.Storable.$fStorableWord12
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Word32
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CMode -> IO () :: *)))
      (Foreign.Storable.$fStorableWord11
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CMode))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CMode[0]))
               :: (Ptr Word32
                   -> State# RealWorld -> (# State# RealWorld, Word32 #) :: *)
                  ~R# (Ptr CMode -> IO CMode :: *)))
      (Foreign.Storable.$fStorableWord10
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word32, CMode))_R
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word32
                   -> Word32 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CMode -> CMode -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CMode
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CMode
                       GHC.Word.$fEnumWord32_$csucc
                       `cast` (Sym (System.Posix.Types.N:CMode[0])
                               ->_R Sym (System.Posix.Types.N:CMode[0])
                               :: (Word32 -> Word32 :: *) ~R# (CMode -> CMode :: *))
                       GHC.Word.$fEnumWord32_$cpred
                       `cast` (Sym (System.Posix.Types.N:CMode[0])
                               ->_R Sym (System.Posix.Types.N:CMode[0])
                               :: (Word32 -> Word32 :: *) ~R# (CMode -> CMode :: *))
                       GHC.Word.$fEnumWord32_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CMode[0])
                               :: (Int -> Word32 :: *) ~R# (Int -> CMode :: *))
                       GHC.Word.$fEnumWord32_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Int>_R
                               :: (Word32 -> Int :: *) ~R# (CMode -> Int :: *))
                       GHC.Word.$fEnumWord32_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CMode[0])
                               ->_R ([Sym (System.Posix.Types.N:CMode[0])])_R
                               :: (Word32 -> [Word32] :: *) ~R# (CMode -> [CMode] :: *))
                       GHC.Word.$fEnumWord32_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CMode[0])
                               ->_R Sym (System.Posix.Types.N:CMode[0])
                               ->_R ([Sym (System.Posix.Types.N:CMode[0])])_R
                               :: (Word32 -> Word32 -> [Word32] :: *)
                                  ~R# (CMode -> CMode -> [CMode] :: *))
                       GHC.Word.$fEnumWord32_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CMode[0])
                               ->_R Sym (System.Posix.Types.N:CMode[0])
                               ->_R ([Sym (System.Posix.Types.N:CMode[0])])_R
                               :: (Word32 -> Word32 -> [Word32] :: *)
                                  ~R# (CMode -> CMode -> [CMode] :: *))
                       GHC.Word.$fEnumWord32_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CMode[0])
                               ->_R Sym (System.Posix.Types.N:CMode[0])
                               ->_R Sym (System.Posix.Types.N:CMode[0])
                               ->_R ([Sym (System.Posix.Types.N:CMode[0])])_R
                               :: (Word32 -> Word32 -> Word32 -> [Word32] :: *)
                                  ~R# (CMode -> CMode -> CMode -> [CMode] :: *))]
System.Posix.Types.$fEnumCMode
  = GHC.Enum.C:Enum
      @ CMode
      (GHC.Word.$fEnumWord32_$csucc
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Word32 :: *) ~R# (CMode -> CMode :: *)))
      (GHC.Word.$fEnumWord32_$cpred
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Word32 :: *) ~R# (CMode -> CMode :: *)))
      (GHC.Word.$fEnumWord32_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Int -> Word32 :: *) ~R# (Int -> CMode :: *)))
      (GHC.Word.$fEnumWord32_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CMode -> Int :: *)))
      (GHC.Word.$fEnumWord32_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R ([Sym (System.Posix.Types.N:CMode[0])])_R
               :: (Word32 -> [Word32] :: *) ~R# (CMode -> [CMode] :: *)))
      (GHC.Word.$fEnumWord32_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R ([Sym (System.Posix.Types.N:CMode[0])])_R
               :: (Word32 -> Word32 -> [Word32] :: *)
                  ~R# (CMode -> CMode -> [CMode] :: *)))
      (GHC.Word.$fEnumWord32_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R ([Sym (System.Posix.Types.N:CMode[0])])_R
               :: (Word32 -> Word32 -> [Word32] :: *)
                  ~R# (CMode -> CMode -> [CMode] :: *)))
      (GHC.Word.$fEnumWord32_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R ([Sym (System.Posix.Types.N:CMode[0])])_R
               :: (Word32 -> Word32 -> Word32 -> [Word32] :: *)
                  ~R# (CMode -> CMode -> CMode -> [CMode] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CMode
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CMode
                     GHC.Word.$fNumWord32_$c+
                     `cast` (Sym (System.Posix.Types.N:CMode[0])
                             ->_R Sym (System.Posix.Types.N:CMode[0])
                             ->_R Sym (System.Posix.Types.N:CMode[0])
                             :: (Word32 -> Word32 -> Word32 :: *)
                                ~R# (CMode -> CMode -> CMode :: *))
                     GHC.Word.$fNumWord32_$c-
                     `cast` (Sym (System.Posix.Types.N:CMode[0])
                             ->_R Sym (System.Posix.Types.N:CMode[0])
                             ->_R Sym (System.Posix.Types.N:CMode[0])
                             :: (Word32 -> Word32 -> Word32 :: *)
                                ~R# (CMode -> CMode -> CMode :: *))
                     GHC.Word.$fNumWord32_$c*
                     `cast` (Sym (System.Posix.Types.N:CMode[0])
                             ->_R Sym (System.Posix.Types.N:CMode[0])
                             ->_R Sym (System.Posix.Types.N:CMode[0])
                             :: (Word32 -> Word32 -> Word32 :: *)
                                ~R# (CMode -> CMode -> CMode :: *))
                     GHC.Word.$fNumWord32_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CMode[0])
                             ->_R Sym (System.Posix.Types.N:CMode[0])
                             :: (Word32 -> Word32 :: *) ~R# (CMode -> CMode :: *))
                     GHC.Word.$fNumWord32_$cabs
                     `cast` (Sym (System.Posix.Types.N:CMode[0])
                             ->_R Sym (System.Posix.Types.N:CMode[0])
                             :: (Word32 -> Word32 :: *) ~R# (CMode -> CMode :: *))
                     GHC.Word.$fNumWord32_$csignum
                     `cast` (Sym (System.Posix.Types.N:CMode[0])
                             ->_R Sym (System.Posix.Types.N:CMode[0])
                             :: (Word32 -> Word32 :: *) ~R# (CMode -> CMode :: *))
                     GHC.Word.$fNumWord32_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CMode[0])
                             :: (Integer -> Word32 :: *) ~R# (Integer -> CMode :: *))]
System.Posix.Types.$fNumCMode
  = GHC.Num.C:Num
      @ CMode
      (GHC.Word.$fNumWord32_$c+
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CMode -> CMode -> CMode :: *)))
      (GHC.Word.$fNumWord32_$c-
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CMode -> CMode -> CMode :: *)))
      (GHC.Word.$fNumWord32_$c*
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CMode -> CMode -> CMode :: *)))
      (GHC.Word.$fNumWord32_$cnegate
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Word32 :: *) ~R# (CMode -> CMode :: *)))
      (GHC.Word.$fNumWord32_$cabs
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Word32 :: *) ~R# (CMode -> CMode :: *)))
      (GHC.Word.$fNumWord32_$csignum
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Word32 :: *) ~R# (CMode -> CMode :: *)))
      (GHC.Word.$fNumWord32_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Integer -> Word32 :: *) ~R# (Integer -> CMode :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CMode
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CMode
                        GHC.Word.eqWord32
                        `cast` (Sym (System.Posix.Types.N:CMode[0])
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                ->_R <Bool>_R
                                :: (Word32 -> Word32 -> Bool :: *)
                                   ~R# (CMode -> CMode -> Bool :: *))
                        GHC.Word.neWord32
                        `cast` (Sym (System.Posix.Types.N:CMode[0])
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                ->_R <Bool>_R
                                :: (Word32 -> Word32 -> Bool :: *)
                                   ~R# (CMode -> CMode -> Bool :: *))]
System.Posix.Types.$fEqCMode
  = GHC.Classes.C:Eq
      @ CMode
      (GHC.Word.eqWord32
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CMode -> CMode -> Bool :: *)))
      (GHC.Word.neWord32
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CMode -> CMode -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CMode
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CMode
                         System.Posix.Types.$fEqCMode
                         GHC.Word.$fOrdWord32_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CMode[0])
                                 ->_R Sym (System.Posix.Types.N:CMode[0])
                                 ->_R <Ordering>_R
                                 :: (Word32 -> Word32 -> Ordering :: *)
                                    ~R# (CMode -> CMode -> Ordering :: *))
                         GHC.Word.ltWord32
                         `cast` (Sym (System.Posix.Types.N:CMode[0])
                                 ->_R Sym (System.Posix.Types.N:CMode[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *)
                                    ~R# (CMode -> CMode -> Bool :: *))
                         GHC.Word.leWord32
                         `cast` (Sym (System.Posix.Types.N:CMode[0])
                                 ->_R Sym (System.Posix.Types.N:CMode[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *)
                                    ~R# (CMode -> CMode -> Bool :: *))
                         GHC.Word.gtWord32
                         `cast` (Sym (System.Posix.Types.N:CMode[0])
                                 ->_R Sym (System.Posix.Types.N:CMode[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *)
                                    ~R# (CMode -> CMode -> Bool :: *))
                         GHC.Word.geWord32
                         `cast` (Sym (System.Posix.Types.N:CMode[0])
                                 ->_R Sym (System.Posix.Types.N:CMode[0])
                                 ->_R <Bool>_R
                                 :: (Word32 -> Word32 -> Bool :: *)
                                    ~R# (CMode -> CMode -> Bool :: *))
                         GHC.Word.$fOrdWord32_$cmax
                         `cast` (Sym (System.Posix.Types.N:CMode[0])
                                 ->_R Sym (System.Posix.Types.N:CMode[0])
                                 ->_R Sym (System.Posix.Types.N:CMode[0])
                                 :: (Word32 -> Word32 -> Word32 :: *)
                                    ~R# (CMode -> CMode -> CMode :: *))
                         GHC.Word.$fOrdWord32_$cmin
                         `cast` (Sym (System.Posix.Types.N:CMode[0])
                                 ->_R Sym (System.Posix.Types.N:CMode[0])
                                 ->_R Sym (System.Posix.Types.N:CMode[0])
                                 :: (Word32 -> Word32 -> Word32 :: *)
                                    ~R# (CMode -> CMode -> CMode :: *))]
System.Posix.Types.$fOrdCMode
  = GHC.Classes.C:Ord
      @ CMode
      System.Posix.Types.$fEqCMode
      (GHC.Word.$fOrdWord32_$ccompare
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R <Ordering>_R
               :: (Word32 -> Word32 -> Ordering :: *)
                  ~R# (CMode -> CMode -> Ordering :: *)))
      (GHC.Word.ltWord32
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CMode -> CMode -> Bool :: *)))
      (GHC.Word.leWord32
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CMode -> CMode -> Bool :: *)))
      (GHC.Word.gtWord32
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CMode -> CMode -> Bool :: *)))
      (GHC.Word.geWord32
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (CMode -> CMode -> Bool :: *)))
      (GHC.Word.$fOrdWord32_$cmax
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CMode -> CMode -> CMode :: *)))
      (GHC.Word.$fOrdWord32_$cmin
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CMode -> CMode -> CMode :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CMode
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CMode
                       System.Posix.Types.$fNumCMode
                       System.Posix.Types.$fOrdCMode
                       GHC.Word.$fRealWord32_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Ratio Integer>_R
                               :: (Word32 -> Ratio Integer :: *)
                                  ~R# (CMode -> Ratio Integer :: *))]
System.Posix.Types.$fRealCMode
  = GHC.Real.C:Real
      @ CMode
      System.Posix.Types.$fNumCMode
      System.Posix.Types.$fOrdCMode
      (GHC.Word.$fRealWord32_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Ratio Integer>_R
               :: (Word32 -> Ratio Integer :: *)
                  ~R# (CMode -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 58, joins: 0/0}
System.Posix.Types.$fIntegralCMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral CMode
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: CMode
                           System.Posix.Types.$fRealCMode
                           System.Posix.Types.$fEnumCMode
                           GHC.Word.$fIntegralWord32_$cquot
                           `cast` (Sym (System.Posix.Types.N:CMode[0])
                                   ->_R Sym (System.Posix.Types.N:CMode[0])
                                   ->_R Sym (System.Posix.Types.N:CMode[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CMode -> CMode -> CMode :: *))
                           GHC.Word.$fIntegralWord32_$crem
                           `cast` (Sym (System.Posix.Types.N:CMode[0])
                                   ->_R Sym (System.Posix.Types.N:CMode[0])
                                   ->_R Sym (System.Posix.Types.N:CMode[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CMode -> CMode -> CMode :: *))
                           GHC.Word.$fIntegralWord32_$cquot
                           `cast` (Sym (System.Posix.Types.N:CMode[0])
                                   ->_R Sym (System.Posix.Types.N:CMode[0])
                                   ->_R Sym (System.Posix.Types.N:CMode[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CMode -> CMode -> CMode :: *))
                           GHC.Word.$fIntegralWord32_$crem
                           `cast` (Sym (System.Posix.Types.N:CMode[0])
                                   ->_R Sym (System.Posix.Types.N:CMode[0])
                                   ->_R Sym (System.Posix.Types.N:CMode[0])
                                   :: (Word32 -> Word32 -> Word32 :: *)
                                      ~R# (CMode -> CMode -> CMode :: *))
                           GHC.Word.$fIntegralWord32_$cquotRem
                           `cast` (Sym (System.Posix.Types.N:CMode[0])
                                   ->_R Sym (System.Posix.Types.N:CMode[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CMode[0]))
                                           (Sym (System.Posix.Types.N:CMode[0])))_R
                                   :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                                      ~R# (CMode -> CMode -> (CMode, CMode) :: *))
                           GHC.Word.$fIntegralWord32_$cdivMod
                           `cast` (Sym (System.Posix.Types.N:CMode[0])
                                   ->_R Sym (System.Posix.Types.N:CMode[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CMode[0]))
                                           (Sym (System.Posix.Types.N:CMode[0])))_R
                                   :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                                      ~R# (CMode -> CMode -> (CMode, CMode) :: *))
                           GHC.Word.$ctoInteger2
                           `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Integer>_R
                                   :: (Word32 -> Integer :: *) ~R# (CMode -> Integer :: *))]
System.Posix.Types.$fIntegralCMode
  = GHC.Real.C:Integral
      @ CMode
      System.Posix.Types.$fRealCMode
      System.Posix.Types.$fEnumCMode
      (GHC.Word.$fIntegralWord32_$cquot
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CMode -> CMode -> CMode :: *)))
      (GHC.Word.$fIntegralWord32_$crem
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CMode -> CMode -> CMode :: *)))
      (GHC.Word.$fIntegralWord32_$cquot
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CMode -> CMode -> CMode :: *)))
      (GHC.Word.$fIntegralWord32_$crem
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CMode -> CMode -> CMode :: *)))
      (GHC.Word.$fIntegralWord32_$cquotRem
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CMode[0]))
                       (Sym (System.Posix.Types.N:CMode[0])))_R
               :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                  ~R# (CMode -> CMode -> (CMode, CMode) :: *)))
      (GHC.Word.$fIntegralWord32_$cdivMod
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CMode[0]))
                       (Sym (System.Posix.Types.N:CMode[0])))_R
               :: (Word32 -> Word32 -> (Word32, Word32) :: *)
                  ~R# (CMode -> CMode -> (CMode, CMode) :: *)))
      (GHC.Word.$ctoInteger2
       `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Integer>_R
               :: (Word32 -> Integer :: *) ~R# (CMode -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
System.Posix.Types.$fBitsCMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits CMode
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: CMode
                        System.Posix.Types.$fEqCMode
                        GHC.Word.$fBitsWord32_$c.&.
                        `cast` (Sym (System.Posix.Types.N:CMode[0])
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                :: (Word32 -> Word32 -> Word32 :: *)
                                   ~R# (CMode -> CMode -> CMode :: *))
                        GHC.Word.$fBitsWord32_$c.|.
                        `cast` (Sym (System.Posix.Types.N:CMode[0])
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                :: (Word32 -> Word32 -> Word32 :: *)
                                   ~R# (CMode -> CMode -> CMode :: *))
                        GHC.Word.$fBitsWord32_$cxor
                        `cast` (Sym (System.Posix.Types.N:CMode[0])
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                :: (Word32 -> Word32 -> Word32 :: *)
                                   ~R# (CMode -> CMode -> CMode :: *))
                        GHC.Word.$fBitsWord32_$ccomplement
                        `cast` (Sym (System.Posix.Types.N:CMode[0])
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                :: (Word32 -> Word32 :: *) ~R# (CMode -> CMode :: *))
                        GHC.Word.$fBitsWord32_$cshift
                        `cast` (Sym (System.Posix.Types.N:CMode[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CMode -> Int -> CMode :: *))
                        GHC.Word.$fBitsWord32_$crotate
                        `cast` (Sym (System.Posix.Types.N:CMode[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CMode -> Int -> CMode :: *))
                        GHC.Word.$fBitsWord32_$cminBound
                        `cast` (Sym (System.Posix.Types.N:CMode[0])
                                :: (Word32 :: *) ~R# (CMode :: *))
                        GHC.Word.$fBitsWord32_$cbit
                        `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CMode[0])
                                :: (Int -> Word32 :: *) ~R# (Int -> CMode :: *))
                        GHC.Word.$fBitsWord32_$csetBit
                        `cast` (Sym (System.Posix.Types.N:CMode[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CMode -> Int -> CMode :: *))
                        GHC.Word.$fBitsWord32_$cclearBit
                        `cast` (Sym (System.Posix.Types.N:CMode[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CMode -> Int -> CMode :: *))
                        GHC.Word.$fBitsWord32_$ccomplementBit
                        `cast` (Sym (System.Posix.Types.N:CMode[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CMode -> Int -> CMode :: *))
                        GHC.Word.$fBitsWord32_$ctestBit
                        `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Int -> Bool>_R
                                :: (Word32 -> Int -> Bool :: *) ~R# (CMode -> Int -> Bool :: *))
                        GHC.Word.$fBitsWord32_$cbitSizeMaybe
                        `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Maybe Int>_R
                                :: (Word32 -> Maybe Int :: *) ~R# (CMode -> Maybe Int :: *))
                        GHC.Word.$fBitsWord32_$cfiniteBitSize
                        `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Int>_R
                                :: (Word32 -> Int :: *) ~R# (CMode -> Int :: *))
                        GHC.Word.$fBitsWord32_$cisSigned
                        `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Bool>_R
                                :: (Word32 -> Bool :: *) ~R# (CMode -> Bool :: *))
                        GHC.Word.$fBitsWord32_$cshiftL
                        `cast` (Sym (System.Posix.Types.N:CMode[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CMode -> Int -> CMode :: *))
                        GHC.Word.$fBitsWord32_$cunsafeShiftL
                        `cast` (Sym (System.Posix.Types.N:CMode[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CMode -> Int -> CMode :: *))
                        GHC.Word.$fBitsWord32_$cshiftR
                        `cast` (Sym (System.Posix.Types.N:CMode[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CMode -> Int -> CMode :: *))
                        GHC.Word.$fBitsWord32_$cunsafeShiftR
                        `cast` (Sym (System.Posix.Types.N:CMode[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CMode -> Int -> CMode :: *))
                        GHC.Word.$fBitsWord32_$crotateL
                        `cast` (Sym (System.Posix.Types.N:CMode[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CMode -> Int -> CMode :: *))
                        GHC.Word.$fBitsWord32_$crotateR
                        `cast` (Sym (System.Posix.Types.N:CMode[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CMode[0])
                                :: (Word32 -> Int -> Word32 :: *) ~R# (CMode -> Int -> CMode :: *))
                        GHC.Word.$fBitsWord32_$cpopCount
                        `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Int>_R
                                :: (Word32 -> Int :: *) ~R# (CMode -> Int :: *))]
System.Posix.Types.$fBitsCMode
  = Data.Bits.C:Bits
      @ CMode
      System.Posix.Types.$fEqCMode
      (GHC.Word.$fBitsWord32_$c.&.
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CMode -> CMode -> CMode :: *)))
      (GHC.Word.$fBitsWord32_$c.|.
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CMode -> CMode -> CMode :: *)))
      (GHC.Word.$fBitsWord32_$cxor
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (CMode -> CMode -> CMode :: *)))
      (GHC.Word.$fBitsWord32_$ccomplement
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Word32 :: *) ~R# (CMode -> CMode :: *)))
      (GHC.Word.$fBitsWord32_$cshift
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CMode -> Int -> CMode :: *)))
      (GHC.Word.$fBitsWord32_$crotate
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CMode -> Int -> CMode :: *)))
      (GHC.Word.$fBitsWord32_$cminBound
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 :: *) ~R# (CMode :: *)))
      (GHC.Word.$fBitsWord32_$cbit
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Int -> Word32 :: *) ~R# (Int -> CMode :: *)))
      (GHC.Word.$fBitsWord32_$csetBit
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CMode -> Int -> CMode :: *)))
      (GHC.Word.$fBitsWord32_$cclearBit
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CMode -> Int -> CMode :: *)))
      (GHC.Word.$fBitsWord32_$ccomplementBit
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CMode -> Int -> CMode :: *)))
      (GHC.Word.$fBitsWord32_$ctestBit
       `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Int -> Bool>_R
               :: (Word32 -> Int -> Bool :: *) ~R# (CMode -> Int -> Bool :: *)))
      (GHC.Word.$fBitsWord32_$cbitSizeMaybe
       `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Maybe Int>_R
               :: (Word32 -> Maybe Int :: *) ~R# (CMode -> Maybe Int :: *)))
      (GHC.Word.$fBitsWord32_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CMode -> Int :: *)))
      (GHC.Word.$fBitsWord32_$cisSigned
       `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Bool>_R
               :: (Word32 -> Bool :: *) ~R# (CMode -> Bool :: *)))
      (GHC.Word.$fBitsWord32_$cshiftL
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CMode -> Int -> CMode :: *)))
      (GHC.Word.$fBitsWord32_$cunsafeShiftL
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CMode -> Int -> CMode :: *)))
      (GHC.Word.$fBitsWord32_$cshiftR
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CMode -> Int -> CMode :: *)))
      (GHC.Word.$fBitsWord32_$cunsafeShiftR
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CMode -> Int -> CMode :: *)))
      (GHC.Word.$fBitsWord32_$crotateL
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CMode -> Int -> CMode :: *)))
      (GHC.Word.$fBitsWord32_$crotateR
       `cast` (Sym (System.Posix.Types.N:CMode[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CMode[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (CMode -> Int -> CMode :: *)))
      (GHC.Word.$fBitsWord32_$cpopCount
       `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CMode -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
System.Posix.Types.$fFiniteBitsCMode [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits CMode
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: CMode
                              System.Posix.Types.$fBitsCMode
                              GHC.Word.$fBitsWord32_$cfiniteBitSize
                              `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Int>_R
                                      :: (Word32 -> Int :: *) ~R# (CMode -> Int :: *))
                              GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
                              `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Int>_R
                                      :: (Word32 -> Int :: *) ~R# (CMode -> Int :: *))
                              GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros
                              `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Int>_R
                                      :: (Word32 -> Int :: *) ~R# (CMode -> Int :: *))]
System.Posix.Types.$fFiniteBitsCMode
  = Data.Bits.C:FiniteBits
      @ CMode
      System.Posix.Types.$fBitsCMode
      (GHC.Word.$fBitsWord32_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CMode -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
       `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CMode -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros
       `cast` (Sym (System.Posix.Types.N:CMode[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (CMode -> Int :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCIno [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CIno
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CIno
                       GHC.Word.$fShowWord64_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CIno[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Word64 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CIno -> [Char] -> [Char] :: *))
                       GHC.Word.$fShowWord64_$cshow
                       `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <[Char]>_R
                               :: (Word64 -> [Char] :: *) ~R# (CIno -> [Char] :: *))
                       GHC.Word.$fShowWord64_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CIno[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Word64] -> [Char] -> [Char] :: *)
                                  ~R# ([CIno] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCIno
  = GHC.Show.C:Show
      @ CIno
      (GHC.Word.$fShowWord64_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Word64 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CIno -> [Char] -> [Char] :: *)))
      (GHC.Word.$fShowWord64_$cshow
       `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <[Char]>_R
               :: (Word64 -> [Char] :: *) ~R# (CIno -> [Char] :: *)))
      (GHC.Word.$fShowWord64_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CIno[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Word64] -> [Char] -> [Char] :: *)
                  ~R# ([CIno] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCIno [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CIno
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CIno
                       GHC.Read.$fReadWord64_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,) (Sym (System.Posix.Types.N:CIno[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Word64, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CIno, [Char])] :: *))
                       GHC.Read.$fReadWord64_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CIno[0])])_R <[Char]>_R)_R])_R
                               :: ([Char] -> [([Word64], [Char])] :: *)
                                  ~R# ([Char] -> [([CIno], [Char])] :: *))
                       GHC.Read.$fReadWord13
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Word64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      (System.Posix.Types.N:CIno[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Word64 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CIno :: *))
                       GHC.Read.$fReadWord11
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Word64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        ([System.Posix.Types.N:CIno[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Word64] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CIno] :: *))]
System.Posix.Types.$fReadCIno
  = GHC.Read.C:Read
      @ CIno
      (GHC.Read.$fReadWord64_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,) (Sym (System.Posix.Types.N:CIno[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Word64, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CIno, [Char])] :: *)))
      (GHC.Read.$fReadWord64_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CIno[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Word64], [Char])] :: *)
                  ~R# ([Char] -> [([CIno], [Char])] :: *)))
      (GHC.Read.$fReadWord13
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Word64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      (System.Posix.Types.N:CIno[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Word64 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CIno :: *)))
      (GHC.Read.$fReadWord11
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Word64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        ([System.Posix.Types.N:CIno[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Word64] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CIno] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
System.Posix.Types.$fBoundedCIno [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded CIno
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: CIno
                          GHC.Word.$fBitsWord7
                          `cast` (Sym (System.Posix.Types.N:CIno[0])
                                  :: (Word64 :: *) ~R# (CIno :: *))
                          GHC.Word.$fBoundedWord64_$cmaxBound
                          `cast` (Sym (System.Posix.Types.N:CIno[0])
                                  :: (Word64 :: *) ~R# (CIno :: *))]
System.Posix.Types.$fBoundedCIno
  = GHC.Enum.C:Bounded
      @ CIno
      (GHC.Word.$fBitsWord7
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 :: *) ~R# (CIno :: *)))
      (GHC.Word.$fBoundedWord64_$cmaxBound
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 :: *) ~R# (CIno :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCIno [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CIno
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CIno
                                   Foreign.Storable.$fStorableWord64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Int>_R
                                           :: (Word64 -> Int :: *) ~R# (CIno -> Int :: *))
                                   Foreign.Storable.$fStorableWord64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Int>_R
                                           :: (Word64 -> Int :: *) ~R# (CIno -> Int :: *))
                                   GHC.Storable.readWord64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CIno))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CIno[0]))
                                           :: (Ptr Word64
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word64 #) :: *)
                                              ~R# (Ptr CIno -> Int -> IO CIno :: *))
                                   GHC.Storable.writeWord64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CIno))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CIno[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word64
                                               -> Int
                                               -> Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CIno -> Int -> CIno -> IO () :: *))
                                   Foreign.Storable.$fStorableWord18
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CIno[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word64 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CIno :: *))
                                   Foreign.Storable.$fStorableWord17
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CIno[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> CIno -> IO () :: *))
                                   Foreign.Storable.$fStorableWord15
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CIno))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CIno[0]))
                                           :: (Ptr Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word64 #) :: *)
                                              ~R# (Ptr CIno -> IO CIno :: *))
                                   Foreign.Storable.$fStorableWord14
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CIno))_R
                                           ->_R Sym (System.Posix.Types.N:CIno[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word64
                                               -> Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CIno -> CIno -> IO () :: *))]
System.Posix.Types.$fStorableCIno
  = Foreign.Storable.C:Storable
      @ CIno
      (Foreign.Storable.$fStorableWord64_$calignment
       `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CIno -> Int :: *)))
      (Foreign.Storable.$fStorableWord64_$calignment
       `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CIno -> Int :: *)))
      (GHC.Storable.readWord64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CIno))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CIno[0]))
               :: (Ptr Word64
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                  ~R# (Ptr CIno -> Int -> IO CIno :: *)))
      (GHC.Storable.writeWord64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CIno))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word64
                   -> Int
                   -> Word64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CIno -> Int -> CIno -> IO () :: *)))
      (Foreign.Storable.$fStorableWord18
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CIno[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CIno :: *)))
      (Foreign.Storable.$fStorableWord17
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Word64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CIno -> IO () :: *)))
      (Foreign.Storable.$fStorableWord15
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CIno))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CIno[0]))
               :: (Ptr Word64
                   -> State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                  ~R# (Ptr CIno -> IO CIno :: *)))
      (Foreign.Storable.$fStorableWord14
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CIno))_R
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word64
                   -> Word64 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CIno -> CIno -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCIno [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CIno
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CIno
                       GHC.Word.$fEnumWord64_$csucc
                       `cast` (Sym (System.Posix.Types.N:CIno[0])
                               ->_R Sym (System.Posix.Types.N:CIno[0])
                               :: (Word64 -> Word64 :: *) ~R# (CIno -> CIno :: *))
                       GHC.Word.$fEnumWord64_$cpred
                       `cast` (Sym (System.Posix.Types.N:CIno[0])
                               ->_R Sym (System.Posix.Types.N:CIno[0])
                               :: (Word64 -> Word64 :: *) ~R# (CIno -> CIno :: *))
                       GHC.Word.$fEnumWord64_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CIno[0])
                               :: (Int -> Word64 :: *) ~R# (Int -> CIno :: *))
                       GHC.Word.$fEnumWord64_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Int>_R
                               :: (Word64 -> Int :: *) ~R# (CIno -> Int :: *))
                       GHC.Word.$fEnumWord64_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CIno[0])
                               ->_R ([Sym (System.Posix.Types.N:CIno[0])])_R
                               :: (Word64 -> [Word64] :: *) ~R# (CIno -> [CIno] :: *))
                       GHC.Word.$fEnumWord64_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CIno[0])
                               ->_R Sym (System.Posix.Types.N:CIno[0])
                               ->_R ([Sym (System.Posix.Types.N:CIno[0])])_R
                               :: (Word64 -> Word64 -> [Word64] :: *)
                                  ~R# (CIno -> CIno -> [CIno] :: *))
                       GHC.Word.$fEnumWord64_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CIno[0])
                               ->_R Sym (System.Posix.Types.N:CIno[0])
                               ->_R ([Sym (System.Posix.Types.N:CIno[0])])_R
                               :: (Word64 -> Word64 -> [Word64] :: *)
                                  ~R# (CIno -> CIno -> [CIno] :: *))
                       GHC.Word.$fEnumWord64_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CIno[0])
                               ->_R Sym (System.Posix.Types.N:CIno[0])
                               ->_R Sym (System.Posix.Types.N:CIno[0])
                               ->_R ([Sym (System.Posix.Types.N:CIno[0])])_R
                               :: (Word64 -> Word64 -> Word64 -> [Word64] :: *)
                                  ~R# (CIno -> CIno -> CIno -> [CIno] :: *))]
System.Posix.Types.$fEnumCIno
  = GHC.Enum.C:Enum
      @ CIno
      (GHC.Word.$fEnumWord64_$csucc
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Word64 :: *) ~R# (CIno -> CIno :: *)))
      (GHC.Word.$fEnumWord64_$cpred
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Word64 :: *) ~R# (CIno -> CIno :: *)))
      (GHC.Word.$fEnumWord64_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Int -> Word64 :: *) ~R# (Int -> CIno :: *)))
      (GHC.Word.$fEnumWord64_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CIno -> Int :: *)))
      (GHC.Word.$fEnumWord64_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R ([Sym (System.Posix.Types.N:CIno[0])])_R
               :: (Word64 -> [Word64] :: *) ~R# (CIno -> [CIno] :: *)))
      (GHC.Word.$fEnumWord64_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R ([Sym (System.Posix.Types.N:CIno[0])])_R
               :: (Word64 -> Word64 -> [Word64] :: *)
                  ~R# (CIno -> CIno -> [CIno] :: *)))
      (GHC.Word.$fEnumWord64_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R ([Sym (System.Posix.Types.N:CIno[0])])_R
               :: (Word64 -> Word64 -> [Word64] :: *)
                  ~R# (CIno -> CIno -> [CIno] :: *)))
      (GHC.Word.$fEnumWord64_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R ([Sym (System.Posix.Types.N:CIno[0])])_R
               :: (Word64 -> Word64 -> Word64 -> [Word64] :: *)
                  ~R# (CIno -> CIno -> CIno -> [CIno] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCIno [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CIno
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CIno
                     GHC.Word.$fNumWord64_$c+
                     `cast` (Sym (System.Posix.Types.N:CIno[0])
                             ->_R Sym (System.Posix.Types.N:CIno[0])
                             ->_R Sym (System.Posix.Types.N:CIno[0])
                             :: (Word64 -> Word64 -> Word64 :: *)
                                ~R# (CIno -> CIno -> CIno :: *))
                     GHC.Word.$fNumWord64_$c-
                     `cast` (Sym (System.Posix.Types.N:CIno[0])
                             ->_R Sym (System.Posix.Types.N:CIno[0])
                             ->_R Sym (System.Posix.Types.N:CIno[0])
                             :: (Word64 -> Word64 -> Word64 :: *)
                                ~R# (CIno -> CIno -> CIno :: *))
                     GHC.Word.$fNumWord64_$c*
                     `cast` (Sym (System.Posix.Types.N:CIno[0])
                             ->_R Sym (System.Posix.Types.N:CIno[0])
                             ->_R Sym (System.Posix.Types.N:CIno[0])
                             :: (Word64 -> Word64 -> Word64 :: *)
                                ~R# (CIno -> CIno -> CIno :: *))
                     GHC.Word.$fNumWord64_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CIno[0])
                             ->_R Sym (System.Posix.Types.N:CIno[0])
                             :: (Word64 -> Word64 :: *) ~R# (CIno -> CIno :: *))
                     GHC.Word.$fNumWord64_$cabs
                     `cast` (Sym (System.Posix.Types.N:CIno[0])
                             ->_R Sym (System.Posix.Types.N:CIno[0])
                             :: (Word64 -> Word64 :: *) ~R# (CIno -> CIno :: *))
                     GHC.Word.$fNumWord64_$csignum
                     `cast` (Sym (System.Posix.Types.N:CIno[0])
                             ->_R Sym (System.Posix.Types.N:CIno[0])
                             :: (Word64 -> Word64 :: *) ~R# (CIno -> CIno :: *))
                     GHC.Word.$fNumWord64_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CIno[0])
                             :: (Integer -> Word64 :: *) ~R# (Integer -> CIno :: *))]
System.Posix.Types.$fNumCIno
  = GHC.Num.C:Num
      @ CIno
      (GHC.Word.$fNumWord64_$c+
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CIno -> CIno -> CIno :: *)))
      (GHC.Word.$fNumWord64_$c-
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CIno -> CIno -> CIno :: *)))
      (GHC.Word.$fNumWord64_$c*
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CIno -> CIno -> CIno :: *)))
      (GHC.Word.$fNumWord64_$cnegate
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Word64 :: *) ~R# (CIno -> CIno :: *)))
      (GHC.Word.$fNumWord64_$cabs
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Word64 :: *) ~R# (CIno -> CIno :: *)))
      (GHC.Word.$fNumWord64_$csignum
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Word64 :: *) ~R# (CIno -> CIno :: *)))
      (GHC.Word.$fNumWord64_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Integer -> Word64 :: *) ~R# (Integer -> CIno :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCIno [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CIno
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CIno
                        GHC.Word.eqWord64
                        `cast` (Sym (System.Posix.Types.N:CIno[0])
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                ->_R <Bool>_R
                                :: (Word64 -> Word64 -> Bool :: *) ~R# (CIno -> CIno -> Bool :: *))
                        GHC.Word.neWord64
                        `cast` (Sym (System.Posix.Types.N:CIno[0])
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                ->_R <Bool>_R
                                :: (Word64 -> Word64 -> Bool :: *)
                                   ~R# (CIno -> CIno -> Bool :: *))]
System.Posix.Types.$fEqCIno
  = GHC.Classes.C:Eq
      @ CIno
      (GHC.Word.eqWord64
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CIno -> CIno -> Bool :: *)))
      (GHC.Word.neWord64
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CIno -> CIno -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCIno [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CIno
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CIno
                         System.Posix.Types.$fEqCIno
                         GHC.Word.$fOrdWord64_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CIno[0])
                                 ->_R Sym (System.Posix.Types.N:CIno[0])
                                 ->_R <Ordering>_R
                                 :: (Word64 -> Word64 -> Ordering :: *)
                                    ~R# (CIno -> CIno -> Ordering :: *))
                         GHC.Word.ltWord64
                         `cast` (Sym (System.Posix.Types.N:CIno[0])
                                 ->_R Sym (System.Posix.Types.N:CIno[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *) ~R# (CIno -> CIno -> Bool :: *))
                         GHC.Word.leWord64
                         `cast` (Sym (System.Posix.Types.N:CIno[0])
                                 ->_R Sym (System.Posix.Types.N:CIno[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *) ~R# (CIno -> CIno -> Bool :: *))
                         GHC.Word.gtWord64
                         `cast` (Sym (System.Posix.Types.N:CIno[0])
                                 ->_R Sym (System.Posix.Types.N:CIno[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *) ~R# (CIno -> CIno -> Bool :: *))
                         GHC.Word.geWord64
                         `cast` (Sym (System.Posix.Types.N:CIno[0])
                                 ->_R Sym (System.Posix.Types.N:CIno[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *) ~R# (CIno -> CIno -> Bool :: *))
                         GHC.Word.$fOrdWord64_$cmax
                         `cast` (Sym (System.Posix.Types.N:CIno[0])
                                 ->_R Sym (System.Posix.Types.N:CIno[0])
                                 ->_R Sym (System.Posix.Types.N:CIno[0])
                                 :: (Word64 -> Word64 -> Word64 :: *)
                                    ~R# (CIno -> CIno -> CIno :: *))
                         GHC.Word.$fOrdWord64_$cmin
                         `cast` (Sym (System.Posix.Types.N:CIno[0])
                                 ->_R Sym (System.Posix.Types.N:CIno[0])
                                 ->_R Sym (System.Posix.Types.N:CIno[0])
                                 :: (Word64 -> Word64 -> Word64 :: *)
                                    ~R# (CIno -> CIno -> CIno :: *))]
System.Posix.Types.$fOrdCIno
  = GHC.Classes.C:Ord
      @ CIno
      System.Posix.Types.$fEqCIno
      (GHC.Word.$fOrdWord64_$ccompare
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R <Ordering>_R
               :: (Word64 -> Word64 -> Ordering :: *)
                  ~R# (CIno -> CIno -> Ordering :: *)))
      (GHC.Word.ltWord64
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CIno -> CIno -> Bool :: *)))
      (GHC.Word.leWord64
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CIno -> CIno -> Bool :: *)))
      (GHC.Word.gtWord64
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CIno -> CIno -> Bool :: *)))
      (GHC.Word.geWord64
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CIno -> CIno -> Bool :: *)))
      (GHC.Word.$fOrdWord64_$cmax
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CIno -> CIno -> CIno :: *)))
      (GHC.Word.$fOrdWord64_$cmin
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CIno -> CIno -> CIno :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCIno [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CIno
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CIno
                       System.Posix.Types.$fNumCIno
                       System.Posix.Types.$fOrdCIno
                       GHC.Word.$fRealWord64_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Ratio Integer>_R
                               :: (Word64 -> Ratio Integer :: *)
                                  ~R# (CIno -> Ratio Integer :: *))]
System.Posix.Types.$fRealCIno
  = GHC.Real.C:Real
      @ CIno
      System.Posix.Types.$fNumCIno
      System.Posix.Types.$fOrdCIno
      (GHC.Word.$fRealWord64_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Ratio Integer>_R
               :: (Word64 -> Ratio Integer :: *)
                  ~R# (CIno -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 58, joins: 0/0}
System.Posix.Types.$fIntegralCIno [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral CIno
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: CIno
                           System.Posix.Types.$fRealCIno
                           System.Posix.Types.$fEnumCIno
                           GHC.Word.$fIntegralWord64_$cdiv
                           `cast` (Sym (System.Posix.Types.N:CIno[0])
                                   ->_R Sym (System.Posix.Types.N:CIno[0])
                                   ->_R Sym (System.Posix.Types.N:CIno[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CIno -> CIno -> CIno :: *))
                           GHC.Word.$fIntegralWord64_$cmod
                           `cast` (Sym (System.Posix.Types.N:CIno[0])
                                   ->_R Sym (System.Posix.Types.N:CIno[0])
                                   ->_R Sym (System.Posix.Types.N:CIno[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CIno -> CIno -> CIno :: *))
                           GHC.Word.$fIntegralWord64_$cdiv
                           `cast` (Sym (System.Posix.Types.N:CIno[0])
                                   ->_R Sym (System.Posix.Types.N:CIno[0])
                                   ->_R Sym (System.Posix.Types.N:CIno[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CIno -> CIno -> CIno :: *))
                           GHC.Word.$fIntegralWord64_$cmod
                           `cast` (Sym (System.Posix.Types.N:CIno[0])
                                   ->_R Sym (System.Posix.Types.N:CIno[0])
                                   ->_R Sym (System.Posix.Types.N:CIno[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CIno -> CIno -> CIno :: *))
                           GHC.Word.$fIntegralWord64_$cquotRem
                           `cast` (Sym (System.Posix.Types.N:CIno[0])
                                   ->_R Sym (System.Posix.Types.N:CIno[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CIno[0]))
                                           (Sym (System.Posix.Types.N:CIno[0])))_R
                                   :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                                      ~R# (CIno -> CIno -> (CIno, CIno) :: *))
                           GHC.Word.$fIntegralWord64_$cdivMod
                           `cast` (Sym (System.Posix.Types.N:CIno[0])
                                   ->_R Sym (System.Posix.Types.N:CIno[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CIno[0]))
                                           (Sym (System.Posix.Types.N:CIno[0])))_R
                                   :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                                      ~R# (CIno -> CIno -> (CIno, CIno) :: *))
                           GHC.Word.$fIntegralWord64_$ctoInteger
                           `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Integer>_R
                                   :: (Word64 -> Integer :: *) ~R# (CIno -> Integer :: *))]
System.Posix.Types.$fIntegralCIno
  = GHC.Real.C:Integral
      @ CIno
      System.Posix.Types.$fRealCIno
      System.Posix.Types.$fEnumCIno
      (GHC.Word.$fIntegralWord64_$cdiv
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CIno -> CIno -> CIno :: *)))
      (GHC.Word.$fIntegralWord64_$cmod
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CIno -> CIno -> CIno :: *)))
      (GHC.Word.$fIntegralWord64_$cdiv
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CIno -> CIno -> CIno :: *)))
      (GHC.Word.$fIntegralWord64_$cmod
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CIno -> CIno -> CIno :: *)))
      (GHC.Word.$fIntegralWord64_$cquotRem
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CIno[0]))
                       (Sym (System.Posix.Types.N:CIno[0])))_R
               :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                  ~R# (CIno -> CIno -> (CIno, CIno) :: *)))
      (GHC.Word.$fIntegralWord64_$cdivMod
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CIno[0]))
                       (Sym (System.Posix.Types.N:CIno[0])))_R
               :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                  ~R# (CIno -> CIno -> (CIno, CIno) :: *)))
      (GHC.Word.$fIntegralWord64_$ctoInteger
       `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Integer>_R
               :: (Word64 -> Integer :: *) ~R# (CIno -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
System.Posix.Types.$fBitsCIno [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits CIno
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: CIno
                        System.Posix.Types.$fEqCIno
                        GHC.Word.$fBitsWord64_$c.&.
                        `cast` (Sym (System.Posix.Types.N:CIno[0])
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                :: (Word64 -> Word64 -> Word64 :: *)
                                   ~R# (CIno -> CIno -> CIno :: *))
                        GHC.Word.$fBitsWord64_$c.|.
                        `cast` (Sym (System.Posix.Types.N:CIno[0])
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                :: (Word64 -> Word64 -> Word64 :: *)
                                   ~R# (CIno -> CIno -> CIno :: *))
                        GHC.Word.$fBitsWord64_$cxor
                        `cast` (Sym (System.Posix.Types.N:CIno[0])
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                :: (Word64 -> Word64 -> Word64 :: *)
                                   ~R# (CIno -> CIno -> CIno :: *))
                        GHC.Word.$fBitsWord64_$ccomplement
                        `cast` (Sym (System.Posix.Types.N:CIno[0])
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                :: (Word64 -> Word64 :: *) ~R# (CIno -> CIno :: *))
                        GHC.Word.$fBitsWord64_$cshift
                        `cast` (Sym (System.Posix.Types.N:CIno[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *))
                        GHC.Word.$fBitsWord64_$crotate
                        `cast` (Sym (System.Posix.Types.N:CIno[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *))
                        GHC.Word.$fBitsWord7
                        `cast` (Sym (System.Posix.Types.N:CIno[0])
                                :: (Word64 :: *) ~R# (CIno :: *))
                        GHC.Word.$fBitsWord64_$cbit
                        `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CIno[0])
                                :: (Int -> Word64 :: *) ~R# (Int -> CIno :: *))
                        GHC.Word.$fBitsWord64_$csetBit
                        `cast` (Sym (System.Posix.Types.N:CIno[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *))
                        GHC.Word.$fBitsWord64_$cclearBit
                        `cast` (Sym (System.Posix.Types.N:CIno[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *))
                        GHC.Word.$fBitsWord64_$ccomplementBit
                        `cast` (Sym (System.Posix.Types.N:CIno[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *))
                        GHC.Word.$fBitsWord64_$ctestBit
                        `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Int -> Bool>_R
                                :: (Word64 -> Int -> Bool :: *) ~R# (CIno -> Int -> Bool :: *))
                        GHC.Word.$fBitsWord64_$cbitSizeMaybe
                        `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Maybe Int>_R
                                :: (Word64 -> Maybe Int :: *) ~R# (CIno -> Maybe Int :: *))
                        GHC.Word.$fBitsWord64_$cfiniteBitSize
                        `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Int>_R
                                :: (Word64 -> Int :: *) ~R# (CIno -> Int :: *))
                        GHC.Word.$fBitsWord64_$cisSigned
                        `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Bool>_R
                                :: (Word64 -> Bool :: *) ~R# (CIno -> Bool :: *))
                        GHC.Word.$fBitsWord64_$cshiftL
                        `cast` (Sym (System.Posix.Types.N:CIno[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *))
                        GHC.Word.$fBitsWord64_$cunsafeShiftL
                        `cast` (Sym (System.Posix.Types.N:CIno[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *))
                        GHC.Word.$fBitsWord64_$cshiftR
                        `cast` (Sym (System.Posix.Types.N:CIno[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *))
                        GHC.Word.$fBitsWord64_$cunsafeShiftR
                        `cast` (Sym (System.Posix.Types.N:CIno[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *))
                        GHC.Word.$fBitsWord64_$crotateL
                        `cast` (Sym (System.Posix.Types.N:CIno[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *))
                        GHC.Word.$fBitsWord64_$crotateR
                        `cast` (Sym (System.Posix.Types.N:CIno[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CIno[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *))
                        GHC.Word.$fBitsWord64_$cpopCount
                        `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Int>_R
                                :: (Word64 -> Int :: *) ~R# (CIno -> Int :: *))]
System.Posix.Types.$fBitsCIno
  = Data.Bits.C:Bits
      @ CIno
      System.Posix.Types.$fEqCIno
      (GHC.Word.$fBitsWord64_$c.&.
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CIno -> CIno -> CIno :: *)))
      (GHC.Word.$fBitsWord64_$c.|.
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CIno -> CIno -> CIno :: *)))
      (GHC.Word.$fBitsWord64_$cxor
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CIno -> CIno -> CIno :: *)))
      (GHC.Word.$fBitsWord64_$ccomplement
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Word64 :: *) ~R# (CIno -> CIno :: *)))
      (GHC.Word.$fBitsWord64_$cshift
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *)))
      (GHC.Word.$fBitsWord64_$crotate
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *)))
      (GHC.Word.$fBitsWord7
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 :: *) ~R# (CIno :: *)))
      (GHC.Word.$fBitsWord64_$cbit
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Int -> Word64 :: *) ~R# (Int -> CIno :: *)))
      (GHC.Word.$fBitsWord64_$csetBit
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *)))
      (GHC.Word.$fBitsWord64_$cclearBit
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *)))
      (GHC.Word.$fBitsWord64_$ccomplementBit
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *)))
      (GHC.Word.$fBitsWord64_$ctestBit
       `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Int -> Bool>_R
               :: (Word64 -> Int -> Bool :: *) ~R# (CIno -> Int -> Bool :: *)))
      (GHC.Word.$fBitsWord64_$cbitSizeMaybe
       `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Maybe Int>_R
               :: (Word64 -> Maybe Int :: *) ~R# (CIno -> Maybe Int :: *)))
      (GHC.Word.$fBitsWord64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CIno -> Int :: *)))
      (GHC.Word.$fBitsWord64_$cisSigned
       `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Bool>_R
               :: (Word64 -> Bool :: *) ~R# (CIno -> Bool :: *)))
      (GHC.Word.$fBitsWord64_$cshiftL
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *)))
      (GHC.Word.$fBitsWord64_$cunsafeShiftL
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *)))
      (GHC.Word.$fBitsWord64_$cshiftR
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *)))
      (GHC.Word.$fBitsWord64_$cunsafeShiftR
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *)))
      (GHC.Word.$fBitsWord64_$crotateL
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *)))
      (GHC.Word.$fBitsWord64_$crotateR
       `cast` (Sym (System.Posix.Types.N:CIno[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CIno[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CIno -> Int -> CIno :: *)))
      (GHC.Word.$fBitsWord64_$cpopCount
       `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CIno -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
System.Posix.Types.$fFiniteBitsCIno [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits CIno
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: CIno
                              System.Posix.Types.$fBitsCIno
                              GHC.Word.$fBitsWord64_$cfiniteBitSize
                              `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Int>_R
                                      :: (Word64 -> Int :: *) ~R# (CIno -> Int :: *))
                              GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                              `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Int>_R
                                      :: (Word64 -> Int :: *) ~R# (CIno -> Int :: *))
                              GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                              `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Int>_R
                                      :: (Word64 -> Int :: *) ~R# (CIno -> Int :: *))]
System.Posix.Types.$fFiniteBitsCIno
  = Data.Bits.C:FiniteBits
      @ CIno
      System.Posix.Types.$fBitsCIno
      (GHC.Word.$fBitsWord64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CIno -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
       `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CIno -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
       `cast` (Sym (System.Posix.Types.N:CIno[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CIno -> Int :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 22, joins: 0/0}
System.Posix.Types.$fShowCDev [InlPrag=NOUSERINLINE CONLIKE]
  :: Show CDev
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: CDev
                       GHC.Word.$fShowWord64_$cshowsPrec
                       `cast` (<Int>_R
                               ->_R Sym (System.Posix.Types.N:CDev[0])
                               ->_R <[Char] -> [Char]>_R
                               :: (Int -> Word64 -> [Char] -> [Char] :: *)
                                  ~R# (Int -> CDev -> [Char] -> [Char] :: *))
                       GHC.Word.$fShowWord64_$cshow
                       `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <[Char]>_R
                               :: (Word64 -> [Char] :: *) ~R# (CDev -> [Char] :: *))
                       GHC.Word.$fShowWord64_$cshowList
                       `cast` (([Sym (System.Posix.Types.N:CDev[0])])_R
                               ->_R <[Char] -> [Char]>_R
                               :: ([Word64] -> [Char] -> [Char] :: *)
                                  ~R# ([CDev] -> [Char] -> [Char] :: *))]
System.Posix.Types.$fShowCDev
  = GHC.Show.C:Show
      @ CDev
      (GHC.Word.$fShowWord64_$cshowsPrec
       `cast` (<Int>_R
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R <[Char] -> [Char]>_R
               :: (Int -> Word64 -> [Char] -> [Char] :: *)
                  ~R# (Int -> CDev -> [Char] -> [Char] :: *)))
      (GHC.Word.$fShowWord64_$cshow
       `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <[Char]>_R
               :: (Word64 -> [Char] :: *) ~R# (CDev -> [Char] :: *)))
      (GHC.Word.$fShowWord64_$cshowList
       `cast` (([Sym (System.Posix.Types.N:CDev[0])])_R
               ->_R <[Char] -> [Char]>_R
               :: ([Word64] -> [Char] -> [Char] :: *)
                  ~R# ([CDev] -> [Char] -> [Char] :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 41, joins: 0/0}
System.Posix.Types.$fReadCDev [InlPrag=NOUSERINLINE CONLIKE]
  :: Read CDev
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: CDev
                       GHC.Read.$fReadWord64_$creadsPrec
                       `cast` (<Int>_R
                               ->_R <[Char]>_R
                               ->_R ([((,) (Sym (System.Posix.Types.N:CDev[0])) <[Char]>_R)_R])_R
                               :: (Int -> [Char] -> [(Word64, [Char])] :: *)
                                  ~R# (Int -> [Char] -> [(CDev, [Char])] :: *))
                       GHC.Read.$fReadWord64_$creadList
                       `cast` (<[Char]>_R
                               ->_R ([((,)
                                         ([Sym (System.Posix.Types.N:CDev[0])])_R <[Char]>_R)_R])_R
                               :: ([Char] -> [([Word64], [Char])] :: *)
                                  ~R# ([Char] -> [([CDev], [Char])] :: *))
                       GHC.Read.$fReadWord13
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <Word64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                      (System.Posix.Types.N:CDev[0]))
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (Word64 -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CDev :: *))
                       GHC.Read.$fReadWord11
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[Word64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        ([System.Posix.Types.N:CDev[0]])_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([Word64] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CDev] :: *))]
System.Posix.Types.$fReadCDev
  = GHC.Read.C:Read
      @ CDev
      (GHC.Read.$fReadWord64_$creadsPrec
       `cast` (<Int>_R
               ->_R <[Char]>_R
               ->_R ([((,) (Sym (System.Posix.Types.N:CDev[0])) <[Char]>_R)_R])_R
               :: (Int -> [Char] -> [(Word64, [Char])] :: *)
                  ~R# (Int -> [Char] -> [(CDev, [Char])] :: *)))
      (GHC.Read.$fReadWord64_$creadList
       `cast` (<[Char]>_R
               ->_R ([((,)
                         ([Sym (System.Posix.Types.N:CDev[0])])_R <[Char]>_R)_R])_R
               :: ([Char] -> [([Word64], [Char])] :: *)
                  ~R# ([Char] -> [([CDev], [Char])] :: *)))
      (GHC.Read.$fReadWord13
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <Word64>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      (System.Posix.Types.N:CDev[0]))
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (Word64 -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec CDev :: *)))
      (GHC.Read.$fReadWord11
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[Word64]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        ([System.Posix.Types.N:CDev[0]])_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([Word64] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [CDev] :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
System.Posix.Types.$fBoundedCDev [InlPrag=NOUSERINLINE CONLIKE]
  :: Bounded CDev
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Bounded TYPE: CDev
                          GHC.Word.$fBitsWord7
                          `cast` (Sym (System.Posix.Types.N:CDev[0])
                                  :: (Word64 :: *) ~R# (CDev :: *))
                          GHC.Word.$fBoundedWord64_$cmaxBound
                          `cast` (Sym (System.Posix.Types.N:CDev[0])
                                  :: (Word64 :: *) ~R# (CDev :: *))]
System.Posix.Types.$fBoundedCDev
  = GHC.Enum.C:Bounded
      @ CDev
      (GHC.Word.$fBitsWord7
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 :: *) ~R# (CDev :: *)))
      (GHC.Word.$fBoundedWord64_$cmaxBound
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 :: *) ~R# (CDev :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 87, joins: 0/0}
System.Posix.Types.$fStorableCDev [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable CDev
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: CDev
                                   Foreign.Storable.$fStorableWord64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Int>_R
                                           :: (Word64 -> Int :: *) ~R# (CDev -> Int :: *))
                                   Foreign.Storable.$fStorableWord64_$calignment
                                   `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Int>_R
                                           :: (Word64 -> Int :: *) ~R# (CDev -> Int :: *))
                                   GHC.Storable.readWord64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CDev))_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CDev[0]))
                                           :: (Ptr Word64
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word64 #) :: *)
                                              ~R# (Ptr CDev -> Int -> IO CDev :: *))
                                   GHC.Storable.writeWord64OffPtr1
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CDev))_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CDev[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word64
                                               -> Int
                                               -> Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CDev -> Int -> CDev -> IO () :: *))
                                   Foreign.Storable.$fStorableWord18
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CDev[0]))
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word64 #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO CDev :: *))
                                   Foreign.Storable.$fStorableWord17
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (System.Posix.Types.N:CDev[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> CDev -> IO () :: *))
                                   Foreign.Storable.$fStorableWord15
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CDev))_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         (System.Posix.Types.N:CDev[0]))
                                           :: (Ptr Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Word64 #) :: *)
                                              ~R# (Ptr CDev -> IO CDev :: *))
                                   Foreign.Storable.$fStorableWord14
                                   `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CDev))_R
                                           ->_R Sym (System.Posix.Types.N:CDev[0])
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Word64
                                               -> Word64
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr CDev -> CDev -> IO () :: *))]
System.Posix.Types.$fStorableCDev
  = Foreign.Storable.C:Storable
      @ CDev
      (Foreign.Storable.$fStorableWord64_$calignment
       `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CDev -> Int :: *)))
      (Foreign.Storable.$fStorableWord64_$calignment
       `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CDev -> Int :: *)))
      (GHC.Storable.readWord64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CDev))_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CDev[0]))
               :: (Ptr Word64
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                  ~R# (Ptr CDev -> Int -> IO CDev :: *)))
      (GHC.Storable.writeWord64OffPtr1
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CDev))_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word64
                   -> Int
                   -> Word64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CDev -> Int -> CDev -> IO () :: *)))
      (Foreign.Storable.$fStorableWord18
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CDev[0]))
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO CDev :: *)))
      (Foreign.Storable.$fStorableWord17
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Word64
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> CDev -> IO () :: *)))
      (Foreign.Storable.$fStorableWord15
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CDev))_R
               ->_R Sym (GHC.Types.N:IO[0] (System.Posix.Types.N:CDev[0]))
               :: (Ptr Word64
                   -> State# RealWorld -> (# State# RealWorld, Word64 #) :: *)
                  ~R# (Ptr CDev -> IO CDev :: *)))
      (Foreign.Storable.$fStorableWord14
       `cast` ((Ptr Univ(phantom phantom <*>_N :: Word64, CDev))_R
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Word64
                   -> Word64 -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr CDev -> CDev -> IO () :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 54, joins: 0/0}
System.Posix.Types.$fEnumCDev [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum CDev
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: CDev
                       GHC.Word.$fEnumWord64_$csucc
                       `cast` (Sym (System.Posix.Types.N:CDev[0])
                               ->_R Sym (System.Posix.Types.N:CDev[0])
                               :: (Word64 -> Word64 :: *) ~R# (CDev -> CDev :: *))
                       GHC.Word.$fEnumWord64_$cpred
                       `cast` (Sym (System.Posix.Types.N:CDev[0])
                               ->_R Sym (System.Posix.Types.N:CDev[0])
                               :: (Word64 -> Word64 :: *) ~R# (CDev -> CDev :: *))
                       GHC.Word.$fEnumWord64_$ctoEnum
                       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CDev[0])
                               :: (Int -> Word64 :: *) ~R# (Int -> CDev :: *))
                       GHC.Word.$fEnumWord64_$cfromEnum
                       `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Int>_R
                               :: (Word64 -> Int :: *) ~R# (CDev -> Int :: *))
                       GHC.Word.$fEnumWord64_$cenumFrom
                       `cast` (Sym (System.Posix.Types.N:CDev[0])
                               ->_R ([Sym (System.Posix.Types.N:CDev[0])])_R
                               :: (Word64 -> [Word64] :: *) ~R# (CDev -> [CDev] :: *))
                       GHC.Word.$fEnumWord64_$cenumFromThen
                       `cast` (Sym (System.Posix.Types.N:CDev[0])
                               ->_R Sym (System.Posix.Types.N:CDev[0])
                               ->_R ([Sym (System.Posix.Types.N:CDev[0])])_R
                               :: (Word64 -> Word64 -> [Word64] :: *)
                                  ~R# (CDev -> CDev -> [CDev] :: *))
                       GHC.Word.$fEnumWord64_$cenumFromTo
                       `cast` (Sym (System.Posix.Types.N:CDev[0])
                               ->_R Sym (System.Posix.Types.N:CDev[0])
                               ->_R ([Sym (System.Posix.Types.N:CDev[0])])_R
                               :: (Word64 -> Word64 -> [Word64] :: *)
                                  ~R# (CDev -> CDev -> [CDev] :: *))
                       GHC.Word.$fEnumWord64_$cenumFromThenTo
                       `cast` (Sym (System.Posix.Types.N:CDev[0])
                               ->_R Sym (System.Posix.Types.N:CDev[0])
                               ->_R Sym (System.Posix.Types.N:CDev[0])
                               ->_R ([Sym (System.Posix.Types.N:CDev[0])])_R
                               :: (Word64 -> Word64 -> Word64 -> [Word64] :: *)
                                  ~R# (CDev -> CDev -> CDev -> [CDev] :: *))]
System.Posix.Types.$fEnumCDev
  = GHC.Enum.C:Enum
      @ CDev
      (GHC.Word.$fEnumWord64_$csucc
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Word64 :: *) ~R# (CDev -> CDev :: *)))
      (GHC.Word.$fEnumWord64_$cpred
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Word64 :: *) ~R# (CDev -> CDev :: *)))
      (GHC.Word.$fEnumWord64_$ctoEnum
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Int -> Word64 :: *) ~R# (Int -> CDev :: *)))
      (GHC.Word.$fEnumWord64_$cfromEnum
       `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CDev -> Int :: *)))
      (GHC.Word.$fEnumWord64_$cenumFrom
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R ([Sym (System.Posix.Types.N:CDev[0])])_R
               :: (Word64 -> [Word64] :: *) ~R# (CDev -> [CDev] :: *)))
      (GHC.Word.$fEnumWord64_$cenumFromThen
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R ([Sym (System.Posix.Types.N:CDev[0])])_R
               :: (Word64 -> Word64 -> [Word64] :: *)
                  ~R# (CDev -> CDev -> [CDev] :: *)))
      (GHC.Word.$fEnumWord64_$cenumFromTo
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R ([Sym (System.Posix.Types.N:CDev[0])])_R
               :: (Word64 -> Word64 -> [Word64] :: *)
                  ~R# (CDev -> CDev -> [CDev] :: *)))
      (GHC.Word.$fEnumWord64_$cenumFromThenTo
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R ([Sym (System.Posix.Types.N:CDev[0])])_R
               :: (Word64 -> Word64 -> Word64 -> [Word64] :: *)
                  ~R# (CDev -> CDev -> CDev -> [CDev] :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
System.Posix.Types.$fNumCDev [InlPrag=NOUSERINLINE CONLIKE]
  :: Num CDev
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: CDev
                     GHC.Word.$fNumWord64_$c+
                     `cast` (Sym (System.Posix.Types.N:CDev[0])
                             ->_R Sym (System.Posix.Types.N:CDev[0])
                             ->_R Sym (System.Posix.Types.N:CDev[0])
                             :: (Word64 -> Word64 -> Word64 :: *)
                                ~R# (CDev -> CDev -> CDev :: *))
                     GHC.Word.$fNumWord64_$c-
                     `cast` (Sym (System.Posix.Types.N:CDev[0])
                             ->_R Sym (System.Posix.Types.N:CDev[0])
                             ->_R Sym (System.Posix.Types.N:CDev[0])
                             :: (Word64 -> Word64 -> Word64 :: *)
                                ~R# (CDev -> CDev -> CDev :: *))
                     GHC.Word.$fNumWord64_$c*
                     `cast` (Sym (System.Posix.Types.N:CDev[0])
                             ->_R Sym (System.Posix.Types.N:CDev[0])
                             ->_R Sym (System.Posix.Types.N:CDev[0])
                             :: (Word64 -> Word64 -> Word64 :: *)
                                ~R# (CDev -> CDev -> CDev :: *))
                     GHC.Word.$fNumWord64_$cnegate
                     `cast` (Sym (System.Posix.Types.N:CDev[0])
                             ->_R Sym (System.Posix.Types.N:CDev[0])
                             :: (Word64 -> Word64 :: *) ~R# (CDev -> CDev :: *))
                     GHC.Word.$fNumWord64_$cabs
                     `cast` (Sym (System.Posix.Types.N:CDev[0])
                             ->_R Sym (System.Posix.Types.N:CDev[0])
                             :: (Word64 -> Word64 :: *) ~R# (CDev -> CDev :: *))
                     GHC.Word.$fNumWord64_$csignum
                     `cast` (Sym (System.Posix.Types.N:CDev[0])
                             ->_R Sym (System.Posix.Types.N:CDev[0])
                             :: (Word64 -> Word64 :: *) ~R# (CDev -> CDev :: *))
                     GHC.Word.$fNumWord64_$cfromInteger
                     `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CDev[0])
                             :: (Integer -> Word64 :: *) ~R# (Integer -> CDev :: *))]
System.Posix.Types.$fNumCDev
  = GHC.Num.C:Num
      @ CDev
      (GHC.Word.$fNumWord64_$c+
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CDev -> CDev -> CDev :: *)))
      (GHC.Word.$fNumWord64_$c-
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CDev -> CDev -> CDev :: *)))
      (GHC.Word.$fNumWord64_$c*
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CDev -> CDev -> CDev :: *)))
      (GHC.Word.$fNumWord64_$cnegate
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Word64 :: *) ~R# (CDev -> CDev :: *)))
      (GHC.Word.$fNumWord64_$cabs
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Word64 :: *) ~R# (CDev -> CDev :: *)))
      (GHC.Word.$fNumWord64_$csignum
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Word64 :: *) ~R# (CDev -> CDev :: *)))
      (GHC.Word.$fNumWord64_$cfromInteger
       `cast` (<Integer>_R ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Integer -> Word64 :: *) ~R# (Integer -> CDev :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
System.Posix.Types.$fEqCDev [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq CDev
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: CDev
                        GHC.Word.eqWord64
                        `cast` (Sym (System.Posix.Types.N:CDev[0])
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                ->_R <Bool>_R
                                :: (Word64 -> Word64 -> Bool :: *) ~R# (CDev -> CDev -> Bool :: *))
                        GHC.Word.neWord64
                        `cast` (Sym (System.Posix.Types.N:CDev[0])
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                ->_R <Bool>_R
                                :: (Word64 -> Word64 -> Bool :: *)
                                   ~R# (CDev -> CDev -> Bool :: *))]
System.Posix.Types.$fEqCDev
  = GHC.Classes.C:Eq
      @ CDev
      (GHC.Word.eqWord64
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CDev -> CDev -> Bool :: *)))
      (GHC.Word.neWord64
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CDev -> CDev -> Bool :: *)))

-- RHS size: {terms: 9, types: 1, coercions: 51, joins: 0/0}
System.Posix.Types.$fOrdCDev [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord CDev
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: CDev
                         System.Posix.Types.$fEqCDev
                         GHC.Word.$fOrdWord64_$ccompare
                         `cast` (Sym (System.Posix.Types.N:CDev[0])
                                 ->_R Sym (System.Posix.Types.N:CDev[0])
                                 ->_R <Ordering>_R
                                 :: (Word64 -> Word64 -> Ordering :: *)
                                    ~R# (CDev -> CDev -> Ordering :: *))
                         GHC.Word.ltWord64
                         `cast` (Sym (System.Posix.Types.N:CDev[0])
                                 ->_R Sym (System.Posix.Types.N:CDev[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *) ~R# (CDev -> CDev -> Bool :: *))
                         GHC.Word.leWord64
                         `cast` (Sym (System.Posix.Types.N:CDev[0])
                                 ->_R Sym (System.Posix.Types.N:CDev[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *) ~R# (CDev -> CDev -> Bool :: *))
                         GHC.Word.gtWord64
                         `cast` (Sym (System.Posix.Types.N:CDev[0])
                                 ->_R Sym (System.Posix.Types.N:CDev[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *) ~R# (CDev -> CDev -> Bool :: *))
                         GHC.Word.geWord64
                         `cast` (Sym (System.Posix.Types.N:CDev[0])
                                 ->_R Sym (System.Posix.Types.N:CDev[0])
                                 ->_R <Bool>_R
                                 :: (Word64 -> Word64 -> Bool :: *) ~R# (CDev -> CDev -> Bool :: *))
                         GHC.Word.$fOrdWord64_$cmax
                         `cast` (Sym (System.Posix.Types.N:CDev[0])
                                 ->_R Sym (System.Posix.Types.N:CDev[0])
                                 ->_R Sym (System.Posix.Types.N:CDev[0])
                                 :: (Word64 -> Word64 -> Word64 :: *)
                                    ~R# (CDev -> CDev -> CDev :: *))
                         GHC.Word.$fOrdWord64_$cmin
                         `cast` (Sym (System.Posix.Types.N:CDev[0])
                                 ->_R Sym (System.Posix.Types.N:CDev[0])
                                 ->_R Sym (System.Posix.Types.N:CDev[0])
                                 :: (Word64 -> Word64 -> Word64 :: *)
                                    ~R# (CDev -> CDev -> CDev :: *))]
System.Posix.Types.$fOrdCDev
  = GHC.Classes.C:Ord
      @ CDev
      System.Posix.Types.$fEqCDev
      (GHC.Word.$fOrdWord64_$ccompare
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R <Ordering>_R
               :: (Word64 -> Word64 -> Ordering :: *)
                  ~R# (CDev -> CDev -> Ordering :: *)))
      (GHC.Word.ltWord64
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CDev -> CDev -> Bool :: *)))
      (GHC.Word.leWord64
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CDev -> CDev -> Bool :: *)))
      (GHC.Word.gtWord64
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CDev -> CDev -> Bool :: *)))
      (GHC.Word.geWord64
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R <Bool>_R
               :: (Word64 -> Word64 -> Bool :: *)
                  ~R# (CDev -> CDev -> Bool :: *)))
      (GHC.Word.$fOrdWord64_$cmax
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CDev -> CDev -> CDev :: *)))
      (GHC.Word.$fOrdWord64_$cmin
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CDev -> CDev -> CDev :: *)))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
System.Posix.Types.$fRealCDev [InlPrag=NOUSERINLINE CONLIKE]
  :: Real CDev
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Real TYPE: CDev
                       System.Posix.Types.$fNumCDev
                       System.Posix.Types.$fOrdCDev
                       GHC.Word.$fRealWord64_$ctoRational
                       `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Ratio Integer>_R
                               :: (Word64 -> Ratio Integer :: *)
                                  ~R# (CDev -> Ratio Integer :: *))]
System.Posix.Types.$fRealCDev
  = GHC.Real.C:Real
      @ CDev
      System.Posix.Types.$fNumCDev
      System.Posix.Types.$fOrdCDev
      (GHC.Word.$fRealWord64_$ctoRational
       `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Ratio Integer>_R
               :: (Word64 -> Ratio Integer :: *)
                  ~R# (CDev -> Ratio Integer :: *)))

-- RHS size: {terms: 10, types: 1, coercions: 58, joins: 0/0}
System.Posix.Types.$fIntegralCDev [InlPrag=NOUSERINLINE CONLIKE]
  :: Integral CDev
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Real.C:Integral TYPE: CDev
                           System.Posix.Types.$fRealCDev
                           System.Posix.Types.$fEnumCDev
                           GHC.Word.$fIntegralWord64_$cdiv
                           `cast` (Sym (System.Posix.Types.N:CDev[0])
                                   ->_R Sym (System.Posix.Types.N:CDev[0])
                                   ->_R Sym (System.Posix.Types.N:CDev[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CDev -> CDev -> CDev :: *))
                           GHC.Word.$fIntegralWord64_$cmod
                           `cast` (Sym (System.Posix.Types.N:CDev[0])
                                   ->_R Sym (System.Posix.Types.N:CDev[0])
                                   ->_R Sym (System.Posix.Types.N:CDev[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CDev -> CDev -> CDev :: *))
                           GHC.Word.$fIntegralWord64_$cdiv
                           `cast` (Sym (System.Posix.Types.N:CDev[0])
                                   ->_R Sym (System.Posix.Types.N:CDev[0])
                                   ->_R Sym (System.Posix.Types.N:CDev[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CDev -> CDev -> CDev :: *))
                           GHC.Word.$fIntegralWord64_$cmod
                           `cast` (Sym (System.Posix.Types.N:CDev[0])
                                   ->_R Sym (System.Posix.Types.N:CDev[0])
                                   ->_R Sym (System.Posix.Types.N:CDev[0])
                                   :: (Word64 -> Word64 -> Word64 :: *)
                                      ~R# (CDev -> CDev -> CDev :: *))
                           GHC.Word.$fIntegralWord64_$cquotRem
                           `cast` (Sym (System.Posix.Types.N:CDev[0])
                                   ->_R Sym (System.Posix.Types.N:CDev[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CDev[0]))
                                           (Sym (System.Posix.Types.N:CDev[0])))_R
                                   :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                                      ~R# (CDev -> CDev -> (CDev, CDev) :: *))
                           GHC.Word.$fIntegralWord64_$cdivMod
                           `cast` (Sym (System.Posix.Types.N:CDev[0])
                                   ->_R Sym (System.Posix.Types.N:CDev[0])
                                   ->_R ((,)
                                           (Sym (System.Posix.Types.N:CDev[0]))
                                           (Sym (System.Posix.Types.N:CDev[0])))_R
                                   :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                                      ~R# (CDev -> CDev -> (CDev, CDev) :: *))
                           GHC.Word.$fIntegralWord64_$ctoInteger
                           `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Integer>_R
                                   :: (Word64 -> Integer :: *) ~R# (CDev -> Integer :: *))]
System.Posix.Types.$fIntegralCDev
  = GHC.Real.C:Integral
      @ CDev
      System.Posix.Types.$fRealCDev
      System.Posix.Types.$fEnumCDev
      (GHC.Word.$fIntegralWord64_$cdiv
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CDev -> CDev -> CDev :: *)))
      (GHC.Word.$fIntegralWord64_$cmod
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CDev -> CDev -> CDev :: *)))
      (GHC.Word.$fIntegralWord64_$cdiv
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CDev -> CDev -> CDev :: *)))
      (GHC.Word.$fIntegralWord64_$cmod
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CDev -> CDev -> CDev :: *)))
      (GHC.Word.$fIntegralWord64_$cquotRem
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CDev[0]))
                       (Sym (System.Posix.Types.N:CDev[0])))_R
               :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                  ~R# (CDev -> CDev -> (CDev, CDev) :: *)))
      (GHC.Word.$fIntegralWord64_$cdivMod
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R ((,)
                       (Sym (System.Posix.Types.N:CDev[0]))
                       (Sym (System.Posix.Types.N:CDev[0])))_R
               :: (Word64 -> Word64 -> (Word64, Word64) :: *)
                  ~R# (CDev -> CDev -> (CDev, CDev) :: *)))
      (GHC.Word.$fIntegralWord64_$ctoInteger
       `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Integer>_R
               :: (Word64 -> Integer :: *) ~R# (CDev -> Integer :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
System.Posix.Types.$fBitsCDev [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits CDev
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: CDev
                        System.Posix.Types.$fEqCDev
                        GHC.Word.$fBitsWord64_$c.&.
                        `cast` (Sym (System.Posix.Types.N:CDev[0])
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                :: (Word64 -> Word64 -> Word64 :: *)
                                   ~R# (CDev -> CDev -> CDev :: *))
                        GHC.Word.$fBitsWord64_$c.|.
                        `cast` (Sym (System.Posix.Types.N:CDev[0])
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                :: (Word64 -> Word64 -> Word64 :: *)
                                   ~R# (CDev -> CDev -> CDev :: *))
                        GHC.Word.$fBitsWord64_$cxor
                        `cast` (Sym (System.Posix.Types.N:CDev[0])
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                :: (Word64 -> Word64 -> Word64 :: *)
                                   ~R# (CDev -> CDev -> CDev :: *))
                        GHC.Word.$fBitsWord64_$ccomplement
                        `cast` (Sym (System.Posix.Types.N:CDev[0])
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                :: (Word64 -> Word64 :: *) ~R# (CDev -> CDev :: *))
                        GHC.Word.$fBitsWord64_$cshift
                        `cast` (Sym (System.Posix.Types.N:CDev[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *))
                        GHC.Word.$fBitsWord64_$crotate
                        `cast` (Sym (System.Posix.Types.N:CDev[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *))
                        GHC.Word.$fBitsWord7
                        `cast` (Sym (System.Posix.Types.N:CDev[0])
                                :: (Word64 :: *) ~R# (CDev :: *))
                        GHC.Word.$fBitsWord64_$cbit
                        `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CDev[0])
                                :: (Int -> Word64 :: *) ~R# (Int -> CDev :: *))
                        GHC.Word.$fBitsWord64_$csetBit
                        `cast` (Sym (System.Posix.Types.N:CDev[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *))
                        GHC.Word.$fBitsWord64_$cclearBit
                        `cast` (Sym (System.Posix.Types.N:CDev[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *))
                        GHC.Word.$fBitsWord64_$ccomplementBit
                        `cast` (Sym (System.Posix.Types.N:CDev[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *))
                        GHC.Word.$fBitsWord64_$ctestBit
                        `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Int -> Bool>_R
                                :: (Word64 -> Int -> Bool :: *) ~R# (CDev -> Int -> Bool :: *))
                        GHC.Word.$fBitsWord64_$cbitSizeMaybe
                        `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Maybe Int>_R
                                :: (Word64 -> Maybe Int :: *) ~R# (CDev -> Maybe Int :: *))
                        GHC.Word.$fBitsWord64_$cfiniteBitSize
                        `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Int>_R
                                :: (Word64 -> Int :: *) ~R# (CDev -> Int :: *))
                        GHC.Word.$fBitsWord64_$cisSigned
                        `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Bool>_R
                                :: (Word64 -> Bool :: *) ~R# (CDev -> Bool :: *))
                        GHC.Word.$fBitsWord64_$cshiftL
                        `cast` (Sym (System.Posix.Types.N:CDev[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *))
                        GHC.Word.$fBitsWord64_$cunsafeShiftL
                        `cast` (Sym (System.Posix.Types.N:CDev[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *))
                        GHC.Word.$fBitsWord64_$cshiftR
                        `cast` (Sym (System.Posix.Types.N:CDev[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *))
                        GHC.Word.$fBitsWord64_$cunsafeShiftR
                        `cast` (Sym (System.Posix.Types.N:CDev[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *))
                        GHC.Word.$fBitsWord64_$crotateL
                        `cast` (Sym (System.Posix.Types.N:CDev[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *))
                        GHC.Word.$fBitsWord64_$crotateR
                        `cast` (Sym (System.Posix.Types.N:CDev[0])
                                ->_R <Int>_R
                                ->_R Sym (System.Posix.Types.N:CDev[0])
                                :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *))
                        GHC.Word.$fBitsWord64_$cpopCount
                        `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Int>_R
                                :: (Word64 -> Int :: *) ~R# (CDev -> Int :: *))]
System.Posix.Types.$fBitsCDev
  = Data.Bits.C:Bits
      @ CDev
      System.Posix.Types.$fEqCDev
      (GHC.Word.$fBitsWord64_$c.&.
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CDev -> CDev -> CDev :: *)))
      (GHC.Word.$fBitsWord64_$c.|.
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CDev -> CDev -> CDev :: *)))
      (GHC.Word.$fBitsWord64_$cxor
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Word64 -> Word64 :: *)
                  ~R# (CDev -> CDev -> CDev :: *)))
      (GHC.Word.$fBitsWord64_$ccomplement
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Word64 :: *) ~R# (CDev -> CDev :: *)))
      (GHC.Word.$fBitsWord64_$cshift
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *)))
      (GHC.Word.$fBitsWord64_$crotate
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *)))
      (GHC.Word.$fBitsWord7
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 :: *) ~R# (CDev :: *)))
      (GHC.Word.$fBitsWord64_$cbit
       `cast` (<Int>_R ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Int -> Word64 :: *) ~R# (Int -> CDev :: *)))
      (GHC.Word.$fBitsWord64_$csetBit
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *)))
      (GHC.Word.$fBitsWord64_$cclearBit
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *)))
      (GHC.Word.$fBitsWord64_$ccomplementBit
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *)))
      (GHC.Word.$fBitsWord64_$ctestBit
       `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Int -> Bool>_R
               :: (Word64 -> Int -> Bool :: *) ~R# (CDev -> Int -> Bool :: *)))
      (GHC.Word.$fBitsWord64_$cbitSizeMaybe
       `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Maybe Int>_R
               :: (Word64 -> Maybe Int :: *) ~R# (CDev -> Maybe Int :: *)))
      (GHC.Word.$fBitsWord64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CDev -> Int :: *)))
      (GHC.Word.$fBitsWord64_$cisSigned
       `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Bool>_R
               :: (Word64 -> Bool :: *) ~R# (CDev -> Bool :: *)))
      (GHC.Word.$fBitsWord64_$cshiftL
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *)))
      (GHC.Word.$fBitsWord64_$cunsafeShiftL
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *)))
      (GHC.Word.$fBitsWord64_$cshiftR
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *)))
      (GHC.Word.$fBitsWord64_$cunsafeShiftR
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *)))
      (GHC.Word.$fBitsWord64_$crotateL
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *)))
      (GHC.Word.$fBitsWord64_$crotateR
       `cast` (Sym (System.Posix.Types.N:CDev[0])
               ->_R <Int>_R
               ->_R Sym (System.Posix.Types.N:CDev[0])
               :: (Word64 -> Int -> Word64 :: *) ~R# (CDev -> Int -> CDev :: *)))
      (GHC.Word.$fBitsWord64_$cpopCount
       `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CDev -> Int :: *)))

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
System.Posix.Types.$fFiniteBitsCDev [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits CDev
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: CDev
                              System.Posix.Types.$fBitsCDev
                              GHC.Word.$fBitsWord64_$cfiniteBitSize
                              `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Int>_R
                                      :: (Word64 -> Int :: *) ~R# (CDev -> Int :: *))
                              GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                              `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Int>_R
                                      :: (Word64 -> Int :: *) ~R# (CDev -> Int :: *))
                              GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                              `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Int>_R
                                      :: (Word64 -> Int :: *) ~R# (CDev -> Int :: *))]
System.Posix.Types.$fFiniteBitsCDev
  = Data.Bits.C:FiniteBits
      @ CDev
      System.Posix.Types.$fBitsCDev
      (GHC.Word.$fBitsWord64_$cfiniteBitSize
       `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CDev -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
       `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CDev -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
       `cast` (Sym (System.Posix.Types.N:CDev[0]) ->_R <Int>_R
               :: (Word64 -> Int :: *) ~R# (CDev -> Int :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
System.Posix.Types.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$trModule3
  = GHC.Types.TrNameS System.Posix.Types.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
System.Posix.Types.$trModule2 = "System.Posix.Types"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$trModule1
  = GHC.Types.TrNameS System.Posix.Types.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
System.Posix.Types.$trModule
  = GHC.Types.Module
      System.Posix.Types.$trModule3 System.Posix.Types.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r9hP4 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_r9hP4
  = GHC.Types.KindRepTyConApp
      GHC.Word.$tcWord8 (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r9hP5 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_r9hP5
  = GHC.Types.KindRepTyConApp
      GHC.Int.$tcInt64 (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_r9hP6 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_r9hP6
  = GHC.Types.KindRepTyConApp
      GHC.Word.$tcWord64 (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_r9hP7 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep3_r9hP7
  = GHC.Types.KindRepTyConApp
      GHC.Word.$tcWord32 (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_r9hP8 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep4_r9hP8
  = GHC.Types.KindRepTyConApp
      GHC.Int.$tcInt32 (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep5_r9hP9 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep5_r9hP9
  = GHC.Types.KindRepTyConApp
      GHC.Tuple.$tc() (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep6_r9hPa :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep6_r9hPa
  = GHC.Types.KindRepTyConApp
      Foreign.C.Types.$tcCInt (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep7_r9hPb :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep7_r9hPb
  = GHC.Types.: @ KindRep $krep5_r9hP9 (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_r9hPc :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep8_r9hPc
  = GHC.Types.KindRepTyConApp GHC.Ptr.$tcPtr $krep7_r9hPb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCDev2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
System.Posix.Types.$tcCDev2 = "CDev"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCDev1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCDev1
  = GHC.Types.TrNameS System.Posix.Types.$tcCDev2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCDev :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCDev
  = GHC.Types.TyCon
      7561321174894514587##
      12429536264582454172##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCDev1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep9_r9hPd :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep9_r9hPd
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCDev (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CDev1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CDev1
  = GHC.Types.KindRepFun $krep2_r9hP6 $krep9_r9hPd

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CDev3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tc'CDev3 = "'CDev"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CDev2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CDev2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CDev3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CDev :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CDev
  = GHC.Types.TyCon
      3108773830367360861##
      7452195201172719831##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CDev2
      0#
      System.Posix.Types.$tc'CDev1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCIno2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
System.Posix.Types.$tcCIno2 = "CIno"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCIno1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCIno1
  = GHC.Types.TrNameS System.Posix.Types.$tcCIno2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCIno :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCIno
  = GHC.Types.TyCon
      13231645320463314619##
      11057906233351587311##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCIno1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep10_r9hPe :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep10_r9hPe
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCIno (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CIno1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CIno1
  = GHC.Types.KindRepFun $krep2_r9hP6 $krep10_r9hPe

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CIno3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tc'CIno3 = "'CIno"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CIno2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CIno2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CIno3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CIno :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CIno
  = GHC.Types.TyCon
      2156086059139079017##
      2276476619342627019##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CIno2
      0#
      System.Posix.Types.$tc'CIno1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCMode2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tcCMode2 = "CMode"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCMode1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCMode1
  = GHC.Types.TrNameS System.Posix.Types.$tcCMode2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCMode :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCMode
  = GHC.Types.TyCon
      15776493301056701597##
      3901836110265098799##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCMode1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep11_r9hPf :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep11_r9hPf
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCMode (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CMode1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CMode1
  = GHC.Types.KindRepFun $krep3_r9hP7 $krep11_r9hPf

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CMode3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tc'CMode3 = "'CMode"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CMode2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CMode2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CMode3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CMode :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CMode
  = GHC.Types.TyCon
      5371574569202090358##
      2379290405020366951##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CMode2
      0#
      System.Posix.Types.$tc'CMode1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCOff2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
System.Posix.Types.$tcCOff2 = "COff"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCOff1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCOff1
  = GHC.Types.TrNameS System.Posix.Types.$tcCOff2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCOff :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCOff
  = GHC.Types.TyCon
      17833296405983857836##
      17053118367202666370##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCOff1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep12_r9hPg :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep12_r9hPg
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCOff (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'COff1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'COff1
  = GHC.Types.KindRepFun $krep1_r9hP5 $krep12_r9hPg

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'COff3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tc'COff3 = "'COff"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'COff2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'COff2
  = GHC.Types.TrNameS System.Posix.Types.$tc'COff3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'COff :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'COff
  = GHC.Types.TyCon
      7042770535179520416##
      9191120976012191805##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'COff2
      0#
      System.Posix.Types.$tc'COff1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCPid2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
System.Posix.Types.$tcCPid2 = "CPid"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCPid1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCPid1
  = GHC.Types.TrNameS System.Posix.Types.$tcCPid2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCPid :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCPid
  = GHC.Types.TyCon
      2570642142333263475##
      11663744171518206636##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCPid1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep13_r9hPh :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep13_r9hPh
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCPid (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CPid1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CPid1
  = GHC.Types.KindRepFun $krep4_r9hP8 $krep13_r9hPh

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CPid3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tc'CPid3 = "'CPid"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CPid2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CPid2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CPid3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CPid :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CPid
  = GHC.Types.TyCon
      8844264693613499427##
      6995286617112995613##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CPid2
      0#
      System.Posix.Types.$tc'CPid1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCSsize2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tcCSsize2 = "CSsize"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCSsize1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCSsize1
  = GHC.Types.TrNameS System.Posix.Types.$tcCSsize2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCSsize :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCSsize
  = GHC.Types.TyCon
      3998267820767480894##
      4716519022814242499##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCSsize1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep14_r9hPi :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep14_r9hPi
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCSsize (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CSsize1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CSsize1
  = GHC.Types.KindRepFun $krep1_r9hP5 $krep14_r9hPi

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CSsize3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tc'CSsize3 = "'CSsize"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CSsize2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CSsize2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CSsize3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CSsize :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CSsize
  = GHC.Types.TyCon
      10978063827055062554##
      16389309283367947849##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CSsize2
      0#
      System.Posix.Types.$tc'CSsize1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCGid2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
System.Posix.Types.$tcCGid2 = "CGid"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCGid1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCGid1
  = GHC.Types.TrNameS System.Posix.Types.$tcCGid2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCGid :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCGid
  = GHC.Types.TyCon
      15570931650707760843##
      12027427662577591458##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCGid1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep15_r9hPj :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep15_r9hPj
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCGid (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CGid1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CGid1
  = GHC.Types.KindRepFun $krep3_r9hP7 $krep15_r9hPj

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CGid3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tc'CGid3 = "'CGid"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CGid2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CGid2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CGid3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CGid :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CGid
  = GHC.Types.TyCon
      1350874229131223491##
      949888703092233033##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CGid2
      0#
      System.Posix.Types.$tc'CGid1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCNlink2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tcCNlink2 = "CNlink"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCNlink1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCNlink1
  = GHC.Types.TrNameS System.Posix.Types.$tcCNlink2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCNlink :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCNlink
  = GHC.Types.TyCon
      8514054395085391335##
      2729755442380078726##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCNlink1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep16_r9hPk :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep16_r9hPk
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCNlink (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CNlink1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CNlink1
  = GHC.Types.KindRepFun $krep2_r9hP6 $krep16_r9hPk

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CNlink3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tc'CNlink3 = "'CNlink"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CNlink2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CNlink2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CNlink3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CNlink :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CNlink
  = GHC.Types.TyCon
      13324013278125301889##
      14467889863869384338##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CNlink2
      0#
      System.Posix.Types.$tc'CNlink1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCUid2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
System.Posix.Types.$tcCUid2 = "CUid"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCUid1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCUid1
  = GHC.Types.TrNameS System.Posix.Types.$tcCUid2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCUid :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCUid
  = GHC.Types.TyCon
      3270504542486645520##
      13109852180944003835##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCUid1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep17_r9hPl :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep17_r9hPl
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCUid (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CUid1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CUid1
  = GHC.Types.KindRepFun $krep3_r9hP7 $krep17_r9hPl

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CUid3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tc'CUid3 = "'CUid"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CUid2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CUid2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CUid3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CUid :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CUid
  = GHC.Types.TyCon
      2072436336995248402##
      11185249131927687939##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CUid2
      0#
      System.Posix.Types.$tc'CUid1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCCc2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
System.Posix.Types.$tcCCc2 = "CCc"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCCc1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCCc1
  = GHC.Types.TrNameS System.Posix.Types.$tcCCc2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCCc :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCCc
  = GHC.Types.TyCon
      2379021851355210388##
      3840793763294271357##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCCc1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep18_r9hPm :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep18_r9hPm
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCCc (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CCc1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CCc1
  = GHC.Types.KindRepFun $krep_r9hP4 $krep18_r9hPm

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CCc3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
System.Posix.Types.$tc'CCc3 = "'CCc"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CCc2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CCc2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CCc3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CCc :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CCc
  = GHC.Types.TyCon
      1757518632326808069##
      3350521085876524996##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CCc2
      0#
      System.Posix.Types.$tc'CCc1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCSpeed2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tcCSpeed2 = "CSpeed"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCSpeed1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCSpeed1
  = GHC.Types.TrNameS System.Posix.Types.$tcCSpeed2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCSpeed :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCSpeed
  = GHC.Types.TyCon
      1515560081608748929##
      10626115343031764875##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCSpeed1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep19_r9hPn :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep19_r9hPn
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCSpeed (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CSpeed1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CSpeed1
  = GHC.Types.KindRepFun $krep3_r9hP7 $krep19_r9hPn

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CSpeed3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tc'CSpeed3 = "'CSpeed"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CSpeed2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CSpeed2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CSpeed3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CSpeed :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CSpeed
  = GHC.Types.TyCon
      5056698444302290151##
      5160892833208901567##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CSpeed2
      0#
      System.Posix.Types.$tc'CSpeed1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCTcflag2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tcCTcflag2 = "CTcflag"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCTcflag1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCTcflag1
  = GHC.Types.TrNameS System.Posix.Types.$tcCTcflag2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCTcflag :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCTcflag
  = GHC.Types.TyCon
      10119495970699989704##
      18355458982201067084##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCTcflag1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep20_r9hPo :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep20_r9hPo
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCTcflag (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CTcflag1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CTcflag1
  = GHC.Types.KindRepFun $krep3_r9hP7 $krep20_r9hPo

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CTcflag3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tc'CTcflag3 = "'CTcflag"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CTcflag2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CTcflag2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CTcflag3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CTcflag :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CTcflag
  = GHC.Types.TyCon
      13388534282458833675##
      8161118027685534895##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CTcflag2
      0#
      System.Posix.Types.$tc'CTcflag1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCRLim2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tcCRLim2 = "CRLim"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCRLim1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCRLim1
  = GHC.Types.TrNameS System.Posix.Types.$tcCRLim2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCRLim :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCRLim
  = GHC.Types.TyCon
      10406692442189390324##
      2676605416389635615##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCRLim1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep21_r9hPp :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep21_r9hPp
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCRLim (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CRLim1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CRLim1
  = GHC.Types.KindRepFun $krep2_r9hP6 $krep21_r9hPp

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CRLim3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tc'CRLim3 = "'CRLim"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CRLim2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CRLim2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CRLim3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CRLim :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CRLim
  = GHC.Types.TyCon
      5991534387533068457##
      17380026825724888550##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CRLim2
      0#
      System.Posix.Types.$tc'CRLim1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCBlkSize2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tcCBlkSize2 = "CBlkSize"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCBlkSize1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCBlkSize1
  = GHC.Types.TrNameS System.Posix.Types.$tcCBlkSize2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCBlkSize :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCBlkSize
  = GHC.Types.TyCon
      5165078290129180398##
      1502482703967208468##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCBlkSize1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep22_r9hPq :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep22_r9hPq
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCBlkSize (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CBlkSize1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CBlkSize1
  = GHC.Types.KindRepFun $krep1_r9hP5 $krep22_r9hPq

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CBlkSize3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
System.Posix.Types.$tc'CBlkSize3 = "'CBlkSize"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CBlkSize2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CBlkSize2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CBlkSize3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CBlkSize :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CBlkSize
  = GHC.Types.TyCon
      8899062956366847928##
      10416984250725253101##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CBlkSize2
      0#
      System.Posix.Types.$tc'CBlkSize1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCBlkCnt2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tcCBlkCnt2 = "CBlkCnt"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCBlkCnt1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCBlkCnt1
  = GHC.Types.TrNameS System.Posix.Types.$tcCBlkCnt2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCBlkCnt :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCBlkCnt
  = GHC.Types.TyCon
      7223362617488673117##
      10068868874804109809##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCBlkCnt1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep23_r9hPr :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep23_r9hPr
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCBlkCnt (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CBlkCnt1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CBlkCnt1
  = GHC.Types.KindRepFun $krep1_r9hP5 $krep23_r9hPr

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CBlkCnt3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tc'CBlkCnt3 = "'CBlkCnt"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CBlkCnt2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CBlkCnt2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CBlkCnt3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CBlkCnt :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CBlkCnt
  = GHC.Types.TyCon
      16573860303034733676##
      12999483817959977306##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CBlkCnt2
      0#
      System.Posix.Types.$tc'CBlkCnt1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCClockId2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tcCClockId2 = "CClockId"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCClockId1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCClockId1
  = GHC.Types.TrNameS System.Posix.Types.$tcCClockId2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCClockId :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCClockId
  = GHC.Types.TyCon
      17910827455232157666##
      7972104222439338930##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCClockId1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep24_r9hPs :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep24_r9hPs
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCClockId (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CClockId1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CClockId1
  = GHC.Types.KindRepFun $krep4_r9hP8 $krep24_r9hPs

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CClockId3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
System.Posix.Types.$tc'CClockId3 = "'CClockId"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CClockId2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CClockId2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CClockId3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CClockId :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CClockId
  = GHC.Types.TyCon
      1561018267305454517##
      6341442930479823153##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CClockId2
      0#
      System.Posix.Types.$tc'CClockId1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCFsBlkCnt2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
System.Posix.Types.$tcCFsBlkCnt2 = "CFsBlkCnt"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCFsBlkCnt1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCFsBlkCnt1
  = GHC.Types.TrNameS System.Posix.Types.$tcCFsBlkCnt2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCFsBlkCnt :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCFsBlkCnt
  = GHC.Types.TyCon
      12909798435573276008##
      5959399303131561893##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCFsBlkCnt1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep25_r9hPt :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep25_r9hPt
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCFsBlkCnt (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CFsBlkCnt1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CFsBlkCnt1
  = GHC.Types.KindRepFun $krep2_r9hP6 $krep25_r9hPt

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CFsBlkCnt3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
System.Posix.Types.$tc'CFsBlkCnt3 = "'CFsBlkCnt"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CFsBlkCnt2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CFsBlkCnt2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CFsBlkCnt3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CFsBlkCnt :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CFsBlkCnt
  = GHC.Types.TyCon
      9673122588138005723##
      10186610023777791108##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CFsBlkCnt2
      0#
      System.Posix.Types.$tc'CFsBlkCnt1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCFsFilCnt2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
System.Posix.Types.$tcCFsFilCnt2 = "CFsFilCnt"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCFsFilCnt1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCFsFilCnt1
  = GHC.Types.TrNameS System.Posix.Types.$tcCFsFilCnt2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCFsFilCnt :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCFsFilCnt
  = GHC.Types.TyCon
      5690506641939869919##
      13726398098614153386##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCFsFilCnt1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep26_r9hPu :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep26_r9hPu
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCFsFilCnt (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CFsFilCnt1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CFsFilCnt1
  = GHC.Types.KindRepFun $krep2_r9hP6 $krep26_r9hPu

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CFsFilCnt3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
System.Posix.Types.$tc'CFsFilCnt3 = "'CFsFilCnt"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CFsFilCnt2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CFsFilCnt2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CFsFilCnt3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CFsFilCnt :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CFsFilCnt
  = GHC.Types.TyCon
      6588244365095749797##
      14592453233899312366##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CFsFilCnt2
      0#
      System.Posix.Types.$tc'CFsFilCnt1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCId2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
System.Posix.Types.$tcCId2 = "CId"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCId1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCId1
  = GHC.Types.TrNameS System.Posix.Types.$tcCId2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCId :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCId
  = GHC.Types.TyCon
      10807500058679203870##
      3995180900040194367##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCId1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep27_r9hPv :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep27_r9hPv
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCId (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CId1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CId1
  = GHC.Types.KindRepFun $krep3_r9hP7 $krep27_r9hPv

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CId3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
System.Posix.Types.$tc'CId3 = "'CId"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CId2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CId2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CId3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CId :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CId
  = GHC.Types.TyCon
      12574068874020518406##
      5849901962788557577##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CId2
      0#
      System.Posix.Types.$tc'CId1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCKey2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
System.Posix.Types.$tcCKey2 = "CKey"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCKey1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCKey1
  = GHC.Types.TrNameS System.Posix.Types.$tcCKey2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCKey :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCKey
  = GHC.Types.TyCon
      16376830038944439550##
      1162525149485338100##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCKey1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep28_r9hPw :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep28_r9hPw
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCKey (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CKey1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CKey1
  = GHC.Types.KindRepFun $krep4_r9hP8 $krep28_r9hPw

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CKey3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tc'CKey3 = "'CKey"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CKey2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CKey2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CKey3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CKey :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CKey
  = GHC.Types.TyCon
      2087471059495448834##
      7338836755227300599##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CKey2
      0#
      System.Posix.Types.$tc'CKey1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCTimer2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tcCTimer2 = "CTimer"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCTimer1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcCTimer1
  = GHC.Types.TrNameS System.Posix.Types.$tcCTimer2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcCTimer :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcCTimer
  = GHC.Types.TyCon
      1829297266637328299##
      11765655501292145017##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcCTimer1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep29_r9hPx :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep29_r9hPx
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcCTimer (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CTimer1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'CTimer1
  = GHC.Types.KindRepFun $krep8_r9hPc $krep29_r9hPx

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CTimer3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
System.Posix.Types.$tc'CTimer3 = "'CTimer"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CTimer2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'CTimer2
  = GHC.Types.TrNameS System.Posix.Types.$tc'CTimer3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'CTimer :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'CTimer
  = GHC.Types.TyCon
      536734871000605732##
      1059881176275272570##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'CTimer2
      0#
      System.Posix.Types.$tc'CTimer1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcFd2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
System.Posix.Types.$tcFd2 = "Fd"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcFd1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tcFd1
  = GHC.Types.TrNameS System.Posix.Types.$tcFd2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tcFd :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tcFd
  = GHC.Types.TyCon
      4189134099441370874##
      6473988659845841646##
      System.Posix.Types.$trModule
      System.Posix.Types.$tcFd1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep30_r9hPy :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep30_r9hPy
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcFd (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'Fd1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
System.Posix.Types.$tc'Fd1
  = GHC.Types.KindRepFun $krep6_r9hPa $krep30_r9hPy

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'Fd3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
System.Posix.Types.$tc'Fd3 = "'Fd"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'Fd2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
System.Posix.Types.$tc'Fd2
  = GHC.Types.TrNameS System.Posix.Types.$tc'Fd3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
System.Posix.Types.$tc'Fd :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
System.Posix.Types.$tc'Fd
  = GHC.Types.TyCon
      6068634592859457042##
      11061104041615309220##
      System.Posix.Types.$trModule
      System.Posix.Types.$tc'Fd2
      0#
      System.Posix.Types.$tc'Fd1


