
==================== Raw Cmm ====================
2018-03-16 16:07:16.360201521 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:16.361381158 UTC

[section ""cstring" . System.Environment.ExecutablePath.$trModule4_bytes" {
     System.Environment.ExecutablePath.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.363251324 UTC

[section ""data" . System.Environment.ExecutablePath.$trModule3_closure" {
     System.Environment.ExecutablePath.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.ExecutablePath.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.364979978 UTC

[section ""cstring" . System.Environment.ExecutablePath.$trModule2_bytes" {
     System.Environment.ExecutablePath.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,69,110,118,105,114,111,110,109,101,110,116,46,69,120,101,99,117,116,97,98,108,101,80,97,116,104]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.366806885 UTC

[section ""data" . System.Environment.ExecutablePath.$trModule1_closure" {
     System.Environment.ExecutablePath.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.ExecutablePath.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.369967623 UTC

[section ""data" . System.Environment.ExecutablePath.$trModule_closure" {
     System.Environment.ExecutablePath.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Environment.ExecutablePath.$trModule3_closure+1;
         const System.Environment.ExecutablePath.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.371823308 UTC

[section ""cstring" . System.Environment.ExecutablePath.getExecutablePath4_bytes" {
     System.Environment.ExecutablePath.getExecutablePath4_bytes:
         I8[] [47,112,114,111,99,47,115,101,108,102,47,101,120,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.374308167 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath_file_closure" {
     System.Environment.ExecutablePath.getExecutablePath_file_closure:
         const System.Environment.ExecutablePath.getExecutablePath_file_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.ExecutablePath.getExecutablePath_file_entry() //  [R1]
         { []
         }
     {offset
       ccnf1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccnf2; else goto ccnf3;
       ccnf2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccnf3: // global
           (_ccneY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccneY::I64 == 0) goto ccnf0; else goto ccneZ;
       ccnf0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccneZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccneY::I64;
           R2 = System.Environment.ExecutablePath.getExecutablePath4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.Environment.ExecutablePath.getExecutablePath_file_info" {
     System.Environment.ExecutablePath.getExecutablePath_file_info:
         const System.Environment.ExecutablePath.getExecutablePath_file_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.378119633 UTC

[section ""cstring" . System.Environment.ExecutablePath.getExecutablePath3_bytes" {
     System.Environment.ExecutablePath.getExecutablePath3_bytes:
         I8[] [114,101,97,100,83,121,109,98,111,108,105,99,76,105,110,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.380418732 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath2_closure" {
     System.Environment.ExecutablePath.getExecutablePath2_closure:
         const System.Environment.ExecutablePath.getExecutablePath2_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.ExecutablePath.getExecutablePath2_entry() //  [R1]
         { []
         }
     {offset
       ccnfi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccnfj; else goto ccnfk;
       ccnfj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccnfk: // global
           (_ccnff::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccnff::I64 == 0) goto ccnfh; else goto ccnfg;
       ccnfh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccnfg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccnff::I64;
           R2 = System.Environment.ExecutablePath.getExecutablePath3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.Environment.ExecutablePath.getExecutablePath2_info" {
     System.Environment.ExecutablePath.getExecutablePath2_info:
         const System.Environment.ExecutablePath.getExecutablePath2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.388100618 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath1_closure" {
     System.Environment.ExecutablePath.getExecutablePath1_closure:
         const System.Environment.ExecutablePath.getExecutablePath1_info;
         const 0;
 },
 sat_scnb3_entry() //  [R1]
         { []
         }
     {offset
       ccng8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccngc; else goto ccngd;
       ccngc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccngd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccng5_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucngh; else goto ccng6;
       ucngh: // global
           call _ccng5(R1) args: 0, res: 0, upd: 0;
       ccng6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scnb3_info" {
     sat_scnb3_info:
         const sat_scnb3_entry;
         const 1;
         const 16;
 },
 _ccng5() //  [R1]
         { []
         }
     {offset
       ccng5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccngg; else goto ccngf;
       ccngg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccngf: // global
           _scnb2::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _scnb2::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccng5_info" {
     block_ccng5_info:
         const _ccng5;
         const 0;
         const 30;
 },
 sat_scnb5_entry() //  [R1, R2]
         { []
         }
     {offset
       ccngi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccngj; else goto ccngk;
       ccngj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccngk: // global
           I64[Sp - 24] = block_ccnfJ_info;
           _scnaM::P64 = P64[R1 + 6];
           _scnaL::I64 = I64[R1 + 14];
           R1 = R2;
           I64[Sp - 16] = _scnaL::I64;
           P64[Sp - 8] = _scnaM::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucngF; else goto ccnfK;
       ucngF: // global
           call _ccnfJ(R1) args: 0, res: 0, upd: 0;
       ccnfK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scnb5_info" {
     sat_scnb5_info:
         const sat_scnb5_entry;
         const 4294967297;
         const 64424509452;
         const 8589934597;
         const ScncS_srt;
 },
 _ccnfJ() //  [R1]
         { []
         }
     {offset
       ccnfJ: // global
           (_scnaU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [‘signed’] readlink(I64[R1 + 7], I64[Sp + 8], 4096);
           _scnaV::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scnaU::I64));
           if (_scnaV::I64 != (-1)) goto ucngC; else goto ccngx;
       ucngC: // global
           I64[Sp + 8] = _scnaV::I64;
           Sp = Sp + 8;
           call _ccngn() args: 0, res: 0, upd: 0;
       ccngx: // global
           I64[Sp + 8] = block_ccnfZ_info;
           R3 = System.Environment.ExecutablePath.getExecutablePath_file_closure;
           R2 = System.Environment.ExecutablePath.getExecutablePath2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrnoPath1_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccnfJ_info" {
     block_ccnfJ_info:
         const _ccnfJ;
         const 66;
         const 64424509470;
         const ScncS_srt;
 },
 _ccngn() //  []
         { []
         }
     {offset
       ccngn: // global
           Hp = Hp + 40;
           _scnaV::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto ccngv; else goto ccngu;
       ccngv: // global
           HpAlloc = 40;
           I64[Sp] = block_ccngm_info;
           R1 = _scnaV::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccngu: // global
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _scnaV::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 31;
           R2 = Hp - 15;
           Sp = Sp + 16;
           call System.Posix.Internals.peekFilePathLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _ccngm() //  [R1]
         { []
         }
     {offset
       ccngm: // global
           I64[Sp] = R1;
           call _ccngn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccngm_info" {
     block_ccngm_info:
         const _ccngm;
         const 1;
         const 4294967326;
         const ScncS_srt+8;
 },
 _ccnfZ() //  [R1]
         { []
         }
     {offset
       ccnfZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccngB; else goto ccngA;
       ccngB: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccngA: // global
           I64[Hp - 40] = sat_scnb3_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 40;
           R2 = Hp - 15;
           Sp = Sp + 16;
           call System.Posix.Internals.peekFilePathLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccnfZ_info" {
     block_ccnfZ_info:
         const _ccnfZ;
         const 1;
         const 4294967326;
         const ScncS_srt+8;
 },
 System.Environment.ExecutablePath.getExecutablePath1_entry() //  []
         { []
         }
     {offset
       ccngH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccngI; else goto ccngJ;
       ccngI: // global
           R1 = System.Environment.ExecutablePath.getExecutablePath1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccngJ: // global
           I64[Sp - 8] = block_ccnfw_info;
           R2 = 1;
           R1 = 4097;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.ExecutablePath.getExecutablePath1_info" {
     System.Environment.ExecutablePath.getExecutablePath1_info:
         const System.Environment.ExecutablePath.getExecutablePath1_entry;
         const 0;
         const 270582939662;
         const 4294967299;
         const ScncS_srt;
 },
 _ccnfw() //  [R1]
         { []
         }
     {offset
       ccnfw: // global
           I64[Sp - 8] = block_ccnfy_info;
           _scnaH::P64 = R1;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp] = _scnaH::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccnfw_info" {
     block_ccnfw_info:
         const _ccnfw;
         const 0;
         const 133143986206;
         const ScncS_srt;
 },
 _ccnfy() //  [R1]
         { []
         }
     {offset
       ccnfy: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccngN; else goto ccngM;
       ccngN: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccngM: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           _scnaL::I64 = P64[Sp + 8] + 16;
           I64[Hp - 24] = _scnaL::I64;
           I64[Hp - 16] = sat_scnb5_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = _scnaL::I64;
           I64[Sp] = block_ccngO_info;
           R4 = Hp - 14;
           R3 = System.Environment.ExecutablePath.getExecutablePath_file_closure;
           R2 = R1;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccnfy_info" {
     block_ccnfy_info:
         const _ccnfy;
         const 1;
         const 64424509470;
         const ScncS_srt;
 },
 _ccngO() //  [R1]
         { []
         }
     {offset
       ccngO: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccngO_info" {
     block_ccngO_info:
         const _ccngO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.409465456 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath_closure" {
     System.Environment.ExecutablePath.getExecutablePath_closure:
         const System.Environment.ExecutablePath.getExecutablePath_info;
         const 0;
 },
 System.Environment.ExecutablePath.getExecutablePath_entry() //  []
         { []
         }
     {offset
       ccnhG: // global
           call System.Environment.ExecutablePath.getExecutablePath1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.ExecutablePath.getExecutablePath_info" {
     System.Environment.ExecutablePath.getExecutablePath_info:
         const System.Environment.ExecutablePath.getExecutablePath_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScncS_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.412697091 UTC

[section ""relreadonly" . ScncS_srt" {
     ScncS_srt:
         const Foreign.C.Error.throwErrnoPath1_closure;
         const System.Posix.Internals.peekFilePathLen1_closure;
         const System.Environment.ExecutablePath.getExecutablePath2_closure;
         const System.Environment.ExecutablePath.getExecutablePath_file_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const System.Environment.ExecutablePath.getExecutablePath1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.49997146 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:16.501131462 UTC

[section ""cstring" . System.Environment.ExecutablePath.$trModule4_bytes" {
     System.Environment.ExecutablePath.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.503070869 UTC

[section ""data" . System.Environment.ExecutablePath.$trModule3_closure" {
     System.Environment.ExecutablePath.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.ExecutablePath.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.504998186 UTC

[section ""cstring" . System.Environment.ExecutablePath.$trModule2_bytes" {
     System.Environment.ExecutablePath.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,69,110,118,105,114,111,110,109,101,110,116,46,69,120,101,99,117,116,97,98,108,101,80,97,116,104]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.506917779 UTC

[section ""data" . System.Environment.ExecutablePath.$trModule1_closure" {
     System.Environment.ExecutablePath.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.ExecutablePath.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.508796011 UTC

[section ""data" . System.Environment.ExecutablePath.$trModule_closure" {
     System.Environment.ExecutablePath.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Environment.ExecutablePath.$trModule3_closure+1;
         const System.Environment.ExecutablePath.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.510856586 UTC

[section ""cstring" . System.Environment.ExecutablePath.getExecutablePath4_bytes" {
     System.Environment.ExecutablePath.getExecutablePath4_bytes:
         I8[] [47,112,114,111,99,47,115,101,108,102,47,101,120,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.513620639 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath_file_closure" {
     System.Environment.ExecutablePath.getExecutablePath_file_closure:
         const System.Environment.ExecutablePath.getExecutablePath_file_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.ExecutablePath.getExecutablePath_file_entry() //  [R1]
         { []
         }
     {offset
       ccniz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccniA; else goto ccniB;
       ccniA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccniB: // global
           (_ccniw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccniw::I64 == 0) goto ccniy; else goto ccnix;
       ccniy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccnix: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccniw::I64;
           R2 = System.Environment.ExecutablePath.getExecutablePath4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.Environment.ExecutablePath.getExecutablePath_file_info" {
     System.Environment.ExecutablePath.getExecutablePath_file_info:
         const System.Environment.ExecutablePath.getExecutablePath_file_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.517859916 UTC

[section ""cstring" . System.Environment.ExecutablePath.getExecutablePath3_bytes" {
     System.Environment.ExecutablePath.getExecutablePath3_bytes:
         I8[] [114,101,97,100,83,121,109,98,111,108,105,99,76,105,110,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.520364993 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath2_closure" {
     System.Environment.ExecutablePath.getExecutablePath2_closure:
         const System.Environment.ExecutablePath.getExecutablePath2_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.ExecutablePath.getExecutablePath2_entry() //  [R1]
         { []
         }
     {offset
       ccniR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccniS; else goto ccniT;
       ccniS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccniT: // global
           (_ccniO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccniO::I64 == 0) goto ccniQ; else goto ccniP;
       ccniQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccniP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccniO::I64;
           R2 = System.Environment.ExecutablePath.getExecutablePath3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.Environment.ExecutablePath.getExecutablePath2_info" {
     System.Environment.ExecutablePath.getExecutablePath2_info:
         const System.Environment.ExecutablePath.getExecutablePath2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.529493074 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath1_closure" {
     System.Environment.ExecutablePath.getExecutablePath1_closure:
         const System.Environment.ExecutablePath.getExecutablePath1_info;
         const 0;
 },
 sat_scnig_entry() //  [R1]
         { []
         }
     {offset
       ccnjI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccnjM; else goto ccnjN;
       ccnjM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccnjN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccnjF_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucnjR; else goto ccnjG;
       ucnjR: // global
           call _ccnjF(R1) args: 0, res: 0, upd: 0;
       ccnjG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scnig_info" {
     sat_scnig_info:
         const sat_scnig_entry;
         const 1;
         const 16;
 },
 _ccnjF() //  [R1]
         { []
         }
     {offset
       ccnjF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccnjQ; else goto ccnjP;
       ccnjQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccnjP: // global
           _scnif::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _scnif::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccnjF_info" {
     block_ccnjF_info:
         const _ccnjF;
         const 0;
         const 30;
 },
 sat_scnii_entry() //  [R1, R2]
         { []
         }
     {offset
       ccnjS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccnjT; else goto ccnjU;
       ccnjT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccnjU: // global
           I64[Sp - 24] = block_ccnjj_info;
           _scnhZ::P64 = P64[R1 + 6];
           _scnhY::I64 = I64[R1 + 14];
           R1 = R2;
           I64[Sp - 16] = _scnhY::I64;
           P64[Sp - 8] = _scnhZ::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucnkf; else goto ccnjk;
       ucnkf: // global
           call _ccnjj(R1) args: 0, res: 0, upd: 0;
       ccnjk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scnii_info" {
     sat_scnii_info:
         const sat_scnii_entry;
         const 4294967297;
         const 64424509452;
         const 8589934597;
         const Scnks_srt;
 },
 _ccnjj() //  [R1]
         { []
         }
     {offset
       ccnjj: // global
           (_scni7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [‘signed’] readlink(I64[R1 + 7], I64[Sp + 8], 4096);
           _scni8::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scni7::I64));
           if (_scni8::I64 != (-1)) goto ucnkc; else goto ccnk7;
       ucnkc: // global
           I64[Sp + 8] = _scni8::I64;
           Sp = Sp + 8;
           call _ccnjX() args: 0, res: 0, upd: 0;
       ccnk7: // global
           I64[Sp + 8] = block_ccnjz_info;
           R3 = System.Environment.ExecutablePath.getExecutablePath_file_closure;
           R2 = System.Environment.ExecutablePath.getExecutablePath2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrnoPath1_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccnjj_info" {
     block_ccnjj_info:
         const _ccnjj;
         const 66;
         const 64424509470;
         const Scnks_srt;
 },
 _ccnjX() //  []
         { []
         }
     {offset
       ccnjX: // global
           Hp = Hp + 40;
           _scni8::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto ccnk5; else goto ccnk4;
       ccnk5: // global
           HpAlloc = 40;
           I64[Sp] = block_ccnjW_info;
           R1 = _scni8::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccnk4: // global
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _scni8::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 31;
           R2 = Hp - 15;
           Sp = Sp + 16;
           call System.Posix.Internals.peekFilePathLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _ccnjW() //  [R1]
         { []
         }
     {offset
       ccnjW: // global
           I64[Sp] = R1;
           call _ccnjX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccnjW_info" {
     block_ccnjW_info:
         const _ccnjW;
         const 1;
         const 4294967326;
         const Scnks_srt+8;
 },
 _ccnjz() //  [R1]
         { []
         }
     {offset
       ccnjz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccnkb; else goto ccnka;
       ccnkb: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccnka: // global
           I64[Hp - 40] = sat_scnig_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 40;
           R2 = Hp - 15;
           Sp = Sp + 16;
           call System.Posix.Internals.peekFilePathLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccnjz_info" {
     block_ccnjz_info:
         const _ccnjz;
         const 1;
         const 4294967326;
         const Scnks_srt+8;
 },
 System.Environment.ExecutablePath.getExecutablePath1_entry() //  []
         { []
         }
     {offset
       ccnkh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccnki; else goto ccnkj;
       ccnki: // global
           R1 = System.Environment.ExecutablePath.getExecutablePath1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccnkj: // global
           I64[Sp - 8] = block_ccnj6_info;
           R2 = 1;
           R1 = 4097;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.ExecutablePath.getExecutablePath1_info" {
     System.Environment.ExecutablePath.getExecutablePath1_info:
         const System.Environment.ExecutablePath.getExecutablePath1_entry;
         const 0;
         const 270582939662;
         const 4294967299;
         const Scnks_srt;
 },
 _ccnj6() //  [R1]
         { []
         }
     {offset
       ccnj6: // global
           I64[Sp - 8] = block_ccnj8_info;
           _scnhU::P64 = R1;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp] = _scnhU::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccnj6_info" {
     block_ccnj6_info:
         const _ccnj6;
         const 0;
         const 133143986206;
         const Scnks_srt;
 },
 _ccnj8() //  [R1]
         { []
         }
     {offset
       ccnj8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccnkn; else goto ccnkm;
       ccnkn: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccnkm: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           _scnhY::I64 = P64[Sp + 8] + 16;
           I64[Hp - 24] = _scnhY::I64;
           I64[Hp - 16] = sat_scnii_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = _scnhY::I64;
           I64[Sp] = block_ccnko_info;
           R4 = Hp - 14;
           R3 = System.Environment.ExecutablePath.getExecutablePath_file_closure;
           R2 = R1;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccnj8_info" {
     block_ccnj8_info:
         const _ccnj8;
         const 1;
         const 64424509470;
         const Scnks_srt;
 },
 _ccnko() //  [R1]
         { []
         }
     {offset
       ccnko: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccnko_info" {
     block_ccnko_info:
         const _ccnko;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.552874395 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath_closure" {
     System.Environment.ExecutablePath.getExecutablePath_closure:
         const System.Environment.ExecutablePath.getExecutablePath_info;
         const 0;
 },
 System.Environment.ExecutablePath.getExecutablePath_entry() //  []
         { []
         }
     {offset
       ccnlw: // global
           call System.Environment.ExecutablePath.getExecutablePath1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.ExecutablePath.getExecutablePath_info" {
     System.Environment.ExecutablePath.getExecutablePath_info:
         const System.Environment.ExecutablePath.getExecutablePath_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Scnks_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.556412538 UTC

[section ""relreadonly" . Scnks_srt" {
     Scnks_srt:
         const Foreign.C.Error.throwErrnoPath1_closure;
         const System.Posix.Internals.peekFilePathLen1_closure;
         const System.Environment.ExecutablePath.getExecutablePath2_closure;
         const System.Environment.ExecutablePath.getExecutablePath_file_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const System.Environment.ExecutablePath.getExecutablePath1_closure;
 }]

