
==================== Output Cmm ====================
2018-03-16 16:07:16.333296353 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:16.333828745 UTC

[section ""cstring" . System.Environment.ExecutablePath.$trModule4_bytes" {
     System.Environment.ExecutablePath.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.334415735 UTC

[section ""data" . System.Environment.ExecutablePath.$trModule3_closure" {
     System.Environment.ExecutablePath.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.ExecutablePath.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.33497708 UTC

[section ""cstring" . System.Environment.ExecutablePath.$trModule2_bytes" {
     System.Environment.ExecutablePath.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,69,110,118,105,114,111,110,109,101,110,116,46,69,120,101,99,117,116,97,98,108,101,80,97,116,104]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.33552956 UTC

[section ""data" . System.Environment.ExecutablePath.$trModule1_closure" {
     System.Environment.ExecutablePath.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.ExecutablePath.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.336103735 UTC

[section ""data" . System.Environment.ExecutablePath.$trModule_closure" {
     System.Environment.ExecutablePath.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Environment.ExecutablePath.$trModule3_closure+1;
         const System.Environment.ExecutablePath.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.336712685 UTC

[section ""cstring" . System.Environment.ExecutablePath.getExecutablePath4_bytes" {
     System.Environment.ExecutablePath.getExecutablePath4_bytes:
         I8[] [47,112,114,111,99,47,115,101,108,102,47,101,120,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.337601778 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath_file_closure" {
     System.Environment.ExecutablePath.getExecutablePath_file_closure:
         const System.Environment.ExecutablePath.getExecutablePath_file_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.ExecutablePath.getExecutablePath_file_entry() //  [R1]
         { info_tbl: [(ccnbg,
                       label: System.Environment.ExecutablePath.getExecutablePath_file_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnbg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccnbh; else goto ccnbi;
       ccnbh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccnbi: // global
           (_ccnbd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccnbd::I64 == 0) goto ccnbf; else goto ccnbe;
       ccnbf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccnbe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccnbd::I64;
           R2 = System.Environment.ExecutablePath.getExecutablePath4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.33854947 UTC

[section ""cstring" . System.Environment.ExecutablePath.getExecutablePath3_bytes" {
     System.Environment.ExecutablePath.getExecutablePath3_bytes:
         I8[] [114,101,97,100,83,121,109,98,111,108,105,99,76,105,110,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.339289421 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath2_closure" {
     System.Environment.ExecutablePath.getExecutablePath2_closure:
         const System.Environment.ExecutablePath.getExecutablePath2_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.ExecutablePath.getExecutablePath2_entry() //  [R1]
         { info_tbl: [(ccnbp,
                       label: System.Environment.ExecutablePath.getExecutablePath2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnbp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccnbq; else goto ccnbr;
       ccnbq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccnbr: // global
           (_ccnbm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccnbm::I64 == 0) goto ccnbo; else goto ccnbn;
       ccnbo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccnbn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccnbm::I64;
           R2 = System.Environment.ExecutablePath.getExecutablePath3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.341522947 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath1_closure" {
     System.Environment.ExecutablePath.getExecutablePath1_closure:
         const System.Environment.ExecutablePath.getExecutablePath1_info;
         const 0;
 },
 sat_scnb3_entry() //  [R1]
         { info_tbl: [(ccnc8,
                       label: sat_scnb3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnc8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccncc; else goto ccncd;
       ccncc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccncd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccnc5_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucnch; else goto ccnc6;
       ucnch: // global
           call _ccnc5(R1) args: 0, res: 0, upd: 0;
       ccnc6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccnc5() //  [R1]
         { info_tbl: [(ccnc5,
                       label: block_ccnc5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnc5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccncg; else goto ccncf;
       ccncg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccncf: // global
           _scnb2::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _scnb2::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scnb5_entry() //  [R1, R2]
         { info_tbl: [(ccnci,
                       label: sat_scnb5_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnci: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccncj; else goto ccnck;
       ccncj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccnck: // global
           I64[Sp - 24] = block_ccnbJ_info;
           _scnaM::P64 = P64[R1 + 6];
           _scnaL::I64 = I64[R1 + 14];
           R1 = R2;
           I64[Sp - 16] = _scnaL::I64;
           P64[Sp - 8] = _scnaM::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucncF; else goto ccnbK;
       ucncF: // global
           call _ccnbJ(R1) args: 0, res: 0, upd: 0;
       ccnbK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccnbJ() //  [R1]
         { info_tbl: [(ccnbJ,
                       label: block_ccnbJ_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnbJ: // global
           (_scnaU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [‘signed’] readlink(I64[R1 + 7], I64[Sp + 8], 4096);
           _scnaV::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scnaU::I64));
           if (_scnaV::I64 != (-1)) goto ucncC; else goto ccncx;
       ucncC: // global
           I64[Sp + 8] = _scnaV::I64;
           Sp = Sp + 8;
           call _ccncn() args: 0, res: 0, upd: 0;
       ccncx: // global
           I64[Sp + 8] = block_ccnbZ_info;
           R3 = System.Environment.ExecutablePath.getExecutablePath_file_closure;
           R2 = System.Environment.ExecutablePath.getExecutablePath2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrnoPath1_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccncn() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccncn: // global
           Hp = Hp + 40;
           _scnaV::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto ccncv; else goto ccncu;
       ccncv: // global
           HpAlloc = 40;
           I64[Sp] = block_ccncm_info;
           R1 = _scnaV::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccncu: // global
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _scnaV::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 31;
           R2 = Hp - 15;
           Sp = Sp + 16;
           call System.Posix.Internals.peekFilePathLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _ccncm() //  [R1]
         { info_tbl: [(ccncm,
                       label: block_ccncm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccncm: // global
           I64[Sp] = R1;
           call _ccncn() args: 0, res: 0, upd: 0;
     }
 },
 _ccnbZ() //  [R1]
         { info_tbl: [(ccnbZ,
                       label: block_ccnbZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnbZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccncB; else goto ccncA;
       ccncB: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccncA: // global
           I64[Hp - 40] = sat_scnb3_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 40;
           R2 = Hp - 15;
           Sp = Sp + 16;
           call System.Posix.Internals.peekFilePathLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 System.Environment.ExecutablePath.getExecutablePath1_entry() //  []
         { info_tbl: [(ccncH,
                       label: System.Environment.ExecutablePath.getExecutablePath1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccncH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccncI; else goto ccncJ;
       ccncI: // global
           R1 = System.Environment.ExecutablePath.getExecutablePath1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccncJ: // global
           I64[Sp - 8] = block_ccnbw_info;
           R2 = 1;
           R1 = 4097;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccnbw() //  [R1]
         { info_tbl: [(ccnbw,
                       label: block_ccnbw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnbw: // global
           I64[Sp - 8] = block_ccnby_info;
           _scnaH::P64 = R1;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp] = _scnaH::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccnby() //  [R1]
         { info_tbl: [(ccnby,
                       label: block_ccnby_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnby: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccncN; else goto ccncM;
       ccncN: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccncM: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           _scnaL::I64 = P64[Sp + 8] + 16;
           I64[Hp - 24] = _scnaL::I64;
           I64[Hp - 16] = sat_scnb5_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = _scnaL::I64;
           I64[Sp] = block_ccncO_info;
           R4 = Hp - 14;
           R3 = System.Environment.ExecutablePath.getExecutablePath_file_closure;
           R2 = R1;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccncO() //  [R1]
         { info_tbl: [(ccncO,
                       label: block_ccncO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccncO: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.344791926 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath_closure" {
     System.Environment.ExecutablePath.getExecutablePath_closure:
         const System.Environment.ExecutablePath.getExecutablePath_info;
         const 0;
 },
 System.Environment.ExecutablePath.getExecutablePath_entry() //  []
         { info_tbl: [(ccncX,
                       label: System.Environment.ExecutablePath.getExecutablePath_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccncX: // global
           call System.Environment.ExecutablePath.getExecutablePath1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.345479914 UTC

[section ""relreadonly" . ScncS_srt" {
     ScncS_srt:
         const Foreign.C.Error.throwErrnoPath1_closure;
         const System.Posix.Internals.peekFilePathLen1_closure;
         const System.Environment.ExecutablePath.getExecutablePath2_closure;
         const System.Environment.ExecutablePath.getExecutablePath_file_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const System.Environment.ExecutablePath.getExecutablePath1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.346085036 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:16.346610837 UTC

[section ""cstring" . System.Environment.ExecutablePath.$trModule4_bytes" {
     System.Environment.ExecutablePath.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.347187408 UTC

[section ""data" . System.Environment.ExecutablePath.$trModule3_closure" {
     System.Environment.ExecutablePath.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.ExecutablePath.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.347774739 UTC

[section ""cstring" . System.Environment.ExecutablePath.$trModule2_bytes" {
     System.Environment.ExecutablePath.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,69,110,118,105,114,111,110,109,101,110,116,46,69,120,101,99,117,116,97,98,108,101,80,97,116,104]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.348369742 UTC

[section ""data" . System.Environment.ExecutablePath.$trModule1_closure" {
     System.Environment.ExecutablePath.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.ExecutablePath.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.348968661 UTC

[section ""data" . System.Environment.ExecutablePath.$trModule_closure" {
     System.Environment.ExecutablePath.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Environment.ExecutablePath.$trModule3_closure+1;
         const System.Environment.ExecutablePath.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.349618881 UTC

[section ""cstring" . System.Environment.ExecutablePath.getExecutablePath4_bytes" {
     System.Environment.ExecutablePath.getExecutablePath4_bytes:
         I8[] [47,112,114,111,99,47,115,101,108,102,47,101,120,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.350355139 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath_file_closure" {
     System.Environment.ExecutablePath.getExecutablePath_file_closure:
         const System.Environment.ExecutablePath.getExecutablePath_file_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.ExecutablePath.getExecutablePath_file_entry() //  [R1]
         { info_tbl: [(ccnd6,
                       label: System.Environment.ExecutablePath.getExecutablePath_file_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnd6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccnd7; else goto ccnd8;
       ccnd7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccnd8: // global
           (_ccnd3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccnd3::I64 == 0) goto ccnd5; else goto ccnd4;
       ccnd5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccnd4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccnd3::I64;
           R2 = System.Environment.ExecutablePath.getExecutablePath4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.351285271 UTC

[section ""cstring" . System.Environment.ExecutablePath.getExecutablePath3_bytes" {
     System.Environment.ExecutablePath.getExecutablePath3_bytes:
         I8[] [114,101,97,100,83,121,109,98,111,108,105,99,76,105,110,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.352050889 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath2_closure" {
     System.Environment.ExecutablePath.getExecutablePath2_closure:
         const System.Environment.ExecutablePath.getExecutablePath2_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.ExecutablePath.getExecutablePath2_entry() //  [R1]
         { info_tbl: [(ccndf,
                       label: System.Environment.ExecutablePath.getExecutablePath2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccndf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccndg; else goto ccndh;
       ccndg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccndh: // global
           (_ccndc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccndc::I64 == 0) goto ccnde; else goto ccndd;
       ccnde: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccndd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccndc::I64;
           R2 = System.Environment.ExecutablePath.getExecutablePath3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.354645897 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath1_closure" {
     System.Environment.ExecutablePath.getExecutablePath1_closure:
         const System.Environment.ExecutablePath.getExecutablePath1_info;
         const 0;
 },
 sat_scnb3_entry() //  [R1]
         { info_tbl: [(ccndY,
                       label: sat_scnb3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccndY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccne2; else goto ccne3;
       ccne2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccne3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccndV_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucne7; else goto ccndW;
       ucne7: // global
           call _ccndV(R1) args: 0, res: 0, upd: 0;
       ccndW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccndV() //  [R1]
         { info_tbl: [(ccndV,
                       label: block_ccndV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccndV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccne6; else goto ccne5;
       ccne6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccne5: // global
           _scnb2::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _scnb2::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scnb5_entry() //  [R1, R2]
         { info_tbl: [(ccne8,
                       label: sat_scnb5_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccne8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccne9; else goto ccnea;
       ccne9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccnea: // global
           I64[Sp - 24] = block_ccndz_info;
           _scnaM::P64 = P64[R1 + 6];
           _scnaL::I64 = I64[R1 + 14];
           R1 = R2;
           I64[Sp - 16] = _scnaL::I64;
           P64[Sp - 8] = _scnaM::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucnev; else goto ccndA;
       ucnev: // global
           call _ccndz(R1) args: 0, res: 0, upd: 0;
       ccndA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccndz() //  [R1]
         { info_tbl: [(ccndz,
                       label: block_ccndz_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccndz: // global
           (_scnaU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [‘signed’] readlink(I64[R1 + 7], I64[Sp + 8], 4096);
           _scnaV::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scnaU::I64));
           if (_scnaV::I64 != (-1)) goto ucnes; else goto ccnen;
       ucnes: // global
           I64[Sp + 8] = _scnaV::I64;
           Sp = Sp + 8;
           call _ccned() args: 0, res: 0, upd: 0;
       ccnen: // global
           I64[Sp + 8] = block_ccndP_info;
           R3 = System.Environment.ExecutablePath.getExecutablePath_file_closure;
           R2 = System.Environment.ExecutablePath.getExecutablePath2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrnoPath1_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccned() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccned: // global
           Hp = Hp + 40;
           _scnaV::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto ccnel; else goto ccnek;
       ccnel: // global
           HpAlloc = 40;
           I64[Sp] = block_ccnec_info;
           R1 = _scnaV::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccnek: // global
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _scnaV::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 31;
           R2 = Hp - 15;
           Sp = Sp + 16;
           call System.Posix.Internals.peekFilePathLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _ccnec() //  [R1]
         { info_tbl: [(ccnec,
                       label: block_ccnec_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnec: // global
           I64[Sp] = R1;
           call _ccned() args: 0, res: 0, upd: 0;
     }
 },
 _ccndP() //  [R1]
         { info_tbl: [(ccndP,
                       label: block_ccndP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccndP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccner; else goto ccneq;
       ccner: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccneq: // global
           I64[Hp - 40] = sat_scnb3_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 40;
           R2 = Hp - 15;
           Sp = Sp + 16;
           call System.Posix.Internals.peekFilePathLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 System.Environment.ExecutablePath.getExecutablePath1_entry() //  []
         { info_tbl: [(ccnex,
                       label: System.Environment.ExecutablePath.getExecutablePath1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnex: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccney; else goto ccnez;
       ccney: // global
           R1 = System.Environment.ExecutablePath.getExecutablePath1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccnez: // global
           I64[Sp - 8] = block_ccndm_info;
           R2 = 1;
           R1 = 4097;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccndm() //  [R1]
         { info_tbl: [(ccndm,
                       label: block_ccndm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccndm: // global
           I64[Sp - 8] = block_ccndo_info;
           _scnaH::P64 = R1;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp] = _scnaH::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccndo() //  [R1]
         { info_tbl: [(ccndo,
                       label: block_ccndo_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccndo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccneD; else goto ccneC;
       ccneD: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccneC: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           _scnaL::I64 = P64[Sp + 8] + 16;
           I64[Hp - 24] = _scnaL::I64;
           I64[Hp - 16] = sat_scnb5_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = _scnaL::I64;
           I64[Sp] = block_ccneE_info;
           R4 = Hp - 14;
           R3 = System.Environment.ExecutablePath.getExecutablePath_file_closure;
           R2 = R1;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccneE() //  [R1]
         { info_tbl: [(ccneE,
                       label: block_ccneE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccneE: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.358044689 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath_closure" {
     System.Environment.ExecutablePath.getExecutablePath_closure:
         const System.Environment.ExecutablePath.getExecutablePath_info;
         const 0;
 },
 System.Environment.ExecutablePath.getExecutablePath_entry() //  []
         { info_tbl: [(ccneM,
                       label: System.Environment.ExecutablePath.getExecutablePath_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccneM: // global
           call System.Environment.ExecutablePath.getExecutablePath1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.358772834 UTC

[section ""relreadonly" . ScncS_srt" {
     ScncS_srt:
         const Foreign.C.Error.throwErrnoPath1_closure;
         const System.Posix.Internals.peekFilePathLen1_closure;
         const System.Environment.ExecutablePath.getExecutablePath2_closure;
         const System.Environment.ExecutablePath.getExecutablePath_file_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const System.Environment.ExecutablePath.getExecutablePath1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.35964245 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:16.36077031 UTC

[section ""cstring" . System.Environment.ExecutablePath.$trModule4_bytes" {
     System.Environment.ExecutablePath.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.362669085 UTC

[section ""data" . System.Environment.ExecutablePath.$trModule3_closure" {
     System.Environment.ExecutablePath.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.ExecutablePath.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.364398935 UTC

[section ""cstring" . System.Environment.ExecutablePath.$trModule2_bytes" {
     System.Environment.ExecutablePath.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,69,110,118,105,114,111,110,109,101,110,116,46,69,120,101,99,117,116,97,98,108,101,80,97,116,104]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.366188622 UTC

[section ""data" . System.Environment.ExecutablePath.$trModule1_closure" {
     System.Environment.ExecutablePath.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.ExecutablePath.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.369026361 UTC

[section ""data" . System.Environment.ExecutablePath.$trModule_closure" {
     System.Environment.ExecutablePath.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Environment.ExecutablePath.$trModule3_closure+1;
         const System.Environment.ExecutablePath.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.371250964 UTC

[section ""cstring" . System.Environment.ExecutablePath.getExecutablePath4_bytes" {
     System.Environment.ExecutablePath.getExecutablePath4_bytes:
         I8[] [47,112,114,111,99,47,115,101,108,102,47,101,120,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.373341074 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath_file_closure" {
     System.Environment.ExecutablePath.getExecutablePath_file_closure:
         const System.Environment.ExecutablePath.getExecutablePath_file_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.ExecutablePath.getExecutablePath_file_entry() //  [R1]
         { info_tbl: [(ccnf1,
                       label: System.Environment.ExecutablePath.getExecutablePath_file_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnf1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccnf2; else goto ccnf3;
       ccnf2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccnf3: // global
           (_ccneY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccneY::I64 == 0) goto ccnf0; else goto ccneZ;
       ccnf0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccneZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccneY::I64;
           R2 = System.Environment.ExecutablePath.getExecutablePath4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.377508001 UTC

[section ""cstring" . System.Environment.ExecutablePath.getExecutablePath3_bytes" {
     System.Environment.ExecutablePath.getExecutablePath3_bytes:
         I8[] [114,101,97,100,83,121,109,98,111,108,105,99,76,105,110,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.379486684 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath2_closure" {
     System.Environment.ExecutablePath.getExecutablePath2_closure:
         const System.Environment.ExecutablePath.getExecutablePath2_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.ExecutablePath.getExecutablePath2_entry() //  [R1]
         { info_tbl: [(ccnfi,
                       label: System.Environment.ExecutablePath.getExecutablePath2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnfi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccnfj; else goto ccnfk;
       ccnfj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccnfk: // global
           (_ccnff::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccnff::I64 == 0) goto ccnfh; else goto ccnfg;
       ccnfh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccnfg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccnff::I64;
           R2 = System.Environment.ExecutablePath.getExecutablePath3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.384886126 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath1_closure" {
     System.Environment.ExecutablePath.getExecutablePath1_closure:
         const System.Environment.ExecutablePath.getExecutablePath1_info;
         const 0;
 },
 sat_scnb3_entry() //  [R1]
         { info_tbl: [(ccng8,
                       label: sat_scnb3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccng8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccngc; else goto ccngd;
       ccngc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccngd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccng5_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucngh; else goto ccng6;
       ucngh: // global
           call _ccng5(R1) args: 0, res: 0, upd: 0;
       ccng6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccng5() //  [R1]
         { info_tbl: [(ccng5,
                       label: block_ccng5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccng5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccngg; else goto ccngf;
       ccngg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccngf: // global
           _scnb2::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _scnb2::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scnb5_entry() //  [R1, R2]
         { info_tbl: [(ccngi,
                       label: sat_scnb5_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccngi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccngj; else goto ccngk;
       ccngj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccngk: // global
           I64[Sp - 24] = block_ccnfJ_info;
           _scnaM::P64 = P64[R1 + 6];
           _scnaL::I64 = I64[R1 + 14];
           R1 = R2;
           I64[Sp - 16] = _scnaL::I64;
           P64[Sp - 8] = _scnaM::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucngF; else goto ccnfK;
       ucngF: // global
           call _ccnfJ(R1) args: 0, res: 0, upd: 0;
       ccnfK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccnfJ() //  [R1]
         { info_tbl: [(ccnfJ,
                       label: block_ccnfJ_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnfJ: // global
           (_scnaU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [‘signed’] readlink(I64[R1 + 7], I64[Sp + 8], 4096);
           _scnaV::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scnaU::I64));
           if (_scnaV::I64 != (-1)) goto ucngC; else goto ccngx;
       ucngC: // global
           I64[Sp + 8] = _scnaV::I64;
           Sp = Sp + 8;
           call _ccngn() args: 0, res: 0, upd: 0;
       ccngx: // global
           I64[Sp + 8] = block_ccnfZ_info;
           R3 = System.Environment.ExecutablePath.getExecutablePath_file_closure;
           R2 = System.Environment.ExecutablePath.getExecutablePath2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrnoPath1_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccngn() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccngn: // global
           Hp = Hp + 40;
           _scnaV::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto ccngv; else goto ccngu;
       ccngv: // global
           HpAlloc = 40;
           I64[Sp] = block_ccngm_info;
           R1 = _scnaV::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccngu: // global
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _scnaV::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 31;
           R2 = Hp - 15;
           Sp = Sp + 16;
           call System.Posix.Internals.peekFilePathLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _ccngm() //  [R1]
         { info_tbl: [(ccngm,
                       label: block_ccngm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccngm: // global
           I64[Sp] = R1;
           call _ccngn() args: 0, res: 0, upd: 0;
     }
 },
 _ccnfZ() //  [R1]
         { info_tbl: [(ccnfZ,
                       label: block_ccnfZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnfZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccngB; else goto ccngA;
       ccngB: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccngA: // global
           I64[Hp - 40] = sat_scnb3_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 40;
           R2 = Hp - 15;
           Sp = Sp + 16;
           call System.Posix.Internals.peekFilePathLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 System.Environment.ExecutablePath.getExecutablePath1_entry() //  []
         { info_tbl: [(ccngH,
                       label: System.Environment.ExecutablePath.getExecutablePath1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccngH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccngI; else goto ccngJ;
       ccngI: // global
           R1 = System.Environment.ExecutablePath.getExecutablePath1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccngJ: // global
           I64[Sp - 8] = block_ccnfw_info;
           R2 = 1;
           R1 = 4097;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccnfw() //  [R1]
         { info_tbl: [(ccnfw,
                       label: block_ccnfw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnfw: // global
           I64[Sp - 8] = block_ccnfy_info;
           _scnaH::P64 = R1;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp] = _scnaH::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccnfy() //  [R1]
         { info_tbl: [(ccnfy,
                       label: block_ccnfy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnfy: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccngN; else goto ccngM;
       ccngN: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccngM: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           _scnaL::I64 = P64[Sp + 8] + 16;
           I64[Hp - 24] = _scnaL::I64;
           I64[Hp - 16] = sat_scnb5_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = _scnaL::I64;
           I64[Sp] = block_ccngO_info;
           R4 = Hp - 14;
           R3 = System.Environment.ExecutablePath.getExecutablePath_file_closure;
           R2 = R1;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccngO() //  [R1]
         { info_tbl: [(ccngO,
                       label: block_ccngO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccngO: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.408637401 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath_closure" {
     System.Environment.ExecutablePath.getExecutablePath_closure:
         const System.Environment.ExecutablePath.getExecutablePath_info;
         const 0;
 },
 System.Environment.ExecutablePath.getExecutablePath_entry() //  []
         { info_tbl: [(ccnhG,
                       label: System.Environment.ExecutablePath.getExecutablePath_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnhG: // global
           call System.Environment.ExecutablePath.getExecutablePath1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.412111427 UTC

[section ""relreadonly" . ScncS_srt" {
     ScncS_srt:
         const Foreign.C.Error.throwErrnoPath1_closure;
         const System.Posix.Internals.peekFilePathLen1_closure;
         const System.Environment.ExecutablePath.getExecutablePath2_closure;
         const System.Environment.ExecutablePath.getExecutablePath_file_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const System.Environment.ExecutablePath.getExecutablePath1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.499424676 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:16.500498091 UTC

[section ""cstring" . System.Environment.ExecutablePath.$trModule4_bytes" {
     System.Environment.ExecutablePath.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.502458506 UTC

[section ""data" . System.Environment.ExecutablePath.$trModule3_closure" {
     System.Environment.ExecutablePath.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.ExecutablePath.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.504365635 UTC

[section ""cstring" . System.Environment.ExecutablePath.$trModule2_bytes" {
     System.Environment.ExecutablePath.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,69,110,118,105,114,111,110,109,101,110,116,46,69,120,101,99,117,116,97,98,108,101,80,97,116,104]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.506284626 UTC

[section ""data" . System.Environment.ExecutablePath.$trModule1_closure" {
     System.Environment.ExecutablePath.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.ExecutablePath.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.50816836 UTC

[section ""data" . System.Environment.ExecutablePath.$trModule_closure" {
     System.Environment.ExecutablePath.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Environment.ExecutablePath.$trModule3_closure+1;
         const System.Environment.ExecutablePath.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.510241194 UTC

[section ""cstring" . System.Environment.ExecutablePath.getExecutablePath4_bytes" {
     System.Environment.ExecutablePath.getExecutablePath4_bytes:
         I8[] [47,112,114,111,99,47,115,101,108,102,47,101,120,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.512513837 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath_file_closure" {
     System.Environment.ExecutablePath.getExecutablePath_file_closure:
         const System.Environment.ExecutablePath.getExecutablePath_file_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.ExecutablePath.getExecutablePath_file_entry() //  [R1]
         { info_tbl: [(ccniz,
                       label: System.Environment.ExecutablePath.getExecutablePath_file_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccniz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccniA; else goto ccniB;
       ccniA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccniB: // global
           (_ccniw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccniw::I64 == 0) goto ccniy; else goto ccnix;
       ccniy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccnix: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccniw::I64;
           R2 = System.Environment.ExecutablePath.getExecutablePath4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.517197277 UTC

[section ""cstring" . System.Environment.ExecutablePath.getExecutablePath3_bytes" {
     System.Environment.ExecutablePath.getExecutablePath3_bytes:
         I8[] [114,101,97,100,83,121,109,98,111,108,105,99,76,105,110,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.519350463 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath2_closure" {
     System.Environment.ExecutablePath.getExecutablePath2_closure:
         const System.Environment.ExecutablePath.getExecutablePath2_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.ExecutablePath.getExecutablePath2_entry() //  [R1]
         { info_tbl: [(ccniR,
                       label: System.Environment.ExecutablePath.getExecutablePath2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccniR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccniS; else goto ccniT;
       ccniS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccniT: // global
           (_ccniO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccniO::I64 == 0) goto ccniQ; else goto ccniP;
       ccniQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccniP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccniO::I64;
           R2 = System.Environment.ExecutablePath.getExecutablePath3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.525954198 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath1_closure" {
     System.Environment.ExecutablePath.getExecutablePath1_closure:
         const System.Environment.ExecutablePath.getExecutablePath1_info;
         const 0;
 },
 sat_scnig_entry() //  [R1]
         { info_tbl: [(ccnjI,
                       label: sat_scnig_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnjI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccnjM; else goto ccnjN;
       ccnjM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccnjN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccnjF_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucnjR; else goto ccnjG;
       ucnjR: // global
           call _ccnjF(R1) args: 0, res: 0, upd: 0;
       ccnjG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccnjF() //  [R1]
         { info_tbl: [(ccnjF,
                       label: block_ccnjF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnjF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccnjQ; else goto ccnjP;
       ccnjQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccnjP: // global
           _scnif::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _scnif::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scnii_entry() //  [R1, R2]
         { info_tbl: [(ccnjS,
                       label: sat_scnii_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnjS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccnjT; else goto ccnjU;
       ccnjT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccnjU: // global
           I64[Sp - 24] = block_ccnjj_info;
           _scnhZ::P64 = P64[R1 + 6];
           _scnhY::I64 = I64[R1 + 14];
           R1 = R2;
           I64[Sp - 16] = _scnhY::I64;
           P64[Sp - 8] = _scnhZ::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucnkf; else goto ccnjk;
       ucnkf: // global
           call _ccnjj(R1) args: 0, res: 0, upd: 0;
       ccnjk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccnjj() //  [R1]
         { info_tbl: [(ccnjj,
                       label: block_ccnjj_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnjj: // global
           (_scni7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [‘signed’] readlink(I64[R1 + 7], I64[Sp + 8], 4096);
           _scni8::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scni7::I64));
           if (_scni8::I64 != (-1)) goto ucnkc; else goto ccnk7;
       ucnkc: // global
           I64[Sp + 8] = _scni8::I64;
           Sp = Sp + 8;
           call _ccnjX() args: 0, res: 0, upd: 0;
       ccnk7: // global
           I64[Sp + 8] = block_ccnjz_info;
           R3 = System.Environment.ExecutablePath.getExecutablePath_file_closure;
           R2 = System.Environment.ExecutablePath.getExecutablePath2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrnoPath1_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccnjX() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnjX: // global
           Hp = Hp + 40;
           _scni8::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto ccnk5; else goto ccnk4;
       ccnk5: // global
           HpAlloc = 40;
           I64[Sp] = block_ccnjW_info;
           R1 = _scni8::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccnk4: // global
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _scni8::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 31;
           R2 = Hp - 15;
           Sp = Sp + 16;
           call System.Posix.Internals.peekFilePathLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _ccnjW() //  [R1]
         { info_tbl: [(ccnjW,
                       label: block_ccnjW_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnjW: // global
           I64[Sp] = R1;
           call _ccnjX() args: 0, res: 0, upd: 0;
     }
 },
 _ccnjz() //  [R1]
         { info_tbl: [(ccnjz,
                       label: block_ccnjz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnjz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccnkb; else goto ccnka;
       ccnkb: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccnka: // global
           I64[Hp - 40] = sat_scnig_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 40;
           R2 = Hp - 15;
           Sp = Sp + 16;
           call System.Posix.Internals.peekFilePathLen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 System.Environment.ExecutablePath.getExecutablePath1_entry() //  []
         { info_tbl: [(ccnkh,
                       label: System.Environment.ExecutablePath.getExecutablePath1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnkh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccnki; else goto ccnkj;
       ccnki: // global
           R1 = System.Environment.ExecutablePath.getExecutablePath1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccnkj: // global
           I64[Sp - 8] = block_ccnj6_info;
           R2 = 1;
           R1 = 4097;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccnj6() //  [R1]
         { info_tbl: [(ccnj6,
                       label: block_ccnj6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnj6: // global
           I64[Sp - 8] = block_ccnj8_info;
           _scnhU::P64 = R1;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp] = _scnhU::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccnj8() //  [R1]
         { info_tbl: [(ccnj8,
                       label: block_ccnj8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnj8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccnkn; else goto ccnkm;
       ccnkn: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccnkm: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           _scnhY::I64 = P64[Sp + 8] + 16;
           I64[Hp - 24] = _scnhY::I64;
           I64[Hp - 16] = sat_scnii_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = _scnhY::I64;
           I64[Sp] = block_ccnko_info;
           R4 = Hp - 14;
           R3 = System.Environment.ExecutablePath.getExecutablePath_file_closure;
           R2 = R1;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccnko() //  [R1]
         { info_tbl: [(ccnko,
                       label: block_ccnko_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnko: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.55196669 UTC

[section ""data" . System.Environment.ExecutablePath.getExecutablePath_closure" {
     System.Environment.ExecutablePath.getExecutablePath_closure:
         const System.Environment.ExecutablePath.getExecutablePath_info;
         const 0;
 },
 System.Environment.ExecutablePath.getExecutablePath_entry() //  []
         { info_tbl: [(ccnlw,
                       label: System.Environment.ExecutablePath.getExecutablePath_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccnlw: // global
           call System.Environment.ExecutablePath.getExecutablePath1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:16.555738528 UTC

[section ""relreadonly" . Scnks_srt" {
     Scnks_srt:
         const Foreign.C.Error.throwErrnoPath1_closure;
         const System.Posix.Internals.peekFilePathLen1_closure;
         const System.Environment.ExecutablePath.getExecutablePath2_closure;
         const System.Environment.ExecutablePath.getExecutablePath_file_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const System.Environment.ExecutablePath.getExecutablePath1_closure;
 }]

