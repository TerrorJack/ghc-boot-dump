
==================== Output Cmm ====================
2018-03-16 16:07:19.098008416 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:19.098800936 UTC

[section ""data" . System.Environment.Blank.getEnv_closure" {
     System.Environment.Blank.getEnv_closure:
         const System.Environment.Blank.getEnv_info;
         const 0;
 },
 System.Environment.Blank.getEnv_entry() //  [R2]
         { info_tbl: [(ccqg1,
                       label: System.Environment.Blank.getEnv_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqg1: // global
           R2 = R2;
           call System.Environment.lookupEnv1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.099549221 UTC

[section ""cstring" . System.Environment.Blank.$trModule4_bytes" {
     System.Environment.Blank.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.10010777 UTC

[section ""data" . System.Environment.Blank.$trModule3_closure" {
     System.Environment.Blank.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.Blank.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.10065704 UTC

[section ""cstring" . System.Environment.Blank.$trModule2_bytes" {
     System.Environment.Blank.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,69,110,118,105,114,111,110,109,101,110,116,46,66,108,97,110,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.101181894 UTC

[section ""data" . System.Environment.Blank.$trModule1_closure" {
     System.Environment.Blank.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.Blank.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.101774923 UTC

[section ""data" . System.Environment.Blank.$trModule_closure" {
     System.Environment.Blank.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Environment.Blank.$trModule3_closure+1;
         const System.Environment.Blank.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.102926927 UTC

[section ""data" . System.Environment.Blank.getEnvDefault1_closure" {
     System.Environment.Blank.getEnvDefault1_closure:
         const System.Environment.Blank.getEnvDefault1_info;
         const 0;
 },
 sat_scqeH_entry() //  [R1]
         { info_tbl: [(ccqgh,
                       label: sat_scqeH_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqgh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqgi; else goto ccqgj;
       ccqgi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqgj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Maybe.fromMaybe_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Environment.Blank.getEnvDefault1_entry() //  [R2, R3]
         { info_tbl: [(ccqgk,
                       label: System.Environment.Blank.getEnvDefault1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqgk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccqgl; else goto ccqgm;
       ccqgl: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.Blank.getEnvDefault1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccqgm: // global
           I64[Sp - 24] = block_ccqg9_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqg9() //  [R1]
         { info_tbl: [(ccqg9,
                       label: block_ccqg9_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqg9: // global
           _scqey::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccqgb_info;
           R4 = System.Environment.getEnv3_closure+2;
           R3 = _scqey::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccqgb() //  [R1]
         { info_tbl: [(ccqgb,
                       label: block_ccqgb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqgb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccqgq; else goto ccqgp;
       ccqgq: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqgp: // global
           I64[Hp - 24] = sat_scqeH_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.104559976 UTC

[section ""data" . System.Environment.Blank.getEnvDefault_closure" {
     System.Environment.Blank.getEnvDefault_closure:
         const System.Environment.Blank.getEnvDefault_info;
         const 0;
 },
 System.Environment.Blank.getEnvDefault_entry() //  [R2, R3]
         { info_tbl: [(ccqgv,
                       label: System.Environment.Blank.getEnvDefault_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqgv: // global
           R3 = R3;
           R2 = R2;
           call System.Environment.Blank.getEnvDefault1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.105345055 UTC

[section ""cstring" . lvl_rcqet_bytes" {
     lvl_rcqet_bytes:
         I8[] [117,110,115,101,116,101,110,118]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.106080362 UTC

[section ""data" . lvl1_rcqeu_closure" {
     lvl1_rcqeu_closure:
         const lvl1_rcqeu_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rcqeu_entry() //  [R1]
         { info_tbl: [(ccqgE,
                       label: lvl1_rcqeu_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqgE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqgF; else goto ccqgG;
       ccqgF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqgG: // global
           (_ccqgB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccqgB::I64 == 0) goto ccqgD; else goto ccqgC;
       ccqgD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccqgC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccqgB::I64;
           R2 = lvl_rcqet_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.107130284 UTC

[section ""data" . System.Environment.Blank.unsetEnv3_closure" {
     System.Environment.Blank.unsetEnv3_closure:
         const System.Environment.Blank.unsetEnv3_info;
         const 0;
 },
 System.Environment.Blank.unsetEnv3_entry() //  [R2]
         { info_tbl: [(ccqgN,
                       label: System.Environment.Blank.unsetEnv3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqgN: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_rcqeu_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.108196387 UTC

[section ""data" . System.Environment.Blank.unsetEnv2_closure" {
     System.Environment.Blank.unsetEnv2_closure:
         const System.Environment.Blank.unsetEnv2_info;
         const 0;
 },
 System.Environment.Blank.unsetEnv2_entry() //  [R2]
         { info_tbl: [(ccqgX,
                       label: System.Environment.Blank.unsetEnv2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqgX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccqgY; else goto ccqgZ;
       ccqgY: // global
           R2 = R2;
           R1 = System.Environment.Blank.unsetEnv2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqgZ: // global
           I64[Sp - 8] = block_ccqgU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucqhl; else goto ccqgV;
       ucqhl: // global
           call _ccqgU(R1) args: 0, res: 0, upd: 0;
       ccqgV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqgU() //  [R1]
         { info_tbl: [(ccqgU,
                       label: block_ccqgU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqgU: // global
           (_scqeS::I64) = call "capi" arg hints:  [PtrHint]  result hints:  [‘signed’] ghczuwrapperZC0ZCbaseZCSystemziEnvironmentziBlankZCunsetenv(I64[R1 + 7]);
           if (%MO_SS_Conv_W64_W32(_scqeS::I64) == (-1) :: W32) goto ccqhg; else goto ccqha;
       ccqhg: // global
           (_scqeX::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scqeX::I64;
           Sp = Sp + 8;
           call System.Environment.Blank.unsetEnv3_entry(R2) args: 8, res: 0, upd: 8;
       ccqha: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.10956043 UTC

[section ""data" . System.Environment.Blank.unsetEnv1_closure" {
     System.Environment.Blank.unsetEnv1_closure:
         const System.Environment.Blank.unsetEnv1_info;
         const 0;
 },
 System.Environment.Blank.unsetEnv1_entry() //  [R2]
         { info_tbl: [(ccqhs,
                       label: System.Environment.Blank.unsetEnv1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqhs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqht; else goto ccqhu;
       ccqht: // global
           R2 = R2;
           R1 = System.Environment.Blank.unsetEnv1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqhu: // global
           I64[Sp - 16] = block_ccqhq_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqhq() //  [R1]
         { info_tbl: [(ccqhq,
                       label: block_ccqhq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqhq: // global
           R4 = System.Environment.Blank.unsetEnv2_closure+2;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.110632924 UTC

[section ""data" . System.Environment.Blank.unsetEnv_closure" {
     System.Environment.Blank.unsetEnv_closure:
         const System.Environment.Blank.unsetEnv_info;
         const 0;
 },
 System.Environment.Blank.unsetEnv_entry() //  [R2]
         { info_tbl: [(ccqhA,
                       label: System.Environment.Blank.unsetEnv_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqhA: // global
           R2 = R2;
           call System.Environment.Blank.unsetEnv1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.111360001 UTC

[section ""cstring" . lvl2_rcqev_bytes" {
     lvl2_rcqev_bytes:
         I8[] [115,101,116,101,110,118]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.112103192 UTC

[section ""data" . lvl3_rcqew_closure" {
     lvl3_rcqew_closure:
         const lvl3_rcqew_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rcqew_entry() //  [R1]
         { info_tbl: [(ccqhJ,
                       label: lvl3_rcqew_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqhJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqhK; else goto ccqhL;
       ccqhK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqhL: // global
           (_ccqhG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccqhG::I64 == 0) goto ccqhI; else goto ccqhH;
       ccqhI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccqhH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccqhG::I64;
           R2 = lvl2_rcqev_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.113120449 UTC

[section ""data" . System.Environment.Blank.setEnv3_closure" {
     System.Environment.Blank.setEnv3_closure:
         const System.Environment.Blank.setEnv3_info;
         const 0;
 },
 System.Environment.Blank.setEnv3_entry() //  [R2]
         { info_tbl: [(ccqhS,
                       label: System.Environment.Blank.setEnv3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqhS: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl3_rcqew_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.114829633 UTC

[section ""data" . System.Environment.Blank.setEnv2_closure" {
     System.Environment.Blank.setEnv2_closure:
         const System.Environment.Blank.setEnv2_info;
         const 0;
 },
 sat_scqfy_entry() //  [R1, R2]
         { info_tbl: [(ccqig,
                       label: sat_scqfy_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqig: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqik; else goto ccqil;
       ccqik: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqil: // global
           I64[Sp - 16] = block_ccqid_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucqiN; else goto ccqie;
       ucqiN: // global
           call _ccqid(R1) args: 0, res: 0, upd: 0;
       ccqie: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqid() //  [R1]
         { info_tbl: [(ccqid,
                       label: block_ccqid_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqid: // global
           I64[Sp] = block_ccqij_info;
           _scqfl::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _scqfl::I64;
           if (R1 & 7 != 0) goto ucqiM; else goto ccqin;
       ucqiM: // global
           call _ccqij(R1) args: 0, res: 0, upd: 0;
       ccqin: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqij() //  [R1]
         { info_tbl: [(ccqij,
                       label: block_ccqij_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqij: // global
           (_scqfr::I64) = call "ccall" arg hints:  [PtrHint, PtrHint,
                                                     ‘signed’]  result hints:  [‘signed’] setenv(I64[Sp + 8], I64[R1 + 7], 1);
           if (%MO_SS_Conv_W64_W32(_scqfr::I64) == (-1) :: W32) goto ccqiH; else goto ccqiB;
       ccqiH: // global
           (_scqfw::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scqfw::I64;
           Sp = Sp + 16;
           call System.Environment.Blank.setEnv3_entry(R2) args: 8, res: 0, upd: 8;
       ccqiB: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_scqfz_entry() //  [R1, R2]
         { info_tbl: [(ccqiO,
                       label: sat_scqfz_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqiO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccqiP; else goto ccqiQ;
       ccqiP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqiQ: // global
           I64[Sp - 24] = block_ccqi6_info;
           _scqf8::P64 = P64[R1 + 6];
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp - 16] = _scqf8::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqi6() //  [R1]
         { info_tbl: [(ccqi6,
                       label: block_ccqi6_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqi6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccqiT; else goto ccqiS;
       ccqiT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqiS: // global
           I64[Hp - 8] = sat_scqfy_info;
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 6;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 System.Environment.Blank.setEnv2_entry() //  [R2, R3]
         { info_tbl: [(ccqiU,
                       label: System.Environment.Blank.setEnv2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqiU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccqiV; else goto ccqiW;
       ccqiV: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.Blank.setEnv2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccqiW: // global
           I64[Sp - 24] = block_ccqhZ_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqhZ() //  [R1]
         { info_tbl: [(ccqhZ,
                       label: block_ccqhZ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqhZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccqiZ; else goto ccqiY;
       ccqiZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqiY: // global
           I64[Hp - 8] = sat_scqfz_info;
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 6;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.117477811 UTC

[section ""data" . System.Environment.Blank.setEnv9_closure" {
     System.Environment.Blank.setEnv9_closure:
         const System.Environment.Blank.setEnv9_info;
 },
 System.Environment.Blank.setEnv9_entry() //  [R2]
         { info_tbl: [(ccqj7,
                       label: System.Environment.Blank.setEnv9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqj7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccqj8; else goto ccqj9;
       ccqj8: // global
           R2 = R2;
           R1 = System.Environment.Blank.setEnv9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqj9: // global
           I64[Sp - 8] = block_ccqj4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucqjh; else goto ccqj5;
       ucqjh: // global
           call _ccqj4(R1) args: 0, res: 0, upd: 0;
       ccqj5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqj4() //  [R1]
         { info_tbl: [(ccqj4,
                       label: block_ccqj4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqj4: // global
           if (I64[R1 + 7] == 0) goto ccqjg; else goto ccqjf;
       ccqjg: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccqjf: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.118528985 UTC

[section ""cstring" . System.Environment.Blank.setEnv8_bytes" {
     System.Environment.Blank.setEnv8_bytes:
         I8[] [115,101,116,69,110,118]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.119249825 UTC

[section ""data" . System.Environment.Blank.setEnv7_closure" {
     System.Environment.Blank.setEnv7_closure:
         const System.Environment.Blank.setEnv7_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.Blank.setEnv7_entry() //  [R1]
         { info_tbl: [(ccqjo,
                       label: System.Environment.Blank.setEnv7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqjo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqjp; else goto ccqjq;
       ccqjp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqjq: // global
           (_ccqjl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccqjl::I64 == 0) goto ccqjn; else goto ccqjm;
       ccqjn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccqjm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccqjl::I64;
           R2 = System.Environment.Blank.setEnv8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.120145078 UTC

[section ""data" . System.Environment.Blank.setEnv6_closure" {
     System.Environment.Blank.setEnv6_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.InvalidArgument_closure+1;
         const System.Environment.Blank.setEnv7_closure;
         const GHC.Types.[]_closure+1;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.120969631 UTC

[section ""data" . System.Environment.Blank.setEnv5_closure" {
     System.Environment.Blank.setEnv5_closure:
         const System.Environment.Blank.setEnv5_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.Blank.setEnv5_entry() //  [R1]
         { info_tbl: [(ccqjx,
                       label: System.Environment.Blank.setEnv5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqjx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqjy; else goto ccqjz;
       ccqjy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqjz: // global
           (_ccqju::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccqju::I64 == 0) goto ccqjw; else goto ccqjv;
       ccqjw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccqjv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccqju::I64;
           R2 = System.Environment.Blank.setEnv6_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.121885481 UTC

[section ""data" . System.Environment.Blank.setEnv4_closure" {
     System.Environment.Blank.setEnv4_closure:
         const GHC.Types.C#_con_info;
         const 61;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.123622417 UTC

[section ""data" . System.Environment.Blank.setEnv1_closure" {
     System.Environment.Blank.setEnv1_closure:
         const System.Environment.Blank.setEnv1_info;
         const 0;
 },
 sat_scqfU_entry() //  [R1]
         { info_tbl: [(ccqk5,
                       label: sat_scqfU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqk5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqk6; else goto ccqk7;
       ccqk6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqk7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = System.Environment.Blank.setEnv9_closure+1;
           Sp = Sp - 16;
           call GHC.List.takeWhile_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scqfW_entry() //  [R1]
         { info_tbl: [(ccqke,
                       label: sat_scqfW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqke: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqkf; else goto ccqkg;
       ccqkf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqkg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = System.Environment.Blank.setEnv9_closure+1;
           Sp = Sp - 16;
           call GHC.List.takeWhile_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Environment.Blank.setEnv1_entry() //  [R2, R3, R4]
         { info_tbl: [(ccqkl,
                       label: System.Environment.Blank.setEnv1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqkl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccqkm; else goto ccqkn;
       ccqkm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.Blank.setEnv1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccqkn: // global
           I64[Sp - 24] = block_ccqjE_info;
           _scqfF::P64 = R3;
           R3 = R2;
           R2 = System.Environment.Blank.setEnv9_closure+1;
           P64[Sp - 16] = _scqfF::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.List.takeWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccqjE() //  [R1]
         { info_tbl: [(ccqjE,
                       label: block_ccqjE_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqjE: // global
           if (R1 & 7 == 1) goto ucqkT; else goto ccqkj;
       ucqkT: // global
           Sp = Sp + 24;
           call _ccqkP() args: 0, res: 0, upd: 0;
       ccqkj: // global
           I64[Sp - 8] = block_ccqjJ_info;
           R4 = R1;
           R3 = System.Environment.Blank.setEnv4_closure+1;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccqjJ() //  [R1]
         { info_tbl: [(ccqjJ,
                       label: block_ccqjJ_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqjJ: // global
           if (R1 & 7 == 1) goto ccqkt; else goto ucqkU;
       ccqkt: // global
           I64[Sp] = block_ccqjN_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto ucqkW; else goto ccqjO;
       ucqkW: // global
           call _ccqjN(R1) args: 0, res: 0, upd: 0;
       ccqjO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ucqkU: // global
           Sp = Sp + 32;
           call _ccqkP() args: 0, res: 0, upd: 0;
     }
 },
 _ccqjN() //  [R1]
         { info_tbl: [(ccqjN,
                       label: block_ccqjN_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqjN: // global
           if (R1 & 7 == 1) goto ccqkw; else goto ccqkI;
       ccqkw: // global
           I64[Sp] = block_ccqjS_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       ccqkI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccqkL; else goto ccqkK;
       ccqkL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqkK: // global
           I64[Hp - 16] = sat_scqfW_info;
           P64[Hp] = P64[Sp + 16];
           R3 = Hp - 16;
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call System.Environment.Blank.setEnv2_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 _ccqjS() //  [R1]
         { info_tbl: [(ccqjS,
                       label: block_ccqjS_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqjS: // global
           I64[Sp] = block_ccqjU_info;
           R4 = System.Environment.getEnv3_closure+2;
           R3 = P64[Sp + 8];
           R2 = R1;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccqjU() //  [R1]
         { info_tbl: [(ccqjU,
                       label: block_ccqjU_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqjU: // global
           I64[Sp] = block_ccqjW_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ucqkY; else goto ccqjX;
       ucqkY: // global
           call _ccqjW(R1) args: 0, res: 0, upd: 0;
       ccqjX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqjW() //  [R1]
         { info_tbl: [(ccqjW,
                       label: block_ccqjW_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqjW: // global
           if (R1 & 7 == 1) goto ccqkA; else goto ccqkH;
       ccqkA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccqkD; else goto ccqkC;
       ccqkD: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqkC: // global
           I64[Hp - 16] = sat_scqfU_info;
           P64[Hp] = P64[Sp + 16];
           R3 = Hp - 16;
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call System.Environment.Blank.setEnv2_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccqkH: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccqkP() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqkP: // global
           R1 = System.Environment.Blank.setEnv5_closure;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.126850117 UTC

[section ""data" . System.Environment.Blank.setEnv_closure" {
     System.Environment.Blank.setEnv_closure:
         const System.Environment.Blank.setEnv_info;
         const 0;
 },
 System.Environment.Blank.setEnv_entry() //  [R2, R3, R4]
         { info_tbl: [(ccql3,
                       label: System.Environment.Blank.setEnv_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccql3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call System.Environment.Blank.setEnv1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.127605669 UTC

[section ""relreadonly" . Scqg4_srt" {
     Scqg4_srt:
         const System.Environment.lookupEnv1_closure;
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const System.Environment.getEnv3_closure;
         const System.Environment.Blank.getEnvDefault1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_rcqeu_closure;
         const System.Environment.Blank.unsetEnv2_closure;
         const System.Environment.Blank.unsetEnv3_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const System.Environment.Blank.unsetEnv1_closure;
         const lvl3_rcqew_closure;
         const System.Environment.Blank.setEnv3_closure;
         const System.Environment.Blank.setEnv2_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const System.Environment.Blank.setEnv6_closure;
         const System.Environment.Blank.setEnv1_closure;
         const System.Environment.Blank.setEnv5_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.128263075 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:19.128887935 UTC

[section ""data" . System.Environment.Blank.getEnv_closure" {
     System.Environment.Blank.getEnv_closure:
         const System.Environment.Blank.getEnv_info;
         const 0;
 },
 System.Environment.Blank.getEnv_entry() //  [R2]
         { info_tbl: [(ccqla,
                       label: System.Environment.Blank.getEnv_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqla: // global
           R2 = R2;
           call System.Environment.lookupEnv1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.129621748 UTC

[section ""cstring" . System.Environment.Blank.$trModule4_bytes" {
     System.Environment.Blank.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.13017329 UTC

[section ""data" . System.Environment.Blank.$trModule3_closure" {
     System.Environment.Blank.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.Blank.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.130720768 UTC

[section ""cstring" . System.Environment.Blank.$trModule2_bytes" {
     System.Environment.Blank.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,69,110,118,105,114,111,110,109,101,110,116,46,66,108,97,110,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.131248884 UTC

[section ""data" . System.Environment.Blank.$trModule1_closure" {
     System.Environment.Blank.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.Blank.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.131832569 UTC

[section ""data" . System.Environment.Blank.$trModule_closure" {
     System.Environment.Blank.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Environment.Blank.$trModule3_closure+1;
         const System.Environment.Blank.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.132908264 UTC

[section ""data" . System.Environment.Blank.getEnvDefault1_closure" {
     System.Environment.Blank.getEnvDefault1_closure:
         const System.Environment.Blank.getEnvDefault1_info;
         const 0;
 },
 sat_scqeH_entry() //  [R1]
         { info_tbl: [(ccqlp,
                       label: sat_scqeH_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqlp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqlq; else goto ccqlr;
       ccqlq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqlr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Maybe.fromMaybe_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Environment.Blank.getEnvDefault1_entry() //  [R2, R3]
         { info_tbl: [(ccqls,
                       label: System.Environment.Blank.getEnvDefault1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqls: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccqlt; else goto ccqlu;
       ccqlt: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.Blank.getEnvDefault1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccqlu: // global
           I64[Sp - 24] = block_ccqlh_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqlh() //  [R1]
         { info_tbl: [(ccqlh,
                       label: block_ccqlh_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqlh: // global
           _scqey::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccqlj_info;
           R4 = System.Environment.getEnv3_closure+2;
           R3 = _scqey::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccqlj() //  [R1]
         { info_tbl: [(ccqlj,
                       label: block_ccqlj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqlj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccqly; else goto ccqlx;
       ccqly: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqlx: // global
           I64[Hp - 24] = sat_scqeH_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.134571079 UTC

[section ""data" . System.Environment.Blank.getEnvDefault_closure" {
     System.Environment.Blank.getEnvDefault_closure:
         const System.Environment.Blank.getEnvDefault_info;
         const 0;
 },
 System.Environment.Blank.getEnvDefault_entry() //  [R2, R3]
         { info_tbl: [(ccqlD,
                       label: System.Environment.Blank.getEnvDefault_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqlD: // global
           R3 = R3;
           R2 = R2;
           call System.Environment.Blank.getEnvDefault1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.135329994 UTC

[section ""cstring" . lvl_rcqet_bytes" {
     lvl_rcqet_bytes:
         I8[] [117,110,115,101,116,101,110,118]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.136111891 UTC

[section ""data" . lvl1_rcqeu_closure" {
     lvl1_rcqeu_closure:
         const lvl1_rcqeu_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rcqeu_entry() //  [R1]
         { info_tbl: [(ccqlM,
                       label: lvl1_rcqeu_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqlM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqlN; else goto ccqlO;
       ccqlN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqlO: // global
           (_ccqlJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccqlJ::I64 == 0) goto ccqlL; else goto ccqlK;
       ccqlL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccqlK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccqlJ::I64;
           R2 = lvl_rcqet_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.137169432 UTC

[section ""data" . System.Environment.Blank.unsetEnv3_closure" {
     System.Environment.Blank.unsetEnv3_closure:
         const System.Environment.Blank.unsetEnv3_info;
         const 0;
 },
 System.Environment.Blank.unsetEnv3_entry() //  [R2]
         { info_tbl: [(ccqlV,
                       label: System.Environment.Blank.unsetEnv3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqlV: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_rcqeu_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.139450535 UTC

[section ""data" . System.Environment.Blank.unsetEnv2_closure" {
     System.Environment.Blank.unsetEnv2_closure:
         const System.Environment.Blank.unsetEnv2_info;
         const 0;
 },
 System.Environment.Blank.unsetEnv2_entry() //  [R2]
         { info_tbl: [(ccqm5,
                       label: System.Environment.Blank.unsetEnv2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqm5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccqm6; else goto ccqm7;
       ccqm6: // global
           R2 = R2;
           R1 = System.Environment.Blank.unsetEnv2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqm7: // global
           I64[Sp - 8] = block_ccqm2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucqmt; else goto ccqm3;
       ucqmt: // global
           call _ccqm2(R1) args: 0, res: 0, upd: 0;
       ccqm3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqm2() //  [R1]
         { info_tbl: [(ccqm2,
                       label: block_ccqm2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqm2: // global
           (_scqeS::I64) = call "capi" arg hints:  [PtrHint]  result hints:  [‘signed’] ghczuwrapperZC0ZCbaseZCSystemziEnvironmentziBlankZCunsetenv(I64[R1 + 7]);
           if (%MO_SS_Conv_W64_W32(_scqeS::I64) == (-1) :: W32) goto ccqmo; else goto ccqmi;
       ccqmo: // global
           (_scqeX::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scqeX::I64;
           Sp = Sp + 8;
           call System.Environment.Blank.unsetEnv3_entry(R2) args: 8, res: 0, upd: 8;
       ccqmi: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.140767949 UTC

[section ""data" . System.Environment.Blank.unsetEnv1_closure" {
     System.Environment.Blank.unsetEnv1_closure:
         const System.Environment.Blank.unsetEnv1_info;
         const 0;
 },
 System.Environment.Blank.unsetEnv1_entry() //  [R2]
         { info_tbl: [(ccqmA,
                       label: System.Environment.Blank.unsetEnv1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqmA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqmB; else goto ccqmC;
       ccqmB: // global
           R2 = R2;
           R1 = System.Environment.Blank.unsetEnv1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqmC: // global
           I64[Sp - 16] = block_ccqmy_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqmy() //  [R1]
         { info_tbl: [(ccqmy,
                       label: block_ccqmy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqmy: // global
           R4 = System.Environment.Blank.unsetEnv2_closure+2;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.141855968 UTC

[section ""data" . System.Environment.Blank.unsetEnv_closure" {
     System.Environment.Blank.unsetEnv_closure:
         const System.Environment.Blank.unsetEnv_info;
         const 0;
 },
 System.Environment.Blank.unsetEnv_entry() //  [R2]
         { info_tbl: [(ccqmI,
                       label: System.Environment.Blank.unsetEnv_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqmI: // global
           R2 = R2;
           call System.Environment.Blank.unsetEnv1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.142553582 UTC

[section ""cstring" . lvl2_rcqev_bytes" {
     lvl2_rcqev_bytes:
         I8[] [115,101,116,101,110,118]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.143283832 UTC

[section ""data" . lvl3_rcqew_closure" {
     lvl3_rcqew_closure:
         const lvl3_rcqew_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rcqew_entry() //  [R1]
         { info_tbl: [(ccqmR,
                       label: lvl3_rcqew_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqmR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqmS; else goto ccqmT;
       ccqmS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqmT: // global
           (_ccqmO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccqmO::I64 == 0) goto ccqmQ; else goto ccqmP;
       ccqmQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccqmP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccqmO::I64;
           R2 = lvl2_rcqev_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.144265301 UTC

[section ""data" . System.Environment.Blank.setEnv3_closure" {
     System.Environment.Blank.setEnv3_closure:
         const System.Environment.Blank.setEnv3_info;
         const 0;
 },
 System.Environment.Blank.setEnv3_entry() //  [R2]
         { info_tbl: [(ccqn0,
                       label: System.Environment.Blank.setEnv3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqn0: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl3_rcqew_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.145992848 UTC

[section ""data" . System.Environment.Blank.setEnv2_closure" {
     System.Environment.Blank.setEnv2_closure:
         const System.Environment.Blank.setEnv2_info;
         const 0;
 },
 sat_scqfy_entry() //  [R1, R2]
         { info_tbl: [(ccqno,
                       label: sat_scqfy_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqno: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqns; else goto ccqnt;
       ccqns: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqnt: // global
           I64[Sp - 16] = block_ccqnl_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucqnV; else goto ccqnm;
       ucqnV: // global
           call _ccqnl(R1) args: 0, res: 0, upd: 0;
       ccqnm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqnl() //  [R1]
         { info_tbl: [(ccqnl,
                       label: block_ccqnl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqnl: // global
           I64[Sp] = block_ccqnr_info;
           _scqfl::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _scqfl::I64;
           if (R1 & 7 != 0) goto ucqnU; else goto ccqnv;
       ucqnU: // global
           call _ccqnr(R1) args: 0, res: 0, upd: 0;
       ccqnv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqnr() //  [R1]
         { info_tbl: [(ccqnr,
                       label: block_ccqnr_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqnr: // global
           (_scqfr::I64) = call "ccall" arg hints:  [PtrHint, PtrHint,
                                                     ‘signed’]  result hints:  [‘signed’] setenv(I64[Sp + 8], I64[R1 + 7], 1);
           if (%MO_SS_Conv_W64_W32(_scqfr::I64) == (-1) :: W32) goto ccqnP; else goto ccqnJ;
       ccqnP: // global
           (_scqfw::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scqfw::I64;
           Sp = Sp + 16;
           call System.Environment.Blank.setEnv3_entry(R2) args: 8, res: 0, upd: 8;
       ccqnJ: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_scqfz_entry() //  [R1, R2]
         { info_tbl: [(ccqnW,
                       label: sat_scqfz_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqnW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccqnX; else goto ccqnY;
       ccqnX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqnY: // global
           I64[Sp - 24] = block_ccqne_info;
           _scqf8::P64 = P64[R1 + 6];
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp - 16] = _scqf8::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqne() //  [R1]
         { info_tbl: [(ccqne,
                       label: block_ccqne_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqne: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccqo1; else goto ccqo0;
       ccqo1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqo0: // global
           I64[Hp - 8] = sat_scqfy_info;
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 6;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 System.Environment.Blank.setEnv2_entry() //  [R2, R3]
         { info_tbl: [(ccqo2,
                       label: System.Environment.Blank.setEnv2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqo2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccqo3; else goto ccqo4;
       ccqo3: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.Blank.setEnv2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccqo4: // global
           I64[Sp - 24] = block_ccqn7_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqn7() //  [R1]
         { info_tbl: [(ccqn7,
                       label: block_ccqn7_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqn7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccqo7; else goto ccqo6;
       ccqo7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqo6: // global
           I64[Hp - 8] = sat_scqfz_info;
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 6;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.148595813 UTC

[section ""data" . System.Environment.Blank.setEnv9_closure" {
     System.Environment.Blank.setEnv9_closure:
         const System.Environment.Blank.setEnv9_info;
 },
 System.Environment.Blank.setEnv9_entry() //  [R2]
         { info_tbl: [(ccqof,
                       label: System.Environment.Blank.setEnv9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqof: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccqog; else goto ccqoh;
       ccqog: // global
           R2 = R2;
           R1 = System.Environment.Blank.setEnv9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqoh: // global
           I64[Sp - 8] = block_ccqoc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucqop; else goto ccqod;
       ucqop: // global
           call _ccqoc(R1) args: 0, res: 0, upd: 0;
       ccqod: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqoc() //  [R1]
         { info_tbl: [(ccqoc,
                       label: block_ccqoc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqoc: // global
           if (I64[R1 + 7] == 0) goto ccqoo; else goto ccqon;
       ccqoo: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccqon: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.1496653 UTC

[section ""cstring" . System.Environment.Blank.setEnv8_bytes" {
     System.Environment.Blank.setEnv8_bytes:
         I8[] [115,101,116,69,110,118]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.150377923 UTC

[section ""data" . System.Environment.Blank.setEnv7_closure" {
     System.Environment.Blank.setEnv7_closure:
         const System.Environment.Blank.setEnv7_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.Blank.setEnv7_entry() //  [R1]
         { info_tbl: [(ccqow,
                       label: System.Environment.Blank.setEnv7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqow: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqox; else goto ccqoy;
       ccqox: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqoy: // global
           (_ccqot::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccqot::I64 == 0) goto ccqov; else goto ccqou;
       ccqov: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccqou: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccqot::I64;
           R2 = System.Environment.Blank.setEnv8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.151295921 UTC

[section ""data" . System.Environment.Blank.setEnv6_closure" {
     System.Environment.Blank.setEnv6_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.InvalidArgument_closure+1;
         const System.Environment.Blank.setEnv7_closure;
         const GHC.Types.[]_closure+1;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.152119549 UTC

[section ""data" . System.Environment.Blank.setEnv5_closure" {
     System.Environment.Blank.setEnv5_closure:
         const System.Environment.Blank.setEnv5_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.Blank.setEnv5_entry() //  [R1]
         { info_tbl: [(ccqoF,
                       label: System.Environment.Blank.setEnv5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqoF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqoG; else goto ccqoH;
       ccqoG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqoH: // global
           (_ccqoC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccqoC::I64 == 0) goto ccqoE; else goto ccqoD;
       ccqoE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccqoD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccqoC::I64;
           R2 = System.Environment.Blank.setEnv6_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.153023304 UTC

[section ""data" . System.Environment.Blank.setEnv4_closure" {
     System.Environment.Blank.setEnv4_closure:
         const GHC.Types.C#_con_info;
         const 61;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.155494491 UTC

[section ""data" . System.Environment.Blank.setEnv1_closure" {
     System.Environment.Blank.setEnv1_closure:
         const System.Environment.Blank.setEnv1_info;
         const 0;
 },
 sat_scqfU_entry() //  [R1]
         { info_tbl: [(ccqpd,
                       label: sat_scqfU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqpd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqpe; else goto ccqpf;
       ccqpe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqpf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = System.Environment.Blank.setEnv9_closure+1;
           Sp = Sp - 16;
           call GHC.List.takeWhile_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scqfW_entry() //  [R1]
         { info_tbl: [(ccqpm,
                       label: sat_scqfW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqpm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqpn; else goto ccqpo;
       ccqpn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqpo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = System.Environment.Blank.setEnv9_closure+1;
           Sp = Sp - 16;
           call GHC.List.takeWhile_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Environment.Blank.setEnv1_entry() //  [R2, R3, R4]
         { info_tbl: [(ccqpt,
                       label: System.Environment.Blank.setEnv1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqpt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccqpu; else goto ccqpv;
       ccqpu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.Blank.setEnv1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccqpv: // global
           I64[Sp - 24] = block_ccqoM_info;
           _scqfF::P64 = R3;
           R3 = R2;
           R2 = System.Environment.Blank.setEnv9_closure+1;
           P64[Sp - 16] = _scqfF::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.List.takeWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccqoM() //  [R1]
         { info_tbl: [(ccqoM,
                       label: block_ccqoM_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqoM: // global
           if (R1 & 7 == 1) goto ucqq1; else goto ccqpr;
       ucqq1: // global
           Sp = Sp + 24;
           call _ccqpX() args: 0, res: 0, upd: 0;
       ccqpr: // global
           I64[Sp - 8] = block_ccqoR_info;
           R4 = R1;
           R3 = System.Environment.Blank.setEnv4_closure+1;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccqoR() //  [R1]
         { info_tbl: [(ccqoR,
                       label: block_ccqoR_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqoR: // global
           if (R1 & 7 == 1) goto ccqpB; else goto ucqq2;
       ccqpB: // global
           I64[Sp] = block_ccqoV_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto ucqq4; else goto ccqoW;
       ucqq4: // global
           call _ccqoV(R1) args: 0, res: 0, upd: 0;
       ccqoW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ucqq2: // global
           Sp = Sp + 32;
           call _ccqpX() args: 0, res: 0, upd: 0;
     }
 },
 _ccqoV() //  [R1]
         { info_tbl: [(ccqoV,
                       label: block_ccqoV_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqoV: // global
           if (R1 & 7 == 1) goto ccqpE; else goto ccqpQ;
       ccqpE: // global
           I64[Sp] = block_ccqp0_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       ccqpQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccqpT; else goto ccqpS;
       ccqpT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqpS: // global
           I64[Hp - 16] = sat_scqfW_info;
           P64[Hp] = P64[Sp + 16];
           R3 = Hp - 16;
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call System.Environment.Blank.setEnv2_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 _ccqp0() //  [R1]
         { info_tbl: [(ccqp0,
                       label: block_ccqp0_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqp0: // global
           I64[Sp] = block_ccqp2_info;
           R4 = System.Environment.getEnv3_closure+2;
           R3 = P64[Sp + 8];
           R2 = R1;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccqp2() //  [R1]
         { info_tbl: [(ccqp2,
                       label: block_ccqp2_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqp2: // global
           I64[Sp] = block_ccqp4_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ucqq6; else goto ccqp5;
       ucqq6: // global
           call _ccqp4(R1) args: 0, res: 0, upd: 0;
       ccqp5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqp4() //  [R1]
         { info_tbl: [(ccqp4,
                       label: block_ccqp4_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqp4: // global
           if (R1 & 7 == 1) goto ccqpI; else goto ccqpP;
       ccqpI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccqpL; else goto ccqpK;
       ccqpL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqpK: // global
           I64[Hp - 16] = sat_scqfU_info;
           P64[Hp] = P64[Sp + 16];
           R3 = Hp - 16;
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call System.Environment.Blank.setEnv2_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccqpP: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccqpX() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqpX: // global
           R1 = System.Environment.Blank.setEnv5_closure;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.158430646 UTC

[section ""data" . System.Environment.Blank.setEnv_closure" {
     System.Environment.Blank.setEnv_closure:
         const System.Environment.Blank.setEnv_info;
         const 0;
 },
 System.Environment.Blank.setEnv_entry() //  [R2, R3, R4]
         { info_tbl: [(ccqqb,
                       label: System.Environment.Blank.setEnv_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqqb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call System.Environment.Blank.setEnv1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.159187766 UTC

[section ""relreadonly" . Scqg4_srt" {
     Scqg4_srt:
         const System.Environment.lookupEnv1_closure;
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const System.Environment.getEnv3_closure;
         const System.Environment.Blank.getEnvDefault1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_rcqeu_closure;
         const System.Environment.Blank.unsetEnv2_closure;
         const System.Environment.Blank.unsetEnv3_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const System.Environment.Blank.unsetEnv1_closure;
         const lvl3_rcqew_closure;
         const System.Environment.Blank.setEnv3_closure;
         const System.Environment.Blank.setEnv2_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const System.Environment.Blank.setEnv6_closure;
         const System.Environment.Blank.setEnv1_closure;
         const System.Environment.Blank.setEnv5_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.160268447 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:19.161556298 UTC

[section ""data" . System.Environment.Blank.getEnv_closure" {
     System.Environment.Blank.getEnv_closure:
         const System.Environment.Blank.getEnv_info;
         const 0;
 },
 System.Environment.Blank.getEnv_entry() //  [R2]
         { info_tbl: [(ccqqi,
                       label: System.Environment.Blank.getEnv_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqqi: // global
           R2 = R2;
           call System.Environment.lookupEnv1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.164923683 UTC

[section ""cstring" . System.Environment.Blank.$trModule4_bytes" {
     System.Environment.Blank.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.166941991 UTC

[section ""data" . System.Environment.Blank.$trModule3_closure" {
     System.Environment.Blank.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.Blank.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.168571427 UTC

[section ""cstring" . System.Environment.Blank.$trModule2_bytes" {
     System.Environment.Blank.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,69,110,118,105,114,111,110,109,101,110,116,46,66,108,97,110,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.170242278 UTC

[section ""data" . System.Environment.Blank.$trModule1_closure" {
     System.Environment.Blank.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.Blank.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.171957632 UTC

[section ""data" . System.Environment.Blank.$trModule_closure" {
     System.Environment.Blank.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Environment.Blank.$trModule3_closure+1;
         const System.Environment.Blank.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.174374218 UTC

[section ""data" . System.Environment.Blank.getEnvDefault1_closure" {
     System.Environment.Blank.getEnvDefault1_closure:
         const System.Environment.Blank.getEnvDefault1_info;
         const 0;
 },
 sat_scqeH_entry() //  [R1]
         { info_tbl: [(ccqqG,
                       label: sat_scqeH_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqqG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqqH; else goto ccqqI;
       ccqqH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqqI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Maybe.fromMaybe_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Environment.Blank.getEnvDefault1_entry() //  [R2, R3]
         { info_tbl: [(ccqqJ,
                       label: System.Environment.Blank.getEnvDefault1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqqJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccqqK; else goto ccqqL;
       ccqqK: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.Blank.getEnvDefault1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccqqL: // global
           I64[Sp - 24] = block_ccqqy_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqqy() //  [R1]
         { info_tbl: [(ccqqy,
                       label: block_ccqqy_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqqy: // global
           _scqey::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccqqA_info;
           R4 = System.Environment.getEnv3_closure+2;
           R3 = _scqey::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccqqA() //  [R1]
         { info_tbl: [(ccqqA,
                       label: block_ccqqA_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqqA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccqqP; else goto ccqqO;
       ccqqP: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqqO: // global
           I64[Hp - 24] = sat_scqeH_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.185097318 UTC

[section ""data" . System.Environment.Blank.getEnvDefault_closure" {
     System.Environment.Blank.getEnvDefault_closure:
         const System.Environment.Blank.getEnvDefault_info;
         const 0;
 },
 System.Environment.Blank.getEnvDefault_entry() //  [R2, R3]
         { info_tbl: [(ccqrb,
                       label: System.Environment.Blank.getEnvDefault_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqrb: // global
           R3 = R3;
           R2 = R2;
           call System.Environment.Blank.getEnvDefault1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.188343233 UTC

[section ""cstring" . lvl_rcqet_bytes" {
     lvl_rcqet_bytes:
         I8[] [117,110,115,101,116,101,110,118]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.190197602 UTC

[section ""data" . lvl1_rcqeu_closure" {
     lvl1_rcqeu_closure:
         const lvl1_rcqeu_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rcqeu_entry() //  [R1]
         { info_tbl: [(ccqrp,
                       label: lvl1_rcqeu_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqrp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqrq; else goto ccqrr;
       ccqrq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqrr: // global
           (_ccqrm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccqrm::I64 == 0) goto ccqro; else goto ccqrn;
       ccqro: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccqrn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccqrm::I64;
           R2 = lvl_rcqet_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.194603318 UTC

[section ""data" . System.Environment.Blank.unsetEnv3_closure" {
     System.Environment.Blank.unsetEnv3_closure:
         const System.Environment.Blank.unsetEnv3_info;
         const 0;
 },
 System.Environment.Blank.unsetEnv3_entry() //  [R2]
         { info_tbl: [(ccqrF,
                       label: System.Environment.Blank.unsetEnv3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqrF: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_rcqeu_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.198258037 UTC

[section ""data" . System.Environment.Blank.unsetEnv2_closure" {
     System.Environment.Blank.unsetEnv2_closure:
         const System.Environment.Blank.unsetEnv2_info;
         const 0;
 },
 System.Environment.Blank.unsetEnv2_entry() //  [R2]
         { info_tbl: [(ccqrT,
                       label: System.Environment.Blank.unsetEnv2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqrT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccqrU; else goto ccqrV;
       ccqrU: // global
           R2 = R2;
           R1 = System.Environment.Blank.unsetEnv2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqrV: // global
           I64[Sp - 8] = block_ccqrQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucqsh; else goto ccqrR;
       ucqsh: // global
           call _ccqrQ(R1) args: 0, res: 0, upd: 0;
       ccqrR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqrQ() //  [R1]
         { info_tbl: [(ccqrQ,
                       label: block_ccqrQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqrQ: // global
           (_scqeS::I64) = call "capi" arg hints:  [PtrHint]  result hints:  [‘signed’] ghczuwrapperZC0ZCbaseZCSystemziEnvironmentziBlankZCunsetenv(I64[R1 + 7]);
           if (%MO_SS_Conv_W64_W32(_scqeS::I64) == (-1) :: W32) goto ccqsc; else goto ccqs6;
       ccqsc: // global
           (_scqeX::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scqeX::I64;
           Sp = Sp + 8;
           call System.Environment.Blank.unsetEnv3_entry(R2) args: 8, res: 0, upd: 8;
       ccqs6: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.204140412 UTC

[section ""data" . System.Environment.Blank.unsetEnv1_closure" {
     System.Environment.Blank.unsetEnv1_closure:
         const System.Environment.Blank.unsetEnv1_info;
         const 0;
 },
 System.Environment.Blank.unsetEnv1_entry() //  [R2]
         { info_tbl: [(ccqsy,
                       label: System.Environment.Blank.unsetEnv1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqsy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqsz; else goto ccqsA;
       ccqsz: // global
           R2 = R2;
           R1 = System.Environment.Blank.unsetEnv1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqsA: // global
           I64[Sp - 16] = block_ccqsw_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqsw() //  [R1]
         { info_tbl: [(ccqsw,
                       label: block_ccqsw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqsw: // global
           R4 = System.Environment.Blank.unsetEnv2_closure+2;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.21001265 UTC

[section ""data" . System.Environment.Blank.unsetEnv_closure" {
     System.Environment.Blank.unsetEnv_closure:
         const System.Environment.Blank.unsetEnv_info;
         const 0;
 },
 System.Environment.Blank.unsetEnv_entry() //  [R2]
         { info_tbl: [(ccqsO,
                       label: System.Environment.Blank.unsetEnv_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqsO: // global
           R2 = R2;
           call System.Environment.Blank.unsetEnv1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.213762095 UTC

[section ""cstring" . lvl2_rcqev_bytes" {
     lvl2_rcqev_bytes:
         I8[] [115,101,116,101,110,118]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.215694766 UTC

[section ""data" . lvl3_rcqew_closure" {
     lvl3_rcqew_closure:
         const lvl3_rcqew_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rcqew_entry() //  [R1]
         { info_tbl: [(ccqt2,
                       label: lvl3_rcqew_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqt2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqt3; else goto ccqt4;
       ccqt3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqt4: // global
           (_ccqsZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccqsZ::I64 == 0) goto ccqt1; else goto ccqt0;
       ccqt1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccqt0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccqsZ::I64;
           R2 = lvl2_rcqev_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.219721774 UTC

[section ""data" . System.Environment.Blank.setEnv3_closure" {
     System.Environment.Blank.setEnv3_closure:
         const System.Environment.Blank.setEnv3_info;
         const 0;
 },
 System.Environment.Blank.setEnv3_entry() //  [R2]
         { info_tbl: [(ccqti,
                       label: System.Environment.Blank.setEnv3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqti: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl3_rcqew_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.224138277 UTC

[section ""data" . System.Environment.Blank.setEnv2_closure" {
     System.Environment.Blank.setEnv2_closure:
         const System.Environment.Blank.setEnv2_info;
         const 0;
 },
 sat_scqfy_entry() //  [R1, R2]
         { info_tbl: [(ccqtK,
                       label: sat_scqfy_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqtK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqtO; else goto ccqtP;
       ccqtO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqtP: // global
           I64[Sp - 16] = block_ccqtH_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucquh; else goto ccqtI;
       ucquh: // global
           call _ccqtH(R1) args: 0, res: 0, upd: 0;
       ccqtI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqtH() //  [R1]
         { info_tbl: [(ccqtH,
                       label: block_ccqtH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqtH: // global
           I64[Sp] = block_ccqtN_info;
           _scqfl::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _scqfl::I64;
           if (R1 & 7 != 0) goto ucqug; else goto ccqtR;
       ucqug: // global
           call _ccqtN(R1) args: 0, res: 0, upd: 0;
       ccqtR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqtN() //  [R1]
         { info_tbl: [(ccqtN,
                       label: block_ccqtN_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqtN: // global
           (_scqfr::I64) = call "ccall" arg hints:  [PtrHint, PtrHint,
                                                     ‘signed’]  result hints:  [‘signed’] setenv(I64[Sp + 8], I64[R1 + 7], 1);
           if (%MO_SS_Conv_W64_W32(_scqfr::I64) == (-1) :: W32) goto ccqub; else goto ccqu5;
       ccqub: // global
           (_scqfw::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scqfw::I64;
           Sp = Sp + 16;
           call System.Environment.Blank.setEnv3_entry(R2) args: 8, res: 0, upd: 8;
       ccqu5: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_scqfz_entry() //  [R1, R2]
         { info_tbl: [(ccqui,
                       label: sat_scqfz_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqui: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccquj; else goto ccquk;
       ccquj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccquk: // global
           I64[Sp - 24] = block_ccqtA_info;
           _scqf8::P64 = P64[R1 + 6];
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp - 16] = _scqf8::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqtA() //  [R1]
         { info_tbl: [(ccqtA,
                       label: block_ccqtA_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqtA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccqun; else goto ccqum;
       ccqun: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqum: // global
           I64[Hp - 8] = sat_scqfy_info;
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 6;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 System.Environment.Blank.setEnv2_entry() //  [R2, R3]
         { info_tbl: [(ccquo,
                       label: System.Environment.Blank.setEnv2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccquo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccqup; else goto ccquq;
       ccqup: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.Blank.setEnv2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccquq: // global
           I64[Sp - 24] = block_ccqtt_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqtt() //  [R1]
         { info_tbl: [(ccqtt,
                       label: block_ccqtt_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqtt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccqut; else goto ccqus;
       ccqut: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqus: // global
           I64[Hp - 8] = sat_scqfz_info;
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 6;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.239938683 UTC

[section ""data" . System.Environment.Blank.setEnv9_closure" {
     System.Environment.Blank.setEnv9_closure:
         const System.Environment.Blank.setEnv9_info;
 },
 System.Environment.Blank.setEnv9_entry() //  [R2]
         { info_tbl: [(ccqv5,
                       label: System.Environment.Blank.setEnv9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqv5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccqv6; else goto ccqv7;
       ccqv6: // global
           R2 = R2;
           R1 = System.Environment.Blank.setEnv9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqv7: // global
           I64[Sp - 8] = block_ccqv2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucqvf; else goto ccqv3;
       ucqvf: // global
           call _ccqv2(R1) args: 0, res: 0, upd: 0;
       ccqv3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqv2() //  [R1]
         { info_tbl: [(ccqv2,
                       label: block_ccqv2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqv2: // global
           if (I64[R1 + 7] == 0) goto ccqve; else goto ccqvd;
       ccqve: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccqvd: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.245809075 UTC

[section ""cstring" . System.Environment.Blank.setEnv8_bytes" {
     System.Environment.Blank.setEnv8_bytes:
         I8[] [115,101,116,69,110,118]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.248200435 UTC

[section ""data" . System.Environment.Blank.setEnv7_closure" {
     System.Environment.Blank.setEnv7_closure:
         const System.Environment.Blank.setEnv7_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.Blank.setEnv7_entry() //  [R1]
         { info_tbl: [(ccqvy,
                       label: System.Environment.Blank.setEnv7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqvy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqvz; else goto ccqvA;
       ccqvz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqvA: // global
           (_ccqvv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccqvv::I64 == 0) goto ccqvx; else goto ccqvw;
       ccqvx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccqvw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccqvv::I64;
           R2 = System.Environment.Blank.setEnv8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.252063385 UTC

[section ""data" . System.Environment.Blank.setEnv6_closure" {
     System.Environment.Blank.setEnv6_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.InvalidArgument_closure+1;
         const System.Environment.Blank.setEnv7_closure;
         const GHC.Types.[]_closure+1;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.254178306 UTC

[section ""data" . System.Environment.Blank.setEnv5_closure" {
     System.Environment.Blank.setEnv5_closure:
         const System.Environment.Blank.setEnv5_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.Blank.setEnv5_entry() //  [R1]
         { info_tbl: [(ccqvP,
                       label: System.Environment.Blank.setEnv5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqvP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqvQ; else goto ccqvR;
       ccqvQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqvR: // global
           (_ccqvM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccqvM::I64 == 0) goto ccqvO; else goto ccqvN;
       ccqvO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccqvN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccqvM::I64;
           R2 = System.Environment.Blank.setEnv6_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.258651871 UTC

[section ""data" . System.Environment.Blank.setEnv4_closure" {
     System.Environment.Blank.setEnv4_closure:
         const GHC.Types.C#_con_info;
         const 61;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.261612847 UTC

[section ""data" . System.Environment.Blank.setEnv1_closure" {
     System.Environment.Blank.setEnv1_closure:
         const System.Environment.Blank.setEnv1_info;
         const 0;
 },
 sat_scqfU_entry() //  [R1]
         { info_tbl: [(ccqwv,
                       label: sat_scqfU_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqwv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqww; else goto ccqwx;
       ccqww: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqwx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = System.Environment.Blank.setEnv9_closure+1;
           Sp = Sp - 16;
           call GHC.List.takeWhile_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scqfW_entry() //  [R1]
         { info_tbl: [(ccqwE,
                       label: sat_scqfW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqwE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqwF; else goto ccqwG;
       ccqwF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqwG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = System.Environment.Blank.setEnv9_closure+1;
           Sp = Sp - 16;
           call GHC.List.takeWhile_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Environment.Blank.setEnv1_entry() //  [R2, R3, R4]
         { info_tbl: [(ccqwL,
                       label: System.Environment.Blank.setEnv1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqwL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccqwM; else goto ccqwN;
       ccqwM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.Blank.setEnv1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccqwN: // global
           I64[Sp - 24] = block_ccqw4_info;
           _scqfF::P64 = R3;
           R3 = R2;
           R2 = System.Environment.Blank.setEnv9_closure+1;
           P64[Sp - 16] = _scqfF::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.List.takeWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccqw4() //  [R1]
         { info_tbl: [(ccqw4,
                       label: block_ccqw4_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqw4: // global
           if (R1 & 7 == 1) goto ucqxj; else goto ccqwJ;
       ucqxj: // global
           Sp = Sp + 24;
           call _ccqxf() args: 0, res: 0, upd: 0;
       ccqwJ: // global
           I64[Sp - 8] = block_ccqw9_info;
           R4 = R1;
           R3 = System.Environment.Blank.setEnv4_closure+1;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccqw9() //  [R1]
         { info_tbl: [(ccqw9,
                       label: block_ccqw9_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqw9: // global
           if (R1 & 7 == 1) goto ccqwT; else goto ucqxk;
       ccqwT: // global
           I64[Sp] = block_ccqwd_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto ucqxm; else goto ccqwe;
       ucqxm: // global
           call _ccqwd(R1) args: 0, res: 0, upd: 0;
       ccqwe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ucqxk: // global
           Sp = Sp + 32;
           call _ccqxf() args: 0, res: 0, upd: 0;
     }
 },
 _ccqwd() //  [R1]
         { info_tbl: [(ccqwd,
                       label: block_ccqwd_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqwd: // global
           if (R1 & 7 == 1) goto ccqwW; else goto ccqx8;
       ccqwW: // global
           I64[Sp] = block_ccqwi_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       ccqx8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccqxb; else goto ccqxa;
       ccqxb: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqxa: // global
           I64[Hp - 16] = sat_scqfW_info;
           P64[Hp] = P64[Sp + 16];
           R3 = Hp - 16;
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call System.Environment.Blank.setEnv2_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 _ccqwi() //  [R1]
         { info_tbl: [(ccqwi,
                       label: block_ccqwi_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqwi: // global
           I64[Sp] = block_ccqwk_info;
           R4 = System.Environment.getEnv3_closure+2;
           R3 = P64[Sp + 8];
           R2 = R1;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccqwk() //  [R1]
         { info_tbl: [(ccqwk,
                       label: block_ccqwk_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqwk: // global
           I64[Sp] = block_ccqwm_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ucqxo; else goto ccqwn;
       ucqxo: // global
           call _ccqwm(R1) args: 0, res: 0, upd: 0;
       ccqwn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqwm() //  [R1]
         { info_tbl: [(ccqwm,
                       label: block_ccqwm_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqwm: // global
           if (R1 & 7 == 1) goto ccqx0; else goto ccqx7;
       ccqx0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccqx3; else goto ccqx2;
       ccqx3: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqx2: // global
           I64[Hp - 16] = sat_scqfU_info;
           P64[Hp] = P64[Sp + 16];
           R3 = Hp - 16;
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call System.Environment.Blank.setEnv2_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccqx7: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccqxf() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqxf: // global
           R1 = System.Environment.Blank.setEnv5_closure;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.281638638 UTC

[section ""data" . System.Environment.Blank.setEnv_closure" {
     System.Environment.Blank.setEnv_closure:
         const System.Environment.Blank.setEnv_info;
         const 0;
 },
 System.Environment.Blank.setEnv_entry() //  [R2, R3, R4]
         { info_tbl: [(ccqyd,
                       label: System.Environment.Blank.setEnv_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqyd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call System.Environment.Blank.setEnv1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.285555985 UTC

[section ""relreadonly" . Scqg4_srt" {
     Scqg4_srt:
         const System.Environment.lookupEnv1_closure;
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const System.Environment.getEnv3_closure;
         const System.Environment.Blank.getEnvDefault1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_rcqeu_closure;
         const System.Environment.Blank.unsetEnv2_closure;
         const System.Environment.Blank.unsetEnv3_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const System.Environment.Blank.unsetEnv1_closure;
         const lvl3_rcqew_closure;
         const System.Environment.Blank.setEnv3_closure;
         const System.Environment.Blank.setEnv2_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const System.Environment.Blank.setEnv6_closure;
         const System.Environment.Blank.setEnv1_closure;
         const System.Environment.Blank.setEnv5_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.553137987 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:19.554559099 UTC

[section ""data" . System.Environment.Blank.getEnv_closure" {
     System.Environment.Blank.getEnv_closure:
         const System.Environment.Blank.getEnv_info;
         const 0;
 },
 System.Environment.Blank.getEnv_entry() //  [R2]
         { info_tbl: [(ccqzO,
                       label: System.Environment.Blank.getEnv_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqzO: // global
           R2 = R2;
           call System.Environment.lookupEnv1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.558076335 UTC

[section ""cstring" . System.Environment.Blank.$trModule4_bytes" {
     System.Environment.Blank.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.559845271 UTC

[section ""data" . System.Environment.Blank.$trModule3_closure" {
     System.Environment.Blank.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.Blank.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.561629783 UTC

[section ""cstring" . System.Environment.Blank.$trModule2_bytes" {
     System.Environment.Blank.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,69,110,118,105,114,111,110,109,101,110,116,46,66,108,97,110,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.563416395 UTC

[section ""data" . System.Environment.Blank.$trModule1_closure" {
     System.Environment.Blank.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.Blank.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.56511423 UTC

[section ""data" . System.Environment.Blank.$trModule_closure" {
     System.Environment.Blank.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Environment.Blank.$trModule3_closure+1;
         const System.Environment.Blank.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.567559737 UTC

[section ""data" . System.Environment.Blank.getEnvDefault1_closure" {
     System.Environment.Blank.getEnvDefault1_closure:
         const System.Environment.Blank.getEnvDefault1_info;
         const 0;
 },
 sat_scqyu_entry() //  [R1]
         { info_tbl: [(ccqAd,
                       label: sat_scqyu_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqAd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqAe; else goto ccqAf;
       ccqAe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqAf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Maybe.fromMaybe_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Environment.Blank.getEnvDefault1_entry() //  [R2, R3]
         { info_tbl: [(ccqAg,
                       label: System.Environment.Blank.getEnvDefault1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqAg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccqAh; else goto ccqAi;
       ccqAh: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.Blank.getEnvDefault1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccqAi: // global
           I64[Sp - 24] = block_ccqA5_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqA5() //  [R1]
         { info_tbl: [(ccqA5,
                       label: block_ccqA5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqA5: // global
           _scqyl::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccqA7_info;
           R4 = System.Environment.getEnv3_closure+2;
           R3 = _scqyl::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccqA7() //  [R1]
         { info_tbl: [(ccqA7,
                       label: block_ccqA7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqA7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccqAm; else goto ccqAl;
       ccqAm: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqAl: // global
           I64[Hp - 24] = sat_scqyu_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.577944956 UTC

[section ""data" . System.Environment.Blank.getEnvDefault_closure" {
     System.Environment.Blank.getEnvDefault_closure:
         const System.Environment.Blank.getEnvDefault_info;
         const 0;
 },
 System.Environment.Blank.getEnvDefault_entry() //  [R2, R3]
         { info_tbl: [(ccqAN,
                       label: System.Environment.Blank.getEnvDefault_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqAN: // global
           R3 = R3;
           R2 = R2;
           call System.Environment.Blank.getEnvDefault1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.581377302 UTC

[section ""cstring" . lvl_rcqet_bytes" {
     lvl_rcqet_bytes:
         I8[] [117,110,115,101,116,101,110,118]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.583343361 UTC

[section ""data" . lvl1_rcqeu_closure" {
     lvl1_rcqeu_closure:
         const lvl1_rcqeu_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rcqeu_entry() //  [R1]
         { info_tbl: [(ccqB1,
                       label: lvl1_rcqeu_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqB1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqB2; else goto ccqB3;
       ccqB2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqB3: // global
           (_ccqAY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccqAY::I64 == 0) goto ccqB0; else goto ccqAZ;
       ccqB0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccqAZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccqAY::I64;
           R2 = lvl_rcqet_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.587650131 UTC

[section ""data" . System.Environment.Blank.unsetEnv3_closure" {
     System.Environment.Blank.unsetEnv3_closure:
         const System.Environment.Blank.unsetEnv3_info;
         const 0;
 },
 System.Environment.Blank.unsetEnv3_entry() //  [R2]
         { info_tbl: [(ccqBi,
                       label: System.Environment.Blank.unsetEnv3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqBi: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_rcqeu_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.592348144 UTC

[section ""data" . System.Environment.Blank.unsetEnv2_closure" {
     System.Environment.Blank.unsetEnv2_closure:
         const System.Environment.Blank.unsetEnv2_info;
         const 0;
 },
 System.Environment.Blank.unsetEnv2_entry() //  [R2]
         { info_tbl: [(ccqBw,
                       label: System.Environment.Blank.unsetEnv2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqBw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccqBx; else goto ccqBy;
       ccqBx: // global
           R2 = R2;
           R1 = System.Environment.Blank.unsetEnv2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqBy: // global
           I64[Sp - 8] = block_ccqBt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucqBU; else goto ccqBu;
       ucqBU: // global
           call _ccqBt(R1) args: 0, res: 0, upd: 0;
       ccqBu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqBt() //  [R1]
         { info_tbl: [(ccqBt,
                       label: block_ccqBt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqBt: // global
           (_scqyF::I64) = call "capi" arg hints:  [PtrHint]  result hints:  [‘signed’] ghczuwrapperZC0ZCbaseZCSystemziEnvironmentziBlankZCunsetenv(I64[R1 + 7]);
           if (%MO_SS_Conv_W64_W32(_scqyF::I64) == (-1) :: W32) goto ccqBP; else goto ccqBJ;
       ccqBP: // global
           (_scqyK::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scqyK::I64;
           Sp = Sp + 8;
           call System.Environment.Blank.unsetEnv3_entry(R2) args: 8, res: 0, upd: 8;
       ccqBJ: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.598584835 UTC

[section ""data" . System.Environment.Blank.unsetEnv1_closure" {
     System.Environment.Blank.unsetEnv1_closure:
         const System.Environment.Blank.unsetEnv1_info;
         const 0;
 },
 System.Environment.Blank.unsetEnv1_entry() //  [R2]
         { info_tbl: [(ccqCd,
                       label: System.Environment.Blank.unsetEnv1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqCd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqCe; else goto ccqCf;
       ccqCe: // global
           R2 = R2;
           R1 = System.Environment.Blank.unsetEnv1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqCf: // global
           I64[Sp - 16] = block_ccqCb_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqCb() //  [R1]
         { info_tbl: [(ccqCb,
                       label: block_ccqCb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqCb: // global
           R4 = System.Environment.Blank.unsetEnv2_closure+2;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.604592948 UTC

[section ""data" . System.Environment.Blank.unsetEnv_closure" {
     System.Environment.Blank.unsetEnv_closure:
         const System.Environment.Blank.unsetEnv_info;
         const 0;
 },
 System.Environment.Blank.unsetEnv_entry() //  [R2]
         { info_tbl: [(ccqCu,
                       label: System.Environment.Blank.unsetEnv_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqCu: // global
           R2 = R2;
           call System.Environment.Blank.unsetEnv1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.608613548 UTC

[section ""cstring" . lvl2_rcqev_bytes" {
     lvl2_rcqev_bytes:
         I8[] [115,101,116,101,110,118]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.610581015 UTC

[section ""data" . lvl3_rcqew_closure" {
     lvl3_rcqew_closure:
         const lvl3_rcqew_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rcqew_entry() //  [R1]
         { info_tbl: [(ccqCI,
                       label: lvl3_rcqew_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqCI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqCJ; else goto ccqCK;
       ccqCJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqCK: // global
           (_ccqCF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccqCF::I64 == 0) goto ccqCH; else goto ccqCG;
       ccqCH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccqCG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccqCF::I64;
           R2 = lvl2_rcqev_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.614860952 UTC

[section ""data" . System.Environment.Blank.setEnv3_closure" {
     System.Environment.Blank.setEnv3_closure:
         const System.Environment.Blank.setEnv3_info;
         const 0;
 },
 System.Environment.Blank.setEnv3_entry() //  [R2]
         { info_tbl: [(ccqCZ,
                       label: System.Environment.Blank.setEnv3_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqCZ: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl3_rcqew_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.619248075 UTC

[section ""data" . System.Environment.Blank.setEnv2_closure" {
     System.Environment.Blank.setEnv2_closure:
         const System.Environment.Blank.setEnv2_info;
         const 0;
 },
 sat_scqzl_entry() //  [R1, R2]
         { info_tbl: [(ccqDr,
                       label: sat_scqzl_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqDr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqDv; else goto ccqDw;
       ccqDv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqDw: // global
           I64[Sp - 16] = block_ccqDo_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucqDY; else goto ccqDp;
       ucqDY: // global
           call _ccqDo(R1) args: 0, res: 0, upd: 0;
       ccqDp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqDo() //  [R1]
         { info_tbl: [(ccqDo,
                       label: block_ccqDo_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqDo: // global
           I64[Sp] = block_ccqDu_info;
           _scqz8::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _scqz8::I64;
           if (R1 & 7 != 0) goto ucqDX; else goto ccqDy;
       ucqDX: // global
           call _ccqDu(R1) args: 0, res: 0, upd: 0;
       ccqDy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqDu() //  [R1]
         { info_tbl: [(ccqDu,
                       label: block_ccqDu_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqDu: // global
           (_scqze::I64) = call "ccall" arg hints:  [PtrHint, PtrHint,
                                                     ‘signed’]  result hints:  [‘signed’] setenv(I64[Sp + 8], I64[R1 + 7], 1);
           if (%MO_SS_Conv_W64_W32(_scqze::I64) == (-1) :: W32) goto ccqDS; else goto ccqDM;
       ccqDS: // global
           (_scqzj::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scqzj::I64;
           Sp = Sp + 16;
           call System.Environment.Blank.setEnv3_entry(R2) args: 8, res: 0, upd: 8;
       ccqDM: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_scqzm_entry() //  [R1, R2]
         { info_tbl: [(ccqDZ,
                       label: sat_scqzm_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqDZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccqE0; else goto ccqE1;
       ccqE0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqE1: // global
           I64[Sp - 24] = block_ccqDh_info;
           _scqyV::P64 = P64[R1 + 6];
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp - 16] = _scqyV::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqDh() //  [R1]
         { info_tbl: [(ccqDh,
                       label: block_ccqDh_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqDh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccqE4; else goto ccqE3;
       ccqE4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqE3: // global
           I64[Hp - 8] = sat_scqzl_info;
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 6;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 System.Environment.Blank.setEnv2_entry() //  [R2, R3]
         { info_tbl: [(ccqE5,
                       label: System.Environment.Blank.setEnv2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqE5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccqE6; else goto ccqE7;
       ccqE6: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.Blank.setEnv2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccqE7: // global
           I64[Sp - 24] = block_ccqDa_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqDa() //  [R1]
         { info_tbl: [(ccqDa,
                       label: block_ccqDa_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqDa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccqEa; else goto ccqE9;
       ccqEa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqE9: // global
           I64[Hp - 8] = sat_scqzm_info;
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 6;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.635787173 UTC

[section ""data" . System.Environment.Blank.setEnv9_closure" {
     System.Environment.Blank.setEnv9_closure:
         const System.Environment.Blank.setEnv9_info;
 },
 System.Environment.Blank.setEnv9_entry() //  [R2]
         { info_tbl: [(ccqET,
                       label: System.Environment.Blank.setEnv9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqET: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccqEU; else goto ccqEV;
       ccqEU: // global
           R2 = R2;
           R1 = System.Environment.Blank.setEnv9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccqEV: // global
           I64[Sp - 8] = block_ccqEQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucqF3; else goto ccqER;
       ucqF3: // global
           call _ccqEQ(R1) args: 0, res: 0, upd: 0;
       ccqER: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqEQ() //  [R1]
         { info_tbl: [(ccqEQ,
                       label: block_ccqEQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqEQ: // global
           if (I64[R1 + 7] == 0) goto ccqF2; else goto ccqF1;
       ccqF2: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccqF1: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.641649238 UTC

[section ""cstring" . System.Environment.Blank.setEnv8_bytes" {
     System.Environment.Blank.setEnv8_bytes:
         I8[] [115,101,116,69,110,118]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.643614429 UTC

[section ""data" . System.Environment.Blank.setEnv7_closure" {
     System.Environment.Blank.setEnv7_closure:
         const System.Environment.Blank.setEnv7_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.Blank.setEnv7_entry() //  [R1]
         { info_tbl: [(ccqFp,
                       label: System.Environment.Blank.setEnv7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqFp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqFq; else goto ccqFr;
       ccqFq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqFr: // global
           (_ccqFm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccqFm::I64 == 0) goto ccqFo; else goto ccqFn;
       ccqFo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccqFn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccqFm::I64;
           R2 = System.Environment.Blank.setEnv8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.648263232 UTC

[section ""data" . System.Environment.Blank.setEnv6_closure" {
     System.Environment.Blank.setEnv6_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.InvalidArgument_closure+1;
         const System.Environment.Blank.setEnv7_closure;
         const GHC.Types.[]_closure+1;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.650476421 UTC

[section ""data" . System.Environment.Blank.setEnv5_closure" {
     System.Environment.Blank.setEnv5_closure:
         const System.Environment.Blank.setEnv5_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.Blank.setEnv5_entry() //  [R1]
         { info_tbl: [(ccqFH,
                       label: System.Environment.Blank.setEnv5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqFH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqFI; else goto ccqFJ;
       ccqFI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqFJ: // global
           (_ccqFE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccqFE::I64 == 0) goto ccqFG; else goto ccqFF;
       ccqFG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccqFF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccqFE::I64;
           R2 = System.Environment.Blank.setEnv6_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.655102339 UTC

[section ""data" . System.Environment.Blank.setEnv4_closure" {
     System.Environment.Blank.setEnv4_closure:
         const GHC.Types.C#_con_info;
         const 61;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.658239011 UTC

[section ""data" . System.Environment.Blank.setEnv1_closure" {
     System.Environment.Blank.setEnv1_closure:
         const System.Environment.Blank.setEnv1_info;
         const 0;
 },
 sat_scqzH_entry() //  [R1]
         { info_tbl: [(ccqGo,
                       label: sat_scqzH_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqGo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqGp; else goto ccqGq;
       ccqGp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqGq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = System.Environment.Blank.setEnv9_closure+1;
           Sp = Sp - 16;
           call GHC.List.takeWhile_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scqzJ_entry() //  [R1]
         { info_tbl: [(ccqGx,
                       label: sat_scqzJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqGx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccqGy; else goto ccqGz;
       ccqGy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccqGz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = System.Environment.Blank.setEnv9_closure+1;
           Sp = Sp - 16;
           call GHC.List.takeWhile_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Environment.Blank.setEnv1_entry() //  [R2, R3, R4]
         { info_tbl: [(ccqGE,
                       label: System.Environment.Blank.setEnv1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqGE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccqGF; else goto ccqGG;
       ccqGF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.Blank.setEnv1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccqGG: // global
           I64[Sp - 24] = block_ccqFX_info;
           _scqzs::P64 = R3;
           R3 = R2;
           R2 = System.Environment.Blank.setEnv9_closure+1;
           P64[Sp - 16] = _scqzs::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.List.takeWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccqFX() //  [R1]
         { info_tbl: [(ccqFX,
                       label: block_ccqFX_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqFX: // global
           if (R1 & 7 == 1) goto ucqHc; else goto ccqGC;
       ucqHc: // global
           Sp = Sp + 24;
           call _ccqH8() args: 0, res: 0, upd: 0;
       ccqGC: // global
           I64[Sp - 8] = block_ccqG2_info;
           R4 = R1;
           R3 = System.Environment.Blank.setEnv4_closure+1;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccqG2() //  [R1]
         { info_tbl: [(ccqG2,
                       label: block_ccqG2_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqG2: // global
           if (R1 & 7 == 1) goto ccqGM; else goto ucqHd;
       ccqGM: // global
           I64[Sp] = block_ccqG6_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto ucqHf; else goto ccqG7;
       ucqHf: // global
           call _ccqG6(R1) args: 0, res: 0, upd: 0;
       ccqG7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ucqHd: // global
           Sp = Sp + 32;
           call _ccqH8() args: 0, res: 0, upd: 0;
     }
 },
 _ccqG6() //  [R1]
         { info_tbl: [(ccqG6,
                       label: block_ccqG6_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqG6: // global
           if (R1 & 7 == 1) goto ccqGP; else goto ccqH1;
       ccqGP: // global
           I64[Sp] = block_ccqGb_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       ccqH1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccqH4; else goto ccqH3;
       ccqH4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqH3: // global
           I64[Hp - 16] = sat_scqzJ_info;
           P64[Hp] = P64[Sp + 16];
           R3 = Hp - 16;
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call System.Environment.Blank.setEnv2_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 _ccqGb() //  [R1]
         { info_tbl: [(ccqGb,
                       label: block_ccqGb_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqGb: // global
           I64[Sp] = block_ccqGd_info;
           R4 = System.Environment.getEnv3_closure+2;
           R3 = P64[Sp + 8];
           R2 = R1;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccqGd() //  [R1]
         { info_tbl: [(ccqGd,
                       label: block_ccqGd_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqGd: // global
           I64[Sp] = block_ccqGf_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ucqHh; else goto ccqGg;
       ucqHh: // global
           call _ccqGf(R1) args: 0, res: 0, upd: 0;
       ccqGg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccqGf() //  [R1]
         { info_tbl: [(ccqGf,
                       label: block_ccqGf_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqGf: // global
           if (R1 & 7 == 1) goto ccqGT; else goto ccqH0;
       ccqGT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccqGW; else goto ccqGV;
       ccqGW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccqGV: // global
           I64[Hp - 16] = sat_scqzH_info;
           P64[Hp] = P64[Sp + 16];
           R3 = Hp - 16;
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call System.Environment.Blank.setEnv2_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccqH0: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccqH8() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqH8: // global
           R1 = System.Environment.Blank.setEnv5_closure;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.678718255 UTC

[section ""data" . System.Environment.Blank.setEnv_closure" {
     System.Environment.Blank.setEnv_closure:
         const System.Environment.Blank.setEnv_info;
         const 0;
 },
 System.Environment.Blank.setEnv_entry() //  [R2, R3, R4]
         { info_tbl: [(ccqIi,
                       label: System.Environment.Blank.setEnv_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccqIi: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call System.Environment.Blank.setEnv1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:19.68220689 UTC

[section ""relreadonly" . ScqzR_srt" {
     ScqzR_srt:
         const System.Environment.lookupEnv1_closure;
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const System.Environment.getEnv3_closure;
         const System.Environment.Blank.getEnvDefault1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_rcqeu_closure;
         const System.Environment.Blank.unsetEnv2_closure;
         const System.Environment.Blank.unsetEnv3_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const System.Environment.Blank.unsetEnv1_closure;
         const lvl3_rcqew_closure;
         const System.Environment.Blank.setEnv3_closure;
         const System.Environment.Blank.setEnv2_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const System.Environment.Blank.setEnv6_closure;
         const System.Environment.Blank.setEnv1_closure;
         const System.Environment.Blank.setEnv5_closure;
 }]

