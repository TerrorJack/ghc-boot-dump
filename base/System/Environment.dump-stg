
==================== Pre unarise: ====================
2018-03-16 16:07:16.784158276 UTC

System.Environment.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

System.Environment.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.Environment.$trModule4];

System.Environment.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "System.Environment"#;

System.Environment.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.Environment.$trModule2];

System.Environment.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [System.Environment.$trModule3
                                     System.Environment.$trModule1];

loc_rcolY :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "unsetEnv"#;

loc1_rcolZ :: GHC.Base.String
[GblId] =
    [] \u [] GHC.CString.unpackCString# loc_rcolY;

System.Environment.setEnv5
  :: GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Foreign.C.Types.CInt #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ds2_scom8 ds_scom9]
        case narrow32Int# [ds2_scom8] of sat_scoma {
          __DEFAULT -> Foreign.C.Error.$wlvl loc1_rcolZ sat_scoma ds_scom9;
        };

System.Environment.setEnv4
  :: Foreign.C.String.CString
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [x_scomb eta1_scomc]
        case x_scomb of {
          GHC.Ptr.Ptr ds1_scome [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ds1_scome eta1_scomc] of {
                (#,#) ds2_scomh [Occ=Once*] ds3_scomi [Occ=Once] ->
                    case narrow32Int# [ds3_scomi] of {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [ds2_scomh] of {
                            (#,#) ds4_scomm [Occ=Once] ds5_scomn [Occ=Once] ->
                                System.Environment.setEnv5 ds5_scomn ds4_scomm;
                          };
                      0# -> (#,#) [ds2_scomh GHC.Tuple.()];
                    };
              };
        };

System.Environment.unsetEnv1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [key_scomp s_scomq]
        case GHC.IO.Encoding.getFileSystemEncoding s_scomq of {
          (#,#) ipv_scoms [Occ=Once] ipv1_scomt [Occ=Once] ->
              GHC.Foreign.charIsRepresentable3
                  ipv1_scomt key_scomp System.Environment.setEnv4 ipv_scoms;
        };

System.Environment.unsetEnv :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] System.Environment.unsetEnv1 eta_B2 eta_B1;

lvl_rcom0
  :: GHC.Types.Int
     -> GHC.Ptr.Ptr GHC.Foreign.CString
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [len_scomu css_scomv eta_scomw]
        case len_scomu of {
          GHC.Types.I# x#_scomy [Occ=Once] ->
              case css_scomv of {
                GHC.Ptr.Ptr ds1_scomA [Occ=Once] ->
                    case narrow32Int# [x#_scomy] of sat_scomC {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [sat_scomC ds1_scomA eta_scomw] of {
                            Unit# ds2_scomE [Occ=Once] -> (#,#) [ds2_scomE GHC.Tuple.()];
                          };
                    };
              };
        };

System.Environment.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.Base.String #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_scomF w_scomG]
        case __pkg_ccall base-4.11.0.0 [ww_scomF w_scomG] of {
          (#,#) ds_scomJ [Occ=Once*] ds1_scomK ->
              case eqAddr# [ds1_scomK __NULL] of {
                __DEFAULT ->
                    case GHC.IO.Encoding.getFileSystemEncoding1 of {
                      (,) getFileSystemEncoding81_scomN [Occ=Once] _ [Occ=Dead] ->
                          case getFileSystemEncoding81_scomN ds_scomJ of {
                            (#,#) ipv_scomQ [Occ=Once] ipv1_scomR [Occ=Once] ->
                                case GHC.Foreign.$wpeekCString ipv1_scomR ds1_scomK ipv_scomQ of {
                                  (#,#) ipv2_scomT [Occ=Once] ipv3_scomU [Occ=Once] ->
                                      let {
                                        sat_scomV [Occ=Once] :: GHC.Base.Maybe GHC.Base.String
                                        [LclId] =
                                            CCCS GHC.Base.Just! [ipv3_scomU];
                                      } in  (#,#) [ipv2_scomT sat_scomV];
                                };
                          };
                    };
                1# -> (#,#) [ds_scomJ GHC.Base.Nothing];
              };
        };

System.Environment.getEnv3 [InlPrag=NOUSERINLINE[0]]
  :: Foreign.C.String.CString
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.Base.String #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [w_scomW w1_scomX]
        case w_scomW of {
          GHC.Ptr.Ptr ww1_scomZ [Occ=Once] ->
              System.Environment.$wlvl ww1_scomZ w1_scomX;
        };

System.Environment.lookupEnv1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.Base.String #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [name_scon0 s1_scon1]
        case GHC.IO.Encoding.getForeignEncoding s1_scon1 of {
          (#,#) ipv_scon3 [Occ=Once] ipv1_scon4 [Occ=Once] ->
              GHC.Foreign.charIsRepresentable3
                  ipv1_scon4 name_scon0 System.Environment.getEnv3 ipv_scon3;
        };

System.Environment.lookupEnv
  :: GHC.Base.String -> GHC.Types.IO (GHC.Base.Maybe GHC.Base.String)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] System.Environment.lookupEnv1 eta_B2 eta_B1;

lvl1_rcom1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "getEnv"#;

lvl2_rcom2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl1_rcom1;

lvl3_rcom3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "no environment variable"#;

lvl4_rcom4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl3_rcom3;

System.Environment.getEnv2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Base.String
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [eta_scon5 name_scon6]
        let {
          sat_scon9 [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [name_scon6] \u []
                  let {
                    sat_scon7 [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                    [LclId] =
                        CCCS GHC.Base.Just! [name_scon6]; } in
                  let {
                    sat_scon8 [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                                        GHC.IO.Exception.NoSuchThing
                                                        lvl2_rcom2
                                                        lvl4_rcom4
                                                        GHC.Base.Nothing
                                                        sat_scon7];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_scon8;
        } in  raiseIO# [sat_scon9 eta_scon5];

System.Environment.getEnv1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [name_scona s_sconb]
        case GHC.IO.Encoding.getForeignEncoding s_sconb of {
          (#,#) ipv_scond [Occ=Once] ipv1_scone [Occ=Once] ->
              case
                  GHC.Foreign.charIsRepresentable3
                      ipv1_scone name_scona System.Environment.getEnv3 ipv_scond
              of
              { (#,#) ipv2_scong [Occ=Once*] ipv3_sconh [Occ=Once!] ->
                    case ipv3_sconh of {
                      GHC.Base.Nothing ->
                          System.Environment.getEnv2 ipv2_scong name_scona;
                      GHC.Base.Just x_sconj [Occ=Once] -> (#,#) [ipv2_scong x_sconj];
                    };
              };
        };

System.Environment.getEnv
  :: GHC.Base.String -> GHC.Types.IO GHC.Base.String
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] System.Environment.getEnv1 eta_B2 eta_B1;

System.Environment.getProgName_go [Occ=LoopBreaker]
  :: [GHC.Types.Char] -> [GHC.Types.Char] -> GHC.IO.FilePath
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [acc_sconk ds_sconl]
        case ds_sconl of {
          [] -> acc_sconk;
          : x_sconn [Occ=Once!] xs_scono ->
              case x_sconn of {
                GHC.Types.C# ds1_sconq [Occ=Once!] ->
                    case ds1_sconq of {
                      __DEFAULT -> System.Environment.getProgName_go acc_sconk xs_scono;
                      '/'# -> System.Environment.getProgName_go xs_scono xs_scono;
                    };
              };
        };

System.Environment.getProgName1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_scons]
        case newAlignedPinnedByteArray# [4# 4# eta_scons] of {
          (#,#) ipv_sconu [Occ=Once] ipv1_sconv [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_sconv ipv_sconu] of {
                (#,#) ipv2_sconx [Occ=Once] ipv3_scony ->
                    case newAlignedPinnedByteArray# [8# 8# ipv2_sconx] of {
                      (#,#) ipv4_sconA [Occ=Once] ipv5_sconB [Occ=Once] ->
                          case unsafeFreezeByteArray# [ipv5_sconB ipv4_sconA] of {
                            (#,#) ipv6_sconD [Occ=Once] ipv7_sconE ->
                                case byteArrayContents# [ipv7_sconE] of p_argv_sconF [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case byteArrayContents# [ipv3_scony] of sat_sconH {
                                        __DEFAULT ->
                                            case
                                                __pkg_ccall base-4.11.0.0 [sat_sconH
                                                                           p_argv_sconF
                                                                           ipv6_sconD]
                                            of
                                            { Unit# ds_sconJ [Occ=Once] ->
                                                  case
                                                      readAddrOffAddr# [p_argv_sconF 0# ds_sconJ]
                                                  of
                                                  { (#,#) ipv8_sconL [Occ=Once]
                                                          ipv9_sconM [Occ=Once] ->
                                                        case
                                                            GHC.IO.Encoding.getFileSystemEncoding1
                                                        of
                                                        { (,) getFileSystemEncoding81_sconO [Occ=Once]
                                                              _ [Occ=Dead] ->
                                                              case
                                                                  getFileSystemEncoding81_sconO
                                                                      ipv8_sconL
                                                              of
                                                              { (#,#) ipv10_sconR [Occ=Once]
                                                                      ipv11_sconS [Occ=Once] ->
                                                                    case
                                                                        readAddrOffAddr# [ipv9_sconM
                                                                                          0#
                                                                                          ipv10_sconR]
                                                                    of
                                                                    { (#,#) ipv12_sconU [Occ=Once]
                                                                            ipv13_sconV [Occ=Once] ->
                                                                          case
                                                                              GHC.Foreign.$wpeekCString
                                                                                  ipv11_sconS
                                                                                  ipv13_sconV
                                                                                  ipv12_sconU
                                                                          of
                                                                          { (#,#) ipv14_sconX [Occ=Once]
                                                                                  ipv15_sconY ->
                                                                                case
                                                                                    touch# [ipv7_sconE
                                                                                            ipv14_sconX]
                                                                                of
                                                                                s4_sconZ
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          touch# [ipv3_scony
                                                                                                  s4_sconZ]
                                                                                      of
                                                                                      s1_scoo0
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_scoo1 [Occ=Once]
                                                                                                :: GHC.Base.String
                                                                                              [LclId] =
                                                                                                  [ipv15_sconY] \u []
                                                                                                      System.Environment.getProgName_go
                                                                                                          ipv15_sconY
                                                                                                          ipv15_sconY;
                                                                                            } in 
                                                                                              (#,#) [s1_scoo0
                                                                                                     sat_scoo1];
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

System.Environment.getProgName :: GHC.Types.IO GHC.Base.String
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] System.Environment.getProgName1 eta_B1;

System.Environment.getArgs1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_scoo2]
        case newAlignedPinnedByteArray# [4# 4# eta_scoo2] of {
          (#,#) ipv_scoo4 [Occ=Once] ipv1_scoo5 [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_scoo5 ipv_scoo4] of {
                (#,#) ipv2_scoo7 [Occ=Once] ipv3_scoo8 ->
                    case newAlignedPinnedByteArray# [8# 8# ipv2_scoo7] of {
                      (#,#) ipv4_scooa [Occ=Once] ipv5_scoob [Occ=Once] ->
                          case unsafeFreezeByteArray# [ipv5_scoob ipv4_scooa] of {
                            (#,#) ipv6_scood [Occ=Once] ipv7_scooe ->
                                case byteArrayContents# [ipv3_scoo8] of p_argc_scoof [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case
                                          byteArrayContents# [ipv7_scooe]
                                      of
                                      p_argv_scoog [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                __pkg_ccall base-4.11.0.0 [p_argc_scoof
                                                                           p_argv_scoog
                                                                           ipv6_scood]
                                            of
                                            { Unit# ds_scooj [Occ=Once] ->
                                                  case
                                                      readInt32OffAddr# [p_argc_scoof 0# ds_scooj]
                                                  of
                                                  { (#,#) ipv8_scool [Occ=Once]
                                                          ipv9_scoom [Occ=Once] ->
                                                        case
                                                            readAddrOffAddr# [p_argv_scoog
                                                                              0#
                                                                              ipv8_scool]
                                                        of
                                                        { (#,#) ipv10_scooo [Occ=Once]
                                                                ipv11_scoop [Occ=Once] ->
                                                              case
                                                                  GHC.IO.Encoding.getFileSystemEncoding1
                                                              of
                                                              { (,) getFileSystemEncoding81_scoor [Occ=Once]
                                                                    _ [Occ=Dead] ->
                                                                    case
                                                                        getFileSystemEncoding81_scoor
                                                                            ipv10_scooo
                                                                    of
                                                                    { (#,#) ipv12_scoou [Occ=Once*]
                                                                            ipv13_scoov [Occ=OnceL] ->
                                                                          case
                                                                              -# [ipv9_scoom 1#]
                                                                          of
                                                                          ww_scoow [Dmd=<S,U>]
                                                                          { __DEFAULT ->
                                                                                let-no-escape {
                                                                                  $j_scoox [Occ=Once*!T[2],
                                                                                            Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                                                    :: GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld
                                                                                       -> [Foreign.C.String.CString]
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             [GHC.Base.String] #)
                                                                                  [LclId[JoinId(2)],
                                                                                   Arity=2,
                                                                                   Str=<S,U><S,1*U>,
                                                                                   Unf=OtherCon []] =
                                                                                      sat-only [ipv3_scoo8
                                                                                                ipv7_scooe
                                                                                                ipv13_scoov] \r [ipv14_scooy
                                                                                                                 ipv15_scooz]
                                                                                          let {
                                                                                            go_scooA [Occ=LoopBreaker]
                                                                                              :: [GHC.Foreign.CString]
                                                                                                 -> GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld
                                                                                                 -> (# GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld,
                                                                                                       [GHC.Base.String] #)
                                                                                            [LclId,
                                                                                             Arity=2,
                                                                                             Str=<S,1*U><S,U>,
                                                                                             Unf=OtherCon []] =
                                                                                                sat-only [ipv13_scoov
                                                                                                          go_scooA] \r [ds9_scooB
                                                                                                                        eta1_scooC]
                                                                                                    case
                                                                                                        ds9_scooB
                                                                                                    of
                                                                                                    { [] ->
                                                                                                          (#,#) [eta1_scooC
                                                                                                                 GHC.Types.[]];
                                                                                                      : y_scooE [Occ=Once!]
                                                                                                        ys_scooF [Occ=Once] ->
                                                                                                          case
                                                                                                              y_scooE
                                                                                                          of
                                                                                                          { GHC.Ptr.Ptr ww2_scooH [Occ=Once] ->
                                                                                                                case
                                                                                                                    GHC.Foreign.$wpeekCString
                                                                                                                        ipv13_scoov
                                                                                                                        ww2_scooH
                                                                                                                        eta1_scooC
                                                                                                                of
                                                                                                                { (#,#) ipv16_scooJ [Occ=Once]
                                                                                                                        ipv17_scooK [Occ=Once] ->
                                                                                                                      case
                                                                                                                          go_scooA
                                                                                                                              ys_scooF
                                                                                                                              ipv16_scooJ
                                                                                                                      of
                                                                                                                      { (#,#) ipv18_scooM [Occ=Once]
                                                                                                                              ipv19_scooN [Occ=Once] ->
                                                                                                                            let {
                                                                                                                              sat_scooO [Occ=Once]
                                                                                                                                :: [GHC.Base.String]
                                                                                                                              [LclId] =
                                                                                                                                  CCCS :! [ipv17_scooK
                                                                                                                                           ipv19_scooN];
                                                                                                                            } in 
                                                                                                                              (#,#) [ipv18_scooM
                                                                                                                                     sat_scooO];
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                    };
                                                                                          } in 
                                                                                            case
                                                                                                go_scooA
                                                                                                    ipv15_scooz
                                                                                                    ipv14_scooy
                                                                                            of
                                                                                            { (#,#) ipv16_scooQ [Occ=Once]
                                                                                                    ipv17_scooR [Occ=Once] ->
                                                                                                  case
                                                                                                      touch# [ipv7_scooe
                                                                                                              ipv16_scooQ]
                                                                                                  of
                                                                                                  s4_scooS
                                                                                                  { __DEFAULT ->
                                                                                                        case
                                                                                                            touch# [ipv3_scoo8
                                                                                                                    s4_scooS]
                                                                                                        of
                                                                                                        s1_scooT
                                                                                                        { __DEFAULT ->
                                                                                                              (#,#) [s1_scooT
                                                                                                                     ipv17_scooR];
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                } in 
                                                                                  case
                                                                                      <=# [ww_scoow
                                                                                           0#]
                                                                                  of
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            plusAddr# [ipv11_scoop
                                                                                                       8#]
                                                                                        of
                                                                                        w1_scooV [Dmd=<S,U>]
                                                                                        { __DEFAULT ->
                                                                                              case
                                                                                                  -# [ww_scoow
                                                                                                      1#]
                                                                                              of
                                                                                              sat_scopf
                                                                                              { __DEFAULT ->
                                                                                                    let-no-escape {
                                                                                                      exit_scooW [Occ=OnceL!T[2],
                                                                                                                  Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                                                                        :: [Foreign.C.String.CString]
                                                                                                           -> GHC.Prim.State#
                                                                                                                GHC.Prim.RealWorld
                                                                                                           -> (# GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                 [GHC.Base.String] #)
                                                                                                      [LclId[JoinId(2)],
                                                                                                       Arity=2,
                                                                                                       Str=<L,U><S,U>,
                                                                                                       Unf=OtherCon []] =
                                                                                                          sat-only [$j_scoox
                                                                                                                    w1_scooV] \r [w3_scooX
                                                                                                                                  w4_scooY]
                                                                                                              case
                                                                                                                  readAddrOffAddr# [w1_scooV
                                                                                                                                    0#
                                                                                                                                    w4_scooY]
                                                                                                              of
                                                                                                              { (#,#) ipv14_scop0 [Occ=Once]
                                                                                                                      ipv15_scop1 [Occ=Once] ->
                                                                                                                    let {
                                                                                                                      sat_scop2 [Occ=Once]
                                                                                                                        :: Foreign.C.String.CString
                                                                                                                      [LclId] =
                                                                                                                          CCCS GHC.Ptr.Ptr! [ipv15_scop1]; } in
                                                                                                                    let {
                                                                                                                      sat_scop3 [Occ=Once]
                                                                                                                        :: [Foreign.C.String.CString]
                                                                                                                      [LclId] =
                                                                                                                          CCCS :! [sat_scop2
                                                                                                                                   w3_scooX];
                                                                                                                    } in 
                                                                                                                      $j_scoox
                                                                                                                          ipv14_scop0
                                                                                                                          sat_scop3;
                                                                                                              };
                                                                                                    } in 
                                                                                                      let-no-escape {
                                                                                                        $wf_scop4 [InlPrag=NOUSERINLINE[0],
                                                                                                                   Occ=LoopBreakerT[3]]
                                                                                                          :: GHC.Prim.Int#
                                                                                                             -> [Foreign.C.String.CString]
                                                                                                             -> GHC.Prim.State#
                                                                                                                  GHC.Prim.RealWorld
                                                                                                             -> (# GHC.Prim.State#
                                                                                                                     GHC.Prim.RealWorld,
                                                                                                                   [GHC.Base.String] #)
                                                                                                        [LclId[JoinId(3)],
                                                                                                         Arity=3,
                                                                                                         Str=<S,1*U><L,U><S,U>,
                                                                                                         Unf=OtherCon []] =
                                                                                                            sat-only [w1_scooV
                                                                                                                      exit_scooW
                                                                                                                      $wf_scop4] \r [ww1_scop5
                                                                                                                                     w3_scop6
                                                                                                                                     w4_scop7]
                                                                                                                case
                                                                                                                    ww1_scop5
                                                                                                                of
                                                                                                                ds9_scop8
                                                                                                                { __DEFAULT ->
                                                                                                                      case
                                                                                                                          readAddrOffAddr# [w1_scooV
                                                                                                                                            ds9_scop8
                                                                                                                                            w4_scop7]
                                                                                                                      of
                                                                                                                      { (#,#) ipv14_scopa [Occ=Once]
                                                                                                                              ipv15_scopb [Occ=Once] ->
                                                                                                                            let {
                                                                                                                              sat_scopd [Occ=Once]
                                                                                                                                :: Foreign.C.String.CString
                                                                                                                              [LclId] =
                                                                                                                                  CCCS GHC.Ptr.Ptr! [ipv15_scopb]; } in
                                                                                                                            let {
                                                                                                                              sat_scope [Occ=Once]
                                                                                                                                :: [Foreign.C.String.CString]
                                                                                                                              [LclId] =
                                                                                                                                  CCCS :! [sat_scopd
                                                                                                                                           w3_scop6];
                                                                                                                            } in 
                                                                                                                              case
                                                                                                                                  -# [ds9_scop8
                                                                                                                                      1#]
                                                                                                                              of
                                                                                                                              sat_scopc
                                                                                                                              { __DEFAULT ->
                                                                                                                                    $wf_scop4
                                                                                                                                        sat_scopc
                                                                                                                                        sat_scope
                                                                                                                                        ipv14_scopa;
                                                                                                                              };
                                                                                                                      };
                                                                                                                  0# ->
                                                                                                                      exit_scooW
                                                                                                                          w3_scop6
                                                                                                                          w4_scop7;
                                                                                                                };
                                                                                                      } in 
                                                                                                        $wf_scop4
                                                                                                            sat_scopf
                                                                                                            GHC.Types.[]
                                                                                                            ipv12_scoou;
                                                                                              };
                                                                                        };
                                                                                    1# ->
                                                                                        $j_scoox
                                                                                            ipv12_scoou
                                                                                            GHC.Types.[];
                                                                                  };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

System.Environment.getArgs :: GHC.Types.IO [GHC.Base.String]
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] System.Environment.getArgs1 eta_B1;

System.Environment.withArgs2
  :: forall a.
     [GHC.Base.String]
     -> GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<L,1*U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [new_args_scopg act_scoph s_scopi]
        case System.Environment.getProgName1 s_scopi of {
          (#,#) ipv_scopk [Occ=Once] ipv1_scopl [Occ=OnceL] ->
              case System.Environment.getArgs1 ipv_scopk of {
                (#,#) ipv2_scopn [Occ=Once] ipv3_scopo [Occ=OnceL] ->
                    case getMaskingState# [ipv2_scopn] of {
                      (#,#) ipv4_scopq [Occ=Once*] ipv5_scopr [Occ=Once!] ->
                          let {
                            after_scops :: [GHC.Base.String]
                            [LclId, Unf=OtherCon []] =
                                CCCS :! [ipv1_scopl ipv3_scopo];
                          } in 
                            case ipv5_scopr of {
                              __DEFAULT ->
                                  case GHC.IO.Encoding.getFileSystemEncoding1 of {
                                    (,) getFileSystemEncoding81_scopv _ [Occ=Dead] ->
                                        case getFileSystemEncoding81_scopv ipv4_scopq of {
                                          (#,#) ipv6_scopy [Occ=Once] ipv7_scopz [Occ=Once] ->
                                              case
                                                  GHC.Foreign.withCStringsLen1
                                                      ipv7_scopz new_args_scopg lvl_rcom0 ipv6_scopy
                                              of
                                              { (#,#) ipv8_scopB [Occ=Once] _ [Occ=Dead] ->
                                                    let {
                                                      sat_scopM [Occ=Once]
                                                        :: GHC.Exception.SomeException
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_acnvJ #)
                                                      [LclId] =
                                                          [after_scops
                                                           getFileSystemEncoding81_scopv] \r [e1_scopE
                                                                                              s1_scopF]
                                                              case
                                                                  getFileSystemEncoding81_scopv
                                                                      s1_scopF
                                                              of
                                                              { (#,#) ipv10_scopH [Occ=Once]
                                                                      ipv11_scopI [Occ=Once] ->
                                                                    case
                                                                        GHC.Foreign.withCStringsLen1
                                                                            ipv11_scopI
                                                                            after_scops
                                                                            lvl_rcom0
                                                                            ipv10_scopH
                                                                    of
                                                                    { (#,#) ipv12_scopK [Occ=Once]
                                                                            _ [Occ=Dead] ->
                                                                          raiseIO# [e1_scopE
                                                                                    ipv12_scopK];
                                                                    };
                                                              }; } in
                                                    let {
                                                      sat_scopD [Occ=Once]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_acnvJ #)
                                                      [LclId] =
                                                          [act_scoph] \r [eta_B1]
                                                              maskAsyncExceptions# [act_scoph
                                                                                    eta_B1];
                                                    } in 
                                                      case
                                                          catch# [sat_scopD sat_scopM ipv8_scopB]
                                                      of
                                                      { (#,#) ipv10_scopO [Occ=Once]
                                                              ipv11_scopP [Occ=Once] ->
                                                            case
                                                                getFileSystemEncoding81_scopv
                                                                    ipv10_scopO
                                                            of
                                                            { (#,#) ipv12_scopR [Occ=Once]
                                                                    ipv13_scopS [Occ=Once] ->
                                                                  case
                                                                      GHC.Foreign.withCStringsLen1
                                                                          ipv13_scopS
                                                                          after_scops
                                                                          lvl_rcom0
                                                                          ipv12_scopR
                                                                  of
                                                                  { (#,#) ipv14_scopU [Occ=Once]
                                                                          _ [Occ=Dead] ->
                                                                        (#,#) [ipv14_scopU
                                                                               ipv11_scopP];
                                                                  };
                                                            };
                                                      };
                                              };
                                        };
                                  };
                              0# ->
                                  let {
                                    sat_scoqp [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_acnvJ #)
                                    [LclId] =
                                        [new_args_scopg act_scoph after_scops] \r [s1_scopW]
                                            case GHC.IO.Encoding.getFileSystemEncoding1 of {
                                              (,) getFileSystemEncoding81_scopY _ [Occ=Dead] ->
                                                  case getFileSystemEncoding81_scopY s1_scopW of {
                                                    (#,#) ipv6_scoq1 [Occ=Once]
                                                          ipv7_scoq2 [Occ=Once] ->
                                                        case
                                                            GHC.Foreign.withCStringsLen1
                                                                ipv7_scoq2
                                                                new_args_scopg
                                                                lvl_rcom0
                                                                ipv6_scoq1
                                                        of
                                                        { (#,#) ipv8_scoq4 [Occ=Once]
                                                                _ [Occ=Dead] ->
                                                              let {
                                                                sat_scoqf [Occ=Once]
                                                                  :: GHC.Exception.SomeException
                                                                     -> GHC.Prim.State#
                                                                          GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           a_acnvJ #)
                                                                [LclId] =
                                                                    [after_scops
                                                                     getFileSystemEncoding81_scopY] \r [e1_scoq7
                                                                                                        s2_scoq8]
                                                                        case
                                                                            getFileSystemEncoding81_scopY
                                                                                s2_scoq8
                                                                        of
                                                                        { (#,#) ipv10_scoqa [Occ=Once]
                                                                                ipv11_scoqb [Occ=Once] ->
                                                                              case
                                                                                  GHC.Foreign.withCStringsLen1
                                                                                      ipv11_scoqb
                                                                                      after_scops
                                                                                      lvl_rcom0
                                                                                      ipv10_scoqa
                                                                              of
                                                                              { (#,#) ipv12_scoqd [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    raiseIO# [e1_scoq7
                                                                                              ipv12_scoqd];
                                                                              };
                                                                        }; } in
                                                              let {
                                                                sat_scoq6 [Occ=Once]
                                                                  :: GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           a_acnvJ #)
                                                                [LclId] =
                                                                    [act_scoph] \r [eta_B1]
                                                                        unmaskAsyncExceptions# [act_scoph
                                                                                                eta_B1];
                                                              } in 
                                                                case
                                                                    catch# [sat_scoq6
                                                                            sat_scoqf
                                                                            ipv8_scoq4]
                                                                of
                                                                { (#,#) ipv10_scoqh [Occ=Once]
                                                                        ipv11_scoqi [Occ=Once] ->
                                                                      case
                                                                          getFileSystemEncoding81_scopY
                                                                              ipv10_scoqh
                                                                      of
                                                                      { (#,#) ipv12_scoqk [Occ=Once]
                                                                              ipv13_scoql [Occ=Once] ->
                                                                            case
                                                                                GHC.Foreign.withCStringsLen1
                                                                                    ipv13_scoql
                                                                                    after_scops
                                                                                    lvl_rcom0
                                                                                    ipv12_scoqk
                                                                            of
                                                                            { (#,#) ipv14_scoqn [Occ=Once]
                                                                                    _ [Occ=Dead] ->
                                                                                  (#,#) [ipv14_scoqn
                                                                                         ipv11_scoqi];
                                                                            };
                                                                      };
                                                                };
                                                        };
                                                  };
                                            };
                                  } in  maskAsyncExceptions# [sat_scoqp ipv4_scopq];
                              1# ->
                                  case GHC.IO.Encoding.getFileSystemEncoding1 of {
                                    (,) getFileSystemEncoding81_scoqr _ [Occ=Dead] ->
                                        case getFileSystemEncoding81_scoqr ipv4_scopq of {
                                          (#,#) ipv6_scoqu [Occ=Once] ipv7_scoqv [Occ=Once] ->
                                              case
                                                  GHC.Foreign.withCStringsLen1
                                                      ipv7_scoqv new_args_scopg lvl_rcom0 ipv6_scoqu
                                              of
                                              { (#,#) ipv8_scoqx [Occ=Once] _ [Occ=Dead] ->
                                                    let {
                                                      sat_scoqI [Occ=Once]
                                                        :: GHC.Exception.SomeException
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_acnvJ #)
                                                      [LclId] =
                                                          [after_scops
                                                           getFileSystemEncoding81_scoqr] \r [e1_scoqA
                                                                                              s1_scoqB]
                                                              case
                                                                  getFileSystemEncoding81_scoqr
                                                                      s1_scoqB
                                                              of
                                                              { (#,#) ipv10_scoqD [Occ=Once]
                                                                      ipv11_scoqE [Occ=Once] ->
                                                                    case
                                                                        GHC.Foreign.withCStringsLen1
                                                                            ipv11_scoqE
                                                                            after_scops
                                                                            lvl_rcom0
                                                                            ipv10_scoqD
                                                                    of
                                                                    { (#,#) ipv12_scoqG [Occ=Once]
                                                                            _ [Occ=Dead] ->
                                                                          raiseIO# [e1_scoqA
                                                                                    ipv12_scoqG];
                                                                    };
                                                              }; } in
                                                    let {
                                                      sat_scoqz [Occ=Once]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_acnvJ #)
                                                      [LclId] =
                                                          [act_scoph] \r [eta_B1]
                                                              maskUninterruptible# [act_scoph
                                                                                    eta_B1];
                                                    } in 
                                                      case
                                                          catch# [sat_scoqz sat_scoqI ipv8_scoqx]
                                                      of
                                                      { (#,#) ipv10_scoqK [Occ=Once]
                                                              ipv11_scoqL [Occ=Once] ->
                                                            case
                                                                getFileSystemEncoding81_scoqr
                                                                    ipv10_scoqK
                                                            of
                                                            { (#,#) ipv12_scoqN [Occ=Once]
                                                                    ipv13_scoqO [Occ=Once] ->
                                                                  case
                                                                      GHC.Foreign.withCStringsLen1
                                                                          ipv13_scoqO
                                                                          after_scops
                                                                          lvl_rcom0
                                                                          ipv12_scoqN
                                                                  of
                                                                  { (#,#) ipv14_scoqQ [Occ=Once]
                                                                          _ [Occ=Dead] ->
                                                                        (#,#) [ipv14_scoqQ
                                                                               ipv11_scoqL];
                                                                  };
                                                            };
                                                      };
                                              };
                                        };
                                  };
                            };
                    };
              };
        };

System.Environment.withArgs1
  :: forall a.
     [GHC.Base.String]
     -> GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<L,U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [xs_scoqS act_scoqT s_scoqU]
        case System.Environment.getProgName1 s_scoqU of {
          (#,#) ipv_scoqW [Occ=Once] ipv1_scoqX [Occ=Once] ->
              let {
                sat_scoqY [Occ=Once] :: [GHC.Base.String]
                [LclId] =
                    CCCS :! [ipv1_scoqX xs_scoqS];
              } in  System.Environment.withArgs2 sat_scoqY act_scoqT ipv_scoqW;
        };

System.Environment.withArgs
  :: forall a. [GHC.Base.String] -> GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=3, Str=<L,U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.Environment.withArgs1 eta_B3 eta_B2 eta_B1;

System.Environment.withProgName1
  :: forall a.
     GHC.Base.String
     -> GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<L,U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [nm_scoqZ act_scor0 s_scor1]
        case System.Environment.getArgs1 s_scor1 of {
          (#,#) ipv_scor3 [Occ=Once] ipv1_scor4 [Occ=Once] ->
              let {
                sat_scor5 [Occ=Once] :: [GHC.Base.String]
                [LclId] =
                    CCCS :! [nm_scoqZ ipv1_scor4];
              } in  System.Environment.withArgs2 sat_scor5 act_scor0 ipv_scor3;
        };

System.Environment.withProgName
  :: forall a. GHC.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=3, Str=<L,U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.Environment.withProgName1 eta_B3 eta_B2 eta_B1;

System.Environment.getEnvironment3
  :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_scor6]
        case ds_scor6 of {
          GHC.Types.C# x_scor8 [Occ=Once!] ->
              case x_scor8 of {
                __DEFAULT -> GHC.Types.False [];
                '='# -> GHC.Types.True [];
              };
        };

System.Environment.getEnvironment2
  :: GHC.Base.String -> (GHC.Base.String, GHC.Base.String)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [str_scora]
        case
            GHC.List.$wbreak System.Environment.getEnvironment3 str_scora
        of
        { (#,#) ww1_scorc [Occ=Once*] ww2_scord [Occ=Once!] ->
              case ww2_scord of {
                [] -> (,) [ww1_scorc GHC.Types.[]];
                : _ [Occ=Dead] value_scorg [Occ=Once] ->
                    (,) [ww1_scorc value_scorg];
              };
        };

System.Environment.getEnvironment1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           [(GHC.Base.String, GHC.Base.String)] #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_scorh]
        case __pkg_ccall base-4.11.0.0 [s_scorh] of {
          (#,#) ds_scork [Occ=Once*] ds1_scorl ->
              case eqAddr# [ds1_scorl __NULL] of {
                __DEFAULT ->
                    case GHC.IO.Encoding.getFileSystemEncoding1 of {
                      (,) getFileSystemEncoding81_scoro [Occ=Once] _ [Occ=Dead] ->
                          case getFileSystemEncoding81_scoro ds_scork of {
                            (#,#) ipv_scorr [Occ=Once] ipv1_scors [Occ=OnceL] ->
                                let-no-escape {
                                  $w$j_scort [InlPrag=NOUSERINLINE[0],
                                              Occ=OnceL!T[2],
                                              Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> GHC.Prim.Int#
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             [(GHC.Base.String, GHC.Base.String)] #)
                                  [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
                                      sat-only [ds1_scorl ipv1_scors] \r [w_scoru ww_scorv]
                                          let-no-escape {
                                            $j_scorw [Occ=Once*!T[2], Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> [GHC.Ptr.Ptr Foreign.C.Types.CChar]
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       [(GHC.Base.String, GHC.Base.String)] #)
                                            [LclId[JoinId(2)],
                                             Arity=2,
                                             Str=<S,U><S,1*U>,
                                             Unf=OtherCon []] =
                                                sat-only [ipv1_scors] \r [ipv2_scorx ipv3_scory]
                                                    let {
                                                      go_scorz [Occ=LoopBreaker]
                                                        :: [GHC.Foreign.CString]
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 [GHC.Base.String] #)
                                                      [LclId,
                                                       Arity=2,
                                                       Str=<S,1*U><S,U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [ipv1_scors
                                                                    go_scorz] \r [ds3_scorA
                                                                                  eta_scorB]
                                                              case ds3_scorA of {
                                                                [] ->
                                                                    (#,#) [eta_scorB GHC.Types.[]];
                                                                : y_scorD [Occ=Once!]
                                                                  ys_scorE [Occ=Once] ->
                                                                    case y_scorD of {
                                                                      GHC.Ptr.Ptr ww2_scorG [Occ=Once] ->
                                                                          case
                                                                              GHC.Foreign.$wpeekCString
                                                                                  ipv1_scors
                                                                                  ww2_scorG
                                                                                  eta_scorB
                                                                          of
                                                                          { (#,#) ipv4_scorI [Occ=Once]
                                                                                  ipv5_scorJ [Occ=Once] ->
                                                                                case
                                                                                    go_scorz
                                                                                        ys_scorE
                                                                                        ipv4_scorI
                                                                                of
                                                                                { (#,#) ipv6_scorL [Occ=Once]
                                                                                        ipv7_scorM [Occ=Once] ->
                                                                                      let {
                                                                                        sat_scorN [Occ=Once]
                                                                                          :: [GHC.Base.String]
                                                                                        [LclId] =
                                                                                            CCCS :! [ipv5_scorJ
                                                                                                     ipv7_scorM];
                                                                                      } in 
                                                                                        (#,#) [ipv6_scorL
                                                                                               sat_scorN];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                    } in 
                                                      case go_scorz ipv3_scory ipv2_scorx of {
                                                        (#,#) ipv4_scorP [Occ=Once]
                                                              ipv5_scorQ [Occ=Once] ->
                                                            let {
                                                              sat_scorR [Occ=Once]
                                                                :: [(GHC.Base.String,
                                                                     GHC.Base.String)]
                                                              [LclId] =
                                                                  [ipv5_scorQ] \u []
                                                                      GHC.Base.map
                                                                          System.Environment.getEnvironment2
                                                                          ipv5_scorQ;
                                                            } in  (#,#) [ipv4_scorP sat_scorR];
                                                      };
                                          } in 
                                            case <=# [ww_scorv 0#] of {
                                              __DEFAULT ->
                                                  case -# [ww_scorv 1#] of sat_scosc {
                                                    __DEFAULT ->
                                                        let-no-escape {
                                                          exit_scorT [Occ=OnceL!T[2],
                                                                      Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                            :: [GHC.Ptr.Ptr Foreign.C.Types.CChar]
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     [(GHC.Base.String,
                                                                       GHC.Base.String)] #)
                                                          [LclId[JoinId(2)],
                                                           Arity=2,
                                                           Str=<L,U><S,U>,
                                                           Unf=OtherCon []] =
                                                              sat-only [ds1_scorl
                                                                        $j_scorw] \r [w3_scorU
                                                                                      w4_scorV]
                                                                  case
                                                                      readAddrOffAddr# [ds1_scorl
                                                                                        0#
                                                                                        w4_scorV]
                                                                  of
                                                                  { (#,#) ipv2_scorX [Occ=Once]
                                                                          ipv3_scorY [Occ=Once] ->
                                                                        let {
                                                                          sat_scorZ [Occ=Once]
                                                                            :: GHC.Ptr.Ptr
                                                                                 Foreign.C.Types.CChar
                                                                          [LclId] =
                                                                              CCCS GHC.Ptr.Ptr! [ipv3_scorY]; } in
                                                                        let {
                                                                          sat_scos0 [Occ=Once]
                                                                            :: [GHC.Ptr.Ptr
                                                                                  Foreign.C.Types.CChar]
                                                                          [LclId] =
                                                                              CCCS :! [sat_scorZ
                                                                                       w3_scorU];
                                                                        } in 
                                                                          $j_scorw
                                                                              ipv2_scorX sat_scos0;
                                                                  };
                                                        } in 
                                                          let-no-escape {
                                                            $wf_scos1 [InlPrag=NOUSERINLINE[0],
                                                                       Occ=LoopBreakerT[3]]
                                                              :: GHC.Prim.Int#
                                                                 -> [GHC.Ptr.Ptr
                                                                       Foreign.C.Types.CChar]
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       [(GHC.Base.String,
                                                                         GHC.Base.String)] #)
                                                            [LclId[JoinId(3)],
                                                             Arity=3,
                                                             Str=<S,1*U><L,U><S,U>,
                                                             Unf=OtherCon []] =
                                                                sat-only [ds1_scorl
                                                                          exit_scorT
                                                                          $wf_scos1] \r [ww1_scos2
                                                                                         w3_scos3
                                                                                         w4_scos4]
                                                                    case ww1_scos2 of ds3_scos5 {
                                                                      __DEFAULT ->
                                                                          case
                                                                              readAddrOffAddr# [ds1_scorl
                                                                                                ds3_scos5
                                                                                                w4_scos4]
                                                                          of
                                                                          { (#,#) ipv2_scos7 [Occ=Once]
                                                                                  ipv3_scos8 [Occ=Once] ->
                                                                                let {
                                                                                  sat_scosa [Occ=Once]
                                                                                    :: GHC.Ptr.Ptr
                                                                                         Foreign.C.Types.CChar
                                                                                  [LclId] =
                                                                                      CCCS GHC.Ptr.Ptr! [ipv3_scos8]; } in
                                                                                let {
                                                                                  sat_scosb [Occ=Once]
                                                                                    :: [GHC.Ptr.Ptr
                                                                                          Foreign.C.Types.CChar]
                                                                                  [LclId] =
                                                                                      CCCS :! [sat_scosa
                                                                                               w3_scos3];
                                                                                } in 
                                                                                  case
                                                                                      -# [ds3_scos5
                                                                                          1#]
                                                                                  of
                                                                                  sat_scos9
                                                                                  { __DEFAULT ->
                                                                                        $wf_scos1
                                                                                            sat_scos9
                                                                                            sat_scosb
                                                                                            ipv2_scos7;
                                                                                  };
                                                                          };
                                                                      0# ->
                                                                          exit_scorT
                                                                              w3_scos3 w4_scos4;
                                                                    };
                                                          } in 
                                                            $wf_scos1
                                                                sat_scosc GHC.Types.[] w_scoru;
                                                  };
                                              1# -> $j_scorw w_scoru GHC.Types.[];
                                            };
                                } in 
                                  let-no-escape {
                                    $wloop_scosd [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[2]]
                                      :: GHC.Prim.Int#
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               [(GHC.Base.String, GHC.Base.String)] #)
                                    [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
                                        sat-only [ds1_scorl $w$j_scort $wloop_scosd] \r [ww_scose
                                                                                         w_scosf]
                                            case readAddrOffAddr# [ds1_scorl ww_scose w_scosf] of {
                                              (#,#) ipv2_scosh [Occ=Once*] ipv3_scosi [Occ=Once] ->
                                                  case eqAddr# [ipv3_scosi __NULL] of {
                                                    __DEFAULT ->
                                                        case +# [ww_scose 1#] of sat_scosk {
                                                          __DEFAULT ->
                                                              $wloop_scosd sat_scosk ipv2_scosh;
                                                        };
                                                    1# -> $w$j_scort ipv2_scosh ww_scose;
                                                  };
                                            };
                                  } in  $wloop_scosd 0# ipv_scorr;
                          };
                    };
                1# -> (#,#) [ds_scork GHC.Types.[]];
              };
        };

System.Environment.getEnvironment
  :: GHC.Types.IO [(GHC.Base.String, GHC.Base.String)]
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] System.Environment.getEnvironment1 eta_B1;

System.Environment.setEnv11 :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_scosl]
        case ds_scosl of {
          GHC.Types.C# x_scosn [Occ=Once!] ->
              case x_scosn of {
                __DEFAULT -> GHC.Types.True [];
                '\NUL'# -> GHC.Types.False [];
              };
        };

lvl5_rcom5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "putenv"#;

lvl6_rcom6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_rcom5;

System.Environment.setEnv2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.Int#
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Foreign.C.Types.CInt #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ds_scosp ds2_scosq]
        case narrow32Int# [ds2_scosq] of sat_scosr {
          __DEFAULT -> Foreign.C.Error.$wlvl lvl6_rcom6 sat_scosr ds_scosp;
        };

System.Environment.setEnv10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "setEnv"#;

System.Environment.setEnv9 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.Environment.setEnv10;

System.Environment.setEnv8 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InvalidArgument
                                             System.Environment.setEnv9
                                             GHC.Types.[]
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

System.Environment.setEnv7 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            System.Environment.setEnv8;

System.Environment.setEnv6 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['='#];

System.Environment.setEnv3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "="#;

System.Environment.setEnv1
  :: GHC.Base.String
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [key__scoss value__scost eta_scosu]
        case
            GHC.List.takeWhile System.Environment.setEnv11 key__scoss
        of
        wild_scosv
        { [] -> raiseIO# [System.Environment.setEnv7 eta_scosu];
          : _ [Occ=Dead] _ [Occ=Dead] ->
              case
                  GHC.List.elem
                      GHC.Classes.$fEqChar System.Environment.setEnv6 wild_scosv
              of
              { GHC.Types.False ->
                    case
                        GHC.List.takeWhile System.Environment.setEnv11 value__scost
                    of
                    wild2_scosz
                    { [] ->
                          case GHC.IO.Encoding.getFileSystemEncoding eta_scosu of {
                            (#,#) ipv_scosB [Occ=Once] ipv1_scosC [Occ=Once] ->
                                GHC.Foreign.charIsRepresentable3
                                    ipv1_scosC wild_scosv System.Environment.setEnv4 ipv_scosB;
                          };
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          case GHC.IO.Encoding.getFileSystemEncoding1 of {
                            (,) getFileSystemEncoding81_scosG [Occ=Once] _ [Occ=Dead] ->
                                case getFileSystemEncoding81_scosG eta_scosu of {
                                  (#,#) ipv_scosJ [Occ=Once] ipv1_scosK [Occ=Once] ->
                                      let {
                                        sat_scosM [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            [wild_scosv wild2_scosz] \u []
                                                let {
                                                  sat_scosL [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [wild2_scosz] \s []
                                                          GHC.CString.unpackAppendCString#
                                                              System.Environment.setEnv3
                                                              wild2_scosz;
                                                } in  GHC.Base.++ wild_scosv sat_scosL;
                                      } in 
                                        case
                                            GHC.Foreign.newCString1 ipv1_scosK sat_scosM ipv_scosJ
                                        of
                                        { (#,#) ipv2_scosO [Occ=Once] ipv3_scosP [Occ=Once!] ->
                                              case ipv3_scosP of {
                                                GHC.Ptr.Ptr ds8_scosR [Occ=Once] ->
                                                    case
                                                        __pkg_ccall base-4.11.0.0 [ds8_scosR
                                                                                   ipv2_scosO]
                                                    of
                                                    { (#,#) ds9_scosU [Occ=Once*]
                                                            ds10_scosV [Occ=Once] ->
                                                          case narrow32Int# [ds10_scosV] of {
                                                            __DEFAULT ->
                                                                case
                                                                    __pkg_ccall base-4.11.0.0 [ds9_scosU]
                                                                of
                                                                { (#,#) ds11_scosZ [Occ=Once]
                                                                        ds12_scot0 [Occ=Once] ->
                                                                      System.Environment.setEnv2
                                                                          ds11_scosZ ds12_scot0;
                                                                };
                                                            0# -> (#,#) [ds9_scosU GHC.Tuple.()];
                                                          };
                                                    };
                                              };
                                        };
                                };
                          };
                    };
                GHC.Types.True -> raiseIO# [System.Environment.setEnv7 eta_scosu];
              };
        };

System.Environment.setEnv
  :: GHC.Base.String -> GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.Environment.setEnv1 eta_B3 eta_B2 eta_B1;


==================== STG syntax: ====================
2018-03-16 16:07:16.80612647 UTC

System.Environment.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

System.Environment.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.Environment.$trModule4];

System.Environment.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "System.Environment"#;

System.Environment.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.Environment.$trModule2];

System.Environment.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [System.Environment.$trModule3
                                     System.Environment.$trModule1];

loc_rcolY :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "unsetEnv"#;

loc1_rcolZ :: GHC.Base.String
[GblId] =
    [] \u [] GHC.CString.unpackCString# loc_rcolY;

System.Environment.setEnv5
  :: GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Foreign.C.Types.CInt #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ds2_scom8 void_0E]
        case narrow32Int# [ds2_scom8] of sat_scoma {
          __DEFAULT ->
              Foreign.C.Error.$wlvl loc1_rcolZ sat_scoma GHC.Prim.void#;
        };

System.Environment.setEnv4
  :: Foreign.C.String.CString
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [x_scomb void_0E]
        case x_scomb of {
          GHC.Ptr.Ptr ds1_scome [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ds1_scome GHC.Prim.void#] of {
                Unit# ds3_scomi [Occ=Once] ->
                    case narrow32Int# [ds3_scomi] of {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [GHC.Prim.void#] of {
                            Unit# ds5_scomn [Occ=Once] ->
                                System.Environment.setEnv5 ds5_scomn GHC.Prim.void#;
                          };
                      0# -> Unit# [GHC.Tuple.()];
                    };
              };
        };

System.Environment.unsetEnv1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [key_scomp void_0E]
        case GHC.IO.Encoding.getFileSystemEncoding GHC.Prim.void# of {
          Unit# ipv1_scomt [Occ=Once] ->
              GHC.Foreign.charIsRepresentable3
                  ipv1_scomt key_scomp System.Environment.setEnv4 GHC.Prim.void#;
        };

System.Environment.unsetEnv :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        System.Environment.unsetEnv1 eta_B2 GHC.Prim.void#;

lvl_rcom0
  :: GHC.Types.Int
     -> GHC.Ptr.Ptr GHC.Foreign.CString
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [len_scomu css_scomv void_0E]
        case len_scomu of {
          GHC.Types.I# x#_scomy [Occ=Once] ->
              case css_scomv of {
                GHC.Ptr.Ptr ds1_scomA [Occ=Once] ->
                    case narrow32Int# [x#_scomy] of sat_scomC {
                      __DEFAULT ->
                          case
                              __pkg_ccall base-4.11.0.0 [sat_scomC ds1_scomA GHC.Prim.void#]
                          of
                          { (##) -> Unit# [GHC.Tuple.()];
                          };
                    };
              };
        };

System.Environment.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.Base.String #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_scomF void_0E]
        case __pkg_ccall base-4.11.0.0 [ww_scomF GHC.Prim.void#] of {
          Unit# ds1_scomK ->
              case eqAddr# [ds1_scomK __NULL] of {
                __DEFAULT ->
                    case GHC.IO.Encoding.getFileSystemEncoding1 of {
                      (,) getFileSystemEncoding81_scomN [Occ=Once] _ [Occ=Dead] ->
                          case getFileSystemEncoding81_scomN GHC.Prim.void# of {
                            Unit# ipv1_scomR [Occ=Once] ->
                                case
                                    GHC.Foreign.$wpeekCString ipv1_scomR ds1_scomK GHC.Prim.void#
                                of
                                { Unit# ipv3_scomU [Occ=Once] ->
                                      let {
                                        sat_scomV [Occ=Once] :: GHC.Base.Maybe GHC.Base.String
                                        [LclId] =
                                            CCCS GHC.Base.Just! [ipv3_scomU];
                                      } in  Unit# [sat_scomV];
                                };
                          };
                    };
                1# -> Unit# [GHC.Base.Nothing];
              };
        };

System.Environment.getEnv3 [InlPrag=NOUSERINLINE[0]]
  :: Foreign.C.String.CString
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.Base.String #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [w_scomW void_0E]
        case w_scomW of {
          GHC.Ptr.Ptr ww1_scomZ [Occ=Once] ->
              System.Environment.$wlvl ww1_scomZ GHC.Prim.void#;
        };

System.Environment.lookupEnv1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.Base.String #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [name_scon0 void_0E]
        case GHC.IO.Encoding.getForeignEncoding GHC.Prim.void# of {
          Unit# ipv1_scon4 [Occ=Once] ->
              GHC.Foreign.charIsRepresentable3
                  ipv1_scon4 name_scon0 System.Environment.getEnv3 GHC.Prim.void#;
        };

System.Environment.lookupEnv
  :: GHC.Base.String -> GHC.Types.IO (GHC.Base.Maybe GHC.Base.String)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        System.Environment.lookupEnv1 eta_B2 GHC.Prim.void#;

lvl1_rcom1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "getEnv"#;

lvl2_rcom2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl1_rcom1;

lvl3_rcom3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "no environment variable"#;

lvl4_rcom4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl3_rcom3;

System.Environment.getEnv2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Base.String
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [void_0E name_scon6]
        let {
          sat_scon9 [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [name_scon6] \u []
                  let {
                    sat_scon7 [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                    [LclId] =
                        CCCS GHC.Base.Just! [name_scon6]; } in
                  let {
                    sat_scon8 [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                                        GHC.IO.Exception.NoSuchThing
                                                        lvl2_rcom2
                                                        lvl4_rcom4
                                                        GHC.Base.Nothing
                                                        sat_scon7];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_scon8;
        } in  raiseIO# [sat_scon9 GHC.Prim.void#];

System.Environment.getEnv1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [name_scona void_0E]
        case GHC.IO.Encoding.getForeignEncoding GHC.Prim.void# of {
          Unit# ipv1_scone [Occ=Once] ->
              case
                  GHC.Foreign.charIsRepresentable3
                      ipv1_scone name_scona System.Environment.getEnv3 GHC.Prim.void#
              of
              { Unit# ipv3_sconh [Occ=Once!] ->
                    case ipv3_sconh of {
                      GHC.Base.Nothing ->
                          System.Environment.getEnv2 GHC.Prim.void# name_scona;
                      GHC.Base.Just x_sconj [Occ=Once] -> Unit# [x_sconj];
                    };
              };
        };

System.Environment.getEnv
  :: GHC.Base.String -> GHC.Types.IO GHC.Base.String
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        System.Environment.getEnv1 eta_B2 GHC.Prim.void#;

System.Environment.getProgName_go [Occ=LoopBreaker]
  :: [GHC.Types.Char] -> [GHC.Types.Char] -> GHC.IO.FilePath
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [acc_sconk ds_sconl]
        case ds_sconl of {
          [] -> acc_sconk;
          : x_sconn [Occ=Once!] xs_scono ->
              case x_sconn of {
                GHC.Types.C# ds1_sconq [Occ=Once!] ->
                    case ds1_sconq of {
                      __DEFAULT -> System.Environment.getProgName_go acc_sconk xs_scono;
                      '/'# -> System.Environment.getProgName_go xs_scono xs_scono;
                    };
              };
        };

System.Environment.getProgName1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case newAlignedPinnedByteArray# [4# 4# GHC.Prim.void#] of {
          Unit# ipv1_sconv [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_sconv GHC.Prim.void#] of {
                Unit# ipv3_scony ->
                    case newAlignedPinnedByteArray# [8# 8# GHC.Prim.void#] of {
                      Unit# ipv5_sconB [Occ=Once] ->
                          case unsafeFreezeByteArray# [ipv5_sconB GHC.Prim.void#] of {
                            Unit# ipv7_sconE ->
                                case byteArrayContents# [ipv7_sconE] of p_argv_sconF [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case byteArrayContents# [ipv3_scony] of sat_sconH {
                                        __DEFAULT ->
                                            case
                                                __pkg_ccall base-4.11.0.0 [sat_sconH
                                                                           p_argv_sconF
                                                                           GHC.Prim.void#]
                                            of
                                            { (##) ->
                                                  case
                                                      readAddrOffAddr# [p_argv_sconF
                                                                        0#
                                                                        GHC.Prim.void#]
                                                  of
                                                  { Unit# ipv9_sconM [Occ=Once] ->
                                                        case
                                                            GHC.IO.Encoding.getFileSystemEncoding1
                                                        of
                                                        { (,) getFileSystemEncoding81_sconO [Occ=Once]
                                                              _ [Occ=Dead] ->
                                                              case
                                                                  getFileSystemEncoding81_sconO
                                                                      GHC.Prim.void#
                                                              of
                                                              { Unit# ipv11_sconS [Occ=Once] ->
                                                                    case
                                                                        readAddrOffAddr# [ipv9_sconM
                                                                                          0#
                                                                                          GHC.Prim.void#]
                                                                    of
                                                                    { Unit# ipv13_sconV [Occ=Once] ->
                                                                          case
                                                                              GHC.Foreign.$wpeekCString
                                                                                  ipv11_sconS
                                                                                  ipv13_sconV
                                                                                  GHC.Prim.void#
                                                                          of
                                                                          { Unit# ipv15_sconY ->
                                                                                case
                                                                                    touch# [ipv7_sconE
                                                                                            GHC.Prim.void#]
                                                                                of
                                                                                s4_sconZ
                                                                                { (##) ->
                                                                                      case
                                                                                          touch# [ipv3_scony
                                                                                                  GHC.Prim.void#]
                                                                                      of
                                                                                      s1_scoo0
                                                                                      { (##) ->
                                                                                            let {
                                                                                              sat_scoo1 [Occ=Once]
                                                                                                :: GHC.Base.String
                                                                                              [LclId] =
                                                                                                  [ipv15_sconY] \u []
                                                                                                      System.Environment.getProgName_go
                                                                                                          ipv15_sconY
                                                                                                          ipv15_sconY;
                                                                                            } in 
                                                                                              Unit# [sat_scoo1];
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

System.Environment.getProgName :: GHC.Types.IO GHC.Base.String
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] System.Environment.getProgName1 GHC.Prim.void#;

System.Environment.getArgs1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case newAlignedPinnedByteArray# [4# 4# GHC.Prim.void#] of {
          Unit# ipv1_scoo5 [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_scoo5 GHC.Prim.void#] of {
                Unit# ipv3_scoo8 ->
                    case newAlignedPinnedByteArray# [8# 8# GHC.Prim.void#] of {
                      Unit# ipv5_scoob [Occ=Once] ->
                          case unsafeFreezeByteArray# [ipv5_scoob GHC.Prim.void#] of {
                            Unit# ipv7_scooe ->
                                case byteArrayContents# [ipv3_scoo8] of p_argc_scoof [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case
                                          byteArrayContents# [ipv7_scooe]
                                      of
                                      p_argv_scoog [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                __pkg_ccall base-4.11.0.0 [p_argc_scoof
                                                                           p_argv_scoog
                                                                           GHC.Prim.void#]
                                            of
                                            { (##) ->
                                                  case
                                                      readInt32OffAddr# [p_argc_scoof
                                                                         0#
                                                                         GHC.Prim.void#]
                                                  of
                                                  { Unit# ipv9_scoom [Occ=Once] ->
                                                        case
                                                            readAddrOffAddr# [p_argv_scoog
                                                                              0#
                                                                              GHC.Prim.void#]
                                                        of
                                                        { Unit# ipv11_scoop [Occ=Once] ->
                                                              case
                                                                  GHC.IO.Encoding.getFileSystemEncoding1
                                                              of
                                                              { (,) getFileSystemEncoding81_scoor [Occ=Once]
                                                                    _ [Occ=Dead] ->
                                                                    case
                                                                        getFileSystemEncoding81_scoor
                                                                            GHC.Prim.void#
                                                                    of
                                                                    { Unit# ipv13_scoov [Occ=OnceL] ->
                                                                          case
                                                                              -# [ipv9_scoom 1#]
                                                                          of
                                                                          ww_scoow [Dmd=<S,U>]
                                                                          { __DEFAULT ->
                                                                                let-no-escape {
                                                                                  $j_scoox [Occ=Once*!T[2],
                                                                                            Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                                                    :: GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld
                                                                                       -> [Foreign.C.String.CString]
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             [GHC.Base.String] #)
                                                                                  [LclId[JoinId(2)],
                                                                                   Arity=2,
                                                                                   Str=<S,U><S,1*U>,
                                                                                   Unf=OtherCon []] =
                                                                                      sat-only [ipv3_scoo8
                                                                                                ipv7_scooe
                                                                                                ipv13_scoov] \r [void_0E
                                                                                                                 ipv15_scooz]
                                                                                          let {
                                                                                            go_scooA [Occ=LoopBreaker]
                                                                                              :: [GHC.Foreign.CString]
                                                                                                 -> GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld
                                                                                                 -> (# GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld,
                                                                                                       [GHC.Base.String] #)
                                                                                            [LclId,
                                                                                             Arity=2,
                                                                                             Str=<S,1*U><S,U>,
                                                                                             Unf=OtherCon []] =
                                                                                                sat-only [ipv13_scoov
                                                                                                          go_scooA] \r [ds9_scooB
                                                                                                                        void_0E]
                                                                                                    case
                                                                                                        ds9_scooB
                                                                                                    of
                                                                                                    { [] ->
                                                                                                          Unit# [GHC.Types.[]];
                                                                                                      : y_scooE [Occ=Once!]
                                                                                                        ys_scooF [Occ=Once] ->
                                                                                                          case
                                                                                                              y_scooE
                                                                                                          of
                                                                                                          { GHC.Ptr.Ptr ww2_scooH [Occ=Once] ->
                                                                                                                case
                                                                                                                    GHC.Foreign.$wpeekCString
                                                                                                                        ipv13_scoov
                                                                                                                        ww2_scooH
                                                                                                                        GHC.Prim.void#
                                                                                                                of
                                                                                                                { Unit# ipv17_scooK [Occ=Once] ->
                                                                                                                      case
                                                                                                                          go_scooA
                                                                                                                              ys_scooF
                                                                                                                              GHC.Prim.void#
                                                                                                                      of
                                                                                                                      { Unit# ipv19_scooN [Occ=Once] ->
                                                                                                                            let {
                                                                                                                              sat_scooO [Occ=Once]
                                                                                                                                :: [GHC.Base.String]
                                                                                                                              [LclId] =
                                                                                                                                  CCCS :! [ipv17_scooK
                                                                                                                                           ipv19_scooN];
                                                                                                                            } in 
                                                                                                                              Unit# [sat_scooO];
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                    };
                                                                                          } in 
                                                                                            case
                                                                                                go_scooA
                                                                                                    ipv15_scooz
                                                                                                    GHC.Prim.void#
                                                                                            of
                                                                                            { Unit# ipv17_scooR [Occ=Once] ->
                                                                                                  case
                                                                                                      touch# [ipv7_scooe
                                                                                                              GHC.Prim.void#]
                                                                                                  of
                                                                                                  s4_scooS
                                                                                                  { (##) ->
                                                                                                        case
                                                                                                            touch# [ipv3_scoo8
                                                                                                                    GHC.Prim.void#]
                                                                                                        of
                                                                                                        s1_scooT
                                                                                                        { (##) ->
                                                                                                              Unit# [ipv17_scooR];
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                } in 
                                                                                  case
                                                                                      <=# [ww_scoow
                                                                                           0#]
                                                                                  of
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            plusAddr# [ipv11_scoop
                                                                                                       8#]
                                                                                        of
                                                                                        w1_scooV [Dmd=<S,U>]
                                                                                        { __DEFAULT ->
                                                                                              case
                                                                                                  -# [ww_scoow
                                                                                                      1#]
                                                                                              of
                                                                                              sat_scopf
                                                                                              { __DEFAULT ->
                                                                                                    let-no-escape {
                                                                                                      exit_scooW [Occ=OnceL!T[2],
                                                                                                                  Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                                                                        :: [Foreign.C.String.CString]
                                                                                                           -> GHC.Prim.State#
                                                                                                                GHC.Prim.RealWorld
                                                                                                           -> (# GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                 [GHC.Base.String] #)
                                                                                                      [LclId[JoinId(2)],
                                                                                                       Arity=2,
                                                                                                       Str=<L,U><S,U>,
                                                                                                       Unf=OtherCon []] =
                                                                                                          sat-only [$j_scoox
                                                                                                                    w1_scooV] \r [w3_scooX
                                                                                                                                  void_0E]
                                                                                                              case
                                                                                                                  readAddrOffAddr# [w1_scooV
                                                                                                                                    0#
                                                                                                                                    GHC.Prim.void#]
                                                                                                              of
                                                                                                              { Unit# ipv15_scop1 [Occ=Once] ->
                                                                                                                    let {
                                                                                                                      sat_scop2 [Occ=Once]
                                                                                                                        :: Foreign.C.String.CString
                                                                                                                      [LclId] =
                                                                                                                          CCCS GHC.Ptr.Ptr! [ipv15_scop1]; } in
                                                                                                                    let {
                                                                                                                      sat_scop3 [Occ=Once]
                                                                                                                        :: [Foreign.C.String.CString]
                                                                                                                      [LclId] =
                                                                                                                          CCCS :! [sat_scop2
                                                                                                                                   w3_scooX];
                                                                                                                    } in 
                                                                                                                      $j_scoox
                                                                                                                          GHC.Prim.void#
                                                                                                                          sat_scop3;
                                                                                                              };
                                                                                                    } in 
                                                                                                      let-no-escape {
                                                                                                        $wf_scop4 [InlPrag=NOUSERINLINE[0],
                                                                                                                   Occ=LoopBreakerT[3]]
                                                                                                          :: GHC.Prim.Int#
                                                                                                             -> [Foreign.C.String.CString]
                                                                                                             -> GHC.Prim.State#
                                                                                                                  GHC.Prim.RealWorld
                                                                                                             -> (# GHC.Prim.State#
                                                                                                                     GHC.Prim.RealWorld,
                                                                                                                   [GHC.Base.String] #)
                                                                                                        [LclId[JoinId(3)],
                                                                                                         Arity=3,
                                                                                                         Str=<S,1*U><L,U><S,U>,
                                                                                                         Unf=OtherCon []] =
                                                                                                            sat-only [w1_scooV
                                                                                                                      exit_scooW
                                                                                                                      $wf_scop4] \r [ww1_scop5
                                                                                                                                     w3_scop6
                                                                                                                                     void_0E]
                                                                                                                case
                                                                                                                    ww1_scop5
                                                                                                                of
                                                                                                                ds9_scop8
                                                                                                                { __DEFAULT ->
                                                                                                                      case
                                                                                                                          readAddrOffAddr# [w1_scooV
                                                                                                                                            ds9_scop8
                                                                                                                                            GHC.Prim.void#]
                                                                                                                      of
                                                                                                                      { Unit# ipv15_scopb [Occ=Once] ->
                                                                                                                            let {
                                                                                                                              sat_scopd [Occ=Once]
                                                                                                                                :: Foreign.C.String.CString
                                                                                                                              [LclId] =
                                                                                                                                  CCCS GHC.Ptr.Ptr! [ipv15_scopb]; } in
                                                                                                                            let {
                                                                                                                              sat_scope [Occ=Once]
                                                                                                                                :: [Foreign.C.String.CString]
                                                                                                                              [LclId] =
                                                                                                                                  CCCS :! [sat_scopd
                                                                                                                                           w3_scop6];
                                                                                                                            } in 
                                                                                                                              case
                                                                                                                                  -# [ds9_scop8
                                                                                                                                      1#]
                                                                                                                              of
                                                                                                                              sat_scopc
                                                                                                                              { __DEFAULT ->
                                                                                                                                    $wf_scop4
                                                                                                                                        sat_scopc
                                                                                                                                        sat_scope
                                                                                                                                        GHC.Prim.void#;
                                                                                                                              };
                                                                                                                      };
                                                                                                                  0# ->
                                                                                                                      exit_scooW
                                                                                                                          w3_scop6
                                                                                                                          GHC.Prim.void#;
                                                                                                                };
                                                                                                      } in 
                                                                                                        $wf_scop4
                                                                                                            sat_scopf
                                                                                                            GHC.Types.[]
                                                                                                            GHC.Prim.void#;
                                                                                              };
                                                                                        };
                                                                                    1# ->
                                                                                        $j_scoox
                                                                                            GHC.Prim.void#
                                                                                            GHC.Types.[];
                                                                                  };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

System.Environment.getArgs :: GHC.Types.IO [GHC.Base.String]
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] System.Environment.getArgs1 GHC.Prim.void#;

System.Environment.withArgs2
  :: forall a.
     [GHC.Base.String]
     -> GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<L,1*U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [new_args_scopg act_scoph void_0E]
        case System.Environment.getProgName1 GHC.Prim.void# of {
          Unit# ipv1_scopl [Occ=OnceL] ->
              case System.Environment.getArgs1 GHC.Prim.void# of {
                Unit# ipv3_scopo [Occ=OnceL] ->
                    case getMaskingState# [GHC.Prim.void#] of {
                      Unit# ipv5_scopr [Occ=Once!] ->
                          let {
                            after_scops :: [GHC.Base.String]
                            [LclId, Unf=OtherCon []] =
                                CCCS :! [ipv1_scopl ipv3_scopo];
                          } in 
                            case ipv5_scopr of {
                              __DEFAULT ->
                                  case GHC.IO.Encoding.getFileSystemEncoding1 of {
                                    (,) getFileSystemEncoding81_scopv _ [Occ=Dead] ->
                                        case getFileSystemEncoding81_scopv GHC.Prim.void# of {
                                          Unit# ipv7_scopz [Occ=Once] ->
                                              case
                                                  GHC.Foreign.withCStringsLen1
                                                      ipv7_scopz
                                                      new_args_scopg
                                                      lvl_rcom0
                                                      GHC.Prim.void#
                                              of
                                              { Unit# _ [Occ=Dead] ->
                                                    let {
                                                      sat_scopM [Occ=Once]
                                                        :: GHC.Exception.SomeException
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_acnvJ #)
                                                      [LclId] =
                                                          [after_scops
                                                           getFileSystemEncoding81_scopv] \r [e1_scopE
                                                                                              void_0E]
                                                              case
                                                                  getFileSystemEncoding81_scopv
                                                                      GHC.Prim.void#
                                                              of
                                                              { Unit# ipv11_scopI [Occ=Once] ->
                                                                    case
                                                                        GHC.Foreign.withCStringsLen1
                                                                            ipv11_scopI
                                                                            after_scops
                                                                            lvl_rcom0
                                                                            GHC.Prim.void#
                                                                    of
                                                                    { Unit# _ [Occ=Dead] ->
                                                                          raiseIO# [e1_scopE
                                                                                    GHC.Prim.void#];
                                                                    };
                                                              }; } in
                                                    let {
                                                      sat_scopD [Occ=Once]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_acnvJ #)
                                                      [LclId] =
                                                          [act_scoph] \r [void_0E]
                                                              maskAsyncExceptions# [act_scoph
                                                                                    GHC.Prim.void#];
                                                    } in 
                                                      case
                                                          catch# [sat_scopD
                                                                  sat_scopM
                                                                  GHC.Prim.void#]
                                                      of
                                                      { Unit# ipv11_scopP [Occ=Once] ->
                                                            case
                                                                getFileSystemEncoding81_scopv
                                                                    GHC.Prim.void#
                                                            of
                                                            { Unit# ipv13_scopS [Occ=Once] ->
                                                                  case
                                                                      GHC.Foreign.withCStringsLen1
                                                                          ipv13_scopS
                                                                          after_scops
                                                                          lvl_rcom0
                                                                          GHC.Prim.void#
                                                                  of
                                                                  { Unit# _ [Occ=Dead] ->
                                                                        Unit# [ipv11_scopP];
                                                                  };
                                                            };
                                                      };
                                              };
                                        };
                                  };
                              0# ->
                                  let {
                                    sat_scoqp [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_acnvJ #)
                                    [LclId] =
                                        [new_args_scopg act_scoph after_scops] \r [void_0E]
                                            case GHC.IO.Encoding.getFileSystemEncoding1 of {
                                              (,) getFileSystemEncoding81_scopY _ [Occ=Dead] ->
                                                  case
                                                      getFileSystemEncoding81_scopY GHC.Prim.void#
                                                  of
                                                  { Unit# ipv7_scoq2 [Occ=Once] ->
                                                        case
                                                            GHC.Foreign.withCStringsLen1
                                                                ipv7_scoq2
                                                                new_args_scopg
                                                                lvl_rcom0
                                                                GHC.Prim.void#
                                                        of
                                                        { Unit# _ [Occ=Dead] ->
                                                              let {
                                                                sat_scoqf [Occ=Once]
                                                                  :: GHC.Exception.SomeException
                                                                     -> GHC.Prim.State#
                                                                          GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           a_acnvJ #)
                                                                [LclId] =
                                                                    [after_scops
                                                                     getFileSystemEncoding81_scopY] \r [e1_scoq7
                                                                                                        void_0E]
                                                                        case
                                                                            getFileSystemEncoding81_scopY
                                                                                GHC.Prim.void#
                                                                        of
                                                                        { Unit# ipv11_scoqb [Occ=Once] ->
                                                                              case
                                                                                  GHC.Foreign.withCStringsLen1
                                                                                      ipv11_scoqb
                                                                                      after_scops
                                                                                      lvl_rcom0
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    raiseIO# [e1_scoq7
                                                                                              GHC.Prim.void#];
                                                                              };
                                                                        }; } in
                                                              let {
                                                                sat_scoq6 [Occ=Once]
                                                                  :: GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           a_acnvJ #)
                                                                [LclId] =
                                                                    [act_scoph] \r [void_0E]
                                                                        unmaskAsyncExceptions# [act_scoph
                                                                                                GHC.Prim.void#];
                                                              } in 
                                                                case
                                                                    catch# [sat_scoq6
                                                                            sat_scoqf
                                                                            GHC.Prim.void#]
                                                                of
                                                                { Unit# ipv11_scoqi [Occ=Once] ->
                                                                      case
                                                                          getFileSystemEncoding81_scopY
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# ipv13_scoql [Occ=Once] ->
                                                                            case
                                                                                GHC.Foreign.withCStringsLen1
                                                                                    ipv13_scoql
                                                                                    after_scops
                                                                                    lvl_rcom0
                                                                                    GHC.Prim.void#
                                                                            of
                                                                            { Unit# _ [Occ=Dead] ->
                                                                                  Unit# [ipv11_scoqi];
                                                                            };
                                                                      };
                                                                };
                                                        };
                                                  };
                                            };
                                  } in  maskAsyncExceptions# [sat_scoqp GHC.Prim.void#];
                              1# ->
                                  case GHC.IO.Encoding.getFileSystemEncoding1 of {
                                    (,) getFileSystemEncoding81_scoqr _ [Occ=Dead] ->
                                        case getFileSystemEncoding81_scoqr GHC.Prim.void# of {
                                          Unit# ipv7_scoqv [Occ=Once] ->
                                              case
                                                  GHC.Foreign.withCStringsLen1
                                                      ipv7_scoqv
                                                      new_args_scopg
                                                      lvl_rcom0
                                                      GHC.Prim.void#
                                              of
                                              { Unit# _ [Occ=Dead] ->
                                                    let {
                                                      sat_scoqI [Occ=Once]
                                                        :: GHC.Exception.SomeException
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_acnvJ #)
                                                      [LclId] =
                                                          [after_scops
                                                           getFileSystemEncoding81_scoqr] \r [e1_scoqA
                                                                                              void_0E]
                                                              case
                                                                  getFileSystemEncoding81_scoqr
                                                                      GHC.Prim.void#
                                                              of
                                                              { Unit# ipv11_scoqE [Occ=Once] ->
                                                                    case
                                                                        GHC.Foreign.withCStringsLen1
                                                                            ipv11_scoqE
                                                                            after_scops
                                                                            lvl_rcom0
                                                                            GHC.Prim.void#
                                                                    of
                                                                    { Unit# _ [Occ=Dead] ->
                                                                          raiseIO# [e1_scoqA
                                                                                    GHC.Prim.void#];
                                                                    };
                                                              }; } in
                                                    let {
                                                      sat_scoqz [Occ=Once]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_acnvJ #)
                                                      [LclId] =
                                                          [act_scoph] \r [void_0E]
                                                              maskUninterruptible# [act_scoph
                                                                                    GHC.Prim.void#];
                                                    } in 
                                                      case
                                                          catch# [sat_scoqz
                                                                  sat_scoqI
                                                                  GHC.Prim.void#]
                                                      of
                                                      { Unit# ipv11_scoqL [Occ=Once] ->
                                                            case
                                                                getFileSystemEncoding81_scoqr
                                                                    GHC.Prim.void#
                                                            of
                                                            { Unit# ipv13_scoqO [Occ=Once] ->
                                                                  case
                                                                      GHC.Foreign.withCStringsLen1
                                                                          ipv13_scoqO
                                                                          after_scops
                                                                          lvl_rcom0
                                                                          GHC.Prim.void#
                                                                  of
                                                                  { Unit# _ [Occ=Dead] ->
                                                                        Unit# [ipv11_scoqL];
                                                                  };
                                                            };
                                                      };
                                              };
                                        };
                                  };
                            };
                    };
              };
        };

System.Environment.withArgs1
  :: forall a.
     [GHC.Base.String]
     -> GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<L,U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [xs_scoqS act_scoqT void_0E]
        case System.Environment.getProgName1 GHC.Prim.void# of {
          Unit# ipv1_scoqX [Occ=Once] ->
              let {
                sat_scoqY [Occ=Once] :: [GHC.Base.String]
                [LclId] =
                    CCCS :! [ipv1_scoqX xs_scoqS];
              } in 
                System.Environment.withArgs2 sat_scoqY act_scoqT GHC.Prim.void#;
        };

System.Environment.withArgs
  :: forall a. [GHC.Base.String] -> GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=3, Str=<L,U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.Environment.withArgs1 eta_B3 eta_B2 GHC.Prim.void#;

System.Environment.withProgName1
  :: forall a.
     GHC.Base.String
     -> GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<L,U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [nm_scoqZ act_scor0 void_0E]
        case System.Environment.getArgs1 GHC.Prim.void# of {
          Unit# ipv1_scor4 [Occ=Once] ->
              let {
                sat_scor5 [Occ=Once] :: [GHC.Base.String]
                [LclId] =
                    CCCS :! [nm_scoqZ ipv1_scor4];
              } in 
                System.Environment.withArgs2 sat_scor5 act_scor0 GHC.Prim.void#;
        };

System.Environment.withProgName
  :: forall a. GHC.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=3, Str=<L,U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.Environment.withProgName1 eta_B3 eta_B2 GHC.Prim.void#;

System.Environment.getEnvironment3
  :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_scor6]
        case ds_scor6 of {
          GHC.Types.C# x_scor8 [Occ=Once!] ->
              case x_scor8 of {
                __DEFAULT -> GHC.Types.False [];
                '='# -> GHC.Types.True [];
              };
        };

System.Environment.getEnvironment2
  :: GHC.Base.String -> (GHC.Base.String, GHC.Base.String)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [str_scora]
        case
            GHC.List.$wbreak System.Environment.getEnvironment3 str_scora
        of
        { (#,#) ww1_scorc [Occ=Once*] ww2_scord [Occ=Once!] ->
              case ww2_scord of {
                [] -> (,) [ww1_scorc GHC.Types.[]];
                : _ [Occ=Dead] value_scorg [Occ=Once] ->
                    (,) [ww1_scorc value_scorg];
              };
        };

System.Environment.getEnvironment1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           [(GHC.Base.String, GHC.Base.String)] #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.void#] of {
          Unit# ds1_scorl ->
              case eqAddr# [ds1_scorl __NULL] of {
                __DEFAULT ->
                    case GHC.IO.Encoding.getFileSystemEncoding1 of {
                      (,) getFileSystemEncoding81_scoro [Occ=Once] _ [Occ=Dead] ->
                          case getFileSystemEncoding81_scoro GHC.Prim.void# of {
                            Unit# ipv1_scors [Occ=OnceL] ->
                                let-no-escape {
                                  $w$j_scort [InlPrag=NOUSERINLINE[0],
                                              Occ=OnceL!T[2],
                                              Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> GHC.Prim.Int#
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             [(GHC.Base.String, GHC.Base.String)] #)
                                  [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
                                      sat-only [ds1_scorl ipv1_scors] \r [void_0E ww_scorv]
                                          let-no-escape {
                                            $j_scorw [Occ=Once*!T[2], Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> [GHC.Ptr.Ptr Foreign.C.Types.CChar]
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       [(GHC.Base.String, GHC.Base.String)] #)
                                            [LclId[JoinId(2)],
                                             Arity=2,
                                             Str=<S,U><S,1*U>,
                                             Unf=OtherCon []] =
                                                sat-only [ipv1_scors] \r [void_0E ipv3_scory]
                                                    let {
                                                      go_scorz [Occ=LoopBreaker]
                                                        :: [GHC.Foreign.CString]
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 [GHC.Base.String] #)
                                                      [LclId,
                                                       Arity=2,
                                                       Str=<S,1*U><S,U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [ipv1_scors
                                                                    go_scorz] \r [ds3_scorA void_0E]
                                                              case ds3_scorA of {
                                                                [] -> Unit# [GHC.Types.[]];
                                                                : y_scorD [Occ=Once!]
                                                                  ys_scorE [Occ=Once] ->
                                                                    case y_scorD of {
                                                                      GHC.Ptr.Ptr ww2_scorG [Occ=Once] ->
                                                                          case
                                                                              GHC.Foreign.$wpeekCString
                                                                                  ipv1_scors
                                                                                  ww2_scorG
                                                                                  GHC.Prim.void#
                                                                          of
                                                                          { Unit# ipv5_scorJ [Occ=Once] ->
                                                                                case
                                                                                    go_scorz
                                                                                        ys_scorE
                                                                                        GHC.Prim.void#
                                                                                of
                                                                                { Unit# ipv7_scorM [Occ=Once] ->
                                                                                      let {
                                                                                        sat_scorN [Occ=Once]
                                                                                          :: [GHC.Base.String]
                                                                                        [LclId] =
                                                                                            CCCS :! [ipv5_scorJ
                                                                                                     ipv7_scorM];
                                                                                      } in 
                                                                                        Unit# [sat_scorN];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                    } in 
                                                      case go_scorz ipv3_scory GHC.Prim.void# of {
                                                        Unit# ipv5_scorQ [Occ=Once] ->
                                                            let {
                                                              sat_scorR [Occ=Once]
                                                                :: [(GHC.Base.String,
                                                                     GHC.Base.String)]
                                                              [LclId] =
                                                                  [ipv5_scorQ] \u []
                                                                      GHC.Base.map
                                                                          System.Environment.getEnvironment2
                                                                          ipv5_scorQ;
                                                            } in  Unit# [sat_scorR];
                                                      };
                                          } in 
                                            case <=# [ww_scorv 0#] of {
                                              __DEFAULT ->
                                                  case -# [ww_scorv 1#] of sat_scosc {
                                                    __DEFAULT ->
                                                        let-no-escape {
                                                          exit_scorT [Occ=OnceL!T[2],
                                                                      Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                            :: [GHC.Ptr.Ptr Foreign.C.Types.CChar]
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     [(GHC.Base.String,
                                                                       GHC.Base.String)] #)
                                                          [LclId[JoinId(2)],
                                                           Arity=2,
                                                           Str=<L,U><S,U>,
                                                           Unf=OtherCon []] =
                                                              sat-only [ds1_scorl
                                                                        $j_scorw] \r [w3_scorU
                                                                                      void_0E]
                                                                  case
                                                                      readAddrOffAddr# [ds1_scorl
                                                                                        0#
                                                                                        GHC.Prim.void#]
                                                                  of
                                                                  { Unit# ipv3_scorY [Occ=Once] ->
                                                                        let {
                                                                          sat_scorZ [Occ=Once]
                                                                            :: GHC.Ptr.Ptr
                                                                                 Foreign.C.Types.CChar
                                                                          [LclId] =
                                                                              CCCS GHC.Ptr.Ptr! [ipv3_scorY]; } in
                                                                        let {
                                                                          sat_scos0 [Occ=Once]
                                                                            :: [GHC.Ptr.Ptr
                                                                                  Foreign.C.Types.CChar]
                                                                          [LclId] =
                                                                              CCCS :! [sat_scorZ
                                                                                       w3_scorU];
                                                                        } in 
                                                                          $j_scorw
                                                                              GHC.Prim.void#
                                                                              sat_scos0;
                                                                  };
                                                        } in 
                                                          let-no-escape {
                                                            $wf_scos1 [InlPrag=NOUSERINLINE[0],
                                                                       Occ=LoopBreakerT[3]]
                                                              :: GHC.Prim.Int#
                                                                 -> [GHC.Ptr.Ptr
                                                                       Foreign.C.Types.CChar]
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       [(GHC.Base.String,
                                                                         GHC.Base.String)] #)
                                                            [LclId[JoinId(3)],
                                                             Arity=3,
                                                             Str=<S,1*U><L,U><S,U>,
                                                             Unf=OtherCon []] =
                                                                sat-only [ds1_scorl
                                                                          exit_scorT
                                                                          $wf_scos1] \r [ww1_scos2
                                                                                         w3_scos3
                                                                                         void_0E]
                                                                    case ww1_scos2 of ds3_scos5 {
                                                                      __DEFAULT ->
                                                                          case
                                                                              readAddrOffAddr# [ds1_scorl
                                                                                                ds3_scos5
                                                                                                GHC.Prim.void#]
                                                                          of
                                                                          { Unit# ipv3_scos8 [Occ=Once] ->
                                                                                let {
                                                                                  sat_scosa [Occ=Once]
                                                                                    :: GHC.Ptr.Ptr
                                                                                         Foreign.C.Types.CChar
                                                                                  [LclId] =
                                                                                      CCCS GHC.Ptr.Ptr! [ipv3_scos8]; } in
                                                                                let {
                                                                                  sat_scosb [Occ=Once]
                                                                                    :: [GHC.Ptr.Ptr
                                                                                          Foreign.C.Types.CChar]
                                                                                  [LclId] =
                                                                                      CCCS :! [sat_scosa
                                                                                               w3_scos3];
                                                                                } in 
                                                                                  case
                                                                                      -# [ds3_scos5
                                                                                          1#]
                                                                                  of
                                                                                  sat_scos9
                                                                                  { __DEFAULT ->
                                                                                        $wf_scos1
                                                                                            sat_scos9
                                                                                            sat_scosb
                                                                                            GHC.Prim.void#;
                                                                                  };
                                                                          };
                                                                      0# ->
                                                                          exit_scorT
                                                                              w3_scos3
                                                                              GHC.Prim.void#;
                                                                    };
                                                          } in 
                                                            $wf_scos1
                                                                sat_scosc
                                                                GHC.Types.[]
                                                                GHC.Prim.void#;
                                                  };
                                              1# -> $j_scorw GHC.Prim.void# GHC.Types.[];
                                            };
                                } in 
                                  let-no-escape {
                                    $wloop_scosd [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[2]]
                                      :: GHC.Prim.Int#
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               [(GHC.Base.String, GHC.Base.String)] #)
                                    [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
                                        sat-only [ds1_scorl $w$j_scort $wloop_scosd] \r [ww_scose
                                                                                         void_0E]
                                            case
                                                readAddrOffAddr# [ds1_scorl ww_scose GHC.Prim.void#]
                                            of
                                            { Unit# ipv3_scosi [Occ=Once] ->
                                                  case eqAddr# [ipv3_scosi __NULL] of {
                                                    __DEFAULT ->
                                                        case +# [ww_scose 1#] of sat_scosk {
                                                          __DEFAULT ->
                                                              $wloop_scosd sat_scosk GHC.Prim.void#;
                                                        };
                                                    1# -> $w$j_scort GHC.Prim.void# ww_scose;
                                                  };
                                            };
                                  } in  $wloop_scosd 0# GHC.Prim.void#;
                          };
                    };
                1# -> Unit# [GHC.Types.[]];
              };
        };

System.Environment.getEnvironment
  :: GHC.Types.IO [(GHC.Base.String, GHC.Base.String)]
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] System.Environment.getEnvironment1 GHC.Prim.void#;

System.Environment.setEnv11 :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_scosl]
        case ds_scosl of {
          GHC.Types.C# x_scosn [Occ=Once!] ->
              case x_scosn of {
                __DEFAULT -> GHC.Types.True [];
                '\NUL'# -> GHC.Types.False [];
              };
        };

lvl5_rcom5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "putenv"#;

lvl6_rcom6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_rcom5;

System.Environment.setEnv2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.Int#
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Foreign.C.Types.CInt #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [void_0E ds2_scosq]
        case narrow32Int# [ds2_scosq] of sat_scosr {
          __DEFAULT ->
              Foreign.C.Error.$wlvl lvl6_rcom6 sat_scosr GHC.Prim.void#;
        };

System.Environment.setEnv10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "setEnv"#;

System.Environment.setEnv9 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.Environment.setEnv10;

System.Environment.setEnv8 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InvalidArgument
                                             System.Environment.setEnv9
                                             GHC.Types.[]
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

System.Environment.setEnv7 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            System.Environment.setEnv8;

System.Environment.setEnv6 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['='#];

System.Environment.setEnv3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "="#;

System.Environment.setEnv1
  :: GHC.Base.String
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [key__scoss value__scost void_0E]
        case
            GHC.List.takeWhile System.Environment.setEnv11 key__scoss
        of
        wild_scosv
        { [] -> raiseIO# [System.Environment.setEnv7 GHC.Prim.void#];
          : _ [Occ=Dead] _ [Occ=Dead] ->
              case
                  GHC.List.elem
                      GHC.Classes.$fEqChar System.Environment.setEnv6 wild_scosv
              of
              { GHC.Types.False ->
                    case
                        GHC.List.takeWhile System.Environment.setEnv11 value__scost
                    of
                    wild2_scosz
                    { [] ->
                          case GHC.IO.Encoding.getFileSystemEncoding GHC.Prim.void# of {
                            Unit# ipv1_scosC [Occ=Once] ->
                                GHC.Foreign.charIsRepresentable3
                                    ipv1_scosC wild_scosv System.Environment.setEnv4 GHC.Prim.void#;
                          };
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          case GHC.IO.Encoding.getFileSystemEncoding1 of {
                            (,) getFileSystemEncoding81_scosG [Occ=Once] _ [Occ=Dead] ->
                                case getFileSystemEncoding81_scosG GHC.Prim.void# of {
                                  Unit# ipv1_scosK [Occ=Once] ->
                                      let {
                                        sat_scosM [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            [wild_scosv wild2_scosz] \u []
                                                let {
                                                  sat_scosL [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [wild2_scosz] \s []
                                                          GHC.CString.unpackAppendCString#
                                                              System.Environment.setEnv3
                                                              wild2_scosz;
                                                } in  GHC.Base.++ wild_scosv sat_scosL;
                                      } in 
                                        case
                                            GHC.Foreign.newCString1
                                                ipv1_scosK sat_scosM GHC.Prim.void#
                                        of
                                        { Unit# ipv3_scosP [Occ=Once!] ->
                                              case ipv3_scosP of {
                                                GHC.Ptr.Ptr ds8_scosR [Occ=Once] ->
                                                    case
                                                        __pkg_ccall base-4.11.0.0 [ds8_scosR
                                                                                   GHC.Prim.void#]
                                                    of
                                                    { Unit# ds10_scosV [Occ=Once] ->
                                                          case narrow32Int# [ds10_scosV] of {
                                                            __DEFAULT ->
                                                                case
                                                                    __pkg_ccall base-4.11.0.0 [GHC.Prim.void#]
                                                                of
                                                                { Unit# ds12_scot0 [Occ=Once] ->
                                                                      System.Environment.setEnv2
                                                                          GHC.Prim.void# ds12_scot0;
                                                                };
                                                            0# -> Unit# [GHC.Tuple.()];
                                                          };
                                                    };
                                              };
                                        };
                                };
                          };
                    };
                GHC.Types.True ->
                    raiseIO# [System.Environment.setEnv7 GHC.Prim.void#];
              };
        };

System.Environment.setEnv
  :: GHC.Base.String -> GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.Environment.setEnv1 eta_B3 eta_B2 GHC.Prim.void#;


==================== Pre unarise: ====================
2018-03-16 16:07:18.606654754 UTC

System.Environment.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

System.Environment.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.Environment.$trModule4];

System.Environment.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "System.Environment"#;

System.Environment.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.Environment.$trModule2];

System.Environment.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [System.Environment.$trModule3
                                     System.Environment.$trModule1];

loc_rcolY :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "unsetEnv"#;

loc1_rcolZ :: GHC.Base.String
[GblId] =
    [] \u [] GHC.CString.unpackCString# loc_rcolY;

System.Environment.setEnv5
  :: GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Foreign.C.Types.CInt #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ds2_scprR ds_scprS]
        case narrow32Int# [ds2_scprR] of sat_scprT {
          __DEFAULT -> Foreign.C.Error.$wlvl loc1_rcolZ sat_scprT ds_scprS;
        };

System.Environment.setEnv4
  :: Foreign.C.String.CString
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [x_scprU eta1_scprV]
        case x_scprU of {
          GHC.Ptr.Ptr ds1_scprX [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ds1_scprX eta1_scprV] of {
                (#,#) ds2_scps0 [Occ=Once*] ds3_scps1 [Occ=Once] ->
                    case narrow32Int# [ds3_scps1] of {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [ds2_scps0] of {
                            (#,#) ds4_scps5 [Occ=Once] ds5_scps6 [Occ=Once] ->
                                System.Environment.setEnv5 ds5_scps6 ds4_scps5;
                          };
                      0# -> (#,#) [ds2_scps0 GHC.Tuple.()];
                    };
              };
        };

System.Environment.unsetEnv1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [key_scps8 s_scps9]
        case GHC.IO.Encoding.getFileSystemEncoding s_scps9 of {
          (#,#) ipv_scpsb [Occ=Once] ipv1_scpsc [Occ=Once] ->
              GHC.Foreign.charIsRepresentable3
                  ipv1_scpsc key_scps8 System.Environment.setEnv4 ipv_scpsb;
        };

System.Environment.unsetEnv :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] System.Environment.unsetEnv1 eta_B2 eta_B1;

lvl_rcom0
  :: GHC.Types.Int
     -> GHC.Ptr.Ptr GHC.Foreign.CString
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [len_scpsd css_scpse eta_scpsf]
        case len_scpsd of {
          GHC.Types.I# x#_scpsh [Occ=Once] ->
              case css_scpse of {
                GHC.Ptr.Ptr ds1_scpsj [Occ=Once] ->
                    case narrow32Int# [x#_scpsh] of sat_scpsl {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [sat_scpsl ds1_scpsj eta_scpsf] of {
                            Unit# ds2_scpsn [Occ=Once] -> (#,#) [ds2_scpsn GHC.Tuple.()];
                          };
                    };
              };
        };

System.Environment.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.Base.String #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_scpso w_scpsp]
        case __pkg_ccall base-4.11.0.0 [ww_scpso w_scpsp] of {
          (#,#) ds_scpss [Occ=Once*] ds1_scpst ->
              case eqAddr# [ds1_scpst __NULL] of {
                __DEFAULT ->
                    case GHC.IO.Encoding.getFileSystemEncoding1 of {
                      (,) getFileSystemEncoding81_scpsw [Occ=Once] _ [Occ=Dead] ->
                          case getFileSystemEncoding81_scpsw ds_scpss of {
                            (#,#) ipv_scpsz [Occ=Once] ipv1_scpsA [Occ=Once] ->
                                case GHC.Foreign.$wpeekCString ipv1_scpsA ds1_scpst ipv_scpsz of {
                                  (#,#) ipv2_scpsC [Occ=Once] ipv3_scpsD [Occ=Once] ->
                                      let {
                                        sat_scpsE [Occ=Once] :: GHC.Base.Maybe GHC.Base.String
                                        [LclId] =
                                            CCCS GHC.Base.Just! [ipv3_scpsD];
                                      } in  (#,#) [ipv2_scpsC sat_scpsE];
                                };
                          };
                    };
                1# -> (#,#) [ds_scpss GHC.Base.Nothing];
              };
        };

System.Environment.getEnv3 [InlPrag=NOUSERINLINE[0]]
  :: Foreign.C.String.CString
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.Base.String #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [w_scpsF w1_scpsG]
        case w_scpsF of {
          GHC.Ptr.Ptr ww1_scpsI [Occ=Once] ->
              System.Environment.$wlvl ww1_scpsI w1_scpsG;
        };

System.Environment.lookupEnv1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.Base.String #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [name_scpsJ s1_scpsK]
        case GHC.IO.Encoding.getForeignEncoding s1_scpsK of {
          (#,#) ipv_scpsM [Occ=Once] ipv1_scpsN [Occ=Once] ->
              GHC.Foreign.charIsRepresentable3
                  ipv1_scpsN name_scpsJ System.Environment.getEnv3 ipv_scpsM;
        };

System.Environment.lookupEnv
  :: GHC.Base.String -> GHC.Types.IO (GHC.Base.Maybe GHC.Base.String)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] System.Environment.lookupEnv1 eta_B2 eta_B1;

lvl1_rcom1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "getEnv"#;

lvl2_rcom2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl1_rcom1;

lvl3_rcom3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "no environment variable"#;

lvl4_rcom4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl3_rcom3;

System.Environment.getEnv2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Base.String
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [eta_scpsO name_scpsP]
        let {
          sat_scpsS [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [name_scpsP] \u []
                  let {
                    sat_scpsQ [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                    [LclId] =
                        CCCS GHC.Base.Just! [name_scpsP]; } in
                  let {
                    sat_scpsR [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                                        GHC.IO.Exception.NoSuchThing
                                                        lvl2_rcom2
                                                        lvl4_rcom4
                                                        GHC.Base.Nothing
                                                        sat_scpsQ];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_scpsR;
        } in  raiseIO# [sat_scpsS eta_scpsO];

System.Environment.getEnv1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [name_scpsT s_scpsU]
        case GHC.IO.Encoding.getForeignEncoding s_scpsU of {
          (#,#) ipv_scpsW [Occ=Once] ipv1_scpsX [Occ=Once] ->
              case
                  GHC.Foreign.charIsRepresentable3
                      ipv1_scpsX name_scpsT System.Environment.getEnv3 ipv_scpsW
              of
              { (#,#) ipv2_scpsZ [Occ=Once*] ipv3_scpt0 [Occ=Once!] ->
                    case ipv3_scpt0 of {
                      GHC.Base.Nothing ->
                          System.Environment.getEnv2 ipv2_scpsZ name_scpsT;
                      GHC.Base.Just x_scpt2 [Occ=Once] -> (#,#) [ipv2_scpsZ x_scpt2];
                    };
              };
        };

System.Environment.getEnv
  :: GHC.Base.String -> GHC.Types.IO GHC.Base.String
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] System.Environment.getEnv1 eta_B2 eta_B1;

System.Environment.getProgName_go [Occ=LoopBreaker]
  :: [GHC.Types.Char] -> [GHC.Types.Char] -> GHC.IO.FilePath
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [acc_scpt3 ds_scpt4]
        case ds_scpt4 of {
          [] -> acc_scpt3;
          : x_scpt6 [Occ=Once!] xs_scpt7 ->
              case x_scpt6 of {
                GHC.Types.C# ds1_scpt9 [Occ=Once!] ->
                    case ds1_scpt9 of {
                      __DEFAULT -> System.Environment.getProgName_go acc_scpt3 xs_scpt7;
                      '/'# -> System.Environment.getProgName_go xs_scpt7 xs_scpt7;
                    };
              };
        };

System.Environment.getProgName1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_scptb]
        case newAlignedPinnedByteArray# [4# 4# eta_scptb] of {
          (#,#) ipv_scptd [Occ=Once] ipv1_scpte [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_scpte ipv_scptd] of {
                (#,#) ipv2_scptg [Occ=Once] ipv3_scpth ->
                    case newAlignedPinnedByteArray# [8# 8# ipv2_scptg] of {
                      (#,#) ipv4_scptj [Occ=Once] ipv5_scptk [Occ=Once] ->
                          case unsafeFreezeByteArray# [ipv5_scptk ipv4_scptj] of {
                            (#,#) ipv6_scptm [Occ=Once] ipv7_scptn ->
                                case byteArrayContents# [ipv7_scptn] of p_argv_scpto [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case byteArrayContents# [ipv3_scpth] of sat_scptq {
                                        __DEFAULT ->
                                            case
                                                __pkg_ccall base-4.11.0.0 [sat_scptq
                                                                           p_argv_scpto
                                                                           ipv6_scptm]
                                            of
                                            { Unit# ds_scpts [Occ=Once] ->
                                                  case
                                                      readAddrOffAddr# [p_argv_scpto 0# ds_scpts]
                                                  of
                                                  { (#,#) ipv8_scptu [Occ=Once]
                                                          ipv9_scptv [Occ=Once] ->
                                                        case
                                                            GHC.IO.Encoding.getFileSystemEncoding1
                                                        of
                                                        { (,) getFileSystemEncoding81_scptx [Occ=Once]
                                                              _ [Occ=Dead] ->
                                                              case
                                                                  getFileSystemEncoding81_scptx
                                                                      ipv8_scptu
                                                              of
                                                              { (#,#) ipv10_scptA [Occ=Once]
                                                                      ipv11_scptB [Occ=Once] ->
                                                                    case
                                                                        readAddrOffAddr# [ipv9_scptv
                                                                                          0#
                                                                                          ipv10_scptA]
                                                                    of
                                                                    { (#,#) ipv12_scptD [Occ=Once]
                                                                            ipv13_scptE [Occ=Once] ->
                                                                          case
                                                                              GHC.Foreign.$wpeekCString
                                                                                  ipv11_scptB
                                                                                  ipv13_scptE
                                                                                  ipv12_scptD
                                                                          of
                                                                          { (#,#) ipv14_scptG [Occ=Once]
                                                                                  ipv15_scptH ->
                                                                                case
                                                                                    touch# [ipv7_scptn
                                                                                            ipv14_scptG]
                                                                                of
                                                                                s4_scptI
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          touch# [ipv3_scpth
                                                                                                  s4_scptI]
                                                                                      of
                                                                                      s1_scptJ
                                                                                      { __DEFAULT ->
                                                                                            let {
                                                                                              sat_scptK [Occ=Once]
                                                                                                :: GHC.Base.String
                                                                                              [LclId] =
                                                                                                  [ipv15_scptH] \u []
                                                                                                      System.Environment.getProgName_go
                                                                                                          ipv15_scptH
                                                                                                          ipv15_scptH;
                                                                                            } in 
                                                                                              (#,#) [s1_scptJ
                                                                                                     sat_scptK];
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

System.Environment.getProgName :: GHC.Types.IO GHC.Base.String
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] System.Environment.getProgName1 eta_B1;

System.Environment.getArgs1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_scptL]
        case newAlignedPinnedByteArray# [4# 4# eta_scptL] of {
          (#,#) ipv_scptN [Occ=Once] ipv1_scptO [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_scptO ipv_scptN] of {
                (#,#) ipv2_scptQ [Occ=Once] ipv3_scptR ->
                    case newAlignedPinnedByteArray# [8# 8# ipv2_scptQ] of {
                      (#,#) ipv4_scptT [Occ=Once] ipv5_scptU [Occ=Once] ->
                          case unsafeFreezeByteArray# [ipv5_scptU ipv4_scptT] of {
                            (#,#) ipv6_scptW [Occ=Once] ipv7_scptX ->
                                case byteArrayContents# [ipv3_scptR] of p_argc_scptY [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case
                                          byteArrayContents# [ipv7_scptX]
                                      of
                                      p_argv_scptZ [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                __pkg_ccall base-4.11.0.0 [p_argc_scptY
                                                                           p_argv_scptZ
                                                                           ipv6_scptW]
                                            of
                                            { Unit# ds_scpu2 [Occ=Once] ->
                                                  case
                                                      readInt32OffAddr# [p_argc_scptY 0# ds_scpu2]
                                                  of
                                                  { (#,#) ipv8_scpu4 [Occ=Once]
                                                          ipv9_scpu5 [Occ=Once] ->
                                                        case
                                                            readAddrOffAddr# [p_argv_scptZ
                                                                              0#
                                                                              ipv8_scpu4]
                                                        of
                                                        { (#,#) ipv10_scpu7 [Occ=Once]
                                                                ipv11_scpu8 [Occ=Once] ->
                                                              case
                                                                  GHC.IO.Encoding.getFileSystemEncoding1
                                                              of
                                                              { (,) getFileSystemEncoding81_scpua [Occ=Once]
                                                                    _ [Occ=Dead] ->
                                                                    case
                                                                        getFileSystemEncoding81_scpua
                                                                            ipv10_scpu7
                                                                    of
                                                                    { (#,#) ipv12_scpud [Occ=Once*]
                                                                            ipv13_scpue [Occ=OnceL] ->
                                                                          case
                                                                              -# [ipv9_scpu5 1#]
                                                                          of
                                                                          ww_scpuf [Dmd=<S,U>]
                                                                          { __DEFAULT ->
                                                                                let-no-escape {
                                                                                  $j_scpug [Occ=Once*!T[2],
                                                                                            Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                                                    :: GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld
                                                                                       -> [Foreign.C.String.CString]
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             [GHC.Base.String] #)
                                                                                  [LclId[JoinId(2)],
                                                                                   Arity=2,
                                                                                   Str=<S,U><S,1*U>,
                                                                                   Unf=OtherCon []] =
                                                                                      sat-only [ipv3_scptR
                                                                                                ipv7_scptX
                                                                                                ipv13_scpue] \r [ipv14_scpuh
                                                                                                                 ipv15_scpui]
                                                                                          let {
                                                                                            go_scpuj [Occ=LoopBreaker]
                                                                                              :: [GHC.Foreign.CString]
                                                                                                 -> GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld
                                                                                                 -> (# GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld,
                                                                                                       [GHC.Base.String] #)
                                                                                            [LclId,
                                                                                             Arity=2,
                                                                                             Str=<S,1*U><S,U>,
                                                                                             Unf=OtherCon []] =
                                                                                                sat-only [ipv13_scpue
                                                                                                          go_scpuj] \r [ds9_scpuk
                                                                                                                        eta1_scpul]
                                                                                                    case
                                                                                                        ds9_scpuk
                                                                                                    of
                                                                                                    { [] ->
                                                                                                          (#,#) [eta1_scpul
                                                                                                                 GHC.Types.[]];
                                                                                                      : y_scpun [Occ=Once!]
                                                                                                        ys_scpuo [Occ=Once] ->
                                                                                                          case
                                                                                                              y_scpun
                                                                                                          of
                                                                                                          { GHC.Ptr.Ptr ww2_scpuq [Occ=Once] ->
                                                                                                                case
                                                                                                                    GHC.Foreign.$wpeekCString
                                                                                                                        ipv13_scpue
                                                                                                                        ww2_scpuq
                                                                                                                        eta1_scpul
                                                                                                                of
                                                                                                                { (#,#) ipv16_scpus [Occ=Once]
                                                                                                                        ipv17_scput [Occ=Once] ->
                                                                                                                      case
                                                                                                                          go_scpuj
                                                                                                                              ys_scpuo
                                                                                                                              ipv16_scpus
                                                                                                                      of
                                                                                                                      { (#,#) ipv18_scpuv [Occ=Once]
                                                                                                                              ipv19_scpuw [Occ=Once] ->
                                                                                                                            let {
                                                                                                                              sat_scpux [Occ=Once]
                                                                                                                                :: [GHC.Base.String]
                                                                                                                              [LclId] =
                                                                                                                                  CCCS :! [ipv17_scput
                                                                                                                                           ipv19_scpuw];
                                                                                                                            } in 
                                                                                                                              (#,#) [ipv18_scpuv
                                                                                                                                     sat_scpux];
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                    };
                                                                                          } in 
                                                                                            case
                                                                                                go_scpuj
                                                                                                    ipv15_scpui
                                                                                                    ipv14_scpuh
                                                                                            of
                                                                                            { (#,#) ipv16_scpuz [Occ=Once]
                                                                                                    ipv17_scpuA [Occ=Once] ->
                                                                                                  case
                                                                                                      touch# [ipv7_scptX
                                                                                                              ipv16_scpuz]
                                                                                                  of
                                                                                                  s4_scpuB
                                                                                                  { __DEFAULT ->
                                                                                                        case
                                                                                                            touch# [ipv3_scptR
                                                                                                                    s4_scpuB]
                                                                                                        of
                                                                                                        s1_scpuC
                                                                                                        { __DEFAULT ->
                                                                                                              (#,#) [s1_scpuC
                                                                                                                     ipv17_scpuA];
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                } in 
                                                                                  case
                                                                                      <=# [ww_scpuf
                                                                                           0#]
                                                                                  of
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            plusAddr# [ipv11_scpu8
                                                                                                       8#]
                                                                                        of
                                                                                        w1_scpuE [Dmd=<S,U>]
                                                                                        { __DEFAULT ->
                                                                                              case
                                                                                                  -# [ww_scpuf
                                                                                                      1#]
                                                                                              of
                                                                                              sat_scpuY
                                                                                              { __DEFAULT ->
                                                                                                    let-no-escape {
                                                                                                      exit_scpuF [Occ=OnceL!T[2],
                                                                                                                  Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                                                                        :: [Foreign.C.String.CString]
                                                                                                           -> GHC.Prim.State#
                                                                                                                GHC.Prim.RealWorld
                                                                                                           -> (# GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                 [GHC.Base.String] #)
                                                                                                      [LclId[JoinId(2)],
                                                                                                       Arity=2,
                                                                                                       Str=<L,U><S,U>,
                                                                                                       Unf=OtherCon []] =
                                                                                                          sat-only [$j_scpug
                                                                                                                    w1_scpuE] \r [w3_scpuG
                                                                                                                                  w4_scpuH]
                                                                                                              case
                                                                                                                  readAddrOffAddr# [w1_scpuE
                                                                                                                                    0#
                                                                                                                                    w4_scpuH]
                                                                                                              of
                                                                                                              { (#,#) ipv14_scpuJ [Occ=Once]
                                                                                                                      ipv15_scpuK [Occ=Once] ->
                                                                                                                    let {
                                                                                                                      sat_scpuL [Occ=Once]
                                                                                                                        :: Foreign.C.String.CString
                                                                                                                      [LclId] =
                                                                                                                          CCCS GHC.Ptr.Ptr! [ipv15_scpuK]; } in
                                                                                                                    let {
                                                                                                                      sat_scpuM [Occ=Once]
                                                                                                                        :: [Foreign.C.String.CString]
                                                                                                                      [LclId] =
                                                                                                                          CCCS :! [sat_scpuL
                                                                                                                                   w3_scpuG];
                                                                                                                    } in 
                                                                                                                      $j_scpug
                                                                                                                          ipv14_scpuJ
                                                                                                                          sat_scpuM;
                                                                                                              };
                                                                                                    } in 
                                                                                                      let-no-escape {
                                                                                                        $wf_scpuN [InlPrag=NOUSERINLINE[0],
                                                                                                                   Occ=LoopBreakerT[3]]
                                                                                                          :: GHC.Prim.Int#
                                                                                                             -> [Foreign.C.String.CString]
                                                                                                             -> GHC.Prim.State#
                                                                                                                  GHC.Prim.RealWorld
                                                                                                             -> (# GHC.Prim.State#
                                                                                                                     GHC.Prim.RealWorld,
                                                                                                                   [GHC.Base.String] #)
                                                                                                        [LclId[JoinId(3)],
                                                                                                         Arity=3,
                                                                                                         Str=<S,1*U><L,U><S,U>,
                                                                                                         Unf=OtherCon []] =
                                                                                                            sat-only [w1_scpuE
                                                                                                                      exit_scpuF
                                                                                                                      $wf_scpuN] \r [ww1_scpuO
                                                                                                                                     w3_scpuP
                                                                                                                                     w4_scpuQ]
                                                                                                                case
                                                                                                                    ww1_scpuO
                                                                                                                of
                                                                                                                ds9_scpuR
                                                                                                                { __DEFAULT ->
                                                                                                                      case
                                                                                                                          readAddrOffAddr# [w1_scpuE
                                                                                                                                            ds9_scpuR
                                                                                                                                            w4_scpuQ]
                                                                                                                      of
                                                                                                                      { (#,#) ipv14_scpuT [Occ=Once]
                                                                                                                              ipv15_scpuU [Occ=Once] ->
                                                                                                                            let {
                                                                                                                              sat_scpuW [Occ=Once]
                                                                                                                                :: Foreign.C.String.CString
                                                                                                                              [LclId] =
                                                                                                                                  CCCS GHC.Ptr.Ptr! [ipv15_scpuU]; } in
                                                                                                                            let {
                                                                                                                              sat_scpuX [Occ=Once]
                                                                                                                                :: [Foreign.C.String.CString]
                                                                                                                              [LclId] =
                                                                                                                                  CCCS :! [sat_scpuW
                                                                                                                                           w3_scpuP];
                                                                                                                            } in 
                                                                                                                              case
                                                                                                                                  -# [ds9_scpuR
                                                                                                                                      1#]
                                                                                                                              of
                                                                                                                              sat_scpuV
                                                                                                                              { __DEFAULT ->
                                                                                                                                    $wf_scpuN
                                                                                                                                        sat_scpuV
                                                                                                                                        sat_scpuX
                                                                                                                                        ipv14_scpuT;
                                                                                                                              };
                                                                                                                      };
                                                                                                                  0# ->
                                                                                                                      exit_scpuF
                                                                                                                          w3_scpuP
                                                                                                                          w4_scpuQ;
                                                                                                                };
                                                                                                      } in 
                                                                                                        $wf_scpuN
                                                                                                            sat_scpuY
                                                                                                            GHC.Types.[]
                                                                                                            ipv12_scpud;
                                                                                              };
                                                                                        };
                                                                                    1# ->
                                                                                        $j_scpug
                                                                                            ipv12_scpud
                                                                                            GHC.Types.[];
                                                                                  };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

System.Environment.getArgs :: GHC.Types.IO [GHC.Base.String]
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] System.Environment.getArgs1 eta_B1;

System.Environment.withArgs2
  :: forall a.
     [GHC.Base.String]
     -> GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<L,1*U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [new_args_scpuZ act_scpv0 s_scpv1]
        case System.Environment.getProgName1 s_scpv1 of {
          (#,#) ipv_scpv3 [Occ=Once] ipv1_scpv4 [Occ=OnceL] ->
              case System.Environment.getArgs1 ipv_scpv3 of {
                (#,#) ipv2_scpv6 [Occ=Once] ipv3_scpv7 [Occ=OnceL] ->
                    case getMaskingState# [ipv2_scpv6] of {
                      (#,#) ipv4_scpv9 [Occ=Once*] ipv5_scpva [Occ=Once!] ->
                          let {
                            after_scpvb :: [GHC.Base.String]
                            [LclId, Unf=OtherCon []] =
                                CCCS :! [ipv1_scpv4 ipv3_scpv7];
                          } in 
                            case ipv5_scpva of {
                              __DEFAULT ->
                                  case GHC.IO.Encoding.getFileSystemEncoding1 of {
                                    (,) getFileSystemEncoding81_scpve _ [Occ=Dead] ->
                                        case getFileSystemEncoding81_scpve ipv4_scpv9 of {
                                          (#,#) ipv6_scpvh [Occ=Once] ipv7_scpvi [Occ=Once] ->
                                              case
                                                  GHC.Foreign.withCStringsLen1
                                                      ipv7_scpvi new_args_scpuZ lvl_rcom0 ipv6_scpvh
                                              of
                                              { (#,#) ipv8_scpvk [Occ=Once] _ [Occ=Dead] ->
                                                    let {
                                                      sat_scpvv [Occ=Once]
                                                        :: GHC.Exception.SomeException
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_acnvJ #)
                                                      [LclId] =
                                                          [after_scpvb
                                                           getFileSystemEncoding81_scpve] \r [e1_scpvn
                                                                                              s1_scpvo]
                                                              case
                                                                  getFileSystemEncoding81_scpve
                                                                      s1_scpvo
                                                              of
                                                              { (#,#) ipv10_scpvq [Occ=Once]
                                                                      ipv11_scpvr [Occ=Once] ->
                                                                    case
                                                                        GHC.Foreign.withCStringsLen1
                                                                            ipv11_scpvr
                                                                            after_scpvb
                                                                            lvl_rcom0
                                                                            ipv10_scpvq
                                                                    of
                                                                    { (#,#) ipv12_scpvt [Occ=Once]
                                                                            _ [Occ=Dead] ->
                                                                          raiseIO# [e1_scpvn
                                                                                    ipv12_scpvt];
                                                                    };
                                                              }; } in
                                                    let {
                                                      sat_scpvm [Occ=Once]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_acnvJ #)
                                                      [LclId] =
                                                          [act_scpv0] \r [eta_B1]
                                                              maskAsyncExceptions# [act_scpv0
                                                                                    eta_B1];
                                                    } in 
                                                      case
                                                          catch# [sat_scpvm sat_scpvv ipv8_scpvk]
                                                      of
                                                      { (#,#) ipv10_scpvx [Occ=Once]
                                                              ipv11_scpvy [Occ=Once] ->
                                                            case
                                                                getFileSystemEncoding81_scpve
                                                                    ipv10_scpvx
                                                            of
                                                            { (#,#) ipv12_scpvA [Occ=Once]
                                                                    ipv13_scpvB [Occ=Once] ->
                                                                  case
                                                                      GHC.Foreign.withCStringsLen1
                                                                          ipv13_scpvB
                                                                          after_scpvb
                                                                          lvl_rcom0
                                                                          ipv12_scpvA
                                                                  of
                                                                  { (#,#) ipv14_scpvD [Occ=Once]
                                                                          _ [Occ=Dead] ->
                                                                        (#,#) [ipv14_scpvD
                                                                               ipv11_scpvy];
                                                                  };
                                                            };
                                                      };
                                              };
                                        };
                                  };
                              0# ->
                                  let {
                                    sat_scpw8 [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_acnvJ #)
                                    [LclId] =
                                        [new_args_scpuZ act_scpv0 after_scpvb] \r [s1_scpvF]
                                            case GHC.IO.Encoding.getFileSystemEncoding1 of {
                                              (,) getFileSystemEncoding81_scpvH _ [Occ=Dead] ->
                                                  case getFileSystemEncoding81_scpvH s1_scpvF of {
                                                    (#,#) ipv6_scpvK [Occ=Once]
                                                          ipv7_scpvL [Occ=Once] ->
                                                        case
                                                            GHC.Foreign.withCStringsLen1
                                                                ipv7_scpvL
                                                                new_args_scpuZ
                                                                lvl_rcom0
                                                                ipv6_scpvK
                                                        of
                                                        { (#,#) ipv8_scpvN [Occ=Once]
                                                                _ [Occ=Dead] ->
                                                              let {
                                                                sat_scpvY [Occ=Once]
                                                                  :: GHC.Exception.SomeException
                                                                     -> GHC.Prim.State#
                                                                          GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           a_acnvJ #)
                                                                [LclId] =
                                                                    [after_scpvb
                                                                     getFileSystemEncoding81_scpvH] \r [e1_scpvQ
                                                                                                        s2_scpvR]
                                                                        case
                                                                            getFileSystemEncoding81_scpvH
                                                                                s2_scpvR
                                                                        of
                                                                        { (#,#) ipv10_scpvT [Occ=Once]
                                                                                ipv11_scpvU [Occ=Once] ->
                                                                              case
                                                                                  GHC.Foreign.withCStringsLen1
                                                                                      ipv11_scpvU
                                                                                      after_scpvb
                                                                                      lvl_rcom0
                                                                                      ipv10_scpvT
                                                                              of
                                                                              { (#,#) ipv12_scpvW [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    raiseIO# [e1_scpvQ
                                                                                              ipv12_scpvW];
                                                                              };
                                                                        }; } in
                                                              let {
                                                                sat_scpvP [Occ=Once]
                                                                  :: GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           a_acnvJ #)
                                                                [LclId] =
                                                                    [act_scpv0] \r [eta_B1]
                                                                        unmaskAsyncExceptions# [act_scpv0
                                                                                                eta_B1];
                                                              } in 
                                                                case
                                                                    catch# [sat_scpvP
                                                                            sat_scpvY
                                                                            ipv8_scpvN]
                                                                of
                                                                { (#,#) ipv10_scpw0 [Occ=Once]
                                                                        ipv11_scpw1 [Occ=Once] ->
                                                                      case
                                                                          getFileSystemEncoding81_scpvH
                                                                              ipv10_scpw0
                                                                      of
                                                                      { (#,#) ipv12_scpw3 [Occ=Once]
                                                                              ipv13_scpw4 [Occ=Once] ->
                                                                            case
                                                                                GHC.Foreign.withCStringsLen1
                                                                                    ipv13_scpw4
                                                                                    after_scpvb
                                                                                    lvl_rcom0
                                                                                    ipv12_scpw3
                                                                            of
                                                                            { (#,#) ipv14_scpw6 [Occ=Once]
                                                                                    _ [Occ=Dead] ->
                                                                                  (#,#) [ipv14_scpw6
                                                                                         ipv11_scpw1];
                                                                            };
                                                                      };
                                                                };
                                                        };
                                                  };
                                            };
                                  } in  maskAsyncExceptions# [sat_scpw8 ipv4_scpv9];
                              1# ->
                                  case GHC.IO.Encoding.getFileSystemEncoding1 of {
                                    (,) getFileSystemEncoding81_scpwa _ [Occ=Dead] ->
                                        case getFileSystemEncoding81_scpwa ipv4_scpv9 of {
                                          (#,#) ipv6_scpwd [Occ=Once] ipv7_scpwe [Occ=Once] ->
                                              case
                                                  GHC.Foreign.withCStringsLen1
                                                      ipv7_scpwe new_args_scpuZ lvl_rcom0 ipv6_scpwd
                                              of
                                              { (#,#) ipv8_scpwg [Occ=Once] _ [Occ=Dead] ->
                                                    let {
                                                      sat_scpwr [Occ=Once]
                                                        :: GHC.Exception.SomeException
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_acnvJ #)
                                                      [LclId] =
                                                          [after_scpvb
                                                           getFileSystemEncoding81_scpwa] \r [e1_scpwj
                                                                                              s1_scpwk]
                                                              case
                                                                  getFileSystemEncoding81_scpwa
                                                                      s1_scpwk
                                                              of
                                                              { (#,#) ipv10_scpwm [Occ=Once]
                                                                      ipv11_scpwn [Occ=Once] ->
                                                                    case
                                                                        GHC.Foreign.withCStringsLen1
                                                                            ipv11_scpwn
                                                                            after_scpvb
                                                                            lvl_rcom0
                                                                            ipv10_scpwm
                                                                    of
                                                                    { (#,#) ipv12_scpwp [Occ=Once]
                                                                            _ [Occ=Dead] ->
                                                                          raiseIO# [e1_scpwj
                                                                                    ipv12_scpwp];
                                                                    };
                                                              }; } in
                                                    let {
                                                      sat_scpwi [Occ=Once]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_acnvJ #)
                                                      [LclId] =
                                                          [act_scpv0] \r [eta_B1]
                                                              maskUninterruptible# [act_scpv0
                                                                                    eta_B1];
                                                    } in 
                                                      case
                                                          catch# [sat_scpwi sat_scpwr ipv8_scpwg]
                                                      of
                                                      { (#,#) ipv10_scpwt [Occ=Once]
                                                              ipv11_scpwu [Occ=Once] ->
                                                            case
                                                                getFileSystemEncoding81_scpwa
                                                                    ipv10_scpwt
                                                            of
                                                            { (#,#) ipv12_scpww [Occ=Once]
                                                                    ipv13_scpwx [Occ=Once] ->
                                                                  case
                                                                      GHC.Foreign.withCStringsLen1
                                                                          ipv13_scpwx
                                                                          after_scpvb
                                                                          lvl_rcom0
                                                                          ipv12_scpww
                                                                  of
                                                                  { (#,#) ipv14_scpwz [Occ=Once]
                                                                          _ [Occ=Dead] ->
                                                                        (#,#) [ipv14_scpwz
                                                                               ipv11_scpwu];
                                                                  };
                                                            };
                                                      };
                                              };
                                        };
                                  };
                            };
                    };
              };
        };

System.Environment.withArgs1
  :: forall a.
     [GHC.Base.String]
     -> GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<L,U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [xs_scpwB act_scpwC s_scpwD]
        case System.Environment.getProgName1 s_scpwD of {
          (#,#) ipv_scpwF [Occ=Once] ipv1_scpwG [Occ=Once] ->
              let {
                sat_scpwH [Occ=Once] :: [GHC.Base.String]
                [LclId] =
                    CCCS :! [ipv1_scpwG xs_scpwB];
              } in  System.Environment.withArgs2 sat_scpwH act_scpwC ipv_scpwF;
        };

System.Environment.withArgs
  :: forall a. [GHC.Base.String] -> GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=3, Str=<L,U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.Environment.withArgs1 eta_B3 eta_B2 eta_B1;

System.Environment.withProgName1
  :: forall a.
     GHC.Base.String
     -> GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<L,U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [nm_scpwI act_scpwJ s_scpwK]
        case System.Environment.getArgs1 s_scpwK of {
          (#,#) ipv_scpwM [Occ=Once] ipv1_scpwN [Occ=Once] ->
              let {
                sat_scpwO [Occ=Once] :: [GHC.Base.String]
                [LclId] =
                    CCCS :! [nm_scpwI ipv1_scpwN];
              } in  System.Environment.withArgs2 sat_scpwO act_scpwJ ipv_scpwM;
        };

System.Environment.withProgName
  :: forall a. GHC.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=3, Str=<L,U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.Environment.withProgName1 eta_B3 eta_B2 eta_B1;

System.Environment.getEnvironment3
  :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_scpwP]
        case ds_scpwP of {
          GHC.Types.C# x_scpwR [Occ=Once!] ->
              case x_scpwR of {
                __DEFAULT -> GHC.Types.False [];
                '='# -> GHC.Types.True [];
              };
        };

System.Environment.getEnvironment2
  :: GHC.Base.String -> (GHC.Base.String, GHC.Base.String)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [str_scpwT]
        case
            GHC.List.$wbreak System.Environment.getEnvironment3 str_scpwT
        of
        { (#,#) ww1_scpwV [Occ=Once*] ww2_scpwW [Occ=Once!] ->
              case ww2_scpwW of {
                [] -> (,) [ww1_scpwV GHC.Types.[]];
                : _ [Occ=Dead] value_scpwZ [Occ=Once] ->
                    (,) [ww1_scpwV value_scpwZ];
              };
        };

System.Environment.getEnvironment1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           [(GHC.Base.String, GHC.Base.String)] #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_scpx0]
        case __pkg_ccall base-4.11.0.0 [s_scpx0] of {
          (#,#) ds_scpx3 [Occ=Once*] ds1_scpx4 ->
              case eqAddr# [ds1_scpx4 __NULL] of {
                __DEFAULT ->
                    case GHC.IO.Encoding.getFileSystemEncoding1 of {
                      (,) getFileSystemEncoding81_scpx7 [Occ=Once] _ [Occ=Dead] ->
                          case getFileSystemEncoding81_scpx7 ds_scpx3 of {
                            (#,#) ipv_scpxa [Occ=Once] ipv1_scpxb [Occ=OnceL] ->
                                let-no-escape {
                                  $w$j_scpxc [InlPrag=NOUSERINLINE[0],
                                              Occ=OnceL!T[2],
                                              Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> GHC.Prim.Int#
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             [(GHC.Base.String, GHC.Base.String)] #)
                                  [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
                                      sat-only [ds1_scpx4 ipv1_scpxb] \r [w_scpxd ww_scpxe]
                                          let-no-escape {
                                            $j_scpxf [Occ=Once*!T[2], Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> [GHC.Ptr.Ptr Foreign.C.Types.CChar]
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       [(GHC.Base.String, GHC.Base.String)] #)
                                            [LclId[JoinId(2)],
                                             Arity=2,
                                             Str=<S,U><S,1*U>,
                                             Unf=OtherCon []] =
                                                sat-only [ipv1_scpxb] \r [ipv2_scpxg ipv3_scpxh]
                                                    let {
                                                      go_scpxi [Occ=LoopBreaker]
                                                        :: [GHC.Foreign.CString]
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 [GHC.Base.String] #)
                                                      [LclId,
                                                       Arity=2,
                                                       Str=<S,1*U><S,U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [ipv1_scpxb
                                                                    go_scpxi] \r [ds3_scpxj
                                                                                  eta_scpxk]
                                                              case ds3_scpxj of {
                                                                [] ->
                                                                    (#,#) [eta_scpxk GHC.Types.[]];
                                                                : y_scpxm [Occ=Once!]
                                                                  ys_scpxn [Occ=Once] ->
                                                                    case y_scpxm of {
                                                                      GHC.Ptr.Ptr ww2_scpxp [Occ=Once] ->
                                                                          case
                                                                              GHC.Foreign.$wpeekCString
                                                                                  ipv1_scpxb
                                                                                  ww2_scpxp
                                                                                  eta_scpxk
                                                                          of
                                                                          { (#,#) ipv4_scpxr [Occ=Once]
                                                                                  ipv5_scpxs [Occ=Once] ->
                                                                                case
                                                                                    go_scpxi
                                                                                        ys_scpxn
                                                                                        ipv4_scpxr
                                                                                of
                                                                                { (#,#) ipv6_scpxu [Occ=Once]
                                                                                        ipv7_scpxv [Occ=Once] ->
                                                                                      let {
                                                                                        sat_scpxw [Occ=Once]
                                                                                          :: [GHC.Base.String]
                                                                                        [LclId] =
                                                                                            CCCS :! [ipv5_scpxs
                                                                                                     ipv7_scpxv];
                                                                                      } in 
                                                                                        (#,#) [ipv6_scpxu
                                                                                               sat_scpxw];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                    } in 
                                                      case go_scpxi ipv3_scpxh ipv2_scpxg of {
                                                        (#,#) ipv4_scpxy [Occ=Once]
                                                              ipv5_scpxz [Occ=Once] ->
                                                            let {
                                                              sat_scpxA [Occ=Once]
                                                                :: [(GHC.Base.String,
                                                                     GHC.Base.String)]
                                                              [LclId] =
                                                                  [ipv5_scpxz] \u []
                                                                      GHC.Base.map
                                                                          System.Environment.getEnvironment2
                                                                          ipv5_scpxz;
                                                            } in  (#,#) [ipv4_scpxy sat_scpxA];
                                                      };
                                          } in 
                                            case <=# [ww_scpxe 0#] of {
                                              __DEFAULT ->
                                                  case -# [ww_scpxe 1#] of sat_scpxV {
                                                    __DEFAULT ->
                                                        let-no-escape {
                                                          exit_scpxC [Occ=OnceL!T[2],
                                                                      Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                            :: [GHC.Ptr.Ptr Foreign.C.Types.CChar]
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     [(GHC.Base.String,
                                                                       GHC.Base.String)] #)
                                                          [LclId[JoinId(2)],
                                                           Arity=2,
                                                           Str=<L,U><S,U>,
                                                           Unf=OtherCon []] =
                                                              sat-only [ds1_scpx4
                                                                        $j_scpxf] \r [w3_scpxD
                                                                                      w4_scpxE]
                                                                  case
                                                                      readAddrOffAddr# [ds1_scpx4
                                                                                        0#
                                                                                        w4_scpxE]
                                                                  of
                                                                  { (#,#) ipv2_scpxG [Occ=Once]
                                                                          ipv3_scpxH [Occ=Once] ->
                                                                        let {
                                                                          sat_scpxI [Occ=Once]
                                                                            :: GHC.Ptr.Ptr
                                                                                 Foreign.C.Types.CChar
                                                                          [LclId] =
                                                                              CCCS GHC.Ptr.Ptr! [ipv3_scpxH]; } in
                                                                        let {
                                                                          sat_scpxJ [Occ=Once]
                                                                            :: [GHC.Ptr.Ptr
                                                                                  Foreign.C.Types.CChar]
                                                                          [LclId] =
                                                                              CCCS :! [sat_scpxI
                                                                                       w3_scpxD];
                                                                        } in 
                                                                          $j_scpxf
                                                                              ipv2_scpxG sat_scpxJ;
                                                                  };
                                                        } in 
                                                          let-no-escape {
                                                            $wf_scpxK [InlPrag=NOUSERINLINE[0],
                                                                       Occ=LoopBreakerT[3]]
                                                              :: GHC.Prim.Int#
                                                                 -> [GHC.Ptr.Ptr
                                                                       Foreign.C.Types.CChar]
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       [(GHC.Base.String,
                                                                         GHC.Base.String)] #)
                                                            [LclId[JoinId(3)],
                                                             Arity=3,
                                                             Str=<S,1*U><L,U><S,U>,
                                                             Unf=OtherCon []] =
                                                                sat-only [ds1_scpx4
                                                                          exit_scpxC
                                                                          $wf_scpxK] \r [ww1_scpxL
                                                                                         w3_scpxM
                                                                                         w4_scpxN]
                                                                    case ww1_scpxL of ds3_scpxO {
                                                                      __DEFAULT ->
                                                                          case
                                                                              readAddrOffAddr# [ds1_scpx4
                                                                                                ds3_scpxO
                                                                                                w4_scpxN]
                                                                          of
                                                                          { (#,#) ipv2_scpxQ [Occ=Once]
                                                                                  ipv3_scpxR [Occ=Once] ->
                                                                                let {
                                                                                  sat_scpxT [Occ=Once]
                                                                                    :: GHC.Ptr.Ptr
                                                                                         Foreign.C.Types.CChar
                                                                                  [LclId] =
                                                                                      CCCS GHC.Ptr.Ptr! [ipv3_scpxR]; } in
                                                                                let {
                                                                                  sat_scpxU [Occ=Once]
                                                                                    :: [GHC.Ptr.Ptr
                                                                                          Foreign.C.Types.CChar]
                                                                                  [LclId] =
                                                                                      CCCS :! [sat_scpxT
                                                                                               w3_scpxM];
                                                                                } in 
                                                                                  case
                                                                                      -# [ds3_scpxO
                                                                                          1#]
                                                                                  of
                                                                                  sat_scpxS
                                                                                  { __DEFAULT ->
                                                                                        $wf_scpxK
                                                                                            sat_scpxS
                                                                                            sat_scpxU
                                                                                            ipv2_scpxQ;
                                                                                  };
                                                                          };
                                                                      0# ->
                                                                          exit_scpxC
                                                                              w3_scpxM w4_scpxN;
                                                                    };
                                                          } in 
                                                            $wf_scpxK
                                                                sat_scpxV GHC.Types.[] w_scpxd;
                                                  };
                                              1# -> $j_scpxf w_scpxd GHC.Types.[];
                                            };
                                } in 
                                  let-no-escape {
                                    $wloop_scpxW [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[2]]
                                      :: GHC.Prim.Int#
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               [(GHC.Base.String, GHC.Base.String)] #)
                                    [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
                                        sat-only [ds1_scpx4 $w$j_scpxc $wloop_scpxW] \r [ww_scpxX
                                                                                         w_scpxY]
                                            case readAddrOffAddr# [ds1_scpx4 ww_scpxX w_scpxY] of {
                                              (#,#) ipv2_scpy0 [Occ=Once*] ipv3_scpy1 [Occ=Once] ->
                                                  case eqAddr# [ipv3_scpy1 __NULL] of {
                                                    __DEFAULT ->
                                                        case +# [ww_scpxX 1#] of sat_scpy3 {
                                                          __DEFAULT ->
                                                              $wloop_scpxW sat_scpy3 ipv2_scpy0;
                                                        };
                                                    1# -> $w$j_scpxc ipv2_scpy0 ww_scpxX;
                                                  };
                                            };
                                  } in  $wloop_scpxW 0# ipv_scpxa;
                          };
                    };
                1# -> (#,#) [ds_scpx3 GHC.Types.[]];
              };
        };

System.Environment.getEnvironment
  :: GHC.Types.IO [(GHC.Base.String, GHC.Base.String)]
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] System.Environment.getEnvironment1 eta_B1;

System.Environment.setEnv11 :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_scpy4]
        case ds_scpy4 of {
          GHC.Types.C# x_scpy6 [Occ=Once!] ->
              case x_scpy6 of {
                __DEFAULT -> GHC.Types.True [];
                '\NUL'# -> GHC.Types.False [];
              };
        };

lvl5_rcom5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "putenv"#;

lvl6_rcom6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_rcom5;

System.Environment.setEnv2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.Int#
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Foreign.C.Types.CInt #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ds_scpy8 ds2_scpy9]
        case narrow32Int# [ds2_scpy9] of sat_scpya {
          __DEFAULT -> Foreign.C.Error.$wlvl lvl6_rcom6 sat_scpya ds_scpy8;
        };

System.Environment.setEnv10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "setEnv"#;

System.Environment.setEnv9 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.Environment.setEnv10;

System.Environment.setEnv8 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InvalidArgument
                                             System.Environment.setEnv9
                                             GHC.Types.[]
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

System.Environment.setEnv7 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            System.Environment.setEnv8;

System.Environment.setEnv6 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['='#];

System.Environment.setEnv3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "="#;

System.Environment.setEnv1
  :: GHC.Base.String
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [key__scpyb value__scpyc eta_scpyd]
        case
            GHC.List.takeWhile System.Environment.setEnv11 key__scpyb
        of
        wild_scpye
        { [] -> raiseIO# [System.Environment.setEnv7 eta_scpyd];
          : _ [Occ=Dead] _ [Occ=Dead] ->
              case
                  GHC.List.elem
                      GHC.Classes.$fEqChar System.Environment.setEnv6 wild_scpye
              of
              { GHC.Types.False ->
                    case
                        GHC.List.takeWhile System.Environment.setEnv11 value__scpyc
                    of
                    wild2_scpyi
                    { [] ->
                          case GHC.IO.Encoding.getFileSystemEncoding eta_scpyd of {
                            (#,#) ipv_scpyk [Occ=Once] ipv1_scpyl [Occ=Once] ->
                                GHC.Foreign.charIsRepresentable3
                                    ipv1_scpyl wild_scpye System.Environment.setEnv4 ipv_scpyk;
                          };
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          case GHC.IO.Encoding.getFileSystemEncoding1 of {
                            (,) getFileSystemEncoding81_scpyp [Occ=Once] _ [Occ=Dead] ->
                                case getFileSystemEncoding81_scpyp eta_scpyd of {
                                  (#,#) ipv_scpys [Occ=Once] ipv1_scpyt [Occ=Once] ->
                                      let {
                                        sat_scpyv [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            [wild_scpye wild2_scpyi] \u []
                                                let {
                                                  sat_scpyu [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [wild2_scpyi] \s []
                                                          GHC.CString.unpackAppendCString#
                                                              System.Environment.setEnv3
                                                              wild2_scpyi;
                                                } in  GHC.Base.++ wild_scpye sat_scpyu;
                                      } in 
                                        case
                                            GHC.Foreign.newCString1 ipv1_scpyt sat_scpyv ipv_scpys
                                        of
                                        { (#,#) ipv2_scpyx [Occ=Once] ipv3_scpyy [Occ=Once!] ->
                                              case ipv3_scpyy of {
                                                GHC.Ptr.Ptr ds8_scpyA [Occ=Once] ->
                                                    case
                                                        __pkg_ccall base-4.11.0.0 [ds8_scpyA
                                                                                   ipv2_scpyx]
                                                    of
                                                    { (#,#) ds9_scpyD [Occ=Once*]
                                                            ds10_scpyE [Occ=Once] ->
                                                          case narrow32Int# [ds10_scpyE] of {
                                                            __DEFAULT ->
                                                                case
                                                                    __pkg_ccall base-4.11.0.0 [ds9_scpyD]
                                                                of
                                                                { (#,#) ds11_scpyI [Occ=Once]
                                                                        ds12_scpyJ [Occ=Once] ->
                                                                      System.Environment.setEnv2
                                                                          ds11_scpyI ds12_scpyJ;
                                                                };
                                                            0# -> (#,#) [ds9_scpyD GHC.Tuple.()];
                                                          };
                                                    };
                                              };
                                        };
                                };
                          };
                    };
                GHC.Types.True -> raiseIO# [System.Environment.setEnv7 eta_scpyd];
              };
        };

System.Environment.setEnv
  :: GHC.Base.String -> GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        System.Environment.setEnv1 eta_B3 eta_B2 eta_B1;


==================== STG syntax: ====================
2018-03-16 16:07:18.628726982 UTC

System.Environment.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

System.Environment.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.Environment.$trModule4];

System.Environment.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "System.Environment"#;

System.Environment.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.Environment.$trModule2];

System.Environment.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [System.Environment.$trModule3
                                     System.Environment.$trModule1];

loc_rcolY :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "unsetEnv"#;

loc1_rcolZ :: GHC.Base.String
[GblId] =
    [] \u [] GHC.CString.unpackCString# loc_rcolY;

System.Environment.setEnv5
  :: GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Foreign.C.Types.CInt #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [ds2_scprR void_0E]
        case narrow32Int# [ds2_scprR] of sat_scprT {
          __DEFAULT ->
              Foreign.C.Error.$wlvl loc1_rcolZ sat_scprT GHC.Prim.void#;
        };

System.Environment.setEnv4
  :: Foreign.C.String.CString
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [x_scprU void_0E]
        case x_scprU of {
          GHC.Ptr.Ptr ds1_scprX [Occ=Once] ->
              case __pkg_ccall base-4.11.0.0 [ds1_scprX GHC.Prim.void#] of {
                Unit# ds3_scps1 [Occ=Once] ->
                    case narrow32Int# [ds3_scps1] of {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [GHC.Prim.void#] of {
                            Unit# ds5_scps6 [Occ=Once] ->
                                System.Environment.setEnv5 ds5_scps6 GHC.Prim.void#;
                          };
                      0# -> Unit# [GHC.Tuple.()];
                    };
              };
        };

System.Environment.unsetEnv1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [key_scps8 void_0E]
        case GHC.IO.Encoding.getFileSystemEncoding GHC.Prim.void# of {
          Unit# ipv1_scpsc [Occ=Once] ->
              GHC.Foreign.charIsRepresentable3
                  ipv1_scpsc key_scps8 System.Environment.setEnv4 GHC.Prim.void#;
        };

System.Environment.unsetEnv :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        System.Environment.unsetEnv1 eta_B2 GHC.Prim.void#;

lvl_rcom0
  :: GHC.Types.Int
     -> GHC.Ptr.Ptr GHC.Foreign.CString
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [len_scpsd css_scpse void_0E]
        case len_scpsd of {
          GHC.Types.I# x#_scpsh [Occ=Once] ->
              case css_scpse of {
                GHC.Ptr.Ptr ds1_scpsj [Occ=Once] ->
                    case narrow32Int# [x#_scpsh] of sat_scpsl {
                      __DEFAULT ->
                          case
                              __pkg_ccall base-4.11.0.0 [sat_scpsl ds1_scpsj GHC.Prim.void#]
                          of
                          { (##) -> Unit# [GHC.Tuple.()];
                          };
                    };
              };
        };

System.Environment.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.Base.String #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_scpso void_0E]
        case __pkg_ccall base-4.11.0.0 [ww_scpso GHC.Prim.void#] of {
          Unit# ds1_scpst ->
              case eqAddr# [ds1_scpst __NULL] of {
                __DEFAULT ->
                    case GHC.IO.Encoding.getFileSystemEncoding1 of {
                      (,) getFileSystemEncoding81_scpsw [Occ=Once] _ [Occ=Dead] ->
                          case getFileSystemEncoding81_scpsw GHC.Prim.void# of {
                            Unit# ipv1_scpsA [Occ=Once] ->
                                case
                                    GHC.Foreign.$wpeekCString ipv1_scpsA ds1_scpst GHC.Prim.void#
                                of
                                { Unit# ipv3_scpsD [Occ=Once] ->
                                      let {
                                        sat_scpsE [Occ=Once] :: GHC.Base.Maybe GHC.Base.String
                                        [LclId] =
                                            CCCS GHC.Base.Just! [ipv3_scpsD];
                                      } in  Unit# [sat_scpsE];
                                };
                          };
                    };
                1# -> Unit# [GHC.Base.Nothing];
              };
        };

System.Environment.getEnv3 [InlPrag=NOUSERINLINE[0]]
  :: Foreign.C.String.CString
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.Base.String #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [w_scpsF void_0E]
        case w_scpsF of {
          GHC.Ptr.Ptr ww1_scpsI [Occ=Once] ->
              System.Environment.$wlvl ww1_scpsI GHC.Prim.void#;
        };

System.Environment.lookupEnv1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Base.Maybe GHC.Base.String #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [name_scpsJ void_0E]
        case GHC.IO.Encoding.getForeignEncoding GHC.Prim.void# of {
          Unit# ipv1_scpsN [Occ=Once] ->
              GHC.Foreign.charIsRepresentable3
                  ipv1_scpsN name_scpsJ System.Environment.getEnv3 GHC.Prim.void#;
        };

System.Environment.lookupEnv
  :: GHC.Base.String -> GHC.Types.IO (GHC.Base.Maybe GHC.Base.String)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        System.Environment.lookupEnv1 eta_B2 GHC.Prim.void#;

lvl1_rcom1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "getEnv"#;

lvl2_rcom2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl1_rcom1;

lvl3_rcom3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "no environment variable"#;

lvl4_rcom4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl3_rcom3;

System.Environment.getEnv2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Base.String
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [void_0E name_scpsP]
        let {
          sat_scpsS [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [name_scpsP] \u []
                  let {
                    sat_scpsQ [Occ=Once] :: GHC.Base.Maybe GHC.IO.FilePath
                    [LclId] =
                        CCCS GHC.Base.Just! [name_scpsP]; } in
                  let {
                    sat_scpsR [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                                        GHC.IO.Exception.NoSuchThing
                                                        lvl2_rcom2
                                                        lvl4_rcom4
                                                        GHC.Base.Nothing
                                                        sat_scpsQ];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_scpsR;
        } in  raiseIO# [sat_scpsS GHC.Prim.void#];

System.Environment.getEnv1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [name_scpsT void_0E]
        case GHC.IO.Encoding.getForeignEncoding GHC.Prim.void# of {
          Unit# ipv1_scpsX [Occ=Once] ->
              case
                  GHC.Foreign.charIsRepresentable3
                      ipv1_scpsX name_scpsT System.Environment.getEnv3 GHC.Prim.void#
              of
              { Unit# ipv3_scpt0 [Occ=Once!] ->
                    case ipv3_scpt0 of {
                      GHC.Base.Nothing ->
                          System.Environment.getEnv2 GHC.Prim.void# name_scpsT;
                      GHC.Base.Just x_scpt2 [Occ=Once] -> Unit# [x_scpt2];
                    };
              };
        };

System.Environment.getEnv
  :: GHC.Base.String -> GHC.Types.IO GHC.Base.String
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        System.Environment.getEnv1 eta_B2 GHC.Prim.void#;

System.Environment.getProgName_go [Occ=LoopBreaker]
  :: [GHC.Types.Char] -> [GHC.Types.Char] -> GHC.IO.FilePath
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [acc_scpt3 ds_scpt4]
        case ds_scpt4 of {
          [] -> acc_scpt3;
          : x_scpt6 [Occ=Once!] xs_scpt7 ->
              case x_scpt6 of {
                GHC.Types.C# ds1_scpt9 [Occ=Once!] ->
                    case ds1_scpt9 of {
                      __DEFAULT -> System.Environment.getProgName_go acc_scpt3 xs_scpt7;
                      '/'# -> System.Environment.getProgName_go xs_scpt7 xs_scpt7;
                    };
              };
        };

System.Environment.getProgName1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case newAlignedPinnedByteArray# [4# 4# GHC.Prim.void#] of {
          Unit# ipv1_scpte [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_scpte GHC.Prim.void#] of {
                Unit# ipv3_scpth ->
                    case newAlignedPinnedByteArray# [8# 8# GHC.Prim.void#] of {
                      Unit# ipv5_scptk [Occ=Once] ->
                          case unsafeFreezeByteArray# [ipv5_scptk GHC.Prim.void#] of {
                            Unit# ipv7_scptn ->
                                case byteArrayContents# [ipv7_scptn] of p_argv_scpto [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case byteArrayContents# [ipv3_scpth] of sat_scptq {
                                        __DEFAULT ->
                                            case
                                                __pkg_ccall base-4.11.0.0 [sat_scptq
                                                                           p_argv_scpto
                                                                           GHC.Prim.void#]
                                            of
                                            { (##) ->
                                                  case
                                                      readAddrOffAddr# [p_argv_scpto
                                                                        0#
                                                                        GHC.Prim.void#]
                                                  of
                                                  { Unit# ipv9_scptv [Occ=Once] ->
                                                        case
                                                            GHC.IO.Encoding.getFileSystemEncoding1
                                                        of
                                                        { (,) getFileSystemEncoding81_scptx [Occ=Once]
                                                              _ [Occ=Dead] ->
                                                              case
                                                                  getFileSystemEncoding81_scptx
                                                                      GHC.Prim.void#
                                                              of
                                                              { Unit# ipv11_scptB [Occ=Once] ->
                                                                    case
                                                                        readAddrOffAddr# [ipv9_scptv
                                                                                          0#
                                                                                          GHC.Prim.void#]
                                                                    of
                                                                    { Unit# ipv13_scptE [Occ=Once] ->
                                                                          case
                                                                              GHC.Foreign.$wpeekCString
                                                                                  ipv11_scptB
                                                                                  ipv13_scptE
                                                                                  GHC.Prim.void#
                                                                          of
                                                                          { Unit# ipv15_scptH ->
                                                                                case
                                                                                    touch# [ipv7_scptn
                                                                                            GHC.Prim.void#]
                                                                                of
                                                                                s4_scptI
                                                                                { (##) ->
                                                                                      case
                                                                                          touch# [ipv3_scpth
                                                                                                  GHC.Prim.void#]
                                                                                      of
                                                                                      s1_scptJ
                                                                                      { (##) ->
                                                                                            let {
                                                                                              sat_scptK [Occ=Once]
                                                                                                :: GHC.Base.String
                                                                                              [LclId] =
                                                                                                  [ipv15_scptH] \u []
                                                                                                      System.Environment.getProgName_go
                                                                                                          ipv15_scptH
                                                                                                          ipv15_scptH;
                                                                                            } in 
                                                                                              Unit# [sat_scptK];
                                                                                      };
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

System.Environment.getProgName :: GHC.Types.IO GHC.Base.String
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] System.Environment.getProgName1 GHC.Prim.void#;

System.Environment.getArgs1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case newAlignedPinnedByteArray# [4# 4# GHC.Prim.void#] of {
          Unit# ipv1_scptO [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_scptO GHC.Prim.void#] of {
                Unit# ipv3_scptR ->
                    case newAlignedPinnedByteArray# [8# 8# GHC.Prim.void#] of {
                      Unit# ipv5_scptU [Occ=Once] ->
                          case unsafeFreezeByteArray# [ipv5_scptU GHC.Prim.void#] of {
                            Unit# ipv7_scptX ->
                                case byteArrayContents# [ipv3_scptR] of p_argc_scptY [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case
                                          byteArrayContents# [ipv7_scptX]
                                      of
                                      p_argv_scptZ [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                __pkg_ccall base-4.11.0.0 [p_argc_scptY
                                                                           p_argv_scptZ
                                                                           GHC.Prim.void#]
                                            of
                                            { (##) ->
                                                  case
                                                      readInt32OffAddr# [p_argc_scptY
                                                                         0#
                                                                         GHC.Prim.void#]
                                                  of
                                                  { Unit# ipv9_scpu5 [Occ=Once] ->
                                                        case
                                                            readAddrOffAddr# [p_argv_scptZ
                                                                              0#
                                                                              GHC.Prim.void#]
                                                        of
                                                        { Unit# ipv11_scpu8 [Occ=Once] ->
                                                              case
                                                                  GHC.IO.Encoding.getFileSystemEncoding1
                                                              of
                                                              { (,) getFileSystemEncoding81_scpua [Occ=Once]
                                                                    _ [Occ=Dead] ->
                                                                    case
                                                                        getFileSystemEncoding81_scpua
                                                                            GHC.Prim.void#
                                                                    of
                                                                    { Unit# ipv13_scpue [Occ=OnceL] ->
                                                                          case
                                                                              -# [ipv9_scpu5 1#]
                                                                          of
                                                                          ww_scpuf [Dmd=<S,U>]
                                                                          { __DEFAULT ->
                                                                                let-no-escape {
                                                                                  $j_scpug [Occ=Once*!T[2],
                                                                                            Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                                                    :: GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld
                                                                                       -> [Foreign.C.String.CString]
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             [GHC.Base.String] #)
                                                                                  [LclId[JoinId(2)],
                                                                                   Arity=2,
                                                                                   Str=<S,U><S,1*U>,
                                                                                   Unf=OtherCon []] =
                                                                                      sat-only [ipv3_scptR
                                                                                                ipv7_scptX
                                                                                                ipv13_scpue] \r [void_0E
                                                                                                                 ipv15_scpui]
                                                                                          let {
                                                                                            go_scpuj [Occ=LoopBreaker]
                                                                                              :: [GHC.Foreign.CString]
                                                                                                 -> GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld
                                                                                                 -> (# GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld,
                                                                                                       [GHC.Base.String] #)
                                                                                            [LclId,
                                                                                             Arity=2,
                                                                                             Str=<S,1*U><S,U>,
                                                                                             Unf=OtherCon []] =
                                                                                                sat-only [ipv13_scpue
                                                                                                          go_scpuj] \r [ds9_scpuk
                                                                                                                        void_0E]
                                                                                                    case
                                                                                                        ds9_scpuk
                                                                                                    of
                                                                                                    { [] ->
                                                                                                          Unit# [GHC.Types.[]];
                                                                                                      : y_scpun [Occ=Once!]
                                                                                                        ys_scpuo [Occ=Once] ->
                                                                                                          case
                                                                                                              y_scpun
                                                                                                          of
                                                                                                          { GHC.Ptr.Ptr ww2_scpuq [Occ=Once] ->
                                                                                                                case
                                                                                                                    GHC.Foreign.$wpeekCString
                                                                                                                        ipv13_scpue
                                                                                                                        ww2_scpuq
                                                                                                                        GHC.Prim.void#
                                                                                                                of
                                                                                                                { Unit# ipv17_scput [Occ=Once] ->
                                                                                                                      case
                                                                                                                          go_scpuj
                                                                                                                              ys_scpuo
                                                                                                                              GHC.Prim.void#
                                                                                                                      of
                                                                                                                      { Unit# ipv19_scpuw [Occ=Once] ->
                                                                                                                            let {
                                                                                                                              sat_scpux [Occ=Once]
                                                                                                                                :: [GHC.Base.String]
                                                                                                                              [LclId] =
                                                                                                                                  CCCS :! [ipv17_scput
                                                                                                                                           ipv19_scpuw];
                                                                                                                            } in 
                                                                                                                              Unit# [sat_scpux];
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                    };
                                                                                          } in 
                                                                                            case
                                                                                                go_scpuj
                                                                                                    ipv15_scpui
                                                                                                    GHC.Prim.void#
                                                                                            of
                                                                                            { Unit# ipv17_scpuA [Occ=Once] ->
                                                                                                  case
                                                                                                      touch# [ipv7_scptX
                                                                                                              GHC.Prim.void#]
                                                                                                  of
                                                                                                  s4_scpuB
                                                                                                  { (##) ->
                                                                                                        case
                                                                                                            touch# [ipv3_scptR
                                                                                                                    GHC.Prim.void#]
                                                                                                        of
                                                                                                        s1_scpuC
                                                                                                        { (##) ->
                                                                                                              Unit# [ipv17_scpuA];
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                } in 
                                                                                  case
                                                                                      <=# [ww_scpuf
                                                                                           0#]
                                                                                  of
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            plusAddr# [ipv11_scpu8
                                                                                                       8#]
                                                                                        of
                                                                                        w1_scpuE [Dmd=<S,U>]
                                                                                        { __DEFAULT ->
                                                                                              case
                                                                                                  -# [ww_scpuf
                                                                                                      1#]
                                                                                              of
                                                                                              sat_scpuY
                                                                                              { __DEFAULT ->
                                                                                                    let-no-escape {
                                                                                                      exit_scpuF [Occ=OnceL!T[2],
                                                                                                                  Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                                                                        :: [Foreign.C.String.CString]
                                                                                                           -> GHC.Prim.State#
                                                                                                                GHC.Prim.RealWorld
                                                                                                           -> (# GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                 [GHC.Base.String] #)
                                                                                                      [LclId[JoinId(2)],
                                                                                                       Arity=2,
                                                                                                       Str=<L,U><S,U>,
                                                                                                       Unf=OtherCon []] =
                                                                                                          sat-only [$j_scpug
                                                                                                                    w1_scpuE] \r [w3_scpuG
                                                                                                                                  void_0E]
                                                                                                              case
                                                                                                                  readAddrOffAddr# [w1_scpuE
                                                                                                                                    0#
                                                                                                                                    GHC.Prim.void#]
                                                                                                              of
                                                                                                              { Unit# ipv15_scpuK [Occ=Once] ->
                                                                                                                    let {
                                                                                                                      sat_scpuL [Occ=Once]
                                                                                                                        :: Foreign.C.String.CString
                                                                                                                      [LclId] =
                                                                                                                          CCCS GHC.Ptr.Ptr! [ipv15_scpuK]; } in
                                                                                                                    let {
                                                                                                                      sat_scpuM [Occ=Once]
                                                                                                                        :: [Foreign.C.String.CString]
                                                                                                                      [LclId] =
                                                                                                                          CCCS :! [sat_scpuL
                                                                                                                                   w3_scpuG];
                                                                                                                    } in 
                                                                                                                      $j_scpug
                                                                                                                          GHC.Prim.void#
                                                                                                                          sat_scpuM;
                                                                                                              };
                                                                                                    } in 
                                                                                                      let-no-escape {
                                                                                                        $wf_scpuN [InlPrag=NOUSERINLINE[0],
                                                                                                                   Occ=LoopBreakerT[3]]
                                                                                                          :: GHC.Prim.Int#
                                                                                                             -> [Foreign.C.String.CString]
                                                                                                             -> GHC.Prim.State#
                                                                                                                  GHC.Prim.RealWorld
                                                                                                             -> (# GHC.Prim.State#
                                                                                                                     GHC.Prim.RealWorld,
                                                                                                                   [GHC.Base.String] #)
                                                                                                        [LclId[JoinId(3)],
                                                                                                         Arity=3,
                                                                                                         Str=<S,1*U><L,U><S,U>,
                                                                                                         Unf=OtherCon []] =
                                                                                                            sat-only [w1_scpuE
                                                                                                                      exit_scpuF
                                                                                                                      $wf_scpuN] \r [ww1_scpuO
                                                                                                                                     w3_scpuP
                                                                                                                                     void_0E]
                                                                                                                case
                                                                                                                    ww1_scpuO
                                                                                                                of
                                                                                                                ds9_scpuR
                                                                                                                { __DEFAULT ->
                                                                                                                      case
                                                                                                                          readAddrOffAddr# [w1_scpuE
                                                                                                                                            ds9_scpuR
                                                                                                                                            GHC.Prim.void#]
                                                                                                                      of
                                                                                                                      { Unit# ipv15_scpuU [Occ=Once] ->
                                                                                                                            let {
                                                                                                                              sat_scpuW [Occ=Once]
                                                                                                                                :: Foreign.C.String.CString
                                                                                                                              [LclId] =
                                                                                                                                  CCCS GHC.Ptr.Ptr! [ipv15_scpuU]; } in
                                                                                                                            let {
                                                                                                                              sat_scpuX [Occ=Once]
                                                                                                                                :: [Foreign.C.String.CString]
                                                                                                                              [LclId] =
                                                                                                                                  CCCS :! [sat_scpuW
                                                                                                                                           w3_scpuP];
                                                                                                                            } in 
                                                                                                                              case
                                                                                                                                  -# [ds9_scpuR
                                                                                                                                      1#]
                                                                                                                              of
                                                                                                                              sat_scpuV
                                                                                                                              { __DEFAULT ->
                                                                                                                                    $wf_scpuN
                                                                                                                                        sat_scpuV
                                                                                                                                        sat_scpuX
                                                                                                                                        GHC.Prim.void#;
                                                                                                                              };
                                                                                                                      };
                                                                                                                  0# ->
                                                                                                                      exit_scpuF
                                                                                                                          w3_scpuP
                                                                                                                          GHC.Prim.void#;
                                                                                                                };
                                                                                                      } in 
                                                                                                        $wf_scpuN
                                                                                                            sat_scpuY
                                                                                                            GHC.Types.[]
                                                                                                            GHC.Prim.void#;
                                                                                              };
                                                                                        };
                                                                                    1# ->
                                                                                        $j_scpug
                                                                                            GHC.Prim.void#
                                                                                            GHC.Types.[];
                                                                                  };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

System.Environment.getArgs :: GHC.Types.IO [GHC.Base.String]
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] System.Environment.getArgs1 GHC.Prim.void#;

System.Environment.withArgs2
  :: forall a.
     [GHC.Base.String]
     -> GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<L,1*U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [new_args_scpuZ act_scpv0 void_0E]
        case System.Environment.getProgName1 GHC.Prim.void# of {
          Unit# ipv1_scpv4 [Occ=OnceL] ->
              case System.Environment.getArgs1 GHC.Prim.void# of {
                Unit# ipv3_scpv7 [Occ=OnceL] ->
                    case getMaskingState# [GHC.Prim.void#] of {
                      Unit# ipv5_scpva [Occ=Once!] ->
                          let {
                            after_scpvb :: [GHC.Base.String]
                            [LclId, Unf=OtherCon []] =
                                CCCS :! [ipv1_scpv4 ipv3_scpv7];
                          } in 
                            case ipv5_scpva of {
                              __DEFAULT ->
                                  case GHC.IO.Encoding.getFileSystemEncoding1 of {
                                    (,) getFileSystemEncoding81_scpve _ [Occ=Dead] ->
                                        case getFileSystemEncoding81_scpve GHC.Prim.void# of {
                                          Unit# ipv7_scpvi [Occ=Once] ->
                                              case
                                                  GHC.Foreign.withCStringsLen1
                                                      ipv7_scpvi
                                                      new_args_scpuZ
                                                      lvl_rcom0
                                                      GHC.Prim.void#
                                              of
                                              { Unit# _ [Occ=Dead] ->
                                                    let {
                                                      sat_scpvv [Occ=Once]
                                                        :: GHC.Exception.SomeException
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_acnvJ #)
                                                      [LclId] =
                                                          [after_scpvb
                                                           getFileSystemEncoding81_scpve] \r [e1_scpvn
                                                                                              void_0E]
                                                              case
                                                                  getFileSystemEncoding81_scpve
                                                                      GHC.Prim.void#
                                                              of
                                                              { Unit# ipv11_scpvr [Occ=Once] ->
                                                                    case
                                                                        GHC.Foreign.withCStringsLen1
                                                                            ipv11_scpvr
                                                                            after_scpvb
                                                                            lvl_rcom0
                                                                            GHC.Prim.void#
                                                                    of
                                                                    { Unit# _ [Occ=Dead] ->
                                                                          raiseIO# [e1_scpvn
                                                                                    GHC.Prim.void#];
                                                                    };
                                                              }; } in
                                                    let {
                                                      sat_scpvm [Occ=Once]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_acnvJ #)
                                                      [LclId] =
                                                          [act_scpv0] \r [void_0E]
                                                              maskAsyncExceptions# [act_scpv0
                                                                                    GHC.Prim.void#];
                                                    } in 
                                                      case
                                                          catch# [sat_scpvm
                                                                  sat_scpvv
                                                                  GHC.Prim.void#]
                                                      of
                                                      { Unit# ipv11_scpvy [Occ=Once] ->
                                                            case
                                                                getFileSystemEncoding81_scpve
                                                                    GHC.Prim.void#
                                                            of
                                                            { Unit# ipv13_scpvB [Occ=Once] ->
                                                                  case
                                                                      GHC.Foreign.withCStringsLen1
                                                                          ipv13_scpvB
                                                                          after_scpvb
                                                                          lvl_rcom0
                                                                          GHC.Prim.void#
                                                                  of
                                                                  { Unit# _ [Occ=Dead] ->
                                                                        Unit# [ipv11_scpvy];
                                                                  };
                                                            };
                                                      };
                                              };
                                        };
                                  };
                              0# ->
                                  let {
                                    sat_scpw8 [Occ=Once]
                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_acnvJ #)
                                    [LclId] =
                                        [new_args_scpuZ act_scpv0 after_scpvb] \r [void_0E]
                                            case GHC.IO.Encoding.getFileSystemEncoding1 of {
                                              (,) getFileSystemEncoding81_scpvH _ [Occ=Dead] ->
                                                  case
                                                      getFileSystemEncoding81_scpvH GHC.Prim.void#
                                                  of
                                                  { Unit# ipv7_scpvL [Occ=Once] ->
                                                        case
                                                            GHC.Foreign.withCStringsLen1
                                                                ipv7_scpvL
                                                                new_args_scpuZ
                                                                lvl_rcom0
                                                                GHC.Prim.void#
                                                        of
                                                        { Unit# _ [Occ=Dead] ->
                                                              let {
                                                                sat_scpvY [Occ=Once]
                                                                  :: GHC.Exception.SomeException
                                                                     -> GHC.Prim.State#
                                                                          GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           a_acnvJ #)
                                                                [LclId] =
                                                                    [after_scpvb
                                                                     getFileSystemEncoding81_scpvH] \r [e1_scpvQ
                                                                                                        void_0E]
                                                                        case
                                                                            getFileSystemEncoding81_scpvH
                                                                                GHC.Prim.void#
                                                                        of
                                                                        { Unit# ipv11_scpvU [Occ=Once] ->
                                                                              case
                                                                                  GHC.Foreign.withCStringsLen1
                                                                                      ipv11_scpvU
                                                                                      after_scpvb
                                                                                      lvl_rcom0
                                                                                      GHC.Prim.void#
                                                                              of
                                                                              { Unit# _ [Occ=Dead] ->
                                                                                    raiseIO# [e1_scpvQ
                                                                                              GHC.Prim.void#];
                                                                              };
                                                                        }; } in
                                                              let {
                                                                sat_scpvP [Occ=Once]
                                                                  :: GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           a_acnvJ #)
                                                                [LclId] =
                                                                    [act_scpv0] \r [void_0E]
                                                                        unmaskAsyncExceptions# [act_scpv0
                                                                                                GHC.Prim.void#];
                                                              } in 
                                                                case
                                                                    catch# [sat_scpvP
                                                                            sat_scpvY
                                                                            GHC.Prim.void#]
                                                                of
                                                                { Unit# ipv11_scpw1 [Occ=Once] ->
                                                                      case
                                                                          getFileSystemEncoding81_scpvH
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# ipv13_scpw4 [Occ=Once] ->
                                                                            case
                                                                                GHC.Foreign.withCStringsLen1
                                                                                    ipv13_scpw4
                                                                                    after_scpvb
                                                                                    lvl_rcom0
                                                                                    GHC.Prim.void#
                                                                            of
                                                                            { Unit# _ [Occ=Dead] ->
                                                                                  Unit# [ipv11_scpw1];
                                                                            };
                                                                      };
                                                                };
                                                        };
                                                  };
                                            };
                                  } in  maskAsyncExceptions# [sat_scpw8 GHC.Prim.void#];
                              1# ->
                                  case GHC.IO.Encoding.getFileSystemEncoding1 of {
                                    (,) getFileSystemEncoding81_scpwa _ [Occ=Dead] ->
                                        case getFileSystemEncoding81_scpwa GHC.Prim.void# of {
                                          Unit# ipv7_scpwe [Occ=Once] ->
                                              case
                                                  GHC.Foreign.withCStringsLen1
                                                      ipv7_scpwe
                                                      new_args_scpuZ
                                                      lvl_rcom0
                                                      GHC.Prim.void#
                                              of
                                              { Unit# _ [Occ=Dead] ->
                                                    let {
                                                      sat_scpwr [Occ=Once]
                                                        :: GHC.Exception.SomeException
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_acnvJ #)
                                                      [LclId] =
                                                          [after_scpvb
                                                           getFileSystemEncoding81_scpwa] \r [e1_scpwj
                                                                                              void_0E]
                                                              case
                                                                  getFileSystemEncoding81_scpwa
                                                                      GHC.Prim.void#
                                                              of
                                                              { Unit# ipv11_scpwn [Occ=Once] ->
                                                                    case
                                                                        GHC.Foreign.withCStringsLen1
                                                                            ipv11_scpwn
                                                                            after_scpvb
                                                                            lvl_rcom0
                                                                            GHC.Prim.void#
                                                                    of
                                                                    { Unit# _ [Occ=Dead] ->
                                                                          raiseIO# [e1_scpwj
                                                                                    GHC.Prim.void#];
                                                                    };
                                                              }; } in
                                                    let {
                                                      sat_scpwi [Occ=Once]
                                                        :: GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 a_acnvJ #)
                                                      [LclId] =
                                                          [act_scpv0] \r [void_0E]
                                                              maskUninterruptible# [act_scpv0
                                                                                    GHC.Prim.void#];
                                                    } in 
                                                      case
                                                          catch# [sat_scpwi
                                                                  sat_scpwr
                                                                  GHC.Prim.void#]
                                                      of
                                                      { Unit# ipv11_scpwu [Occ=Once] ->
                                                            case
                                                                getFileSystemEncoding81_scpwa
                                                                    GHC.Prim.void#
                                                            of
                                                            { Unit# ipv13_scpwx [Occ=Once] ->
                                                                  case
                                                                      GHC.Foreign.withCStringsLen1
                                                                          ipv13_scpwx
                                                                          after_scpvb
                                                                          lvl_rcom0
                                                                          GHC.Prim.void#
                                                                  of
                                                                  { Unit# _ [Occ=Dead] ->
                                                                        Unit# [ipv11_scpwu];
                                                                  };
                                                            };
                                                      };
                                              };
                                        };
                                  };
                            };
                    };
              };
        };

System.Environment.withArgs1
  :: forall a.
     [GHC.Base.String]
     -> GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<L,U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [xs_scpwB act_scpwC void_0E]
        case System.Environment.getProgName1 GHC.Prim.void# of {
          Unit# ipv1_scpwG [Occ=Once] ->
              let {
                sat_scpwH [Occ=Once] :: [GHC.Base.String]
                [LclId] =
                    CCCS :! [ipv1_scpwG xs_scpwB];
              } in 
                System.Environment.withArgs2 sat_scpwH act_scpwC GHC.Prim.void#;
        };

System.Environment.withArgs
  :: forall a. [GHC.Base.String] -> GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=3, Str=<L,U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.Environment.withArgs1 eta_B3 eta_B2 GHC.Prim.void#;

System.Environment.withProgName1
  :: forall a.
     GHC.Base.String
     -> GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<L,U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [nm_scpwI act_scpwJ void_0E]
        case System.Environment.getArgs1 GHC.Prim.void# of {
          Unit# ipv1_scpwN [Occ=Once] ->
              let {
                sat_scpwO [Occ=Once] :: [GHC.Base.String]
                [LclId] =
                    CCCS :! [nm_scpwI ipv1_scpwN];
              } in 
                System.Environment.withArgs2 sat_scpwO act_scpwJ GHC.Prim.void#;
        };

System.Environment.withProgName
  :: forall a. GHC.Base.String -> GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=3, Str=<L,U><L,C(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.Environment.withProgName1 eta_B3 eta_B2 GHC.Prim.void#;

System.Environment.getEnvironment3
  :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_scpwP]
        case ds_scpwP of {
          GHC.Types.C# x_scpwR [Occ=Once!] ->
              case x_scpwR of {
                __DEFAULT -> GHC.Types.False [];
                '='# -> GHC.Types.True [];
              };
        };

System.Environment.getEnvironment2
  :: GHC.Base.String -> (GHC.Base.String, GHC.Base.String)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [str_scpwT]
        case
            GHC.List.$wbreak System.Environment.getEnvironment3 str_scpwT
        of
        { (#,#) ww1_scpwV [Occ=Once*] ww2_scpwW [Occ=Once!] ->
              case ww2_scpwW of {
                [] -> (,) [ww1_scpwV GHC.Types.[]];
                : _ [Occ=Dead] value_scpwZ [Occ=Once] ->
                    (,) [ww1_scpwV value_scpwZ];
              };
        };

System.Environment.getEnvironment1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           [(GHC.Base.String, GHC.Base.String)] #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.void#] of {
          Unit# ds1_scpx4 ->
              case eqAddr# [ds1_scpx4 __NULL] of {
                __DEFAULT ->
                    case GHC.IO.Encoding.getFileSystemEncoding1 of {
                      (,) getFileSystemEncoding81_scpx7 [Occ=Once] _ [Occ=Dead] ->
                          case getFileSystemEncoding81_scpx7 GHC.Prim.void# of {
                            Unit# ipv1_scpxb [Occ=OnceL] ->
                                let-no-escape {
                                  $w$j_scpxc [InlPrag=NOUSERINLINE[0],
                                              Occ=OnceL!T[2],
                                              Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> GHC.Prim.Int#
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             [(GHC.Base.String, GHC.Base.String)] #)
                                  [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
                                      sat-only [ds1_scpx4 ipv1_scpxb] \r [void_0E ww_scpxe]
                                          let-no-escape {
                                            $j_scpxf [Occ=Once*!T[2], Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> [GHC.Ptr.Ptr Foreign.C.Types.CChar]
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       [(GHC.Base.String, GHC.Base.String)] #)
                                            [LclId[JoinId(2)],
                                             Arity=2,
                                             Str=<S,U><S,1*U>,
                                             Unf=OtherCon []] =
                                                sat-only [ipv1_scpxb] \r [void_0E ipv3_scpxh]
                                                    let {
                                                      go_scpxi [Occ=LoopBreaker]
                                                        :: [GHC.Foreign.CString]
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 [GHC.Base.String] #)
                                                      [LclId,
                                                       Arity=2,
                                                       Str=<S,1*U><S,U>,
                                                       Unf=OtherCon []] =
                                                          sat-only [ipv1_scpxb
                                                                    go_scpxi] \r [ds3_scpxj void_0E]
                                                              case ds3_scpxj of {
                                                                [] -> Unit# [GHC.Types.[]];
                                                                : y_scpxm [Occ=Once!]
                                                                  ys_scpxn [Occ=Once] ->
                                                                    case y_scpxm of {
                                                                      GHC.Ptr.Ptr ww2_scpxp [Occ=Once] ->
                                                                          case
                                                                              GHC.Foreign.$wpeekCString
                                                                                  ipv1_scpxb
                                                                                  ww2_scpxp
                                                                                  GHC.Prim.void#
                                                                          of
                                                                          { Unit# ipv5_scpxs [Occ=Once] ->
                                                                                case
                                                                                    go_scpxi
                                                                                        ys_scpxn
                                                                                        GHC.Prim.void#
                                                                                of
                                                                                { Unit# ipv7_scpxv [Occ=Once] ->
                                                                                      let {
                                                                                        sat_scpxw [Occ=Once]
                                                                                          :: [GHC.Base.String]
                                                                                        [LclId] =
                                                                                            CCCS :! [ipv5_scpxs
                                                                                                     ipv7_scpxv];
                                                                                      } in 
                                                                                        Unit# [sat_scpxw];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                    } in 
                                                      case go_scpxi ipv3_scpxh GHC.Prim.void# of {
                                                        Unit# ipv5_scpxz [Occ=Once] ->
                                                            let {
                                                              sat_scpxA [Occ=Once]
                                                                :: [(GHC.Base.String,
                                                                     GHC.Base.String)]
                                                              [LclId] =
                                                                  [ipv5_scpxz] \u []
                                                                      GHC.Base.map
                                                                          System.Environment.getEnvironment2
                                                                          ipv5_scpxz;
                                                            } in  Unit# [sat_scpxA];
                                                      };
                                          } in 
                                            case <=# [ww_scpxe 0#] of {
                                              __DEFAULT ->
                                                  case -# [ww_scpxe 1#] of sat_scpxV {
                                                    __DEFAULT ->
                                                        let-no-escape {
                                                          exit_scpxC [Occ=OnceL!T[2],
                                                                      Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                            :: [GHC.Ptr.Ptr Foreign.C.Types.CChar]
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     [(GHC.Base.String,
                                                                       GHC.Base.String)] #)
                                                          [LclId[JoinId(2)],
                                                           Arity=2,
                                                           Str=<L,U><S,U>,
                                                           Unf=OtherCon []] =
                                                              sat-only [ds1_scpx4
                                                                        $j_scpxf] \r [w3_scpxD
                                                                                      void_0E]
                                                                  case
                                                                      readAddrOffAddr# [ds1_scpx4
                                                                                        0#
                                                                                        GHC.Prim.void#]
                                                                  of
                                                                  { Unit# ipv3_scpxH [Occ=Once] ->
                                                                        let {
                                                                          sat_scpxI [Occ=Once]
                                                                            :: GHC.Ptr.Ptr
                                                                                 Foreign.C.Types.CChar
                                                                          [LclId] =
                                                                              CCCS GHC.Ptr.Ptr! [ipv3_scpxH]; } in
                                                                        let {
                                                                          sat_scpxJ [Occ=Once]
                                                                            :: [GHC.Ptr.Ptr
                                                                                  Foreign.C.Types.CChar]
                                                                          [LclId] =
                                                                              CCCS :! [sat_scpxI
                                                                                       w3_scpxD];
                                                                        } in 
                                                                          $j_scpxf
                                                                              GHC.Prim.void#
                                                                              sat_scpxJ;
                                                                  };
                                                        } in 
                                                          let-no-escape {
                                                            $wf_scpxK [InlPrag=NOUSERINLINE[0],
                                                                       Occ=LoopBreakerT[3]]
                                                              :: GHC.Prim.Int#
                                                                 -> [GHC.Ptr.Ptr
                                                                       Foreign.C.Types.CChar]
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       [(GHC.Base.String,
                                                                         GHC.Base.String)] #)
                                                            [LclId[JoinId(3)],
                                                             Arity=3,
                                                             Str=<S,1*U><L,U><S,U>,
                                                             Unf=OtherCon []] =
                                                                sat-only [ds1_scpx4
                                                                          exit_scpxC
                                                                          $wf_scpxK] \r [ww1_scpxL
                                                                                         w3_scpxM
                                                                                         void_0E]
                                                                    case ww1_scpxL of ds3_scpxO {
                                                                      __DEFAULT ->
                                                                          case
                                                                              readAddrOffAddr# [ds1_scpx4
                                                                                                ds3_scpxO
                                                                                                GHC.Prim.void#]
                                                                          of
                                                                          { Unit# ipv3_scpxR [Occ=Once] ->
                                                                                let {
                                                                                  sat_scpxT [Occ=Once]
                                                                                    :: GHC.Ptr.Ptr
                                                                                         Foreign.C.Types.CChar
                                                                                  [LclId] =
                                                                                      CCCS GHC.Ptr.Ptr! [ipv3_scpxR]; } in
                                                                                let {
                                                                                  sat_scpxU [Occ=Once]
                                                                                    :: [GHC.Ptr.Ptr
                                                                                          Foreign.C.Types.CChar]
                                                                                  [LclId] =
                                                                                      CCCS :! [sat_scpxT
                                                                                               w3_scpxM];
                                                                                } in 
                                                                                  case
                                                                                      -# [ds3_scpxO
                                                                                          1#]
                                                                                  of
                                                                                  sat_scpxS
                                                                                  { __DEFAULT ->
                                                                                        $wf_scpxK
                                                                                            sat_scpxS
                                                                                            sat_scpxU
                                                                                            GHC.Prim.void#;
                                                                                  };
                                                                          };
                                                                      0# ->
                                                                          exit_scpxC
                                                                              w3_scpxM
                                                                              GHC.Prim.void#;
                                                                    };
                                                          } in 
                                                            $wf_scpxK
                                                                sat_scpxV
                                                                GHC.Types.[]
                                                                GHC.Prim.void#;
                                                  };
                                              1# -> $j_scpxf GHC.Prim.void# GHC.Types.[];
                                            };
                                } in 
                                  let-no-escape {
                                    $wloop_scpxW [InlPrag=NOUSERINLINE[0], Occ=LoopBreakerT[2]]
                                      :: GHC.Prim.Int#
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               [(GHC.Base.String, GHC.Base.String)] #)
                                    [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
                                        sat-only [ds1_scpx4 $w$j_scpxc $wloop_scpxW] \r [ww_scpxX
                                                                                         void_0E]
                                            case
                                                readAddrOffAddr# [ds1_scpx4 ww_scpxX GHC.Prim.void#]
                                            of
                                            { Unit# ipv3_scpy1 [Occ=Once] ->
                                                  case eqAddr# [ipv3_scpy1 __NULL] of {
                                                    __DEFAULT ->
                                                        case +# [ww_scpxX 1#] of sat_scpy3 {
                                                          __DEFAULT ->
                                                              $wloop_scpxW sat_scpy3 GHC.Prim.void#;
                                                        };
                                                    1# -> $w$j_scpxc GHC.Prim.void# ww_scpxX;
                                                  };
                                            };
                                  } in  $wloop_scpxW 0# GHC.Prim.void#;
                          };
                    };
                1# -> Unit# [GHC.Types.[]];
              };
        };

System.Environment.getEnvironment
  :: GHC.Types.IO [(GHC.Base.String, GHC.Base.String)]
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] System.Environment.getEnvironment1 GHC.Prim.void#;

System.Environment.setEnv11 :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_scpy4]
        case ds_scpy4 of {
          GHC.Types.C# x_scpy6 [Occ=Once!] ->
              case x_scpy6 of {
                __DEFAULT -> GHC.Types.True [];
                '\NUL'# -> GHC.Types.False [];
              };
        };

lvl5_rcom5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "putenv"#;

lvl6_rcom6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_rcom5;

System.Environment.setEnv2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.Int#
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Foreign.C.Types.CInt #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [void_0E ds2_scpy9]
        case narrow32Int# [ds2_scpy9] of sat_scpya {
          __DEFAULT ->
              Foreign.C.Error.$wlvl lvl6_rcom6 sat_scpya GHC.Prim.void#;
        };

System.Environment.setEnv10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "setEnv"#;

System.Environment.setEnv9 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# System.Environment.setEnv10;

System.Environment.setEnv8 :: GHC.IO.Exception.IOException
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                             GHC.IO.Exception.InvalidArgument
                                             System.Environment.setEnv9
                                             GHC.Types.[]
                                             GHC.Base.Nothing
                                             GHC.Base.Nothing];

System.Environment.setEnv7 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionIOException_$ctoException
            System.Environment.setEnv8;

System.Environment.setEnv6 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['='#];

System.Environment.setEnv3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "="#;

System.Environment.setEnv1
  :: GHC.Base.String
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [key__scpyb value__scpyc void_0E]
        case
            GHC.List.takeWhile System.Environment.setEnv11 key__scpyb
        of
        wild_scpye
        { [] -> raiseIO# [System.Environment.setEnv7 GHC.Prim.void#];
          : _ [Occ=Dead] _ [Occ=Dead] ->
              case
                  GHC.List.elem
                      GHC.Classes.$fEqChar System.Environment.setEnv6 wild_scpye
              of
              { GHC.Types.False ->
                    case
                        GHC.List.takeWhile System.Environment.setEnv11 value__scpyc
                    of
                    wild2_scpyi
                    { [] ->
                          case GHC.IO.Encoding.getFileSystemEncoding GHC.Prim.void# of {
                            Unit# ipv1_scpyl [Occ=Once] ->
                                GHC.Foreign.charIsRepresentable3
                                    ipv1_scpyl wild_scpye System.Environment.setEnv4 GHC.Prim.void#;
                          };
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          case GHC.IO.Encoding.getFileSystemEncoding1 of {
                            (,) getFileSystemEncoding81_scpyp [Occ=Once] _ [Occ=Dead] ->
                                case getFileSystemEncoding81_scpyp GHC.Prim.void# of {
                                  Unit# ipv1_scpyt [Occ=Once] ->
                                      let {
                                        sat_scpyv [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            [wild_scpye wild2_scpyi] \u []
                                                let {
                                                  sat_scpyu [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [wild2_scpyi] \s []
                                                          GHC.CString.unpackAppendCString#
                                                              System.Environment.setEnv3
                                                              wild2_scpyi;
                                                } in  GHC.Base.++ wild_scpye sat_scpyu;
                                      } in 
                                        case
                                            GHC.Foreign.newCString1
                                                ipv1_scpyt sat_scpyv GHC.Prim.void#
                                        of
                                        { Unit# ipv3_scpyy [Occ=Once!] ->
                                              case ipv3_scpyy of {
                                                GHC.Ptr.Ptr ds8_scpyA [Occ=Once] ->
                                                    case
                                                        __pkg_ccall base-4.11.0.0 [ds8_scpyA
                                                                                   GHC.Prim.void#]
                                                    of
                                                    { Unit# ds10_scpyE [Occ=Once] ->
                                                          case narrow32Int# [ds10_scpyE] of {
                                                            __DEFAULT ->
                                                                case
                                                                    __pkg_ccall base-4.11.0.0 [GHC.Prim.void#]
                                                                of
                                                                { Unit# ds12_scpyJ [Occ=Once] ->
                                                                      System.Environment.setEnv2
                                                                          GHC.Prim.void# ds12_scpyJ;
                                                                };
                                                            0# -> Unit# [GHC.Tuple.()];
                                                          };
                                                    };
                                              };
                                        };
                                };
                          };
                    };
                GHC.Types.True ->
                    raiseIO# [System.Environment.setEnv7 GHC.Prim.void#];
              };
        };

System.Environment.setEnv
  :: GHC.Base.String -> GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        System.Environment.setEnv1 eta_B3 eta_B2 GHC.Prim.void#;

