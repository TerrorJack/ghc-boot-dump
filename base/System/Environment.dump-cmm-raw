
==================== Raw Cmm ====================
2018-03-16 16:07:16.989296576 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:16.990526347 UTC

[section ""cstring" . System.Environment.$trModule4_bytes" {
     System.Environment.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.9925839 UTC

[section ""data" . System.Environment.$trModule3_closure" {
     System.Environment.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.994703035 UTC

[section ""cstring" . System.Environment.$trModule2_bytes" {
     System.Environment.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,69,110,118,105,114,111,110,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.996576686 UTC

[section ""data" . System.Environment.$trModule1_closure" {
     System.Environment.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:16.998581626 UTC

[section ""data" . System.Environment.$trModule_closure" {
     System.Environment.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Environment.$trModule3_closure+1;
         const System.Environment.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.000443144 UTC

[section ""cstring" . loc_rcolY_bytes" {
     loc_rcolY_bytes:
         I8[] [117,110,115,101,116,69,110,118]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.002957004 UTC

[section ""data" . loc1_rcolZ_closure" {
     loc1_rcolZ_closure:
         const loc1_rcolZ_info;
         const 0;
         const 0;
         const 0;
 },
 loc1_rcolZ_entry() //  [R1]
         { []
         }
     {offset
       ccp17: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccp18; else goto ccp19;
       ccp18: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccp19: // global
           (_ccp14::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccp14::I64 == 0) goto ccp16; else goto ccp15;
       ccp16: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccp15: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccp14::I64;
           R2 = loc_rcolY_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc1_rcolZ_info" {
     loc1_rcolZ_info:
         const loc1_rcolZ_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.007289483 UTC

[section ""data" . System.Environment.setEnv5_closure" {
     System.Environment.setEnv5_closure:
         const System.Environment.setEnv5_info;
         const 0;
 },
 System.Environment.setEnv5_entry() //  [R2]
         { []
         }
     {offset
       ccp1n: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = loc1_rcolZ_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.setEnv5_info" {
     System.Environment.setEnv5_info:
         const System.Environment.setEnv5_entry;
         const 0;
         const 12884901902;
         const 8589934596;
         const Scotk_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.01197865 UTC

[section ""data" . System.Environment.setEnv4_closure" {
     System.Environment.setEnv4_closure:
         const System.Environment.setEnv4_info;
         const 0;
 },
 System.Environment.setEnv4_entry() //  [R2]
         { []
         }
     {offset
       ccp1B: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccp1C; else goto ccp1D;
       ccp1C: // global
           R2 = R2;
           R1 = System.Environment.setEnv4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccp1D: // global
           I64[Sp - 8] = block_ccp1y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucp1Z; else goto ccp1z;
       ucp1Z: // global
           call _ccp1y(R1) args: 0, res: 0, upd: 0;
       ccp1z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.setEnv4_info" {
     System.Environment.setEnv4_info:
         const System.Environment.setEnv4_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const Scotk_srt+16;
 },
 _ccp1y() //  [R1]
         { []
         }
     {offset
       ccp1y: // global
           (_scomi::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [‘signed’] __hsbase_unsetenv(I64[R1 + 7]);
           if (%MO_SS_Conv_W64_W32(_scomi::I64) == 0 :: W32) goto ccp1U; else goto ccp1O;
       ccp1U: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccp1O: // global
           (_scomn::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scomn::I64;
           Sp = Sp + 8;
           call System.Environment.setEnv5_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp1y_info" {
     block_ccp1y_info:
         const _ccp1y;
         const 0;
         const 4294967326;
         const Scotk_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.01996042 UTC

[section ""data" . System.Environment.unsetEnv1_closure" {
     System.Environment.unsetEnv1_closure:
         const System.Environment.unsetEnv1_info;
         const 0;
 },
 System.Environment.unsetEnv1_entry() //  [R2]
         { []
         }
     {offset
       ccp2g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccp2h; else goto ccp2i;
       ccp2h: // global
           R2 = R2;
           R1 = System.Environment.unsetEnv1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccp2i: // global
           I64[Sp - 16] = block_ccp2e_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.unsetEnv1_info" {
     System.Environment.unsetEnv1_info:
         const System.Environment.unsetEnv1_entry;
         const 0;
         const 55834574862;
         const 8589934597;
         const Scotk_srt+16;
 },
 _ccp2e() //  [R1]
         { []
         }
     {offset
       ccp2e: // global
           R4 = System.Environment.setEnv4_closure+2;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp2e_info" {
     block_ccp2e_info:
         const _ccp2e;
         const 1;
         const 4294967326;
         const Scotk_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.02572531 UTC

[section ""data" . System.Environment.unsetEnv_closure" {
     System.Environment.unsetEnv_closure:
         const System.Environment.unsetEnv_info;
         const 0;
 },
 System.Environment.unsetEnv_entry() //  [R2]
         { []
         }
     {offset
       ccp2w: // global
           R2 = R2;
           call System.Environment.unsetEnv1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.unsetEnv_info" {
     System.Environment.unsetEnv_info:
         const System.Environment.unsetEnv_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Scotk_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.030127704 UTC

[section ""data" . lvl_rcom0_closure" {
     lvl_rcom0_closure:
         const lvl_rcom0_info;
 },
 lvl_rcom0_entry() //  [R2, R3]
         { []
         }
     {offset
       ccp2K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccp2O; else goto ccp2P;
       ccp2O: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl_rcom0_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccp2P: // global
           I64[Sp - 16] = block_ccp2H_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucp33; else goto ccp2I;
       ucp33: // global
           call _ccp2H(R1) args: 0, res: 0, upd: 0;
       ccp2I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl_rcom0_info" {
     lvl_rcom0_info:
         const lvl_rcom0_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _ccp2H() //  [R1]
         { []
         }
     {offset
       ccp2H: // global
           I64[Sp] = block_ccp2N_info;
           _scomy::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _scomy::I64;
           if (R1 & 7 != 0) goto ucp32; else goto ccp2R;
       ucp32: // global
           call _ccp2N(R1) args: 0, res: 0, upd: 0;
       ccp2R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp2H_info" {
     block_ccp2H_info:
         const _ccp2H;
         const 1;
         const 30;
 },
 _ccp2N() //  [R1]
         { []
         }
     {offset
       ccp2N: // global
           call "ccall" arg hints:  [‘signed’,
                                     PtrHint]  result hints:  [] setProgArgv(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])), I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp2N_info" {
     block_ccp2N_info:
         const _ccp2N;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.038950634 UTC

[section ""data" . System.Environment.$wlvl_closure" {
     System.Environment.$wlvl_closure:
         const System.Environment.$wlvl_info;
         const 0;
 },
 System.Environment.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       ccp3u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccp3v; else goto ccp3w;
       ccp3v: // global
           R2 = R2;
           R1 = System.Environment.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccp3w: // global
           (_scomK::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] getenv(R2);
           if (_scomK::I64 == 0) goto ccp3t; else goto ccp3s;
       ccp3t: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccp3s: // global
           I64[Sp - 16] = block_ccp3y_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           I64[Sp - 8] = _scomK::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucp3N; else goto ccp3z;
       ucp3N: // global
           call _ccp3y(R1) args: 0, res: 0, upd: 0;
       ccp3z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.$wlvl_info" {
     System.Environment.$wlvl_info:
         const System.Environment.$wlvl_entry;
         const 0;
         const 30064771086;
         const 8589934596;
         const Scotk_srt+48;
 },
 _ccp3y() //  [R1]
         { []
         }
     {offset
       ccp3y: // global
           I64[Sp] = block_ccp3D_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp3y_info" {
     block_ccp3y_info:
         const _ccp3y;
         const 65;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccp3D() //  [R1]
         { []
         }
     {offset
       ccp3D: // global
           _scomK::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_ccp3F_info;
           R3 = _scomK::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp3D_info" {
     block_ccp3D_info:
         const _ccp3D;
         const 65;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccp3F() //  [R1]
         { []
         }
     {offset
       ccp3F: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccp3M; else goto ccp3L;
       ccp3M: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccp3L: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp3F_info" {
     block_ccp3F_info:
         const _ccp3F;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.048349048 UTC

[section ""data" . System.Environment.getEnv3_closure" {
     System.Environment.getEnv3_closure:
         const System.Environment.getEnv3_info;
         const 0;
 },
 System.Environment.getEnv3_entry() //  [R2]
         { []
         }
     {offset
       ccp4c: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccp4d; else goto ccp4e;
       ccp4d: // global
           R2 = R2;
           R1 = System.Environment.getEnv3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccp4e: // global
           I64[Sp - 8] = block_ccp49_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucp4i; else goto ccp4a;
       ucp4i: // global
           call _ccp49(R1) args: 0, res: 0, upd: 0;
       ccp4a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getEnv3_info" {
     System.Environment.getEnv3_info:
         const System.Environment.getEnv3_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const Scotk_srt+64;
 },
 _ccp49() //  [R1]
         { []
         }
     {offset
       ccp49: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call System.Environment.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp49_info" {
     block_ccp49_info:
         const _ccp49;
         const 0;
         const 4294967326;
         const Scotk_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.054036861 UTC

[section ""data" . System.Environment.lookupEnv1_closure" {
     System.Environment.lookupEnv1_closure:
         const System.Environment.lookupEnv1_info;
         const 0;
 },
 System.Environment.lookupEnv1_entry() //  [R2]
         { []
         }
     {offset
       ccp4y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccp4z; else goto ccp4A;
       ccp4z: // global
           R2 = R2;
           R1 = System.Environment.lookupEnv1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccp4A: // global
           I64[Sp - 16] = block_ccp4w_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.lookupEnv1_info" {
     System.Environment.lookupEnv1_info:
         const System.Environment.lookupEnv1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const Scotk_srt+72;
 },
 _ccp4w() //  [R1]
         { []
         }
     {offset
       ccp4w: // global
           R4 = System.Environment.getEnv3_closure+2;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp4w_info" {
     block_ccp4w_info:
         const _ccp4w;
         const 1;
         const 4294967326;
         const Scotk_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.059926142 UTC

[section ""data" . System.Environment.lookupEnv_closure" {
     System.Environment.lookupEnv_closure:
         const System.Environment.lookupEnv_info;
         const 0;
 },
 System.Environment.lookupEnv_entry() //  [R2]
         { []
         }
     {offset
       ccp4O: // global
           R2 = R2;
           call System.Environment.lookupEnv1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.lookupEnv_info" {
     System.Environment.lookupEnv_info:
         const System.Environment.lookupEnv_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Scotk_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.063066189 UTC

[section ""cstring" . lvl1_rcom1_bytes" {
     lvl1_rcom1_bytes:
         I8[] [103,101,116,69,110,118]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.065424636 UTC

[section ""data" . lvl2_rcom2_closure" {
     lvl2_rcom2_closure:
         const lvl2_rcom2_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_rcom2_entry() //  [R1]
         { []
         }
     {offset
       ccp52: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccp53; else goto ccp54;
       ccp53: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccp54: // global
           (_ccp4Z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccp4Z::I64 == 0) goto ccp51; else goto ccp50;
       ccp51: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccp50: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccp4Z::I64;
           R2 = lvl1_rcom1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_rcom2_info" {
     lvl2_rcom2_info:
         const lvl2_rcom2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.069059645 UTC

[section ""cstring" . lvl3_rcom3_bytes" {
     lvl3_rcom3_bytes:
         I8[] [110,111,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.071492847 UTC

[section ""data" . lvl4_rcom4_closure" {
     lvl4_rcom4_closure:
         const lvl4_rcom4_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_rcom4_entry() //  [R1]
         { []
         }
     {offset
       ccp5j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccp5k; else goto ccp5l;
       ccp5k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccp5l: // global
           (_ccp5g::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccp5g::I64 == 0) goto ccp5i; else goto ccp5h;
       ccp5i: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccp5h: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccp5g::I64;
           R2 = lvl3_rcom3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_rcom4_info" {
     lvl4_rcom4_info:
         const lvl4_rcom4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.076161671 UTC

[section ""data" . System.Environment.getEnv2_closure" {
     System.Environment.getEnv2_closure:
         const System.Environment.getEnv2_info;
         const 0;
 },
 sat_scon9_entry() //  [R1]
         { []
         }
     {offset
       ccp5D: // global
           _scon9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccp5E; else goto ccp5F;
       ccp5F: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccp5H; else goto ccp5G;
       ccp5H: // global
           HpAlloc = 72;
           goto ccp5E;
       ccp5E: // global
           R1 = _scon9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccp5G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scon9::P64;
           _scon6::P64 = P64[_scon9::P64 + 16];
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _scon6::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = GHC.IO.Exception.NoSuchThing_closure+1;
           P64[Hp - 24] = lvl2_rcom2_closure;
           P64[Hp - 16] = lvl4_rcom4_closure;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = Hp - 62;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scon9_info" {
     sat_scon9_info:
         const sat_scon9_entry;
         const 1;
         const 30064771088;
         const Scotk_srt+96;
 },
 System.Environment.getEnv2_entry() //  [R2]
         { []
         }
     {offset
       ccp5I: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccp5M; else goto ccp5L;
       ccp5M: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = System.Environment.getEnv2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccp5L: // global
           I64[Hp - 16] = sat_scon9_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getEnv2_info" {
     System.Environment.getEnv2_info:
         const System.Environment.getEnv2_entry;
         const 0;
         const 64424509454;
         const 8589934597;
         const Scotk_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.083100427 UTC

[section ""data" . System.Environment.getEnv1_closure" {
     System.Environment.getEnv1_closure:
         const System.Environment.getEnv1_info;
         const 0;
 },
 System.Environment.getEnv1_entry() //  [R2]
         { []
         }
     {offset
       ccp6b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccp6c; else goto ccp6d;
       ccp6c: // global
           R2 = R2;
           R1 = System.Environment.getEnv1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccp6d: // global
           I64[Sp - 16] = block_ccp60_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getEnv1_info" {
     System.Environment.getEnv1_info:
         const System.Environment.getEnv1_entry;
         const 0;
         const 837518622734;
         const 8589934597;
         const Scotk_srt+72;
 },
 _ccp60() //  [R1]
         { []
         }
     {offset
       ccp60: // global
           I64[Sp] = block_ccp62_info;
           R4 = System.Environment.getEnv3_closure+2;
           R3 = P64[Sp + 8];
           R2 = R1;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp60_info" {
     block_ccp60_info:
         const _ccp60;
         const 1;
         const 279172874270;
         const Scotk_srt+72;
 },
 _ccp62() //  [R1]
         { []
         }
     {offset
       ccp62: // global
           I64[Sp] = block_ccp64_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ucp6m; else goto ccp65;
       ucp6m: // global
           call _ccp64(R1) args: 0, res: 0, upd: 0;
       ccp65: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp62_info" {
     block_ccp62_info:
         const _ccp62;
         const 1;
         const 4294967326;
         const Scotk_srt+120;
 },
 _ccp64() //  [R1]
         { []
         }
     {offset
       ccp64: // global
           if (R1 & 7 == 1) goto ccp68; else goto ccp69;
       ccp68: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call System.Environment.getEnv2_entry(R2) args: 8, res: 0, upd: 8;
       ccp69: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp64_info" {
     block_ccp64_info:
         const _ccp64;
         const 1;
         const 4294967326;
         const Scotk_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.092039679 UTC

[section ""data" . System.Environment.getEnv_closure" {
     System.Environment.getEnv_closure:
         const System.Environment.getEnv_info;
         const 0;
 },
 System.Environment.getEnv_entry() //  [R2]
         { []
         }
     {offset
       ccp6J: // global
           R2 = R2;
           call System.Environment.getEnv1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getEnv_info" {
     System.Environment.getEnv_info:
         const System.Environment.getEnv_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Scotk_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.096759203 UTC

[section ""data" . System.Environment.getProgName_go_closure" {
     System.Environment.getProgName_go_closure:
         const System.Environment.getProgName_go_info;
 },
 System.Environment.getProgName_go_entry() //  [R2, R3]
         { []
         }
     {offset
       ccp71: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccp72; else goto ucp7k;
       ccp72: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.getProgName_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ucp7k: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _ccp6R() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . System.Environment.getProgName_go_info" {
     System.Environment.getProgName_go_info:
         const System.Environment.getProgName_go_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccp6R() //  []
         { []
         }
     {offset
       ccp6R: // global
           I64[Sp - 8] = block_ccp6U_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucp7n; else goto ccp6V;
       ucp7n: // global
           call _ccp6U(R1) args: 0, res: 0, upd: 0;
       ccp6V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccp6U() //  [R1]
         { []
         }
     {offset
       ccp6U: // global
           if (R1 & 7 == 1) goto ccp6Y; else goto ccp6Z;
       ccp6Y: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccp6Z: // global
           I64[Sp] = block_ccp79_info;
           _scono::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _scono::P64;
           if (R1 & 7 != 0) goto ucp7o; else goto ccp7b;
       ucp7o: // global
           call _ccp79(R1) args: 0, res: 0, upd: 0;
       ccp7b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp6U_info" {
     block_ccp6U_info:
         const _ccp6U;
         const 130;
         const 30;
 },
 _ccp79() //  [R1]
         { []
         }
     {offset
       ccp79: // global
           _scono::P64 = P64[Sp + 16];
           if (I64[R1 + 7] == 47) goto ccp7j; else goto ccp7i;
       ccp7j: // global
           P64[Sp + 8] = _scono::P64;
           P64[Sp + 16] = _scono::P64;
           Sp = Sp + 8;
           goto ucp7r;
       ccp7i: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = _scono::P64;
           Sp = Sp + 8;
           goto ucp7r;
       ucp7r: // global
           call _ccp6R() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccp79_info" {
     block_ccp79_info:
         const _ccp79;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.106962815 UTC

[section ""data" . System.Environment.getProgName1_closure" {
     System.Environment.getProgName1_closure:
         const System.Environment.getProgName1_info;
         const 0;
 },
 sat_scoo1_entry() //  [R1]
         { []
         }
     {offset
       ccp8i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccp8j; else goto ccp8k;
       ccp8j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccp8k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sconY::P64 = P64[R1 + 16];
           R3 = _sconY::P64;
           R2 = _sconY::P64;
           Sp = Sp - 16;
           call System.Environment.getProgName_go_entry(R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scoo1_info" {
     sat_scoo1_info:
         const sat_scoo1_entry;
         const 1;
         const 16;
 },
 System.Environment.getProgName1_entry() //  []
         { []
         }
     {offset
       ccp8l: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccp8m; else goto ccp8n;
       ccp8m: // global
           R1 = System.Environment.getProgName1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccp8n: // global
           I64[Sp - 8] = block_ccp7Q_info;
           R2 = 4;
           R1 = 4;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getProgName1_info" {
     System.Environment.getProgName1_info:
         const System.Environment.getProgName1_entry;
         const 0;
         const 8808977924110;
         const 4294967299;
         const Scotk_srt+48;
 },
 _ccp7Q() //  [R1]
         { []
         }
     {offset
       ccp7Q: // global
           I64[Sp - 8] = block_ccp7S_info;
           R2 = 8;
           _scony::P64 = R1;
           R1 = 8;
           P64[Sp] = _scony::P64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp7Q_info" {
     block_ccp7Q_info:
         const _ccp7Q;
         const 0;
         const 12884901918;
         const Scotk_srt+48;
 },
 _ccp7S() //  [R1]
         { []
         }
     {offset
       ccp7S: // global
           _sconF::I64 = R1 + 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] getProgArgv(P64[Sp + 8] + 16, _sconF::I64);
           _sconM::I64 = I64[_sconF::I64];
           I64[Sp - 16] = block_ccp83_info;
           _sconE::P64 = R1;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           I64[Sp - 8] = _sconM::I64;
           P64[Sp] = _sconE::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucp8v; else goto ccp84;
       ucp8v: // global
           call _ccp83(R1) args: 0, res: 0, upd: 0;
       ccp84: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp7S_info" {
     block_ccp7S_info:
         const _ccp7S;
         const 1;
         const 12884901918;
         const Scotk_srt+48;
 },
 _ccp83() //  [R1]
         { []
         }
     {offset
       ccp83: // global
           I64[Sp] = block_ccp88_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp83_info" {
     block_ccp83_info:
         const _ccp83;
         const 67;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccp88() //  [R1]
         { []
         }
     {offset
       ccp88: // global
           _sconV::I64 = I64[I64[Sp + 8]];
           I64[Sp + 8] = block_ccp8a_info;
           R3 = _sconV::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp88_info" {
     block_ccp88_info:
         const _ccp88;
         const 67;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccp8a() //  [R1]
         { []
         }
     {offset
       ccp8a: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccp8u; else goto ccp8t;
       ccp8u: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccp8t: // global
           _scony::P64 = P64[Sp + 16];
           call MO_Touch(P64[Sp + 8]);
           call MO_Touch(_scony::P64);
           I64[Hp - 16] = sat_scoo1_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp8a_info" {
     block_ccp8a_info:
         const _ccp8a;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.120369644 UTC

[section ""data" . System.Environment.getProgName_closure" {
     System.Environment.getProgName_closure:
         const System.Environment.getProgName_info;
         const 0;
 },
 System.Environment.getProgName_entry() //  []
         { []
         }
     {offset
       ccp93: // global
           call System.Environment.getProgName1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getProgName_info" {
     System.Environment.getProgName_info:
         const System.Environment.getProgName_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Scotk_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.129028653 UTC

[section ""data" . System.Environment.getArgs1_closure" {
     System.Environment.getArgs1_closure:
         const System.Environment.getArgs1_info;
         const 0;
 },
 go_scooA_entry() //  [R1, R2]
         { []
         }
     {offset
       ccpac: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccpad; else goto ccpae;
       ccpad: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpae: // global
           I64[Sp - 24] = block_ccpa5_info;
           _scooA::P64 = R1;
           _scoov::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _scoov::P64;
           P64[Sp - 8] = _scooA::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucpaB; else goto ccpa6;
       ucpaB: // global
           call _ccpa5(R1) args: 0, res: 0, upd: 0;
       ccpa6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_scooA_info" {
     go_scooA_info:
         const go_scooA_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const Scotk_srt+48;
 },
 _ccpa5() //  [R1]
         { []
         }
     {offset
       ccpa5: // global
           if (R1 & 7 == 1) goto ccpa9; else goto ccpaa;
       ccpa9: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccpaa: // global
           I64[Sp - 8] = block_ccpak_info;
           _scooF::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scooF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucpaA; else goto ccpal;
       ucpaA: // global
           call _ccpak(R1) args: 0, res: 0, upd: 0;
       ccpal: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpa5_info" {
     block_ccpa5_info:
         const _ccpa5;
         const 2;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccpak() //  [R1]
         { []
         }
     {offset
       ccpak: // global
           I64[Sp] = block_ccpap_info;
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 16];
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpak_info" {
     block_ccpak_info:
         const _ccpak;
         const 3;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccpap() //  [R1]
         { []
         }
     {offset
       ccpap: // global
           I64[Sp + 16] = block_ccpar_info;
           R2 = P64[Sp + 8];
           _scooK::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _scooK::P64;
           Sp = Sp + 16;
           call go_scooA_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpap_info" {
     block_ccpap_info:
         const _ccpap;
         const 131;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccpar() //  [R1]
         { []
         }
     {offset
       ccpar: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccpaz; else goto ccpay;
       ccpaz: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpay: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpar_info" {
     block_ccpar_info:
         const _ccpar;
         const 1;
         const 30;
 },
 System.Environment.getArgs1_entry() //  []
         { []
         }
     {offset
       ccpaC: // global
           if ((Sp + -56) < SpLim) (likely: False) goto ccpaD; else goto ccpaE;
       ccpaD: // global
           R1 = System.Environment.getArgs1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccpaE: // global
           I64[Sp - 8] = block_ccp9e_info;
           R2 = 4;
           R1 = 4;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getArgs1_info" {
     System.Environment.getArgs1_info:
         const System.Environment.getArgs1_entry;
         const 0;
         const 17605070946318;
         const 4294967299;
         const Scotk_srt+48;
 },
 _ccp9e() //  [R1]
         { []
         }
     {offset
       ccp9e: // global
           I64[Sp - 8] = block_ccp9g_info;
           R2 = 8;
           _scoo8::P64 = R1;
           R1 = 8;
           P64[Sp] = _scoo8::P64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp9e_info" {
     block_ccp9e_info:
         const _ccp9e;
         const 0;
         const 12884901918;
         const Scotk_srt+48;
 },
 _ccp9g() //  [R1]
         { []
         }
     {offset
       ccp9g: // global
           _scoof::I64 = P64[Sp + 8] + 16;
           _scoog::I64 = R1 + 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] getProgArgv(_scoof::I64, _scoog::I64);
           _scoom::I64 = %MO_SS_Conv_W32_W64(I32[_scoof::I64]);
           _scoop::I64 = I64[_scoog::I64];
           I64[Sp - 24] = block_ccp9r_info;
           _scooe::P64 = R1;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           I64[Sp - 16] = _scoom::I64;
           I64[Sp - 8] = _scoop::I64;
           P64[Sp] = _scooe::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucpbg; else goto ccp9s;
       ucpbg: // global
           call _ccp9r(R1) args: 0, res: 0, upd: 0;
       ccp9s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp9g_info" {
     block_ccp9g_info:
         const _ccp9g;
         const 1;
         const 12884901918;
         const Scotk_srt+48;
 },
 _ccp9r() //  [R1]
         { []
         }
     {offset
       ccp9r: // global
           I64[Sp] = block_ccp9w_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccp9r_info" {
     block_ccp9r_info:
         const _ccp9r;
         const 196;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccp9w() //  [R1]
         { []
         }
     {offset
       ccp9w: // global
           _scoow::I64 = I64[Sp + 8] - 1;
           if (%MO_S_Gt_W64(_scoow::I64, 0)) goto ccpb2; else goto ccpb3;
       ccpb2: // global
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           I64[Sp] = _scoow::I64 - 1;
           I64[Sp + 8] = I64[Sp + 16] + 8;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call _ccp9Q() args: 0, res: 0, upd: 0;
       ccpb3: // global
           P64[Sp + 16] = R1;
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call _ccp9Y() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccp9w_info" {
     block_ccp9w_info:
         const _ccp9w;
         const 196;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccp9Q() //  []
         { []
         }
     {offset
       ccp9Q: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccpaX; else goto ccpaW;
       ccpaX: // global
           HpAlloc = 40;
           I64[Sp] = block_ccp9Q_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       ccpaW: // global
           _scop6::P64 = P64[Sp + 8];
           _scop8::I64 = I64[Sp + 16];
           if (_scop8::I64 != 0) goto ccpaZ; else goto ccpb0;
       ccpaZ: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[I64[Sp + 24] + (_scop8::I64 << 3)];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scop6::P64;
           I64[Sp + 16] = _scop8::I64 - 1;
           P64[Sp + 8] = Hp - 14;
           call _ccp9Q() args: 0, res: 0, upd: 0;
       ccpb0: // global
           Hp = Hp - 40;
           P64[Sp + 16] = _scop6::P64;
           Sp = Sp + 16;
           call _ccpaQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccp9Q_info" {
     block_ccp9Q_info:
         const _ccp9Q;
         const 390;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccpaQ() //  []
         { []
         }
     {offset
       ccpaQ: // global
           Hp = Hp + 40;
           _scooX::P64 = P64[Sp];
           if (Hp > HpLim) (likely: False) goto ccpaU; else goto ccpaT;
       ccpaU: // global
           HpAlloc = 40;
           I64[Sp] = block_ccpaP_info;
           R1 = _scooX::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpaT: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[I64[Sp + 8]];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scooX::P64;
           P64[Sp + 8] = Hp - 14;
           Sp = Sp + 8;
           call _ccp9Y() args: 0, res: 0, upd: 0;
     }
 },
 _ccpaP() //  [R1]
         { []
         }
     {offset
       ccpaP: // global
           P64[Sp] = R1;
           call _ccpaQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccpaP_info" {
     block_ccpaP_info:
         const _ccpaP;
         const 68;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccp9Y() //  []
         { []
         }
     {offset
       ccp9Y: // global
           Hp = Hp + 16;
           _scooz::P64 = P64[Sp];
           if (Hp > HpLim) (likely: False) goto ccpaM; else goto ccpaL;
       ccpaM: // global
           HpAlloc = 16;
           I64[Sp] = block_ccp9X_info;
           R1 = _scooz::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpaL: // global
           I64[Hp - 8] = go_scooA_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_ccpaJ_info;
           R2 = _scooz::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call go_scooA_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccp9X() //  [R1]
         { []
         }
     {offset
       ccp9X: // global
           P64[Sp] = R1;
           call _ccp9Y() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccp9X_info" {
     block_ccp9X_info:
         const _ccp9X;
         const 3;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccpaJ() //  [R1]
         { []
         }
     {offset
       ccpaJ: // global
           _scoo8::P64 = P64[Sp + 16];
           call MO_Touch(P64[Sp + 8]);
           call MO_Touch(_scoo8::P64);
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpaJ_info" {
     block_ccpaJ_info:
         const _ccpaJ;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.156877561 UTC

[section ""data" . System.Environment.getArgs_closure" {
     System.Environment.getArgs_closure:
         const System.Environment.getArgs_info;
         const 0;
 },
 System.Environment.getArgs_entry() //  []
         { []
         }
     {offset
       ccpcE: // global
           call System.Environment.getArgs1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getArgs_info" {
     System.Environment.getArgs_info:
         const System.Environment.getArgs_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Scotk_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.170650105 UTC

[section ""data" . System.Environment.withArgs2_closure" {
     System.Environment.withArgs2_closure:
         const System.Environment.withArgs2_info;
         const 0;
 },
 sat_scopM_entry() //  [R1, R2]
         { []
         }
     {offset
       ccpdg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccpdh; else goto ccpdi;
       ccpdh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpdi: // global
           I64[Sp - 24] = block_ccpdc_info;
           _scops::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 16] = _scops::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scopM_info" {
     sat_scopM_info:
         const sat_scopM_entry;
         const 2;
         const 4294967307;
         const 8589934597;
         const Scotk_srt+152;
 },
 _ccpdc() //  [R1]
         { []
         }
     {offset
       ccpdc: // global
           _scops::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccpde_info;
           R4 = lvl_rcom0_closure+3;
           R3 = _scops::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpdc_info" {
     block_ccpdc_info:
         const _ccpdc;
         const 2;
         const 4294967326;
         const Scotk_srt+152;
 },
 _ccpde() //  []
         { []
         }
     {offset
       ccpde: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpde_info" {
     block_ccpde_info:
         const _ccpde;
         const 1;
         const 30;
 },
 sat_scopD_entry() //  [R1]
         { []
         }
     {offset
       ccpdq: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scopD_info" {
     sat_scopD_info:
         const sat_scopD_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_scoqf_entry() //  [R1, R2]
         { []
         }
     {offset
       ccpdR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccpdS; else goto ccpdT;
       ccpdS: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpdT: // global
           I64[Sp - 24] = block_ccpdN_info;
           _scops::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 16] = _scops::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scoqf_info" {
     sat_scoqf_info:
         const sat_scoqf_entry;
         const 2;
         const 4294967307;
         const 8589934597;
         const Scotk_srt+152;
 },
 _ccpdN() //  [R1]
         { []
         }
     {offset
       ccpdN: // global
           _scops::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccpdP_info;
           R4 = lvl_rcom0_closure+3;
           R3 = _scops::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpdN_info" {
     block_ccpdN_info:
         const _ccpdN;
         const 2;
         const 4294967326;
         const Scotk_srt+152;
 },
 _ccpdP() //  []
         { []
         }
     {offset
       ccpdP: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpdP_info" {
     block_ccpdP_info:
         const _ccpdP;
         const 1;
         const 30;
 },
 sat_scoq6_entry() //  [R1]
         { []
         }
     {offset
       ccpe1: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scoq6_info" {
     sat_scoq6_info:
         const sat_scoq6_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_scoqp_entry() //  [R1]
         { []
         }
     {offset
       ccpe4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccpea; else goto ccpeb;
       ccpea: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccpeb: // global
           I64[Sp - 32] = block_ccpdz_info;
           _scopg::P64 = P64[R1 + 7];
           _scoph::P64 = P64[R1 + 15];
           _scops::P64 = P64[R1 + 23];
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           P64[Sp - 24] = _scopg::P64;
           P64[Sp - 16] = _scoph::P64;
           P64[Sp - 8] = _scops::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucpel; else goto ccpdA;
       ucpel: // global
           call _ccpdz(R1) args: 0, res: 0, upd: 0;
       ccpdA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scoqp_info" {
     sat_scoqp_info:
         const sat_scoqp_entry;
         const 3;
         const 17596481011720;
         const 4294967299;
         const Scotk_srt+56;
 },
 _ccpdz() //  [R1]
         { []
         }
     {offset
       ccpdz: // global
           I64[Sp - 8] = block_ccpdE_info;
           _scopY::P64 = P64[R1 + 7];
           R1 = _scopY::P64;
           P64[Sp] = _scopY::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpdz_info" {
     block_ccpdz_info:
         const _ccpdz;
         const 3;
         const 4294967326;
         const Scotk_srt+152;
 },
 _ccpdE() //  [R1]
         { []
         }
     {offset
       ccpdE: // global
           I64[Sp] = block_ccpdG_info;
           R4 = lvl_rcom0_closure+3;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpdE_info" {
     block_ccpdE_info:
         const _ccpdE;
         const 4;
         const 4294967326;
         const Scotk_srt+152;
 },
 _ccpdG() //  [R1]
         { []
         }
     {offset
       ccpdG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccpeg; else goto ccpef;
       ccpeg: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpef: // global
           I64[Hp - 32] = sat_scoqf_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = sat_scoq6_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_ccpe5_info;
           R2 = Hp - 30;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpdG_info" {
     block_ccpdG_info:
         const _ccpdG;
         const 132;
         const 4294967326;
         const Scotk_srt+152;
 },
 _ccpe5() //  [R1]
         { []
         }
     {offset
       ccpe5: // global
           I64[Sp + 16] = block_ccpe7_info;
           _scoqi::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 24] = _scoqi::P64;
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpe5_info" {
     block_ccpe5_info:
         const _ccpe5;
         const 388;
         const 4294967326;
         const Scotk_srt+152;
 },
 _ccpe7() //  [R1]
         { []
         }
     {offset
       ccpe7: // global
           I64[Sp] = block_ccpe9_info;
           R4 = lvl_rcom0_closure+3;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpe7_info" {
     block_ccpe7_info:
         const _ccpe7;
         const 2;
         const 4294967326;
         const Scotk_srt+152;
 },
 _ccpe9() //  []
         { []
         }
     {offset
       ccpe9: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpe9_info" {
     block_ccpe9_info:
         const _ccpe9;
         const 130;
         const 30;
 },
 sat_scoqI_entry() //  [R1, R2]
         { []
         }
     {offset
       ccpeF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccpeG; else goto ccpeH;
       ccpeG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpeH: // global
           I64[Sp - 24] = block_ccpeB_info;
           _scops::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 16] = _scops::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scoqI_info" {
     sat_scoqI_info:
         const sat_scoqI_entry;
         const 2;
         const 4294967307;
         const 8589934597;
         const Scotk_srt+152;
 },
 _ccpeB() //  [R1]
         { []
         }
     {offset
       ccpeB: // global
           _scops::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccpeD_info;
           R4 = lvl_rcom0_closure+3;
           R3 = _scops::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpeB_info" {
     block_ccpeB_info:
         const _ccpeB;
         const 2;
         const 4294967326;
         const Scotk_srt+152;
 },
 _ccpeD() //  []
         { []
         }
     {offset
       ccpeD: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpeD_info" {
     block_ccpeD_info:
         const _ccpeD;
         const 1;
         const 30;
 },
 sat_scoqz_entry() //  [R1]
         { []
         }
     {offset
       ccpeP: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scoqz_info" {
     sat_scoqz_info:
         const sat_scoqz_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 System.Environment.withArgs2_entry() //  [R2, R3]
         { []
         }
     {offset
       ccpeW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccpeX; else goto ccpeY;
       ccpeX: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.withArgs2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccpeY: // global
           I64[Sp - 24] = block_ccpcP_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call System.Environment.getProgName1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.withArgs2_info" {
     System.Environment.withArgs2_info:
         const System.Environment.withArgs2_entry;
         const 0;
         const 65974992633870;
         const 12884901903;
         const Scotk_srt+56;
 },
 _ccpcP() //  [R1]
         { []
         }
     {offset
       ccpcP: // global
           I64[Sp - 8] = block_ccpcR_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call System.Environment.getArgs1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpcP_info" {
     block_ccpcP_info:
         const _ccpcP;
         const 2;
         const 26392574033950;
         const Scotk_srt+56;
 },
 _ccpcR() //  [R1]
         { []
         }
     {offset
       ccpcR: // global
           I64[Sp - 8] = block_ccpcT_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpcR_info" {
     block_ccpcR_info:
         const _ccpcR;
         const 3;
         const 17596481011742;
         const Scotk_srt+56;
 },
 _ccpcT() //  [R1]
         { []
         }
     {offset
       ccpcT: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccpf3; else goto ccpf2;
       ccpf3: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccpf2: // global
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           _ccpcV::P64 = Hp - 46;
           if (R1 == 0) goto ccpeU; else goto ucpfw;
       ccpeU: // global
           I64[Hp - 24] = sat_scoqp_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _ccpcV::P64;
           R1 = Hp - 23;
           Sp = Sp + 40;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       ucpfw: // global
           if (R1 == 1) goto ccpeV; else goto ccpeT;
       ccpeV: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_ccpen_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           P64[Sp + 16] = _ccpcV::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucpfy; else goto ccpeo;
       ucpfy: // global
           call _ccpen(R1) args: 0, res: 0, upd: 0;
       ccpeo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccpeT: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_ccpcY_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           P64[Sp + 16] = _ccpcV::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucpfx; else goto ccpcZ;
       ucpfx: // global
           call _ccpcY(R1) args: 0, res: 0, upd: 0;
       ccpcZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpcT_info" {
     block_ccpcT_info:
         const _ccpcT;
         const 4;
         const 17596481011742;
         const Scotk_srt+56;
 },
 _ccpen() //  [R1]
         { []
         }
     {offset
       ccpen: // global
           I64[Sp - 8] = block_ccpes_info;
           _scoqr::P64 = P64[R1 + 7];
           R1 = _scoqr::P64;
           P64[Sp] = _scoqr::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpen_info" {
     block_ccpen_info:
         const _ccpen;
         const 3;
         const 4294967326;
         const Scotk_srt+152;
 },
 _ccpes() //  [R1]
         { []
         }
     {offset
       ccpes: // global
           I64[Sp] = block_ccpeu_info;
           R4 = lvl_rcom0_closure+3;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpes_info" {
     block_ccpes_info:
         const _ccpes;
         const 4;
         const 4294967326;
         const Scotk_srt+152;
 },
 _ccpeu() //  [R1]
         { []
         }
     {offset
       ccpeu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccpfr; else goto ccpfq;
       ccpfr: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpfq: // global
           I64[Hp - 32] = sat_scoqI_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = sat_scoqz_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_ccpfi_info;
           R2 = Hp - 30;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpeu_info" {
     block_ccpeu_info:
         const _ccpeu;
         const 260;
         const 4294967326;
         const Scotk_srt+152;
 },
 _ccpfi() //  [R1]
         { []
         }
     {offset
       ccpfi: // global
           _scoqr::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccpfk_info;
           _scoqL::P64 = R1;
           R1 = _scoqr::P64;
           P64[Sp + 32] = _scoqL::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpfi_info" {
     block_ccpfi_info:
         const _ccpfi;
         const 772;
         const 4294967326;
         const Scotk_srt+152;
 },
 _ccpfk() //  [R1]
         { []
         }
     {offset
       ccpfk: // global
           I64[Sp + 16] = block_ccpfm_info;
           R4 = lvl_rcom0_closure+3;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpfk_info" {
     block_ccpfk_info:
         const _ccpfk;
         const 131;
         const 4294967326;
         const Scotk_srt+152;
 },
 _ccpfm() //  []
         { []
         }
     {offset
       ccpfm: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpfm_info" {
     block_ccpfm_info:
         const _ccpfm;
         const 1;
         const 30;
 },
 _ccpcY() //  [R1]
         { []
         }
     {offset
       ccpcY: // global
           I64[Sp - 8] = block_ccpd3_info;
           _scopv::P64 = P64[R1 + 7];
           R1 = _scopv::P64;
           P64[Sp] = _scopv::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpcY_info" {
     block_ccpcY_info:
         const _ccpcY;
         const 3;
         const 4294967326;
         const Scotk_srt+152;
 },
 _ccpd3() //  [R1]
         { []
         }
     {offset
       ccpd3: // global
           I64[Sp] = block_ccpd5_info;
           R4 = lvl_rcom0_closure+3;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpd3_info" {
     block_ccpd3_info:
         const _ccpd3;
         const 4;
         const 4294967326;
         const Scotk_srt+152;
 },
 _ccpd5() //  [R1]
         { []
         }
     {offset
       ccpd5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccpfd; else goto ccpfc;
       ccpfd: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpfc: // global
           I64[Hp - 32] = sat_scopM_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = sat_scopD_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_ccpf4_info;
           R2 = Hp - 30;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpd5_info" {
     block_ccpd5_info:
         const _ccpd5;
         const 260;
         const 4294967326;
         const Scotk_srt+152;
 },
 _ccpf4() //  [R1]
         { []
         }
     {offset
       ccpf4: // global
           _scopv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccpf6_info;
           _scopP::P64 = R1;
           R1 = _scopv::P64;
           P64[Sp + 32] = _scopP::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpf4_info" {
     block_ccpf4_info:
         const _ccpf4;
         const 772;
         const 4294967326;
         const Scotk_srt+152;
 },
 _ccpf6() //  [R1]
         { []
         }
     {offset
       ccpf6: // global
           I64[Sp + 16] = block_ccpf8_info;
           R4 = lvl_rcom0_closure+3;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpf6_info" {
     block_ccpf6_info:
         const _ccpf6;
         const 131;
         const 4294967326;
         const Scotk_srt+152;
 },
 _ccpf8() //  []
         { []
         }
     {offset
       ccpf8: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpf8_info" {
     block_ccpf8_info:
         const _ccpf8;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.232292701 UTC

[section ""data" . System.Environment.withArgs1_closure" {
     System.Environment.withArgs1_closure:
         const System.Environment.withArgs1_info;
         const 0;
 },
 System.Environment.withArgs1_entry() //  [R2, R3]
         { []
         }
     {offset
       ccphM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccphN; else goto ccphO;
       ccphN: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.withArgs1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccphO: // global
           I64[Sp - 24] = block_ccphJ_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call System.Environment.getProgName1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.withArgs1_info" {
     System.Environment.withArgs1_info:
         const System.Environment.withArgs1_entry;
         const 0;
         const 107374182414;
         const 12884901903;
         const Scotk_srt+136;
 },
 _ccphJ() //  [R1]
         { []
         }
     {offset
       ccphJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccphR; else goto ccphQ;
       ccphR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccphQ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = Hp - 14;
           Sp = Sp + 24;
           call System.Environment.withArgs2_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccphJ_info" {
     block_ccphJ_info:
         const _ccphJ;
         const 2;
         const 4294967326;
         const Scotk_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.237831815 UTC

[section ""data" . System.Environment.withArgs_closure" {
     System.Environment.withArgs_closure:
         const System.Environment.withArgs_info;
         const 0;
 },
 System.Environment.withArgs_entry() //  [R2, R3]
         { []
         }
     {offset
       ccpi5: // global
           R3 = R3;
           R2 = R2;
           call System.Environment.withArgs1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.withArgs_info" {
     System.Environment.withArgs_info:
         const System.Environment.withArgs_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const Scotk_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.241849309 UTC

[section ""data" . System.Environment.withProgName1_closure" {
     System.Environment.withProgName1_closure:
         const System.Environment.withProgName1_info;
         const 0;
 },
 System.Environment.withProgName1_entry() //  [R2, R3]
         { []
         }
     {offset
       ccpij: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccpik; else goto ccpil;
       ccpik: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.withProgName1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccpil: // global
           I64[Sp - 24] = block_ccpig_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call System.Environment.getArgs1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.withProgName1_info" {
     System.Environment.withProgName1_info:
         const System.Environment.withProgName1_entry;
         const 0;
         const 90194313230;
         const 12884901903;
         const Scotk_srt+144;
 },
 _ccpig() //  [R1]
         { []
         }
     {offset
       ccpig: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccpio; else goto ccpin;
       ccpio: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpin: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R3 = P64[Sp + 16];
           R2 = Hp - 14;
           Sp = Sp + 24;
           call System.Environment.withArgs2_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpig_info" {
     block_ccpig_info:
         const _ccpig;
         const 2;
         const 4294967326;
         const Scotk_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.247323758 UTC

[section ""data" . System.Environment.withProgName_closure" {
     System.Environment.withProgName_closure:
         const System.Environment.withProgName_info;
         const 0;
 },
 System.Environment.withProgName_entry() //  [R2, R3]
         { []
         }
     {offset
       ccpiC: // global
           R3 = R3;
           R2 = R2;
           call System.Environment.withProgName1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.withProgName_info" {
     System.Environment.withProgName_info:
         const System.Environment.withProgName_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const Scotk_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.251966701 UTC

[section ""data" . System.Environment.getEnvironment3_closure" {
     System.Environment.getEnvironment3_closure:
         const System.Environment.getEnvironment3_info;
 },
 System.Environment.getEnvironment3_entry() //  [R2]
         { []
         }
     {offset
       ccpiQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccpiR; else goto ccpiS;
       ccpiR: // global
           R2 = R2;
           R1 = System.Environment.getEnvironment3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpiS: // global
           I64[Sp - 8] = block_ccpiN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucpj0; else goto ccpiO;
       ucpj0: // global
           call _ccpiN(R1) args: 0, res: 0, upd: 0;
       ccpiO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getEnvironment3_info" {
     System.Environment.getEnvironment3_info:
         const System.Environment.getEnvironment3_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccpiN() //  [R1]
         { []
         }
     {offset
       ccpiN: // global
           if (I64[R1 + 7] == 61) goto ccpiZ; else goto ccpiY;
       ccpiZ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccpiY: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpiN_info" {
     block_ccpiN_info:
         const _ccpiN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.25837581 UTC

[section ""data" . System.Environment.getEnvironment2_closure" {
     System.Environment.getEnvironment2_closure:
         const System.Environment.getEnvironment2_info;
 },
 System.Environment.getEnvironment2_entry() //  [R2]
         { []
         }
     {offset
       ccpjp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpjq; else goto ccpjr;
       ccpjq: // global
           R2 = R2;
           R1 = System.Environment.getEnvironment2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpjr: // global
           I64[Sp - 8] = block_ccpjg_info;
           R3 = R2;
           R2 = System.Environment.getEnvironment3_closure+1;
           Sp = Sp - 8;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getEnvironment2_info" {
     System.Environment.getEnvironment2_info:
         const System.Environment.getEnvironment2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccpjg() //  [R1, R2]
         { []
         }
     {offset
       ccpjg: // global
           I64[Sp - 8] = block_ccpji_info;
           _scorc::P64 = R1;
           R1 = R2;
           P64[Sp] = _scorc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucpjF; else goto ccpjj;
       ucpjF: // global
           call _ccpji(R1) args: 0, res: 0, upd: 0;
       ccpjj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpjg_info" {
     block_ccpjg_info:
         const _ccpjg;
         const 0;
         const 30;
 },
 _ccpji() //  [R1]
         { []
         }
     {offset
       ccpji: // global
           _scorc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccpjm; else goto ccpjn;
       ccpjm: // global
           Hp = Hp + 24;
           _score::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccpjE; else goto ccpjx;
       ccpjx: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _scorc::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccpjn: // global
           Hp = Hp + 24;
           _score::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccpjE; else goto ccpjD;
       ccpjE: // global
           HpAlloc = 24;
           R1 = _score::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpjD: // global
           _scorg::P64 = P64[_score::P64 + 14];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _scorc::P64;
           P64[Hp] = _scorg::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpji_info" {
     block_ccpji_info:
         const _ccpji;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.271078583 UTC

[section ""data" . System.Environment.getEnvironment1_closure" {
     System.Environment.getEnvironment1_closure:
         const System.Environment.getEnvironment1_info;
         const 0;
 },
 go_scorz_entry() //  [R1, R2]
         { []
         }
     {offset
       ccpkO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccpkP; else goto ccpkQ;
       ccpkP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpkQ: // global
           I64[Sp - 24] = block_ccpkH_info;
           _scorz::P64 = R1;
           _scors::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _scors::P64;
           P64[Sp - 8] = _scorz::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucpld; else goto ccpkI;
       ucpld: // global
           call _ccpkH(R1) args: 0, res: 0, upd: 0;
       ccpkI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_scorz_info" {
     go_scorz_info:
         const go_scorz_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const Scotk_srt+48;
 },
 _ccpkH() //  [R1]
         { []
         }
     {offset
       ccpkH: // global
           if (R1 & 7 == 1) goto ccpkL; else goto ccpkM;
       ccpkL: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccpkM: // global
           I64[Sp - 8] = block_ccpkW_info;
           _scorE::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scorE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucplc; else goto ccpkX;
       ucplc: // global
           call _ccpkW(R1) args: 0, res: 0, upd: 0;
       ccpkX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpkH_info" {
     block_ccpkH_info:
         const _ccpkH;
         const 2;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccpkW() //  [R1]
         { []
         }
     {offset
       ccpkW: // global
           I64[Sp] = block_ccpl1_info;
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 16];
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpkW_info" {
     block_ccpkW_info:
         const _ccpkW;
         const 3;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccpl1() //  [R1]
         { []
         }
     {offset
       ccpl1: // global
           I64[Sp + 16] = block_ccpl3_info;
           R2 = P64[Sp + 8];
           _scorJ::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _scorJ::P64;
           Sp = Sp + 16;
           call go_scorz_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpl1_info" {
     block_ccpl1_info:
         const _ccpl1;
         const 131;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccpl3() //  [R1]
         { []
         }
     {offset
       ccpl3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccplb; else goto ccpla;
       ccplb: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpla: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpl3_info" {
     block_ccpl3_info:
         const _ccpl3;
         const 1;
         const 30;
 },
 sat_scorR_entry() //  [R1]
         { []
         }
     {offset
       ccplk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpll; else goto ccplm;
       ccpll: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccplm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = System.Environment.getEnvironment2_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scorR_info" {
     sat_scorR_info:
         const sat_scorR_entry;
         const 1;
         const 16;
 },
 System.Environment.getEnvironment1_entry() //  []
         { []
         }
     {offset
       ccplq: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccplr; else goto ccpls;
       ccplr: // global
           R1 = System.Environment.getEnvironment1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccpls: // global
           (_scorl::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] __hscore_environ();
           if (_scorl::I64 == 0) goto ccplp; else goto ccplo;
       ccplp: // global
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccplo: // global
           I64[Sp - 16] = block_ccpk4_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           I64[Sp - 8] = _scorl::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucpmj; else goto ccpk5;
       ucpmj: // global
           call _ccpk4(R1) args: 0, res: 0, upd: 0;
       ccpk5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getEnvironment1_info" {
     System.Environment.getEnvironment1_info:
         const System.Environment.getEnvironment1_entry;
         const 0;
         const 562962838323214;
         const 4294967299;
         const Scotk_srt+48;
 },
 _ccpk4() //  [R1]
         { []
         }
     {offset
       ccpk4: // global
           I64[Sp] = block_ccpk9_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpk4_info" {
     block_ccpk4_info:
         const _ccpk4;
         const 65;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccpk9() //  [R1]
         { []
         }
     {offset
       ccpk9: // global
           _scorl::I64 = I64[Sp + 8];
           _scors::P64 = R1;
           _scose::I64 = 0;
           goto ccplU;
       ccplU: // global
           if (I64[_scorl::I64 + (_scose::I64 << 3)] == 0) goto ccpm1; else goto ccpm0;
       ccpm1: // global
           if (%MO_S_Gt_W64(_scose::I64, 0)) goto ccplP; else goto ccplQ;
       ccplP: // global
           I64[Sp - 16] = _scose::I64 - 1;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           P64[Sp] = _scors::P64;
           Sp = Sp - 24;
           call _ccpks() args: 0, res: 0, upd: 0;
       ccplQ: // global
           P64[Sp] = _scors::P64;
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           call _ccpkA() args: 0, res: 0, upd: 0;
       ccpm0: // global
           _scose::I64 = _scose::I64 + 1;
           goto ccplU;
     }
 },
 section ""relreadonly" . block_ccpk9_info" {
     block_ccpk9_info:
         const _ccpk9;
         const 65;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccpks() //  []
         { []
         }
     {offset
       ccpks: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccplK; else goto ccplJ;
       ccplK: // global
           HpAlloc = 40;
           I64[Sp] = block_ccpks_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       ccplJ: // global
           _scos3::P64 = P64[Sp + 16];
           _scos5::I64 = I64[Sp + 8];
           if (_scos5::I64 != 0) goto ccplM; else goto ccplN;
       ccplM: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[I64[Sp + 32] + (_scos5::I64 << 3)];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scos3::P64;
           I64[Sp + 8] = _scos5::I64 - 1;
           P64[Sp + 16] = Hp - 14;
           call _ccpks() args: 0, res: 0, upd: 0;
       ccplN: // global
           Hp = Hp - 40;
           P64[Sp + 16] = _scos3::P64;
           Sp = Sp + 16;
           call _ccplD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccpks_info" {
     block_ccpks_info:
         const _ccpks;
         const 580;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccplD() //  []
         { []
         }
     {offset
       ccplD: // global
           Hp = Hp + 40;
           _scorU::P64 = P64[Sp];
           if (Hp > HpLim) (likely: False) goto ccplH; else goto ccplG;
       ccplH: // global
           HpAlloc = 40;
           I64[Sp] = block_ccplC_info;
           R1 = _scorU::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccplG: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[I64[Sp + 16]];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scorU::P64;
           P64[Sp + 16] = Hp - 14;
           Sp = Sp + 8;
           call _ccpkA() args: 0, res: 0, upd: 0;
     }
 },
 _ccplC() //  [R1]
         { []
         }
     {offset
       ccplC: // global
           P64[Sp] = R1;
           call _ccplD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccplC_info" {
     block_ccplC_info:
         const _ccplC;
         const 130;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccpkA() //  []
         { []
         }
     {offset
       ccpkA: // global
           Hp = Hp + 16;
           _scory::P64 = P64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto ccply; else goto ccplx;
       ccply: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_ccpkz_info;
           R1 = _scory::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccplx: // global
           I64[Hp - 8] = go_scorz_info;
           P64[Hp] = P64[Sp];
           I64[Sp + 8] = block_ccple_info;
           R2 = _scory::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call go_scorz_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccpkz() //  [R1]
         { []
         }
     {offset
       ccpkz: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccpkA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccpkz_info" {
     block_ccpkz_info:
         const _ccpkz;
         const 130;
         const 4294967326;
         const Scotk_srt+48;
 },
 _ccple() //  [R1]
         { []
         }
     {offset
       ccple: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccplB; else goto ccplA;
       ccplB: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccplA: // global
           I64[Hp - 16] = sat_scorR_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccple_info" {
     block_ccple_info:
         const _ccple;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.298362959 UTC

[section ""data" . System.Environment.getEnvironment_closure" {
     System.Environment.getEnvironment_closure:
         const System.Environment.getEnvironment_info;
         const 0;
 },
 System.Environment.getEnvironment_entry() //  []
         { []
         }
     {offset
       ccpnw: // global
           call System.Environment.getEnvironment1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getEnvironment_info" {
     System.Environment.getEnvironment_info:
         const System.Environment.getEnvironment_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Scotk_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.30224973 UTC

[section ""data" . System.Environment.setEnv11_closure" {
     System.Environment.setEnv11_closure:
         const System.Environment.setEnv11_info;
 },
 System.Environment.setEnv11_entry() //  [R2]
         { []
         }
     {offset
       ccpnK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccpnL; else goto ccpnM;
       ccpnL: // global
           R2 = R2;
           R1 = System.Environment.setEnv11_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpnM: // global
           I64[Sp - 8] = block_ccpnH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucpnU; else goto ccpnI;
       ucpnU: // global
           call _ccpnH(R1) args: 0, res: 0, upd: 0;
       ccpnI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.setEnv11_info" {
     System.Environment.setEnv11_info:
         const System.Environment.setEnv11_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccpnH() //  [R1]
         { []
         }
     {offset
       ccpnH: // global
           if (I64[R1 + 7] == 0) goto ccpnT; else goto ccpnS;
       ccpnT: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccpnS: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpnH_info" {
     block_ccpnH_info:
         const _ccpnH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.307174888 UTC

[section ""cstring" . lvl5_rcom5_bytes" {
     lvl5_rcom5_bytes:
         I8[] [112,117,116,101,110,118]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.30983169 UTC

[section ""data" . lvl6_rcom6_closure" {
     lvl6_rcom6_closure:
         const lvl6_rcom6_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_rcom6_entry() //  [R1]
         { []
         }
     {offset
       ccpod: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpoe; else goto ccpof;
       ccpoe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccpof: // global
           (_ccpoa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccpoa::I64 == 0) goto ccpoc; else goto ccpob;
       ccpoc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccpob: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccpoa::I64;
           R2 = lvl5_rcom5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_rcom6_info" {
     lvl6_rcom6_info:
         const lvl6_rcom6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.313762546 UTC

[section ""data" . System.Environment.setEnv2_closure" {
     System.Environment.setEnv2_closure:
         const System.Environment.setEnv2_info;
         const 0;
 },
 System.Environment.setEnv2_entry() //  [R2]
         { []
         }
     {offset
       ccpot: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl6_rcom6_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.setEnv2_info" {
     System.Environment.setEnv2_info:
         const System.Environment.setEnv2_entry;
         const 0;
         const 72057598332895246;
         const 8589934596;
         const Scotk_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.31689668 UTC

[section ""cstring" . System.Environment.setEnv10_bytes" {
     System.Environment.setEnv10_bytes:
         I8[] [115,101,116,69,110,118]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.319246823 UTC

[section ""data" . System.Environment.setEnv9_closure" {
     System.Environment.setEnv9_closure:
         const System.Environment.setEnv9_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.setEnv9_entry() //  [R1]
         { []
         }
     {offset
       ccpoH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpoI; else goto ccpoJ;
       ccpoI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccpoJ: // global
           (_ccpoE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccpoE::I64 == 0) goto ccpoG; else goto ccpoF;
       ccpoG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccpoF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccpoE::I64;
           R2 = System.Environment.setEnv10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.Environment.setEnv9_info" {
     System.Environment.setEnv9_info:
         const System.Environment.setEnv9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.323448109 UTC

[section ""data" . System.Environment.setEnv8_closure" {
     System.Environment.setEnv8_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.InvalidArgument_closure+1;
         const System.Environment.setEnv9_closure;
         const GHC.Types.[]_closure+1;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.326464183 UTC

[section ""data" . System.Environment.setEnv7_closure" {
     System.Environment.setEnv7_closure:
         const System.Environment.setEnv7_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.setEnv7_entry() //  [R1]
         { []
         }
     {offset
       ccpoY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpoZ; else goto ccpp0;
       ccpoZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccpp0: // global
           (_ccpoV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccpoV::I64 == 0) goto ccpoX; else goto ccpoW;
       ccpoX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccpoW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccpoV::I64;
           R2 = System.Environment.setEnv8_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.Environment.setEnv7_info" {
     System.Environment.setEnv7_info:
         const System.Environment.setEnv7_entry;
         const 0;
         const 35188667056149;
         const Scotk_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.33020725 UTC

[section ""data" . System.Environment.setEnv6_closure" {
     System.Environment.setEnv6_closure:
         const GHC.Types.C#_con_info;
         const 61;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.331816167 UTC

[section ""cstring" . System.Environment.setEnv3_bytes" {
     System.Environment.setEnv3_bytes:
         I8[] [61]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.337803702 UTC

[section ""data" . System.Environment.setEnv1_closure" {
     System.Environment.setEnv1_closure:
         const System.Environment.setEnv1_info;
         const 0;
 },
 sat_scosL_entry() //  [R1]
         { []
         }
     {offset
       ccppH: // global
           R3 = P64[R1 + 16];
           R2 = System.Environment.setEnv3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scosL_info" {
     sat_scosL_info:
         const sat_scosL_entry;
         const 1;
         const 16;
 },
 sat_scosM_entry() //  [R1]
         { []
         }
     {offset
       ccppK: // global
           _scosM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccppL; else goto ccppM;
       ccppM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccppO; else goto ccppN;
       ccppO: // global
           HpAlloc = 24;
           goto ccppL;
       ccppL: // global
           R1 = _scosM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccppN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scosM::P64;
           _scosv::P64 = P64[_scosM::P64 + 16];
           _scosz::P64 = P64[_scosM::P64 + 24];
           I64[Hp - 16] = sat_scosL_info;
           P64[Hp] = _scosz::P64;
           R3 = Hp - 16;
           R2 = _scosv::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scosM_info" {
     sat_scosM_info:
         const sat_scosM_entry;
         const 2;
         const 18;
 },
 System.Environment.setEnv1_entry() //  [R2, R3]
         { []
         }
     {offset
       ccppT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccppU; else goto ccppV;
       ccppU: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.setEnv1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccppV: // global
           I64[Sp - 16] = block_ccppe_info;
           _scost::P64 = R3;
           R3 = R2;
           R2 = System.Environment.setEnv11_closure+1;
           P64[Sp - 8] = _scost::P64;
           Sp = Sp - 16;
           call GHC.List.takeWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.setEnv1_info" {
     System.Environment.setEnv1_info:
         const System.Environment.setEnv1_entry;
         const 0;
         const 1080864069482709006;
         const 12884901903;
         const Scotk_srt+16;
 },
 _ccppe() //  [R1]
         { []
         }
     {offset
       ccppe: // global
           if (R1 & 7 == 1) goto ucpqM; else goto ccppR;
       ucpqM: // global
           Sp = Sp + 16;
           call _ccpqI() args: 0, res: 0, upd: 0;
       ccppR: // global
           I64[Sp - 8] = block_ccppj_info;
           R4 = R1;
           R3 = System.Environment.setEnv6_closure+1;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccppe_info" {
     block_ccppe_info:
         const _ccppe;
         const 1;
         const 936748881406853150;
         const Scotk_srt+16;
 },
 _ccppj() //  [R1]
         { []
         }
     {offset
       ccppj: // global
           if (R1 & 7 == 1) goto ccpq1; else goto ucpqN;
       ccpq1: // global
           I64[Sp] = block_ccppn_info;
           R3 = P64[Sp + 16];
           R2 = System.Environment.setEnv11_closure+1;
           call GHC.List.takeWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
       ucpqN: // global
           Sp = Sp + 24;
           call _ccpqI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccppj_info" {
     block_ccppj_info:
         const _ccppj;
         const 2;
         const 936748881406853150;
         const Scotk_srt+16;
 },
 _ccppn() //  [R1]
         { []
         }
     {offset
       ccppn: // global
           if (R1 & 7 == 1) goto ccpq6; else goto ccpqd;
       ccpq6: // global
           I64[Sp] = block_ccpq3_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       ccpqd: // global
           I64[Sp] = block_ccpps_info;
           _scosz::P64 = R1;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           P64[Sp + 16] = _scosz::P64;
           if (R1 & 7 != 0) goto ucpqQ; else goto ccppt;
       ucpqQ: // global
           call _ccpps(R1) args: 0, res: 0, upd: 0;
       ccppt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccppn_info" {
     block_ccppn_info:
         const _ccppn;
         const 130;
         const 360288129103429662;
         const Scotk_srt+16;
 },
 _ccpq3() //  [R1]
         { []
         }
     {offset
       ccpq3: // global
           R4 = System.Environment.setEnv4_closure+2;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpq3_info" {
     block_ccpq3_info:
         const _ccpq3;
         const 130;
         const 4294967326;
         const Scotk_srt+16;
 },
 _ccpps() //  [R1]
         { []
         }
     {offset
       ccpps: // global
           I64[Sp] = block_ccppx_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpps_info" {
     block_ccpps_info:
         const _ccpps;
         const 2;
         const 21474836510;
         const Scotk_srt+208;
 },
 _ccppx() //  [R1]
         { []
         }
     {offset
       ccppx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccpqh; else goto ccpqg;
       ccpqh: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpqg: // global
           I64[Hp - 24] = sat_scosM_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_ccpq9_info;
           R3 = Hp - 24;
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.newCString1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccppx_info" {
     block_ccppx_info:
         const _ccppx;
         const 2;
         const 21474836510;
         const Scotk_srt+208;
 },
 _ccpq9() //  [R1]
         { []
         }
     {offset
       ccpq9: // global
           I64[Sp] = block_ccpqb_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ucpqR; else goto ccpqj;
       ucpqR: // global
           call _ccpqb(R1) args: 0, res: 0, upd: 0;
       ccpqj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpq9_info" {
     block_ccpq9_info:
         const _ccpq9;
         const 0;
         const 4294967326;
         const Scotk_srt+224;
 },
 _ccpqb() //  [R1]
         { []
         }
     {offset
       ccpqb: // global
           (_scosV::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [‘signed’] putenv(I64[R1 + 7]);
           if (%MO_SS_Conv_W64_W32(_scosV::I64) == 0 :: W32) goto ccpqB; else goto ccpqv;
       ccpqB: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccpqv: // global
           (_scot0::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scot0::I64;
           Sp = Sp + 8;
           call System.Environment.setEnv2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpqb_info" {
     block_ccpqb_info:
         const _ccpqb;
         const 0;
         const 4294967326;
         const Scotk_srt+224;
 },
 _ccpqI() //  []
         { []
         }
     {offset
       ccpqI: // global
           R1 = System.Environment.setEnv7_closure;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.359367803 UTC

[section ""data" . System.Environment.setEnv_closure" {
     System.Environment.setEnv_closure:
         const System.Environment.setEnv_info;
         const 0;
 },
 System.Environment.setEnv_entry() //  [R2, R3]
         { []
         }
     {offset
       ccprJ: // global
           R3 = R3;
           R2 = R2;
           call System.Environment.setEnv1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.setEnv_info" {
     System.Environment.setEnv_info:
         const System.Environment.setEnv_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const Scotk_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:17.363052413 UTC

[section ""relreadonly" . Scotk_srt" {
     Scotk_srt:
         const Foreign.C.Error.$wlvl_closure;
         const loc1_rcolZ_closure;
         const System.Environment.setEnv4_closure;
         const System.Environment.setEnv5_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const System.Environment.unsetEnv1_closure;
         const GHC.Foreign.$wpeekCString_closure;
         const GHC.IO.Encoding.getFileSystemEncoding1_closure;
         const System.Environment.$wlvl_closure;
         const System.Environment.getEnv3_closure;
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const System.Environment.lookupEnv1_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const lvl2_rcom2_closure;
         const lvl4_rcom4_closure;
         const System.Environment.getEnv2_closure;
         const System.Environment.getEnv1_closure;
         const System.Environment.getProgName1_closure;
         const System.Environment.getArgs1_closure;
         const GHC.Foreign.withCStringsLen1_closure;
         const System.Environment.withArgs2_closure;
         const System.Environment.withArgs1_closure;
         const System.Environment.withProgName1_closure;
         const System.Environment.getEnvironment1_closure;
         const lvl6_rcom6_closure;
         const System.Environment.setEnv8_closure;
         const GHC.Foreign.newCString1_closure;
         const System.Environment.setEnv1_closure;
         const System.Environment.setEnv2_closure;
         const System.Environment.setEnv7_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.648768996 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:18.649890564 UTC

[section ""cstring" . System.Environment.$trModule4_bytes" {
     System.Environment.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.651585001 UTC

[section ""data" . System.Environment.$trModule3_closure" {
     System.Environment.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.653373028 UTC

[section ""cstring" . System.Environment.$trModule2_bytes" {
     System.Environment.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,69,110,118,105,114,111,110,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.655104526 UTC

[section ""data" . System.Environment.$trModule1_closure" {
     System.Environment.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Environment.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.656924046 UTC

[section ""data" . System.Environment.$trModule_closure" {
     System.Environment.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Environment.$trModule3_closure+1;
         const System.Environment.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.658765832 UTC

[section ""cstring" . loc_rcolY_bytes" {
     loc_rcolY_bytes:
         I8[] [117,110,115,101,116,69,110,118]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.661204689 UTC

[section ""data" . loc1_rcolZ_closure" {
     loc1_rcolZ_closure:
         const loc1_rcolZ_info;
         const 0;
         const 0;
         const 0;
 },
 loc1_rcolZ_entry() //  [R1]
         { []
         }
     {offset
       ccpyX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpyY; else goto ccpyZ;
       ccpyY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccpyZ: // global
           (_ccpyU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccpyU::I64 == 0) goto ccpyW; else goto ccpyV;
       ccpyW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccpyV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccpyU::I64;
           R2 = loc_rcolY_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc1_rcolZ_info" {
     loc1_rcolZ_info:
         const loc1_rcolZ_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.665631407 UTC

[section ""data" . System.Environment.setEnv5_closure" {
     System.Environment.setEnv5_closure:
         const System.Environment.setEnv5_info;
         const 0;
 },
 System.Environment.setEnv5_entry() //  [R2]
         { []
         }
     {offset
       ccpze: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = loc1_rcolZ_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.setEnv5_info" {
     System.Environment.setEnv5_info:
         const System.Environment.setEnv5_entry;
         const 0;
         const 12884901902;
         const 8589934596;
         const Scpzh_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.669703373 UTC

[section ""data" . System.Environment.setEnv4_closure" {
     System.Environment.setEnv4_closure:
         const System.Environment.setEnv4_info;
         const 0;
 },
 System.Environment.setEnv4_entry() //  [R2]
         { []
         }
     {offset
       ccpzt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccpzu; else goto ccpzv;
       ccpzu: // global
           R2 = R2;
           R1 = System.Environment.setEnv4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpzv: // global
           I64[Sp - 8] = block_ccpzq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucpzR; else goto ccpzr;
       ucpzR: // global
           call _ccpzq(R1) args: 0, res: 0, upd: 0;
       ccpzr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.setEnv4_info" {
     System.Environment.setEnv4_info:
         const System.Environment.setEnv4_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const Scpzh_srt+16;
 },
 _ccpzq() //  [R1]
         { []
         }
     {offset
       ccpzq: // global
           (_scps1::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [‘signed’] __hsbase_unsetenv(I64[R1 + 7]);
           if (%MO_SS_Conv_W64_W32(_scps1::I64) == 0 :: W32) goto ccpzM; else goto ccpzG;
       ccpzM: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccpzG: // global
           (_scps6::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scps6::I64;
           Sp = Sp + 8;
           call System.Environment.setEnv5_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpzq_info" {
     block_ccpzq_info:
         const _ccpzq;
         const 0;
         const 4294967326;
         const Scpzh_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.679450622 UTC

[section ""data" . System.Environment.unsetEnv1_closure" {
     System.Environment.unsetEnv1_closure:
         const System.Environment.unsetEnv1_info;
         const 0;
 },
 System.Environment.unsetEnv1_entry() //  [R2]
         { []
         }
     {offset
       ccpAa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpAb; else goto ccpAc;
       ccpAb: // global
           R2 = R2;
           R1 = System.Environment.unsetEnv1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpAc: // global
           I64[Sp - 16] = block_ccpA8_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.unsetEnv1_info" {
     System.Environment.unsetEnv1_info:
         const System.Environment.unsetEnv1_entry;
         const 0;
         const 55834574862;
         const 8589934597;
         const Scpzh_srt+16;
 },
 _ccpA8() //  [R1]
         { []
         }
     {offset
       ccpA8: // global
           R4 = System.Environment.setEnv4_closure+2;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpA8_info" {
     block_ccpA8_info:
         const _ccpA8;
         const 1;
         const 4294967326;
         const Scpzh_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.68457979 UTC

[section ""data" . System.Environment.unsetEnv_closure" {
     System.Environment.unsetEnv_closure:
         const System.Environment.unsetEnv_info;
         const 0;
 },
 System.Environment.unsetEnv_entry() //  [R2]
         { []
         }
     {offset
       ccpAr: // global
           R2 = R2;
           call System.Environment.unsetEnv1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.unsetEnv_info" {
     System.Environment.unsetEnv_info:
         const System.Environment.unsetEnv_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Scpzh_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.688753986 UTC

[section ""data" . lvl_rcom0_closure" {
     lvl_rcom0_closure:
         const lvl_rcom0_info;
 },
 lvl_rcom0_entry() //  [R2, R3]
         { []
         }
     {offset
       ccpAF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpAJ; else goto ccpAK;
       ccpAJ: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl_rcom0_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccpAK: // global
           I64[Sp - 16] = block_ccpAC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucpAY; else goto ccpAD;
       ucpAY: // global
           call _ccpAC(R1) args: 0, res: 0, upd: 0;
       ccpAD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl_rcom0_info" {
     lvl_rcom0_info:
         const lvl_rcom0_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _ccpAC() //  [R1]
         { []
         }
     {offset
       ccpAC: // global
           I64[Sp] = block_ccpAI_info;
           _scpsh::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _scpsh::I64;
           if (R1 & 7 != 0) goto ucpAX; else goto ccpAM;
       ucpAX: // global
           call _ccpAI(R1) args: 0, res: 0, upd: 0;
       ccpAM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpAC_info" {
     block_ccpAC_info:
         const _ccpAC;
         const 1;
         const 30;
 },
 _ccpAI() //  [R1]
         { []
         }
     {offset
       ccpAI: // global
           call "ccall" arg hints:  [‘signed’,
                                     PtrHint]  result hints:  [] setProgArgv(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])), I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpAI_info" {
     block_ccpAI_info:
         const _ccpAI;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.696800112 UTC

[section ""data" . System.Environment.$wlvl_closure" {
     System.Environment.$wlvl_closure:
         const System.Environment.$wlvl_info;
         const 0;
 },
 System.Environment.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       ccpBs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpBt; else goto ccpBu;
       ccpBt: // global
           R2 = R2;
           R1 = System.Environment.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpBu: // global
           (_scpst::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] getenv(R2);
           if (_scpst::I64 == 0) goto ccpBr; else goto ccpBq;
       ccpBr: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccpBq: // global
           I64[Sp - 16] = block_ccpBw_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           I64[Sp - 8] = _scpst::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucpBL; else goto ccpBx;
       ucpBL: // global
           call _ccpBw(R1) args: 0, res: 0, upd: 0;
       ccpBx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.$wlvl_info" {
     System.Environment.$wlvl_info:
         const System.Environment.$wlvl_entry;
         const 0;
         const 30064771086;
         const 8589934596;
         const Scpzh_srt+48;
 },
 _ccpBw() //  [R1]
         { []
         }
     {offset
       ccpBw: // global
           I64[Sp] = block_ccpBB_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpBw_info" {
     block_ccpBw_info:
         const _ccpBw;
         const 65;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpBB() //  [R1]
         { []
         }
     {offset
       ccpBB: // global
           _scpst::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_ccpBD_info;
           R3 = _scpst::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpBB_info" {
     block_ccpBB_info:
         const _ccpBB;
         const 65;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpBD() //  [R1]
         { []
         }
     {offset
       ccpBD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccpBK; else goto ccpBJ;
       ccpBK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpBJ: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpBD_info" {
     block_ccpBD_info:
         const _ccpBD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.705704801 UTC

[section ""data" . System.Environment.getEnv3_closure" {
     System.Environment.getEnv3_closure:
         const System.Environment.getEnv3_info;
         const 0;
 },
 System.Environment.getEnv3_entry() //  [R2]
         { []
         }
     {offset
       ccpCf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccpCg; else goto ccpCh;
       ccpCg: // global
           R2 = R2;
           R1 = System.Environment.getEnv3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpCh: // global
           I64[Sp - 8] = block_ccpCc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucpCl; else goto ccpCd;
       ucpCl: // global
           call _ccpCc(R1) args: 0, res: 0, upd: 0;
       ccpCd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getEnv3_info" {
     System.Environment.getEnv3_info:
         const System.Environment.getEnv3_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const Scpzh_srt+64;
 },
 _ccpCc() //  [R1]
         { []
         }
     {offset
       ccpCc: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call System.Environment.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpCc_info" {
     block_ccpCc_info:
         const _ccpCc;
         const 0;
         const 4294967326;
         const Scpzh_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.711112544 UTC

[section ""data" . System.Environment.lookupEnv1_closure" {
     System.Environment.lookupEnv1_closure:
         const System.Environment.lookupEnv1_info;
         const 0;
 },
 System.Environment.lookupEnv1_entry() //  [R2]
         { []
         }
     {offset
       ccpCC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpCD; else goto ccpCE;
       ccpCD: // global
           R2 = R2;
           R1 = System.Environment.lookupEnv1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpCE: // global
           I64[Sp - 16] = block_ccpCA_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.lookupEnv1_info" {
     System.Environment.lookupEnv1_info:
         const System.Environment.lookupEnv1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const Scpzh_srt+72;
 },
 _ccpCA() //  [R1]
         { []
         }
     {offset
       ccpCA: // global
           R4 = System.Environment.getEnv3_closure+2;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpCA_info" {
     block_ccpCA_info:
         const _ccpCA;
         const 1;
         const 4294967326;
         const Scpzh_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.717377649 UTC

[section ""data" . System.Environment.lookupEnv_closure" {
     System.Environment.lookupEnv_closure:
         const System.Environment.lookupEnv_info;
         const 0;
 },
 System.Environment.lookupEnv_entry() //  [R2]
         { []
         }
     {offset
       ccpCT: // global
           R2 = R2;
           call System.Environment.lookupEnv1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.lookupEnv_info" {
     System.Environment.lookupEnv_info:
         const System.Environment.lookupEnv_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Scpzh_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.720376754 UTC

[section ""cstring" . lvl1_rcom1_bytes" {
     lvl1_rcom1_bytes:
         I8[] [103,101,116,69,110,118]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.722643658 UTC

[section ""data" . lvl2_rcom2_closure" {
     lvl2_rcom2_closure:
         const lvl2_rcom2_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_rcom2_entry() //  [R1]
         { []
         }
     {offset
       ccpD7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpD8; else goto ccpD9;
       ccpD8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccpD9: // global
           (_ccpD4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccpD4::I64 == 0) goto ccpD6; else goto ccpD5;
       ccpD6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccpD5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccpD4::I64;
           R2 = lvl1_rcom1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_rcom2_info" {
     lvl2_rcom2_info:
         const lvl2_rcom2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.726531483 UTC

[section ""cstring" . lvl3_rcom3_bytes" {
     lvl3_rcom3_bytes:
         I8[] [110,111,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.728747937 UTC

[section ""data" . lvl4_rcom4_closure" {
     lvl4_rcom4_closure:
         const lvl4_rcom4_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_rcom4_entry() //  [R1]
         { []
         }
     {offset
       ccpDp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpDq; else goto ccpDr;
       ccpDq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccpDr: // global
           (_ccpDm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccpDm::I64 == 0) goto ccpDo; else goto ccpDn;
       ccpDo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccpDn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccpDm::I64;
           R2 = lvl3_rcom3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_rcom4_info" {
     lvl4_rcom4_info:
         const lvl4_rcom4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.733418824 UTC

[section ""data" . System.Environment.getEnv2_closure" {
     System.Environment.getEnv2_closure:
         const System.Environment.getEnv2_info;
         const 0;
 },
 sat_scpsS_entry() //  [R1]
         { []
         }
     {offset
       ccpDK: // global
           _scpsS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccpDL; else goto ccpDM;
       ccpDM: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccpDO; else goto ccpDN;
       ccpDO: // global
           HpAlloc = 72;
           goto ccpDL;
       ccpDL: // global
           R1 = _scpsS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccpDN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scpsS::P64;
           _scpsP::P64 = P64[_scpsS::P64 + 16];
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _scpsP::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = GHC.IO.Exception.NoSuchThing_closure+1;
           P64[Hp - 24] = lvl2_rcom2_closure;
           P64[Hp - 16] = lvl4_rcom4_closure;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = Hp - 62;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scpsS_info" {
     sat_scpsS_info:
         const sat_scpsS_entry;
         const 1;
         const 30064771088;
         const Scpzh_srt+96;
 },
 System.Environment.getEnv2_entry() //  [R2]
         { []
         }
     {offset
       ccpDP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccpDT; else goto ccpDS;
       ccpDT: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = System.Environment.getEnv2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpDS: // global
           I64[Hp - 16] = sat_scpsS_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getEnv2_info" {
     System.Environment.getEnv2_info:
         const System.Environment.getEnv2_entry;
         const 0;
         const 64424509454;
         const 8589934597;
         const Scpzh_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.740459104 UTC

[section ""data" . System.Environment.getEnv1_closure" {
     System.Environment.getEnv1_closure:
         const System.Environment.getEnv1_info;
         const 0;
 },
 System.Environment.getEnv1_entry() //  [R2]
         { []
         }
     {offset
       ccpEu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpEv; else goto ccpEw;
       ccpEv: // global
           R2 = R2;
           R1 = System.Environment.getEnv1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpEw: // global
           I64[Sp - 16] = block_ccpEj_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getEnv1_info" {
     System.Environment.getEnv1_info:
         const System.Environment.getEnv1_entry;
         const 0;
         const 837518622734;
         const 8589934597;
         const Scpzh_srt+72;
 },
 _ccpEj() //  [R1]
         { []
         }
     {offset
       ccpEj: // global
           I64[Sp] = block_ccpEl_info;
           R4 = System.Environment.getEnv3_closure+2;
           R3 = P64[Sp + 8];
           R2 = R1;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpEj_info" {
     block_ccpEj_info:
         const _ccpEj;
         const 1;
         const 279172874270;
         const Scpzh_srt+72;
 },
 _ccpEl() //  [R1]
         { []
         }
     {offset
       ccpEl: // global
           I64[Sp] = block_ccpEn_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ucpEF; else goto ccpEo;
       ucpEF: // global
           call _ccpEn(R1) args: 0, res: 0, upd: 0;
       ccpEo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpEl_info" {
     block_ccpEl_info:
         const _ccpEl;
         const 1;
         const 4294967326;
         const Scpzh_srt+120;
 },
 _ccpEn() //  [R1]
         { []
         }
     {offset
       ccpEn: // global
           if (R1 & 7 == 1) goto ccpEr; else goto ccpEs;
       ccpEr: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call System.Environment.getEnv2_entry(R2) args: 8, res: 0, upd: 8;
       ccpEs: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpEn_info" {
     block_ccpEn_info:
         const _ccpEn;
         const 1;
         const 4294967326;
         const Scpzh_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.749042263 UTC

[section ""data" . System.Environment.getEnv_closure" {
     System.Environment.getEnv_closure:
         const System.Environment.getEnv_info;
         const 0;
 },
 System.Environment.getEnv_entry() //  [R2]
         { []
         }
     {offset
       ccpF5: // global
           R2 = R2;
           call System.Environment.getEnv1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getEnv_info" {
     System.Environment.getEnv_info:
         const System.Environment.getEnv_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Scpzh_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.753720707 UTC

[section ""data" . System.Environment.getProgName_go_closure" {
     System.Environment.getProgName_go_closure:
         const System.Environment.getProgName_go_info;
 },
 System.Environment.getProgName_go_entry() //  [R2, R3]
         { []
         }
     {offset
       ccpFn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccpFo; else goto ucpFG;
       ccpFo: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.getProgName_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ucpFG: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _ccpFd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . System.Environment.getProgName_go_info" {
     System.Environment.getProgName_go_info:
         const System.Environment.getProgName_go_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccpFd() //  []
         { []
         }
     {offset
       ccpFd: // global
           I64[Sp - 8] = block_ccpFg_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucpFJ; else goto ccpFh;
       ucpFJ: // global
           call _ccpFg(R1) args: 0, res: 0, upd: 0;
       ccpFh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccpFg() //  [R1]
         { []
         }
     {offset
       ccpFg: // global
           if (R1 & 7 == 1) goto ccpFk; else goto ccpFl;
       ccpFk: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccpFl: // global
           I64[Sp] = block_ccpFv_info;
           _scpt7::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _scpt7::P64;
           if (R1 & 7 != 0) goto ucpFK; else goto ccpFx;
       ucpFK: // global
           call _ccpFv(R1) args: 0, res: 0, upd: 0;
       ccpFx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpFg_info" {
     block_ccpFg_info:
         const _ccpFg;
         const 130;
         const 30;
 },
 _ccpFv() //  [R1]
         { []
         }
     {offset
       ccpFv: // global
           _scpt7::P64 = P64[Sp + 16];
           if (I64[R1 + 7] == 47) goto ccpFF; else goto ccpFE;
       ccpFF: // global
           P64[Sp + 8] = _scpt7::P64;
           P64[Sp + 16] = _scpt7::P64;
           Sp = Sp + 8;
           goto ucpFN;
       ccpFE: // global
           P64[Sp + 8] = P64[Sp + 8];
           P64[Sp + 16] = _scpt7::P64;
           Sp = Sp + 8;
           goto ucpFN;
       ucpFN: // global
           call _ccpFd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccpFv_info" {
     block_ccpFv_info:
         const _ccpFv;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.763157364 UTC

[section ""data" . System.Environment.getProgName1_closure" {
     System.Environment.getProgName1_closure:
         const System.Environment.getProgName1_info;
         const 0;
 },
 sat_scptK_entry() //  [R1]
         { []
         }
     {offset
       ccpGG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpGH; else goto ccpGI;
       ccpGH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccpGI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _scptH::P64 = P64[R1 + 16];
           R3 = _scptH::P64;
           R2 = _scptH::P64;
           Sp = Sp - 16;
           call System.Environment.getProgName_go_entry(R3,
                                                        R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scptK_info" {
     sat_scptK_info:
         const sat_scptK_entry;
         const 1;
         const 16;
 },
 System.Environment.getProgName1_entry() //  []
         { []
         }
     {offset
       ccpGJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccpGK; else goto ccpGL;
       ccpGK: // global
           R1 = System.Environment.getProgName1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccpGL: // global
           I64[Sp - 8] = block_ccpGe_info;
           R2 = 4;
           R1 = 4;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getProgName1_info" {
     System.Environment.getProgName1_info:
         const System.Environment.getProgName1_entry;
         const 0;
         const 8808977924110;
         const 4294967299;
         const Scpzh_srt+48;
 },
 _ccpGe() //  [R1]
         { []
         }
     {offset
       ccpGe: // global
           I64[Sp - 8] = block_ccpGg_info;
           R2 = 8;
           _scpth::P64 = R1;
           R1 = 8;
           P64[Sp] = _scpth::P64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpGe_info" {
     block_ccpGe_info:
         const _ccpGe;
         const 0;
         const 12884901918;
         const Scpzh_srt+48;
 },
 _ccpGg() //  [R1]
         { []
         }
     {offset
       ccpGg: // global
           _scpto::I64 = R1 + 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] getProgArgv(P64[Sp + 8] + 16, _scpto::I64);
           _scptv::I64 = I64[_scpto::I64];
           I64[Sp - 16] = block_ccpGr_info;
           _scptn::P64 = R1;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           I64[Sp - 8] = _scptv::I64;
           P64[Sp] = _scptn::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucpGT; else goto ccpGs;
       ucpGT: // global
           call _ccpGr(R1) args: 0, res: 0, upd: 0;
       ccpGs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpGg_info" {
     block_ccpGg_info:
         const _ccpGg;
         const 1;
         const 12884901918;
         const Scpzh_srt+48;
 },
 _ccpGr() //  [R1]
         { []
         }
     {offset
       ccpGr: // global
           I64[Sp] = block_ccpGw_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpGr_info" {
     block_ccpGr_info:
         const _ccpGr;
         const 67;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpGw() //  [R1]
         { []
         }
     {offset
       ccpGw: // global
           _scptE::I64 = I64[I64[Sp + 8]];
           I64[Sp + 8] = block_ccpGy_info;
           R3 = _scptE::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpGw_info" {
     block_ccpGw_info:
         const _ccpGw;
         const 67;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpGy() //  [R1]
         { []
         }
     {offset
       ccpGy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccpGS; else goto ccpGR;
       ccpGS: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpGR: // global
           _scpth::P64 = P64[Sp + 16];
           call MO_Touch(P64[Sp + 8]);
           call MO_Touch(_scpth::P64);
           I64[Hp - 16] = sat_scptK_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpGy_info" {
     block_ccpGy_info:
         const _ccpGy;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.776341073 UTC

[section ""data" . System.Environment.getProgName_closure" {
     System.Environment.getProgName_closure:
         const System.Environment.getProgName_info;
         const 0;
 },
 System.Environment.getProgName_entry() //  []
         { []
         }
     {offset
       ccpHy: // global
           call System.Environment.getProgName1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getProgName_info" {
     System.Environment.getProgName_info:
         const System.Environment.getProgName_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Scpzh_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.784693999 UTC

[section ""data" . System.Environment.getArgs1_closure" {
     System.Environment.getArgs1_closure:
         const System.Environment.getArgs1_info;
         const 0;
 },
 go_scpuj_entry() //  [R1, R2]
         { []
         }
     {offset
       ccpIH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccpII; else goto ccpIJ;
       ccpII: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpIJ: // global
           I64[Sp - 24] = block_ccpIA_info;
           _scpuj::P64 = R1;
           _scpue::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _scpue::P64;
           P64[Sp - 8] = _scpuj::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucpJ6; else goto ccpIB;
       ucpJ6: // global
           call _ccpIA(R1) args: 0, res: 0, upd: 0;
       ccpIB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_scpuj_info" {
     go_scpuj_info:
         const go_scpuj_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const Scpzh_srt+48;
 },
 _ccpIA() //  [R1]
         { []
         }
     {offset
       ccpIA: // global
           if (R1 & 7 == 1) goto ccpIE; else goto ccpIF;
       ccpIE: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccpIF: // global
           I64[Sp - 8] = block_ccpIP_info;
           _scpuo::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scpuo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucpJ5; else goto ccpIQ;
       ucpJ5: // global
           call _ccpIP(R1) args: 0, res: 0, upd: 0;
       ccpIQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpIA_info" {
     block_ccpIA_info:
         const _ccpIA;
         const 2;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpIP() //  [R1]
         { []
         }
     {offset
       ccpIP: // global
           I64[Sp] = block_ccpIU_info;
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 16];
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpIP_info" {
     block_ccpIP_info:
         const _ccpIP;
         const 3;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpIU() //  [R1]
         { []
         }
     {offset
       ccpIU: // global
           I64[Sp + 16] = block_ccpIW_info;
           R2 = P64[Sp + 8];
           _scput::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _scput::P64;
           Sp = Sp + 16;
           call go_scpuj_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpIU_info" {
     block_ccpIU_info:
         const _ccpIU;
         const 131;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpIW() //  [R1]
         { []
         }
     {offset
       ccpIW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccpJ4; else goto ccpJ3;
       ccpJ4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpJ3: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpIW_info" {
     block_ccpIW_info:
         const _ccpIW;
         const 1;
         const 30;
 },
 System.Environment.getArgs1_entry() //  []
         { []
         }
     {offset
       ccpJ7: // global
           if ((Sp + -56) < SpLim) (likely: False) goto ccpJ8; else goto ccpJ9;
       ccpJ8: // global
           R1 = System.Environment.getArgs1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccpJ9: // global
           I64[Sp - 8] = block_ccpHJ_info;
           R2 = 4;
           R1 = 4;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getArgs1_info" {
     System.Environment.getArgs1_info:
         const System.Environment.getArgs1_entry;
         const 0;
         const 17605070946318;
         const 4294967299;
         const Scpzh_srt+48;
 },
 _ccpHJ() //  [R1]
         { []
         }
     {offset
       ccpHJ: // global
           I64[Sp - 8] = block_ccpHL_info;
           R2 = 8;
           _scptR::P64 = R1;
           R1 = 8;
           P64[Sp] = _scptR::P64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpHJ_info" {
     block_ccpHJ_info:
         const _ccpHJ;
         const 0;
         const 12884901918;
         const Scpzh_srt+48;
 },
 _ccpHL() //  [R1]
         { []
         }
     {offset
       ccpHL: // global
           _scptY::I64 = P64[Sp + 8] + 16;
           _scptZ::I64 = R1 + 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] getProgArgv(_scptY::I64, _scptZ::I64);
           _scpu5::I64 = %MO_SS_Conv_W32_W64(I32[_scptY::I64]);
           _scpu8::I64 = I64[_scptZ::I64];
           I64[Sp - 24] = block_ccpHW_info;
           _scptX::P64 = R1;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           I64[Sp - 16] = _scpu5::I64;
           I64[Sp - 8] = _scpu8::I64;
           P64[Sp] = _scptX::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucpJL; else goto ccpHX;
       ucpJL: // global
           call _ccpHW(R1) args: 0, res: 0, upd: 0;
       ccpHX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpHL_info" {
     block_ccpHL_info:
         const _ccpHL;
         const 1;
         const 12884901918;
         const Scpzh_srt+48;
 },
 _ccpHW() //  [R1]
         { []
         }
     {offset
       ccpHW: // global
           I64[Sp] = block_ccpI1_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpHW_info" {
     block_ccpHW_info:
         const _ccpHW;
         const 196;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpI1() //  [R1]
         { []
         }
     {offset
       ccpI1: // global
           _scpuf::I64 = I64[Sp + 8] - 1;
           if (%MO_S_Gt_W64(_scpuf::I64, 0)) goto ccpJx; else goto ccpJy;
       ccpJx: // global
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           I64[Sp] = _scpuf::I64 - 1;
           I64[Sp + 8] = I64[Sp + 16] + 8;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call _ccpIl() args: 0, res: 0, upd: 0;
       ccpJy: // global
           P64[Sp + 16] = R1;
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call _ccpIt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccpI1_info" {
     block_ccpI1_info:
         const _ccpI1;
         const 196;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpIl() //  []
         { []
         }
     {offset
       ccpIl: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccpJs; else goto ccpJr;
       ccpJs: // global
           HpAlloc = 40;
           I64[Sp] = block_ccpIl_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       ccpJr: // global
           _scpuP::P64 = P64[Sp + 8];
           _scpuR::I64 = I64[Sp + 16];
           if (_scpuR::I64 != 0) goto ccpJu; else goto ccpJv;
       ccpJu: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[I64[Sp + 24] + (_scpuR::I64 << 3)];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scpuP::P64;
           I64[Sp + 16] = _scpuR::I64 - 1;
           P64[Sp + 8] = Hp - 14;
           call _ccpIl() args: 0, res: 0, upd: 0;
       ccpJv: // global
           Hp = Hp - 40;
           P64[Sp + 16] = _scpuP::P64;
           Sp = Sp + 16;
           call _ccpJl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccpIl_info" {
     block_ccpIl_info:
         const _ccpIl;
         const 390;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpJl() //  []
         { []
         }
     {offset
       ccpJl: // global
           Hp = Hp + 40;
           _scpuG::P64 = P64[Sp];
           if (Hp > HpLim) (likely: False) goto ccpJp; else goto ccpJo;
       ccpJp: // global
           HpAlloc = 40;
           I64[Sp] = block_ccpJk_info;
           R1 = _scpuG::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpJo: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[I64[Sp + 8]];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scpuG::P64;
           P64[Sp + 8] = Hp - 14;
           Sp = Sp + 8;
           call _ccpIt() args: 0, res: 0, upd: 0;
     }
 },
 _ccpJk() //  [R1]
         { []
         }
     {offset
       ccpJk: // global
           P64[Sp] = R1;
           call _ccpJl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccpJk_info" {
     block_ccpJk_info:
         const _ccpJk;
         const 68;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpIt() //  []
         { []
         }
     {offset
       ccpIt: // global
           Hp = Hp + 16;
           _scpui::P64 = P64[Sp];
           if (Hp > HpLim) (likely: False) goto ccpJh; else goto ccpJg;
       ccpJh: // global
           HpAlloc = 16;
           I64[Sp] = block_ccpIs_info;
           R1 = _scpui::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpJg: // global
           I64[Hp - 8] = go_scpuj_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_ccpJe_info;
           R2 = _scpui::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call go_scpuj_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccpIs() //  [R1]
         { []
         }
     {offset
       ccpIs: // global
           P64[Sp] = R1;
           call _ccpIt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccpIs_info" {
     block_ccpIs_info:
         const _ccpIs;
         const 3;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpJe() //  [R1]
         { []
         }
     {offset
       ccpJe: // global
           _scptR::P64 = P64[Sp + 16];
           call MO_Touch(P64[Sp + 8]);
           call MO_Touch(_scptR::P64);
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpJe_info" {
     block_ccpJe_info:
         const _ccpJe;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.811935101 UTC

[section ""data" . System.Environment.getArgs_closure" {
     System.Environment.getArgs_closure:
         const System.Environment.getArgs_info;
         const 0;
 },
 System.Environment.getArgs_entry() //  []
         { []
         }
     {offset
       ccpLw: // global
           call System.Environment.getArgs1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getArgs_info" {
     System.Environment.getArgs_info:
         const System.Environment.getArgs_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Scpzh_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.824392029 UTC

[section ""data" . System.Environment.withArgs2_closure" {
     System.Environment.withArgs2_closure:
         const System.Environment.withArgs2_info;
         const 0;
 },
 sat_scpvv_entry() //  [R1, R2]
         { []
         }
     {offset
       ccpM8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccpM9; else goto ccpMa;
       ccpM9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpMa: // global
           I64[Sp - 24] = block_ccpM4_info;
           _scpvb::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 16] = _scpvb::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scpvv_info" {
     sat_scpvv_info:
         const sat_scpvv_entry;
         const 2;
         const 4294967307;
         const 8589934597;
         const Scpzh_srt+152;
 },
 _ccpM4() //  [R1]
         { []
         }
     {offset
       ccpM4: // global
           _scpvb::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccpM6_info;
           R4 = lvl_rcom0_closure+3;
           R3 = _scpvb::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpM4_info" {
     block_ccpM4_info:
         const _ccpM4;
         const 2;
         const 4294967326;
         const Scpzh_srt+152;
 },
 _ccpM6() //  []
         { []
         }
     {offset
       ccpM6: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpM6_info" {
     block_ccpM6_info:
         const _ccpM6;
         const 1;
         const 30;
 },
 sat_scpvm_entry() //  [R1]
         { []
         }
     {offset
       ccpMi: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scpvm_info" {
     sat_scpvm_info:
         const sat_scpvm_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_scpvY_entry() //  [R1, R2]
         { []
         }
     {offset
       ccpMJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccpMK; else goto ccpML;
       ccpMK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpML: // global
           I64[Sp - 24] = block_ccpMF_info;
           _scpvb::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 16] = _scpvb::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scpvY_info" {
     sat_scpvY_info:
         const sat_scpvY_entry;
         const 2;
         const 4294967307;
         const 8589934597;
         const Scpzh_srt+152;
 },
 _ccpMF() //  [R1]
         { []
         }
     {offset
       ccpMF: // global
           _scpvb::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccpMH_info;
           R4 = lvl_rcom0_closure+3;
           R3 = _scpvb::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpMF_info" {
     block_ccpMF_info:
         const _ccpMF;
         const 2;
         const 4294967326;
         const Scpzh_srt+152;
 },
 _ccpMH() //  []
         { []
         }
     {offset
       ccpMH: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpMH_info" {
     block_ccpMH_info:
         const _ccpMH;
         const 1;
         const 30;
 },
 sat_scpvP_entry() //  [R1]
         { []
         }
     {offset
       ccpMT: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scpvP_info" {
     sat_scpvP_info:
         const sat_scpvP_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_scpw8_entry() //  [R1]
         { []
         }
     {offset
       ccpMW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccpN2; else goto ccpN3;
       ccpN2: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccpN3: // global
           I64[Sp - 32] = block_ccpMr_info;
           _scpuZ::P64 = P64[R1 + 7];
           _scpv0::P64 = P64[R1 + 15];
           _scpvb::P64 = P64[R1 + 23];
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           P64[Sp - 24] = _scpuZ::P64;
           P64[Sp - 16] = _scpv0::P64;
           P64[Sp - 8] = _scpvb::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucpNd; else goto ccpMs;
       ucpNd: // global
           call _ccpMr(R1) args: 0, res: 0, upd: 0;
       ccpMs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scpw8_info" {
     sat_scpw8_info:
         const sat_scpw8_entry;
         const 3;
         const 17596481011720;
         const 4294967299;
         const Scpzh_srt+56;
 },
 _ccpMr() //  [R1]
         { []
         }
     {offset
       ccpMr: // global
           I64[Sp - 8] = block_ccpMw_info;
           _scpvH::P64 = P64[R1 + 7];
           R1 = _scpvH::P64;
           P64[Sp] = _scpvH::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpMr_info" {
     block_ccpMr_info:
         const _ccpMr;
         const 3;
         const 4294967326;
         const Scpzh_srt+152;
 },
 _ccpMw() //  [R1]
         { []
         }
     {offset
       ccpMw: // global
           I64[Sp] = block_ccpMy_info;
           R4 = lvl_rcom0_closure+3;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpMw_info" {
     block_ccpMw_info:
         const _ccpMw;
         const 4;
         const 4294967326;
         const Scpzh_srt+152;
 },
 _ccpMy() //  [R1]
         { []
         }
     {offset
       ccpMy: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccpN8; else goto ccpN7;
       ccpN8: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpN7: // global
           I64[Hp - 32] = sat_scpvY_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = sat_scpvP_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_ccpMX_info;
           R2 = Hp - 30;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpMy_info" {
     block_ccpMy_info:
         const _ccpMy;
         const 132;
         const 4294967326;
         const Scpzh_srt+152;
 },
 _ccpMX() //  [R1]
         { []
         }
     {offset
       ccpMX: // global
           I64[Sp + 16] = block_ccpMZ_info;
           _scpw1::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 24] = _scpw1::P64;
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpMX_info" {
     block_ccpMX_info:
         const _ccpMX;
         const 388;
         const 4294967326;
         const Scpzh_srt+152;
 },
 _ccpMZ() //  [R1]
         { []
         }
     {offset
       ccpMZ: // global
           I64[Sp] = block_ccpN1_info;
           R4 = lvl_rcom0_closure+3;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpMZ_info" {
     block_ccpMZ_info:
         const _ccpMZ;
         const 2;
         const 4294967326;
         const Scpzh_srt+152;
 },
 _ccpN1() //  []
         { []
         }
     {offset
       ccpN1: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpN1_info" {
     block_ccpN1_info:
         const _ccpN1;
         const 130;
         const 30;
 },
 sat_scpwr_entry() //  [R1, R2]
         { []
         }
     {offset
       ccpNx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccpNy; else goto ccpNz;
       ccpNy: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpNz: // global
           I64[Sp - 24] = block_ccpNt_info;
           _scpvb::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 16] = _scpvb::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scpwr_info" {
     sat_scpwr_info:
         const sat_scpwr_entry;
         const 2;
         const 4294967307;
         const 8589934597;
         const Scpzh_srt+152;
 },
 _ccpNt() //  [R1]
         { []
         }
     {offset
       ccpNt: // global
           _scpvb::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccpNv_info;
           R4 = lvl_rcom0_closure+3;
           R3 = _scpvb::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpNt_info" {
     block_ccpNt_info:
         const _ccpNt;
         const 2;
         const 4294967326;
         const Scpzh_srt+152;
 },
 _ccpNv() //  []
         { []
         }
     {offset
       ccpNv: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpNv_info" {
     block_ccpNv_info:
         const _ccpNv;
         const 1;
         const 30;
 },
 sat_scpwi_entry() //  [R1]
         { []
         }
     {offset
       ccpNH: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scpwi_info" {
     sat_scpwi_info:
         const sat_scpwi_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 System.Environment.withArgs2_entry() //  [R2, R3]
         { []
         }
     {offset
       ccpNO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccpNP; else goto ccpNQ;
       ccpNP: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.withArgs2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccpNQ: // global
           I64[Sp - 24] = block_ccpLH_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call System.Environment.getProgName1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.withArgs2_info" {
     System.Environment.withArgs2_info:
         const System.Environment.withArgs2_entry;
         const 0;
         const 65974992633870;
         const 12884901903;
         const Scpzh_srt+56;
 },
 _ccpLH() //  [R1]
         { []
         }
     {offset
       ccpLH: // global
           I64[Sp - 8] = block_ccpLJ_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call System.Environment.getArgs1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpLH_info" {
     block_ccpLH_info:
         const _ccpLH;
         const 2;
         const 26392574033950;
         const Scpzh_srt+56;
 },
 _ccpLJ() //  [R1]
         { []
         }
     {offset
       ccpLJ: // global
           I64[Sp - 8] = block_ccpLL_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpLJ_info" {
     block_ccpLJ_info:
         const _ccpLJ;
         const 3;
         const 17596481011742;
         const Scpzh_srt+56;
 },
 _ccpLL() //  [R1]
         { []
         }
     {offset
       ccpLL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccpNV; else goto ccpNU;
       ccpNV: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccpNU: // global
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           _ccpLN::P64 = Hp - 46;
           if (R1 == 0) goto ccpNM; else goto ucpOo;
       ccpNM: // global
           I64[Hp - 24] = sat_scpw8_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _ccpLN::P64;
           R1 = Hp - 23;
           Sp = Sp + 40;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       ucpOo: // global
           if (R1 == 1) goto ccpNN; else goto ccpNL;
       ccpNN: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_ccpNf_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           P64[Sp + 16] = _ccpLN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucpOq; else goto ccpNg;
       ucpOq: // global
           call _ccpNf(R1) args: 0, res: 0, upd: 0;
       ccpNg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccpNL: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_ccpLQ_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           P64[Sp + 16] = _ccpLN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucpOp; else goto ccpLR;
       ucpOp: // global
           call _ccpLQ(R1) args: 0, res: 0, upd: 0;
       ccpLR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpLL_info" {
     block_ccpLL_info:
         const _ccpLL;
         const 4;
         const 17596481011742;
         const Scpzh_srt+56;
 },
 _ccpNf() //  [R1]
         { []
         }
     {offset
       ccpNf: // global
           I64[Sp - 8] = block_ccpNk_info;
           _scpwa::P64 = P64[R1 + 7];
           R1 = _scpwa::P64;
           P64[Sp] = _scpwa::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpNf_info" {
     block_ccpNf_info:
         const _ccpNf;
         const 3;
         const 4294967326;
         const Scpzh_srt+152;
 },
 _ccpNk() //  [R1]
         { []
         }
     {offset
       ccpNk: // global
           I64[Sp] = block_ccpNm_info;
           R4 = lvl_rcom0_closure+3;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpNk_info" {
     block_ccpNk_info:
         const _ccpNk;
         const 4;
         const 4294967326;
         const Scpzh_srt+152;
 },
 _ccpNm() //  [R1]
         { []
         }
     {offset
       ccpNm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccpOj; else goto ccpOi;
       ccpOj: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpOi: // global
           I64[Hp - 32] = sat_scpwr_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = sat_scpwi_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_ccpOa_info;
           R2 = Hp - 30;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpNm_info" {
     block_ccpNm_info:
         const _ccpNm;
         const 260;
         const 4294967326;
         const Scpzh_srt+152;
 },
 _ccpOa() //  [R1]
         { []
         }
     {offset
       ccpOa: // global
           _scpwa::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccpOc_info;
           _scpwu::P64 = R1;
           R1 = _scpwa::P64;
           P64[Sp + 32] = _scpwu::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpOa_info" {
     block_ccpOa_info:
         const _ccpOa;
         const 772;
         const 4294967326;
         const Scpzh_srt+152;
 },
 _ccpOc() //  [R1]
         { []
         }
     {offset
       ccpOc: // global
           I64[Sp + 16] = block_ccpOe_info;
           R4 = lvl_rcom0_closure+3;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpOc_info" {
     block_ccpOc_info:
         const _ccpOc;
         const 131;
         const 4294967326;
         const Scpzh_srt+152;
 },
 _ccpOe() //  []
         { []
         }
     {offset
       ccpOe: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpOe_info" {
     block_ccpOe_info:
         const _ccpOe;
         const 1;
         const 30;
 },
 _ccpLQ() //  [R1]
         { []
         }
     {offset
       ccpLQ: // global
           I64[Sp - 8] = block_ccpLV_info;
           _scpve::P64 = P64[R1 + 7];
           R1 = _scpve::P64;
           P64[Sp] = _scpve::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpLQ_info" {
     block_ccpLQ_info:
         const _ccpLQ;
         const 3;
         const 4294967326;
         const Scpzh_srt+152;
 },
 _ccpLV() //  [R1]
         { []
         }
     {offset
       ccpLV: // global
           I64[Sp] = block_ccpLX_info;
           R4 = lvl_rcom0_closure+3;
           R3 = P64[Sp + 24];
           R2 = R1;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpLV_info" {
     block_ccpLV_info:
         const _ccpLV;
         const 4;
         const 4294967326;
         const Scpzh_srt+152;
 },
 _ccpLX() //  [R1]
         { []
         }
     {offset
       ccpLX: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccpO5; else goto ccpO4;
       ccpO5: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpO4: // global
           I64[Hp - 32] = sat_scpvv_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = sat_scpvm_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_ccpNW_info;
           R2 = Hp - 30;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpLX_info" {
     block_ccpLX_info:
         const _ccpLX;
         const 260;
         const 4294967326;
         const Scpzh_srt+152;
 },
 _ccpNW() //  [R1]
         { []
         }
     {offset
       ccpNW: // global
           _scpve::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccpNY_info;
           _scpvy::P64 = R1;
           R1 = _scpve::P64;
           P64[Sp + 32] = _scpvy::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpNW_info" {
     block_ccpNW_info:
         const _ccpNW;
         const 772;
         const 4294967326;
         const Scpzh_srt+152;
 },
 _ccpNY() //  [R1]
         { []
         }
     {offset
       ccpNY: // global
           I64[Sp + 16] = block_ccpO0_info;
           R4 = lvl_rcom0_closure+3;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.withCStringsLen1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpNY_info" {
     block_ccpNY_info:
         const _ccpNY;
         const 131;
         const 4294967326;
         const Scpzh_srt+152;
 },
 _ccpO0() //  []
         { []
         }
     {offset
       ccpO0: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpO0_info" {
     block_ccpO0_info:
         const _ccpO0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.885396506 UTC

[section ""data" . System.Environment.withArgs1_closure" {
     System.Environment.withArgs1_closure:
         const System.Environment.withArgs1_info;
         const 0;
 },
 System.Environment.withArgs1_entry() //  [R2, R3]
         { []
         }
     {offset
       ccpRd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccpRe; else goto ccpRf;
       ccpRe: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.withArgs1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccpRf: // global
           I64[Sp - 24] = block_ccpRa_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call System.Environment.getProgName1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.withArgs1_info" {
     System.Environment.withArgs1_info:
         const System.Environment.withArgs1_entry;
         const 0;
         const 107374182414;
         const 12884901903;
         const Scpzh_srt+136;
 },
 _ccpRa() //  [R1]
         { []
         }
     {offset
       ccpRa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccpRi; else goto ccpRh;
       ccpRi: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpRh: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = Hp - 14;
           Sp = Sp + 24;
           call System.Environment.withArgs2_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpRa_info" {
     block_ccpRa_info:
         const _ccpRa;
         const 2;
         const 4294967326;
         const Scpzh_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.891153601 UTC

[section ""data" . System.Environment.withArgs_closure" {
     System.Environment.withArgs_closure:
         const System.Environment.withArgs_info;
         const 0;
 },
 System.Environment.withArgs_entry() //  [R2, R3]
         { []
         }
     {offset
       ccpRy: // global
           R3 = R3;
           R2 = R2;
           call System.Environment.withArgs1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.withArgs_info" {
     System.Environment.withArgs_info:
         const System.Environment.withArgs_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const Scpzh_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.895082479 UTC

[section ""data" . System.Environment.withProgName1_closure" {
     System.Environment.withProgName1_closure:
         const System.Environment.withProgName1_info;
         const 0;
 },
 System.Environment.withProgName1_entry() //  [R2, R3]
         { []
         }
     {offset
       ccpRM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccpRN; else goto ccpRO;
       ccpRN: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.withProgName1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccpRO: // global
           I64[Sp - 24] = block_ccpRJ_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call System.Environment.getArgs1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.withProgName1_info" {
     System.Environment.withProgName1_info:
         const System.Environment.withProgName1_entry;
         const 0;
         const 90194313230;
         const 12884901903;
         const Scpzh_srt+144;
 },
 _ccpRJ() //  [R1]
         { []
         }
     {offset
       ccpRJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccpRR; else goto ccpRQ;
       ccpRR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpRQ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R3 = P64[Sp + 16];
           R2 = Hp - 14;
           Sp = Sp + 24;
           call System.Environment.withArgs2_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpRJ_info" {
     block_ccpRJ_info:
         const _ccpRJ;
         const 2;
         const 4294967326;
         const Scpzh_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.90046093 UTC

[section ""data" . System.Environment.withProgName_closure" {
     System.Environment.withProgName_closure:
         const System.Environment.withProgName_info;
         const 0;
 },
 System.Environment.withProgName_entry() //  [R2, R3]
         { []
         }
     {offset
       ccpS7: // global
           R3 = R3;
           R2 = R2;
           call System.Environment.withProgName1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.withProgName_info" {
     System.Environment.withProgName_info:
         const System.Environment.withProgName_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const Scpzh_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.905535516 UTC

[section ""data" . System.Environment.getEnvironment3_closure" {
     System.Environment.getEnvironment3_closure:
         const System.Environment.getEnvironment3_info;
 },
 System.Environment.getEnvironment3_entry() //  [R2]
         { []
         }
     {offset
       ccpSl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccpSm; else goto ccpSn;
       ccpSm: // global
           R2 = R2;
           R1 = System.Environment.getEnvironment3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpSn: // global
           I64[Sp - 8] = block_ccpSi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucpSv; else goto ccpSj;
       ucpSv: // global
           call _ccpSi(R1) args: 0, res: 0, upd: 0;
       ccpSj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getEnvironment3_info" {
     System.Environment.getEnvironment3_info:
         const System.Environment.getEnvironment3_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccpSi() //  [R1]
         { []
         }
     {offset
       ccpSi: // global
           if (I64[R1 + 7] == 61) goto ccpSu; else goto ccpSt;
       ccpSu: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccpSt: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpSi_info" {
     block_ccpSi_info:
         const _ccpSi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.912272105 UTC

[section ""data" . System.Environment.getEnvironment2_closure" {
     System.Environment.getEnvironment2_closure:
         const System.Environment.getEnvironment2_info;
 },
 System.Environment.getEnvironment2_entry() //  [R2]
         { []
         }
     {offset
       ccpSX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpSY; else goto ccpSZ;
       ccpSY: // global
           R2 = R2;
           R1 = System.Environment.getEnvironment2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpSZ: // global
           I64[Sp - 8] = block_ccpSO_info;
           R3 = R2;
           R2 = System.Environment.getEnvironment3_closure+1;
           Sp = Sp - 8;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getEnvironment2_info" {
     System.Environment.getEnvironment2_info:
         const System.Environment.getEnvironment2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccpSO() //  [R1, R2]
         { []
         }
     {offset
       ccpSO: // global
           I64[Sp - 8] = block_ccpSQ_info;
           _scpwV::P64 = R1;
           R1 = R2;
           P64[Sp] = _scpwV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucpTd; else goto ccpSR;
       ucpTd: // global
           call _ccpSQ(R1) args: 0, res: 0, upd: 0;
       ccpSR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpSO_info" {
     block_ccpSO_info:
         const _ccpSO;
         const 0;
         const 30;
 },
 _ccpSQ() //  [R1]
         { []
         }
     {offset
       ccpSQ: // global
           _scpwV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccpSU; else goto ccpSV;
       ccpSU: // global
           Hp = Hp + 24;
           _scpwX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccpTc; else goto ccpT5;
       ccpT5: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _scpwV::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccpSV: // global
           Hp = Hp + 24;
           _scpwX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccpTc; else goto ccpTb;
       ccpTc: // global
           HpAlloc = 24;
           R1 = _scpwX::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpTb: // global
           _scpwZ::P64 = P64[_scpwX::P64 + 14];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _scpwV::P64;
           P64[Hp] = _scpwZ::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpSQ_info" {
     block_ccpSQ_info:
         const _ccpSQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.925141271 UTC

[section ""data" . System.Environment.getEnvironment1_closure" {
     System.Environment.getEnvironment1_closure:
         const System.Environment.getEnvironment1_info;
         const 0;
 },
 go_scpxi_entry() //  [R1, R2]
         { []
         }
     {offset
       ccpUs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccpUt; else goto ccpUu;
       ccpUt: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpUu: // global
           I64[Sp - 24] = block_ccpUl_info;
           _scpxi::P64 = R1;
           _scpxb::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _scpxb::P64;
           P64[Sp - 8] = _scpxi::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucpUR; else goto ccpUm;
       ucpUR: // global
           call _ccpUl(R1) args: 0, res: 0, upd: 0;
       ccpUm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_scpxi_info" {
     go_scpxi_info:
         const go_scpxi_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const Scpzh_srt+48;
 },
 _ccpUl() //  [R1]
         { []
         }
     {offset
       ccpUl: // global
           if (R1 & 7 == 1) goto ccpUp; else goto ccpUq;
       ccpUp: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccpUq: // global
           I64[Sp - 8] = block_ccpUA_info;
           _scpxn::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scpxn::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucpUQ; else goto ccpUB;
       ucpUQ: // global
           call _ccpUA(R1) args: 0, res: 0, upd: 0;
       ccpUB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpUl_info" {
     block_ccpUl_info:
         const _ccpUl;
         const 2;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpUA() //  [R1]
         { []
         }
     {offset
       ccpUA: // global
           I64[Sp] = block_ccpUF_info;
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 16];
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpUA_info" {
     block_ccpUA_info:
         const _ccpUA;
         const 3;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpUF() //  [R1]
         { []
         }
     {offset
       ccpUF: // global
           I64[Sp + 16] = block_ccpUH_info;
           R2 = P64[Sp + 8];
           _scpxs::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _scpxs::P64;
           Sp = Sp + 16;
           call go_scpxi_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpUF_info" {
     block_ccpUF_info:
         const _ccpUF;
         const 131;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpUH() //  [R1]
         { []
         }
     {offset
       ccpUH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccpUP; else goto ccpUO;
       ccpUP: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpUO: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpUH_info" {
     block_ccpUH_info:
         const _ccpUH;
         const 1;
         const 30;
 },
 sat_scpxA_entry() //  [R1]
         { []
         }
     {offset
       ccpUY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpUZ; else goto ccpV0;
       ccpUZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccpV0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = System.Environment.getEnvironment2_closure+1;
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scpxA_info" {
     sat_scpxA_info:
         const sat_scpxA_entry;
         const 1;
         const 16;
 },
 System.Environment.getEnvironment1_entry() //  []
         { []
         }
     {offset
       ccpV4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccpV5; else goto ccpV6;
       ccpV5: // global
           R1 = System.Environment.getEnvironment1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccpV6: // global
           (_scpx4::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] __hscore_environ();
           if (_scpx4::I64 == 0) goto ccpV3; else goto ccpV2;
       ccpV3: // global
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccpV2: // global
           I64[Sp - 16] = block_ccpTI_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           I64[Sp - 8] = _scpx4::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucpVX; else goto ccpTJ;
       ucpVX: // global
           call _ccpTI(R1) args: 0, res: 0, upd: 0;
       ccpTJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getEnvironment1_info" {
     System.Environment.getEnvironment1_info:
         const System.Environment.getEnvironment1_entry;
         const 0;
         const 562962838323214;
         const 4294967299;
         const Scpzh_srt+48;
 },
 _ccpTI() //  [R1]
         { []
         }
     {offset
       ccpTI: // global
           I64[Sp] = block_ccpTN_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpTI_info" {
     block_ccpTI_info:
         const _ccpTI;
         const 65;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpTN() //  [R1]
         { []
         }
     {offset
       ccpTN: // global
           _scpx4::I64 = I64[Sp + 8];
           _scpxb::P64 = R1;
           _scpxX::I64 = 0;
           goto ccpVy;
       ccpVy: // global
           if (I64[_scpx4::I64 + (_scpxX::I64 << 3)] == 0) goto ccpVF; else goto ccpVE;
       ccpVF: // global
           if (%MO_S_Gt_W64(_scpxX::I64, 0)) goto ccpVt; else goto ccpVu;
       ccpVt: // global
           I64[Sp - 16] = _scpxX::I64 - 1;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           P64[Sp] = _scpxb::P64;
           Sp = Sp - 24;
           call _ccpU6() args: 0, res: 0, upd: 0;
       ccpVu: // global
           P64[Sp] = _scpxb::P64;
           P64[Sp + 8] = GHC.Types.[]_closure+1;
           call _ccpUe() args: 0, res: 0, upd: 0;
       ccpVE: // global
           _scpxX::I64 = _scpxX::I64 + 1;
           goto ccpVy;
     }
 },
 section ""relreadonly" . block_ccpTN_info" {
     block_ccpTN_info:
         const _ccpTN;
         const 65;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpU6() //  []
         { []
         }
     {offset
       ccpU6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccpVo; else goto ccpVn;
       ccpVo: // global
           HpAlloc = 40;
           I64[Sp] = block_ccpU6_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       ccpVn: // global
           _scpxM::P64 = P64[Sp + 16];
           _scpxO::I64 = I64[Sp + 8];
           if (_scpxO::I64 != 0) goto ccpVq; else goto ccpVr;
       ccpVq: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[I64[Sp + 32] + (_scpxO::I64 << 3)];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scpxM::P64;
           I64[Sp + 8] = _scpxO::I64 - 1;
           P64[Sp + 16] = Hp - 14;
           call _ccpU6() args: 0, res: 0, upd: 0;
       ccpVr: // global
           Hp = Hp - 40;
           P64[Sp + 16] = _scpxM::P64;
           Sp = Sp + 16;
           call _ccpVh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccpU6_info" {
     block_ccpU6_info:
         const _ccpU6;
         const 580;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpVh() //  []
         { []
         }
     {offset
       ccpVh: // global
           Hp = Hp + 40;
           _scpxD::P64 = P64[Sp];
           if (Hp > HpLim) (likely: False) goto ccpVl; else goto ccpVk;
       ccpVl: // global
           HpAlloc = 40;
           I64[Sp] = block_ccpVg_info;
           R1 = _scpxD::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpVk: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[I64[Sp + 16]];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scpxD::P64;
           P64[Sp + 16] = Hp - 14;
           Sp = Sp + 8;
           call _ccpUe() args: 0, res: 0, upd: 0;
     }
 },
 _ccpVg() //  [R1]
         { []
         }
     {offset
       ccpVg: // global
           P64[Sp] = R1;
           call _ccpVh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccpVg_info" {
     block_ccpVg_info:
         const _ccpVg;
         const 130;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpUe() //  []
         { []
         }
     {offset
       ccpUe: // global
           Hp = Hp + 16;
           _scpxh::P64 = P64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto ccpVc; else goto ccpVb;
       ccpVc: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_ccpUd_info;
           R1 = _scpxh::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpVb: // global
           I64[Hp - 8] = go_scpxi_info;
           P64[Hp] = P64[Sp];
           I64[Sp + 8] = block_ccpUS_info;
           R2 = _scpxh::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call go_scpxi_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccpUd() //  [R1]
         { []
         }
     {offset
       ccpUd: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccpUe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccpUd_info" {
     block_ccpUd_info:
         const _ccpUd;
         const 130;
         const 4294967326;
         const Scpzh_srt+48;
 },
 _ccpUS() //  [R1]
         { []
         }
     {offset
       ccpUS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccpVf; else goto ccpVe;
       ccpVf: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccpVe: // global
           I64[Hp - 16] = sat_scpxA_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpUS_info" {
     block_ccpUS_info:
         const _ccpUS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.951301675 UTC

[section ""data" . System.Environment.getEnvironment_closure" {
     System.Environment.getEnvironment_closure:
         const System.Environment.getEnvironment_info;
         const 0;
 },
 System.Environment.getEnvironment_entry() //  []
         { []
         }
     {offset
       ccpXy: // global
           call System.Environment.getEnvironment1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.getEnvironment_info" {
     System.Environment.getEnvironment_info:
         const System.Environment.getEnvironment_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Scpzh_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.955048612 UTC

[section ""data" . System.Environment.setEnv11_closure" {
     System.Environment.setEnv11_closure:
         const System.Environment.setEnv11_info;
 },
 System.Environment.setEnv11_entry() //  [R2]
         { []
         }
     {offset
       ccpXM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccpXN; else goto ccpXO;
       ccpXN: // global
           R2 = R2;
           R1 = System.Environment.setEnv11_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccpXO: // global
           I64[Sp - 8] = block_ccpXJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucpXW; else goto ccpXK;
       ucpXW: // global
           call _ccpXJ(R1) args: 0, res: 0, upd: 0;
       ccpXK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.setEnv11_info" {
     System.Environment.setEnv11_info:
         const System.Environment.setEnv11_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccpXJ() //  [R1]
         { []
         }
     {offset
       ccpXJ: // global
           if (I64[R1 + 7] == 0) goto ccpXV; else goto ccpXU;
       ccpXV: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccpXU: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpXJ_info" {
     block_ccpXJ_info:
         const _ccpXJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.959860799 UTC

[section ""cstring" . lvl5_rcom5_bytes" {
     lvl5_rcom5_bytes:
         I8[] [112,117,116,101,110,118]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.962192783 UTC

[section ""data" . lvl6_rcom6_closure" {
     lvl6_rcom6_closure:
         const lvl6_rcom6_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_rcom6_entry() //  [R1]
         { []
         }
     {offset
       ccpYi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpYj; else goto ccpYk;
       ccpYj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccpYk: // global
           (_ccpYf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccpYf::I64 == 0) goto ccpYh; else goto ccpYg;
       ccpYh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccpYg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccpYf::I64;
           R2 = lvl5_rcom5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_rcom6_info" {
     lvl6_rcom6_info:
         const lvl6_rcom6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.966606309 UTC

[section ""data" . System.Environment.setEnv2_closure" {
     System.Environment.setEnv2_closure:
         const System.Environment.setEnv2_info;
         const 0;
 },
 System.Environment.setEnv2_entry() //  [R2]
         { []
         }
     {offset
       ccpYz: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl6_rcom6_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.setEnv2_info" {
     System.Environment.setEnv2_info:
         const System.Environment.setEnv2_entry;
         const 0;
         const 72057598332895246;
         const 8589934596;
         const Scpzh_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.969626659 UTC

[section ""cstring" . System.Environment.setEnv10_bytes" {
     System.Environment.setEnv10_bytes:
         I8[] [115,101,116,69,110,118]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.971789366 UTC

[section ""data" . System.Environment.setEnv9_closure" {
     System.Environment.setEnv9_closure:
         const System.Environment.setEnv9_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.setEnv9_entry() //  [R1]
         { []
         }
     {offset
       ccpYN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpYO; else goto ccpYP;
       ccpYO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccpYP: // global
           (_ccpYK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccpYK::I64 == 0) goto ccpYM; else goto ccpYL;
       ccpYM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccpYL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccpYK::I64;
           R2 = System.Environment.setEnv10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.Environment.setEnv9_info" {
     System.Environment.setEnv9_info:
         const System.Environment.setEnv9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.97544708 UTC

[section ""data" . System.Environment.setEnv8_closure" {
     System.Environment.setEnv8_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.InvalidArgument_closure+1;
         const System.Environment.setEnv9_closure;
         const GHC.Types.[]_closure+1;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.978611259 UTC

[section ""data" . System.Environment.setEnv7_closure" {
     System.Environment.setEnv7_closure:
         const System.Environment.setEnv7_info;
         const 0;
         const 0;
         const 0;
 },
 System.Environment.setEnv7_entry() //  [R1]
         { []
         }
     {offset
       ccpZ5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccpZ6; else goto ccpZ7;
       ccpZ6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccpZ7: // global
           (_ccpZ2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccpZ2::I64 == 0) goto ccpZ4; else goto ccpZ3;
       ccpZ4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccpZ3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccpZ2::I64;
           R2 = System.Environment.setEnv8_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.Environment.setEnv7_info" {
     System.Environment.setEnv7_info:
         const System.Environment.setEnv7_entry;
         const 0;
         const 35188667056149;
         const Scpzh_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.982187785 UTC

[section ""data" . System.Environment.setEnv6_closure" {
     System.Environment.setEnv6_closure:
         const GHC.Types.C#_con_info;
         const 61;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.983867278 UTC

[section ""cstring" . System.Environment.setEnv3_bytes" {
     System.Environment.setEnv3_bytes:
         I8[] [61]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:18.989410686 UTC

[section ""data" . System.Environment.setEnv1_closure" {
     System.Environment.setEnv1_closure:
         const System.Environment.setEnv1_info;
         const 0;
 },
 sat_scpyu_entry() //  [R1]
         { []
         }
     {offset
       ccpZP: // global
           R3 = P64[R1 + 16];
           R2 = System.Environment.setEnv3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scpyu_info" {
     sat_scpyu_info:
         const sat_scpyu_entry;
         const 1;
         const 16;
 },
 sat_scpyv_entry() //  [R1]
         { []
         }
     {offset
       ccpZS: // global
           _scpyv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccpZT; else goto ccpZU;
       ccpZU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccpZW; else goto ccpZV;
       ccpZW: // global
           HpAlloc = 24;
           goto ccpZT;
       ccpZT: // global
           R1 = _scpyv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccpZV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scpyv::P64;
           _scpye::P64 = P64[_scpyv::P64 + 16];
           _scpyi::P64 = P64[_scpyv::P64 + 24];
           I64[Hp - 16] = sat_scpyu_info;
           P64[Hp] = _scpyi::P64;
           R3 = Hp - 16;
           R2 = _scpye::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scpyv_info" {
     sat_scpyv_info:
         const sat_scpyv_entry;
         const 2;
         const 18;
 },
 System.Environment.setEnv1_entry() //  [R2, R3]
         { []
         }
     {offset
       ccq01: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccq02; else goto ccq03;
       ccq02: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Environment.setEnv1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccq03: // global
           I64[Sp - 16] = block_ccpZm_info;
           _scpyc::P64 = R3;
           R3 = R2;
           R2 = System.Environment.setEnv11_closure+1;
           P64[Sp - 8] = _scpyc::P64;
           Sp = Sp - 16;
           call GHC.List.takeWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.setEnv1_info" {
     System.Environment.setEnv1_info:
         const System.Environment.setEnv1_entry;
         const 0;
         const 1080864069482709006;
         const 12884901903;
         const Scpzh_srt+16;
 },
 _ccpZm() //  [R1]
         { []
         }
     {offset
       ccpZm: // global
           if (R1 & 7 == 1) goto ucq0U; else goto ccpZZ;
       ucq0U: // global
           Sp = Sp + 16;
           call _ccq0Q() args: 0, res: 0, upd: 0;
       ccpZZ: // global
           I64[Sp - 8] = block_ccpZr_info;
           R4 = R1;
           R3 = System.Environment.setEnv6_closure+1;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpZm_info" {
     block_ccpZm_info:
         const _ccpZm;
         const 1;
         const 936748881406853150;
         const Scpzh_srt+16;
 },
 _ccpZr() //  [R1]
         { []
         }
     {offset
       ccpZr: // global
           if (R1 & 7 == 1) goto ccq09; else goto ucq0V;
       ccq09: // global
           I64[Sp] = block_ccpZv_info;
           R3 = P64[Sp + 16];
           R2 = System.Environment.setEnv11_closure+1;
           call GHC.List.takeWhile_entry(R3, R2) args: 8, res: 8, upd: 8;
       ucq0V: // global
           Sp = Sp + 24;
           call _ccq0Q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccpZr_info" {
     block_ccpZr_info:
         const _ccpZr;
         const 2;
         const 936748881406853150;
         const Scpzh_srt+16;
 },
 _ccpZv() //  [R1]
         { []
         }
     {offset
       ccpZv: // global
           if (R1 & 7 == 1) goto ccq0e; else goto ccq0l;
       ccq0e: // global
           I64[Sp] = block_ccq0b_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       ccq0l: // global
           I64[Sp] = block_ccpZA_info;
           _scpyi::P64 = R1;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           P64[Sp + 16] = _scpyi::P64;
           if (R1 & 7 != 0) goto ucq0Y; else goto ccpZB;
       ucq0Y: // global
           call _ccpZA(R1) args: 0, res: 0, upd: 0;
       ccpZB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpZv_info" {
     block_ccpZv_info:
         const _ccpZv;
         const 130;
         const 360288129103429662;
         const Scpzh_srt+16;
 },
 _ccq0b() //  [R1]
         { []
         }
     {offset
       ccq0b: // global
           R4 = System.Environment.setEnv4_closure+2;
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 24;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccq0b_info" {
     block_ccq0b_info:
         const _ccq0b;
         const 130;
         const 4294967326;
         const Scpzh_srt+16;
 },
 _ccpZA() //  [R1]
         { []
         }
     {offset
       ccpZA: // global
           I64[Sp] = block_ccpZF_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpZA_info" {
     block_ccpZA_info:
         const _ccpZA;
         const 2;
         const 21474836510;
         const Scpzh_srt+208;
 },
 _ccpZF() //  [R1]
         { []
         }
     {offset
       ccpZF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccq0p; else goto ccq0o;
       ccq0p: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccq0o: // global
           I64[Hp - 24] = sat_scpyv_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_ccq0h_info;
           R3 = Hp - 24;
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.newCString1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccpZF_info" {
     block_ccpZF_info:
         const _ccpZF;
         const 2;
         const 21474836510;
         const Scpzh_srt+208;
 },
 _ccq0h() //  [R1]
         { []
         }
     {offset
       ccq0h: // global
           I64[Sp] = block_ccq0j_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ucq0Z; else goto ccq0r;
       ucq0Z: // global
           call _ccq0j(R1) args: 0, res: 0, upd: 0;
       ccq0r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccq0h_info" {
     block_ccq0h_info:
         const _ccq0h;
         const 0;
         const 4294967326;
         const Scpzh_srt+224;
 },
 _ccq0j() //  [R1]
         { []
         }
     {offset
       ccq0j: // global
           (_scpyE::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [‘signed’] putenv(I64[R1 + 7]);
           if (%MO_SS_Conv_W64_W32(_scpyE::I64) == 0 :: W32) goto ccq0J; else goto ccq0D;
       ccq0J: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccq0D: // global
           (_scpyJ::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scpyJ::I64;
           Sp = Sp + 8;
           call System.Environment.setEnv2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccq0j_info" {
     block_ccq0j_info:
         const _ccq0j;
         const 0;
         const 4294967326;
         const Scpzh_srt+224;
 },
 _ccq0Q() //  []
         { []
         }
     {offset
       ccq0Q: // global
           R1 = System.Environment.setEnv7_closure;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:19.009854572 UTC

[section ""data" . System.Environment.setEnv_closure" {
     System.Environment.setEnv_closure:
         const System.Environment.setEnv_info;
         const 0;
 },
 System.Environment.setEnv_entry() //  [R2, R3]
         { []
         }
     {offset
       ccq23: // global
           R3 = R3;
           R2 = R2;
           call System.Environment.setEnv1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Environment.setEnv_info" {
     System.Environment.setEnv_info:
         const System.Environment.setEnv_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const Scpzh_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:19.013587163 UTC

[section ""relreadonly" . Scpzh_srt" {
     Scpzh_srt:
         const Foreign.C.Error.$wlvl_closure;
         const loc1_rcolZ_closure;
         const System.Environment.setEnv4_closure;
         const System.Environment.setEnv5_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const System.Environment.unsetEnv1_closure;
         const GHC.Foreign.$wpeekCString_closure;
         const GHC.IO.Encoding.getFileSystemEncoding1_closure;
         const System.Environment.$wlvl_closure;
         const System.Environment.getEnv3_closure;
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const System.Environment.lookupEnv1_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const lvl2_rcom2_closure;
         const lvl4_rcom4_closure;
         const System.Environment.getEnv2_closure;
         const System.Environment.getEnv1_closure;
         const System.Environment.getProgName1_closure;
         const System.Environment.getArgs1_closure;
         const GHC.Foreign.withCStringsLen1_closure;
         const System.Environment.withArgs2_closure;
         const System.Environment.withArgs1_closure;
         const System.Environment.withProgName1_closure;
         const System.Environment.getEnvironment1_closure;
         const lvl6_rcom6_closure;
         const System.Environment.setEnv8_closure;
         const GHC.Foreign.newCString1_closure;
         const System.Environment.setEnv1_closure;
         const System.Environment.setEnv2_closure;
         const System.Environment.setEnv7_closure;
 }]

