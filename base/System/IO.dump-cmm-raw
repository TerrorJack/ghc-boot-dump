
==================== Raw Cmm ====================
2018-03-16 16:06:30.301504329 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:30.302863752 UTC

[section ""data" . System.IO.putChar1_closure" {
     System.IO.putChar1_closure:
         const System.IO.putChar1_info;
         const 0;
 },
 System.IO.putChar1_entry() //  [R2]
         { []
         }
     {offset
       cbzMb: // global
           R3 = R2;
           R2 = GHC.IO.Handle.FD.stdout_closure;
           call GHC.IO.Handle.Text.hPutChar1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.putChar1_info" {
     System.IO.putChar1_info:
         const System.IO.putChar1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SbyXw_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.306468767 UTC

[section ""data" . System.IO.putChar_closure" {
     System.IO.putChar_closure:
         const System.IO.putChar_info;
         const 0;
 },
 System.IO.putChar_entry() //  [R2]
         { []
         }
     {offset
       cbzMm: // global
           R2 = R2;
           call System.IO.putChar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.putChar_info" {
     System.IO.putChar_info:
         const System.IO.putChar_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbyXw_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.311438918 UTC

[section ""data" . System.IO.putStr_closure" {
     System.IO.putStr_closure:
         const System.IO.putStr_info;
         const 0;
 },
 System.IO.putStr_entry() //  [R2]
         { []
         }
     {offset
       cbzMx: // global
           R3 = R2;
           R2 = GHC.IO.Handle.FD.stdout_closure;
           call GHC.IO.Handle.Text.hPutStr_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.putStr_info" {
     System.IO.putStr_info:
         const System.IO.putStr_entry;
         const 0;
         const 38654705678;
         const 8589934597;
         const SbyXw_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.31478993 UTC

[section ""data" . System.IO.putStrLn_closure" {
     System.IO.putStrLn_closure:
         const System.IO.putStrLn_info;
         const 0;
 },
 System.IO.putStrLn_entry() //  [R2]
         { []
         }
     {offset
       cbzMI: // global
           R3 = R2;
           R2 = GHC.IO.Handle.FD.stdout_closure;
           call GHC.IO.Handle.Text.hPutStrLn_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.putStrLn_info" {
     System.IO.putStrLn_info:
         const System.IO.putStrLn_entry;
         const 0;
         const 73014444046;
         const 8589934597;
         const SbyXw_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.318663562 UTC

[section ""data" . System.IO.print_closure" {
     System.IO.print_closure:
         const System.IO.print_info;
         const 0;
 },
 sat_sbyQs_entry() //  [R1]
         { []
         }
     {offset
       cbzMX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbzMY; else goto cbzMZ;
       cbzMY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbzMZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Show.show_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbyQs_info" {
     sat_sbyQs_info:
         const sat_sbyQs_entry;
         const 2;
         const 18;
 },
 System.IO.print_entry() //  [R2, R3]
         { []
         }
     {offset
       cbzN0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbzN4; else goto cbzN3;
       cbzN4: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = System.IO.print_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbzN3: // global
           I64[Hp - 24] = sat_sbyQs_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R4 = GHC.Types.True_closure+2;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.FD.stdout_closure;
           R1 = GHC.IO.Handle.Text.hPutStr'_closure+4;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.print_info" {
     System.IO.print_info:
         const System.IO.print_entry;
         const 0;
         const 416611827726;
         const 8589934607;
         const SbyXw_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.323950819 UTC

[section ""data" . System.IO.getChar1_closure" {
     System.IO.getChar1_closure:
         const System.IO.getChar1_info;
         const 0;
 },
 System.IO.getChar1_entry() //  []
         { []
         }
     {offset
       cbzNi: // global
           R4 = GHC.IO.Handle.Text.hGetChar2_closure+2;
           R3 = GHC.IO.Handle.FD.stdin_closure;
           R2 = GHC.IO.Handle.Text.hGetChar6_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.getChar1_info" {
     System.IO.getChar1_info:
         const System.IO.getChar1_entry;
         const 0;
         const 64424509454;
         const 4294967299;
         const SbyXw_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.327280034 UTC

[section ""data" . System.IO.getChar_closure" {
     System.IO.getChar_closure:
         const System.IO.getChar_info;
         const 0;
 },
 System.IO.getChar_entry() //  []
         { []
         }
     {offset
       cbzNt: // global
           call System.IO.getChar1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.getChar_info" {
     System.IO.getChar_info:
         const System.IO.getChar_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SbyXw_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.331156729 UTC

[section ""data" . System.IO.getLine1_closure" {
     System.IO.getLine1_closure:
         const System.IO.getLine1_info;
         const 0;
 },
 System.IO.getLine1_entry() //  []
         { []
         }
     {offset
       cbzNE: // global
           R4 = GHC.IO.Handle.Text.hGetLine2_closure+2;
           R3 = GHC.IO.Handle.FD.stdin_closure;
           R2 = GHC.IO.Handle.Text.hGetLine4_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.getLine1_info" {
     System.IO.getLine1_info:
         const System.IO.getLine1_entry;
         const 0;
         const 450971566094;
         const 4294967299;
         const SbyXw_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.334431901 UTC

[section ""data" . System.IO.getLine_closure" {
     System.IO.getLine_closure:
         const System.IO.getLine_info;
         const 0;
 },
 System.IO.getLine_entry() //  []
         { []
         }
     {offset
       cbzNP: // global
           call System.IO.getLine1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.getLine_info" {
     System.IO.getLine_info:
         const System.IO.getLine_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SbyXw_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.337962295 UTC

[section ""data" . System.IO.getContents1_closure" {
     System.IO.getContents1_closure:
         const System.IO.getContents1_info;
         const 0;
 },
 System.IO.getContents1_entry() //  []
         { []
         }
     {offset
       cbzO0: // global
           R2 = GHC.IO.Handle.FD.stdin_closure;
           call GHC.IO.Handle.Text.hGetContents1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.getContents1_info" {
     System.IO.getContents1_info:
         const System.IO.getContents1_entry;
         const 0;
         const 141733920782;
         const 4294967299;
         const SbyXw_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.342184694 UTC

[section ""data" . System.IO.getContents_closure" {
     System.IO.getContents_closure:
         const System.IO.getContents_info;
         const 0;
 },
 System.IO.getContents_entry() //  []
         { []
         }
     {offset
       cbzOb: // global
           call System.IO.getContents1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.getContents_info" {
     System.IO.getContents_info:
         const System.IO.getContents_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SbyXw_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.345045526 UTC

[section ""data" . System.IO.localeEncoding_closure" {
     System.IO.localeEncoding_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.initLocaleEncoding_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.346756818 UTC

[section ""data" . System.IO.hReady2_closure" {
     System.IO.hReady2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.348742183 UTC

[section ""data" . System.IO.hReady1_closure" {
     System.IO.hReady1_closure:
         const System.IO.hReady1_info;
         const 0;
 },
 System.IO.hReady1_entry() //  [R2]
         { []
         }
     {offset
       cbzOo: // global
           R3 = System.IO.hReady2_closure+1;
           R2 = R2;
           call GHC.IO.Handle.Text.hWaitForInput1_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.hReady1_info" {
     System.IO.hReady1_info:
         const System.IO.hReady1_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbyXw_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.352097589 UTC

[section ""data" . System.IO.hReady_closure" {
     System.IO.hReady_closure:
         const System.IO.hReady_info;
         const 0;
 },
 System.IO.hReady_entry() //  [R2]
         { []
         }
     {offset
       cbzOz: // global
           R2 = R2;
           call System.IO.hReady1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.hReady_info" {
     System.IO.hReady_info:
         const System.IO.hReady_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbyXw_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.356359024 UTC

[section ""data" . System.IO.hPrint_closure" {
     System.IO.hPrint_closure:
         const System.IO.hPrint_info;
         const 0;
 },
 sat_sbyQy_entry() //  [R1]
         { []
         }
     {offset
       cbzOO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbzOP; else goto cbzOQ;
       cbzOP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbzOQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Show.show_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbyQy_info" {
     sat_sbyQy_info:
         const sat_sbyQy_entry;
         const 2;
         const 18;
 },
 System.IO.hPrint_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbzOR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbzOV; else goto cbzOU;
       cbzOV: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.IO.hPrint_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbzOU: // global
           I64[Hp - 24] = sat_sbyQy_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R4 = GHC.Types.True_closure+2;
           _sbyQw::P64 = R3;
           R3 = Hp - 24;
           R2 = _sbyQw::P64;
           R1 = GHC.IO.Handle.Text.hPutStr'_closure+4;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.hPrint_info" {
     System.IO.hPrint_info:
         const System.IO.hPrint_entry;
         const 0;
         const 35188667056142;
         const 12884901911;
         const SbyXw_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.367815428 UTC

[section ""data" . System.IO.appendFile2_closure" {
     System.IO.appendFile2_closure:
         const System.IO.appendFile2_info;
         const 0;
 },
 sat_sbyQR_entry() //  [R1, R2]
         { []
         }
     {offset
       cbzPm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbzPn; else goto cbzPo;
       cbzPn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbzPo: // global
           I64[Sp - 16] = block_cbzPk_info;
           _sbyQM::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _sbyQM::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbyQR_info" {
     sat_sbyQR_info:
         const sat_sbyQR_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbyXw_srt+160;
 },
 _cbzPk() //  []
         { []
         }
     {offset
       cbzPk: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzPk_info" {
     block_cbzPk_info:
         const _cbzPk;
         const 1;
         const 30;
 },
 sat_sbyQL_entry() //  [R1]
         { []
         }
     {offset
       cbzPw: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbyQL_info" {
     sat_sbyQL_info:
         const sat_sbyQL_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sbyR9_entry() //  [R1, R2]
         { []
         }
     {offset
       cbzPO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbzPP; else goto cbzPQ;
       cbzPP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbzPQ: // global
           I64[Sp - 16] = block_cbzPM_info;
           _sbyR4::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _sbyR4::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbyR9_info" {
     sat_sbyR9_info:
         const sat_sbyR9_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbyXw_srt+160;
 },
 _cbzPM() //  []
         { []
         }
     {offset
       cbzPM: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzPM_info" {
     block_cbzPM_info:
         const _cbzPM;
         const 1;
         const 30;
 },
 sat_sbyR3_entry() //  [R1]
         { []
         }
     {offset
       cbzPY: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbyR3_info" {
     sat_sbyR3_info:
         const sat_sbyR3_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sbyRg_entry() //  [R1]
         { []
         }
     {offset
       cbzQ5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbzQ6; else goto cbzQ7;
       cbzQ6: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbzQ7: // global
           I64[Sp - 16] = block_cbzPF_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 23];
           Sp = Sp - 16;
           call GHC.IO.Handle.FD.openFile1_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbyRg_info" {
     sat_sbyRg_info:
         const sat_sbyRg_entry;
         const 3;
         const 12884901896;
         const 4294967299;
         const SbyXw_srt+160;
 },
 _cbzPF() //  [R1]
         { []
         }
     {offset
       cbzPF: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbzQa; else goto cbzQ9;
       cbzQa: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbzQ9: // global
           I64[Hp - 56] = sat_sbyR9_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sbyR3_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cbzQ1_info;
           R2 = Hp - 54;
           _sbyR1::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 8] = _sbyR1::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzPF_info" {
     block_cbzPF_info:
         const _cbzPF;
         const 1;
         const 4294967326;
         const SbyXw_srt+160;
 },
 _cbzQ1() //  [R1]
         { []
         }
     {offset
       cbzQ1: // global
           I64[Sp] = block_cbzQ3_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzQ1_info" {
     block_cbzQ1_info:
         const _cbzQ1;
         const 1;
         const 4294967326;
         const SbyXw_srt+160;
 },
 _cbzQ3() //  []
         { []
         }
     {offset
       cbzQ3: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzQ3_info" {
     block_cbzQ3_info:
         const _cbzQ3;
         const 1;
         const 30;
 },
 sat_sbyRr_entry() //  [R1, R2]
         { []
         }
     {offset
       cbzQn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbzQo; else goto cbzQp;
       cbzQo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbzQp: // global
           I64[Sp - 16] = block_cbzQl_info;
           _sbyRm::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _sbyRm::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbyRr_info" {
     sat_sbyRr_info:
         const sat_sbyRr_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbyXw_srt+160;
 },
 _cbzQl() //  []
         { []
         }
     {offset
       cbzQl: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzQl_info" {
     block_cbzQl_info:
         const _cbzQl;
         const 1;
         const 30;
 },
 sat_sbyRl_entry() //  [R1]
         { []
         }
     {offset
       cbzQx: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbyRl_info" {
     sat_sbyRl_info:
         const sat_sbyRl_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 System.IO.appendFile2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbzQE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbzQF; else goto cbzQG;
       cbzQF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.IO.appendFile2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbzQG: // global
           I64[Sp - 32] = block_cbzP9_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.appendFile2_info" {
     System.IO.appendFile2_info:
         const System.IO.appendFile2_entry;
         const 0;
         const 30064771086;
         const 17179869207;
         const SbyXw_srt+160;
 },
 _cbzP9() //  [R1]
         { []
         }
     {offset
       cbzP9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbzQJ; else goto cbzQI;
       cbzQJ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbzQI: // global
           _sbyQz::P64 = P64[Sp + 8];
           _sbyQA::P64 = P64[Sp + 16];
           if (R1 == 0) goto cbzQC; else goto ubzR2;
       cbzQC: // global
           I64[Hp - 24] = sat_sbyRg_info;
           P64[Hp - 16] = _sbyQz::P64;
           P64[Hp - 8] = _sbyQA::P64;
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       ubzR2: // global
           if (R1 == 1) goto cbzQD; else goto cbzQB;
       cbzQD: // global
           Hp = Hp - 32;
           I64[Sp + 16] = block_cbzQe_info;
           R3 = _sbyQA::P64;
           R2 = _sbyQz::P64;
           Sp = Sp + 16;
           call GHC.IO.Handle.FD.openFile1_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
       cbzQB: // global
           Hp = Hp - 32;
           I64[Sp + 16] = block_cbzPd_info;
           R3 = _sbyQA::P64;
           R2 = _sbyQz::P64;
           Sp = Sp + 16;
           call GHC.IO.Handle.FD.openFile1_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzP9_info" {
     block_cbzP9_info:
         const _cbzP9;
         const 3;
         const 12884901918;
         const SbyXw_srt+160;
 },
 _cbzQe() //  [R1]
         { []
         }
     {offset
       cbzQe: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbzQY; else goto cbzQX;
       cbzQY: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbzQX: // global
           I64[Hp - 56] = sat_sbyRr_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sbyRl_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cbzQT_info;
           R2 = Hp - 54;
           _sbyRj::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 8] = _sbyRj::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzQe_info" {
     block_cbzQe_info:
         const _cbzQe;
         const 1;
         const 4294967326;
         const SbyXw_srt+160;
 },
 _cbzQT() //  [R1]
         { []
         }
     {offset
       cbzQT: // global
           I64[Sp] = block_cbzQV_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzQT_info" {
     block_cbzQT_info:
         const _cbzQT;
         const 1;
         const 4294967326;
         const SbyXw_srt+160;
 },
 _cbzQV() //  []
         { []
         }
     {offset
       cbzQV: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzQV_info" {
     block_cbzQV_info:
         const _cbzQV;
         const 1;
         const 30;
 },
 _cbzPd() //  [R1]
         { []
         }
     {offset
       cbzPd: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbzQP; else goto cbzQO;
       cbzQP: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbzQO: // global
           I64[Hp - 56] = sat_sbyQR_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sbyQL_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cbzQK_info;
           R2 = Hp - 54;
           _sbyQJ::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 8] = _sbyQJ::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzPd_info" {
     block_cbzPd_info:
         const _cbzPd;
         const 1;
         const 4294967326;
         const SbyXw_srt+160;
 },
 _cbzQK() //  [R1]
         { []
         }
     {offset
       cbzQK: // global
           I64[Sp] = block_cbzQM_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzQK_info" {
     block_cbzQK_info:
         const _cbzQK;
         const 1;
         const 4294967326;
         const SbyXw_srt+160;
 },
 _cbzQM() //  []
         { []
         }
     {offset
       cbzQM: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzQM_info" {
     block_cbzQM_info:
         const _cbzQM;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.402256916 UTC

[section ""data" . System.IO.withFile_closure" {
     System.IO.withFile_closure:
         const System.IO.withFile_info;
         const 0;
 },
 System.IO.withFile_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbzSp: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call System.IO.appendFile2_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.withFile_info" {
     System.IO.withFile_info:
         const System.IO.withFile_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const SbyXw_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.406156762 UTC

[section ""data" . System.IO.appendFile1_closure" {
     System.IO.appendFile1_closure:
         const System.IO.appendFile1_info;
         const 0;
 },
 sat_sbyRC_entry() //  [R1, R2]
         { []
         }
     {offset
       cbzSF: // global
           R3 = P64[R1 + 6];
           R2 = R2;
           call GHC.IO.Handle.Text.hPutStr_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbyRC_info" {
     sat_sbyRC_info:
         const sat_sbyRC_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbyXw_srt+24;
 },
 System.IO.appendFile1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbzSI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbzSM; else goto cbzSL;
       cbzSM: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = System.IO.appendFile1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbzSL: // global
           I64[Hp - 8] = sat_sbyRC_info;
           P64[Hp] = R3;
           R4 = Hp - 6;
           R3 = GHC.IO.IOMode.AppendMode_closure+3;
           R2 = R2;
           call System.IO.appendFile2_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.appendFile1_info" {
     System.IO.appendFile1_info:
         const System.IO.appendFile1_entry;
         const 0;
         const 6755403736023054;
         const 12884901903;
         const SbyXw_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.411903374 UTC

[section ""data" . System.IO.appendFile_closure" {
     System.IO.appendFile_closure:
         const System.IO.appendFile_info;
         const 0;
 },
 System.IO.appendFile_entry() //  [R2, R3]
         { []
         }
     {offset
       cbzSY: // global
           R3 = R3;
           R2 = R2;
           call System.IO.appendFile1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.appendFile_info" {
     System.IO.appendFile_info:
         const System.IO.appendFile_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbyXw_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.415788806 UTC

[section ""data" . System.IO.writeFile1_closure" {
     System.IO.writeFile1_closure:
         const System.IO.writeFile1_info;
         const 0;
 },
 sat_sbyRH_entry() //  [R1, R2]
         { []
         }
     {offset
       cbzTe: // global
           R3 = P64[R1 + 6];
           R2 = R2;
           call GHC.IO.Handle.Text.hPutStr_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbyRH_info" {
     sat_sbyRH_info:
         const sat_sbyRH_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbyXw_srt+24;
 },
 System.IO.writeFile1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbzTh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbzTl; else goto cbzTk;
       cbzTl: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = System.IO.writeFile1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbzTk: // global
           I64[Hp - 8] = sat_sbyRH_info;
           P64[Hp] = R3;
           R4 = Hp - 6;
           R3 = GHC.IO.IOMode.WriteMode_closure+2;
           R2 = R2;
           call System.IO.appendFile2_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.writeFile1_info" {
     System.IO.writeFile1_info:
         const System.IO.writeFile1_entry;
         const 0;
         const 11259003363393550;
         const 12884901903;
         const SbyXw_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.422787739 UTC

[section ""data" . System.IO.writeFile_closure" {
     System.IO.writeFile_closure:
         const System.IO.writeFile_info;
         const 0;
 },
 System.IO.writeFile_entry() //  [R2, R3]
         { []
         }
     {offset
       cbzTx: // global
           R3 = R3;
           R2 = R2;
           call System.IO.writeFile1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.writeFile_info" {
     System.IO.writeFile_info:
         const System.IO.writeFile_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbyXw_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.432117441 UTC

[section ""data" . System.IO.withBinaryFile1_closure" {
     System.IO.withBinaryFile1_closure:
         const System.IO.withBinaryFile1_info;
         const 0;
 },
 sat_sbyS0_entry() //  [R1, R2]
         { []
         }
     {offset
       cbzTV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbzTW; else goto cbzTX;
       cbzTW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbzTX: // global
           I64[Sp - 16] = block_cbzTT_info;
           _sbyRV::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _sbyRV::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbyS0_info" {
     sat_sbyS0_info:
         const sat_sbyS0_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbyXw_srt+160;
 },
 _cbzTT() //  []
         { []
         }
     {offset
       cbzTT: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzTT_info" {
     block_cbzTT_info:
         const _cbzTT;
         const 1;
         const 30;
 },
 sat_sbyRU_entry() //  [R1]
         { []
         }
     {offset
       cbzU5: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbyRU_info" {
     sat_sbyRU_info:
         const sat_sbyRU_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sbySi_entry() //  [R1, R2]
         { []
         }
     {offset
       cbzUn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbzUo; else goto cbzUp;
       cbzUo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbzUp: // global
           I64[Sp - 16] = block_cbzUl_info;
           _sbySd::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _sbySd::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbySi_info" {
     sat_sbySi_info:
         const sat_sbySi_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbyXw_srt+160;
 },
 _cbzUl() //  []
         { []
         }
     {offset
       cbzUl: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzUl_info" {
     block_cbzUl_info:
         const _cbzUl;
         const 1;
         const 30;
 },
 sat_sbySc_entry() //  [R1]
         { []
         }
     {offset
       cbzUx: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbySc_info" {
     sat_sbySc_info:
         const sat_sbySc_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sbySp_entry() //  [R1]
         { []
         }
     {offset
       cbzUE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbzUF; else goto cbzUG;
       cbzUF: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbzUG: // global
           I64[Sp - 16] = block_cbzUe_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 23];
           Sp = Sp - 16;
           call GHC.IO.Handle.FD.openBinaryFile1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbySp_info" {
     sat_sbySp_info:
         const sat_sbySp_entry;
         const 3;
         const 141733920776;
         const 4294967299;
         const SbyXw_srt+160;
 },
 _cbzUe() //  [R1]
         { []
         }
     {offset
       cbzUe: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbzUJ; else goto cbzUI;
       cbzUJ: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbzUI: // global
           I64[Hp - 56] = sat_sbySi_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sbySc_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cbzUA_info;
           R2 = Hp - 54;
           _sbySa::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 8] = _sbySa::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzUe_info" {
     block_cbzUe_info:
         const _cbzUe;
         const 1;
         const 4294967326;
         const SbyXw_srt+160;
 },
 _cbzUA() //  [R1]
         { []
         }
     {offset
       cbzUA: // global
           I64[Sp] = block_cbzUC_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzUA_info" {
     block_cbzUA_info:
         const _cbzUA;
         const 1;
         const 4294967326;
         const SbyXw_srt+160;
 },
 _cbzUC() //  []
         { []
         }
     {offset
       cbzUC: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzUC_info" {
     block_cbzUC_info:
         const _cbzUC;
         const 1;
         const 30;
 },
 sat_sbySA_entry() //  [R1, R2]
         { []
         }
     {offset
       cbzUW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbzUX; else goto cbzUY;
       cbzUX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbzUY: // global
           I64[Sp - 16] = block_cbzUU_info;
           _sbySv::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _sbySv::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbySA_info" {
     sat_sbySA_info:
         const sat_sbySA_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbyXw_srt+160;
 },
 _cbzUU() //  []
         { []
         }
     {offset
       cbzUU: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzUU_info" {
     block_cbzUU_info:
         const _cbzUU;
         const 1;
         const 30;
 },
 sat_sbySu_entry() //  [R1]
         { []
         }
     {offset
       cbzV6: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbySu_info" {
     sat_sbySu_info:
         const sat_sbySu_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 System.IO.withBinaryFile1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbzVd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbzVe; else goto cbzVf;
       cbzVe: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.IO.withBinaryFile1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbzVf: // global
           I64[Sp - 32] = block_cbzTI_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.withBinaryFile1_info" {
     System.IO.withBinaryFile1_info:
         const System.IO.withBinaryFile1_entry;
         const 0;
         const 416611827726;
         const 17179869207;
         const SbyXw_srt+160;
 },
 _cbzTI() //  [R1]
         { []
         }
     {offset
       cbzTI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbzVi; else goto cbzVh;
       cbzVi: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbzVh: // global
           _sbyRI::P64 = P64[Sp + 8];
           _sbyRJ::P64 = P64[Sp + 16];
           if (R1 == 0) goto cbzVb; else goto ubzVB;
       cbzVb: // global
           I64[Hp - 24] = sat_sbySp_info;
           P64[Hp - 16] = _sbyRI::P64;
           P64[Hp - 8] = _sbyRJ::P64;
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       ubzVB: // global
           if (R1 == 1) goto cbzVc; else goto cbzVa;
       cbzVc: // global
           Hp = Hp - 32;
           I64[Sp + 16] = block_cbzUN_info;
           R3 = _sbyRJ::P64;
           R2 = _sbyRI::P64;
           Sp = Sp + 16;
           call GHC.IO.Handle.FD.openBinaryFile1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       cbzVa: // global
           Hp = Hp - 32;
           I64[Sp + 16] = block_cbzTM_info;
           R3 = _sbyRJ::P64;
           R2 = _sbyRI::P64;
           Sp = Sp + 16;
           call GHC.IO.Handle.FD.openBinaryFile1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzTI_info" {
     block_cbzTI_info:
         const _cbzTI;
         const 3;
         const 141733920798;
         const SbyXw_srt+160;
 },
 _cbzUN() //  [R1]
         { []
         }
     {offset
       cbzUN: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbzVx; else goto cbzVw;
       cbzVx: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbzVw: // global
           I64[Hp - 56] = sat_sbySA_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sbySu_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cbzVs_info;
           R2 = Hp - 54;
           _sbySs::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 8] = _sbySs::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzUN_info" {
     block_cbzUN_info:
         const _cbzUN;
         const 1;
         const 4294967326;
         const SbyXw_srt+160;
 },
 _cbzVs() //  [R1]
         { []
         }
     {offset
       cbzVs: // global
           I64[Sp] = block_cbzVu_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzVs_info" {
     block_cbzVs_info:
         const _cbzVs;
         const 1;
         const 4294967326;
         const SbyXw_srt+160;
 },
 _cbzVu() //  []
         { []
         }
     {offset
       cbzVu: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzVu_info" {
     block_cbzVu_info:
         const _cbzVu;
         const 1;
         const 30;
 },
 _cbzTM() //  [R1]
         { []
         }
     {offset
       cbzTM: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbzVo; else goto cbzVn;
       cbzVo: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbzVn: // global
           I64[Hp - 56] = sat_sbyS0_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sbyRU_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cbzVj_info;
           R2 = Hp - 54;
           _sbyRS::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 8] = _sbyRS::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzTM_info" {
     block_cbzTM_info:
         const _cbzTM;
         const 1;
         const 4294967326;
         const SbyXw_srt+160;
 },
 _cbzVj() //  [R1]
         { []
         }
     {offset
       cbzVj: // global
           I64[Sp] = block_cbzVl_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzVj_info" {
     block_cbzVj_info:
         const _cbzVj;
         const 1;
         const 4294967326;
         const SbyXw_srt+160;
 },
 _cbzVl() //  []
         { []
         }
     {offset
       cbzVl: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzVl_info" {
     block_cbzVl_info:
         const _cbzVl;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.467557432 UTC

[section ""data" . System.IO.withBinaryFile_closure" {
     System.IO.withBinaryFile_closure:
         const System.IO.withBinaryFile_info;
         const 0;
 },
 System.IO.withBinaryFile_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbzWY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call System.IO.withBinaryFile1_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.withBinaryFile_info" {
     System.IO.withBinaryFile_info:
         const System.IO.withBinaryFile_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const SbyXw_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.471432214 UTC

[section ""data" . lvl_rbyQ6_closure" {
     lvl_rbyQ6_closure:
         const lvl_rbyQ6_info;
 },
 lvl_rbyQ6_entry() //  []
         { []
         }
     {offset
       cbzXe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbzXf; else goto cbzXg;
       cbzXf: // global
           R1 = lvl_rbyQ6_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbzXg: // global
           I64[Sp - 8] = block_cbzX9_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl_rbyQ6_info" {
     lvl_rbyQ6_info:
         const lvl_rbyQ6_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _cbzX9() //  []
         { []
         }
     {offset
       cbzX9: // global
           I64[Sp] = block_cbzXb_info;
           R1 = System.IO.hReady2_closure+1;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzX9_info" {
     block_cbzX9_info:
         const _cbzX9;
         const 0;
         const 30;
 },
 _cbzXb() //  [R1]
         { []
         }
     {offset
       cbzXb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbzXk; else goto cbzXj;
       cbzXk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbzXj: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzXb_info" {
     block_cbzXb_info:
         const _cbzXb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.478379988 UTC

[section ""data" . tempCounter_rbxCH_closure" {
     tempCounter_rbxCH_closure:
         const tempCounter_rbxCH_info;
         const 0;
         const 0;
         const 0;
 },
 tempCounter_rbxCH_entry() //  [R1]
         { []
         }
     {offset
       cbzXF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbzXG; else goto cbzXH;
       cbzXG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbzXH: // global
           (_cbzXA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbzXA::I64 == 0) goto cbzXC; else goto cbzXB;
       cbzXC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbzXB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbzXA::I64;
           I64[Sp - 24] = block_cbzXD_info;
           Sp = Sp - 24;
           call lvl_rbyQ6_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . tempCounter_rbxCH_info" {
     tempCounter_rbxCH_info:
         const tempCounter_rbxCH_entry;
         const 0;
         const 21;
 },
 _cbzXD() //  [R1]
         { []
         }
     {offset
       cbzXD: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbzXD_info" {
     block_cbzXD_info:
         const _cbzXD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.483180619 UTC

[section ""data" . pathSeparatorChar_rbxCK_closure" {
     pathSeparatorChar_rbxCK_closure:
         const GHC.Types.C#_con_info;
         const 47;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.485426118 UTC

[section ""cstring" . System.IO.$trModule4_bytes" {
     System.IO.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.487004196 UTC

[section ""data" . System.IO.$trModule3_closure" {
     System.IO.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.IO.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.488571193 UTC

[section ""cstring" . System.IO.$trModule2_bytes" {
     System.IO.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,73,79]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.49069526 UTC

[section ""data" . System.IO.$trModule1_closure" {
     System.IO.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.IO.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.492310525 UTC

[section ""data" . System.IO.$trModule_closure" {
     System.IO.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.IO.$trModule3_closure+1;
         const System.IO.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.494051555 UTC

[section ""data" . $krep_rbyQ7_closure" {
     $krep_rbyQ7_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.C.Error.$tcErrno_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.495733061 UTC

[section ""data" . $krep1_rbyQ8_closure" {
     $krep1_rbyQ8_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.C.Types.$tcCInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.497501976 UTC

[section ""cstring" . System.IO.$tcOpenNewFileResult2_bytes" {
     System.IO.$tcOpenNewFileResult2_bytes:
         I8[] [79,112,101,110,78,101,119,70,105,108,101,82,101,115,117,108,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.499117695 UTC

[section ""data" . System.IO.$tcOpenNewFileResult1_closure" {
     System.IO.$tcOpenNewFileResult1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.IO.$tcOpenNewFileResult2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.500769251 UTC

[section ""data" . System.IO.$tcOpenNewFileResult_closure" {
     System.IO.$tcOpenNewFileResult_closure:
         const GHC.Types.TyCon_con_info;
         const System.IO.$trModule_closure+1;
         const System.IO.$tcOpenNewFileResult1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9627069439367662246;
         const 2547759174955940786;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.502548601 UTC

[section ""data" . System.IO.$tc'FileExists1_closure" {
     System.IO.$tc'FileExists1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.IO.$tcOpenNewFileResult_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.504168973 UTC

[section ""cstring" . System.IO.$tc'FileExists3_bytes" {
     System.IO.$tc'FileExists3_bytes:
         I8[] [39,70,105,108,101,69,120,105,115,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.506189199 UTC

[section ""data" . System.IO.$tc'FileExists2_closure" {
     System.IO.$tc'FileExists2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.IO.$tc'FileExists3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.507909752 UTC

[section ""data" . System.IO.$tc'FileExists_closure" {
     System.IO.$tc'FileExists_closure:
         const GHC.Types.TyCon_con_info;
         const System.IO.$trModule_closure+1;
         const System.IO.$tc'FileExists2_closure+1;
         const System.IO.$tc'FileExists1_closure+1;
         const 6704133186904346962;
         const 16997416543076271011;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.510181323 UTC

[section ""data" . System.IO.$tc'NewFileCreated1_closure" {
     System.IO.$tc'NewFileCreated1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rbyQ8_closure+1;
         const System.IO.$tc'FileExists1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.511820105 UTC

[section ""cstring" . System.IO.$tc'NewFileCreated3_bytes" {
     System.IO.$tc'NewFileCreated3_bytes:
         I8[] [39,78,101,119,70,105,108,101,67,114,101,97,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.513492375 UTC

[section ""data" . System.IO.$tc'NewFileCreated2_closure" {
     System.IO.$tc'NewFileCreated2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.IO.$tc'NewFileCreated3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.51511752 UTC

[section ""data" . System.IO.$tc'NewFileCreated_closure" {
     System.IO.$tc'NewFileCreated_closure:
         const GHC.Types.TyCon_con_info;
         const System.IO.$trModule_closure+1;
         const System.IO.$tc'NewFileCreated2_closure+1;
         const System.IO.$tc'NewFileCreated1_closure+4;
         const 9070829168557028496;
         const 15570227817593865145;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.516910941 UTC

[section ""data" . System.IO.$tc'OpenNewError1_closure" {
     System.IO.$tc'OpenNewError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rbyQ7_closure+1;
         const System.IO.$tc'FileExists1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.518551941 UTC

[section ""cstring" . System.IO.$tc'OpenNewError3_bytes" {
     System.IO.$tc'OpenNewError3_bytes:
         I8[] [39,79,112,101,110,78,101,119,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.520166031 UTC

[section ""data" . System.IO.$tc'OpenNewError2_closure" {
     System.IO.$tc'OpenNewError2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.IO.$tc'OpenNewError3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.522442032 UTC

[section ""data" . System.IO.$tc'OpenNewError_closure" {
     System.IO.$tc'OpenNewError_closure:
         const GHC.Types.TyCon_con_info;
         const System.IO.$trModule_closure+1;
         const System.IO.$tc'OpenNewError2_closure+1;
         const System.IO.$tc'OpenNewError1_closure+4;
         const 300310999495895268;
         const 12582581010413704951;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.524911743 UTC

[section ""data" . lvl1_rbyQ9_closure" {
     lvl1_rbyQ9_closure:
         const lvl1_rbyQ9_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rbyQ9_entry() //  [R1]
         { []
         }
     {offset
       cbzYo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbzYp; else goto cbzYq;
       cbzYp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbzYq: // global
           (_cbzYl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbzYl::I64 == 0) goto cbzYn; else goto cbzYm;
       cbzYn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbzYm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbzYl::I64;
           R2 = GHC.IO.Exception.FixIOException_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionFixIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_rbyQ9_info" {
     lvl1_rbyQ9_info:
         const lvl1_rbyQ9_entry;
         const 0;
         const 4294967317;
         const SbyXw_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.528742753 UTC

[section ""data" . System.IO.fixIO3_closure" {
     System.IO.fixIO3_closure:
         const System.IO.fixIO3_info;
         const 0;
 },
 System.IO.fixIO3_entry() //  []
         { []
         }
     {offset
       cbzYC: // global
           R1 = lvl1_rbyQ9_closure;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.fixIO3_info" {
     System.IO.fixIO3_info:
         const System.IO.fixIO3_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SbyXw_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.534199586 UTC

[section ""data" . System.IO.fixIO2_closure" {
     System.IO.fixIO2_closure:
         const System.IO.fixIO2_info;
         const 0;
 },
 sat_sbySX_entry() //  [R1]
         { []
         }
     {offset
       cbzZ5: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbySX_info" {
     sat_sbySX_info:
         const sat_sbySX_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 System.IO.fixIO2_entry() //  [R2]
         { []
         }
     {offset
       cbzZ8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbzZ9; else goto cbzZa;
       cbzZ9: // global
           R2 = R2;
           R1 = System.IO.fixIO2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbzZa: // global
           I64[Sp - 8] = block_cbzYN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubzZs; else goto cbzYO;
       ubzZs: // global
           call _cbzYN(R1) args: 0, res: 0, upd: 0;
       cbzYO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.fixIO2_info" {
     System.IO.fixIO2_info:
         const System.IO.fixIO2_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const SbyXw_srt+232;
 },
 _cbzYN() //  [R1]
         { []
         }
     {offset
       cbzYN: // global
           I64[Sp - 16] = block_cbzYS_info;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzYN_info" {
     block_cbzYN_info:
         const _cbzYN;
         const 0;
         const 47244640286;
         const SbyXw_srt+232;
 },
 _cbzYS() //  [R1]
         { []
         }
     {offset
       cbzYS: // global
           I64[Sp] = block_cbzYW_info;
           R3 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzYS_info" {
     block_cbzYS_info:
         const _cbzYS;
         const 2;
         const 47244640286;
         const SbyXw_srt+232;
 },
 _cbzYW() //  [R1]
         { []
         }
     {offset
       cbzYW: // global
           if (R1 & 7 == 1) goto cbzZe; else goto cbzZm;
       cbzZe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbzZh; else goto cbzZg;
       cbzZh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbzZg: // global
           I64[Hp - 8] = sat_sbySX_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbzZm: // global
           I64[Sp + 16] = block_cbzZk_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzYW_info" {
     block_cbzYW_info:
         const _cbzYW;
         const 2;
         const 4294967326;
         const SbyXw_srt+256;
 },
 _cbzZk() //  []
         { []
         }
     {offset
       cbzZk: // global
           R1 = System.IO.fixIO3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzZk_info" {
     block_cbzZk_info:
         const _cbzZk;
         const 0;
         const 4294967326;
         const SbyXw_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.547501257 UTC

[section ""data" . System.IO.fixIO1_closure" {
     System.IO.fixIO1_closure:
         const System.IO.fixIO1_info;
         const 0;
 },
 sat_sbyT6_entry() //  [R1]
         { []
         }
     {offset
       cbA0a: // global
           R1 = P64[R1 + 7];
           call stg_readMVar#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbyT6_info" {
     sat_sbyT6_info:
         const sat_sbyT6_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sbyT7_entry() //  [R1]
         { []
         }
     {offset
       cbA0d: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbA0h; else goto cbA0g;
       cbA0h: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbA0g: // global
           _sbyT3::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_sbyT6_info;
           P64[Hp] = _sbyT3::P64;
           R2 = System.IO.fixIO2_closure+1;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbyT7_info" {
     sat_sbyT7_info:
         const sat_sbyT7_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const SbyXw_srt+248;
 },
 System.IO.fixIO1_entry() //  [R2]
         { []
         }
     {offset
       cbA0o: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbA0p; else goto cbA0q;
       cbA0p: // global
           R2 = R2;
           R1 = System.IO.fixIO1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbA0q: // global
           I64[Sp - 16] = block_cbzZY_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.fixIO1_info" {
     System.IO.fixIO1_info:
         const System.IO.fixIO1_entry;
         const 0;
         const 21474836494;
         const 8589934597;
         const SbyXw_srt+248;
 },
 _cbzZY() //  [R1]
         { []
         }
     {offset
       cbzZY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbA0t; else goto cbA0s;
       cbA0t: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbA0s: // global
           I64[Hp - 8] = sat_sbyT7_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_cbA0i_info;
           R2 = Hp - 7;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbzZY_info" {
     block_cbzZY_info:
         const _cbzZY;
         const 1;
         const 4294967326;
         const SbyXw_srt+248;
 },
 _cbA0i() //  [R1]
         { []
         }
     {offset
       cbA0i: // global
           I64[Sp] = block_cbA0k_info;
           R2 = R1;
           R1 = P64[Sp + 16];
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbA0i_info" {
     block_cbA0i_info:
         const _cbA0i;
         const 2;
         const 30;
 },
 _cbA0k() //  [R1]
         { []
         }
     {offset
       cbA0k: // global
           _sbyT3::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbA0m_info;
           R2 = R1;
           _sbyTd::P64 = R1;
           R1 = _sbyT3::P64;
           P64[Sp + 16] = _sbyTd::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbA0k_info" {
     block_cbA0k_info:
         const _cbA0k;
         const 130;
         const 30;
 },
 _cbA0m() //  []
         { []
         }
     {offset
       cbA0m: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbA0m_info" {
     block_cbA0m_info:
         const _cbA0m;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.559832588 UTC

[section ""data" . System.IO.fixIO_closure" {
     System.IO.fixIO_closure:
         const System.IO.fixIO_info;
         const 0;
 },
 System.IO.fixIO_entry() //  [R2]
         { []
         }
     {offset
       cbA0Z: // global
           R2 = R2;
           call System.IO.fixIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.fixIO_info" {
     System.IO.fixIO_info:
         const System.IO.fixIO_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbyXw_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.563031202 UTC

[section ""cstring" . System.IO.readIO9_bytes" {
     System.IO.readIO9_bytes:
         I8[] [80,114,101,108,117,100,101,46,114,101,97,100,73,79,58,32,110,111,32,112,97,114,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.565216416 UTC

[section ""data" . System.IO.readIO8_closure" {
     System.IO.readIO8_closure:
         const System.IO.readIO8_info;
         const 0;
         const 0;
         const 0;
 },
 System.IO.readIO8_entry() //  [R1]
         { []
         }
     {offset
       cbA1d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbA1e; else goto cbA1f;
       cbA1e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbA1f: // global
           (_cbA1a::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbA1a::I64 == 0) goto cbA1c; else goto cbA1b;
       cbA1c: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbA1b: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbA1a::I64;
           R2 = System.IO.readIO9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.IO.readIO8_info" {
     System.IO.readIO8_info:
         const System.IO.readIO8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.568740671 UTC

[section ""data" . System.IO.readIO7_closure" {
     System.IO.readIO7_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.UserError_closure+1;
         const GHC.Types.[]_closure+1;
         const System.IO.readIO8_closure;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.57107225 UTC

[section ""data" . System.IO.readIO6_closure" {
     System.IO.readIO6_closure:
         const System.IO.readIO6_info;
         const 0;
         const 0;
         const 0;
 },
 System.IO.readIO6_entry() //  [R1]
         { []
         }
     {offset
       cbA1u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbA1v; else goto cbA1w;
       cbA1v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbA1w: // global
           (_cbA1r::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbA1r::I64 == 0) goto cbA1t; else goto cbA1s;
       cbA1t: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbA1s: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbA1r::I64;
           R2 = System.IO.readIO7_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.IO.readIO6_info" {
     System.IO.readIO6_info:
         const System.IO.readIO6_entry;
         const 0;
         const 12884901909;
         const SbyXw_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.575255624 UTC

[section ""cstring" . System.IO.readIO5_bytes" {
     System.IO.readIO5_bytes:
         I8[] [80,114,101,108,117,100,101,46,114,101,97,100,73,79,58,32,97,109,98,105,103,117,111,117,115,32,112,97,114,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.577861503 UTC

[section ""data" . System.IO.readIO4_closure" {
     System.IO.readIO4_closure:
         const System.IO.readIO4_info;
         const 0;
         const 0;
         const 0;
 },
 System.IO.readIO4_entry() //  [R1]
         { []
         }
     {offset
       cbA1L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbA1M; else goto cbA1N;
       cbA1M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbA1N: // global
           (_cbA1I::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbA1I::I64 == 0) goto cbA1K; else goto cbA1J;
       cbA1K: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbA1J: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbA1I::I64;
           R2 = System.IO.readIO5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.IO.readIO4_info" {
     System.IO.readIO4_info:
         const System.IO.readIO4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.581474647 UTC

[section ""data" . System.IO.readIO3_closure" {
     System.IO.readIO3_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.UserError_closure+1;
         const GHC.Types.[]_closure+1;
         const System.IO.readIO4_closure;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.583691827 UTC

[section ""data" . System.IO.readIO2_closure" {
     System.IO.readIO2_closure:
         const System.IO.readIO2_info;
         const 0;
         const 0;
         const 0;
 },
 System.IO.readIO2_entry() //  [R1]
         { []
         }
     {offset
       cbA22: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbA23; else goto cbA24;
       cbA23: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbA24: // global
           (_cbA1Z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbA1Z::I64 == 0) goto cbA21; else goto cbA20;
       cbA21: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbA20: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbA1Z::I64;
           R2 = System.IO.readIO3_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.IO.readIO2_info" {
     System.IO.readIO2_info:
         const System.IO.readIO2_entry;
         const 0;
         const 21474836501;
         const SbyXw_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.59171803 UTC

[section ""data" . System.IO.readIO10_closure" {
     System.IO.readIO10_closure:
         const System.IO.readIO10_info;
         const 0;
 },
 z_sbyTn_entry() //  [R1]
         { []
         }
     {offset
       cbA2w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbA2x; else goto cbA2y;
       cbA2x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbA2y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.IO.readIO10_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sbyTn_info" {
     z_sbyTn_info:
         const z_sbyTn_entry;
         const 1;
         const 4294967312;
         const SbyXw_srt+296;
 },
 sat_sbyTy_entry() //  [R1]
         { []
         }
     {offset
       cbA33: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call go1_sbyTo_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbyTy_info" {
     sat_sbyTy_info:
         const sat_sbyTy_entry;
         const 2;
         const 18;
 },
 go1_sbyTo_entry() //  [R1, R2]
         { []
         }
     {offset
       cbA3a: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbA3b; else goto ubA3z;
       cbA3b: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ubA3z: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _cbA2B() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go1_sbyTo_info" {
     go1_sbyTo_info:
         const go1_sbyTo_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cbA2B() //  []
         { []
         }
     {offset
       cbA2B: // global
           I64[Sp - 16] = block_cbA2E_info;
           R1 = P64[Sp + 8];
           _sbyTo::P64 = P64[Sp];
           P64[Sp - 8] = P64[_sbyTo::P64 + 15];
           P64[Sp + 8] = P64[_sbyTo::P64 + 7];
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubA3D; else goto cbA2F;
       ubA3D: // global
           call _cbA2E(R1) args: 0, res: 0, upd: 0;
       cbA2F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbA2E() //  [R1]
         { []
         }
     {offset
       cbA2E: // global
           if (R1 & 7 == 1) goto cbA37; else goto cbA38;
       cbA37: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cbA38: // global
           I64[Sp] = block_cbA2K_info;
           _sbyTs::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 8] = _sbyTs::P64;
           if (R1 & 7 != 0) goto ubA3E; else goto cbA2L;
       ubA3E: // global
           call _cbA2K(R1) args: 0, res: 0, upd: 0;
       cbA2L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbA2E_info" {
     block_cbA2E_info:
         const _cbA2E;
         const 3;
         const 30;
 },
 _cbA2K() //  [R1]
         { []
         }
     {offset
       cbA2K: // global
           I64[Sp - 8] = block_cbA2P_info;
           _sbyTv::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sbyTv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubA3F; else goto cbA2Q;
       ubA3F: // global
           call _cbA2P(R1) args: 0, res: 0, upd: 0;
       cbA2Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbA2K_info" {
     block_cbA2K_info:
         const _cbA2K;
         const 3;
         const 30;
 },
 _cbA2P() //  [R1]
         { []
         }
     {offset
       cbA2P: // global
           if (R1 & 7 == 1) goto cbA3j; else goto ubA3A;
       cbA3j: // global
           _sbyTv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbA2U_info;
           R1 = _sbyTv::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubA3G; else goto cbA2V;
       ubA3G: // global
           call _cbA2U(R1) args: 0, res: 0, upd: 0;
       cbA2V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubA3A: // global
           Sp = Sp + 16;
           call _cbA3w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbA2P_info" {
     block_cbA2P_info:
         const _cbA2P;
         const 4;
         const 30;
 },
 _cbA2U() //  [R1]
         { []
         }
     {offset
       cbA2U: // global
           if (R1 & 7 == 1) goto cbA3l; else goto ubA3B;
       cbA3l: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbA3o; else goto cbA3n;
       cbA3o: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbA3n: // global
           I64[Hp - 24] = sat_sbyTy_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 24;
           R2 = P64[Sp + 24];
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       ubA3B: // global
           Sp = Sp + 8;
           call _cbA3w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbA2U_info" {
     block_cbA2U_info:
         const _cbA2U;
         const 3;
         const 30;
 },
 _cbA3w() //  []
         { []
         }
     {offset
       cbA3w: // global
           P64[Sp + 16] = P64[Sp];
           Sp = Sp + 8;
           call _cbA2B() args: 0, res: 0, upd: 0;
     }
 },
 System.IO.readIO10_entry() //  [R2]
         { []
         }
     {offset
       cbA3P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbA3Q; else goto cbA3R;
       cbA3Q: // global
           R2 = R2;
           R1 = System.IO.readIO10_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbA3R: // global
           I64[Sp - 8] = block_cbA2g_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubA44; else goto cbA2h;
       ubA44: // global
           call _cbA2g(R1) args: 0, res: 0, upd: 0;
       cbA2h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.readIO10_info" {
     System.IO.readIO10_info:
         const System.IO.readIO10_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbyXw_srt+296;
 },
 _cbA2g() //  [R1]
         { []
         }
     {offset
       cbA2g: // global
           if (R1 & 7 == 1) goto cbA3M; else goto cbA3N;
       cbA3M: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbA3N: // global
           I64[Sp - 8] = block_cbA2m_info;
           _sbyTi::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sbyTi::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubA43; else goto cbA2n;
       ubA43: // global
           call _cbA2m(R1) args: 0, res: 0, upd: 0;
       cbA2n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbA2g_info" {
     block_cbA2g_info:
         const _cbA2g;
         const 0;
         const 12884901918;
         const SbyXw_srt+296;
 },
 _cbA2m() //  [R1]
         { []
         }
     {offset
       cbA2m: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbA3Y; else goto cbA3X;
       cbA3Y: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbA3X: // global
           _sbyTk::P64 = P64[R1 + 7];
           _sbyTl::P64 = P64[R1 + 15];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _sbyTk::P64;
           P64[Hp - 48] = GHC.Types.[]_closure+1;
           I64[Hp - 40] = z_sbyTn_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = go1_sbyTo_info;
           P64[Hp - 8] = Hp - 62;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cbA3U_info;
           R3 = _sbyTl::P64;
           R2 = GHC.Read.lex1_closure;
           P64[Sp + 8] = Hp - 15;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbA2m_info" {
     block_cbA2m_info:
         const _cbA2m;
         const 1;
         const 12884901918;
         const SbyXw_srt+296;
 },
 _cbA3U() //  [R1]
         { []
         }
     {offset
       cbA3U: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go1_sbyTo_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbA3U_info" {
     block_cbA3U_info:
         const _cbA3U;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.615281649 UTC

[section ""data" . System.IO.readIO1_closure" {
     System.IO.readIO1_closure:
         const System.IO.readIO1_info;
         const 0;
 },
 System.IO.readIO1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbA5g: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbA5h; else goto cbA5i;
       cbA5h: // global
           R3 = R3;
           R2 = R2;
           R1 = System.IO.readIO1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbA5i: // global
           I64[Sp - 8] = block_cbA5e_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           P64[Sp - 16] = R3;
           Sp = Sp - 32;
           call GHC.Read.readsPrec_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.readIO1_info" {
     System.IO.readIO1_info:
         const System.IO.readIO1_entry;
         const 0;
         const 124554051598;
         const 12884901903;
         const SbyXw_srt+296;
 },
 _cbA5e() //  [R1]
         { []
         }
     {offset
       cbA5e: // global
           I64[Sp] = block_cbA5l_info;
           R2 = R1;
           call System.IO.readIO10_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbA5e_info" {
     block_cbA5e_info:
         const _cbA5e;
         const 0;
         const 107374182430;
         const SbyXw_srt+296;
 },
 _cbA5l() //  [R1]
         { []
         }
     {offset
       cbA5l: // global
           if (R1 & 7 == 1) goto cbA5s; else goto cbA5x;
       cbA5s: // global
           R1 = System.IO.readIO6_closure;
           Sp = Sp + 8;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       cbA5x: // global
           I64[Sp - 8] = block_cbA5v_info;
           _sbyTJ::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sbyTJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubA5L; else goto cbA5y;
       ubA5L: // global
           call _cbA5v(R1) args: 0, res: 0, upd: 0;
       cbA5y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbA5l_info" {
     block_cbA5l_info:
         const _cbA5l;
         const 0;
         const 12884901918;
         const SbyXw_srt+320;
 },
 _cbA5v() //  [R1]
         { []
         }
     {offset
       cbA5v: // global
           if (R1 & 7 == 1) goto cbA5E; else goto cbA5I;
       cbA5E: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbA5I: // global
           R1 = System.IO.readIO2_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbA5v_info" {
     block_cbA5v_info:
         const _cbA5v;
         const 1;
         const 4294967326;
         const SbyXw_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.623915412 UTC

[section ""data" . System.IO.readIO_closure" {
     System.IO.readIO_closure:
         const System.IO.readIO_info;
         const 0;
 },
 System.IO.readIO_entry() //  [R2, R3]
         { []
         }
     {offset
       cbA6a: // global
           R3 = R3;
           R2 = R2;
           call System.IO.readIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.readIO_info" {
     System.IO.readIO_info:
         const System.IO.readIO_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbyXw_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.627707 UTC

[section ""data" . System.IO.readLn1_closure" {
     System.IO.readLn1_closure:
         const System.IO.readLn1_info;
         const 0;
 },
 section ""relreadonly" . ubA6r_srtd" {
     ubA6r_srtd:
         const SbyXw_srt+56;
         const 36;
         const 38654705769;
 },
 System.IO.readLn1_entry() //  [R2]
         { []
         }
     {offset
       cbA6n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbA6o; else goto cbA6p;
       cbA6o: // global
           R2 = R2;
           R1 = System.IO.readLn1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbA6p: // global
           I64[Sp - 16] = block_cbA6l_info;
           R4 = GHC.IO.Handle.Text.hGetLine2_closure+2;
           R3 = GHC.IO.Handle.FD.stdin_closure;
           _sbyTO::P64 = R2;
           R2 = GHC.IO.Handle.Text.hGetLine4_closure;
           P64[Sp - 8] = _sbyTO::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.readLn1_info" {
     System.IO.readLn1_info:
         const System.IO.readLn1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubA6r_srtd;
 },
 _cbA6l() //  [R1]
         { []
         }
     {offset
       cbA6l: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call System.IO.readIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbA6l_info" {
     block_cbA6l_info:
         const _cbA6l;
         const 1;
         const 4294967326;
         const SbyXw_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.63361713 UTC

[section ""data" . System.IO.readLn_closure" {
     System.IO.readLn_closure:
         const System.IO.readLn_info;
         const 0;
 },
 System.IO.readLn_entry() //  [R2]
         { []
         }
     {offset
       cbA6F: // global
           R2 = R2;
           call System.IO.readLn1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.readLn_info" {
     System.IO.readLn_info:
         const System.IO.readLn_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbyXw_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.637273617 UTC

[section ""data" . System.IO.readFile1_closure" {
     System.IO.readFile1_closure:
         const System.IO.readFile1_info;
         const 0;
 },
 System.IO.readFile1_entry() //  [R2]
         { []
         }
     {offset
       cbA6S: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbA6T; else goto cbA6U;
       cbA6T: // global
           R2 = R2;
           R1 = System.IO.readFile1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbA6U: // global
           I64[Sp - 8] = block_cbA6Q_info;
           R3 = GHC.IO.IOMode.ReadMode_closure+1;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Handle.FD.openFile1_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.readFile1_info" {
     System.IO.readFile1_info:
         const System.IO.readFile1_entry;
         const 0;
         const 1152921783779721230;
         const 8589934597;
         const SbyXw_srt+120;
 },
 _cbA6Q() //  [R1]
         { []
         }
     {offset
       cbA6Q: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.Handle.Text.hGetContents1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbA6Q_info" {
     block_cbA6Q_info:
         const _cbA6Q;
         const 0;
         const 4294967326;
         const SbyXw_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.64227797 UTC

[section ""data" . System.IO.readFile_closure" {
     System.IO.readFile_closure:
         const System.IO.readFile_info;
         const 0;
 },
 System.IO.readFile_entry() //  [R2]
         { []
         }
     {offset
       cbA78: // global
           R2 = R2;
           call System.IO.readFile1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.readFile_info" {
     System.IO.readFile_info:
         const System.IO.readFile_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbyXw_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.647063332 UTC

[section ""data" . System.IO.interact1_closure" {
     System.IO.interact1_closure:
         const System.IO.interact1_info;
         const 0;
 },
 sat_sbyU3_entry() //  [R1]
         { []
         }
     {offset
       cbA7p: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbyU3_info" {
     sat_sbyU3_info:
         const sat_sbyU3_entry;
         const 2;
         const 18;
 },
 section ""relreadonly" . ubA7y_srtd" {
     ubA7y_srtd:
         const SbyXw_srt;
         const 45;
         const 17592186078273;
 },
 System.IO.interact1_entry() //  [R2]
         { []
         }
     {offset
       cbA7s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbA7t; else goto cbA7u;
       cbA7t: // global
           R2 = R2;
           R1 = System.IO.interact1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbA7u: // global
           I64[Sp - 16] = block_cbA7j_info;
           _sbyTY::P64 = R2;
           R2 = GHC.IO.Handle.FD.stdin_closure;
           P64[Sp - 8] = _sbyTY::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Text.hGetContents1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.interact1_info" {
     System.IO.interact1_info:
         const System.IO.interact1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubA7y_srtd;
 },
 _cbA7j() //  [R1]
         { []
         }
     {offset
       cbA7j: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbA7x; else goto cbA7w;
       cbA7x: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbA7w: // global
           I64[Hp - 24] = sat_sbyU3_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R4 = GHC.Types.False_closure+1;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.FD.stdout_closure;
           Sp = Sp + 16;
           call GHC.IO.Handle.Text.hPutStr'_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbA7j_info" {
     block_cbA7j_info:
         const _cbA7j;
         const 1;
         const 12884901918;
         const SbyXw_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.65452082 UTC

[section ""data" . System.IO.interact_closure" {
     System.IO.interact_closure:
         const System.IO.interact_info;
         const 0;
 },
 System.IO.interact_entry() //  [R2]
         { []
         }
     {offset
       cbA7Q: // global
           R2 = R2;
           call System.IO.interact1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.interact_info" {
     System.IO.interact_info:
         const System.IO.interact_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbyXw_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.657539407 UTC

[section ""cstring" . lvl2_rbyQa_bytes" {
     lvl2_rbyQa_bytes:
         I8[] [98,117,103,32,105,110,32,83,121,115,116,101,109,46,73,79,46,111,112,101,110,84,101,109,112,70,105,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.659961616 UTC

[section ""data" . lvl3_rbyQb_closure" {
     lvl3_rbyQb_closure:
         const lvl3_rbyQb_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rbyQb_entry() //  [R1]
         { []
         }
     {offset
       cbA86: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbA87; else goto cbA88;
       cbA87: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbA88: // global
           (_cbA81::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbA81::I64 == 0) goto cbA83; else goto cbA82;
       cbA83: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbA82: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbA81::I64;
           I64[Sp - 24] = block_cbA84_info;
           R2 = lvl2_rbyQa_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_rbyQb_info" {
     lvl3_rbyQb_info:
         const lvl3_rbyQb_entry;
         const 0;
         const 4294967317;
         const SbyXw_srt+376;
 },
 _cbA84() //  [R1]
         { []
         }
     {offset
       cbA84: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbA84_info" {
     block_cbA84_info:
         const _cbA84;
         const 0;
         const 4294967326;
         const SbyXw_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.664735265 UTC

[section ""data" . lvl4_rbyQc_closure" {
     lvl4_rbyQc_closure:
         const GHC.Types.C#_con_info;
         const 46;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.667519451 UTC

[section ""data" . lvl5_rbyQd_closure" {
     lvl5_rbyQd_closure:
         const lvl5_rbyQd_info;
 },
 lvl5_rbyQd_entry() //  [R2]
         { []
         }
     {offset
       cbA8u: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbA8v; else goto cbA8w;
       cbA8v: // global
           R2 = R2;
           R1 = lvl5_rbyQd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbA8w: // global
           I64[Sp - 8] = block_cbA8r_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubA8E; else goto cbA8s;
       ubA8E: // global
           call _cbA8r(R1) args: 0, res: 0, upd: 0;
       cbA8s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl5_rbyQd_info" {
     lvl5_rbyQd_info:
         const lvl5_rbyQd_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbA8r() //  [R1]
         { []
         }
     {offset
       cbA8r: // global
           if (I64[R1 + 7] == 46) goto cbA8D; else goto cbA8C;
       cbA8D: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbA8C: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbA8r_info" {
     block_cbA8r_info:
         const _cbA8r;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.673485471 UTC

[section ""data" . lvl6_rbyQe_closure" {
     lvl6_rbyQe_closure:
         const lvl6_rbyQe_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_rbyQe_entry() //  [R1]
         { []
         }
     {offset
       cbA93: // global
           _rbyQe::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbA9M; else goto cbA9N;
       cbA9N: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbA9P; else goto cbA9O;
       cbA9P: // global
           HpAlloc = 16;
           goto cbA9M;
       cbA9M: // global
           R1 = _rbyQe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbA9O: // global
           (_cbA8T::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _rbyQe::P64);
           if (_cbA8T::I64 == 0) goto cbA8V; else goto cbA8U;
       cbA8V: // global
           call (I64[I64[_rbyQe::P64]])() args: 8, res: 0, upd: 8;
       cbA8U: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbA8T::I64;
           (_sbyUc::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_o_nonblock();
           (_sbyUg::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_o_noctty();
           (_sbyUk::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_o_creat();
           (_sbyUo::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_o_rdwr();
           (_sbyUs::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_o_excl();
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbyUc::I64)) | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbyUg::I64)) | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbyUk::I64)) | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbyUo::I64)) | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbyUs::I64));
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_rbyQe_info" {
     lvl6_rbyQe_info:
         const lvl6_rbyQe_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.679357062 UTC

[section ""data" . $wlvl_rbyQf_closure" {
     $wlvl_rbyQf_closure:
         const $wlvl_rbyQf_info;
         const 0;
 },
 sat_sbyUN_entry() //  [R1]
         { []
         }
     {offset
       cbAak: // global
           _sbyUN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbAal; else goto cbAam;
       cbAam: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbAao; else goto cbAan;
       cbAao: // global
           HpAlloc = 16;
           goto cbAal;
       cbAal: // global
           R1 = _sbyUN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAan: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbyUN::P64;
           _sbyUJ::P64 = P64[_sbyUN::P64 + 16];
           _sbyUK::P64 = P64[_sbyUN::P64 + 24];
           _sbyUI::I64 = I64[_sbyUN::P64 + 32];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _sbyUK::P64;
           R5 = Hp - 6;
           R4 = GHC.Base.Nothing_closure+1;
           R3 = _sbyUI::I64;
           R2 = _sbyUJ::P64;
           Sp = Sp - 16;
           call Foreign.C.Error.$werrnoToIOError_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbyUN_info" {
     sat_sbyUN_info:
         const sat_sbyUN_entry;
         const 4294967298;
         const 4294967311;
         const SbyXw_srt+384;
 },
 sat_sbyUO_entry() //  [R1]
         { []
         }
     {offset
       cbAap: // global
           _sbyUO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbAaq; else goto cbAar;
       cbAar: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbAat; else goto cbAas;
       cbAat: // global
           HpAlloc = 40;
           goto cbAaq;
       cbAaq: // global
           R1 = _sbyUO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAas: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbyUO::P64;
           _sbyUJ::P64 = P64[_sbyUO::P64 + 16];
           _sbyUK::P64 = P64[_sbyUO::P64 + 24];
           _sbyUI::I64 = I64[_sbyUO::P64 + 32];
           I64[Hp - 32] = sat_sbyUN_info;
           P64[Hp - 16] = _sbyUJ::P64;
           P64[Hp - 8] = _sbyUK::P64;
           I64[Hp] = _sbyUI::I64;
           R2 = Hp - 32;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbyUO_info" {
     sat_sbyUO_info:
         const sat_sbyUO_entry;
         const 4294967298;
         const 70373039144975;
         const SbyXw_srt+272;
 },
 $wlvl_rbyQf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbAau: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbAay; else goto cbAax;
       cbAay: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wlvl_rbyQf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbAax: // global
           I64[Hp - 32] = sat_sbyUO_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           I64[Hp] = R2;
           R1 = Hp - 32;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl_rbyQf_info" {
     $wlvl_rbyQf_info:
         const $wlvl_rbyQf_entry;
         const 0;
         const 211110527500302;
         const 17179869203;
         const SbyXw_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.688124214 UTC

[section ""data" . lvl7_rbyQg_closure" {
     lvl7_rbyQg_closure:
         const lvl7_rbyQg_info;
         const 0;
 },
 lvl7_rbyQg_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbAaS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbAaT; else goto cbAaU;
       cbAaT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = lvl7_rbyQg_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbAaU: // global
           I64[Sp - 24] = block_cbAaP_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubAaY; else goto cbAaQ;
       ubAaY: // global
           call _cbAaP(R1) args: 0, res: 0, upd: 0;
       cbAaQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl7_rbyQg_info" {
     lvl7_rbyQg_info:
         const lvl7_rbyQg_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const SbyXw_srt+392;
 },
 _cbAaP() //  [R1]
         { []
         }
     {offset
       cbAaP: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call $wlvl_rbyQf_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAaP_info" {
     block_cbAaP_info:
         const _cbAaP;
         const 2;
         const 4294967326;
         const SbyXw_srt+392;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.694172221 UTC

[section ""data" . lvl8_rbyQh_closure" {
     lvl8_rbyQh_closure:
         const lvl8_rbyQh_info;
 },
 sat_sbyUZ_entry() //  [R1]
         { []
         }
     {offset
       cbAbj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbAbq; else goto cbAbr;
       cbAbq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAbr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbAbg_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubAbv; else goto cbAbh;
       ubAbv: // global
           call _cbAbg(R1) args: 0, res: 0, upd: 0;
       cbAbh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbyUZ_info" {
     sat_sbyUZ_info:
         const sat_sbyUZ_entry;
         const 1;
         const 16;
 },
 _cbAbg() //  [R1]
         { []
         }
     {offset
       cbAbg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbAbu; else goto cbAbt;
       cbAbu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbAbt: // global
           _sbyUY::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sbyUY::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbAbg_info" {
     block_cbAbg_info:
         const _cbAbg;
         const 0;
         const 30;
 },
 lvl8_rbyQh_entry() //  [R2]
         { []
         }
     {offset
       cbAbx: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbAbB; else goto cbAbA;
       cbAbB: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = lvl8_rbyQh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbAbA: // global
           I64[Hp - 40] = sat_sbyUZ_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl8_rbyQh_info" {
     lvl8_rbyQh_info:
         const lvl8_rbyQh_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.701868303 UTC

[section ""data" . go_rbyQi_closure" {
     go_rbyQi_closure:
         const go_rbyQi_info;
 },
 go_rbyQi_entry() //  [R2, R3]
         { []
         }
     {offset
       cbAc3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAc4; else goto ubAcc;
       cbAc4: // global
           R3 = R3;
           R2 = R2;
           R1 = go_rbyQi_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ubAcc: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cbAbT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_rbyQi_info" {
     go_rbyQi_info:
         const go_rbyQi_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbAbT() //  []
         { []
         }
     {offset
       cbAbT: // global
           _sbyV0::P64 = P64[Sp];
           I64[Sp] = block_cbAbW_info;
           R1 = _sbyV0::P64;
           if (R1 & 7 != 0) goto ubAce; else goto cbAbX;
       ubAce: // global
           call _cbAbW(R1) args: 0, res: 0, upd: 0;
       cbAbX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbAbW() //  [R1]
         { []
         }
     {offset
       cbAbW: // global
           if (R1 & 7 == 1) goto cbAc0; else goto cbAc1;
       cbAc0: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cbAc1: // global
           P64[Sp] = P64[R1 + 14];
           P64[Sp + 8] = P64[R1 + 6];
           call _cbAbT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbAbW_info" {
     block_cbAbW_info:
         const _cbAbW;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.707482235 UTC

[section ""cstring" . lvl9_rbyQj_bytes" {
     lvl9_rbyQj_bytes:
         I8[] [45]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.709099569 UTC

[section ""cstring" . lvl10_rbyQk_bytes" {
     lvl10_rbyQk_bytes:
         I8[] [111,112,101,110,84,101,109,112,70,105,108,101,39,58,32,84,101,109,112,108,97,116,101,32,115,116,114,105,110,103,32,109,117,115,116,32,110,111,116,32,99,111,110,116,97,105,110,32,112,97,116,104,32,115,101,112,97,114,97,116,111,114,32,99,104,97,114,97,99,116,101,114,115,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.711497133 UTC

[section ""data" . lvl11_rbyQl_closure" {
     lvl11_rbyQl_closure:
         const lvl11_rbyQl_info;
         const 0;
 },
 lvl11_rbyQl_entry() //  [R2]
         { []
         }
     {offset
       cbAcG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbAcH; else goto cbAcI;
       cbAcH: // global
           R2 = R2;
           R1 = lvl11_rbyQl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbAcI: // global
           I64[Sp - 8] = block_cbAcE_info;
           R3 = R2;
           R2 = lvl10_rbyQk_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl11_rbyQl_info" {
     lvl11_rbyQl_info:
         const lvl11_rbyQl_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SbyXw_srt+408;
 },
 _cbAcE() //  [R1]
         { []
         }
     {offset
       cbAcE: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAcE_info" {
     block_cbAcE_info:
         const _cbAcE;
         const 0;
         const 4294967326;
         const SbyXw_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.734728727 UTC

[section ""data" . System.IO.openBinaryTempFile5_closure" {
     System.IO.openBinaryTempFile5_closure:
         const System.IO.openBinaryTempFile5_info;
         const 0;
 },
 sat_sbyVl_entry() //  [R1]
         { []
         }
     {offset
       cbAdl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAdm; else goto cbAdn;
       cbAdm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAdn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.List.reverse_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbyVl_info" {
     sat_sbyVl_info:
         const sat_sbyVl_entry;
         const 1;
         const 16;
 },
 sat_sbyVs_entry() //  [R1]
         { []
         }
     {offset
       cbAdC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAdD; else goto cbAdE;
       cbAdD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAdE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.List.reverse_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbyVs_info" {
     sat_sbyVs_info:
         const sat_sbyVs_entry;
         const 1;
         const 16;
 },
 sat_sbyVr_entry() //  [R1]
         { []
         }
     {offset
       cbAdK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAdL; else goto cbAdM;
       cbAdL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAdM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.List.reverse_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbyVr_info" {
     sat_sbyVr_info:
         const sat_sbyVr_entry;
         const 1;
         const 16;
 },
 ds_sbyVf_entry() //  [R1]
         { []
         }
     {offset
       cbAdN: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbAdO; else goto cbAdP;
       cbAdO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAdP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbAd6_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_sbyVf_info" {
     ds_sbyVf_info:
         const ds_sbyVf_entry;
         const 1;
         const 4294967312;
         const SbyXw_srt+424;
 },
 _cbAd6() //  [R1]
         { []
         }
     {offset
       cbAd6: // global
           I64[Sp] = block_cbAda_info;
           R3 = R1;
           R2 = lvl5_rbyQd_closure+1;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbAd6_info" {
     block_cbAd6_info:
         const _cbAd6;
         const 0;
         const 4294967326;
         const SbyXw_srt+424;
 },
 _cbAda() //  [R1, R2]
         { []
         }
     {offset
       cbAda: // global
           I64[Sp - 8] = block_cbAdc_info;
           _sbyVi::P64 = R1;
           R1 = R2;
           P64[Sp] = _sbyVi::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubAe8; else goto cbAdd;
       ubAe8: // global
           call _cbAdc(R1) args: 0, res: 0, upd: 0;
       cbAdd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbAda_info" {
     block_cbAda_info:
         const _cbAda;
         const 0;
         const 4294967326;
         const SbyXw_srt+424;
 },
 _cbAdc() //  [R1]
         { []
         }
     {offset
       cbAdc: // global
           if (R1 & 7 == 1) goto cbAdU; else goto cbAdZ;
       cbAdU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbAdX; else goto cbAdW;
       cbAdX: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbAdW: // global
           I64[Hp - 40] = sat_sbyVl_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbAdZ: // global
           I64[Sp - 8] = block_cbAdq_info;
           _sbyVn::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sbyVn::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubAe9; else goto cbAdr;
       ubAe9: // global
           call _cbAdq(R1) args: 0, res: 0, upd: 0;
       cbAdr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbAdc_info" {
     block_cbAdc_info:
         const _cbAdc;
         const 1;
         const 4294967326;
         const SbyXw_srt+424;
 },
 _cbAdq() //  [R1]
         { []
         }
     {offset
       cbAdq: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cbAe2; else goto cbAe1;
       cbAe2: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbAe1: // global
           if (I64[R1 + 7] == 46) goto cbAe6; else goto cbAe4;
       cbAe6: // global
           I64[Hp - 88] = sat_sbyVs_info;
           P64[Hp - 72] = P64[Sp + 16];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = lvl4_rbyQc_closure+1;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = sat_sbyVr_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbAe4: // global
           Hp = Hp - 96;
           R1 = lvl3_rbyQb_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbAdq_info" {
     block_cbAdq_info:
         const _cbAdq;
         const 2;
         const 4294967326;
         const SbyXw_srt+424;
 },
 oflags_sbyVu_entry() //  [R1]
         { []
         }
     {offset
       cbAeh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbAei; else goto cbAej;
       cbAei: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAej: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbAee_info;
           _sbyVb::P64 = P64[R1 + 16];
           R1 = lvl6_rbyQe_closure;
           P64[Sp - 24] = _sbyVb::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubAeU; else goto cbAef;
       ubAeU: // global
           call _cbAee(R1) args: 0, res: 0, upd: 0;
       cbAef: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . oflags_sbyVu_info" {
     oflags_sbyVu_info:
         const oflags_sbyVu_entry;
         const 1;
         const 4294967312;
         const SbyXw_srt+432;
 },
 _cbAee() //  [R1]
         { []
         }
     {offset
       cbAee: // global
           I64[Sp - 8] = block_cbAem_info;
           _sbyVv::P64 = R1;
           _sbyVw::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _sbyVw::I64;
           P64[Sp + 8] = _sbyVv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubAeT; else goto cbAeo;
       ubAeT: // global
           call _cbAem(R1) args: 0, res: 0, upd: 0;
       cbAeo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbAee_info" {
     block_cbAee_info:
         const _cbAee;
         const 1;
         const 30;
 },
 _cbAem() //  [R1]
         { []
         }
     {offset
       cbAem: // global
           if (R1 & 7 == 1) goto cbAeu; else goto cbAeO;
       cbAeu: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cbAeO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbAeR; else goto cbAeQ;
       cbAeR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbAeQ: // global
           _sbyVw::I64 = I64[Sp + 8];
           (_sbyVB::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_o_binary();
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _sbyVw::I64 | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbyVB::I64));
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbAem_info" {
     block_cbAem_info:
         const _cbAem;
         const 66;
         const 30;
 },
 lvl12_sbyVH_entry() //  [R1, R2]
         { []
         }
     {offset
       cbAf3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbAfo; else goto cbAfp;
       cbAfo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbAfp: // global
           I64[Sp - 24] = block_cbAf0_info;
           _sbyVc::P64 = P64[R1 + 6];
           _sbyVu::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 16] = _sbyVc::P64;
           P64[Sp - 8] = _sbyVu::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubAfw; else goto cbAf1;
       ubAfw: // global
           call _cbAf0(R1) args: 0, res: 0, upd: 0;
       cbAf1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl12_sbyVH_info" {
     lvl12_sbyVH_info:
         const lvl12_sbyVH_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cbAf0() //  [R1]
         { []
         }
     {offset
       cbAf0: // global
           I64[Sp] = block_cbAf6_info;
           _sbyVL::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sbyVL::I64;
           if (R1 & 7 != 0) goto ubAfv; else goto cbAf7;
       ubAfv: // global
           call _cbAf6(R1) args: 0, res: 0, upd: 0;
       cbAf7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAf0_info" {
     block_cbAf0_info:
         const _cbAf0;
         const 2;
         const 30;
 },
 _cbAf6() //  [R1]
         { []
         }
     {offset
       cbAf6: // global
           I64[Sp] = block_cbAfb_info;
           _sbyVN::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sbyVN::I64;
           if (R1 & 7 != 0) goto ubAfx; else goto cbAfc;
       ubAfx: // global
           call _cbAfb(R1) args: 0, res: 0, upd: 0;
       cbAfc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAf6_info" {
     block_cbAf6_info:
         const _cbAf6;
         const 130;
         const 30;
 },
 _cbAfb() //  [R1]
         { []
         }
     {offset
       cbAfb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbAfu; else goto cbAft;
       cbAfu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbAft: // global
           (_sbyVT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     ‘signed’,]  result hints:  [‘signed’] __hscore_open(I64[Sp + 16], I64[Sp + 8], I64[R1 + 7]);
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbyVT::I64));
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAfb_info" {
     block_cbAfb_info:
         const _cbAfb;
         const 194;
         const 30;
 },
 sat_sbyVX_entry() //  [R1]
         { []
         }
     {offset
       cbAfG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAfH; else goto cbAfI;
       cbAfH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAfI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.List.lastError_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_rbyQi_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbyVX_info" {
     sat_sbyVX_info:
         const sat_sbyVX_entry;
         const 1;
         const 4294967312;
         const SbyXw_srt+440;
 },
 lvl13_sbyVW_entry() //  [R1]
         { []
         }
     {offset
       cbAfK: // global
           _sbyVW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbAfL; else goto cbAfM;
       cbAfM: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbAfO; else goto cbAfN;
       cbAfO: // global
           HpAlloc = 48;
           goto cbAfL;
       cbAfL: // global
           R1 = _sbyVW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAfN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbyVW::P64;
           _sbyV9::P64 = P64[_sbyVW::P64 + 16];
           I64[Hp - 40] = sat_sbyVX_info;
           P64[Hp - 24] = _sbyV9::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.Types.[]_closure+1;
           R4 = Hp - 14;
           R3 = pathSeparatorChar_rbxCK_closure+1;
           R2 = GHC.Classes.$fEqChar_closure;
           Sp = Sp - 16;
           call GHC.List.elem_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_sbyVW_info" {
     lvl13_sbyVW_info:
         const lvl13_sbyVW_entry;
         const 1;
         const 4294967312;
         const SbyXw_srt+440;
 },
 sat_sbyWv_entry() //  [R1]
         { []
         }
     {offset
       cbAgz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbAgF; else goto cbAgG;
       cbAgF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAgG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbAgw_info;
           _sbyWj::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sbyWj::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubAgL; else goto cbAgx;
       ubAgL: // global
           call _cbAgw(R1) args: 0, res: 0, upd: 0;
       cbAgx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbyWv_info" {
     sat_sbyWv_info:
         const sat_sbyWv_entry;
         const 2;
         const 18;
 },
 _cbAgw() //  [R1]
         { []
         }
     {offset
       cbAgw: // global
           I64[Sp] = block_cbAgC_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbAgw_info" {
     block_cbAgw_info:
         const _cbAgw;
         const 1;
         const 30;
 },
 _cbAgC() //  [R1, R2]
         { []
         }
     {offset
       cbAgC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbAgK; else goto cbAgJ;
       cbAgK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cbAgJ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = P64[Sp + 8];
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbAgC_info" {
     block_cbAgC_info:
         const _cbAgC;
         const 1;
         const 30;
 },
 sat_sbyWw_entry() //  [R1]
         { []
         }
     {offset
       cbAgM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbAgQ; else goto cbAgP;
       cbAgQ: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAgP: // global
           _sbyWc::P64 = P64[R1 + 16];
           _sbyWj::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sbyWv_info;
           P64[Hp - 8] = _sbyWc::P64;
           P64[Hp] = _sbyWj::P64;
           R3 = Hp - 24;
           R2 = lvl9_rbyQj_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbyWw_info" {
     sat_sbyWw_info:
         const sat_sbyWw_entry;
         const 2;
         const 18;
 },
 sat_sbyWx_entry() //  [R1]
         { []
         }
     {offset
       cbAgR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbAgT; else goto cbAgU;
       cbAgT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAgU: // global
           I64[Sp - 24] = block_cbAgm_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[R1 + 32]));
           R2 = 0;
           P64[Sp - 16] = P64[R1 + 16];
           P64[Sp - 8] = P64[R1 + 24];
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbyWx_info" {
     sat_sbyWx_info:
         const sat_sbyWx_entry;
         const 4294967298;
         const 15;
 },
 _cbAgm() //  [R1, R2]
         { []
         }
     {offset
       cbAgm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbAgX; else goto cbAgW;
       cbAgX: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cbAgW: // global
           I64[Hp - 48] = sat_sbyWw_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAgm_info" {
     block_cbAgm_info:
         const _cbAgm;
         const 2;
         const 30;
 },
 filepath_sbyWg_entry() //  [R1]
         { []
         }
     {offset
       cbAgY: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cbAgZ; else goto cbAh0;
       cbAgZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAh0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cbAga_info;
           _sbyV9::P64 = P64[R1 + 16];
           _sbyVW::P64 = P64[R1 + 32];
           _sbyWc::P64 = P64[R1 + 40];
           _sbyW7::I64 = I64[R1 + 48];
           R1 = P64[R1 + 24];
           P64[Sp - 48] = _sbyV9::P64;
           P64[Sp - 40] = _sbyVW::P64;
           I64[Sp - 32] = _sbyW7::I64;
           P64[Sp - 24] = _sbyWc::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ubAhJ; else goto cbAgb;
       ubAhJ: // global
           call _cbAga(R1) args: 0, res: 0, upd: 0;
       cbAgb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . filepath_sbyWg_info" {
     filepath_sbyWg_info:
         const filepath_sbyWg_entry;
         const 4294967300;
         const 15;
 },
 _cbAga() //  [R1]
         { []
         }
     {offset
       cbAga: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbAh4; else goto cbAh3;
       cbAh4: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbAh3: // global
           _sbyWi::P64 = P64[R1 + 7];
           _sbyWj::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sbyWx_info;
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = _sbyWj::P64;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_cbAh1_info;
           R3 = Hp - 32;
           R2 = _sbyWi::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbAga_info" {
     block_cbAga_info:
         const _cbAga;
         const 260;
         const 30;
 },
 _cbAh1() //  [R1]
         { []
         }
     {offset
       cbAh1: // global
           _sbyV9::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbAha; else goto cbAhf;
       cbAha: // global
           R1 = _sbyV9::P64 & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cbAhf: // global
           I64[Sp + 8] = block_cbAhd_info;
           _sbyWy::P64 = R1;
           R1 = _sbyV9::P64;
           P64[Sp + 32] = _sbyWy::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubAhK; else goto cbAhg;
       ubAhK: // global
           call _cbAhd(R1) args: 0, res: 0, upd: 0;
       cbAhg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbAh1_info" {
     block_cbAh1_info:
         const _cbAh1;
         const 772;
         const 30;
 },
 _cbAhd() //  [R1]
         { []
         }
     {offset
       cbAhd: // global
           if (R1 & 7 == 1) goto cbAhm; else goto cbAhr;
       cbAhm: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cbAhr: // global
           _sbyVW::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbAhp_info;
           _sbyWB::P64 = R1;
           R1 = _sbyVW::P64;
           P64[Sp + 16] = _sbyWB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubAhL; else goto cbAhs;
       ubAhL: // global
           call _cbAhp(R1) args: 0, res: 0, upd: 0;
       cbAhs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbAhd_info" {
     block_cbAhd_info:
         const _cbAhd;
         const 131;
         const 30;
 },
 _cbAhp() //  [R1]
         { []
         }
     {offset
       cbAhp: // global
           _sbyWy::P64 = P64[Sp + 16];
           _sbyWB::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbAhy; else goto cbAhF;
       cbAhy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbAhB; else goto cbAhA;
       cbAhB: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbAhA: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = pathSeparatorChar_rbxCK_closure+1;
           P64[Hp] = _sbyWy::P64;
           R3 = Hp - 14;
           R2 = _sbyWB::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cbAhF: // global
           R3 = _sbyWy::P64;
           R2 = _sbyWB::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbAhp_info" {
     block_cbAhp_info:
         const _cbAhp;
         const 2;
         const 30;
 },
 System.IO.openBinaryTempFile5_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbAhQ: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbAhR; else goto cbAhS;
       cbAhR: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.IO.openBinaryTempFile5_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbAhS: // global
           I64[Sp - 48] = block_cbAcY_info;
           _sbyVa::P64 = R4;
           R4 = R4;
           _sbyV9::P64 = R3;
           R3 = pathSeparatorChar_rbxCK_closure+1;
           _sbyV8::P64 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp - 40] = _sbyV8::P64;
           P64[Sp - 32] = _sbyV9::P64;
           P64[Sp - 24] = _sbyVa::P64;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.openBinaryTempFile5_info" {
     System.IO.openBinaryTempFile5_info:
         const System.IO.openBinaryTempFile5_entry;
         const 0;
         const 17579301142542;
         const 25769803801;
         const SbyXw_srt+400;
 },
 _cbAcY() //  [R1]
         { []
         }
     {offset
       cbAcY: // global
           _sbyVa::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cbAhN; else goto cbAhO;
       cbAhN: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cbAhV; else goto cbAhU;
       cbAhV: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbAhU: // global
           I64[Hp - 88] = ds_sbyVf_info;
           P64[Hp - 72] = _sbyVa::P64;
           I64[Hp - 64] = oflags_sbyVu_info;
           P64[Hp - 48] = P64[Sp + 32];
           I64[Hp - 40] = lvl12_sbyVH_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = lvl13_sbyVW_info;
           P64[Hp] = P64[Sp + 16];
           P64[Sp + 24] = Hp - 16;
           P64[Sp + 32] = Hp - 38;
           P64[Sp + 40] = Hp - 88;
           Sp = Sp + 8;
           call _cbAfU() args: 0, res: 0, upd: 0;
       cbAhO: // global
           R2 = _sbyVa::P64;
           Sp = Sp + 48;
           call lvl11_rbyQl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAcY_info" {
     block_cbAcY_info:
         const _cbAcY;
         const 5;
         const 8783208120350;
         const SbyXw_srt+400;
 },
 _cbAfU() //  []
         { []
         }
     {offset
       cbAfU: // global
           (_sbyW7::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] getpid();
           I64[Sp - 16] = block_cbAfX_info;
           R1 = tempCounter_rbxCH_closure;
           I64[Sp - 8] = _sbyW7::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubAjJ; else goto cbAfY;
       ubAjJ: // global
           call _cbAfX(R1) args: 0, res: 0, upd: 0;
       cbAfY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbAfX() //  [R1]
         { []
         }
     {offset
       cbAfX: // global
           I64[Sp] = block_cbAg2_info;
           R2 = lvl8_rbyQh_closure+1;
           R1 = P64[R1 + 7];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAfX_info" {
     block_cbAfX_info:
         const _cbAfX;
         const 70;
         const 8525510082590;
         const SbyXw_srt+400;
 },
 _cbAg2() //  [R1]
         { []
         }
     {offset
       cbAg2: // global
           I64[Sp - 8] = block_cbAg4_info;
           _sbyWc::P64 = R1;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp] = _sbyWc::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAg2_info" {
     block_cbAg2_info:
         const _cbAg2;
         const 70;
         const 8525510082590;
         const SbyXw_srt+400;
 },
 _cbAg4() //  [R1]
         { []
         }
     {offset
       cbAg4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbAi8; else goto cbAi7;
       cbAi8: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbAi7: // global
           I64[Hp - 48] = filepath_sbyWg_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 56];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           I64[Sp + 8] = block_cbAi0_info;
           R4 = P64[Sp + 48];
           _cbAg6::P64 = Hp - 48;
           R3 = _cbAg6::P64;
           R2 = R1;
           P64[Sp + 16] = _cbAg6::P64;
           Sp = Sp + 8;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAg4_info" {
     block_cbAg4_info:
         const _cbAg4;
         const 135;
         const 8525510082590;
         const SbyXw_srt+400;
 },
 _cbAi0() //  [R1]
         { []
         }
     {offset
       cbAi0: // global
           I64[Sp] = block_cbAi2_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubAjK; else goto cbAia;
       ubAjK: // global
           call _cbAi2(R1) args: 0, res: 0, upd: 0;
       cbAia: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAi0_info" {
     block_cbAi0_info:
         const _cbAi0;
         const 6;
         const 8525510082590;
         const SbyXw_srt+400;
 },
 _cbAi2() //  [R1]
         { []
         }
     {offset
       cbAi2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbAig; else goto cbAif;
       cbAig: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbAif: // global
           if (%MO_S_Ge_W64(I64[R1 + 7], 0)) goto cbAj7; else goto cbAjs;
       cbAj7: // global
           I64[Hp - 8] = System.IO.NewFileCreated_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 7;
           goto ubAjN;
       cbAjs: // global
           (_sbyXd::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           Hp = Hp - 16;
           _sbyXe::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbyXd::I64));
           if (_sbyXe::I64 != 17) goto ubAjD; else goto cbAjo;
       ubAjD: // global
           I64[Sp] = _sbyXe::I64;
           call _cbAjh() args: 0, res: 0, upd: 0;
       cbAjo: // global
           P64[Sp] = System.IO.FileExists_closure+2;
           goto ubAjN;
       ubAjN: // global
           call _sbyWL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbAi2_info" {
     block_cbAi2_info:
         const _cbAi2;
         const 6;
         const 8525510082590;
         const SbyXw_srt+400;
 },
 _cbAjh() //  []
         { []
         }
     {offset
       cbAjh: // global
           Hp = Hp + 32;
           _sbyXe::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto cbAjl; else goto cbAjk;
       cbAjl: // global
           HpAlloc = 32;
           I64[Sp] = block_cbAje_info;
           R1 = _sbyXe::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbAjk: // global
           I64[Hp - 24] = GHC.Int.I32#_con_info;
           I64[Hp - 16] = _sbyXe::I64;
           I64[Hp - 8] = System.IO.OpenNewError_con_info;
           P64[Hp] = Hp - 23;
           P64[Sp] = Hp - 5;
           call _sbyWL() args: 0, res: 0, upd: 0;
     }
 },
 _cbAje() //  [R1]
         { []
         }
     {offset
       cbAje: // global
           I64[Sp] = R1;
           call _cbAjh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbAje_info" {
     block_cbAje_info:
         const _cbAje;
         const 6;
         const 8525510082590;
         const SbyXw_srt+400;
 },
 _sbyWL() //  []
         { []
         }
     {offset
       sbyWL: // global
           _sbyWN::P64 = P64[Sp];
           I64[Sp] = block_cbAim_info;
           R1 = _sbyWN::P64;
           if (R1 & 7 != 0) goto ubAjT; else goto cbAio;
       ubAjT: // global
           call _cbAim(R1) args: 0, res: 0, upd: 0;
       cbAio: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbAim() //  [R1]
         { []
         }
     {offset
       cbAim: // global
           _cbAjz::P64 = R1 & 7;
           if (_cbAjz::P64 < 3) goto ubAjA; else goto cbAj3;
       ubAjA: // global
           if (_cbAjz::P64 < 2) goto cbAiM; else goto ubAjH;
       cbAiM: // global
           I64[Sp] = block_cbAis_info;
           R5 = GHC.Types.True_closure+2;
           R4 = GHC.Base.Nothing_closure+1;
           R3 = GHC.IO.IOMode.ReadWriteMode_closure+4;
           R2 = P64[R1 + 7];
           call GHC.IO.FD.$wmkFD_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
       ubAjH: // global
           Sp = Sp + 16;
           call _cbAfU() args: 0, res: 0, upd: 0;
       cbAj3: // global
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 5];
           Sp = Sp + 56;
           call lvl7_rbyQg_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAim_info" {
     block_cbAim_info:
         const _cbAim;
         const 6;
         const 8525510082590;
         const SbyXw_srt+400;
 },
 _cbAis() //  [R1]
         { []
         }
     {offset
       cbAis: // global
           I64[Sp] = block_cbAiu_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubAjP; else goto cbAiv;
       ubAjP: // global
           call _cbAiu(R1) args: 0, res: 0, upd: 0;
       cbAiv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAis_info" {
     block_cbAis_info:
         const _cbAis;
         const 3974;
         const 21474836510;
         const SbyXw_srt+456;
 },
 _cbAiu() //  [R1]
         { []
         }
     {offset
       cbAiu: // global
           I64[Sp] = block_cbAiz_info;
           _sbyWU::P64 = P64[R1 + 7];
           _sbyWV::P64 = P64[R1 + 15];
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           P64[Sp + 40] = _sbyWV::P64;
           P64[Sp + 48] = _sbyWU::P64;
           if (R1 & 7 != 0) goto ubAjQ; else goto cbAiA;
       ubAjQ: // global
           call _cbAiz(R1) args: 0, res: 0, upd: 0;
       cbAiA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAiu_info" {
     block_cbAiu_info:
         const _cbAiu;
         const 3974;
         const 21474836510;
         const SbyXw_srt+456;
 },
 _cbAiz() //  [R1]
         { []
         }
     {offset
       cbAiz: // global
           I64[Sp] = block_cbAiE_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAiz_info" {
     block_cbAiz_info:
         const _cbAiz;
         const 902;
         const 4294967326;
         const SbyXw_srt+472;
 },
 _cbAiE() //  [R1]
         { []
         }
     {offset
       cbAiE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbAiS; else goto cbAiR;
       cbAiS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbAiR: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           I64[Sp] = block_cbAiH_info;
           R6 = GHC.Types.False_closure+1;
           R5 = GHC.IO.IOMode.ReadWriteMode_closure+4;
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 48];
           P64[Sp - 8] = Hp - 6;
           Sp = Sp - 8;
           call GHC.IO.Handle.FD.fdToHandle5_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAiE_info" {
     block_cbAiE_info:
         const _cbAiE;
         const 902;
         const 4294967326;
         const SbyXw_srt+472;
 },
 _cbAiH() //  [R1]
         { []
         }
     {offset
       cbAiH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbAiV; else goto cbAiU;
       cbAiV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbAiU: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAiH_info" {
     block_cbAiH_info:
         const _cbAiH;
         const 3974;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.810735914 UTC

[section ""cstring" . System.IO.openBinaryTempFileWithDefaultPermissions4_bytes" {
     System.IO.openBinaryTempFileWithDefaultPermissions4_bytes:
         I8[] [111,112,101,110,66,105,110,97,114,121,84,101,109,112,70,105,108,101,87,105,116,104,68,101,102,97,117,108,116,80,101,114,109,105,115,115,105,111,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.813089183 UTC

[section ""data" . System.IO.openBinaryTempFileWithDefaultPermissions3_closure" {
     System.IO.openBinaryTempFileWithDefaultPermissions3_closure:
         const System.IO.openBinaryTempFileWithDefaultPermissions3_info;
         const 0;
         const 0;
         const 0;
 },
 System.IO.openBinaryTempFileWithDefaultPermissions3_entry() //  [R1]
         { []
         }
     {offset
       cbAnB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAnC; else goto cbAnD;
       cbAnC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAnD: // global
           (_cbAny::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbAny::I64 == 0) goto cbAnA; else goto cbAnz;
       cbAnA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbAnz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbAny::I64;
           R2 = System.IO.openBinaryTempFileWithDefaultPermissions4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.IO.openBinaryTempFileWithDefaultPermissions3_info" {
     System.IO.openBinaryTempFileWithDefaultPermissions3_info:
         const System.IO.openBinaryTempFileWithDefaultPermissions3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.817101921 UTC

[section ""data" . System.IO.openBinaryTempFileWithDefaultPermissions2_closure" {
     System.IO.openBinaryTempFileWithDefaultPermissions2_closure:
         const GHC.Word.W32#_con_info;
         const 438;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.819245971 UTC

[section ""data" . System.IO.openBinaryTempFileWithDefaultPermissions1_closure" {
     System.IO.openBinaryTempFileWithDefaultPermissions1_closure:
         const System.IO.openBinaryTempFileWithDefaultPermissions1_info;
         const 0;
 },
 System.IO.openBinaryTempFileWithDefaultPermissions1_entry() //  [R2,
                                                                  R3]
         { []
         }
     {offset
       cbAnQ: // global
           R6 = System.IO.openBinaryTempFileWithDefaultPermissions2_closure+1;
           R5 = GHC.Types.True_closure+2;
           R4 = R3;
           R3 = R2;
           R2 = System.IO.openBinaryTempFileWithDefaultPermissions3_closure;
           call System.IO.openBinaryTempFile5_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.openBinaryTempFileWithDefaultPermissions1_info" {
     System.IO.openBinaryTempFileWithDefaultPermissions1_info:
         const System.IO.openBinaryTempFileWithDefaultPermissions1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const SbyXw_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.822764573 UTC

[section ""data" . System.IO.openBinaryTempFileWithDefaultPermissions_closure" {
     System.IO.openBinaryTempFileWithDefaultPermissions_closure:
         const System.IO.openBinaryTempFileWithDefaultPermissions_info;
         const 0;
 },
 System.IO.openBinaryTempFileWithDefaultPermissions_entry() //  [R2,
                                                                 R3]
         { []
         }
     {offset
       cbAo1: // global
           R3 = R3;
           R2 = R2;
           call System.IO.openBinaryTempFileWithDefaultPermissions1_entry(R3,
                                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.openBinaryTempFileWithDefaultPermissions_info" {
     System.IO.openBinaryTempFileWithDefaultPermissions_info:
         const System.IO.openBinaryTempFileWithDefaultPermissions_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbyXw_srt+504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.825909638 UTC

[section ""cstring" . System.IO.openTempFileWithDefaultPermissions3_bytes" {
     System.IO.openTempFileWithDefaultPermissions3_bytes:
         I8[] [111,112,101,110,84,101,109,112,70,105,108,101,87,105,116,104,68,101,102,97,117,108,116,80,101,114,109,105,115,115,105,111,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.828141064 UTC

[section ""data" . System.IO.openTempFileWithDefaultPermissions2_closure" {
     System.IO.openTempFileWithDefaultPermissions2_closure:
         const System.IO.openTempFileWithDefaultPermissions2_info;
         const 0;
         const 0;
         const 0;
 },
 System.IO.openTempFileWithDefaultPermissions2_entry() //  [R1]
         { []
         }
     {offset
       cbAof: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAog; else goto cbAoh;
       cbAog: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAoh: // global
           (_cbAoc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbAoc::I64 == 0) goto cbAoe; else goto cbAod;
       cbAoe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbAod: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbAoc::I64;
           R2 = System.IO.openTempFileWithDefaultPermissions3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.IO.openTempFileWithDefaultPermissions2_info" {
     System.IO.openTempFileWithDefaultPermissions2_info:
         const System.IO.openTempFileWithDefaultPermissions2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.831996395 UTC

[section ""data" . System.IO.openTempFileWithDefaultPermissions1_closure" {
     System.IO.openTempFileWithDefaultPermissions1_closure:
         const System.IO.openTempFileWithDefaultPermissions1_info;
         const 0;
 },
 System.IO.openTempFileWithDefaultPermissions1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbAot: // global
           R6 = System.IO.openBinaryTempFileWithDefaultPermissions2_closure+1;
           R5 = GHC.Types.False_closure+1;
           R4 = R3;
           R3 = R2;
           R2 = System.IO.openTempFileWithDefaultPermissions2_closure;
           call System.IO.openBinaryTempFile5_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.openTempFileWithDefaultPermissions1_info" {
     System.IO.openTempFileWithDefaultPermissions1_info:
         const System.IO.openTempFileWithDefaultPermissions1_entry;
         const 0;
         const 38654705678;
         const 12884901903;
         const SbyXw_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.835907016 UTC

[section ""data" . System.IO.openTempFileWithDefaultPermissions_closure" {
     System.IO.openTempFileWithDefaultPermissions_closure:
         const System.IO.openTempFileWithDefaultPermissions_info;
         const 0;
 },
 System.IO.openTempFileWithDefaultPermissions_entry() //  [R2, R3]
         { []
         }
     {offset
       cbAoE: // global
           R3 = R3;
           R2 = R2;
           call System.IO.openTempFileWithDefaultPermissions1_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.openTempFileWithDefaultPermissions_info" {
     System.IO.openTempFileWithDefaultPermissions_info:
         const System.IO.openTempFileWithDefaultPermissions_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbyXw_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.839488185 UTC

[section ""cstring" . System.IO.openBinaryTempFile4_bytes" {
     System.IO.openBinaryTempFile4_bytes:
         I8[] [111,112,101,110,66,105,110,97,114,121,84,101,109,112,70,105,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.841825496 UTC

[section ""data" . System.IO.openBinaryTempFile3_closure" {
     System.IO.openBinaryTempFile3_closure:
         const System.IO.openBinaryTempFile3_info;
         const 0;
         const 0;
         const 0;
 },
 System.IO.openBinaryTempFile3_entry() //  [R1]
         { []
         }
     {offset
       cbAoS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAoT; else goto cbAoU;
       cbAoT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAoU: // global
           (_cbAoP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbAoP::I64 == 0) goto cbAoR; else goto cbAoQ;
       cbAoR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbAoQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbAoP::I64;
           R2 = System.IO.openBinaryTempFile4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.IO.openBinaryTempFile3_info" {
     System.IO.openBinaryTempFile3_info:
         const System.IO.openBinaryTempFile3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.845456979 UTC

[section ""data" . System.IO.openBinaryTempFile2_closure" {
     System.IO.openBinaryTempFile2_closure:
         const GHC.Word.W32#_con_info;
         const 384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.847580156 UTC

[section ""data" . System.IO.openBinaryTempFile1_closure" {
     System.IO.openBinaryTempFile1_closure:
         const System.IO.openBinaryTempFile1_info;
         const 0;
 },
 System.IO.openBinaryTempFile1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbAp7: // global
           R6 = System.IO.openBinaryTempFile2_closure+1;
           R5 = GHC.Types.True_closure+2;
           R4 = R3;
           R3 = R2;
           R2 = System.IO.openBinaryTempFile3_closure;
           call System.IO.openBinaryTempFile5_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.openBinaryTempFile1_info" {
     System.IO.openBinaryTempFile1_info:
         const System.IO.openBinaryTempFile1_entry;
         const 0;
         const 141733920782;
         const 12884901903;
         const SbyXw_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.851637967 UTC

[section ""data" . System.IO.openBinaryTempFile_closure" {
     System.IO.openBinaryTempFile_closure:
         const System.IO.openBinaryTempFile_info;
         const 0;
 },
 System.IO.openBinaryTempFile_entry() //  [R2, R3]
         { []
         }
     {offset
       cbApi: // global
           R3 = R3;
           R2 = R2;
           call System.IO.openBinaryTempFile1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.openBinaryTempFile_info" {
     System.IO.openBinaryTempFile_info:
         const System.IO.openBinaryTempFile_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbyXw_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.854678706 UTC

[section ""cstring" . System.IO.openTempFile3_bytes" {
     System.IO.openTempFile3_bytes:
         I8[] [111,112,101,110,84,101,109,112,70,105,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.856892006 UTC

[section ""data" . System.IO.openTempFile2_closure" {
     System.IO.openTempFile2_closure:
         const System.IO.openTempFile2_info;
         const 0;
         const 0;
         const 0;
 },
 System.IO.openTempFile2_entry() //  [R1]
         { []
         }
     {offset
       cbApw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbApx; else goto cbApy;
       cbApx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbApy: // global
           (_cbApt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbApt::I64 == 0) goto cbApv; else goto cbApu;
       cbApv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbApu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbApt::I64;
           R2 = System.IO.openTempFile3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.IO.openTempFile2_info" {
     System.IO.openTempFile2_info:
         const System.IO.openTempFile2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.860963315 UTC

[section ""data" . System.IO.openTempFile1_closure" {
     System.IO.openTempFile1_closure:
         const System.IO.openTempFile1_info;
         const 0;
 },
 System.IO.openTempFile1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbApK: // global
           R6 = System.IO.openBinaryTempFile2_closure+1;
           R5 = GHC.Types.False_closure+1;
           R4 = R3;
           R3 = R2;
           R2 = System.IO.openTempFile2_closure;
           call System.IO.openBinaryTempFile5_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.openTempFile1_info" {
     System.IO.openTempFile1_info:
         const System.IO.openTempFile1_entry;
         const 0;
         const 554050781198;
         const 12884901903;
         const SbyXw_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.864507854 UTC

[section ""data" . System.IO.openTempFile_closure" {
     System.IO.openTempFile_closure:
         const System.IO.openTempFile_info;
         const 0;
 },
 System.IO.openTempFile_entry() //  [R2, R3]
         { []
         }
     {offset
       cbApV: // global
           R3 = R3;
           R2 = R2;
           call System.IO.openTempFile1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.openTempFile_info" {
     System.IO.openTempFile_info:
         const System.IO.openTempFile_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbyXw_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.868608367 UTC

[section ""data" . System.IO.NewFileCreated_closure" {
     System.IO.NewFileCreated_closure:
         const System.IO.NewFileCreated_info;
 },
 System.IO.NewFileCreated_entry() //  [R2]
         { []
         }
     {offset
       cbAq7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbAqb; else goto cbAqa;
       cbAqb: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.IO.NewFileCreated_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbAqa: // global
           I64[Hp - 8] = System.IO.NewFileCreated_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.NewFileCreated_info" {
     System.IO.NewFileCreated_info:
         const System.IO.NewFileCreated_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.872005328 UTC

[section ""data" . System.IO.FileExists_closure" {
     System.IO.FileExists_closure:
         const System.IO.FileExists_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.874259611 UTC

[section ""data" . System.IO.OpenNewError_closure" {
     System.IO.OpenNewError_closure:
         const System.IO.OpenNewError_info;
 },
 System.IO.OpenNewError_entry() //  [R2]
         { []
         }
     {offset
       cbAqn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbAqr; else goto cbAqq;
       cbAqr: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.IO.OpenNewError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbAqq: // global
           I64[Hp - 8] = System.IO.OpenNewError_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.OpenNewError_info" {
     System.IO.OpenNewError_info:
         const System.IO.OpenNewError_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.878123157 UTC

[section ""cstring" . ibzM2_str" {
     ibzM2_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,73,79,46,78,101,119,70,105,108,101,67,114,101,97,116,101,100]
 },
 System.IO.NewFileCreated_con_entry() //  [R1]
         { []
         }
     {offset
       cbAqx: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.NewFileCreated_con_info" {
     System.IO.NewFileCreated_con_info:
         const System.IO.NewFileCreated_con_entry;
         const 1;
         const 2;
         const ibzM2_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.881388002 UTC

[section ""cstring" . ibzM4_str" {
     ibzM4_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,73,79,46,70,105,108,101,69,120,105,115,116,115]
 },
 System.IO.FileExists_con_entry() //  [R1]
         { []
         }
     {offset
       cbAqD: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.FileExists_con_info" {
     System.IO.FileExists_con_info:
         const System.IO.FileExists_con_entry;
         const 4294967296;
         const 4294967299;
         const ibzM4_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.884601472 UTC

[section ""cstring" . ibzM6_str" {
     ibzM6_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,73,79,46,79,112,101,110,78,101,119,69,114,114,111,114]
 },
 System.IO.OpenNewError_con_entry() //  [R1]
         { []
         }
     {offset
       cbAqJ: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.OpenNewError_con_info" {
     System.IO.OpenNewError_con_info:
         const System.IO.OpenNewError_con_entry;
         const 1;
         const 8589934594;
         const ibzM6_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:30.887953005 UTC

[section ""relreadonly" . SbyXw_srt" {
     SbyXw_srt:
         const GHC.IO.Handle.FD.stdout_closure;
         const GHC.IO.Handle.Text.hPutChar1_closure;
         const System.IO.putChar1_closure;
         const GHC.IO.Handle.Text.hPutStr_closure;
         const GHC.IO.Handle.Text.hPutStrLn_closure;
         const System.IO.print_closure;
         const GHC.IO.Handle.Text.hPutStr'_closure;
         const GHC.IO.Handle.Internals.wantReadableHandle_1_closure;
         const GHC.IO.Handle.Text.hGetChar2_closure;
         const GHC.IO.Handle.Text.hGetChar6_closure;
         const GHC.IO.Handle.FD.stdin_closure;
         const System.IO.getChar1_closure;
         const GHC.IO.Handle.Text.hGetLine2_closure;
         const GHC.IO.Handle.Text.hGetLine4_closure;
         const System.IO.getLine1_closure;
         const GHC.IO.Handle.Text.hGetContents1_closure;
         const System.IO.getContents1_closure;
         const GHC.IO.Handle.Text.hWaitForInput1_closure;
         const System.IO.hReady1_closure;
         const System.IO.hPrint_closure;
         const GHC.IO.Handle.hClose1_closure;
         const GHC.IO.Handle.FD.openFile1_closure;
         const System.IO.appendFile2_closure;
         const System.IO.appendFile1_closure;
         const System.IO.writeFile1_closure;
         const GHC.IO.Handle.FD.openBinaryFile1_closure;
         const System.IO.withBinaryFile1_closure;
         const GHC.IO.Exception.$fExceptionFixIOException_$ctoException_closure;
         const lvl1_rbyQ9_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_closure;
         const System.IO.fixIO2_closure;
         const System.IO.fixIO3_closure;
         const System.IO.fixIO1_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const System.IO.readIO7_closure;
         const System.IO.readIO3_closure;
         const System.IO.readIO10_closure;
         const GHC.Read.lex1_closure;
         const System.IO.readIO1_closure;
         const System.IO.readIO2_closure;
         const System.IO.readIO6_closure;
         const System.IO.readLn1_closure;
         const System.IO.readFile1_closure;
         const System.IO.interact1_closure;
         const GHC.IO.Handle.Text.hPutStr'_closure;
         const GHC.IO.Handle.FD.stdout_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Foreign.C.Error.$werrnoToIOError_closure;
         const $wlvl_rbyQf_closure;
         const lvl7_rbyQg_closure;
         const GHC.IO.failIO1_closure;
         const lvl11_rbyQl_closure;
         const lvl3_rbyQb_closure;
         const lvl6_rbyQe_closure;
         const GHC.List.lastError_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const GHC.IO.Encoding.getLocaleEncoding1_closure;
         const GHC.IO.FD.$wmkFD_closure;
         const GHC.IO.Handle.FD.fdToHandle5_closure;
         const tempCounter_rbxCH_closure;
         const System.IO.openBinaryTempFile5_closure;
         const System.IO.openBinaryTempFileWithDefaultPermissions3_closure;
         const System.IO.openBinaryTempFileWithDefaultPermissions1_closure;
         const System.IO.openTempFileWithDefaultPermissions2_closure;
         const System.IO.openTempFileWithDefaultPermissions1_closure;
         const System.IO.openBinaryTempFile3_closure;
         const System.IO.openBinaryTempFile1_closure;
         const System.IO.openTempFile2_closure;
         const System.IO.openTempFile1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.472723148 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:32.474844069 UTC

[section ""data" . System.IO.putChar1_closure" {
     System.IO.putChar1_closure:
         const System.IO.putChar1_info;
         const 0;
 },
 System.IO.putChar1_entry() //  [R2]
         { []
         }
     {offset
       cbAxW: // global
           R3 = R2;
           R2 = GHC.IO.Handle.FD.stdout_closure;
           call GHC.IO.Handle.Text.hPutChar1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.putChar1_info" {
     System.IO.putChar1_info:
         const System.IO.putChar1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SbAxZ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.480001588 UTC

[section ""data" . System.IO.putChar_closure" {
     System.IO.putChar_closure:
         const System.IO.putChar_info;
         const 0;
 },
 System.IO.putChar_entry() //  [R2]
         { []
         }
     {offset
       cbAy8: // global
           R2 = R2;
           call System.IO.putChar1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.putChar_info" {
     System.IO.putChar_info:
         const System.IO.putChar_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbAxZ_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.484800759 UTC

[section ""data" . System.IO.putStr_closure" {
     System.IO.putStr_closure:
         const System.IO.putStr_info;
         const 0;
 },
 System.IO.putStr_entry() //  [R2]
         { []
         }
     {offset
       cbAyj: // global
           R3 = R2;
           R2 = GHC.IO.Handle.FD.stdout_closure;
           call GHC.IO.Handle.Text.hPutStr_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.putStr_info" {
     System.IO.putStr_info:
         const System.IO.putStr_entry;
         const 0;
         const 38654705678;
         const 8589934597;
         const SbAxZ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.48852437 UTC

[section ""data" . System.IO.putStrLn_closure" {
     System.IO.putStrLn_closure:
         const System.IO.putStrLn_info;
         const 0;
 },
 System.IO.putStrLn_entry() //  [R2]
         { []
         }
     {offset
       cbAyu: // global
           R3 = R2;
           R2 = GHC.IO.Handle.FD.stdout_closure;
           call GHC.IO.Handle.Text.hPutStrLn_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.putStrLn_info" {
     System.IO.putStrLn_info:
         const System.IO.putStrLn_entry;
         const 0;
         const 73014444046;
         const 8589934597;
         const SbAxZ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.492680294 UTC

[section ""data" . System.IO.print_closure" {
     System.IO.print_closure:
         const System.IO.print_info;
         const 0;
 },
 sat_sbAqV_entry() //  [R1]
         { []
         }
     {offset
       cbAyJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbAyK; else goto cbAyL;
       cbAyK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAyL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Show.show_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbAqV_info" {
     sat_sbAqV_info:
         const sat_sbAqV_entry;
         const 2;
         const 18;
 },
 System.IO.print_entry() //  [R2, R3]
         { []
         }
     {offset
       cbAyM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbAyQ; else goto cbAyP;
       cbAyQ: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = System.IO.print_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbAyP: // global
           I64[Hp - 24] = sat_sbAqV_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R4 = GHC.Types.True_closure+2;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.FD.stdout_closure;
           R1 = GHC.IO.Handle.Text.hPutStr'_closure+4;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.print_info" {
     System.IO.print_info:
         const System.IO.print_entry;
         const 0;
         const 416611827726;
         const 8589934607;
         const SbAxZ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.500418645 UTC

[section ""data" . System.IO.getChar1_closure" {
     System.IO.getChar1_closure:
         const System.IO.getChar1_info;
         const 0;
 },
 System.IO.getChar1_entry() //  []
         { []
         }
     {offset
       cbAz9: // global
           R4 = GHC.IO.Handle.Text.hGetChar2_closure+2;
           R3 = GHC.IO.Handle.FD.stdin_closure;
           R2 = GHC.IO.Handle.Text.hGetChar6_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.getChar1_info" {
     System.IO.getChar1_info:
         const System.IO.getChar1_entry;
         const 0;
         const 64424509454;
         const 4294967299;
         const SbAxZ_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.504117313 UTC

[section ""data" . System.IO.getChar_closure" {
     System.IO.getChar_closure:
         const System.IO.getChar_info;
         const 0;
 },
 System.IO.getChar_entry() //  []
         { []
         }
     {offset
       cbAzl: // global
           call System.IO.getChar1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.getChar_info" {
     System.IO.getChar_info:
         const System.IO.getChar_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SbAxZ_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.50787823 UTC

[section ""data" . System.IO.getLine1_closure" {
     System.IO.getLine1_closure:
         const System.IO.getLine1_info;
         const 0;
 },
 System.IO.getLine1_entry() //  []
         { []
         }
     {offset
       cbAzw: // global
           R4 = GHC.IO.Handle.Text.hGetLine2_closure+2;
           R3 = GHC.IO.Handle.FD.stdin_closure;
           R2 = GHC.IO.Handle.Text.hGetLine4_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.getLine1_info" {
     System.IO.getLine1_info:
         const System.IO.getLine1_entry;
         const 0;
         const 450971566094;
         const 4294967299;
         const SbAxZ_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.532162364 UTC

[section ""data" . System.IO.getLine_closure" {
     System.IO.getLine_closure:
         const System.IO.getLine_info;
         const 0;
 },
 System.IO.getLine_entry() //  []
         { []
         }
     {offset
       cbAzI: // global
           call System.IO.getLine1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.getLine_info" {
     System.IO.getLine_info:
         const System.IO.getLine_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SbAxZ_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.536633426 UTC

[section ""data" . System.IO.getContents1_closure" {
     System.IO.getContents1_closure:
         const System.IO.getContents1_info;
         const 0;
 },
 System.IO.getContents1_entry() //  []
         { []
         }
     {offset
       cbAzT: // global
           R2 = GHC.IO.Handle.FD.stdin_closure;
           call GHC.IO.Handle.Text.hGetContents1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.getContents1_info" {
     System.IO.getContents1_info:
         const System.IO.getContents1_entry;
         const 0;
         const 141733920782;
         const 4294967299;
         const SbAxZ_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.540506881 UTC

[section ""data" . System.IO.getContents_closure" {
     System.IO.getContents_closure:
         const System.IO.getContents_info;
         const 0;
 },
 System.IO.getContents_entry() //  []
         { []
         }
     {offset
       cbAA4: // global
           call System.IO.getContents1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.getContents_info" {
     System.IO.getContents_info:
         const System.IO.getContents_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SbAxZ_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.543460802 UTC

[section ""data" . System.IO.localeEncoding_closure" {
     System.IO.localeEncoding_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.initLocaleEncoding_closure;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.545147727 UTC

[section ""data" . System.IO.hReady2_closure" {
     System.IO.hReady2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.547210835 UTC

[section ""data" . System.IO.hReady1_closure" {
     System.IO.hReady1_closure:
         const System.IO.hReady1_info;
         const 0;
 },
 System.IO.hReady1_entry() //  [R2]
         { []
         }
     {offset
       cbAAh: // global
           R3 = System.IO.hReady2_closure+1;
           R2 = R2;
           call GHC.IO.Handle.Text.hWaitForInput1_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.hReady1_info" {
     System.IO.hReady1_info:
         const System.IO.hReady1_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbAxZ_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.550921539 UTC

[section ""data" . System.IO.hReady_closure" {
     System.IO.hReady_closure:
         const System.IO.hReady_info;
         const 0;
 },
 System.IO.hReady_entry() //  [R2]
         { []
         }
     {offset
       cbAAs: // global
           R2 = R2;
           call System.IO.hReady1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.hReady_info" {
     System.IO.hReady_info:
         const System.IO.hReady_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbAxZ_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.555034045 UTC

[section ""data" . System.IO.hPrint_closure" {
     System.IO.hPrint_closure:
         const System.IO.hPrint_info;
         const 0;
 },
 sat_sbAr1_entry() //  [R1]
         { []
         }
     {offset
       cbAAH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbAAI; else goto cbAAJ;
       cbAAI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAAJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Show.show_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbAr1_info" {
     sat_sbAr1_info:
         const sat_sbAr1_entry;
         const 2;
         const 18;
 },
 System.IO.hPrint_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbAAK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbAAO; else goto cbAAN;
       cbAAO: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.IO.hPrint_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbAAN: // global
           I64[Hp - 24] = sat_sbAr1_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R4 = GHC.Types.True_closure+2;
           _sbAqZ::P64 = R3;
           R3 = Hp - 24;
           R2 = _sbAqZ::P64;
           R1 = GHC.IO.Handle.Text.hPutStr'_closure+4;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.hPrint_info" {
     System.IO.hPrint_info:
         const System.IO.hPrint_entry;
         const 0;
         const 35188667056142;
         const 12884901911;
         const SbAxZ_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.566506748 UTC

[section ""data" . System.IO.appendFile2_closure" {
     System.IO.appendFile2_closure:
         const System.IO.appendFile2_info;
         const 0;
 },
 sat_sbArk_entry() //  [R1, R2]
         { []
         }
     {offset
       cbABk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbABl; else goto cbABm;
       cbABl: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbABm: // global
           I64[Sp - 16] = block_cbABi_info;
           _sbArf::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _sbArf::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbArk_info" {
     sat_sbArk_info:
         const sat_sbArk_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbAxZ_srt+160;
 },
 _cbABi() //  []
         { []
         }
     {offset
       cbABi: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbABi_info" {
     block_cbABi_info:
         const _cbABi;
         const 1;
         const 30;
 },
 sat_sbAre_entry() //  [R1]
         { []
         }
     {offset
       cbABu: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbAre_info" {
     sat_sbAre_info:
         const sat_sbAre_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sbArC_entry() //  [R1, R2]
         { []
         }
     {offset
       cbABM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbABN; else goto cbABO;
       cbABN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbABO: // global
           I64[Sp - 16] = block_cbABK_info;
           _sbArx::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _sbArx::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbArC_info" {
     sat_sbArC_info:
         const sat_sbArC_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbAxZ_srt+160;
 },
 _cbABK() //  []
         { []
         }
     {offset
       cbABK: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbABK_info" {
     block_cbABK_info:
         const _cbABK;
         const 1;
         const 30;
 },
 sat_sbArw_entry() //  [R1]
         { []
         }
     {offset
       cbABW: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbArw_info" {
     sat_sbArw_info:
         const sat_sbArw_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sbArJ_entry() //  [R1]
         { []
         }
     {offset
       cbAC3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAC4; else goto cbAC5;
       cbAC4: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbAC5: // global
           I64[Sp - 16] = block_cbABD_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 23];
           Sp = Sp - 16;
           call GHC.IO.Handle.FD.openFile1_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbArJ_info" {
     sat_sbArJ_info:
         const sat_sbArJ_entry;
         const 3;
         const 12884901896;
         const 4294967299;
         const SbAxZ_srt+160;
 },
 _cbABD() //  [R1]
         { []
         }
     {offset
       cbABD: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbAC8; else goto cbAC7;
       cbAC8: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbAC7: // global
           I64[Hp - 56] = sat_sbArC_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sbArw_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cbABZ_info;
           R2 = Hp - 54;
           _sbAru::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 8] = _sbAru::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbABD_info" {
     block_cbABD_info:
         const _cbABD;
         const 1;
         const 4294967326;
         const SbAxZ_srt+160;
 },
 _cbABZ() //  [R1]
         { []
         }
     {offset
       cbABZ: // global
           I64[Sp] = block_cbAC1_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbABZ_info" {
     block_cbABZ_info:
         const _cbABZ;
         const 1;
         const 4294967326;
         const SbAxZ_srt+160;
 },
 _cbAC1() //  []
         { []
         }
     {offset
       cbAC1: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAC1_info" {
     block_cbAC1_info:
         const _cbAC1;
         const 1;
         const 30;
 },
 sat_sbArU_entry() //  [R1, R2]
         { []
         }
     {offset
       cbACl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbACm; else goto cbACn;
       cbACm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbACn: // global
           I64[Sp - 16] = block_cbACj_info;
           _sbArP::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _sbArP::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbArU_info" {
     sat_sbArU_info:
         const sat_sbArU_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbAxZ_srt+160;
 },
 _cbACj() //  []
         { []
         }
     {offset
       cbACj: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbACj_info" {
     block_cbACj_info:
         const _cbACj;
         const 1;
         const 30;
 },
 sat_sbArO_entry() //  [R1]
         { []
         }
     {offset
       cbACv: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbArO_info" {
     sat_sbArO_info:
         const sat_sbArO_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 System.IO.appendFile2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbACC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbACD; else goto cbACE;
       cbACD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.IO.appendFile2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbACE: // global
           I64[Sp - 32] = block_cbAB7_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.appendFile2_info" {
     System.IO.appendFile2_info:
         const System.IO.appendFile2_entry;
         const 0;
         const 30064771086;
         const 17179869207;
         const SbAxZ_srt+160;
 },
 _cbAB7() //  [R1]
         { []
         }
     {offset
       cbAB7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbACH; else goto cbACG;
       cbACH: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbACG: // global
           _sbAr2::P64 = P64[Sp + 8];
           _sbAr3::P64 = P64[Sp + 16];
           if (R1 == 0) goto cbACA; else goto ubAD0;
       cbACA: // global
           I64[Hp - 24] = sat_sbArJ_info;
           P64[Hp - 16] = _sbAr2::P64;
           P64[Hp - 8] = _sbAr3::P64;
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       ubAD0: // global
           if (R1 == 1) goto cbACB; else goto cbACz;
       cbACB: // global
           Hp = Hp - 32;
           I64[Sp + 16] = block_cbACc_info;
           R3 = _sbAr3::P64;
           R2 = _sbAr2::P64;
           Sp = Sp + 16;
           call GHC.IO.Handle.FD.openFile1_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
       cbACz: // global
           Hp = Hp - 32;
           I64[Sp + 16] = block_cbABb_info;
           R3 = _sbAr3::P64;
           R2 = _sbAr2::P64;
           Sp = Sp + 16;
           call GHC.IO.Handle.FD.openFile1_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAB7_info" {
     block_cbAB7_info:
         const _cbAB7;
         const 3;
         const 12884901918;
         const SbAxZ_srt+160;
 },
 _cbACc() //  [R1]
         { []
         }
     {offset
       cbACc: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbACW; else goto cbACV;
       cbACW: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbACV: // global
           I64[Hp - 56] = sat_sbArU_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sbArO_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cbACR_info;
           R2 = Hp - 54;
           _sbArM::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 8] = _sbArM::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbACc_info" {
     block_cbACc_info:
         const _cbACc;
         const 1;
         const 4294967326;
         const SbAxZ_srt+160;
 },
 _cbACR() //  [R1]
         { []
         }
     {offset
       cbACR: // global
           I64[Sp] = block_cbACT_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbACR_info" {
     block_cbACR_info:
         const _cbACR;
         const 1;
         const 4294967326;
         const SbAxZ_srt+160;
 },
 _cbACT() //  []
         { []
         }
     {offset
       cbACT: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbACT_info" {
     block_cbACT_info:
         const _cbACT;
         const 1;
         const 30;
 },
 _cbABb() //  [R1]
         { []
         }
     {offset
       cbABb: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbACN; else goto cbACM;
       cbACN: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbACM: // global
           I64[Hp - 56] = sat_sbArk_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sbAre_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cbACI_info;
           R2 = Hp - 54;
           _sbArc::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 8] = _sbArc::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbABb_info" {
     block_cbABb_info:
         const _cbABb;
         const 1;
         const 4294967326;
         const SbAxZ_srt+160;
 },
 _cbACI() //  [R1]
         { []
         }
     {offset
       cbACI: // global
           I64[Sp] = block_cbACK_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbACI_info" {
     block_cbACI_info:
         const _cbACI;
         const 1;
         const 4294967326;
         const SbAxZ_srt+160;
 },
 _cbACK() //  []
         { []
         }
     {offset
       cbACK: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbACK_info" {
     block_cbACK_info:
         const _cbACK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.603010592 UTC

[section ""data" . System.IO.withFile_closure" {
     System.IO.withFile_closure:
         const System.IO.withFile_info;
         const 0;
 },
 System.IO.withFile_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbAEK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call System.IO.appendFile2_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.withFile_info" {
     System.IO.withFile_info:
         const System.IO.withFile_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const SbAxZ_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.606912269 UTC

[section ""data" . System.IO.appendFile1_closure" {
     System.IO.appendFile1_closure:
         const System.IO.appendFile1_info;
         const 0;
 },
 sat_sbAs5_entry() //  [R1, R2]
         { []
         }
     {offset
       cbAF0: // global
           R3 = P64[R1 + 6];
           R2 = R2;
           call GHC.IO.Handle.Text.hPutStr_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbAs5_info" {
     sat_sbAs5_info:
         const sat_sbAs5_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbAxZ_srt+24;
 },
 System.IO.appendFile1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbAF3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbAF7; else goto cbAF6;
       cbAF7: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = System.IO.appendFile1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbAF6: // global
           I64[Hp - 8] = sat_sbAs5_info;
           P64[Hp] = R3;
           R4 = Hp - 6;
           R3 = GHC.IO.IOMode.AppendMode_closure+3;
           R2 = R2;
           call System.IO.appendFile2_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.appendFile1_info" {
     System.IO.appendFile1_info:
         const System.IO.appendFile1_entry;
         const 0;
         const 6755403736023054;
         const 12884901903;
         const SbAxZ_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.611866862 UTC

[section ""data" . System.IO.appendFile_closure" {
     System.IO.appendFile_closure:
         const System.IO.appendFile_info;
         const 0;
 },
 System.IO.appendFile_entry() //  [R2, R3]
         { []
         }
     {offset
       cbAFl: // global
           R3 = R3;
           R2 = R2;
           call System.IO.appendFile1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.appendFile_info" {
     System.IO.appendFile_info:
         const System.IO.appendFile_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbAxZ_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.616247944 UTC

[section ""data" . System.IO.writeFile1_closure" {
     System.IO.writeFile1_closure:
         const System.IO.writeFile1_info;
         const 0;
 },
 sat_sbAsa_entry() //  [R1, R2]
         { []
         }
     {offset
       cbAFB: // global
           R3 = P64[R1 + 6];
           R2 = R2;
           call GHC.IO.Handle.Text.hPutStr_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbAsa_info" {
     sat_sbAsa_info:
         const sat_sbAsa_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbAxZ_srt+24;
 },
 System.IO.writeFile1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbAFE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbAFI; else goto cbAFH;
       cbAFI: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = System.IO.writeFile1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbAFH: // global
           I64[Hp - 8] = sat_sbAsa_info;
           P64[Hp] = R3;
           R4 = Hp - 6;
           R3 = GHC.IO.IOMode.WriteMode_closure+2;
           R2 = R2;
           call System.IO.appendFile2_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.writeFile1_info" {
     System.IO.writeFile1_info:
         const System.IO.writeFile1_entry;
         const 0;
         const 11259003363393550;
         const 12884901903;
         const SbAxZ_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.621288005 UTC

[section ""data" . System.IO.writeFile_closure" {
     System.IO.writeFile_closure:
         const System.IO.writeFile_info;
         const 0;
 },
 System.IO.writeFile_entry() //  [R2, R3]
         { []
         }
     {offset
       cbAFW: // global
           R3 = R3;
           R2 = R2;
           call System.IO.writeFile1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.writeFile_info" {
     System.IO.writeFile_info:
         const System.IO.writeFile_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbAxZ_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.630483443 UTC

[section ""data" . System.IO.withBinaryFile1_closure" {
     System.IO.withBinaryFile1_closure:
         const System.IO.withBinaryFile1_info;
         const 0;
 },
 sat_sbAst_entry() //  [R1, R2]
         { []
         }
     {offset
       cbAGk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAGl; else goto cbAGm;
       cbAGl: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbAGm: // global
           I64[Sp - 16] = block_cbAGi_info;
           _sbAso::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _sbAso::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbAst_info" {
     sat_sbAst_info:
         const sat_sbAst_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbAxZ_srt+160;
 },
 _cbAGi() //  []
         { []
         }
     {offset
       cbAGi: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAGi_info" {
     block_cbAGi_info:
         const _cbAGi;
         const 1;
         const 30;
 },
 sat_sbAsn_entry() //  [R1]
         { []
         }
     {offset
       cbAGu: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbAsn_info" {
     sat_sbAsn_info:
         const sat_sbAsn_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sbAsL_entry() //  [R1, R2]
         { []
         }
     {offset
       cbAGM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAGN; else goto cbAGO;
       cbAGN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbAGO: // global
           I64[Sp - 16] = block_cbAGK_info;
           _sbAsG::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _sbAsG::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbAsL_info" {
     sat_sbAsL_info:
         const sat_sbAsL_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbAxZ_srt+160;
 },
 _cbAGK() //  []
         { []
         }
     {offset
       cbAGK: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAGK_info" {
     block_cbAGK_info:
         const _cbAGK;
         const 1;
         const 30;
 },
 sat_sbAsF_entry() //  [R1]
         { []
         }
     {offset
       cbAGW: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbAsF_info" {
     sat_sbAsF_info:
         const sat_sbAsF_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sbAsS_entry() //  [R1]
         { []
         }
     {offset
       cbAH3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAH4; else goto cbAH5;
       cbAH4: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbAH5: // global
           I64[Sp - 16] = block_cbAGD_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 23];
           Sp = Sp - 16;
           call GHC.IO.Handle.FD.openBinaryFile1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbAsS_info" {
     sat_sbAsS_info:
         const sat_sbAsS_entry;
         const 3;
         const 141733920776;
         const 4294967299;
         const SbAxZ_srt+160;
 },
 _cbAGD() //  [R1]
         { []
         }
     {offset
       cbAGD: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbAH8; else goto cbAH7;
       cbAH8: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbAH7: // global
           I64[Hp - 56] = sat_sbAsL_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sbAsF_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cbAGZ_info;
           R2 = Hp - 54;
           _sbAsD::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 8] = _sbAsD::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAGD_info" {
     block_cbAGD_info:
         const _cbAGD;
         const 1;
         const 4294967326;
         const SbAxZ_srt+160;
 },
 _cbAGZ() //  [R1]
         { []
         }
     {offset
       cbAGZ: // global
           I64[Sp] = block_cbAH1_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAGZ_info" {
     block_cbAGZ_info:
         const _cbAGZ;
         const 1;
         const 4294967326;
         const SbAxZ_srt+160;
 },
 _cbAH1() //  []
         { []
         }
     {offset
       cbAH1: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAH1_info" {
     block_cbAH1_info:
         const _cbAH1;
         const 1;
         const 30;
 },
 sat_sbAt3_entry() //  [R1, R2]
         { []
         }
     {offset
       cbAHl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAHm; else goto cbAHn;
       cbAHm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbAHn: // global
           I64[Sp - 16] = block_cbAHj_info;
           _sbAsY::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _sbAsY::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbAt3_info" {
     sat_sbAt3_info:
         const sat_sbAt3_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbAxZ_srt+160;
 },
 _cbAHj() //  []
         { []
         }
     {offset
       cbAHj: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAHj_info" {
     block_cbAHj_info:
         const _cbAHj;
         const 1;
         const 30;
 },
 sat_sbAsX_entry() //  [R1]
         { []
         }
     {offset
       cbAHv: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbAsX_info" {
     sat_sbAsX_info:
         const sat_sbAsX_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 System.IO.withBinaryFile1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbAHC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbAHD; else goto cbAHE;
       cbAHD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.IO.withBinaryFile1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbAHE: // global
           I64[Sp - 32] = block_cbAG7_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.withBinaryFile1_info" {
     System.IO.withBinaryFile1_info:
         const System.IO.withBinaryFile1_entry;
         const 0;
         const 416611827726;
         const 17179869207;
         const SbAxZ_srt+160;
 },
 _cbAG7() //  [R1]
         { []
         }
     {offset
       cbAG7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbAHH; else goto cbAHG;
       cbAHH: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbAHG: // global
           _sbAsb::P64 = P64[Sp + 8];
           _sbAsc::P64 = P64[Sp + 16];
           if (R1 == 0) goto cbAHA; else goto ubAI0;
       cbAHA: // global
           I64[Hp - 24] = sat_sbAsS_info;
           P64[Hp - 16] = _sbAsb::P64;
           P64[Hp - 8] = _sbAsc::P64;
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       ubAI0: // global
           if (R1 == 1) goto cbAHB; else goto cbAHz;
       cbAHB: // global
           Hp = Hp - 32;
           I64[Sp + 16] = block_cbAHc_info;
           R3 = _sbAsc::P64;
           R2 = _sbAsb::P64;
           Sp = Sp + 16;
           call GHC.IO.Handle.FD.openBinaryFile1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
       cbAHz: // global
           Hp = Hp - 32;
           I64[Sp + 16] = block_cbAGb_info;
           R3 = _sbAsc::P64;
           R2 = _sbAsb::P64;
           Sp = Sp + 16;
           call GHC.IO.Handle.FD.openBinaryFile1_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAG7_info" {
     block_cbAG7_info:
         const _cbAG7;
         const 3;
         const 141733920798;
         const SbAxZ_srt+160;
 },
 _cbAHc() //  [R1]
         { []
         }
     {offset
       cbAHc: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbAHW; else goto cbAHV;
       cbAHW: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbAHV: // global
           I64[Hp - 56] = sat_sbAt3_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sbAsX_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cbAHR_info;
           R2 = Hp - 54;
           _sbAsV::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 8] = _sbAsV::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAHc_info" {
     block_cbAHc_info:
         const _cbAHc;
         const 1;
         const 4294967326;
         const SbAxZ_srt+160;
 },
 _cbAHR() //  [R1]
         { []
         }
     {offset
       cbAHR: // global
           I64[Sp] = block_cbAHT_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAHR_info" {
     block_cbAHR_info:
         const _cbAHR;
         const 1;
         const 4294967326;
         const SbAxZ_srt+160;
 },
 _cbAHT() //  []
         { []
         }
     {offset
       cbAHT: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAHT_info" {
     block_cbAHT_info:
         const _cbAHT;
         const 1;
         const 30;
 },
 _cbAGb() //  [R1]
         { []
         }
     {offset
       cbAGb: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbAHN; else goto cbAHM;
       cbAHN: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbAHM: // global
           I64[Hp - 56] = sat_sbAst_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sbAsn_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cbAHI_info;
           R2 = Hp - 54;
           _sbAsl::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 8] = _sbAsl::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAGb_info" {
     block_cbAGb_info:
         const _cbAGb;
         const 1;
         const 4294967326;
         const SbAxZ_srt+160;
 },
 _cbAHI() //  [R1]
         { []
         }
     {offset
       cbAHI: // global
           I64[Sp] = block_cbAHK_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAHI_info" {
     block_cbAHI_info:
         const _cbAHI;
         const 1;
         const 4294967326;
         const SbAxZ_srt+160;
 },
 _cbAHK() //  []
         { []
         }
     {offset
       cbAHK: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAHK_info" {
     block_cbAHK_info:
         const _cbAHK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.665462167 UTC

[section ""data" . System.IO.withBinaryFile_closure" {
     System.IO.withBinaryFile_closure:
         const System.IO.withBinaryFile_info;
         const 0;
 },
 System.IO.withBinaryFile_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbAJK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call System.IO.withBinaryFile1_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.withBinaryFile_info" {
     System.IO.withBinaryFile_info:
         const System.IO.withBinaryFile_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const SbAxZ_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.669232788 UTC

[section ""data" . lvl_rbyQ6_closure" {
     lvl_rbyQ6_closure:
         const lvl_rbyQ6_info;
 },
 lvl_rbyQ6_entry() //  []
         { []
         }
     {offset
       cbAK0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbAK1; else goto cbAK2;
       cbAK1: // global
           R1 = lvl_rbyQ6_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbAK2: // global
           I64[Sp - 8] = block_cbAJV_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl_rbyQ6_info" {
     lvl_rbyQ6_info:
         const lvl_rbyQ6_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _cbAJV() //  []
         { []
         }
     {offset
       cbAJV: // global
           I64[Sp] = block_cbAJX_info;
           R1 = System.IO.hReady2_closure+1;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAJV_info" {
     block_cbAJV_info:
         const _cbAJV;
         const 0;
         const 30;
 },
 _cbAJX() //  [R1]
         { []
         }
     {offset
       cbAJX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbAK6; else goto cbAK5;
       cbAK6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbAK5: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAJX_info" {
     block_cbAJX_info:
         const _cbAJX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.676755406 UTC

[section ""data" . tempCounter_rbxCH_closure" {
     tempCounter_rbxCH_closure:
         const tempCounter_rbxCH_info;
         const 0;
         const 0;
         const 0;
 },
 tempCounter_rbxCH_entry() //  [R1]
         { []
         }
     {offset
       cbAKu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbAKv; else goto cbAKw;
       cbAKv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAKw: // global
           (_cbAKp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbAKp::I64 == 0) goto cbAKr; else goto cbAKq;
       cbAKr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbAKq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbAKp::I64;
           I64[Sp - 24] = block_cbAKs_info;
           Sp = Sp - 24;
           call lvl_rbyQ6_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . tempCounter_rbxCH_info" {
     tempCounter_rbxCH_info:
         const tempCounter_rbxCH_entry;
         const 0;
         const 21;
 },
 _cbAKs() //  [R1]
         { []
         }
     {offset
       cbAKs: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbAKs_info" {
     block_cbAKs_info:
         const _cbAKs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.68163369 UTC

[section ""data" . pathSeparatorChar_rbxCK_closure" {
     pathSeparatorChar_rbxCK_closure:
         const GHC.Types.C#_con_info;
         const 47;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.683254279 UTC

[section ""cstring" . System.IO.$trModule4_bytes" {
     System.IO.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.684870687 UTC

[section ""data" . System.IO.$trModule3_closure" {
     System.IO.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.IO.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.686669327 UTC

[section ""cstring" . System.IO.$trModule2_bytes" {
     System.IO.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,73,79]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.688251212 UTC

[section ""data" . System.IO.$trModule1_closure" {
     System.IO.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.IO.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.690464536 UTC

[section ""data" . System.IO.$trModule_closure" {
     System.IO.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.IO.$trModule3_closure+1;
         const System.IO.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.692115885 UTC

[section ""data" . $krep_rbyQ7_closure" {
     $krep_rbyQ7_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.C.Error.$tcErrno_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.693871628 UTC

[section ""data" . $krep1_rbyQ8_closure" {
     $krep1_rbyQ8_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.C.Types.$tcCInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.695511057 UTC

[section ""cstring" . System.IO.$tcOpenNewFileResult2_bytes" {
     System.IO.$tcOpenNewFileResult2_bytes:
         I8[] [79,112,101,110,78,101,119,70,105,108,101,82,101,115,117,108,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.697117752 UTC

[section ""data" . System.IO.$tcOpenNewFileResult1_closure" {
     System.IO.$tcOpenNewFileResult1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.IO.$tcOpenNewFileResult2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.698864662 UTC

[section ""data" . System.IO.$tcOpenNewFileResult_closure" {
     System.IO.$tcOpenNewFileResult_closure:
         const GHC.Types.TyCon_con_info;
         const System.IO.$trModule_closure+1;
         const System.IO.$tcOpenNewFileResult1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9627069439367662246;
         const 2547759174955940786;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.701107239 UTC

[section ""data" . System.IO.$tc'FileExists1_closure" {
     System.IO.$tc'FileExists1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.IO.$tcOpenNewFileResult_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.703341612 UTC

[section ""cstring" . System.IO.$tc'FileExists3_bytes" {
     System.IO.$tc'FileExists3_bytes:
         I8[] [39,70,105,108,101,69,120,105,115,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.705034054 UTC

[section ""data" . System.IO.$tc'FileExists2_closure" {
     System.IO.$tc'FileExists2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.IO.$tc'FileExists3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.706790967 UTC

[section ""data" . System.IO.$tc'FileExists_closure" {
     System.IO.$tc'FileExists_closure:
         const GHC.Types.TyCon_con_info;
         const System.IO.$trModule_closure+1;
         const System.IO.$tc'FileExists2_closure+1;
         const System.IO.$tc'FileExists1_closure+1;
         const 6704133186904346962;
         const 16997416543076271011;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.708613127 UTC

[section ""data" . System.IO.$tc'NewFileCreated1_closure" {
     System.IO.$tc'NewFileCreated1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rbyQ8_closure+1;
         const System.IO.$tc'FileExists1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.710310953 UTC

[section ""cstring" . System.IO.$tc'NewFileCreated3_bytes" {
     System.IO.$tc'NewFileCreated3_bytes:
         I8[] [39,78,101,119,70,105,108,101,67,114,101,97,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.711897728 UTC

[section ""data" . System.IO.$tc'NewFileCreated2_closure" {
     System.IO.$tc'NewFileCreated2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.IO.$tc'NewFileCreated3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.713967835 UTC

[section ""data" . System.IO.$tc'NewFileCreated_closure" {
     System.IO.$tc'NewFileCreated_closure:
         const GHC.Types.TyCon_con_info;
         const System.IO.$trModule_closure+1;
         const System.IO.$tc'NewFileCreated2_closure+1;
         const System.IO.$tc'NewFileCreated1_closure+4;
         const 9070829168557028496;
         const 15570227817593865145;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.715673402 UTC

[section ""data" . System.IO.$tc'OpenNewError1_closure" {
     System.IO.$tc'OpenNewError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rbyQ7_closure+1;
         const System.IO.$tc'FileExists1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.717364809 UTC

[section ""cstring" . System.IO.$tc'OpenNewError3_bytes" {
     System.IO.$tc'OpenNewError3_bytes:
         I8[] [39,79,112,101,110,78,101,119,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.718984085 UTC

[section ""data" . System.IO.$tc'OpenNewError2_closure" {
     System.IO.$tc'OpenNewError2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.IO.$tc'OpenNewError3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.72081716 UTC

[section ""data" . System.IO.$tc'OpenNewError_closure" {
     System.IO.$tc'OpenNewError_closure:
         const GHC.Types.TyCon_con_info;
         const System.IO.$trModule_closure+1;
         const System.IO.$tc'OpenNewError2_closure+1;
         const System.IO.$tc'OpenNewError1_closure+4;
         const 300310999495895268;
         const 12582581010413704951;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.723270526 UTC

[section ""data" . lvl1_rbyQ9_closure" {
     lvl1_rbyQ9_closure:
         const lvl1_rbyQ9_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rbyQ9_entry() //  [R1]
         { []
         }
     {offset
       cbALf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbALg; else goto cbALh;
       cbALg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbALh: // global
           (_cbALc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbALc::I64 == 0) goto cbALe; else goto cbALd;
       cbALe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbALd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbALc::I64;
           R2 = GHC.IO.Exception.FixIOException_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionFixIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_rbyQ9_info" {
     lvl1_rbyQ9_info:
         const lvl1_rbyQ9_entry;
         const 0;
         const 4294967317;
         const SbAxZ_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.727485172 UTC

[section ""data" . System.IO.fixIO3_closure" {
     System.IO.fixIO3_closure:
         const System.IO.fixIO3_info;
         const 0;
 },
 System.IO.fixIO3_entry() //  []
         { []
         }
     {offset
       cbALv: // global
           R1 = lvl1_rbyQ9_closure;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.fixIO3_info" {
     System.IO.fixIO3_info:
         const System.IO.fixIO3_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SbAxZ_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.732662358 UTC

[section ""data" . System.IO.fixIO2_closure" {
     System.IO.fixIO2_closure:
         const System.IO.fixIO2_info;
         const 0;
 },
 sat_sbAtq_entry() //  [R1]
         { []
         }
     {offset
       cbALY: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbAtq_info" {
     sat_sbAtq_info:
         const sat_sbAtq_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 System.IO.fixIO2_entry() //  [R2]
         { []
         }
     {offset
       cbAM1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbAM2; else goto cbAM3;
       cbAM2: // global
           R2 = R2;
           R1 = System.IO.fixIO2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbAM3: // global
           I64[Sp - 8] = block_cbALG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubAMl; else goto cbALH;
       ubAMl: // global
           call _cbALG(R1) args: 0, res: 0, upd: 0;
       cbALH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.fixIO2_info" {
     System.IO.fixIO2_info:
         const System.IO.fixIO2_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const SbAxZ_srt+232;
 },
 _cbALG() //  [R1]
         { []
         }
     {offset
       cbALG: // global
           I64[Sp - 16] = block_cbALL_info;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbALG_info" {
     block_cbALG_info:
         const _cbALG;
         const 0;
         const 47244640286;
         const SbAxZ_srt+232;
 },
 _cbALL() //  [R1]
         { []
         }
     {offset
       cbALL: // global
           I64[Sp] = block_cbALP_info;
           R3 = GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbALL_info" {
     block_cbALL_info:
         const _cbALL;
         const 2;
         const 47244640286;
         const SbAxZ_srt+232;
 },
 _cbALP() //  [R1]
         { []
         }
     {offset
       cbALP: // global
           if (R1 & 7 == 1) goto cbAM7; else goto cbAMf;
       cbAM7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbAMa; else goto cbAM9;
       cbAMa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbAM9: // global
           I64[Hp - 8] = sat_sbAtq_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbAMf: // global
           I64[Sp + 16] = block_cbAMd_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbALP_info" {
     block_cbALP_info:
         const _cbALP;
         const 2;
         const 4294967326;
         const SbAxZ_srt+256;
 },
 _cbAMd() //  []
         { []
         }
     {offset
       cbAMd: // global
           R1 = System.IO.fixIO3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAMd_info" {
     block_cbAMd_info:
         const _cbAMd;
         const 0;
         const 4294967326;
         const SbAxZ_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.745427342 UTC

[section ""data" . System.IO.fixIO1_closure" {
     System.IO.fixIO1_closure:
         const System.IO.fixIO1_info;
         const 0;
 },
 sat_sbAtz_entry() //  [R1]
         { []
         }
     {offset
       cbAN8: // global
           R1 = P64[R1 + 7];
           call stg_readMVar#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbAtz_info" {
     sat_sbAtz_info:
         const sat_sbAtz_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sbAtA_entry() //  [R1]
         { []
         }
     {offset
       cbANb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbANf; else goto cbANe;
       cbANf: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbANe: // global
           _sbAtw::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_sbAtz_info;
           P64[Hp] = _sbAtw::P64;
           R2 = System.IO.fixIO2_closure+1;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbAtA_info" {
     sat_sbAtA_info:
         const sat_sbAtA_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const SbAxZ_srt+248;
 },
 System.IO.fixIO1_entry() //  [R2]
         { []
         }
     {offset
       cbANm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbANn; else goto cbANo;
       cbANn: // global
           R2 = R2;
           R1 = System.IO.fixIO1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbANo: // global
           I64[Sp - 16] = block_cbAMW_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.fixIO1_info" {
     System.IO.fixIO1_info:
         const System.IO.fixIO1_entry;
         const 0;
         const 21474836494;
         const 8589934597;
         const SbAxZ_srt+248;
 },
 _cbAMW() //  [R1]
         { []
         }
     {offset
       cbAMW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbANr; else goto cbANq;
       cbANr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbANq: // global
           I64[Hp - 8] = sat_sbAtA_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_cbANg_info;
           R2 = Hp - 7;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAMW_info" {
     block_cbAMW_info:
         const _cbAMW;
         const 1;
         const 4294967326;
         const SbAxZ_srt+248;
 },
 _cbANg() //  [R1]
         { []
         }
     {offset
       cbANg: // global
           I64[Sp] = block_cbANi_info;
           R2 = R1;
           R1 = P64[Sp + 16];
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbANg_info" {
     block_cbANg_info:
         const _cbANg;
         const 2;
         const 30;
 },
 _cbANi() //  [R1]
         { []
         }
     {offset
       cbANi: // global
           _sbAtw::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbANk_info;
           R2 = R1;
           _sbAtG::P64 = R1;
           R1 = _sbAtw::P64;
           P64[Sp + 16] = _sbAtG::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbANi_info" {
     block_cbANi_info:
         const _cbANi;
         const 130;
         const 30;
 },
 _cbANk() //  []
         { []
         }
     {offset
       cbANk: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbANk_info" {
     block_cbANk_info:
         const _cbANk;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.757803964 UTC

[section ""data" . System.IO.fixIO_closure" {
     System.IO.fixIO_closure:
         const System.IO.fixIO_info;
         const 0;
 },
 System.IO.fixIO_entry() //  [R2]
         { []
         }
     {offset
       cbAO3: // global
           R2 = R2;
           call System.IO.fixIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.fixIO_info" {
     System.IO.fixIO_info:
         const System.IO.fixIO_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbAxZ_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.76075807 UTC

[section ""cstring" . System.IO.readIO9_bytes" {
     System.IO.readIO9_bytes:
         I8[] [80,114,101,108,117,100,101,46,114,101,97,100,73,79,58,32,110,111,32,112,97,114,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.763751329 UTC

[section ""data" . System.IO.readIO8_closure" {
     System.IO.readIO8_closure:
         const System.IO.readIO8_info;
         const 0;
         const 0;
         const 0;
 },
 System.IO.readIO8_entry() //  [R1]
         { []
         }
     {offset
       cbAOh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAOi; else goto cbAOj;
       cbAOi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAOj: // global
           (_cbAOe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbAOe::I64 == 0) goto cbAOg; else goto cbAOf;
       cbAOg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbAOf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbAOe::I64;
           R2 = System.IO.readIO9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.IO.readIO8_info" {
     System.IO.readIO8_info:
         const System.IO.readIO8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.767325404 UTC

[section ""data" . System.IO.readIO7_closure" {
     System.IO.readIO7_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.UserError_closure+1;
         const GHC.Types.[]_closure+1;
         const System.IO.readIO8_closure;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.769614992 UTC

[section ""data" . System.IO.readIO6_closure" {
     System.IO.readIO6_closure:
         const System.IO.readIO6_info;
         const 0;
         const 0;
         const 0;
 },
 System.IO.readIO6_entry() //  [R1]
         { []
         }
     {offset
       cbAOz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAOA; else goto cbAOB;
       cbAOA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAOB: // global
           (_cbAOw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbAOw::I64 == 0) goto cbAOy; else goto cbAOx;
       cbAOy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbAOx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbAOw::I64;
           R2 = System.IO.readIO7_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.IO.readIO6_info" {
     System.IO.readIO6_info:
         const System.IO.readIO6_entry;
         const 0;
         const 12884901909;
         const SbAxZ_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.773145506 UTC

[section ""cstring" . System.IO.readIO5_bytes" {
     System.IO.readIO5_bytes:
         I8[] [80,114,101,108,117,100,101,46,114,101,97,100,73,79,58,32,97,109,98,105,103,117,111,117,115,32,112,97,114,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.775264866 UTC

[section ""data" . System.IO.readIO4_closure" {
     System.IO.readIO4_closure:
         const System.IO.readIO4_info;
         const 0;
         const 0;
         const 0;
 },
 System.IO.readIO4_entry() //  [R1]
         { []
         }
     {offset
       cbAOR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAOS; else goto cbAOT;
       cbAOS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAOT: // global
           (_cbAOO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbAOO::I64 == 0) goto cbAOQ; else goto cbAOP;
       cbAOQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbAOP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbAOO::I64;
           R2 = System.IO.readIO5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.IO.readIO4_info" {
     System.IO.readIO4_info:
         const System.IO.readIO4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.779173153 UTC

[section ""data" . System.IO.readIO3_closure" {
     System.IO.readIO3_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.UserError_closure+1;
         const GHC.Types.[]_closure+1;
         const System.IO.readIO4_closure;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.781554947 UTC

[section ""data" . System.IO.readIO2_closure" {
     System.IO.readIO2_closure:
         const System.IO.readIO2_info;
         const 0;
         const 0;
         const 0;
 },
 System.IO.readIO2_entry() //  [R1]
         { []
         }
     {offset
       cbAP9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAPa; else goto cbAPb;
       cbAPa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAPb: // global
           (_cbAP6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbAP6::I64 == 0) goto cbAP8; else goto cbAP7;
       cbAP8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbAP7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbAP6::I64;
           R2 = System.IO.readIO3_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.IO.readIO2_info" {
     System.IO.readIO2_info:
         const System.IO.readIO2_entry;
         const 0;
         const 21474836501;
         const SbAxZ_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.789654419 UTC

[section ""data" . System.IO.readIO10_closure" {
     System.IO.readIO10_closure:
         const System.IO.readIO10_info;
         const 0;
 },
 z_sbAtQ_entry() //  [R1]
         { []
         }
     {offset
       cbAPE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAPF; else goto cbAPG;
       cbAPF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAPG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.IO.readIO10_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_sbAtQ_info" {
     z_sbAtQ_info:
         const z_sbAtQ_entry;
         const 1;
         const 4294967312;
         const SbAxZ_srt+296;
 },
 sat_sbAu1_entry() //  [R1]
         { []
         }
     {offset
       cbAQb: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call go1_sbAtR_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbAu1_info" {
     sat_sbAu1_info:
         const sat_sbAu1_entry;
         const 2;
         const 18;
 },
 go1_sbAtR_entry() //  [R1, R2]
         { []
         }
     {offset
       cbAQi: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbAQj; else goto ubAQH;
       cbAQj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ubAQH: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _cbAPJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go1_sbAtR_info" {
     go1_sbAtR_info:
         const go1_sbAtR_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cbAPJ() //  []
         { []
         }
     {offset
       cbAPJ: // global
           I64[Sp - 16] = block_cbAPM_info;
           R1 = P64[Sp + 8];
           _sbAtR::P64 = P64[Sp];
           P64[Sp - 8] = P64[_sbAtR::P64 + 15];
           P64[Sp + 8] = P64[_sbAtR::P64 + 7];
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubAQL; else goto cbAPN;
       ubAQL: // global
           call _cbAPM(R1) args: 0, res: 0, upd: 0;
       cbAPN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbAPM() //  [R1]
         { []
         }
     {offset
       cbAPM: // global
           if (R1 & 7 == 1) goto cbAQf; else goto cbAQg;
       cbAQf: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cbAQg: // global
           I64[Sp] = block_cbAPS_info;
           _sbAtV::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 8] = _sbAtV::P64;
           if (R1 & 7 != 0) goto ubAQM; else goto cbAPT;
       ubAQM: // global
           call _cbAPS(R1) args: 0, res: 0, upd: 0;
       cbAPT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAPM_info" {
     block_cbAPM_info:
         const _cbAPM;
         const 3;
         const 30;
 },
 _cbAPS() //  [R1]
         { []
         }
     {offset
       cbAPS: // global
           I64[Sp - 8] = block_cbAPX_info;
           _sbAtY::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sbAtY::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubAQN; else goto cbAPY;
       ubAQN: // global
           call _cbAPX(R1) args: 0, res: 0, upd: 0;
       cbAPY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAPS_info" {
     block_cbAPS_info:
         const _cbAPS;
         const 3;
         const 30;
 },
 _cbAPX() //  [R1]
         { []
         }
     {offset
       cbAPX: // global
           if (R1 & 7 == 1) goto cbAQr; else goto ubAQI;
       cbAQr: // global
           _sbAtY::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbAQ2_info;
           R1 = _sbAtY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubAQO; else goto cbAQ3;
       ubAQO: // global
           call _cbAQ2(R1) args: 0, res: 0, upd: 0;
       cbAQ3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubAQI: // global
           Sp = Sp + 16;
           call _cbAQE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbAPX_info" {
     block_cbAPX_info:
         const _cbAPX;
         const 4;
         const 30;
 },
 _cbAQ2() //  [R1]
         { []
         }
     {offset
       cbAQ2: // global
           if (R1 & 7 == 1) goto cbAQt; else goto ubAQJ;
       cbAQt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbAQw; else goto cbAQv;
       cbAQw: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbAQv: // global
           I64[Hp - 24] = sat_sbAu1_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 24;
           R2 = P64[Sp + 24];
           Sp = Sp + 32;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       ubAQJ: // global
           Sp = Sp + 8;
           call _cbAQE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbAQ2_info" {
     block_cbAQ2_info:
         const _cbAQ2;
         const 3;
         const 30;
 },
 _cbAQE() //  []
         { []
         }
     {offset
       cbAQE: // global
           P64[Sp + 16] = P64[Sp];
           Sp = Sp + 8;
           call _cbAPJ() args: 0, res: 0, upd: 0;
     }
 },
 System.IO.readIO10_entry() //  [R2]
         { []
         }
     {offset
       cbAQX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAQY; else goto cbAQZ;
       cbAQY: // global
           R2 = R2;
           R1 = System.IO.readIO10_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbAQZ: // global
           I64[Sp - 8] = block_cbAPo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubARc; else goto cbAPp;
       ubARc: // global
           call _cbAPo(R1) args: 0, res: 0, upd: 0;
       cbAPp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.readIO10_info" {
     System.IO.readIO10_info:
         const System.IO.readIO10_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbAxZ_srt+296;
 },
 _cbAPo() //  [R1]
         { []
         }
     {offset
       cbAPo: // global
           if (R1 & 7 == 1) goto cbAQU; else goto cbAQV;
       cbAQU: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbAQV: // global
           I64[Sp - 8] = block_cbAPu_info;
           _sbAtL::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sbAtL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubARb; else goto cbAPv;
       ubARb: // global
           call _cbAPu(R1) args: 0, res: 0, upd: 0;
       cbAPv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAPo_info" {
     block_cbAPo_info:
         const _cbAPo;
         const 0;
         const 12884901918;
         const SbAxZ_srt+296;
 },
 _cbAPu() //  [R1]
         { []
         }
     {offset
       cbAPu: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbAR6; else goto cbAR5;
       cbAR6: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbAR5: // global
           _sbAtN::P64 = P64[R1 + 7];
           _sbAtO::P64 = P64[R1 + 15];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _sbAtN::P64;
           P64[Hp - 48] = GHC.Types.[]_closure+1;
           I64[Hp - 40] = z_sbAtQ_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = go1_sbAtR_info;
           P64[Hp - 8] = Hp - 62;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cbAR2_info;
           R3 = _sbAtO::P64;
           R2 = GHC.Read.lex1_closure;
           P64[Sp + 8] = Hp - 15;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAPu_info" {
     block_cbAPu_info:
         const _cbAPu;
         const 1;
         const 12884901918;
         const SbAxZ_srt+296;
 },
 _cbAR2() //  [R1]
         { []
         }
     {offset
       cbAR2: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go1_sbAtR_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAR2_info" {
     block_cbAR2_info:
         const _cbAR2;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.813041525 UTC

[section ""data" . System.IO.readIO1_closure" {
     System.IO.readIO1_closure:
         const System.IO.readIO1_info;
         const 0;
 },
 System.IO.readIO1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbASD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbASE; else goto cbASF;
       cbASE: // global
           R3 = R3;
           R2 = R2;
           R1 = System.IO.readIO1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbASF: // global
           I64[Sp - 8] = block_cbASB_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           P64[Sp - 16] = R3;
           Sp = Sp - 32;
           call GHC.Read.readsPrec_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.readIO1_info" {
     System.IO.readIO1_info:
         const System.IO.readIO1_entry;
         const 0;
         const 124554051598;
         const 12884901903;
         const SbAxZ_srt+296;
 },
 _cbASB() //  [R1]
         { []
         }
     {offset
       cbASB: // global
           I64[Sp] = block_cbASI_info;
           R2 = R1;
           call System.IO.readIO10_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbASB_info" {
     block_cbASB_info:
         const _cbASB;
         const 0;
         const 107374182430;
         const SbAxZ_srt+296;
 },
 _cbASI() //  [R1]
         { []
         }
     {offset
       cbASI: // global
           if (R1 & 7 == 1) goto cbASP; else goto cbASU;
       cbASP: // global
           R1 = System.IO.readIO6_closure;
           Sp = Sp + 8;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       cbASU: // global
           I64[Sp - 8] = block_cbASS_info;
           _sbAuc::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _sbAuc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubAT8; else goto cbASV;
       ubAT8: // global
           call _cbASS(R1) args: 0, res: 0, upd: 0;
       cbASV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbASI_info" {
     block_cbASI_info:
         const _cbASI;
         const 0;
         const 12884901918;
         const SbAxZ_srt+320;
 },
 _cbASS() //  [R1]
         { []
         }
     {offset
       cbASS: // global
           if (R1 & 7 == 1) goto cbAT1; else goto cbAT5;
       cbAT1: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbAT5: // global
           R1 = System.IO.readIO2_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbASS_info" {
     block_cbASS_info:
         const _cbASS;
         const 1;
         const 4294967326;
         const SbAxZ_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.821678108 UTC

[section ""data" . System.IO.readIO_closure" {
     System.IO.readIO_closure:
         const System.IO.readIO_info;
         const 0;
 },
 System.IO.readIO_entry() //  [R2, R3]
         { []
         }
     {offset
       cbATC: // global
           R3 = R3;
           R2 = R2;
           call System.IO.readIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.readIO_info" {
     System.IO.readIO_info:
         const System.IO.readIO_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbAxZ_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.825471132 UTC

[section ""data" . System.IO.readLn1_closure" {
     System.IO.readLn1_closure:
         const System.IO.readLn1_info;
         const 0;
 },
 section ""relreadonly" . ubATT_srtd" {
     ubATT_srtd:
         const SbAxZ_srt+56;
         const 36;
         const 38654705769;
 },
 System.IO.readLn1_entry() //  [R2]
         { []
         }
     {offset
       cbATP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbATQ; else goto cbATR;
       cbATQ: // global
           R2 = R2;
           R1 = System.IO.readLn1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbATR: // global
           I64[Sp - 16] = block_cbATN_info;
           R4 = GHC.IO.Handle.Text.hGetLine2_closure+2;
           R3 = GHC.IO.Handle.FD.stdin_closure;
           _sbAuh::P64 = R2;
           R2 = GHC.IO.Handle.Text.hGetLine4_closure;
           P64[Sp - 8] = _sbAuh::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.readLn1_info" {
     System.IO.readLn1_info:
         const System.IO.readLn1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubATT_srtd;
 },
 _cbATN() //  [R1]
         { []
         }
     {offset
       cbATN: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call System.IO.readIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbATN_info" {
     block_cbATN_info:
         const _cbATN;
         const 1;
         const 4294967326;
         const SbAxZ_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.831104523 UTC

[section ""data" . System.IO.readLn_closure" {
     System.IO.readLn_closure:
         const System.IO.readLn_info;
         const 0;
 },
 System.IO.readLn_entry() //  [R2]
         { []
         }
     {offset
       cbAU9: // global
           R2 = R2;
           call System.IO.readLn1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.readLn_info" {
     System.IO.readLn_info:
         const System.IO.readLn_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbAxZ_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.835283985 UTC

[section ""data" . System.IO.readFile1_closure" {
     System.IO.readFile1_closure:
         const System.IO.readFile1_info;
         const 0;
 },
 System.IO.readFile1_entry() //  [R2]
         { []
         }
     {offset
       cbAUm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbAUn; else goto cbAUo;
       cbAUn: // global
           R2 = R2;
           R1 = System.IO.readFile1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbAUo: // global
           I64[Sp - 8] = block_cbAUk_info;
           R3 = GHC.IO.IOMode.ReadMode_closure+1;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Handle.FD.openFile1_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.readFile1_info" {
     System.IO.readFile1_info:
         const System.IO.readFile1_entry;
         const 0;
         const 1152921783779721230;
         const 8589934597;
         const SbAxZ_srt+120;
 },
 _cbAUk() //  [R1]
         { []
         }
     {offset
       cbAUk: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.Handle.Text.hGetContents1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAUk_info" {
     block_cbAUk_info:
         const _cbAUk;
         const 0;
         const 4294967326;
         const SbAxZ_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.840647089 UTC

[section ""data" . System.IO.readFile_closure" {
     System.IO.readFile_closure:
         const System.IO.readFile_info;
         const 0;
 },
 System.IO.readFile_entry() //  [R2]
         { []
         }
     {offset
       cbAUE: // global
           R2 = R2;
           call System.IO.readFile1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.readFile_info" {
     System.IO.readFile_info:
         const System.IO.readFile_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbAxZ_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.844814524 UTC

[section ""data" . System.IO.interact1_closure" {
     System.IO.interact1_closure:
         const System.IO.interact1_info;
         const 0;
 },
 sat_sbAuw_entry() //  [R1]
         { []
         }
     {offset
       cbAUV: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbAuw_info" {
     sat_sbAuw_info:
         const sat_sbAuw_entry;
         const 2;
         const 18;
 },
 section ""relreadonly" . ubAV4_srtd" {
     ubAV4_srtd:
         const SbAxZ_srt;
         const 45;
         const 17592186078273;
 },
 System.IO.interact1_entry() //  [R2]
         { []
         }
     {offset
       cbAUY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAUZ; else goto cbAV0;
       cbAUZ: // global
           R2 = R2;
           R1 = System.IO.interact1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbAV0: // global
           I64[Sp - 16] = block_cbAUP_info;
           _sbAur::P64 = R2;
           R2 = GHC.IO.Handle.FD.stdin_closure;
           P64[Sp - 8] = _sbAur::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Text.hGetContents1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.interact1_info" {
     System.IO.interact1_info:
         const System.IO.interact1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubAV4_srtd;
 },
 _cbAUP() //  [R1]
         { []
         }
     {offset
       cbAUP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbAV3; else goto cbAV2;
       cbAV3: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbAV2: // global
           I64[Hp - 24] = sat_sbAuw_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R4 = GHC.Types.False_closure+1;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.FD.stdout_closure;
           Sp = Sp + 16;
           call GHC.IO.Handle.Text.hPutStr'_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAUP_info" {
     block_cbAUP_info:
         const _cbAUP;
         const 1;
         const 12884901918;
         const SbAxZ_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.852111414 UTC

[section ""data" . System.IO.interact_closure" {
     System.IO.interact_closure:
         const System.IO.interact_info;
         const 0;
 },
 System.IO.interact_entry() //  [R2]
         { []
         }
     {offset
       cbAVp: // global
           R2 = R2;
           call System.IO.interact1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.interact_info" {
     System.IO.interact_info:
         const System.IO.interact_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbAxZ_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.855439371 UTC

[section ""cstring" . lvl2_rbyQa_bytes" {
     lvl2_rbyQa_bytes:
         I8[] [98,117,103,32,105,110,32,83,121,115,116,101,109,46,73,79,46,111,112,101,110,84,101,109,112,70,105,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.857894317 UTC

[section ""data" . lvl3_rbyQb_closure" {
     lvl3_rbyQb_closure:
         const lvl3_rbyQb_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rbyQb_entry() //  [R1]
         { []
         }
     {offset
       cbAVF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbAVG; else goto cbAVH;
       cbAVG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAVH: // global
           (_cbAVA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbAVA::I64 == 0) goto cbAVC; else goto cbAVB;
       cbAVC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbAVB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbAVA::I64;
           I64[Sp - 24] = block_cbAVD_info;
           R2 = lvl2_rbyQa_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_rbyQb_info" {
     lvl3_rbyQb_info:
         const lvl3_rbyQb_entry;
         const 0;
         const 4294967317;
         const SbAxZ_srt+376;
 },
 _cbAVD() //  [R1]
         { []
         }
     {offset
       cbAVD: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbAVD_info" {
     block_cbAVD_info:
         const _cbAVD;
         const 0;
         const 4294967326;
         const SbAxZ_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.862733176 UTC

[section ""data" . lvl4_rbyQc_closure" {
     lvl4_rbyQc_closure:
         const GHC.Types.C#_con_info;
         const 46;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.865094883 UTC

[section ""data" . lvl5_rbyQd_closure" {
     lvl5_rbyQd_closure:
         const lvl5_rbyQd_info;
 },
 lvl5_rbyQd_entry() //  [R2]
         { []
         }
     {offset
       cbAW5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbAW6; else goto cbAW7;
       cbAW6: // global
           R2 = R2;
           R1 = lvl5_rbyQd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbAW7: // global
           I64[Sp - 8] = block_cbAW2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubAWf; else goto cbAW3;
       ubAWf: // global
           call _cbAW2(R1) args: 0, res: 0, upd: 0;
       cbAW3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl5_rbyQd_info" {
     lvl5_rbyQd_info:
         const lvl5_rbyQd_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbAW2() //  [R1]
         { []
         }
     {offset
       cbAW2: // global
           if (I64[R1 + 7] == 46) goto cbAWe; else goto cbAWd;
       cbAWe: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbAWd: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAW2_info" {
     block_cbAW2_info:
         const _cbAW2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.872021994 UTC

[section ""data" . lvl6_rbyQe_closure" {
     lvl6_rbyQe_closure:
         const lvl6_rbyQe_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_rbyQe_entry() //  [R1]
         { []
         }
     {offset
       cbAWH: // global
           _rbyQe::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbAXq; else goto cbAXr;
       cbAXr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbAXt; else goto cbAXs;
       cbAXt: // global
           HpAlloc = 16;
           goto cbAXq;
       cbAXq: // global
           R1 = _rbyQe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAXs: // global
           (_cbAWx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _rbyQe::P64);
           if (_cbAWx::I64 == 0) goto cbAWz; else goto cbAWy;
       cbAWz: // global
           call (I64[I64[_rbyQe::P64]])() args: 8, res: 0, upd: 8;
       cbAWy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbAWx::I64;
           (_sbAuF::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_o_nonblock();
           (_sbAuJ::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_o_noctty();
           (_sbAuN::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_o_creat();
           (_sbAuR::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_o_rdwr();
           (_sbAuV::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_o_excl();
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbAuF::I64)) | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbAuJ::I64)) | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbAuN::I64)) | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbAuR::I64)) | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbAuV::I64));
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_rbyQe_info" {
     lvl6_rbyQe_info:
         const lvl6_rbyQe_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.877887389 UTC

[section ""data" . $wlvl_rbyQf_closure" {
     $wlvl_rbyQf_closure:
         const $wlvl_rbyQf_info;
         const 0;
 },
 sat_sbAvg_entry() //  [R1]
         { []
         }
     {offset
       cbAY0: // global
           _sbAvg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbAY1; else goto cbAY2;
       cbAY2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbAY4; else goto cbAY3;
       cbAY4: // global
           HpAlloc = 16;
           goto cbAY1;
       cbAY1: // global
           R1 = _sbAvg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAY3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbAvg::P64;
           _sbAvc::P64 = P64[_sbAvg::P64 + 16];
           _sbAvd::P64 = P64[_sbAvg::P64 + 24];
           _sbAvb::I64 = I64[_sbAvg::P64 + 32];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _sbAvd::P64;
           R5 = Hp - 6;
           R4 = GHC.Base.Nothing_closure+1;
           R3 = _sbAvb::I64;
           R2 = _sbAvc::P64;
           Sp = Sp - 16;
           call Foreign.C.Error.$werrnoToIOError_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbAvg_info" {
     sat_sbAvg_info:
         const sat_sbAvg_entry;
         const 4294967298;
         const 4294967311;
         const SbAxZ_srt+384;
 },
 sat_sbAvh_entry() //  [R1]
         { []
         }
     {offset
       cbAY5: // global
           _sbAvh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbAY6; else goto cbAY7;
       cbAY7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbAY9; else goto cbAY8;
       cbAY9: // global
           HpAlloc = 40;
           goto cbAY6;
       cbAY6: // global
           R1 = _sbAvh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAY8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbAvh::P64;
           _sbAvc::P64 = P64[_sbAvh::P64 + 16];
           _sbAvd::P64 = P64[_sbAvh::P64 + 24];
           _sbAvb::I64 = I64[_sbAvh::P64 + 32];
           I64[Hp - 32] = sat_sbAvg_info;
           P64[Hp - 16] = _sbAvc::P64;
           P64[Hp - 8] = _sbAvd::P64;
           I64[Hp] = _sbAvb::I64;
           R2 = Hp - 32;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbAvh_info" {
     sat_sbAvh_info:
         const sat_sbAvh_entry;
         const 4294967298;
         const 70373039144975;
         const SbAxZ_srt+272;
 },
 $wlvl_rbyQf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbAYa: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbAYe; else goto cbAYd;
       cbAYe: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wlvl_rbyQf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbAYd: // global
           I64[Hp - 32] = sat_sbAvh_info;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           I64[Hp] = R2;
           R1 = Hp - 32;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl_rbyQf_info" {
     $wlvl_rbyQf_info:
         const $wlvl_rbyQf_entry;
         const 0;
         const 211110527500302;
         const 17179869203;
         const SbAxZ_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.885864228 UTC

[section ""data" . lvl7_rbyQg_closure" {
     lvl7_rbyQg_closure:
         const lvl7_rbyQg_info;
         const 0;
 },
 lvl7_rbyQg_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbAYE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbAYF; else goto cbAYG;
       cbAYF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = lvl7_rbyQg_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbAYG: // global
           I64[Sp - 24] = block_cbAYB_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubAYK; else goto cbAYC;
       ubAYK: // global
           call _cbAYB(R1) args: 0, res: 0, upd: 0;
       cbAYC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl7_rbyQg_info" {
     lvl7_rbyQg_info:
         const lvl7_rbyQg_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const SbAxZ_srt+392;
 },
 _cbAYB() //  [R1]
         { []
         }
     {offset
       cbAYB: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call $wlvl_rbyQf_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbAYB_info" {
     block_cbAYB_info:
         const _cbAYB;
         const 2;
         const 4294967326;
         const SbAxZ_srt+392;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.892363133 UTC

[section ""data" . lvl8_rbyQh_closure" {
     lvl8_rbyQh_closure:
         const lvl8_rbyQh_info;
 },
 sat_sbAvs_entry() //  [R1]
         { []
         }
     {offset
       cbAZ6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbAZd; else goto cbAZe;
       cbAZd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbAZe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbAZ3_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubAZi; else goto cbAZ4;
       ubAZi: // global
           call _cbAZ3(R1) args: 0, res: 0, upd: 0;
       cbAZ4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbAvs_info" {
     sat_sbAvs_info:
         const sat_sbAvs_entry;
         const 1;
         const 16;
 },
 _cbAZ3() //  [R1]
         { []
         }
     {offset
       cbAZ3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbAZh; else goto cbAZg;
       cbAZh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbAZg: // global
           _sbAvr::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sbAvr::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbAZ3_info" {
     block_cbAZ3_info:
         const _cbAZ3;
         const 0;
         const 30;
 },
 lvl8_rbyQh_entry() //  [R2]
         { []
         }
     {offset
       cbAZk: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbAZo; else goto cbAZn;
       cbAZo: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = lvl8_rbyQh_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbAZn: // global
           I64[Hp - 40] = sat_sbAvs_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl8_rbyQh_info" {
     lvl8_rbyQh_info:
         const lvl8_rbyQh_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.900055207 UTC

[section ""data" . go_rbyQi_closure" {
     go_rbyQi_closure:
         const go_rbyQi_info;
 },
 go_rbyQi_entry() //  [R2, R3]
         { []
         }
     {offset
       cbAZV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbAZW; else goto ubB04;
       cbAZW: // global
           R3 = R3;
           R2 = R2;
           R1 = go_rbyQi_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ubB04: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cbAZL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_rbyQi_info" {
     go_rbyQi_info:
         const go_rbyQi_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbAZL() //  []
         { []
         }
     {offset
       cbAZL: // global
           _sbAvt::P64 = P64[Sp];
           I64[Sp] = block_cbAZO_info;
           R1 = _sbAvt::P64;
           if (R1 & 7 != 0) goto ubB06; else goto cbAZP;
       ubB06: // global
           call _cbAZO(R1) args: 0, res: 0, upd: 0;
       cbAZP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbAZO() //  [R1]
         { []
         }
     {offset
       cbAZO: // global
           if (R1 & 7 == 1) goto cbAZS; else goto cbAZT;
       cbAZS: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cbAZT: // global
           P64[Sp] = P64[R1 + 14];
           P64[Sp + 8] = P64[R1 + 6];
           call _cbAZL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbAZO_info" {
     block_cbAZO_info:
         const _cbAZO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.906463326 UTC

[section ""cstring" . lvl9_rbyQj_bytes" {
     lvl9_rbyQj_bytes:
         I8[] [45]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.908076867 UTC

[section ""cstring" . lvl10_rbyQk_bytes" {
     lvl10_rbyQk_bytes:
         I8[] [111,112,101,110,84,101,109,112,70,105,108,101,39,58,32,84,101,109,112,108,97,116,101,32,115,116,114,105,110,103,32,109,117,115,116,32,110,111,116,32,99,111,110,116,97,105,110,32,112,97,116,104,32,115,101,112,97,114,97,116,111,114,32,99,104,97,114,97,99,116,101,114,115,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.910435791 UTC

[section ""data" . lvl11_rbyQl_closure" {
     lvl11_rbyQl_closure:
         const lvl11_rbyQl_info;
         const 0;
 },
 lvl11_rbyQl_entry() //  [R2]
         { []
         }
     {offset
       cbB0z: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbB0A; else goto cbB0B;
       cbB0A: // global
           R2 = R2;
           R1 = lvl11_rbyQl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbB0B: // global
           I64[Sp - 8] = block_cbB0x_info;
           R3 = R2;
           R2 = lvl10_rbyQk_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl11_rbyQl_info" {
     lvl11_rbyQl_info:
         const lvl11_rbyQl_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SbAxZ_srt+408;
 },
 _cbB0x() //  [R1]
         { []
         }
     {offset
       cbB0x: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbB0x_info" {
     block_cbB0x_info:
         const _cbB0x;
         const 0;
         const 4294967326;
         const SbAxZ_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:32.933261523 UTC

[section ""data" . System.IO.openBinaryTempFile5_closure" {
     System.IO.openBinaryTempFile5_closure:
         const System.IO.openBinaryTempFile5_info;
         const 0;
 },
 sat_sbAvO_entry() //  [R1]
         { []
         }
     {offset
       cbB1f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbB1g; else goto cbB1h;
       cbB1g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbB1h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.List.reverse_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbAvO_info" {
     sat_sbAvO_info:
         const sat_sbAvO_entry;
         const 1;
         const 16;
 },
 sat_sbAvV_entry() //  [R1]
         { []
         }
     {offset
       cbB1w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbB1x; else goto cbB1y;
       cbB1x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbB1y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.List.reverse_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbAvV_info" {
     sat_sbAvV_info:
         const sat_sbAvV_entry;
         const 1;
         const 16;
 },
 sat_sbAvU_entry() //  [R1]
         { []
         }
     {offset
       cbB1E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbB1F; else goto cbB1G;
       cbB1F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbB1G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.List.reverse_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbAvU_info" {
     sat_sbAvU_info:
         const sat_sbAvU_entry;
         const 1;
         const 16;
 },
 ds_sbAvI_entry() //  [R1]
         { []
         }
     {offset
       cbB1H: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbB1I; else goto cbB1J;
       cbB1I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbB1J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbB10_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_sbAvI_info" {
     ds_sbAvI_info:
         const ds_sbAvI_entry;
         const 1;
         const 4294967312;
         const SbAxZ_srt+424;
 },
 _cbB10() //  [R1]
         { []
         }
     {offset
       cbB10: // global
           I64[Sp] = block_cbB14_info;
           R3 = R1;
           R2 = lvl5_rbyQd_closure+1;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbB10_info" {
     block_cbB10_info:
         const _cbB10;
         const 0;
         const 4294967326;
         const SbAxZ_srt+424;
 },
 _cbB14() //  [R1, R2]
         { []
         }
     {offset
       cbB14: // global
           I64[Sp - 8] = block_cbB16_info;
           _sbAvL::P64 = R1;
           R1 = R2;
           P64[Sp] = _sbAvL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubB22; else goto cbB17;
       ubB22: // global
           call _cbB16(R1) args: 0, res: 0, upd: 0;
       cbB17: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbB14_info" {
     block_cbB14_info:
         const _cbB14;
         const 0;
         const 4294967326;
         const SbAxZ_srt+424;
 },
 _cbB16() //  [R1]
         { []
         }
     {offset
       cbB16: // global
           if (R1 & 7 == 1) goto cbB1O; else goto cbB1T;
       cbB1O: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbB1R; else goto cbB1Q;
       cbB1R: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbB1Q: // global
           I64[Hp - 40] = sat_sbAvO_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbB1T: // global
           I64[Sp - 8] = block_cbB1k_info;
           _sbAvQ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sbAvQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubB23; else goto cbB1l;
       ubB23: // global
           call _cbB1k(R1) args: 0, res: 0, upd: 0;
       cbB1l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbB16_info" {
     block_cbB16_info:
         const _cbB16;
         const 1;
         const 4294967326;
         const SbAxZ_srt+424;
 },
 _cbB1k() //  [R1]
         { []
         }
     {offset
       cbB1k: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cbB1W; else goto cbB1V;
       cbB1W: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbB1V: // global
           if (I64[R1 + 7] == 46) goto cbB20; else goto cbB1Y;
       cbB20: // global
           I64[Hp - 88] = sat_sbAvV_info;
           P64[Hp - 72] = P64[Sp + 16];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = lvl4_rbyQc_closure+1;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = sat_sbAvU_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbB1Y: // global
           Hp = Hp - 96;
           R1 = lvl3_rbyQb_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbB1k_info" {
     block_cbB1k_info:
         const _cbB1k;
         const 2;
         const 4294967326;
         const SbAxZ_srt+424;
 },
 oflags_sbAvX_entry() //  [R1]
         { []
         }
     {offset
       cbB2b: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbB2c; else goto cbB2d;
       cbB2c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbB2d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbB28_info;
           _sbAvE::P64 = P64[R1 + 16];
           R1 = lvl6_rbyQe_closure;
           P64[Sp - 24] = _sbAvE::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubB2O; else goto cbB29;
       ubB2O: // global
           call _cbB28(R1) args: 0, res: 0, upd: 0;
       cbB29: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . oflags_sbAvX_info" {
     oflags_sbAvX_info:
         const oflags_sbAvX_entry;
         const 1;
         const 4294967312;
         const SbAxZ_srt+432;
 },
 _cbB28() //  [R1]
         { []
         }
     {offset
       cbB28: // global
           I64[Sp - 8] = block_cbB2g_info;
           _sbAvY::P64 = R1;
           _sbAvZ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _sbAvZ::I64;
           P64[Sp + 8] = _sbAvY::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubB2N; else goto cbB2i;
       ubB2N: // global
           call _cbB2g(R1) args: 0, res: 0, upd: 0;
       cbB2i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbB28_info" {
     block_cbB28_info:
         const _cbB28;
         const 1;
         const 30;
 },
 _cbB2g() //  [R1]
         { []
         }
     {offset
       cbB2g: // global
           if (R1 & 7 == 1) goto cbB2o; else goto cbB2I;
       cbB2o: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cbB2I: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbB2L; else goto cbB2K;
       cbB2L: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbB2K: // global
           _sbAvZ::I64 = I64[Sp + 8];
           (_sbAw4::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_o_binary();
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _sbAvZ::I64 | %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbAw4::I64));
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbB2g_info" {
     block_cbB2g_info:
         const _cbB2g;
         const 66;
         const 30;
 },
 lvl12_sbAwa_entry() //  [R1, R2]
         { []
         }
     {offset
       cbB2X: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbB3i; else goto cbB3j;
       cbB3i: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbB3j: // global
           I64[Sp - 24] = block_cbB2U_info;
           _sbAvF::P64 = P64[R1 + 6];
           _sbAvX::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 16] = _sbAvF::P64;
           P64[Sp - 8] = _sbAvX::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubB3q; else goto cbB2V;
       ubB3q: // global
           call _cbB2U(R1) args: 0, res: 0, upd: 0;
       cbB2V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl12_sbAwa_info" {
     lvl12_sbAwa_info:
         const lvl12_sbAwa_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cbB2U() //  [R1]
         { []
         }
     {offset
       cbB2U: // global
           I64[Sp] = block_cbB30_info;
           _sbAwe::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sbAwe::I64;
           if (R1 & 7 != 0) goto ubB3p; else goto cbB31;
       ubB3p: // global
           call _cbB30(R1) args: 0, res: 0, upd: 0;
       cbB31: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbB2U_info" {
     block_cbB2U_info:
         const _cbB2U;
         const 2;
         const 30;
 },
 _cbB30() //  [R1]
         { []
         }
     {offset
       cbB30: // global
           I64[Sp] = block_cbB35_info;
           _sbAwg::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sbAwg::I64;
           if (R1 & 7 != 0) goto ubB3r; else goto cbB36;
       ubB3r: // global
           call _cbB35(R1) args: 0, res: 0, upd: 0;
       cbB36: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbB30_info" {
     block_cbB30_info:
         const _cbB30;
         const 130;
         const 30;
 },
 _cbB35() //  [R1]
         { []
         }
     {offset
       cbB35: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbB3o; else goto cbB3n;
       cbB3o: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbB3n: // global
           (_sbAwm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     ‘signed’,]  result hints:  [‘signed’] __hscore_open(I64[Sp + 16], I64[Sp + 8], I64[R1 + 7]);
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbAwm::I64));
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbB35_info" {
     block_cbB35_info:
         const _cbB35;
         const 194;
         const 30;
 },
 sat_sbAwq_entry() //  [R1]
         { []
         }
     {offset
       cbB3A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbB3B; else goto cbB3C;
       cbB3B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbB3C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.List.lastError_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_rbyQi_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbAwq_info" {
     sat_sbAwq_info:
         const sat_sbAwq_entry;
         const 1;
         const 4294967312;
         const SbAxZ_srt+440;
 },
 lvl13_sbAwp_entry() //  [R1]
         { []
         }
     {offset
       cbB3E: // global
           _sbAwp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbB3F; else goto cbB3G;
       cbB3G: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbB3I; else goto cbB3H;
       cbB3I: // global
           HpAlloc = 48;
           goto cbB3F;
       cbB3F: // global
           R1 = _sbAwp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbB3H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbAwp::P64;
           _sbAvC::P64 = P64[_sbAwp::P64 + 16];
           I64[Hp - 40] = sat_sbAwq_info;
           P64[Hp - 24] = _sbAvC::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = GHC.Types.[]_closure+1;
           R4 = Hp - 14;
           R3 = pathSeparatorChar_rbxCK_closure+1;
           R2 = GHC.Classes.$fEqChar_closure;
           Sp = Sp - 16;
           call GHC.List.elem_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_sbAwp_info" {
     lvl13_sbAwp_info:
         const lvl13_sbAwp_entry;
         const 1;
         const 4294967312;
         const SbAxZ_srt+440;
 },
 sat_sbAwY_entry() //  [R1]
         { []
         }
     {offset
       cbB4t: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbB4z; else goto cbB4A;
       cbB4z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbB4A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbB4q_info;
           _sbAwM::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sbAwM::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubB4F; else goto cbB4r;
       ubB4F: // global
           call _cbB4q(R1) args: 0, res: 0, upd: 0;
       cbB4r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbAwY_info" {
     sat_sbAwY_info:
         const sat_sbAwY_entry;
         const 2;
         const 18;
 },
 _cbB4q() //  [R1]
         { []
         }
     {offset
       cbB4q: // global
           I64[Sp] = block_cbB4w_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbB4q_info" {
     block_cbB4q_info:
         const _cbB4q;
         const 1;
         const 30;
 },
 _cbB4w() //  [R1, R2]
         { []
         }
     {offset
       cbB4w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbB4E; else goto cbB4D;
       cbB4E: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cbB4D: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = P64[Sp + 8];
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbB4w_info" {
     block_cbB4w_info:
         const _cbB4w;
         const 1;
         const 30;
 },
 sat_sbAwZ_entry() //  [R1]
         { []
         }
     {offset
       cbB4G: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbB4K; else goto cbB4J;
       cbB4K: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbB4J: // global
           _sbAwF::P64 = P64[R1 + 16];
           _sbAwM::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sbAwY_info;
           P64[Hp - 8] = _sbAwF::P64;
           P64[Hp] = _sbAwM::P64;
           R3 = Hp - 24;
           R2 = lvl9_rbyQj_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbAwZ_info" {
     sat_sbAwZ_info:
         const sat_sbAwZ_entry;
         const 2;
         const 18;
 },
 sat_sbAx0_entry() //  [R1]
         { []
         }
     {offset
       cbB4L: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbB4N; else goto cbB4O;
       cbB4N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbB4O: // global
           I64[Sp - 24] = block_cbB4g_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[R1 + 32]));
           R2 = 0;
           P64[Sp - 16] = P64[R1 + 16];
           P64[Sp - 8] = P64[R1 + 24];
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbAx0_info" {
     sat_sbAx0_info:
         const sat_sbAx0_entry;
         const 4294967298;
         const 15;
 },
 _cbB4g() //  [R1, R2]
         { []
         }
     {offset
       cbB4g: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbB4R; else goto cbB4Q;
       cbB4R: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cbB4Q: // global
           I64[Hp - 48] = sat_sbAwZ_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbB4g_info" {
     block_cbB4g_info:
         const _cbB4g;
         const 2;
         const 30;
 },
 filepath_sbAwJ_entry() //  [R1]
         { []
         }
     {offset
       cbB4S: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cbB4T; else goto cbB4U;
       cbB4T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbB4U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cbB44_info;
           _sbAvC::P64 = P64[R1 + 16];
           _sbAwp::P64 = P64[R1 + 32];
           _sbAwF::P64 = P64[R1 + 40];
           _sbAwA::I64 = I64[R1 + 48];
           R1 = P64[R1 + 24];
           P64[Sp - 48] = _sbAvC::P64;
           P64[Sp - 40] = _sbAwp::P64;
           I64[Sp - 32] = _sbAwA::I64;
           P64[Sp - 24] = _sbAwF::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ubB5D; else goto cbB45;
       ubB5D: // global
           call _cbB44(R1) args: 0, res: 0, upd: 0;
       cbB45: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . filepath_sbAwJ_info" {
     filepath_sbAwJ_info:
         const filepath_sbAwJ_entry;
         const 4294967300;
         const 15;
 },
 _cbB44() //  [R1]
         { []
         }
     {offset
       cbB44: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbB4Y; else goto cbB4X;
       cbB4Y: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbB4X: // global
           _sbAwL::P64 = P64[R1 + 7];
           _sbAwM::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_sbAx0_info;
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = _sbAwM::P64;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_cbB4V_info;
           R3 = Hp - 32;
           R2 = _sbAwL::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbB44_info" {
     block_cbB44_info:
         const _cbB44;
         const 260;
         const 30;
 },
 _cbB4V() //  [R1]
         { []
         }
     {offset
       cbB4V: // global
           _sbAvC::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbB54; else goto cbB59;
       cbB54: // global
           R1 = _sbAvC::P64 & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cbB59: // global
           I64[Sp + 8] = block_cbB57_info;
           _sbAx1::P64 = R1;
           R1 = _sbAvC::P64;
           P64[Sp + 32] = _sbAx1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubB5E; else goto cbB5a;
       ubB5E: // global
           call _cbB57(R1) args: 0, res: 0, upd: 0;
       cbB5a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbB4V_info" {
     block_cbB4V_info:
         const _cbB4V;
         const 772;
         const 30;
 },
 _cbB57() //  [R1]
         { []
         }
     {offset
       cbB57: // global
           if (R1 & 7 == 1) goto cbB5g; else goto cbB5l;
       cbB5g: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cbB5l: // global
           _sbAwp::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbB5j_info;
           _sbAx4::P64 = R1;
           R1 = _sbAwp::P64;
           P64[Sp + 16] = _sbAx4::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubB5F; else goto cbB5m;
       ubB5F: // global
           call _cbB5j(R1) args: 0, res: 0, upd: 0;
       cbB5m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbB57_info" {
     block_cbB57_info:
         const _cbB57;
         const 131;
         const 30;
 },
 _cbB5j() //  [R1]
         { []
         }
     {offset
       cbB5j: // global
           _sbAx1::P64 = P64[Sp + 16];
           _sbAx4::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbB5s; else goto cbB5z;
       cbB5s: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbB5v; else goto cbB5u;
       cbB5v: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbB5u: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = pathSeparatorChar_rbxCK_closure+1;
           P64[Hp] = _sbAx1::P64;
           R3 = Hp - 14;
           R2 = _sbAx4::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cbB5z: // global
           R3 = _sbAx1::P64;
           R2 = _sbAx4::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbB5j_info" {
     block_cbB5j_info:
         const _cbB5j;
         const 2;
         const 30;
 },
 System.IO.openBinaryTempFile5_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbB5K: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbB5L; else goto cbB5M;
       cbB5L: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.IO.openBinaryTempFile5_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbB5M: // global
           I64[Sp - 48] = block_cbB0S_info;
           _sbAvD::P64 = R4;
           R4 = R4;
           _sbAvC::P64 = R3;
           R3 = pathSeparatorChar_rbxCK_closure+1;
           _sbAvB::P64 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           P64[Sp - 40] = _sbAvB::P64;
           P64[Sp - 32] = _sbAvC::P64;
           P64[Sp - 24] = _sbAvD::P64;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 48;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.openBinaryTempFile5_info" {
     System.IO.openBinaryTempFile5_info:
         const System.IO.openBinaryTempFile5_entry;
         const 0;
         const 17579301142542;
         const 25769803801;
         const SbAxZ_srt+400;
 },
 _cbB0S() //  [R1]
         { []
         }
     {offset
       cbB0S: // global
           _sbAvD::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cbB5H; else goto cbB5I;
       cbB5H: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cbB5P; else goto cbB5O;
       cbB5P: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbB5O: // global
           I64[Hp - 88] = ds_sbAvI_info;
           P64[Hp - 72] = _sbAvD::P64;
           I64[Hp - 64] = oflags_sbAvX_info;
           P64[Hp - 48] = P64[Sp + 32];
           I64[Hp - 40] = lvl12_sbAwa_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = lvl13_sbAwp_info;
           P64[Hp] = P64[Sp + 16];
           P64[Sp + 24] = Hp - 16;
           P64[Sp + 32] = Hp - 38;
           P64[Sp + 40] = Hp - 88;
           Sp = Sp + 8;
           call _cbB3O() args: 0, res: 0, upd: 0;
       cbB5I: // global
           R2 = _sbAvD::P64;
           Sp = Sp + 48;
           call lvl11_rbyQl_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbB0S_info" {
     block_cbB0S_info:
         const _cbB0S;
         const 5;
         const 8783208120350;
         const SbAxZ_srt+400;
 },
 _cbB3O() //  []
         { []
         }
     {offset
       cbB3O: // global
           (_sbAwA::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] getpid();
           I64[Sp - 16] = block_cbB3R_info;
           R1 = tempCounter_rbxCH_closure;
           I64[Sp - 8] = _sbAwA::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubB7D; else goto cbB3S;
       ubB7D: // global
           call _cbB3R(R1) args: 0, res: 0, upd: 0;
       cbB3S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbB3R() //  [R1]
         { []
         }
     {offset
       cbB3R: // global
           I64[Sp] = block_cbB3W_info;
           R2 = lvl8_rbyQh_closure+1;
           R1 = P64[R1 + 7];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbB3R_info" {
     block_cbB3R_info:
         const _cbB3R;
         const 70;
         const 8525510082590;
         const SbAxZ_srt+400;
 },
 _cbB3W() //  [R1]
         { []
         }
     {offset
       cbB3W: // global
           I64[Sp - 8] = block_cbB3Y_info;
           _sbAwF::P64 = R1;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_closure;
           P64[Sp] = _sbAwF::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbB3W_info" {
     block_cbB3W_info:
         const _cbB3W;
         const 70;
         const 8525510082590;
         const SbAxZ_srt+400;
 },
 _cbB3Y() //  [R1]
         { []
         }
     {offset
       cbB3Y: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbB62; else goto cbB61;
       cbB62: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbB61: // global
           I64[Hp - 48] = filepath_sbAwJ_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 56];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           I64[Sp + 8] = block_cbB5U_info;
           R4 = P64[Sp + 48];
           _cbB40::P64 = Hp - 48;
           R3 = _cbB40::P64;
           R2 = R1;
           P64[Sp + 16] = _cbB40::P64;
           Sp = Sp + 8;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbB3Y_info" {
     block_cbB3Y_info:
         const _cbB3Y;
         const 135;
         const 8525510082590;
         const SbAxZ_srt+400;
 },
 _cbB5U() //  [R1]
         { []
         }
     {offset
       cbB5U: // global
           I64[Sp] = block_cbB5W_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubB7E; else goto cbB64;
       ubB7E: // global
           call _cbB5W(R1) args: 0, res: 0, upd: 0;
       cbB64: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbB5U_info" {
     block_cbB5U_info:
         const _cbB5U;
         const 6;
         const 8525510082590;
         const SbAxZ_srt+400;
 },
 _cbB5W() //  [R1]
         { []
         }
     {offset
       cbB5W: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbB6a; else goto cbB69;
       cbB6a: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbB69: // global
           if (%MO_S_Ge_W64(I64[R1 + 7], 0)) goto cbB71; else goto cbB7m;
       cbB71: // global
           I64[Hp - 8] = System.IO.NewFileCreated_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 7;
           goto ubB7H;
       cbB7m: // global
           (_sbAxG::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           Hp = Hp - 16;
           _sbAxH::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbAxG::I64));
           if (_sbAxH::I64 != 17) goto ubB7x; else goto cbB7i;
       ubB7x: // global
           I64[Sp] = _sbAxH::I64;
           call _cbB7b() args: 0, res: 0, upd: 0;
       cbB7i: // global
           P64[Sp] = System.IO.FileExists_closure+2;
           goto ubB7H;
       ubB7H: // global
           call _sbAxe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbB5W_info" {
     block_cbB5W_info:
         const _cbB5W;
         const 6;
         const 8525510082590;
         const SbAxZ_srt+400;
 },
 _cbB7b() //  []
         { []
         }
     {offset
       cbB7b: // global
           Hp = Hp + 32;
           _sbAxH::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto cbB7f; else goto cbB7e;
       cbB7f: // global
           HpAlloc = 32;
           I64[Sp] = block_cbB78_info;
           R1 = _sbAxH::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbB7e: // global
           I64[Hp - 24] = GHC.Int.I32#_con_info;
           I64[Hp - 16] = _sbAxH::I64;
           I64[Hp - 8] = System.IO.OpenNewError_con_info;
           P64[Hp] = Hp - 23;
           P64[Sp] = Hp - 5;
           call _sbAxe() args: 0, res: 0, upd: 0;
     }
 },
 _cbB78() //  [R1]
         { []
         }
     {offset
       cbB78: // global
           I64[Sp] = R1;
           call _cbB7b() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbB78_info" {
     block_cbB78_info:
         const _cbB78;
         const 6;
         const 8525510082590;
         const SbAxZ_srt+400;
 },
 _sbAxe() //  []
         { []
         }
     {offset
       sbAxe: // global
           _sbAxg::P64 = P64[Sp];
           I64[Sp] = block_cbB6g_info;
           R1 = _sbAxg::P64;
           if (R1 & 7 != 0) goto ubB7N; else goto cbB6i;
       ubB7N: // global
           call _cbB6g(R1) args: 0, res: 0, upd: 0;
       cbB6i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbB6g() //  [R1]
         { []
         }
     {offset
       cbB6g: // global
           _cbB7t::P64 = R1 & 7;
           if (_cbB7t::P64 < 3) goto ubB7u; else goto cbB6X;
       ubB7u: // global
           if (_cbB7t::P64 < 2) goto cbB6G; else goto ubB7B;
       cbB6G: // global
           I64[Sp] = block_cbB6m_info;
           R5 = GHC.Types.True_closure+2;
           R4 = GHC.Base.Nothing_closure+1;
           R3 = GHC.IO.IOMode.ReadWriteMode_closure+4;
           R2 = P64[R1 + 7];
           call GHC.IO.FD.$wmkFD_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 8, upd: 8;
       ubB7B: // global
           Sp = Sp + 16;
           call _cbB3O() args: 0, res: 0, upd: 0;
       cbB6X: // global
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[R1 + 5];
           Sp = Sp + 56;
           call lvl7_rbyQg_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbB6g_info" {
     block_cbB6g_info:
         const _cbB6g;
         const 6;
         const 8525510082590;
         const SbAxZ_srt+400;
 },
 _cbB6m() //  [R1]
         { []
         }
     {offset
       cbB6m: // global
           I64[Sp] = block_cbB6o_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubB7J; else goto cbB6p;
       ubB7J: // global
           call _cbB6o(R1) args: 0, res: 0, upd: 0;
       cbB6p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbB6m_info" {
     block_cbB6m_info:
         const _cbB6m;
         const 3974;
         const 21474836510;
         const SbAxZ_srt+456;
 },
 _cbB6o() //  [R1]
         { []
         }
     {offset
       cbB6o: // global
           I64[Sp] = block_cbB6t_info;
           _sbAxn::P64 = P64[R1 + 7];
           _sbAxo::P64 = P64[R1 + 15];
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           P64[Sp + 40] = _sbAxo::P64;
           P64[Sp + 48] = _sbAxn::P64;
           if (R1 & 7 != 0) goto ubB7K; else goto cbB6u;
       ubB7K: // global
           call _cbB6t(R1) args: 0, res: 0, upd: 0;
       cbB6u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbB6o_info" {
     block_cbB6o_info:
         const _cbB6o;
         const 3974;
         const 21474836510;
         const SbAxZ_srt+456;
 },
 _cbB6t() //  [R1]
         { []
         }
     {offset
       cbB6t: // global
           I64[Sp] = block_cbB6y_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbB6t_info" {
     block_cbB6t_info:
         const _cbB6t;
         const 902;
         const 4294967326;
         const SbAxZ_srt+472;
 },
 _cbB6y() //  [R1]
         { []
         }
     {offset
       cbB6y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbB6M; else goto cbB6L;
       cbB6M: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbB6L: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           I64[Sp] = block_cbB6B_info;
           R6 = GHC.Types.False_closure+1;
           R5 = GHC.IO.IOMode.ReadWriteMode_closure+4;
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 48];
           P64[Sp - 8] = Hp - 6;
           Sp = Sp - 8;
           call GHC.IO.Handle.FD.fdToHandle5_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbB6y_info" {
     block_cbB6y_info:
         const _cbB6y;
         const 902;
         const 4294967326;
         const SbAxZ_srt+472;
 },
 _cbB6B() //  [R1]
         { []
         }
     {offset
       cbB6B: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbB6P; else goto cbB6O;
       cbB6P: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbB6O: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbB6B_info" {
     block_cbB6B_info:
         const _cbB6B;
         const 3974;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.00998621 UTC

[section ""cstring" . System.IO.openBinaryTempFileWithDefaultPermissions4_bytes" {
     System.IO.openBinaryTempFileWithDefaultPermissions4_bytes:
         I8[] [111,112,101,110,66,105,110,97,114,121,84,101,109,112,70,105,108,101,87,105,116,104,68,101,102,97,117,108,116,80,101,114,109,105,115,115,105,111,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.012276196 UTC

[section ""data" . System.IO.openBinaryTempFileWithDefaultPermissions3_closure" {
     System.IO.openBinaryTempFileWithDefaultPermissions3_closure:
         const System.IO.openBinaryTempFileWithDefaultPermissions3_info;
         const 0;
         const 0;
         const 0;
 },
 System.IO.openBinaryTempFileWithDefaultPermissions3_entry() //  [R1]
         { []
         }
     {offset
       cbBcM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbBcN; else goto cbBcO;
       cbBcN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbBcO: // global
           (_cbBcJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbBcJ::I64 == 0) goto cbBcL; else goto cbBcK;
       cbBcL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbBcK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbBcJ::I64;
           R2 = System.IO.openBinaryTempFileWithDefaultPermissions4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.IO.openBinaryTempFileWithDefaultPermissions3_info" {
     System.IO.openBinaryTempFileWithDefaultPermissions3_info:
         const System.IO.openBinaryTempFileWithDefaultPermissions3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.015756878 UTC

[section ""data" . System.IO.openBinaryTempFileWithDefaultPermissions2_closure" {
     System.IO.openBinaryTempFileWithDefaultPermissions2_closure:
         const GHC.Word.W32#_con_info;
         const 438;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.017823915 UTC

[section ""data" . System.IO.openBinaryTempFileWithDefaultPermissions1_closure" {
     System.IO.openBinaryTempFileWithDefaultPermissions1_closure:
         const System.IO.openBinaryTempFileWithDefaultPermissions1_info;
         const 0;
 },
 System.IO.openBinaryTempFileWithDefaultPermissions1_entry() //  [R2,
                                                                  R3]
         { []
         }
     {offset
       cbBd2: // global
           R6 = System.IO.openBinaryTempFileWithDefaultPermissions2_closure+1;
           R5 = GHC.Types.True_closure+2;
           R4 = R3;
           R3 = R2;
           R2 = System.IO.openBinaryTempFileWithDefaultPermissions3_closure;
           call System.IO.openBinaryTempFile5_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.openBinaryTempFileWithDefaultPermissions1_info" {
     System.IO.openBinaryTempFileWithDefaultPermissions1_info:
         const System.IO.openBinaryTempFileWithDefaultPermissions1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const SbAxZ_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.021184369 UTC

[section ""data" . System.IO.openBinaryTempFileWithDefaultPermissions_closure" {
     System.IO.openBinaryTempFileWithDefaultPermissions_closure:
         const System.IO.openBinaryTempFileWithDefaultPermissions_info;
         const 0;
 },
 System.IO.openBinaryTempFileWithDefaultPermissions_entry() //  [R2,
                                                                 R3]
         { []
         }
     {offset
       cbBde: // global
           R3 = R3;
           R2 = R2;
           call System.IO.openBinaryTempFileWithDefaultPermissions1_entry(R3,
                                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.openBinaryTempFileWithDefaultPermissions_info" {
     System.IO.openBinaryTempFileWithDefaultPermissions_info:
         const System.IO.openBinaryTempFileWithDefaultPermissions_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbAxZ_srt+504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.025618506 UTC

[section ""cstring" . System.IO.openTempFileWithDefaultPermissions3_bytes" {
     System.IO.openTempFileWithDefaultPermissions3_bytes:
         I8[] [111,112,101,110,84,101,109,112,70,105,108,101,87,105,116,104,68,101,102,97,117,108,116,80,101,114,109,105,115,115,105,111,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.028359188 UTC

[section ""data" . System.IO.openTempFileWithDefaultPermissions2_closure" {
     System.IO.openTempFileWithDefaultPermissions2_closure:
         const System.IO.openTempFileWithDefaultPermissions2_info;
         const 0;
         const 0;
         const 0;
 },
 System.IO.openTempFileWithDefaultPermissions2_entry() //  [R1]
         { []
         }
     {offset
       cbBds: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbBdt; else goto cbBdu;
       cbBdt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbBdu: // global
           (_cbBdp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbBdp::I64 == 0) goto cbBdr; else goto cbBdq;
       cbBdr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbBdq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbBdp::I64;
           R2 = System.IO.openTempFileWithDefaultPermissions3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.IO.openTempFileWithDefaultPermissions2_info" {
     System.IO.openTempFileWithDefaultPermissions2_info:
         const System.IO.openTempFileWithDefaultPermissions2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.032426701 UTC

[section ""data" . System.IO.openTempFileWithDefaultPermissions1_closure" {
     System.IO.openTempFileWithDefaultPermissions1_closure:
         const System.IO.openTempFileWithDefaultPermissions1_info;
         const 0;
 },
 System.IO.openTempFileWithDefaultPermissions1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbBdH: // global
           R6 = System.IO.openBinaryTempFileWithDefaultPermissions2_closure+1;
           R5 = GHC.Types.False_closure+1;
           R4 = R3;
           R3 = R2;
           R2 = System.IO.openTempFileWithDefaultPermissions2_closure;
           call System.IO.openBinaryTempFile5_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.openTempFileWithDefaultPermissions1_info" {
     System.IO.openTempFileWithDefaultPermissions1_info:
         const System.IO.openTempFileWithDefaultPermissions1_entry;
         const 0;
         const 38654705678;
         const 12884901903;
         const SbAxZ_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.036396338 UTC

[section ""data" . System.IO.openTempFileWithDefaultPermissions_closure" {
     System.IO.openTempFileWithDefaultPermissions_closure:
         const System.IO.openTempFileWithDefaultPermissions_info;
         const 0;
 },
 System.IO.openTempFileWithDefaultPermissions_entry() //  [R2, R3]
         { []
         }
     {offset
       cbBdT: // global
           R3 = R3;
           R2 = R2;
           call System.IO.openTempFileWithDefaultPermissions1_entry(R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.openTempFileWithDefaultPermissions_info" {
     System.IO.openTempFileWithDefaultPermissions_info:
         const System.IO.openTempFileWithDefaultPermissions_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbAxZ_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.039532706 UTC

[section ""cstring" . System.IO.openBinaryTempFile4_bytes" {
     System.IO.openBinaryTempFile4_bytes:
         I8[] [111,112,101,110,66,105,110,97,114,121,84,101,109,112,70,105,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.041805536 UTC

[section ""data" . System.IO.openBinaryTempFile3_closure" {
     System.IO.openBinaryTempFile3_closure:
         const System.IO.openBinaryTempFile3_info;
         const 0;
         const 0;
         const 0;
 },
 System.IO.openBinaryTempFile3_entry() //  [R1]
         { []
         }
     {offset
       cbBe7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbBe8; else goto cbBe9;
       cbBe8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbBe9: // global
           (_cbBe4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbBe4::I64 == 0) goto cbBe6; else goto cbBe5;
       cbBe6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbBe5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbBe4::I64;
           R2 = System.IO.openBinaryTempFile4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.IO.openBinaryTempFile3_info" {
     System.IO.openBinaryTempFile3_info:
         const System.IO.openBinaryTempFile3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.045649442 UTC

[section ""data" . System.IO.openBinaryTempFile2_closure" {
     System.IO.openBinaryTempFile2_closure:
         const GHC.Word.W32#_con_info;
         const 384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.04783063 UTC

[section ""data" . System.IO.openBinaryTempFile1_closure" {
     System.IO.openBinaryTempFile1_closure:
         const System.IO.openBinaryTempFile1_info;
         const 0;
 },
 System.IO.openBinaryTempFile1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbBen: // global
           R6 = System.IO.openBinaryTempFile2_closure+1;
           R5 = GHC.Types.True_closure+2;
           R4 = R3;
           R3 = R2;
           R2 = System.IO.openBinaryTempFile3_closure;
           call System.IO.openBinaryTempFile5_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.openBinaryTempFile1_info" {
     System.IO.openBinaryTempFile1_info:
         const System.IO.openBinaryTempFile1_entry;
         const 0;
         const 141733920782;
         const 12884901903;
         const SbAxZ_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.051400525 UTC

[section ""data" . System.IO.openBinaryTempFile_closure" {
     System.IO.openBinaryTempFile_closure:
         const System.IO.openBinaryTempFile_info;
         const 0;
 },
 System.IO.openBinaryTempFile_entry() //  [R2, R3]
         { []
         }
     {offset
       cbBez: // global
           R3 = R3;
           R2 = R2;
           call System.IO.openBinaryTempFile1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.openBinaryTempFile_info" {
     System.IO.openBinaryTempFile_info:
         const System.IO.openBinaryTempFile_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbAxZ_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.054387753 UTC

[section ""cstring" . System.IO.openTempFile3_bytes" {
     System.IO.openTempFile3_bytes:
         I8[] [111,112,101,110,84,101,109,112,70,105,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.056567225 UTC

[section ""data" . System.IO.openTempFile2_closure" {
     System.IO.openTempFile2_closure:
         const System.IO.openTempFile2_info;
         const 0;
         const 0;
         const 0;
 },
 System.IO.openTempFile2_entry() //  [R1]
         { []
         }
     {offset
       cbBeN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbBeO; else goto cbBeP;
       cbBeO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbBeP: // global
           (_cbBeK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbBeK::I64 == 0) goto cbBeM; else goto cbBeL;
       cbBeM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbBeL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbBeK::I64;
           R2 = System.IO.openTempFile3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.IO.openTempFile2_info" {
     System.IO.openTempFile2_info:
         const System.IO.openTempFile2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.061353162 UTC

[section ""data" . System.IO.openTempFile1_closure" {
     System.IO.openTempFile1_closure:
         const System.IO.openTempFile1_info;
         const 0;
 },
 System.IO.openTempFile1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbBf2: // global
           R6 = System.IO.openBinaryTempFile2_closure+1;
           R5 = GHC.Types.False_closure+1;
           R4 = R3;
           R3 = R2;
           R2 = System.IO.openTempFile2_closure;
           call System.IO.openBinaryTempFile5_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.openTempFile1_info" {
     System.IO.openTempFile1_info:
         const System.IO.openTempFile1_entry;
         const 0;
         const 554050781198;
         const 12884901903;
         const SbAxZ_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.064801259 UTC

[section ""data" . System.IO.openTempFile_closure" {
     System.IO.openTempFile_closure:
         const System.IO.openTempFile_info;
         const 0;
 },
 System.IO.openTempFile_entry() //  [R2, R3]
         { []
         }
     {offset
       cbBfe: // global
           R3 = R3;
           R2 = R2;
           call System.IO.openTempFile1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.openTempFile_info" {
     System.IO.openTempFile_info:
         const System.IO.openTempFile_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbAxZ_srt+552;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.068250984 UTC

[section ""data" . System.IO.NewFileCreated_closure" {
     System.IO.NewFileCreated_closure:
         const System.IO.NewFileCreated_info;
 },
 System.IO.NewFileCreated_entry() //  [R2]
         { []
         }
     {offset
       cbBfq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbBfu; else goto cbBft;
       cbBfu: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.IO.NewFileCreated_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbBft: // global
           I64[Hp - 8] = System.IO.NewFileCreated_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.NewFileCreated_info" {
     System.IO.NewFileCreated_info:
         const System.IO.NewFileCreated_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.07181933 UTC

[section ""data" . System.IO.FileExists_closure" {
     System.IO.FileExists_closure:
         const System.IO.FileExists_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.073952988 UTC

[section ""data" . System.IO.OpenNewError_closure" {
     System.IO.OpenNewError_closure:
         const System.IO.OpenNewError_info;
 },
 System.IO.OpenNewError_entry() //  [R2]
         { []
         }
     {offset
       cbBfH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbBfL; else goto cbBfK;
       cbBfL: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.IO.OpenNewError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbBfK: // global
           I64[Hp - 8] = System.IO.OpenNewError_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.OpenNewError_info" {
     System.IO.OpenNewError_info:
         const System.IO.OpenNewError_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.07735746 UTC

[section ""cstring" . ibBfT_str" {
     ibBfT_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,73,79,46,78,101,119,70,105,108,101,67,114,101,97,116,101,100]
 },
 System.IO.NewFileCreated_con_entry() //  [R1]
         { []
         }
     {offset
       cbBfS: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.NewFileCreated_con_info" {
     System.IO.NewFileCreated_con_info:
         const System.IO.NewFileCreated_con_entry;
         const 1;
         const 2;
         const ibBfT_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.080502714 UTC

[section ""cstring" . ibBg0_str" {
     ibBg0_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,73,79,46,70,105,108,101,69,120,105,115,116,115]
 },
 System.IO.FileExists_con_entry() //  [R1]
         { []
         }
     {offset
       cbBfZ: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.FileExists_con_info" {
     System.IO.FileExists_con_info:
         const System.IO.FileExists_con_entry;
         const 4294967296;
         const 4294967299;
         const ibBg0_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.084054254 UTC

[section ""cstring" . ibBg7_str" {
     ibBg7_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,73,79,46,79,112,101,110,78,101,119,69,114,114,111,114]
 },
 System.IO.OpenNewError_con_entry() //  [R1]
         { []
         }
     {offset
       cbBg6: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.IO.OpenNewError_con_info" {
     System.IO.OpenNewError_con_info:
         const System.IO.OpenNewError_con_entry;
         const 1;
         const 8589934594;
         const ibBg7_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.087460984 UTC

[section ""relreadonly" . SbAxZ_srt" {
     SbAxZ_srt:
         const GHC.IO.Handle.FD.stdout_closure;
         const GHC.IO.Handle.Text.hPutChar1_closure;
         const System.IO.putChar1_closure;
         const GHC.IO.Handle.Text.hPutStr_closure;
         const GHC.IO.Handle.Text.hPutStrLn_closure;
         const System.IO.print_closure;
         const GHC.IO.Handle.Text.hPutStr'_closure;
         const GHC.IO.Handle.Internals.wantReadableHandle_1_closure;
         const GHC.IO.Handle.Text.hGetChar2_closure;
         const GHC.IO.Handle.Text.hGetChar6_closure;
         const GHC.IO.Handle.FD.stdin_closure;
         const System.IO.getChar1_closure;
         const GHC.IO.Handle.Text.hGetLine2_closure;
         const GHC.IO.Handle.Text.hGetLine4_closure;
         const System.IO.getLine1_closure;
         const GHC.IO.Handle.Text.hGetContents1_closure;
         const System.IO.getContents1_closure;
         const GHC.IO.Handle.Text.hWaitForInput1_closure;
         const System.IO.hReady1_closure;
         const System.IO.hPrint_closure;
         const GHC.IO.Handle.hClose1_closure;
         const GHC.IO.Handle.FD.openFile1_closure;
         const System.IO.appendFile2_closure;
         const System.IO.appendFile1_closure;
         const System.IO.writeFile1_closure;
         const GHC.IO.Handle.FD.openBinaryFile1_closure;
         const System.IO.withBinaryFile1_closure;
         const GHC.IO.Exception.$fExceptionFixIOException_$ctoException_closure;
         const lvl1_rbyQ9_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const GHC.IO.Exception.$fExceptionBlockedIndefinitelyOnMVar3_closure;
         const System.IO.fixIO2_closure;
         const System.IO.fixIO3_closure;
         const System.IO.fixIO1_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const System.IO.readIO7_closure;
         const System.IO.readIO3_closure;
         const System.IO.readIO10_closure;
         const GHC.Read.lex1_closure;
         const System.IO.readIO1_closure;
         const System.IO.readIO2_closure;
         const System.IO.readIO6_closure;
         const System.IO.readLn1_closure;
         const System.IO.readFile1_closure;
         const System.IO.interact1_closure;
         const GHC.IO.Handle.Text.hPutStr'_closure;
         const GHC.IO.Handle.FD.stdout_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Foreign.C.Error.$werrnoToIOError_closure;
         const $wlvl_rbyQf_closure;
         const lvl7_rbyQg_closure;
         const GHC.IO.failIO1_closure;
         const lvl11_rbyQl_closure;
         const lvl3_rbyQb_closure;
         const lvl6_rbyQe_closure;
         const GHC.List.lastError_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const GHC.IO.Encoding.getLocaleEncoding1_closure;
         const GHC.IO.FD.$wmkFD_closure;
         const GHC.IO.Handle.FD.fdToHandle5_closure;
         const tempCounter_rbxCH_closure;
         const System.IO.openBinaryTempFile5_closure;
         const System.IO.openBinaryTempFileWithDefaultPermissions3_closure;
         const System.IO.openBinaryTempFileWithDefaultPermissions1_closure;
         const System.IO.openTempFileWithDefaultPermissions2_closure;
         const System.IO.openTempFileWithDefaultPermissions1_closure;
         const System.IO.openBinaryTempFile3_closure;
         const System.IO.openBinaryTempFile1_closure;
         const System.IO.openTempFile2_closure;
         const System.IO.openTempFile1_closure;
 }]

