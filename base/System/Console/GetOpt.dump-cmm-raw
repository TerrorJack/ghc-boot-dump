
==================== Raw Cmm ====================
2018-03-16 16:07:20.794037063 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:20.796733229 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure" {
     System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure:
         const System.Console.GetOpt.$fFunctorArgOrder_$cfmap_info;
 },
 sat_scsnH_entry() //  [R1, R2]
         { []
         }
     {offset
       ccu9g: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scsnH_info" {
     sat_scsnH_info:
         const sat_scsnH_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 System.Console.GetOpt.$fFunctorArgOrder_$cfmap_entry() //  [R2, R3]
         { []
         }
     {offset
       ccu9o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccu9p; else goto ccu9q;
       ccu9p: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu9q: // global
           I64[Sp - 16] = block_ccu94_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucu9A; else goto ccu95;
       ucu9A: // global
           call _ccu94(R1) args: 0, res: 0, upd: 0;
       ccu95: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.$fFunctorArgOrder_$cfmap_info" {
     System.Console.GetOpt.$fFunctorArgOrder_$cfmap_info:
         const System.Console.GetOpt.$fFunctorArgOrder_$cfmap_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccu94() //  [R1]
         { []
         }
     {offset
       ccu94: // global
           _ccu9n::P64 = R1 & 7;
           if (_ccu9n::P64 < 3) goto ucu9z; else goto ccu9m;
       ucu9z: // global
           if (_ccu9n::P64 < 2) goto ccu9k; else goto ccu9l;
       ccu9k: // global
           R1 = System.Console.GetOpt.RequireOrder_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccu9l: // global
           R1 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccu9m: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccu9y; else goto ccu9x;
       ccu9y: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu9x: // global
           _scsnG::P64 = P64[R1 + 5];
           I64[Hp - 32] = sat_scsnH_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _scsnG::P64;
           I64[Hp - 8] = System.Console.GetOpt.ReturnInOrder_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 5;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccu94_info" {
     block_ccu94_info:
         const _ccu94;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.80552085 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure" {
     System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure:
         const System.Console.GetOpt.$fFunctorArgOrder_$c<$_info;
 },
 sat_scsnN_entry() //  [R1]
         { []
         }
     {offset
       ccua9: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scsnN_info" {
     sat_scsnN_info:
         const sat_scsnN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 System.Console.GetOpt.$fFunctorArgOrder_$c<$_entry() //  [R2, R3]
         { []
         }
     {offset
       ccuah: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuai; else goto ccuaj;
       ccuai: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuaj: // global
           I64[Sp - 16] = block_ccu9X_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucuat; else goto ccu9Y;
       ucuat: // global
           call _ccu9X(R1) args: 0, res: 0, upd: 0;
       ccu9Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.$fFunctorArgOrder_$c<$_info" {
     System.Console.GetOpt.$fFunctorArgOrder_$c<$_info:
         const System.Console.GetOpt.$fFunctorArgOrder_$c<$_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccu9X() //  [R1]
         { []
         }
     {offset
       ccu9X: // global
           _ccuag::P64 = R1 & 7;
           if (_ccuag::P64 < 3) goto ucuas; else goto ccuaf;
       ucuas: // global
           if (_ccuag::P64 < 2) goto ccuad; else goto ccuae;
       ccuad: // global
           R1 = System.Console.GetOpt.RequireOrder_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuae: // global
           R1 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuaf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccuar; else goto ccuaq;
       ccuar: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuaq: // global
           I64[Hp - 24] = sat_scsnN_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = System.Console.GetOpt.ReturnInOrder_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 5;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccu9X_info" {
     block_ccu9X_info:
         const _ccu9X;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.812948603 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgOrder_closure" {
     System.Console.GetOpt.$fFunctorArgOrder_closure:
         const GHC.Base.C:Functor_con_info;
         const System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure+2;
         const System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.817733376 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure" {
     System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure:
         const System.Console.GetOpt.$fFunctorArgDescr_$cfmap_info;
 },
 sat_scsnV_entry() //  [R1, R2]
         { []
         }
     {offset
       ccub2: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scsnV_info" {
     sat_scsnV_info:
         const sat_scsnV_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_scsnY_entry() //  [R1, R2]
         { []
         }
     {offset
       ccubc: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scsnY_info" {
     sat_scsnY_info:
         const sat_scsnY_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 System.Console.GetOpt.$fFunctorArgDescr_$cfmap_entry() //  [R2, R3]
         { []
         }
     {offset
       ccubk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccubl; else goto ccubm;
       ccubl: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccubm: // global
           I64[Sp - 16] = block_ccuaR_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucubC; else goto ccuaS;
       ucubC: // global
           call _ccuaR(R1) args: 0, res: 0, upd: 0;
       ccuaS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.$fFunctorArgDescr_$cfmap_info" {
     System.Console.GetOpt.$fFunctorArgDescr_$cfmap_info:
         const System.Console.GetOpt.$fFunctorArgDescr_$cfmap_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccuaR() //  [R1]
         { []
         }
     {offset
       ccuaR: // global
           _scsnO::P64 = P64[Sp + 8];
           _ccubj::P64 = R1 & 7;
           if (_ccubj::P64 < 3) goto ucubB; else goto ccubi;
       ucubB: // global
           if (_ccubj::P64 < 2) goto ccubg; else goto ccubh;
       ccubg: // global
           Hp = Hp + 48;
           _scsnQ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccubA; else goto ccubr;
       ccubr: // global
           _scsnR::P64 = P64[_scsnQ::P64 + 7];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _scsnO::P64;
           P64[Hp - 16] = _scsnR::P64;
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccubh: // global
           Hp = Hp + 48;
           _scsnQ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccubA; else goto ccubv;
       ccubv: // global
           _scsnT::P64 = P64[_scsnQ::P64 + 6];
           _scsnU::P64 = P64[_scsnQ::P64 + 14];
           I64[Hp - 40] = sat_scsnV_info;
           P64[Hp - 32] = _scsnO::P64;
           P64[Hp - 24] = _scsnT::P64;
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = _scsnU::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccubi: // global
           Hp = Hp + 48;
           _scsnQ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccubA; else goto ccubz;
       ccubA: // global
           HpAlloc = 48;
           R1 = _scsnQ::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccubz: // global
           _scsnW::P64 = P64[_scsnQ::P64 + 5];
           _scsnX::P64 = P64[_scsnQ::P64 + 13];
           I64[Hp - 40] = sat_scsnY_info;
           P64[Hp - 32] = _scsnO::P64;
           P64[Hp - 24] = _scsnW::P64;
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = _scsnX::P64;
           R1 = Hp - 13;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuaR_info" {
     block_ccuaR_info:
         const _ccuaR;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.828867943 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure" {
     System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure:
         const System.Console.GetOpt.$fFunctorArgDescr_$c<$_info;
 },
 sat_scso6_entry() //  [R1]
         { []
         }
     {offset
       ccuce: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scso6_info" {
     sat_scso6_info:
         const sat_scso6_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_scsoa_entry() //  [R1]
         { []
         }
     {offset
       ccuco: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scsoa_info" {
     sat_scsoa_info:
         const sat_scsoa_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 System.Console.GetOpt.$fFunctorArgDescr_$c<$_entry() //  [R2, R3]
         { []
         }
     {offset
       ccucw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccucx; else goto ccucy;
       ccucx: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccucy: // global
           I64[Sp - 16] = block_ccuc3_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucucN; else goto ccuc4;
       ucucN: // global
           call _ccuc3(R1) args: 0, res: 0, upd: 0;
       ccuc4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.$fFunctorArgDescr_$c<$_info" {
     System.Console.GetOpt.$fFunctorArgDescr_$c<$_info:
         const System.Console.GetOpt.$fFunctorArgDescr_$c<$_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccuc3() //  [R1]
         { []
         }
     {offset
       ccuc3: // global
           _scsnZ::P64 = P64[Sp + 8];
           _ccucv::P64 = R1 & 7;
           if (_ccucv::P64 < 3) goto ucucM; else goto ccucu;
       ucucM: // global
           if (_ccucv::P64 < 2) goto ccucs; else goto ccuct;
       ccucs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccucD; else goto ccucC;
       ccucD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccucC: // global
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = _scsnZ::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuct: // global
           Hp = Hp + 40;
           _scso1::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccucL; else goto ccucG;
       ccucG: // global
           _scso4::P64 = P64[_scso1::P64 + 14];
           I64[Hp - 32] = sat_scso6_info;
           P64[Hp - 24] = _scsnZ::P64;
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scso4::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccucu: // global
           Hp = Hp + 40;
           _scso1::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccucL; else goto ccucK;
       ccucL: // global
           HpAlloc = 40;
           R1 = _scso1::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccucK: // global
           _scso8::P64 = P64[_scso1::P64 + 13];
           I64[Hp - 32] = sat_scsoa_info;
           P64[Hp - 24] = _scsnZ::P64;
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scso8::P64;
           R1 = Hp - 13;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuc3_info" {
     block_ccuc3_info:
         const _ccuc3;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.837750747 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgDescr_closure" {
     System.Console.GetOpt.$fFunctorArgDescr_closure:
         const GHC.Base.C:Functor_con_info;
         const System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure+2;
         const System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.840962554 UTC

[section ""data" . System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure" {
     System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure:
         const System.Console.GetOpt.$fFunctorOptDescr_$cfmap_info;
 },
 sat_scsoi_entry() //  [R1]
         { []
         }
     {offset
       ccudn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccudo; else goto ccudp;
       ccudo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccudp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.Console.GetOpt.$fFunctorArgDescr_$cfmap_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsoi_info" {
     sat_scsoi_info:
         const sat_scsoi_entry;
         const 2;
         const 18;
 },
 System.Console.GetOpt.$fFunctorOptDescr_$cfmap_entry() //  [R2, R3]
         { []
         }
     {offset
       ccudq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuds; else goto ccudt;
       ccuds: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccudt: // global
           I64[Sp - 16] = block_ccude_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucudx; else goto ccudf;
       ucudx: // global
           call _ccude(R1) args: 0, res: 0, upd: 0;
       ccudf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.$fFunctorOptDescr_$cfmap_info" {
     System.Console.GetOpt.$fFunctorOptDescr_$cfmap_info:
         const System.Console.GetOpt.$fFunctorOptDescr_$cfmap_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccude() //  [R1]
         { []
         }
     {offset
       ccude: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccudw; else goto ccudv;
       ccudw: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccudv: // global
           _scsoe::P64 = P64[R1 + 7];
           _scsof::P64 = P64[R1 + 15];
           _scsog::P64 = P64[R1 + 23];
           _scsoh::P64 = P64[R1 + 31];
           I64[Hp - 64] = sat_scsoi_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _scsog::P64;
           I64[Hp - 32] = System.Console.GetOpt.Option_con_info;
           P64[Hp - 24] = _scsoe::P64;
           P64[Hp - 16] = _scsof::P64;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = _scsoh::P64;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccude_info" {
     block_ccude_info:
         const _ccude;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.851046755 UTC

[section ""data" . System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure" {
     System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure:
         const System.Console.GetOpt.$fFunctorOptDescr_$c<$_info;
 },
 sat_scsov_entry() //  [R1]
         { []
         }
     {offset
       ccuec: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scsov_info" {
     sat_scsov_info:
         const sat_scsov_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_scsoz_entry() //  [R1]
         { []
         }
     {offset
       ccuem: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scsoz_info" {
     sat_scsoz_info:
         const sat_scsoz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_scsoA_entry() //  [R1]
         { []
         }
     {offset
       ccueu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccuev; else goto ccuew;
       ccuev: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuew: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccue1_info;
           _scsoj::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _scsoj::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucueL; else goto ccue2;
       ucueL: // global
           call _ccue1(R1) args: 0, res: 0, upd: 0;
       ccue2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsoA_info" {
     sat_scsoA_info:
         const sat_scsoA_entry;
         const 2;
         const 18;
 },
 _ccue1() //  [R1]
         { []
         }
     {offset
       ccue1: // global
           _scsoj::P64 = P64[Sp + 8];
           _ccuet::P64 = R1 & 7;
           if (_ccuet::P64 < 3) goto ucueK; else goto ccues;
       ucueK: // global
           if (_ccuet::P64 < 2) goto ccueq; else goto ccuer;
       ccueq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccueB; else goto ccueA;
       ccueB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccueA: // global
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = _scsoj::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccuer: // global
           Hp = Hp + 40;
           _scsoq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccueJ; else goto ccueE;
       ccueE: // global
           _scsot::P64 = P64[_scsoq::P64 + 14];
           I64[Hp - 32] = sat_scsov_info;
           P64[Hp - 24] = _scsoj::P64;
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scsot::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccues: // global
           Hp = Hp + 40;
           _scsoq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccueJ; else goto ccueI;
       ccueJ: // global
           HpAlloc = 40;
           R1 = _scsoq::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccueI: // global
           _scsox::P64 = P64[_scsoq::P64 + 13];
           I64[Hp - 32] = sat_scsoz_info;
           P64[Hp - 24] = _scsoj::P64;
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scsox::P64;
           R1 = Hp - 13;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccue1_info" {
     block_ccue1_info:
         const _ccue1;
         const 1;
         const 30;
 },
 System.Console.GetOpt.$fFunctorOptDescr_$c<$_entry() //  [R2, R3]
         { []
         }
     {offset
       ccueM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccueO; else goto ccueP;
       ccueO: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccueP: // global
           I64[Sp - 16] = block_ccudS_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucueT; else goto ccudT;
       ucueT: // global
           call _ccudS(R1) args: 0, res: 0, upd: 0;
       ccudT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.$fFunctorOptDescr_$c<$_info" {
     System.Console.GetOpt.$fFunctorOptDescr_$c<$_info:
         const System.Console.GetOpt.$fFunctorOptDescr_$c<$_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccudS() //  [R1]
         { []
         }
     {offset
       ccudS: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccueS; else goto ccueR;
       ccueS: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccueR: // global
           _scsom::P64 = P64[R1 + 7];
           _scson::P64 = P64[R1 + 15];
           _scsoo::P64 = P64[R1 + 23];
           _scsop::P64 = P64[R1 + 31];
           I64[Hp - 64] = sat_scsoA_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _scsoo::P64;
           I64[Hp - 32] = System.Console.GetOpt.Option_con_info;
           P64[Hp - 24] = _scsom::P64;
           P64[Hp - 16] = _scson::P64;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = _scsop::P64;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccudS_info" {
     block_ccudS_info:
         const _ccudS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.864160025 UTC

[section ""data" . System.Console.GetOpt.$fFunctorOptDescr_closure" {
     System.Console.GetOpt.$fFunctorOptDescr_closure:
         const GHC.Base.C:Functor_con_info;
         const System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure+2;
         const System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.865929256 UTC

[section ""data" . lvl_rcsmT_closure" {
     lvl_rcsmT_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.867623284 UTC

[section ""data" . lvl1_rcsmU_closure" {
     lvl1_rcsmU_closure:
         const :_con_info;
         const lvl_rcsmT_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.870674598 UTC

[section ""data" . $wxs_rcsmV_closure" {
     $wxs_rcsmV_closure:
         const $wxs_rcsmV_info;
 },
 sat_scsoE_entry() //  [R1]
         { []
         }
     {offset
       ccufF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccufG; else goto ccufH;
       ccufG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccufH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16] - 1;
           Sp = Sp - 16;
           call $wxs_rcsmV_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsoE_info" {
     sat_scsoE_info:
         const sat_scsoE_entry;
         const 4294967296;
         const 17;
 },
 $wxs_rcsmV_entry() //  [R2]
         { []
         }
     {offset
       ccufL: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccufP; else goto ccufO;
       ccufP: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = $wxs_rcsmV_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccufO: // global
           if (R2 == 1) goto ccufK; else goto ccufJ;
       ccufK: // global
           Hp = Hp - 48;
           R1 = lvl1_rcsmU_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccufJ: // global
           I64[Hp - 40] = sat_scsoE_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl_rcsmT_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs_rcsmV_info" {
     $wxs_rcsmV_info:
         const $wxs_rcsmV_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.877395605 UTC

[section ""data" . System.Console.GetOpt.$wgo_closure" {
     System.Console.GetOpt.$wgo_closure:
         const System.Console.GetOpt.$wgo_info;
 },
 sat_scsoM_entry() //  [R1]
         { []
         }
     {offset
       ccugl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccugm; else goto ccugn;
       ccugm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccugn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 24] - 1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.Console.GetOpt.$wgo_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsoM_info" {
     sat_scsoM_info:
         const sat_scsoM_entry;
         const 4294967297;
         const 19;
 },
 System.Console.GetOpt.$wgo_entry() //  [R2, R3]
         { []
         }
     {offset
       ccugs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccugt; else goto ccugu;
       ccugt: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$wgo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccugu: // global
           I64[Sp - 16] = block_ccug7_info;
           R1 = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucugG; else goto ccug8;
       ucugG: // global
           call _ccug7(R1) args: 0, res: 0, upd: 0;
       ccug8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.$wgo_info" {
     System.Console.GetOpt.$wgo_info:
         const System.Console.GetOpt.$wgo_entry;
         const 0;
         const 14;
         const 8589934606;
 },
 _ccug7() //  [R1]
         { []
         }
     {offset
       ccug7: // global
           _scsoG::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto ccugp; else goto ccugq;
       ccugp: // global
           R2 = _scsoG::I64;
           Sp = Sp + 16;
           call $wxs_rcsmV_entry(R2) args: 8, res: 0, upd: 8;
       ccugq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccugz; else goto ccugy;
       ccugz: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccugy: // global
           _scsoI::P64 = P64[R1 + 6];
           if (_scsoG::I64 == 1) goto ccugF; else goto ccugC;
       ccugF: // global
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = _scsoI::P64;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _ccugE::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _ccugE::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccugC: // global
           _scsoJ::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_scsoM_info;
           P64[Hp - 32] = _scsoJ::P64;
           I64[Hp - 24] = _scsoG::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scsoI::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccug7_info" {
     block_ccug7_info:
         const _ccug7;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.889607915 UTC

[section ""data" . System.Console.GetOpt.usageInfo_sameLen_closure" {
     System.Console.GetOpt.usageInfo_sameLen_closure:
         const System.Console.GetOpt.usageInfo_sameLen_info;
         const 0;
 },
 n_scsoO_entry() //  [R1]
         { []
         }
     {offset
       ccuhe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccuhf; else goto ccuhg;
       ccuhf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuhg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuh8_info;
           R3 = P64[R1 + 16];
           R2 = GHC.List.length_closure+1;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . n_scsoO_info" {
     n_scsoO_info:
         const n_scsoO_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt;
 },
 _ccuh8() //  [R1]
         { []
         }
     {offset
       ccuh8: // global
           if (R1 & 7 == 1) goto ccuhb; else goto ccuhc;
       ccuhb: // global
           R1 = GHC.List.maximum2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       ccuhc: // global
           I64[Sp - 8] = block_ccuhm_info;
           _scsoR::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsoR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuhB; else goto ccuhn;
       ucuhB: // global
           call _ccuhm(R1) args: 0, res: 0, upd: 0;
       ccuhn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuh8_info" {
     block_ccuh8_info:
         const _ccuh8;
         const 0;
         const 4294967326;
         const ScsR0_srt;
 },
 _ccuhm() //  [R1]
         { []
         }
     {offset
       ccuhm: // global
           _scsoR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccuhr_info;
           R3 = I64[R1 + 7];
           R2 = _scsoR::P64;
           Sp = Sp + 8;
           call GHC.List.$wgo_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuhm_info" {
     block_ccuhm_info:
         const _ccuhm;
         const 1;
         const 30;
 },
 _ccuhr() //  [R1]
         { []
         }
     {offset
       ccuhr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccuhA; else goto ccuhz;
       ccuhA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       ccuhz: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuhr_info" {
     block_ccuhr_info:
         const _ccuhr;
         const 0;
         const 30;
 },
 lvl25_scsoV_entry() //  [R1]
         { []
         }
     {offset
       ccuhJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuhK; else goto ccuhL;
       ccuhK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuhL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuhG_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucuhQ; else goto ccuhH;
       ucuhQ: // global
           call _ccuhG(R1) args: 0, res: 0, upd: 0;
       ccuhH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl25_scsoV_info" {
     lvl25_scsoV_info:
         const lvl25_scsoV_entry;
         const 1;
         const 16;
 },
 _ccuhG() //  [R1]
         { []
         }
     {offset
       ccuhG: // global
           R1 = I64[(%MO_S_Lt_W64(0,
                                  I64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuhG_info" {
     block_ccuhG_info:
         const _ccuhG;
         const 0;
         const 30;
 },
 sat_scsp7_entry() //  [R1]
         { []
         }
     {offset
       ccuie: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccuif; else goto ccuig;
       ccuif: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuig: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_ccui7_info;
           _scsoO::P64 = P64[R1 + 16];
           _scsp2::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _scsoO::P64;
           P64[Sp - 24] = _scsp2::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucuiu; else goto ccui8;
       ucuiu: // global
           call _ccui7(R1) args: 0, res: 0, upd: 0;
       ccui8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsp7_info" {
     sat_scsp7_info:
         const sat_scsp7_entry;
         const 3;
         const 15;
 },
 _ccui7() //  [R1]
         { []
         }
     {offset
       ccui7: // global
           if (R1 & 7 == 1) goto ccuib; else goto ccuic;
       ccuib: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccuic: // global
           _scsoO::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccuim_info;
           R1 = _scsoO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucuit; else goto ccuio;
       ucuit: // global
           call _ccuim(R1) args: 0, res: 0, upd: 0;
       ccuio: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccui7_info" {
     block_ccui7_info:
         const _ccui7;
         const 2;
         const 30;
 },
 _ccuim() //  [R1]
         { []
         }
     {offset
       ccuim: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call System.Console.GetOpt.$wgo_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuim_info" {
     block_ccuim_info:
         const _ccuim;
         const 1;
         const 30;
 },
 go_scsoZ_entry() //  [R1, R2]
         { []
         }
     {offset
       ccuiz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccuiA; else goto ccuiB;
       ccuiA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccuiB: // global
           I64[Sp - 32] = block_ccuhW_info;
           _scsoZ::P64 = R1;
           _scsoO::P64 = P64[R1 + 7];
           _scsoV::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _scsoO::P64;
           P64[Sp - 16] = _scsoV::P64;
           P64[Sp - 8] = _scsoZ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucuiI; else goto ccuhX;
       ucuiI: // global
           call _ccuhW(R1) args: 0, res: 0, upd: 0;
       ccuhX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_scsoZ_info" {
     go_scsoZ_info:
         const go_scsoZ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _ccuhW() //  [R1]
         { []
         }
     {offset
       ccuhW: // global
           if (R1 & 7 == 1) goto ccuiw; else goto ccuix;
       ccuiw: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuix: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccuiH; else goto ccuiG;
       ccuiH: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuiG: // global
           _scsp2::P64 = P64[R1 + 6];
           _scsp3::P64 = P64[R1 + 14];
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = _scsp3::P64;
           I64[Hp - 56] = sat_scsp7_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _scsp2::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuhW_info" {
     block_ccuhW_info:
         const _ccuhW;
         const 3;
         const 30;
 },
 System.Console.GetOpt.usageInfo_sameLen_entry() //  [R2]
         { []
         }
     {offset
       ccuiJ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccuiN; else goto ccuiM;
       ccuiN: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo_sameLen_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccuiM: // global
           I64[Hp - 64] = n_scsoO_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl25_scsoV_info;
           _ccuh4::P64 = Hp - 64;
           P64[Hp - 24] = _ccuh4::P64;
           I64[Hp - 16] = go_scsoZ_info;
           P64[Hp - 8] = _ccuh4::P64;
           P64[Hp] = Hp - 40;
           R2 = R2;
           R1 = Hp - 15;
           call go_scsoZ_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.usageInfo_sameLen_info" {
     System.Console.GetOpt.usageInfo_sameLen_info:
         const System.Console.GetOpt.usageInfo_sameLen_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScsR0_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.91428802 UTC

[section ""data" . sepBy_rcsmW_closure" {
     sepBy_rcsmW_closure:
         const sepBy_rcsmW_info;
 },
 sat_scsph_entry() //  [R1]
         { []
         }
     {offset
       ccukd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuke; else goto ccukf;
       ccuke: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccukf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call sepBy_rcsmW_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsph_info" {
     sat_scsph_info:
         const sat_scsph_entry;
         const 2;
         const 18;
 },
 sepBy_rcsmW_entry() //  [R2, R3]
         { []
         }
     {offset
       ccukk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccukl; else goto ccukm;
       ccukl: // global
           R3 = R3;
           R2 = R2;
           R1 = sepBy_rcsmW_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccukm: // global
           I64[Sp - 16] = block_ccujX_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucukC; else goto ccujY;
       ucukC: // global
           call _ccujX(R1) args: 0, res: 0, upd: 0;
       ccujY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sepBy_rcsmW_info" {
     sepBy_rcsmW_info:
         const sepBy_rcsmW_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccujX() //  [R1]
         { []
         }
     {offset
       ccujX: // global
           if (R1 & 7 == 1) goto ccukh; else goto ccuki;
       ccukh: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuki: // global
           I64[Sp - 8] = block_ccuk3_info;
           _scspc::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scspc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucukB; else goto ccuk4;
       ucukB: // global
           call _ccuk3(R1) args: 0, res: 0, upd: 0;
       ccuk4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccujX_info" {
     block_ccujX_info:
         const _ccujX;
         const 1;
         const 30;
 },
 _ccuk3() //  [R1]
         { []
         }
     {offset
       ccuk3: // global
           _scspc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccukt; else goto ccukw;
       ccukt: // global
           R1 = _scspc::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccukw: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccukz; else goto ccuky;
       ccukz: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuky: // global
           I64[Hp - 72] = sat_scsph_info;
           _scsp9::P64 = P64[Sp + 16];
           P64[Hp - 56] = _scsp9::P64;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl_rcsmT_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scsp9::P64;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _scspc::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuk3_info" {
     block_ccuk3_info:
         const _ccuk3;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.923334769 UTC

[section ""data" . lvl2_rcsmX_closure" {
     lvl2_rcsmX_closure:
         const GHC.Types.C#_con_info;
         const 44;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.925069312 UTC

[section ""cstring" . lvl3_rcsmY_bytes" {
     lvl3_rcsmY_bytes:
         I8[] [45]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.926754983 UTC

[section ""cstring" . lvl4_rcsmZ_bytes" {
     lvl4_rcsmZ_bytes:
         I8[] [91]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.928424461 UTC

[section ""cstring" . lvl5_rcsn0_bytes" {
     lvl5_rcsn0_bytes:
         I8[] [93]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.930439416 UTC

[section ""cstring" . lvl6_rcsn1_bytes" {
     lvl6_rcsn1_bytes:
         I8[] [45,45]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.932588124 UTC

[section ""cstring" . lvl7_rcsn2_bytes" {
     lvl7_rcsn2_bytes:
         I8[] [91,61]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.934332135 UTC

[section ""cstring" . lvl8_rcsn3_bytes" {
     lvl8_rcsn3_bytes:
         I8[] [32,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.940887079 UTC

[section ""data" . System.Console.GetOpt.usageInfo_go2_closure" {
     System.Console.GetOpt.usageInfo_go2_closure:
         const System.Console.GetOpt.usageInfo_go2_info;
 },
 sat_scspB_entry() //  [R1]
         { []
         }
     {offset
       cculA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cculB; else goto cculC;
       cculB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cculC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_go2_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scspB_info" {
     sat_scspB_info:
         const sat_scspB_entry;
         const 3;
         const 15;
 },
 sat_scspw_entry() //  [R1]
         { []
         }
     {offset
       cculX: // global
           R3 = P64[R1 + 16];
           R2 = lvl8_rcsn3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scspw_info" {
     sat_scspw_info:
         const sat_scspw_entry;
         const 1;
         const 16;
 },
 sat_scspx_entry() //  [R1]
         { []
         }
     {offset
       ccum0: // global
           _scspx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccum1; else goto ccum2;
       ccum2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccum4; else goto ccum3;
       ccum4: // global
           HpAlloc = 24;
           goto ccum1;
       ccum1: // global
           R1 = _scspx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccum3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scspx::P64;
           _scspr::P64 = P64[_scspx::P64 + 16];
           _scspu::P64 = P64[_scspx::P64 + 24];
           I64[Hp - 16] = sat_scspw_info;
           P64[Hp] = _scspu::P64;
           R3 = Hp - 16;
           R2 = _scspr::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scspx_info" {
     sat_scspx_info:
         const sat_scspx_entry;
         const 2;
         const 18;
 },
 sat_scspy_entry() //  [R1]
         { []
         }
     {offset
       ccum5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccum9; else goto ccum8;
       ccum9: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccum8: // global
           _scspr::P64 = P64[R1 + 16];
           _scspu::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scspx_info;
           P64[Hp - 8] = _scspr::P64;
           P64[Hp] = _scspu::P64;
           R3 = Hp - 24;
           R2 = lvl8_rcsn3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scspy_info" {
     sat_scspy_info:
         const sat_scspy_entry;
         const 2;
         const 18;
 },
 sat_scspz_entry() //  [R1]
         { []
         }
     {offset
       ccuma: // global
           _scspz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccumb; else goto ccumc;
       ccumc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccume; else goto ccumd;
       ccume: // global
           HpAlloc = 32;
           goto ccumb;
       ccumb: // global
           R1 = _scspz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccumd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scspz::P64;
           _scspo::P64 = P64[_scspz::P64 + 16];
           _scspr::P64 = P64[_scspz::P64 + 24];
           _scspu::P64 = P64[_scspz::P64 + 32];
           I64[Hp - 24] = sat_scspy_info;
           P64[Hp - 8] = _scspr::P64;
           P64[Hp] = _scspu::P64;
           R3 = Hp - 24;
           R2 = _scspo::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scspz_info" {
     sat_scspz_info:
         const sat_scspz_entry;
         const 3;
         const 15;
 },
 sat_scspA_entry() //  [R1]
         { []
         }
     {offset
       ccumf: // global
           _scspA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccumg; else goto ccumh;
       ccumh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccumj; else goto ccumi;
       ccumj: // global
           HpAlloc = 40;
           goto ccumg;
       ccumg: // global
           R1 = _scspA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccumi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scspA::P64;
           _scspo::P64 = P64[_scspA::P64 + 16];
           _scspr::P64 = P64[_scspA::P64 + 24];
           _scspu::P64 = P64[_scspA::P64 + 32];
           I64[Hp - 32] = sat_scspz_info;
           P64[Hp - 16] = _scspo::P64;
           P64[Hp - 8] = _scspr::P64;
           P64[Hp] = _scspu::P64;
           R3 = Hp - 32;
           R2 = lvl8_rcsn3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scspA_info" {
     sat_scspA_info:
         const sat_scspA_entry;
         const 3;
         const 15;
 },
 System.Console.GetOpt.usageInfo_go2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       ccumo: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccump; else goto ccumq;
       ccump: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo_go2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccumq: // global
           I64[Sp - 24] = block_ccule_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucumT; else goto cculf;
       ucumT: // global
           call _ccule(R1) args: 0, res: 0, upd: 0;
       cculf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.usageInfo_go2_info" {
     System.Console.GetOpt.usageInfo_go2_info:
         const System.Console.GetOpt.usageInfo_go2_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _ccule() //  [R1]
         { []
         }
     {offset
       ccule: // global
           if (R1 & 7 == 1) goto ucumL; else goto ccumm;
       ucumL: // global
           Sp = Sp + 24;
           call _ccumD() args: 0, res: 0, upd: 0;
       ccumm: // global
           I64[Sp - 8] = block_cculk_info;
           _scspo::P64 = P64[R1 + 6];
           _scspp::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _scspp::P64;
           P64[Sp + 8] = _scspo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucumO; else goto ccull;
       ucumO: // global
           call _cculk(R1) args: 0, res: 0, upd: 0;
       ccull: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccule_info" {
     block_ccule_info:
         const _ccule;
         const 2;
         const 30;
 },
 _cculk() //  [R1]
         { []
         }
     {offset
       cculk: // global
           if (R1 & 7 == 1) goto ucumM; else goto ccumz;
       ucumM: // global
           Sp = Sp + 32;
           call _ccumD() args: 0, res: 0, upd: 0;
       ccumz: // global
           I64[Sp - 8] = block_cculq_info;
           _scspr::P64 = P64[R1 + 6];
           _scsps::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp] = _scsps::P64;
           P64[Sp + 24] = _scspr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucumQ; else goto cculr;
       ucumQ: // global
           call _cculq(R1) args: 0, res: 0, upd: 0;
       cculr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cculk_info" {
     block_cculk_info:
         const _cculk;
         const 3;
         const 30;
 },
 _cculq() //  [R1]
         { []
         }
     {offset
       cculq: // global
           if (R1 & 7 == 1) goto ucumN; else goto ccumF;
       ucumN: // global
           Sp = Sp + 40;
           call _ccumD() args: 0, res: 0, upd: 0;
       ccumF: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccumI; else goto ccumH;
       ccumI: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccumH: // global
           _scspu::P64 = P64[R1 + 6];
           _scspv::P64 = P64[R1 + 14];
           I64[Hp - 96] = sat_scspB_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _scspv::P64;
           I64[Hp - 56] = sat_scspA_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _scspu::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cculq_info" {
     block_cculq_info:
         const _cculq;
         const 4;
         const 30;
 },
 _ccumD() //  []
         { []
         }
     {offset
       ccumD: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.960954982 UTC

[section ""cstring" . lvl9_rcsn4_bytes" {
     lvl9_rcsn4_bytes:
         I8[] [32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.963759608 UTC

[section ""data" . lvl10_rcsn5_closure" {
     lvl10_rcsn5_closure:
         const lvl10_rcsn5_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_rcsn5_entry() //  [R1]
         { []
         }
     {offset
       ccunU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccunV; else goto ccunW;
       ccunV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccunW: // global
           (_ccunR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccunR::I64 == 0) goto ccunT; else goto ccunS;
       ccunT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccunS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccunR::I64;
           R2 = lvl5_rcsn0_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl10_rcsn5_info" {
     lvl10_rcsn5_info:
         const lvl10_rcsn5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.967112843 UTC

[section ""cstring" . lvl11_rcsn6_bytes" {
     lvl11_rcsn6_bytes:
         I8[] [61]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:20.981555001 UTC

[section ""data" . System.Console.GetOpt.usageInfo1_closure" {
     System.Console.GetOpt.usageInfo1_closure:
         const System.Console.GetOpt.usageInfo1_info;
         const 0;
 },
 b2_scspL_entry() //  [R1]
         { []
         }
     {offset
       ccuor: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuos; else goto ccuot;
       ccuos: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuot: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuoo_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.usageInfo1_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . b2_scspL_info" {
     b2_scspL_info:
         const b2_scspL_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+16;
 },
 _ccuoo() //  [R1, R2, R3]
         { []
         }
     {offset
       ccuoo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccuow; else goto ccuov;
       ccuow: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuov: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuoo_info" {
     block_ccuoo_info:
         const _ccuoo;
         const 0;
         const 30;
 },
 sat_scspX_entry() //  [R1]
         { []
         }
     {offset
       ccuoQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuoR; else goto ccuoS;
       ccuoR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuoS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl9_rcsn4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scspX_info" {
     sat_scspX_info:
         const sat_scspX_entry;
         const 1;
         const 16;
 },
 sat_scsq1_entry() //  [R1]
         { []
         }
     {offset
       ccup3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccup4; else goto ccup5;
       ccup4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccup5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl10_rcsn5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsq1_info" {
     sat_scsq1_info:
         const sat_scsq1_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+24;
 },
 sat_scsq2_entry() //  [R1]
         { []
         }
     {offset
       ccup6: // global
           _scsq2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccup7; else goto ccup8;
       ccup8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccupa; else goto ccup9;
       ccupa: // global
           HpAlloc = 24;
           goto ccup7;
       ccup7: // global
           R1 = _scsq2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccup9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsq2::P64;
           _scsq0::P64 = P64[_scsq2::P64 + 16];
           I64[Hp - 16] = sat_scsq1_info;
           P64[Hp] = _scsq0::P64;
           R3 = Hp - 16;
           R2 = lvl4_rcsmZ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsq2_info" {
     sat_scsq2_info:
         const sat_scsq2_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+24;
 },
 sat_scsq4_entry() //  [R1, R2]
         { []
         }
     {offset
       ccupg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuph; else goto ccupi;
       ccuph: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccupi: // global
           I64[Sp - 16] = block_ccuoG_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucupx; else goto ccuoH;
       ucupx: // global
           call _ccuoG(R1) args: 0, res: 0, upd: 0;
       ccuoH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scsq4_info" {
     sat_scsq4_info:
         const sat_scsq4_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const ScsR0_srt+24;
 },
 _ccuoG() //  [R1]
         { []
         }
     {offset
       ccuoG: // global
           _scspR::P64 = P64[Sp + 8];
           _ccupf::P64 = R1 & 7;
           if (_ccupf::P64 < 3) goto ucupw; else goto ccupe;
       ucupw: // global
           if (_ccupf::P64 < 2) goto ccupc; else goto ccupd;
       ccupc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccupn; else goto ccupm;
       ccupn: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccupm: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scspR::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R3 = Hp - 14;
           R2 = lvl3_rcsmY_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccupd: // global
           Hp = Hp + 48;
           _scspS::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccupv; else goto ccupq;
       ccupq: // global
           _scspW::P64 = P64[_scspS::P64 + 14];
           I64[Hp - 40] = sat_scspX_info;
           P64[Hp - 24] = _scspW::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scspR::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = lvl3_rcsmY_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccupe: // global
           Hp = Hp + 48;
           _scspS::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccupv; else goto ccupu;
       ccupv: // global
           HpAlloc = 48;
           R1 = _scspS::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccupu: // global
           _scsq0::P64 = P64[_scspS::P64 + 13];
           I64[Hp - 40] = sat_scsq2_info;
           P64[Hp - 24] = _scsq0::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scspR::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = lvl3_rcsmY_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuoG_info" {
     block_ccuoG_info:
         const _ccuoG;
         const 1;
         const 4294967326;
         const ScsR0_srt+24;
 },
 sosFmt_scspQ_entry() //  [R1]
         { []
         }
     {offset
       ccupA: // global
           _scspQ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccupB; else goto ccupC;
       ccupC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccupE; else goto ccupD;
       ccupE: // global
           HpAlloc = 16;
           goto ccupB;
       ccupB: // global
           R1 = _scspQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccupD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scspQ::P64;
           _scspH::P64 = P64[_scspQ::P64 + 16];
           _scspJ::P64 = P64[_scspQ::P64 + 24];
           I64[Hp - 8] = sat_scsq4_info;
           P64[Hp] = _scspJ::P64;
           I64[Sp - 24] = block_ccupy_info;
           R3 = _scspH::P64;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sosFmt_scspQ_info" {
     sosFmt_scspQ_info:
         const sosFmt_scspQ_entry;
         const 2;
         const 4294967314;
         const ScsR0_srt+24;
 },
 _ccupy() //  [R1]
         { []
         }
     {offset
       ccupy: // global
           R3 = R1;
           R2 = lvl2_rcsmX_closure+1;
           Sp = Sp + 8;
           call sepBy_rcsmW_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccupy_info" {
     block_ccupy_info:
         const _ccupy;
         const 0;
         const 30;
 },
 sat_scsqc_entry() //  [R1]
         { []
         }
     {offset
       ccuq5: // global
           R3 = P64[R1 + 16];
           R2 = lvl11_rcsn6_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scsqc_info" {
     sat_scsqc_info:
         const sat_scsqc_entry;
         const 1;
         const 16;
 },
 sat_scsqd_entry() //  [R1]
         { []
         }
     {offset
       ccuq8: // global
           _scsqd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuq9; else goto ccuqa;
       ccuqa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuqc; else goto ccuqb;
       ccuqc: // global
           HpAlloc = 24;
           goto ccuq9;
       ccuq9: // global
           R1 = _scsqd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuqb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsqd::P64;
           _scsq7::P64 = P64[_scsqd::P64 + 16];
           _scsqb::P64 = P64[_scsqd::P64 + 24];
           I64[Hp - 16] = sat_scsqc_info;
           P64[Hp] = _scsqb::P64;
           R3 = Hp - 16;
           R2 = _scsq7::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsqd_info" {
     sat_scsqd_info:
         const sat_scsqd_entry;
         const 2;
         const 18;
 },
 sat_scsqg_entry() //  [R1]
         { []
         }
     {offset
       ccuqr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuqs; else goto ccuqt;
       ccuqs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuqt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl10_rcsn5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsqg_info" {
     sat_scsqg_info:
         const sat_scsqg_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+24;
 },
 sat_scsqh_entry() //  [R1]
         { []
         }
     {offset
       ccuqu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuqy; else goto ccuqx;
       ccuqy: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuqx: // global
           _scsqf::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scsqg_info;
           P64[Hp] = _scsqf::P64;
           R3 = Hp - 16;
           R2 = lvl7_rcsn2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scsqh_info" {
     sat_scsqh_info:
         const sat_scsqh_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+24;
 },
 sat_scsqi_entry() //  [R1]
         { []
         }
     {offset
       ccuqz: // global
           _scsqi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuqA; else goto ccuqB;
       ccuqB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuqD; else goto ccuqC;
       ccuqD: // global
           HpAlloc = 24;
           goto ccuqA;
       ccuqA: // global
           R1 = _scsqi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuqC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsqi::P64;
           _scsq7::P64 = P64[_scsqi::P64 + 16];
           _scsqf::P64 = P64[_scsqi::P64 + 24];
           I64[Hp - 16] = sat_scsqh_info;
           P64[Hp] = _scsqf::P64;
           R3 = Hp - 16;
           R2 = _scsq7::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsqi_info" {
     sat_scsqi_info:
         const sat_scsqi_entry;
         const 2;
         const 4294967314;
         const ScsR0_srt+24;
 },
 sat_scsqj_entry() //  [R1, R2]
         { []
         }
     {offset
       ccuqJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuqK; else goto ccuqL;
       ccuqK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccuqL: // global
           I64[Sp - 16] = block_ccupR_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucuqV; else goto ccupS;
       ucuqV: // global
           call _ccupR(R1) args: 0, res: 0, upd: 0;
       ccupS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scsqj_info" {
     sat_scsqj_info:
         const sat_scsqj_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const ScsR0_srt+24;
 },
 _ccupR() //  [R1]
         { []
         }
     {offset
       ccupR: // global
           _scsq7::P64 = P64[Sp + 8];
           _ccuqI::P64 = R1 & 7;
           if (_ccuqI::P64 < 3) goto ucuqU; else goto ccuqH;
       ucuqU: // global
           if (_ccuqI::P64 < 2) goto ccuqF; else goto ccuqG;
       ccuqF: // global
           R3 = _scsq7::P64;
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccuqG: // global
           Hp = Hp + 32;
           _scsq8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccuqT; else goto ccuqP;
       ccuqP: // global
           _scsqb::P64 = P64[_scsq8::P64 + 14];
           I64[Hp - 24] = sat_scsqd_info;
           P64[Hp - 8] = _scsq7::P64;
           P64[Hp] = _scsqb::P64;
           R3 = Hp - 24;
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccuqH: // global
           Hp = Hp + 32;
           _scsq8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccuqT; else goto ccuqS;
       ccuqT: // global
           HpAlloc = 32;
           R1 = _scsq8::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuqS: // global
           _scsqf::P64 = P64[_scsq8::P64 + 13];
           I64[Hp - 24] = sat_scsqi_info;
           P64[Hp - 8] = _scsq7::P64;
           P64[Hp] = _scsqf::P64;
           R3 = Hp - 24;
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccupR_info" {
     block_ccupR_info:
         const _ccupR;
         const 1;
         const 4294967326;
         const ScsR0_srt+24;
 },
 losFmt_scsq6_entry() //  [R1]
         { []
         }
     {offset
       ccuqY: // global
           _scsq6::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccuqZ; else goto ccur0;
       ccur0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccur2; else goto ccur1;
       ccur2: // global
           HpAlloc = 16;
           goto ccuqZ;
       ccuqZ: // global
           R1 = _scsq6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccur1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsq6::P64;
           _scspI::P64 = P64[_scsq6::P64 + 16];
           _scspJ::P64 = P64[_scsq6::P64 + 24];
           I64[Hp - 8] = sat_scsqj_info;
           P64[Hp] = _scspJ::P64;
           I64[Sp - 24] = block_ccuqW_info;
           R3 = _scspI::P64;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . losFmt_scsq6_info" {
     losFmt_scsq6_info:
         const losFmt_scsq6_entry;
         const 2;
         const 4294967314;
         const ScsR0_srt+24;
 },
 _ccuqW() //  [R1]
         { []
         }
     {offset
       ccuqW: // global
           R3 = R1;
           R2 = lvl2_rcsmX_closure+1;
           Sp = Sp + 8;
           call sepBy_rcsmW_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuqW_info" {
     block_ccuqW_info:
         const _ccuqW;
         const 0;
         const 30;
 },
 go_scsqH_entry() //  [R1, R2]
         { []
         }
     {offset
       ccurr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccurs; else goto ccurt;
       ccurs: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccurt: // global
           I64[Sp - 24] = block_ccurk_info;
           _scsqH::P64 = R1;
           _scspL::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _scspL::P64;
           P64[Sp - 8] = _scsqH::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucurK; else goto ccurl;
       ucurK: // global
           call _ccurk(R1) args: 0, res: 0, upd: 0;
       ccurl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_scsqH_info" {
     go_scsqH_info:
         const go_scsqH_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _ccurk() //  [R1]
         { []
         }
     {offset
       ccurk: // global
           if (R1 & 7 == 1) goto ccuro; else goto ccurp;
       ccuro: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccurp: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto ccurJ; else goto ccurI;
       ccurJ: // global
           HpAlloc = 208;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccurI: // global
           _scsqK::P64 = P64[R1 + 6];
           _scsqL::P64 = P64[R1 + 14];
           I64[Hp - 200] = stg_ap_2_upd_info;
           P64[Hp - 184] = P64[Sp + 16];
           P64[Hp - 176] = _scsqL::P64;
           I64[Hp - 168] = stg_sel_2_upd_info;
           _ccurz::P64 = Hp - 200;
           P64[Hp - 152] = _ccurz::P64;
           I64[Hp - 144] = :_con_info;
           P64[Hp - 136] = _scsqK::P64;
           P64[Hp - 128] = Hp - 168;
           I64[Hp - 120] = stg_sel_1_upd_info;
           P64[Hp - 104] = _ccurz::P64;
           I64[Hp - 96] = :_con_info;
           P64[Hp - 88] = GHC.Types.[]_closure+1;
           P64[Hp - 80] = Hp - 120;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccurz::P64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           P64[Hp - 32] = Hp - 72;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 46;
           P64[Hp - 8] = Hp - 94;
           P64[Hp] = Hp - 142;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccurk_info" {
     block_ccurk_info:
         const _ccurk;
         const 2;
         const 30;
 },
 ds1_scsqG_entry() //  [R1]
         { []
         }
     {offset
       ccurL: // global
           _scsqG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccurM; else goto ccurN;
       ccurN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccurP; else goto ccurO;
       ccurP: // global
           HpAlloc = 16;
           goto ccurM;
       ccurM: // global
           R1 = _scsqG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccurO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsqG::P64;
           _scspL::P64 = P64[_scsqG::P64 + 16];
           _scsqF::P64 = P64[_scsqG::P64 + 24];
           I64[Hp - 8] = go_scsqH_info;
           P64[Hp] = _scspL::P64;
           R2 = _scsqF::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call go_scsqH_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_scsqG_info" {
     ds1_scsqG_info:
         const ds1_scsqG_entry;
         const 2;
         const 18;
 },
 System.Console.GetOpt.usageInfo1_entry() //  [R2]
         { []
         }
     {offset
       ccurU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccurV; else goto ccurW;
       ccurV: // global
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccurW: // global
           I64[Sp - 8] = block_ccuo9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucusr; else goto ccuoa;
       ucusr: // global
           call _ccuo9(R1) args: 0, res: 0, upd: 0;
       ccuoa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.usageInfo1_info" {
     System.Console.GetOpt.usageInfo1_info:
         const System.Console.GetOpt.usageInfo1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScsR0_srt+16;
 },
 _ccuo9() //  [R1]
         { []
         }
     {offset
       ccuo9: // global
           if (R1 & 7 == 1) goto ccurR; else goto ccurS;
       ccurR: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccurS: // global
           I64[Sp - 8] = block_ccuof_info;
           _scspF::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scspF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucusq; else goto ccuog;
       ucusq: // global
           call _ccuof(R1) args: 0, res: 0, upd: 0;
       ccuog: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuo9_info" {
     block_ccuo9_info:
         const _ccuo9;
         const 0;
         const 12884901918;
         const ScsR0_srt+16;
 },
 _ccuof() //  [R1]
         { []
         }
     {offset
       ccuof: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccus2; else goto ccus1;
       ccus2: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccus1: // global
           _scspH::P64 = P64[R1 + 7];
           _scspI::P64 = P64[R1 + 15];
           _scspJ::P64 = P64[R1 + 23];
           _scspK::P64 = P64[R1 + 31];
           I64[Hp - 80] = b2_scspL_info;
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = sosFmt_scspQ_info;
           P64[Hp - 40] = _scspH::P64;
           P64[Hp - 32] = _scspJ::P64;
           I64[Hp - 24] = losFmt_scsq6_info;
           P64[Hp - 8] = _scspI::P64;
           P64[Hp] = _scspJ::P64;
           I64[Sp - 16] = block_ccur6_info;
           R2 = _scspK::P64;
           P64[Sp - 8] = Hp - 24;
           P64[Sp] = Hp - 56;
           P64[Sp + 8] = Hp - 80;
           Sp = Sp - 16;
           call Data.OldList.lines_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuof_info" {
     block_ccuof_info:
         const _ccuof;
         const 1;
         const 12884901918;
         const ScsR0_srt+16;
 },
 _ccur6() //  [R1]
         { []
         }
     {offset
       ccur6: // global
           _ccuok::P64 = P64[Sp + 24];
           _ccuox::P64 = P64[Sp + 16];
           _ccupI::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccusb; else goto ccusl;
       ccusb: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccuse; else goto ccusd;
       ccuse: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccusd: // global
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _ccuok::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = GHC.Types.[]_closure+1;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccuok::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _ccupI::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccuok::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _ccuox::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccusl: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto ccuso; else goto ccusn;
       ccuso: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccusn: // global
           _scsqE::P64 = P64[R1 + 6];
           _scsqF::P64 = P64[R1 + 14];
           I64[Hp - 168] = ds1_scsqG_info;
           P64[Hp - 152] = _ccuok::P64;
           P64[Hp - 144] = _scsqF::P64;
           I64[Hp - 136] = stg_sel_2_upd_info;
           _ccurb::P64 = Hp - 168;
           P64[Hp - 120] = _ccurb::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _scsqE::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccurb::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _ccupI::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccurb::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _ccuox::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccur6_info" {
     block_ccur6_info:
         const _ccur6;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.031271114 UTC

[section ""data" . System.Console.GetOpt.usageInfo_closure" {
     System.Console.GetOpt.usageInfo_closure:
         const System.Console.GetOpt.usageInfo_info;
         const 0;
 },
 sat_scsru_entry() //  [R1]
         { []
         }
     {offset
       ccuuL: // global
           R2 = P64[R1 + 16];
           call System.Console.GetOpt.usageInfo_sameLen_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scsru_info" {
     sat_scsru_info:
         const sat_scsru_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+8;
 },
 sat_scsrv_entry() //  [R1]
         { []
         }
     {offset
       ccuuQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccuuR; else goto ccuuS;
       ccuuR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuuS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuuF_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.usageInfo1_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsrv_info" {
     sat_scsrv_info:
         const sat_scsrv_entry;
         const 1;
         const 12884901904;
         const ScsR0_srt+8;
 },
 _ccuuF() //  [R1, R2, R3]
         { []
         }
     {offset
       ccuuF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuuV; else goto ccuuU;
       ccuuV: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuuU: // global
           I64[Hp - 16] = sat_scsru_info;
           P64[Hp] = R2;
           I64[Sp - 16] = block_ccuuO_info;
           R2 = R1;
           P64[Sp - 8] = R3;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_sameLen_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuuF_info" {
     block_ccuuF_info:
         const _ccuuF;
         const 0;
         const 4294967326;
         const ScsR0_srt+8;
 },
 _ccuuO() //  [R1]
         { []
         }
     {offset
       ccuuO: // global
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = R1;
           Sp = Sp + 24;
           call System.Console.GetOpt.usageInfo_go2_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuuO_info" {
     block_ccuuO_info:
         const _ccuuO;
         const 2;
         const 30;
 },
 System.Console.GetOpt.usageInfo_entry() //  [R2, R3]
         { []
         }
     {offset
       ccuv0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccuv4; else goto ccuv3;
       ccuv4: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuv3: // global
           I64[Hp - 40] = sat_scsrv_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           call Data.OldList.unlines_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.usageInfo_info" {
     System.Console.GetOpt.usageInfo_info:
         const System.Console.GetOpt.usageInfo_entry;
         const 0;
         const 47244640270;
         const 8589934607;
         const ScsR0_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.041100612 UTC

[section ""cstring" . lvl12_rcsn7_bytes" {
     lvl12_rcsn7_bytes:
         I8[] [111,112,116,105,111,110,32,96]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.042766405 UTC

[section ""cstring" . lvl13_rcsn8_bytes" {
     lvl13_rcsn8_bytes:
         I8[] [39,32,105,115,32,97,109,98,105,103,117,111,117,115,59,32,99,111,117,108,100,32,98,101,32,111,110,101,32,111,102,58]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.044495681 UTC

[section ""cstring" . lvl14_rcsn9_bytes" {
     lvl14_rcsn9_bytes:
         I8[] [39,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.046505029 UTC

[section ""cstring" . lvl15_rcsna_bytes" {
     lvl15_rcsna_bytes:
         I8[] [10]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.048814244 UTC

[section ""data" . lvl16_rcsnb_closure" {
     lvl16_rcsnb_closure:
         const lvl16_rcsnb_info;
         const 0;
         const 0;
         const 0;
 },
 lvl16_rcsnb_entry() //  [R1]
         { []
         }
     {offset
       ccuvy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuvz; else goto ccuvA;
       ccuvz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuvA: // global
           (_ccuvv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccuvv::I64 == 0) goto ccuvx; else goto ccuvw;
       ccuvx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccuvw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccuvv::I64;
           R2 = lvl15_rcsna_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl16_rcsnb_info" {
     lvl16_rcsnb_info:
         const lvl16_rcsnb_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.052391131 UTC

[section ""cstring" . System.Console.GetOpt.getOpt2_bytes" {
     System.Console.GetOpt.getOpt2_bytes:
         I8[] [117,110,114,101,99,111,103,110,105,122,101,100,32,111,112,116,105,111,110,32,96]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.054592429 UTC

[section ""cstring" . System.Console.GetOpt.getOpt1_bytes" {
     System.Console.GetOpt.getOpt1_bytes:
         I8[] [39,10]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.05682777 UTC

[section ""data" . lvl17_rcsnc_closure" {
     lvl17_rcsnc_closure:
         const lvl17_rcsnc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl17_rcsnc_entry() //  [R1]
         { []
         }
     {offset
       ccuvQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuvR; else goto ccuvS;
       ccuvR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuvS: // global
           (_ccuvN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccuvN::I64 == 0) goto ccuvP; else goto ccuvO;
       ccuvP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccuvO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccuvN::I64;
           R2 = System.Console.GetOpt.getOpt1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_rcsnc_info" {
     lvl17_rcsnc_info:
         const lvl17_rcsnc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.061638309 UTC

[section ""data" . System.Console.GetOpt.errUnrec_closure" {
     System.Console.GetOpt.errUnrec_closure:
         const System.Console.GetOpt.errUnrec_info;
         const 0;
 },
 sat_scsry_entry() //  [R1]
         { []
         }
     {offset
       ccuw8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuw9; else goto ccuwa;
       ccuw9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuwa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl17_rcsnc_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsry_info" {
     sat_scsry_info:
         const sat_scsry_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+40;
 },
 System.Console.GetOpt.errUnrec_entry() //  [R2]
         { []
         }
     {offset
       ccuwb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuwf; else goto ccuwe;
       ccuwf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = System.Console.GetOpt.errUnrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccuwe: // global
           I64[Hp - 16] = sat_scsry_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = System.Console.GetOpt.getOpt2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.errUnrec_info" {
     System.Console.GetOpt.errUnrec_info:
         const System.Console.GetOpt.errUnrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScsR0_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.066670541 UTC

[section ""cstring" . lvl18_rcsnd_bytes" {
     lvl18_rcsnd_bytes:
         I8[] [39,32,100,111,101,115,110,39,116,32,97,108,108,111,119,32,97,110,32,97,114,103,117,109,101,110,116,10]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.068683812 UTC

[section ""data" . lvl19_rcsne_closure" {
     lvl19_rcsne_closure:
         const lvl19_rcsne_info;
 },
 lvl19_rcsne_entry() //  [R2, R3]
         { []
         }
     {offset
       ccuwt: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           call Data.OldList.isPrefixOf_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl19_rcsne_info" {
     lvl19_rcsne_info:
         const lvl19_rcsne_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.072800776 UTC

[section ""data" . lvl20_rcsnf_closure" {
     lvl20_rcsnf_closure:
         const lvl20_rcsnf_info;
 },
 lvl20_rcsnf_entry() //  [R2]
         { []
         }
     {offset
       ccuwH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccuwI; else goto ccuwJ;
       ccuwI: // global
           R2 = R2;
           R1 = lvl20_rcsnf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccuwJ: // global
           I64[Sp - 8] = block_ccuwE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuwR; else goto ccuwF;
       ucuwR: // global
           call _ccuwE(R1) args: 0, res: 0, upd: 0;
       ccuwF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl20_rcsnf_info" {
     lvl20_rcsnf_info:
         const lvl20_rcsnf_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccuwE() //  [R1]
         { []
         }
     {offset
       ccuwE: // global
           if (I64[R1 + 7] == 61) goto ccuwQ; else goto ccuwP;
       ccuwQ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuwP: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuwE_info" {
     block_ccuwE_info:
         const _ccuwE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.077717472 UTC

[section ""data" . lvl21_rcsng_closure" {
     lvl21_rcsng_closure:
         const GHC.Types.C#_con_info;
         const 45;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.079868724 UTC

[section ""data" . lvl22_rcsnh_closure" {
     lvl22_rcsnh_closure:
         const lvl22_rcsnh_info;
         const 0;
         const 0;
         const 0;
 },
 lvl22_rcsnh_entry() //  [R1]
         { []
         }
     {offset
       ccuxa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuxb; else goto ccuxc;
       ccuxb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuxc: // global
           (_ccux7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccux7::I64 == 0) goto ccux9; else goto ccux8;
       ccux9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccux8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccux7::I64;
           R2 = lvl18_rcsnd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl22_rcsnh_info" {
     lvl22_rcsnh_info:
         const lvl22_rcsnh_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.083633185 UTC

[section ""cstring" . lvl23_rcsni_bytes" {
     lvl23_rcsni_bytes:
         I8[] [111,112,116,105,111,110,32,96,45,45]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.086956699 UTC

[section ""data" . poly_go_rcsnj_closure" {
     poly_go_rcsnj_closure:
         const poly_go_rcsnj_info;
 },
 sat_scsrM_entry() //  [R1]
         { []
         }
     {offset
       ccuxE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuxF; else goto ccuxG;
       ccuxF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuxG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go_rcsnj_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsrM_info" {
     sat_scsrM_info:
         const sat_scsrM_entry;
         const 1;
         const 16;
 },
 poly_go_rcsnj_entry() //  [R2]
         { []
         }
     {offset
       ccuxL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuxM; else goto ccuxN;
       ccuxM: // global
           R2 = R2;
           R1 = poly_go_rcsnj_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccuxN: // global
           I64[Sp - 8] = block_ccuxp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuxW; else goto ccuxq;
       ucuxW: // global
           call _ccuxp(R1) args: 0, res: 0, upd: 0;
       ccuxq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . poly_go_rcsnj_info" {
     poly_go_rcsnj_info:
         const poly_go_rcsnj_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccuxp() //  [R1]
         { []
         }
     {offset
       ccuxp: // global
           if (R1 & 7 == 1) goto ccuxI; else goto ccuxJ;
       ccuxI: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuxJ: // global
           I64[Sp - 8] = block_ccuxv_info;
           _scsrG::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsrG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuxV; else goto ccuxw;
       ucuxV: // global
           call _ccuxv(R1) args: 0, res: 0, upd: 0;
       ccuxw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuxp_info" {
     block_ccuxp_info:
         const _ccuxp;
         const 0;
         const 30;
 },
 _ccuxv() //  [R1]
         { []
         }
     {offset
       ccuxv: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccuxU; else goto ccuxT;
       ccuxU: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuxT: // global
           _scsrK::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_scsrM_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scsrK::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuxv_info" {
     block_ccuxv_info:
         const _ccuxv;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.096592201 UTC

[section ""data" . lvl24_rcsnk_closure" {
     lvl24_rcsnk_closure:
         const lvl24_rcsnk_info;
         const 0;
         const 0;
         const 0;
 },
 lvl24_rcsnk_entry() //  [R1]
         { []
         }
     {offset
       ccuyq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuyr; else goto ccuys;
       ccuyr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuys: // global
           (_ccuyn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccuyn::I64 == 0) goto ccuyp; else goto ccuyo;
       ccuyp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccuyo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccuyn::I64;
           R2 = lvl13_rcsn8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl24_rcsnk_info" {
     lvl24_rcsnk_info:
         const lvl24_rcsnk_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.101601854 UTC

[section ""data" . poly_go1_rcsnl_closure" {
     poly_go1_rcsnl_closure:
         const poly_go1_rcsnl_info;
 },
 sat_scsrW_entry() //  [R1]
         { []
         }
     {offset
       ccuyT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuyU; else goto ccuyV;
       ccuyU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuyV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go1_rcsnl_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsrW_info" {
     sat_scsrW_info:
         const sat_scsrW_entry;
         const 1;
         const 16;
 },
 poly_go1_rcsnl_entry() //  [R2]
         { []
         }
     {offset
       ccuz0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuz1; else goto ccuz2;
       ccuz1: // global
           R2 = R2;
           R1 = poly_go1_rcsnl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccuz2: // global
           I64[Sp - 8] = block_ccuyE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuzb; else goto ccuyF;
       ucuzb: // global
           call _ccuyE(R1) args: 0, res: 0, upd: 0;
       ccuyF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . poly_go1_rcsnl_info" {
     poly_go1_rcsnl_info:
         const poly_go1_rcsnl_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccuyE() //  [R1]
         { []
         }
     {offset
       ccuyE: // global
           if (R1 & 7 == 1) goto ccuyX; else goto ccuyY;
       ccuyX: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuyY: // global
           I64[Sp - 8] = block_ccuyK_info;
           _scsrQ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsrQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuza; else goto ccuyL;
       ucuza: // global
           call _ccuyK(R1) args: 0, res: 0, upd: 0;
       ccuyL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuyE_info" {
     block_ccuyE_info:
         const _ccuyE;
         const 0;
         const 30;
 },
 _ccuyK() //  [R1]
         { []
         }
     {offset
       ccuyK: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccuz9; else goto ccuz8;
       ccuz9: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuz8: // global
           _scsrU::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_scsrW_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scsrU::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuyK_info" {
     block_ccuyK_info:
         const _ccuyK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.184627399 UTC

[section ""data" . System.Console.GetOpt.$wgetOpt'_closure" {
     System.Console.GetOpt.$wgetOpt'_closure:
         const System.Console.GetOpt.$wgetOpt'_info;
         const 0;
 },
 ds_scss6_entry() //  [R1]
         { []
         }
     {offset
       ccuA1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuA2; else goto ccuA3;
       ccuA2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuA3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuzY_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_scss6_info" {
     ds_scss6_info:
         const ds_scss6_entry;
         const 2;
         const 4294967314;
         const ScsR0_srt+56;
 },
 _ccuzY() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuzY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuA6; else goto ccuA5;
       ccuA6: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuA5: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuzY_info" {
     block_ccuzY_info:
         const _ccuzY;
         const 0;
         const 30;
 },
 ds_scssC_entry() //  [R1]
         { []
         }
     {offset
       ccuAg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuAh; else goto ccuAi;
       ccuAh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuAi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuAd_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_scssC_info" {
     ds_scssC_info:
         const ds_scssC_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuAd() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuAd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuAl; else goto ccuAk;
       ccuAl: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuAk: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuAd_info" {
     block_ccuAd_info:
         const _ccuAd;
         const 0;
         const 30;
 },
 sat_scssI_entry() //  [R1]
         { []
         }
     {offset
       ccuAu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuAv; else goto ccuAw;
       ccuAv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuAw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scssI_info" {
     sat_scssI_info:
         const sat_scssI_entry;
         const 1;
         const 16;
 },
 ds4_scste_entry() //  [R1]
         { []
         }
     {offset
       ccuAT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuAU; else goto ccuAV;
       ccuAU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuAV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuAQ_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds4_scste_info" {
     ds4_scste_info:
         const ds4_scste_entry;
         const 2;
         const 4294967314;
         const ScsR0_srt+56;
 },
 _ccuAQ() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuAQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuAY; else goto ccuAX;
       ccuAY: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuAX: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuAQ_info" {
     block_ccuAQ_info:
         const _ccuAQ;
         const 0;
         const 30;
 },
 ds4_scstK_entry() //  [R1]
         { []
         }
     {offset
       ccuB8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuB9; else goto ccuBa;
       ccuB9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuBa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuB5_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds4_scstK_info" {
     ds4_scstK_info:
         const ds4_scstK_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuB5() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuB5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuBd; else goto ccuBc;
       ccuBd: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuBc: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuB5_info" {
     block_ccuB5_info:
         const _ccuB5;
         const 0;
         const 30;
 },
 ds4_scsui_entry() //  [R1]
         { []
         }
     {offset
       ccuBx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuBy; else goto ccuBz;
       ccuBy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuBz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuBu_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds4_scsui_info" {
     ds4_scsui_info:
         const ds4_scsui_entry;
         const 2;
         const 4294967314;
         const ScsR0_srt+56;
 },
 _ccuBu() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuBu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuBC; else goto ccuBB;
       ccuBC: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuBB: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuBu_info" {
     block_ccuBu_info:
         const _ccuBu;
         const 0;
         const 30;
 },
 ds4_scsuO_entry() //  [R1]
         { []
         }
     {offset
       ccuBM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuBN; else goto ccuBO;
       ccuBN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuBO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuBJ_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds4_scsuO_info" {
     ds4_scsuO_info:
         const ds4_scsuO_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuBJ() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuBJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuBR; else goto ccuBQ;
       ccuBR: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuBQ: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuBJ_info" {
     block_ccuBJ_info:
         const _ccuBJ;
         const 0;
         const 30;
 },
 go1_scsvA_entry() //  [R1, R2]
         { []
         }
     {offset
       ccuCu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccuCv; else goto ucuCU;
       ccuCv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ucuCU: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _ccuCk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go1_scsvA_info" {
     go1_scsvA_info:
         const go1_scsvA_entry;
         const 4294967298;
         const 8;
         const 4294967301;
 },
 _ccuCk() //  []
         { []
         }
     {offset
       ccuCk: // global
           I64[Sp - 24] = block_ccuCn_info;
           R1 = P64[Sp + 8];
           _scsvA::P64 = P64[Sp];
           P64[Sp - 16] = P64[_scsvA::P64 + 7];
           P64[Sp - 8] = P64[_scsvA::P64 + 15];
           I64[Sp + 8] = I64[_scsvA::P64 + 23];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucuCW; else goto ccuCo;
       ucuCW: // global
           call _ccuCn(R1) args: 0, res: 0, upd: 0;
       ccuCo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuCn() //  [R1]
         { []
         }
     {offset
       ccuCn: // global
           if (R1 & 7 == 1) goto ccuCr; else goto ccuCs;
       ccuCr: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccuCs: // global
           I64[Sp] = block_ccuCC_info;
           _scsvE::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _scsvE::P64;
           if (R1 & 7 != 0) goto ucuCX; else goto ccuCE;
       ucuCX: // global
           call _ccuCC(R1) args: 0, res: 0, upd: 0;
       ccuCE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuCn_info" {
     block_ccuCn_info:
         const _ccuCn;
         const 516;
         const 30;
 },
 _ccuCC() //  [R1]
         { []
         }
     {offset
       ccuCC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccuCK; else goto ccuCJ;
       ccuCK: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuCJ: // global
           _scsvE::P64 = P64[Sp + 16];
           if (I64[Sp + 32] == I64[R1 + 7]) goto ccuCT; else goto ccuCO;
       ccuCT: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = _scsvE::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuCO: // global
           Hp = Hp - 56;
           P64[Sp + 32] = _scsvE::P64;
           Sp = Sp + 24;
           call _ccuCk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccuCC_info" {
     block_ccuCC_info:
         const _ccuCC;
         const 516;
         const 30;
 },
 go_scsvp_entry() //  [R1, R2]
         { []
         }
     {offset
       ccuD4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccuD5; else goto ccuD6;
       ccuD5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccuD6: // global
           I64[Sp - 24] = block_ccuC6_info;
           _scsvp::P64 = R1;
           _scsvo::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _scsvo::I64;
           P64[Sp - 8] = _scsvp::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucuDe; else goto ccuC7;
       ucuDe: // global
           call _ccuC6(R1) args: 0, res: 0, upd: 0;
       ccuC7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_scsvp_info" {
     go_scsvp_info:
         const go_scsvp_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _ccuC6() //  [R1]
         { []
         }
     {offset
       ccuC6: // global
           if (R1 & 7 == 1) goto ccuD1; else goto ccuD2;
       ccuD1: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuD2: // global
           I64[Sp - 8] = block_ccuCc_info;
           _scsvt::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsvt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuDd; else goto ccuCd;
       ucuDd: // global
           call _ccuCc(R1) args: 0, res: 0, upd: 0;
       ccuCd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuC6_info" {
     block_ccuC6_info:
         const _ccuC6;
         const 66;
         const 30;
 },
 _ccuCc() //  [R1]
         { []
         }
     {offset
       ccuCc: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccuDc; else goto ccuDb;
       ccuDc: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuDb: // global
           _scsvv::P64 = P64[R1 + 7];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = go1_scsvA_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = Hp - 56;
           I64[Hp] = I64[Sp + 16];
           R2 = _scsvv::P64;
           R1 = Hp - 23;
           Sp = Sp + 32;
           call go1_scsvA_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuCc_info" {
     block_ccuCc_info:
         const _ccuCc;
         const 131;
         const 30;
 },
 ds8_scsvM_entry() //  [R1]
         { []
         }
     {offset
       ccuDz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuDA; else goto ccuDB;
       ccuDA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuDB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuDw_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds8_scsvM_info" {
     ds8_scsvM_info:
         const ds8_scsvM_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuDw() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuDw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuDE; else goto ccuDD;
       ccuDE: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuDD: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuDw_info" {
     block_ccuDw_info:
         const _ccuDw;
         const 0;
         const 30;
 },
 ds8_scswl_entry() //  [R1]
         { []
         }
     {offset
       ccuDQ: // global
           _scswl::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccuDR; else goto ccuDS;
       ccuDS: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccuDU; else goto ccuDT;
       ccuDU: // global
           HpAlloc = 48;
           goto ccuDR;
       ccuDR: // global
           R1 = _scswl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuDT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scswl::P64;
           _scsrX::P64 = P64[_scswl::P64 + 16];
           _scsrY::P64 = P64[_scswl::P64 + 24];
           _scss2::P64 = P64[_scswl::P64 + 32];
           _scsvL::P64 = P64[_scswl::P64 + 40];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl21_rcsng_closure+1;
           P64[Hp - 24] = _scsvL::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = _scss2::P64;
           I64[Sp - 24] = block_ccuDN_info;
           R4 = Hp - 14;
           R3 = _scsrY::P64;
           R2 = _scsrX::P64;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds8_scswl_info" {
     ds8_scswl_info:
         const ds8_scswl_entry;
         const 4;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuDN() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuDN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuDX; else goto ccuDW;
       ccuDX: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuDW: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuDN_info" {
     block_ccuDN_info:
         const _ccuDN;
         const 0;
         const 30;
 },
 ds10_scsx0_entry() //  [R1]
         { []
         }
     {offset
       ccuEm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuEn; else goto ccuEo;
       ccuEn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuEo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuEj_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds10_scsx0_info" {
     ds10_scsx0_info:
         const ds10_scsx0_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuEj() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuEj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuEr; else goto ccuEq;
       ccuEr: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuEq: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuEj_info" {
     block_ccuEj_info:
         const _ccuEj;
         const 0;
         const 30;
 },
 ds10_scsxx_entry() //  [R1]
         { []
         }
     {offset
       ccuED: // global
           _scsxx::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccuEE; else goto ccuEF;
       ccuEF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccuEH; else goto ccuEG;
       ccuEH: // global
           HpAlloc = 48;
           goto ccuEE;
       ccuEE: // global
           R1 = _scsxx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuEG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsxx::P64;
           _scsrX::P64 = P64[_scsxx::P64 + 16];
           _scsrY::P64 = P64[_scsxx::P64 + 24];
           _scss2::P64 = P64[_scsxx::P64 + 32];
           _scswZ::P64 = P64[_scsxx::P64 + 40];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl21_rcsng_closure+1;
           P64[Hp - 24] = _scswZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = _scss2::P64;
           I64[Sp - 24] = block_ccuEA_info;
           R4 = Hp - 14;
           R3 = _scsrY::P64;
           R2 = _scsrX::P64;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds10_scsxx_info" {
     ds10_scsxx_info:
         const ds10_scsxx_entry;
         const 4;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuEA() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuEA: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuEK; else goto ccuEJ;
       ccuEK: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuEJ: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuEA_info" {
     block_ccuEA_info:
         const _ccuEA;
         const 0;
         const 30;
 },
 ds11_scsy8_entry() //  [R1]
         { []
         }
     {offset
       ccuF4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuF5; else goto ccuF6;
       ccuF5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuF6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuF1_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds11_scsy8_info" {
     ds11_scsy8_info:
         const ds11_scsy8_entry;
         const 2;
         const 4294967314;
         const ScsR0_srt+56;
 },
 _ccuF1() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuF1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuF9; else goto ccuF8;
       ccuF9: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuF8: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuF1_info" {
     block_ccuF1_info:
         const _ccuF1;
         const 0;
         const 30;
 },
 sat_scsyy_entry() //  [R1]
         { []
         }
     {offset
       ccuFr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuFs; else goto ccuFt;
       ccuFs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuFt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl16_rcsnb_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsyy_info" {
     sat_scsyy_info:
         const sat_scsyy_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+64;
 },
 sat_scsyz_entry() //  [R1]
         { []
         }
     {offset
       ccuFu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuFy; else goto ccuFx;
       ccuFy: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuFx: // global
           _scsy5::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scsyy_info;
           P64[Hp] = _scsy5::P64;
           R3 = Hp - 16;
           R2 = lvl14_rcsn9_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scsyz_info" {
     sat_scsyz_info:
         const sat_scsyz_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+64;
 },
 sat_scsyA_entry() //  [R1]
         { []
         }
     {offset
       ccuFB: // global
           _scsyA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuFC; else goto ccuFD;
       ccuFD: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccuFF; else goto ccuFE;
       ccuFF: // global
           HpAlloc = 72;
           goto ccuFC;
       ccuFC: // global
           R1 = _scsyA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuFE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsyA::P64;
           _scsvm::P64 = P64[_scsyA::P64 + 16];
           _scsy5::P64 = P64[_scsyA::P64 + 24];
           I64[Hp - 64] = sat_scsyz_info;
           P64[Hp - 48] = _scsy5::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scsvm::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl21_rcsng_closure+1;
           P64[Hp] = Hp - 38;
           R3 = Hp - 64;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsyA_info" {
     sat_scsyA_info:
         const sat_scsyA_entry;
         const 2;
         const 4294967314;
         const ScsR0_srt+64;
 },
 sat_scsyB_entry() //  [R1]
         { []
         }
     {offset
       ccuFG: // global
           _scsyB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuFH; else goto ccuFI;
       ccuFI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccuFK; else goto ccuFJ;
       ccuFK: // global
           HpAlloc = 32;
           goto ccuFH;
       ccuFH: // global
           R1 = _scsyB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuFJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsyB::P64;
           _scsvm::P64 = P64[_scsyB::P64 + 16];
           _scsy5::P64 = P64[_scsyB::P64 + 24];
           I64[Hp - 24] = sat_scsyA_info;
           P64[Hp - 8] = _scsvm::P64;
           P64[Hp] = _scsy5::P64;
           R3 = Hp - 24;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsyB_info" {
     sat_scsyB_info:
         const sat_scsyB_entry;
         const 2;
         const 4294967314;
         const ScsR0_srt+64;
 },
 ds11_scsyL_entry() //  [R1]
         { []
         }
     {offset
       ccuFU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuFV; else goto ccuFW;
       ccuFV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuFW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuFR_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds11_scsyL_info" {
     ds11_scsyL_info:
         const ds11_scsyL_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuFR() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuFR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuFZ; else goto ccuFY;
       ccuFZ: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuFY: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuFR_info" {
     block_ccuFR_info:
         const _ccuFR;
         const 0;
         const 30;
 },
 ds11_scszj_entry() //  [R1]
         { []
         }
     {offset
       ccuG9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuGa; else goto ccuGb;
       ccuGa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuGb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuG6_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds11_scszj_info" {
     ds11_scszj_info:
         const ds11_scszj_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuG6() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuG6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuGe; else goto ccuGd;
       ccuGe: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuGd: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuG6_info" {
     block_ccuG6_info:
         const _ccuG6;
         const 0;
         const 30;
 },
 ds11_scszS_entry() //  [R1]
         { []
         }
     {offset
       ccuGt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuGu; else goto ccuGv;
       ccuGu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuGv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuGq_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds11_scszS_info" {
     ds11_scszS_info:
         const ds11_scszS_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuGq() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuGq: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuGy; else goto ccuGx;
       ccuGy: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuGx: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuGq_info" {
     block_ccuGq_info:
         const _ccuGq;
         const 0;
         const 30;
 },
 sat_scszY_entry() //  [R1]
         { []
         }
     {offset
       ccuGH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuGI; else goto ccuGJ;
       ccuGI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuGJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scszY_info" {
     sat_scszY_info:
         const sat_scszY_entry;
         const 1;
         const 16;
 },
 ds11_scsAq_entry() //  [R1]
         { []
         }
     {offset
       ccuGT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuGU; else goto ccuGV;
       ccuGU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuGV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuGQ_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds11_scsAq_info" {
     ds11_scsAq_info:
         const ds11_scsAq_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuGQ() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuGQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuGY; else goto ccuGX;
       ccuGY: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuGX: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuGQ_info" {
     block_ccuGQ_info:
         const _ccuGQ;
         const 0;
         const 30;
 },
 sat_scsAx_entry() //  [R1]
         { []
         }
     {offset
       ccuH8: // global
           _scsAx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuH9; else goto ccuHa;
       ccuHa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccuHc; else goto ccuHb;
       ccuHc: // global
           HpAlloc = 16;
           goto ccuH9;
       ccuH9: // global
           R1 = _scsAx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuHb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsAx::P64;
           _scszP::P64 = P64[_scsAx::P64 + 16];
           _scszR::P64 = P64[_scsAx::P64 + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _scszR::P64;
           R2 = Hp - 6;
           R1 = _scszP::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsAx_info" {
     sat_scsAx_info:
         const sat_scsAx_entry;
         const 2;
         const 18;
 },
 ds12_scsAZ_entry() //  [R1]
         { []
         }
     {offset
       ccuHm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuHn; else goto ccuHo;
       ccuHn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuHo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuHj_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds12_scsAZ_info" {
     ds12_scsAZ_info:
         const ds12_scsAZ_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuHj() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuHj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuHr; else goto ccuHq;
       ccuHr: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuHq: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuHj_info" {
     block_ccuHj_info:
         const _ccuHj;
         const 0;
         const 30;
 },
 sat_scsBp_entry() //  [R1]
         { []
         }
     {offset
       ccuHH: // global
           _scsBp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuHI; else goto ccuHJ;
       ccuHJ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccuHL; else goto ccuHK;
       ccuHL: // global
           HpAlloc = 48;
           goto ccuHI;
       ccuHI: // global
           R1 = _scsBp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuHK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsBp::P64;
           _scsvm::P64 = P64[_scsBp::P64 + 16];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scsvm::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl21_rcsng_closure+1;
           P64[Hp] = Hp - 38;
           R3 = lvl24_rcsnk_closure;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsBp_info" {
     sat_scsBp_info:
         const sat_scsBp_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+72;
 },
 sat_scsBq_entry() //  [R1]
         { []
         }
     {offset
       ccuHM: // global
           _scsBq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuHN; else goto ccuHO;
       ccuHO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuHQ; else goto ccuHP;
       ccuHQ: // global
           HpAlloc = 24;
           goto ccuHN;
       ccuHN: // global
           R1 = _scsBq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuHP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsBq::P64;
           _scsvm::P64 = P64[_scsBq::P64 + 16];
           I64[Hp - 16] = sat_scsBp_info;
           P64[Hp] = _scsvm::P64;
           R3 = Hp - 16;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsBq_info" {
     sat_scsBq_info:
         const sat_scsBq_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+72;
 },
 sat_scsBr_entry() //  [R1]
         { []
         }
     {offset
       ccuHR: // global
           _scsBr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuHS; else goto ccuHT;
       ccuHT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuHV; else goto ccuHU;
       ccuHV: // global
           HpAlloc = 24;
           goto ccuHS;
       ccuHS: // global
           R1 = _scsBr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuHU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsBr::P64;
           _scsvm::P64 = P64[_scsBr::P64 + 16];
           _scsvJ::P64 = P64[_scsBr::P64 + 24];
           I64[Hp - 16] = sat_scsBq_info;
           P64[Hp] = _scsvm::P64;
           R3 = _scsvJ::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsBr_info" {
     sat_scsBr_info:
         const sat_scsBr_entry;
         const 2;
         const 141733920786;
         const ScsR0_srt+32;
 },
 sat_scsBC_entry() //  [R1]
         { []
         }
     {offset
       ccuIc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuId; else goto ccuIe;
       ccuId: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuIe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsBC_info" {
     sat_scsBC_info:
         const sat_scsBC_entry;
         const 2;
         const 18;
 },
 ds8_scsBF_entry() //  [R1]
         { []
         }
     {offset
       ccuIo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuIp; else goto ccuIq;
       ccuIp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuIq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuIl_info;
           R3 = P64[R1 + 16];
           R2 = lvl20_rcsnf_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds8_scsBF_info" {
     ds8_scsBF_info:
         const ds8_scsBF_entry;
         const 1;
         const 16;
 },
 _ccuIl() //  [R1, R2]
         { []
         }
     {offset
       ccuIl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuIt; else goto ccuIs;
       ccuIt: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccuIs: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuIl_info" {
     block_ccuIl_info:
         const _ccuIl;
         const 0;
         const 30;
 },
 go_scsBQ_entry() //  [R1, R2]
         { []
         }
     {offset
       ccuIN: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccuIO; else goto ucuJN;
       ccuIO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ucuJN: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _ccuID() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_scsBQ_info" {
     go_scsBQ_info:
         const go_scsBQ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _ccuID() //  []
         { []
         }
     {offset
       ccuID: // global
           _scsBP::P64 = P64[P64[Sp] + 7];
           I64[Sp - 8] = block_ccuIG_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scsBP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuJS; else goto ccuIH;
       ucuJS: // global
           call _ccuIG(R1) args: 0, res: 0, upd: 0;
       ccuIH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuIG() //  [R1]
         { []
         }
     {offset
       ccuIG: // global
           if (R1 & 7 == 1) goto ccuIK; else goto ccuIL;
       ccuIK: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuIL: // global
           I64[Sp - 8] = block_ccuIV_info;
           _scsBU::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsBU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuJT; else goto ccuIX;
       ucuJT: // global
           call _ccuIV(R1) args: 0, res: 0, upd: 0;
       ccuIX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuIG_info" {
     block_ccuIG_info:
         const _ccuIG;
         const 2;
         const 30;
 },
 _ccuIV() //  [R1]
         { []
         }
     {offset
       ccuIV: // global
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _ccuJl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccuIV_info" {
     block_ccuIV_info:
         const _ccuIV;
         const 3;
         const 30;
 },
 _ccuJl() //  []
         { []
         }
     {offset
       ccuJl: // global
           _scsC4::P64 = P64[Sp];
           I64[Sp] = block_ccuJn_info;
           R1 = _scsC4::P64;
           if (R1 & 7 != 0) goto ucuJW; else goto ccuJp;
       ucuJW: // global
           call _ccuJn(R1) args: 0, res: 0, upd: 0;
       ccuJp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuJn() //  [R1]
         { []
         }
     {offset
       ccuJn: // global
           if (R1 & 7 == 1) goto ccuJv; else goto ccuJA;
       ccuJv: // global
           P64[Sp + 32] = P64[Sp + 16];
           Sp = Sp + 24;
           call _ccuID() args: 0, res: 0, upd: 0;
       ccuJA: // global
           I64[Sp - 8] = block_ccuJy_info;
           R2 = P64[R1 + 6];
           _scsC7::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _scsC7::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuJn_info" {
     block_ccuJn_info:
         const _ccuJn;
         const 4;
         const 30;
 },
 _ccuJy() //  [R1]
         { []
         }
     {offset
       ccuJy: // global
           if (R1 & 7 == 1) goto ccuJG; else goto ucuJP;
       ccuJG: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _ccuJl() args: 0, res: 0, upd: 0;
       ucuJP: // global
           Sp = Sp + 8;
           call _ccuJb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccuJy_info" {
     block_ccuJy_info:
         const _ccuJy;
         const 5;
         const 30;
 },
 _ccuJb() //  []
         { []
         }
     {offset
       ccuJb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccuJh; else goto ccuJg;
       ccuJh: // global
           HpAlloc = 56;
           I64[Sp] = block_ccuJb_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       ccuJg: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuJb_info" {
     block_ccuJb_info:
         const _ccuJb;
         const 516;
         const 30;
 },
 getWith_scsBN_entry() //  [R1, R2]
         { []
         }
     {offset
       ccuK0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccuK4; else goto ccuK3;
       ccuK4: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccuK3: // global
           _scsrY::P64 = P64[R1 + 7];
           _scsBJ::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = _scsBJ::P64;
           I64[Hp - 8] = go_scsBQ_info;
           P64[Hp] = Hp - 40;
           R2 = _scsrY::P64;
           R1 = Hp - 7;
           call go_scsBQ_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . getWith_scsBN_info" {
     getWith_scsBN_info:
         const getWith_scsBN_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 ds9_scsCc_entry() //  [R1]
         { []
         }
     {offset
       ccuKl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuKm; else goto ccuKn;
       ccuKm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuKn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuKi_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds9_scsCc_info" {
     ds9_scsCc_info:
         const ds9_scsCc_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuKi() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuKi: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuKq; else goto ccuKp;
       ccuKq: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuKp: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuKi_info" {
     block_ccuKi_info:
         const _ccuKi;
         const 0;
         const 30;
 },
 sat_scsCu_entry() //  [R1]
         { []
         }
     {offset
       ccuKx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuKy; else goto ccuKz;
       ccuKy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuKz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsCu_info" {
     sat_scsCu_info:
         const sat_scsCu_entry;
         const 1;
         const 16;
 },
 ds11_scsCR_entry() //  [R1]
         { []
         }
     {offset
       ccuL3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuL4; else goto ccuL5;
       ccuL4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuL5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuL0_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds11_scsCR_info" {
     ds11_scsCR_info:
         const ds11_scsCR_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuL0() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuL0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuL8; else goto ccuL7;
       ccuL8: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuL7: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuL0_info" {
     block_ccuL0_info:
         const _ccuL0;
         const 0;
         const 30;
 },
 ds15_scsDr_entry() //  [R1]
         { []
         }
     {offset
       ccuLp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuLq; else goto ccuLr;
       ccuLq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuLr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuLm_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds15_scsDr_info" {
     ds15_scsDr_info:
         const ds15_scsDr_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuLm() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuLm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuLu; else goto ccuLt;
       ccuLu: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuLt: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuLm_info" {
     block_ccuLm_info:
         const _ccuLm;
         const 0;
         const 30;
 },
 sat_scsDJ_entry() //  [R1]
         { []
         }
     {offset
       ccuLB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuLC; else goto ccuLD;
       ccuLC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuLD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsDJ_info" {
     sat_scsDJ_info:
         const sat_scsDJ_entry;
         const 1;
         const 16;
 },
 ds15_scsDX_entry() //  [R1]
         { []
         }
     {offset
       ccuLM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuLN; else goto ccuLO;
       ccuLN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuLO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuLJ_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds15_scsDX_info" {
     ds15_scsDX_info:
         const ds15_scsDX_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuLJ() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuLJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuLR; else goto ccuLQ;
       ccuLR: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuLQ: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuLJ_info" {
     block_ccuLJ_info:
         const _ccuLJ;
         const 0;
         const 30;
 },
 sat_scsEl_entry() //  [R1]
         { []
         }
     {offset
       ccuM1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuM2; else goto ccuM3;
       ccuM2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuM3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl22_rcsnh_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsEl_info" {
     sat_scsEl_info:
         const sat_scsEl_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+80;
 },
 sat_scsEm_entry() //  [R1]
         { []
         }
     {offset
       ccuM4: // global
           _scsEm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuM5; else goto ccuM6;
       ccuM6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuM8; else goto ccuM7;
       ccuM8: // global
           HpAlloc = 24;
           goto ccuM5;
       ccuM5: // global
           R1 = _scsEm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuM7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsEm::P64;
           _scsBJ::P64 = P64[_scsEm::P64 + 16];
           I64[Hp - 16] = sat_scsEl_info;
           P64[Hp] = _scsBJ::P64;
           R3 = Hp - 16;
           R2 = lvl23_rcsni_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsEm_info" {
     sat_scsEm_info:
         const sat_scsEm_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+80;
 },
 ds12_scsEB_entry() //  [R1]
         { []
         }
     {offset
       ccuMx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuMy; else goto ccuMz;
       ccuMy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuMz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuMu_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds12_scsEB_info" {
     ds12_scsEB_info:
         const ds12_scsEB_entry;
         const 2;
         const 4294967314;
         const ScsR0_srt+56;
 },
 _ccuMu() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuMu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuMC; else goto ccuMB;
       ccuMC: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuMB: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuMu_info" {
     block_ccuMu_info:
         const _ccuMu;
         const 0;
         const 30;
 },
 sat_scsF0_entry() //  [R1]
         { []
         }
     {offset
       ccuMU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuMV; else goto ccuMW;
       ccuMV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuMW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl16_rcsnb_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsF0_info" {
     sat_scsF0_info:
         const sat_scsF0_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+64;
 },
 sat_scsF1_entry() //  [R1]
         { []
         }
     {offset
       ccuMX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuN1; else goto ccuN0;
       ccuN1: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuN0: // global
           _scsEv::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scsF0_info;
           P64[Hp] = _scsEv::P64;
           R3 = Hp - 16;
           R2 = lvl14_rcsn9_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scsF1_info" {
     sat_scsF1_info:
         const sat_scsF1_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+64;
 },
 sat_scsF2_entry() //  [R1]
         { []
         }
     {offset
       ccuN4: // global
           _scsF2::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto ccuN5; else goto ccuN6;
       ccuN6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuN8; else goto ccuN7;
       ccuN8: // global
           HpAlloc = 24;
           goto ccuN5;
       ccuN5: // global
           R1 = _scsF2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuN7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsF2::P64;
           _scsBJ::P64 = P64[_scsF2::P64 + 16];
           _scsEv::P64 = P64[_scsF2::P64 + 24];
           I64[Hp - 16] = sat_scsF1_info;
           P64[Hp] = _scsEv::P64;
           I64[Sp - 32] = block_ccuN2_info;
           R3 = _scsBJ::P64;
           R2 = lvl6_rcsn1_bytes;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsF2_info" {
     sat_scsF2_info:
         const sat_scsF2_entry;
         const 2;
         const 4294967314;
         const ScsR0_srt+64;
 },
 _ccuN2() //  [R1]
         { []
         }
     {offset
       ccuN2: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuN2_info" {
     block_ccuN2_info:
         const _ccuN2;
         const 1;
         const 30;
 },
 sat_scsF3_entry() //  [R1]
         { []
         }
     {offset
       ccuNc: // global
           _scsF3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuNd; else goto ccuNe;
       ccuNe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccuNg; else goto ccuNf;
       ccuNg: // global
           HpAlloc = 32;
           goto ccuNd;
       ccuNd: // global
           R1 = _scsF3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuNf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsF3::P64;
           _scsBJ::P64 = P64[_scsF3::P64 + 16];
           _scsEv::P64 = P64[_scsF3::P64 + 24];
           I64[Hp - 24] = sat_scsF2_info;
           P64[Hp - 8] = _scsBJ::P64;
           P64[Hp] = _scsEv::P64;
           R3 = Hp - 24;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsF3_info" {
     sat_scsF3_info:
         const sat_scsF3_entry;
         const 2;
         const 4294967314;
         const ScsR0_srt+64;
 },
 ds12_scsFd_entry() //  [R1]
         { []
         }
     {offset
       ccuNq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuNr; else goto ccuNs;
       ccuNr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuNs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuNn_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds12_scsFd_info" {
     ds12_scsFd_info:
         const ds12_scsFd_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuNn() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuNn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuNv; else goto ccuNu;
       ccuNv: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuNu: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuNn_info" {
     block_ccuNn_info:
         const _ccuNn;
         const 0;
         const 30;
 },
 ds15_scsFO_entry() //  [R1]
         { []
         }
     {offset
       ccuNM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuNN; else goto ccuNO;
       ccuNN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuNO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuNJ_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds15_scsFO_info" {
     ds15_scsFO_info:
         const ds15_scsFO_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuNJ() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuNJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuNR; else goto ccuNQ;
       ccuNR: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuNQ: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuNJ_info" {
     block_ccuNJ_info:
         const _ccuNJ;
         const 0;
         const 30;
 },
 sat_scsG6_entry() //  [R1]
         { []
         }
     {offset
       ccuNY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuNZ; else goto ccuO0;
       ccuNZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuO0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsG6_info" {
     sat_scsG6_info:
         const sat_scsG6_entry;
         const 1;
         const 16;
 },
 ds15_scsGk_entry() //  [R1]
         { []
         }
     {offset
       ccuO9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuOa; else goto ccuOb;
       ccuOa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuOb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuO6_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds15_scsGk_info" {
     ds15_scsGk_info:
         const ds15_scsGk_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuO6() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuO6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuOe; else goto ccuOd;
       ccuOe: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuOd: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuO6_info" {
     block_ccuO6_info:
         const _ccuO6;
         const 0;
         const 30;
 },
 ds12_scsGW_entry() //  [R1]
         { []
         }
     {offset
       ccuOy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuOz; else goto ccuOA;
       ccuOz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuOA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuOv_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds12_scsGW_info" {
     ds12_scsGW_info:
         const ds12_scsGW_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuOv() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuOv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuOD; else goto ccuOC;
       ccuOD: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuOC: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuOv_info" {
     block_ccuOv_info:
         const _ccuOv;
         const 0;
         const 30;
 },
 sat_scsH2_entry() //  [R1]
         { []
         }
     {offset
       ccuOM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuON; else goto ccuOO;
       ccuON: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuOO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsH2_info" {
     sat_scsH2_info:
         const sat_scsH2_entry;
         const 1;
         const 16;
 },
 ds15_scsHx_entry() //  [R1]
         { []
         }
     {offset
       ccuP5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuP6; else goto ccuP7;
       ccuP6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuP7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuP2_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds15_scsHx_info" {
     ds15_scsHx_info:
         const ds15_scsHx_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuP2() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuP2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuPa; else goto ccuP9;
       ccuPa: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuP9: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuP2_info" {
     block_ccuP2_info:
         const _ccuP2;
         const 0;
         const 30;
 },
 sat_scsHP_entry() //  [R1]
         { []
         }
     {offset
       ccuPh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuPi; else goto ccuPj;
       ccuPi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuPj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsHP_info" {
     sat_scsHP_info:
         const sat_scsHP_entry;
         const 1;
         const 16;
 },
 ds15_scsI3_entry() //  [R1]
         { []
         }
     {offset
       ccuPs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuPt; else goto ccuPu;
       ccuPt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuPu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuPp_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds15_scsI3_info" {
     ds15_scsI3_info:
         const ds15_scsI3_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuPp() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuPp: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuPx; else goto ccuPw;
       ccuPx: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuPw: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuPp_info" {
     block_ccuPp_info:
         const _ccuPp;
         const 0;
         const 30;
 },
 sat_scsIa_entry() //  [R1]
         { []
         }
     {offset
       ccuPH: // global
           _scsIa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuPI; else goto ccuPJ;
       ccuPJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccuPL; else goto ccuPK;
       ccuPL: // global
           HpAlloc = 16;
           goto ccuPI;
       ccuPI: // global
           R1 = _scsIa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuPK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsIa::P64;
           _scsGQ::P64 = P64[_scsIa::P64 + 16];
           _scsHt::P64 = P64[_scsIa::P64 + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _scsHt::P64;
           R2 = Hp - 6;
           R1 = _scsGQ::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsIa_info" {
     sat_scsIa_info:
         const sat_scsIa_entry;
         const 2;
         const 18;
 },
 ds13_scsIC_entry() //  [R1]
         { []
         }
     {offset
       ccuPV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuPW; else goto ccuPX;
       ccuPW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuPX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuPS_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds13_scsIC_info" {
     ds13_scsIC_info:
         const ds13_scsIC_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccuPS() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccuPS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuQ0; else goto ccuPZ;
       ccuQ0: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuPZ: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuPS_info" {
     block_ccuPS_info:
         const _ccuPS;
         const 0;
         const 30;
 },
 sat_scsJ1_entry() //  [R1]
         { []
         }
     {offset
       ccuQg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuQh; else goto ccuQi;
       ccuQh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuQi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuQe_info;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsJ1_info" {
     sat_scsJ1_info:
         const sat_scsJ1_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+72;
 },
 _ccuQe() //  [R1]
         { []
         }
     {offset
       ccuQe: // global
           R3 = lvl24_rcsnk_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccuQe_info" {
     block_ccuQe_info:
         const _ccuQe;
         const 0;
         const 4294967326;
         const ScsR0_srt+72;
 },
 sat_scsJ2_entry() //  [R1]
         { []
         }
     {offset
       ccuQm: // global
           _scsJ2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuQn; else goto ccuQo;
       ccuQo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuQq; else goto ccuQp;
       ccuQq: // global
           HpAlloc = 24;
           goto ccuQn;
       ccuQn: // global
           R1 = _scsJ2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuQp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsJ2::P64;
           _scsBJ::P64 = P64[_scsJ2::P64 + 16];
           I64[Hp - 16] = sat_scsJ1_info;
           P64[Hp] = _scsBJ::P64;
           R3 = Hp - 16;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsJ2_info" {
     sat_scsJ2_info:
         const sat_scsJ2_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+72;
 },
 sat_scsJ3_entry() //  [R1]
         { []
         }
     {offset
       ccuQr: // global
           _scsJ3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuQs; else goto ccuQt;
       ccuQt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuQv; else goto ccuQu;
       ccuQv: // global
           HpAlloc = 24;
           goto ccuQs;
       ccuQs: // global
           R1 = _scsJ3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuQu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsJ3::P64;
           _scsBJ::P64 = P64[_scsJ3::P64 + 16];
           _scsCa::P64 = P64[_scsJ3::P64 + 24];
           I64[Hp - 16] = sat_scsJ2_info;
           P64[Hp] = _scsBJ::P64;
           R3 = _scsCa::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsJ3_info" {
     sat_scsJ3_info:
         const sat_scsJ3_entry;
         const 2;
         const 141733920786;
         const ScsR0_srt+32;
 },
 System.Console.GetOpt.$wgetOpt'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       ccuQA: // global
           if ((Sp + -72) < SpLim) (likely: False) goto ccuQB; else goto ccuQC;
       ccuQB: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$wgetOpt'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuQC: // global
           I64[Sp - 24] = block_ccuzD_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucuXb; else goto ccuzE;
       ucuXb: // global
           call _ccuzD(R1) args: 0, res: 0, upd: 0;
       ccuzE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.$wgetOpt'_info" {
     System.Console.GetOpt.$wgetOpt'_info:
         const System.Console.GetOpt.$wgetOpt'_entry;
         const 0;
         const 519691042830;
         const 12884901911;
         const ScsR0_srt+32;
 },
 _ccuzD() //  [R1]
         { []
         }
     {offset
       ccuzD: // global
           if (R1 & 7 == 1) goto ccuQx; else goto ccuQy;
       ccuQx: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuQy: // global
           I64[Sp - 16] = block_ccuzJ_info;
           _scss0::P64 = R1;
           _scss2::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _scss2::P64;
           P64[Sp] = _scss0::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucuWH; else goto ccuzK;
       ucuWH: // global
           call _ccuzJ(R1) args: 0, res: 0, upd: 0;
       ccuzK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuzD_info" {
     block_ccuzD_info:
         const _ccuzD;
         const 2;
         const 519691042846;
         const ScsR0_srt+32;
 },
 _ccuzJ() //  [R1]
         { []
         }
     {offset
       ccuzJ: // global
           if (R1 & 7 == 1) goto ccuQI; else goto ccuR5;
       ccuQI: // global
           I64[Sp] = block_ccuzO_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto ucuWI; else goto ccuzP;
       ucuWI: // global
           call _ccuzO(R1) args: 0, res: 0, upd: 0;
       ccuzP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuR5: // global
           I64[Sp - 16] = block_ccuAz_info;
           _scss3::P64 = R1;
           _scst9::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _scst9::P64;
           P64[Sp] = _scss3::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucuWJ; else goto ccuAA;
       ucuWJ: // global
           call _ccuAz(R1) args: 0, res: 0, upd: 0;
       ccuAA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuzJ_info" {
     block_ccuzJ_info:
         const _ccuzJ;
         const 4;
         const 519691042846;
         const ScsR0_srt+32;
 },
 _ccuzO() //  [R1]
         { []
         }
     {offset
       ccuzO: // global
           _scsrY::P64 = P64[Sp + 32];
           _scss2::P64 = P64[Sp + 8];
           _ccuWx::P64 = R1 & 7;
           if (_ccuWx::P64 < 3) goto ucuWy; else goto ccuR0;
       ucuWy: // global
           if (_ccuWx::P64 < 2) goto ccuQM; else goto ccuQV;
       ccuQM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuQP; else goto ccuQO;
       ccuQP: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuQO: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = _scss2::P64;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuQV: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccuQY; else goto ccuQX;
       ccuQY: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuQX: // global
           I64[Hp - 144] = ds_scss6_info;
           P64[Hp - 128] = _scsrY::P64;
           P64[Hp - 120] = _scss2::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccuzU::P64 = Hp - 144;
           P64[Hp - 96] = _ccuzU::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccuzU::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccuzU::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuzU::P64;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuR0: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccuR3; else goto ccuR2;
       ccuR3: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuR2: // global
           _scssB::P64 = P64[R1 + 5];
           I64[Hp - 176] = ds_scssC_info;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           P64[Hp - 144] = R1;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccuA9::P64 = Hp - 176;
           P64[Hp - 120] = _ccuA9::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccuA9::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccuA9::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _ccuA9::P64;
           I64[Hp - 40] = sat_scssI_info;
           P64[Hp - 24] = _scssB::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R4 = Hp - 136;
           R3 = Hp - 112;
           R2 = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuzO_info" {
     block_ccuzO_info:
         const _ccuzO;
         const 388;
         const 4294967326;
         const ScsR0_srt+56;
 },
 _ccuAz() //  [R1]
         { []
         }
     {offset
       ccuAz: // global
           if (I64[R1 + 7] == 45) goto ccuRw; else goto ccuR8;
       ccuRw: // global
           _scst9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccuBf_info;
           R1 = _scst9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucuWL; else goto ccuBg;
       ucuWL: // global
           call _ccuBf(R1) args: 0, res: 0, upd: 0;
       ccuBg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuR8: // global
           I64[Sp + 8] = block_ccuAG_info;
           R1 = P64[Sp + 40];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucuWK; else goto ccuAH;
       ucuWK: // global
           call _ccuAG(R1) args: 0, res: 0, upd: 0;
       ccuAH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuAz_info" {
     block_ccuAz_info:
         const _ccuAz;
         const 6;
         const 519691042846;
         const ScsR0_srt+32;
 },
 _ccuBf() //  [R1]
         { []
         }
     {offset
       ccuBf: // global
           if (R1 & 7 == 1) goto ccuRz; else goto ccuRY;
       ccuRz: // global
           I64[Sp] = block_ccuBk_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto ucuWN; else goto ccuBl;
       ucuWN: // global
           call _ccuBk(R1) args: 0, res: 0, upd: 0;
       ccuBl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuRY: // global
           I64[Sp + 8] = block_ccuBU_info;
           _scsvl::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _scsvl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucuWO; else goto ccuBV;
       ucuWO: // global
           call _ccuBU(R1) args: 0, res: 0, upd: 0;
       ccuBV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuBf_info" {
     block_ccuBf_info:
         const _ccuBf;
         const 5;
         const 519691042846;
         const ScsR0_srt+32;
 },
 _ccuBk() //  [R1]
         { []
         }
     {offset
       ccuBk: // global
           _scsrY::P64 = P64[Sp + 40];
           _scss2::P64 = P64[Sp + 16];
           _scss3::P64 = P64[Sp + 8];
           _ccuWv::P64 = R1 & 7;
           if (_ccuWv::P64 < 3) goto ucuWA; else goto ccuRT;
       ucuWA: // global
           if (_ccuWv::P64 < 2) goto ucuWG; else goto ccuRJ;
       ucuWG: // global
           Sp = Sp + 24;
           call _ccuRD() args: 0, res: 0, upd: 0;
       ccuRJ: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccuRM; else goto ccuRL;
       ccuRM: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuRL: // global
           I64[Hp - 144] = ds4_scsui_info;
           P64[Hp - 128] = _scsrY::P64;
           P64[Hp - 120] = _scss2::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccuBq::P64 = Hp - 144;
           P64[Hp - 96] = _ccuBq::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccuBq::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccuBq::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scss3::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuBq::P64;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuRT: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuRW; else goto ccuRV;
       ccuRW: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuRV: // global
           _scsuN::P64 = P64[R1 + 5];
           I64[Hp - 184] = ds4_scsuO_info;
           P64[Hp - 168] = _scsrY::P64;
           P64[Hp - 160] = _scss2::P64;
           P64[Hp - 152] = R1;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuBF::P64 = Hp - 184;
           P64[Hp - 128] = _ccuBF::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuBF::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccuBF::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccuBF::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _scsuN::P64;
           P64[Hp - 24] = _scss3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuBk_info" {
     block_ccuBk_info:
         const _ccuBk;
         const 517;
         const 4294967326;
         const ScsR0_srt+56;
 },
 _ccuBU() //  [R1]
         { []
         }
     {offset
       ccuBU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccuS1; else goto ccuS0;
       ccuS1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuS0: // global
           _scsvo::I64 = I64[R1 + 7];
           if (_scsvo::I64 == 45) goto ccuTP; else goto ccuS3;
       ccuTP: // global
           Hp = Hp - 16;
           I64[Sp] = block_ccuHX_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto ucuWQ; else goto ccuHY;
       ucuWQ: // global
           call _ccuHX(R1) args: 0, res: 0, upd: 0;
       ccuHY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuS3: // global
           I64[Hp - 8] = go_scsvp_info;
           I64[Hp] = _scsvo::I64;
           I64[Sp - 8] = block_ccuDf_info;
           R2 = P64[Sp + 32];
           _scsvm::P64 = R1;
           R1 = Hp - 7;
           P64[Sp] = _scsvm::P64;
           Sp = Sp - 8;
           call go_scsvp_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuBU_info" {
     block_ccuBU_info:
         const _ccuBU;
         const 4;
         const 519691042846;
         const ScsR0_srt+32;
 },
 _ccuHX() //  [R1]
         { []
         }
     {offset
       ccuHX: // global
           if (R1 & 7 == 1) goto ccuTS; else goto ccuU2;
       ccuTS: // global
           I64[Sp] = block_ccuI2_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto ucuWY; else goto ccuI3;
       ucuWY: // global
           call _ccuI2(R1) args: 0, res: 0, upd: 0;
       ccuI3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuU2: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccuU5; else goto ccuU4;
       ccuU5: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuU4: // global
           I64[Hp - 64] = ds8_scsBF_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_sel_0_upd_info;
           _ccuIh::P64 = Hp - 64;
           P64[Hp - 24] = _ccuIh::P64;
           I64[Hp - 16] = getWith_scsBN_info;
           P64[Hp - 8] = P64[Sp + 32];
           _ccuIu::P64 = Hp - 40;
           P64[Hp] = _ccuIu::P64;
           I64[Sp - 24] = block_ccuU1_info;
           R2 = GHC.Base.eqString_closure+2;
           _scsBz::P64 = R1;
           _ccuIv::P64 = Hp - 15;
           R1 = _ccuIv::P64;
           P64[Sp - 16] = _ccuIv::P64;
           P64[Sp - 8] = _scsBz::P64;
           P64[Sp] = _ccuIu::P64;
           P64[Sp + 16] = _ccuIh::P64;
           Sp = Sp - 24;
           call getWith_scsBN_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuHX_info" {
     block_ccuHX_info:
         const _ccuHX;
         const 132;
         const 519691042846;
         const ScsR0_srt+32;
 },
 _ccuI2() //  [R1]
         { []
         }
     {offset
       ccuI2: // global
           _scss2::P64 = P64[Sp + 8];
           if (R1 & 7 == 3) goto ccuTX; else goto ccuTW;
       ccuTX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccuU0; else goto ccuTZ;
       ccuU0: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuTZ: // global
           _scsBB::P64 = P64[R1 + 5];
           I64[Hp - 24] = sat_scsBC_info;
           P64[Hp - 8] = _scss2::P64;
           P64[Hp] = _scsBB::P64;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 24;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuTW: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = _scss2::P64;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuI2_info" {
     block_ccuI2_info:
         const _ccuI2;
         const 900;
         const 30;
 },
 _ccuU1() //  [R1]
         { []
         }
     {offset
       ccuU1: // global
           if (R1 & 7 == 1) goto ccuW2; else goto ccuWa;
       ccuW2: // global
           _ccuIv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccuVZ_info;
           R2 = lvl19_rcsne_closure+2;
           R1 = _ccuIv::P64;
           Sp = Sp + 8;
           call getWith_scsBN_entry(R2, R1) args: 8, res: 8, upd: 8;
       ccuWa: // global
           P64[Sp + 8] = R1;
           Sp = Sp + 8;
           call _scsC9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccuU1_info" {
     block_ccuU1_info:
         const _ccuU1;
         const 7;
         const 519691042846;
         const ScsR0_srt+32;
 },
 _ccuVZ() //  [R1]
         { []
         }
     {offset
       ccuVZ: // global
           P64[Sp] = R1;
           call _scsC9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccuVZ_info" {
     block_ccuVZ_info:
         const _ccuVZ;
         const 6;
         const 519691042846;
         const ScsR0_srt+32;
 },
 _scsC9() //  []
         { []
         }
     {offset
       scsC9: // global
           I64[Sp - 8] = block_ccuKa_info;
           R2 = P64[Sp];
           Sp = Sp - 8;
           call poly_go_rcsnj_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccuKa() //  [R1]
         { []
         }
     {offset
       ccuKa: // global
           if (R1 & 7 == 1) goto ccuUb; else goto ccuUg;
       ccuUb: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccuUe; else goto ccuUd;
       ccuUe: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuUd: // global
           I64[Hp - 176] = ds9_scsCc_info;
           P64[Hp - 160] = P64[Sp + 48];
           P64[Hp - 152] = P64[Sp + 56];
           P64[Hp - 144] = P64[Sp + 32];
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccuKe::P64 = Hp - 176;
           P64[Hp - 120] = _ccuKe::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccuKe::P64;
           I64[Hp - 88] = sat_scsCu_info;
           P64[Hp - 72] = P64[Sp + 16];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccuKe::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuKe::P64;
           R4 = Hp - 136;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuUg: // global
           I64[Sp - 8] = block_ccuKC_info;
           _scsCI::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scsCI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuWZ; else goto ccuKD;
       ucuWZ: // global
           call _ccuKC(R1) args: 0, res: 0, upd: 0;
       ccuKD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuKa_info" {
     block_ccuKa_info:
         const _ccuKa;
         const 7;
         const 519691042846;
         const ScsR0_srt+32;
 },
 _ccuKC() //  [R1]
         { []
         }
     {offset
       ccuKC: // global
           if (R1 & 7 == 1) goto ccuUj; else goto ccuVS;
       ccuUj: // global
           I64[Sp + 16] = block_ccuKH_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ucuX0; else goto ccuKI;
       ucuX0: // global
           call _ccuKH(R1) args: 0, res: 0, upd: 0;
       ccuKI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuVS: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuVV; else goto ccuVU;
       ccuVV: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuVU: // global
           I64[Hp - 184] = ds13_scsIC_info;
           P64[Hp - 168] = P64[Sp + 56];
           P64[Hp - 160] = P64[Sp + 64];
           P64[Hp - 152] = P64[Sp + 40];
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuPO::P64 = Hp - 184;
           P64[Hp - 128] = _ccuPO::P64;
           I64[Hp - 120] = sat_scsJ3_info;
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccuPO::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccuPO::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuPO::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuKC_info" {
     block_ccuKC_info:
         const _ccuKC;
         const 8;
         const 519691042846;
         const ScsR0_srt+32;
 },
 _ccuKH() //  [R1]
         { []
         }
     {offset
       ccuKH: // global
           _ccuIh::P64 = P64[Sp + 32];
           _ccuWh::P64 = R1 & 7;
           if (_ccuWh::P64 < 3) goto ucuWC; else goto ccuVu;
       ucuWC: // global
           if (_ccuWh::P64 < 2) goto ccuUm; else goto ccuUO;
       ccuUm: // global
           I64[Sp] = block_ccuKM_info;
           _scsCM::P64 = P64[R1 + 7];
           R1 = _ccuIh::P64;
           P64[Sp + 32] = _scsCM::P64;
           if (R1 & 7 != 0) goto ucuX1; else goto ccuKN;
       ucuX1: // global
           call _ccuKM(R1) args: 0, res: 0, upd: 0;
       ccuKN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuUO: // global
           I64[Sp - 8] = block_ccuMb_info;
           _scsEu::P64 = P64[R1 + 6];
           _scsEv::P64 = P64[R1 + 14];
           R1 = _ccuIh::P64;
           P64[Sp] = _scsEv::P64;
           P64[Sp + 32] = _scsEu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuX2; else goto ccuMc;
       ucuX2: // global
           call _ccuMb(R1) args: 0, res: 0, upd: 0;
       ccuMc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuVu: // global
           I64[Sp] = block_ccuOh_info;
           _scsGQ::P64 = P64[R1 + 5];
           R1 = _ccuIh::P64;
           P64[Sp + 32] = _scsGQ::P64;
           if (R1 & 7 != 0) goto ucuX3; else goto ccuOi;
       ucuX3: // global
           call _ccuOh(R1) args: 0, res: 0, upd: 0;
       ccuOi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuKH_info" {
     block_ccuKH_info:
         const _ccuKH;
         const 6;
         const 47244640286;
         const ScsR0_srt+56;
 },
 _ccuKM() //  [R1]
         { []
         }
     {offset
       ccuKM: // global
           I64[Sp] = block_ccuKR_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ucuX4; else goto ccuKS;
       ucuX4: // global
           call _ccuKR(R1) args: 0, res: 0, upd: 0;
       ccuKS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuKM_info" {
     block_ccuKM_info:
         const _ccuKM;
         const 6;
         const 38654705694;
         const ScsR0_srt+56;
 },
 _ccuKR() //  [R1]
         { []
         }
     {offset
       ccuKR: // global
           if (R1 & 7 == 1) goto ccuUu; else goto ccuUz;
       ccuUu: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccuUx; else goto ccuUw;
       ccuUx: // global
           HpAlloc = 160;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuUw: // global
           I64[Hp - 152] = ds11_scsCR_info;
           P64[Hp - 136] = P64[Sp + 40];
           P64[Hp - 128] = P64[Sp + 48];
           P64[Hp - 120] = P64[Sp + 24];
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccuKW::P64 = Hp - 152;
           P64[Hp - 96] = _ccuKW::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccuKW::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccuKW::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccuKW::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = Hp - 40;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuUz: // global
           I64[Sp] = block_ccuLb_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucuX5; else goto ccuLc;
       ucuX5: // global
           call _ccuLb(R1) args: 0, res: 0, upd: 0;
       ccuLc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuKR_info" {
     block_ccuKR_info:
         const _ccuKR;
         const 6;
         const 38654705694;
         const ScsR0_srt+56;
 },
 _ccuLb() //  [R1]
         { []
         }
     {offset
       ccuLb: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccuUC; else goto ccuUB;
       ccuUC: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuUB: // global
           _scsrX::P64 = P64[Sp + 40];
           _scsrY::P64 = P64[Sp + 48];
           _scss2::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 61) goto ccuUM; else goto ccuUH;
       ccuUM: // global
           I64[Hp - 176] = ds15_scsDX_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           P64[Hp - 144] = _scss2::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccuLF::P64 = Hp - 176;
           P64[Hp - 120] = _ccuLF::P64;
           I64[Hp - 112] = sat_scsEm_info;
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 112;
           P64[Hp - 72] = Hp - 136;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccuLF::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccuLF::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuLF::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuUH: // global
           I64[Hp - 176] = ds15_scsDr_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           P64[Hp - 144] = _scss2::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccuLi::P64 = Hp - 176;
           P64[Hp - 120] = _ccuLi::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccuLi::P64;
           I64[Hp - 88] = sat_scsDJ_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccuLi::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuLi::P64;
           R4 = Hp - 136;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuLb_info" {
     block_ccuLb_info:
         const _ccuLb;
         const 518;
         const 38654705694;
         const ScsR0_srt+56;
 },
 _ccuMb() //  [R1]
         { []
         }
     {offset
       ccuMb: // global
           I64[Sp] = block_ccuMg_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ucuX6; else goto ccuMh;
       ucuX6: // global
           call _ccuMg(R1) args: 0, res: 0, upd: 0;
       ccuMh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuMb_info" {
     block_ccuMb_info:
         const _ccuMb;
         const 7;
         const 12884901918;
         const ScsR0_srt+56;
 },
 _ccuMg() //  [R1]
         { []
         }
     {offset
       ccuMg: // global
           if (R1 & 7 == 1) goto ccuUS; else goto ccuVd;
       ccuUS: // global
           I64[Sp] = block_ccuMl_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto ucuX7; else goto ccuMm;
       ucuX7: // global
           call _ccuMl(R1) args: 0, res: 0, upd: 0;
       ccuMm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuVd: // global
           I64[Sp + 8] = block_ccuNy_info;
           _scsFK::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _scsFK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucuX8; else goto ccuNz;
       ucuX8: // global
           call _ccuNy(R1) args: 0, res: 0, upd: 0;
       ccuNz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuMg_info" {
     block_ccuMg_info:
         const _ccuMg;
         const 7;
         const 12884901918;
         const ScsR0_srt+56;
 },
 _ccuMl() //  [R1]
         { []
         }
     {offset
       ccuMl: // global
           _scsrX::P64 = P64[Sp + 48];
           _scsrY::P64 = P64[Sp + 56];
           if (R1 & 7 == 1) goto ccuUY; else goto ccuV8;
       ccuUY: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccuV1; else goto ccuV0;
       ccuV1: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuV0: // global
           I64[Hp - 176] = ds12_scsEB_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuMq::P64 = Hp - 176;
           P64[Hp - 128] = _ccuMq::P64;
           I64[Hp - 120] = sat_scsF3_info;
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 8];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccuMq::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccuMq::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuMq::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuV8: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuVb; else goto ccuVa;
       ccuVb: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuVa: // global
           _scsFb::P64 = P64[R1 + 6];
           _scsFc::P64 = P64[R1 + 14];
           I64[Hp - 184] = ds12_scsFd_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scsFc::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuNj::P64 = Hp - 184;
           P64[Hp - 128] = _ccuNj::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuNj::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccuNj::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccuNj::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = _scsFb::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuMl_info" {
     block_ccuMl_info:
         const _ccuMl;
         const 647;
         const 12884901918;
         const ScsR0_srt+56;
 },
 _ccuNy() //  [R1]
         { []
         }
     {offset
       ccuNy: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuVg; else goto ccuVf;
       ccuVg: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuVf: // global
           _scsrX::P64 = P64[Sp + 40];
           _scsrY::P64 = P64[Sp + 48];
           _scss2::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 61) goto ccuVs; else goto ccuVl;
       ccuVs: // global
           I64[Hp - 184] = ds15_scsGk_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuO2::P64 = Hp - 184;
           P64[Hp - 128] = _ccuO2::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuO2::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccuO2::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccuO2::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuVl: // global
           I64[Hp - 184] = ds15_scsFO_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuNF::P64 = Hp - 184;
           P64[Hp - 128] = _ccuNF::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuNF::P64;
           I64[Hp - 96] = sat_scsG6_info;
           P64[Hp - 80] = P64[Sp + 8];
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           I64[Hp - 48] = stg_sel_1_upd_info;
           P64[Hp - 32] = _ccuNF::P64;
           I64[Hp - 24] = stg_sel_0_upd_info;
           P64[Hp - 8] = _ccuNF::P64;
           _ccuNS::P64 = Hp - 144;
           _ccuVh::P64 = Hp - 70;
           _ccuVi::P64 = Hp - 48;
           _ccuVj::P64 = Hp - 24;
           Hp = Hp - 8;
           R4 = _ccuNS::P64;
           R3 = _ccuVh::P64;
           R2 = _ccuVi::P64;
           R1 = _ccuVj::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuNy_info" {
     block_ccuNy_info:
         const _ccuNy;
         const 6;
         const 4294967326;
         const ScsR0_srt+56;
 },
 _ccuOh() //  [R1]
         { []
         }
     {offset
       ccuOh: // global
           I64[Sp] = block_ccuOm_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ucuX9; else goto ccuOn;
       ucuX9: // global
           call _ccuOm(R1) args: 0, res: 0, upd: 0;
       ccuOn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuOh_info" {
     block_ccuOh_info:
         const _ccuOh;
         const 134;
         const 4294967326;
         const ScsR0_srt+56;
 },
 _ccuOm() //  [R1]
         { []
         }
     {offset
       ccuOm: // global
           if (R1 & 7 == 1) goto ccuVy; else goto ccuVD;
       ccuVy: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccuVB; else goto ccuVA;
       ccuVB: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuVA: // global
           I64[Hp - 176] = ds12_scsGW_info;
           P64[Hp - 160] = P64[Sp + 40];
           P64[Hp - 152] = P64[Sp + 48];
           P64[Hp - 144] = P64[Sp + 24];
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccuOr::P64 = Hp - 176;
           P64[Hp - 120] = _ccuOr::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccuOr::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccuOr::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _ccuOr::P64;
           I64[Hp - 40] = sat_scsH2_info;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R4 = Hp - 136;
           R3 = Hp - 112;
           R2 = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuVD: // global
           I64[Sp] = block_ccuOR_info;
           _scsHt::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _scsHt::P64;
           if (R1 & 7 != 0) goto ucuXa; else goto ccuOS;
       ucuXa: // global
           call _ccuOR(R1) args: 0, res: 0, upd: 0;
       ccuOS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuOm_info" {
     block_ccuOm_info:
         const _ccuOm;
         const 134;
         const 4294967326;
         const ScsR0_srt+56;
 },
 _ccuOR() //  [R1]
         { []
         }
     {offset
       ccuOR: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuVG; else goto ccuVF;
       ccuVG: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuVF: // global
           _scsrX::P64 = P64[Sp + 40];
           _scsrY::P64 = P64[Sp + 48];
           _scss2::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 61) goto ccuVN; else goto ccuVL;
       ccuVN: // global
           I64[Hp - 184] = ds15_scsI3_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuPl::P64 = Hp - 184;
           P64[Hp - 128] = _ccuPl::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuPl::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccuPl::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccuPl::P64;
           I64[Hp - 48] = sat_scsIa_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuVL: // global
           I64[Hp - 184] = ds15_scsHx_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuOY::P64 = Hp - 184;
           P64[Hp - 128] = _ccuOY::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuOY::P64;
           I64[Hp - 96] = sat_scsHP_info;
           P64[Hp - 80] = P64[Sp + 8];
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           I64[Hp - 48] = stg_sel_1_upd_info;
           P64[Hp - 32] = _ccuOY::P64;
           I64[Hp - 24] = stg_sel_0_upd_info;
           P64[Hp - 8] = _ccuOY::P64;
           _ccuPb::P64 = Hp - 144;
           _ccuVH::P64 = Hp - 70;
           _ccuVI::P64 = Hp - 48;
           _ccuVJ::P64 = Hp - 24;
           Hp = Hp - 8;
           R4 = _ccuPb::P64;
           R3 = _ccuVH::P64;
           R2 = _ccuVI::P64;
           R1 = _ccuVJ::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuOR_info" {
     block_ccuOR_info:
         const _ccuOR;
         const 6;
         const 4294967326;
         const ScsR0_srt+56;
 },
 _ccuDf() //  [R1]
         { []
         }
     {offset
       ccuDf: // global
           I64[Sp - 8] = block_ccuDj_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call poly_go1_rcsnl_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuDf_info" {
     block_ccuDf_info:
         const _ccuDf;
         const 5;
         const 244813135902;
         const ScsR0_srt+32;
 },
 _ccuDj() //  [R1]
         { []
         }
     {offset
       ccuDj: // global
           if (R1 & 7 == 1) goto ccuS7; else goto ccuSw;
       ccuS7: // global
           I64[Sp + 8] = block_ccuDn_info;
           R1 = P64[Sp + 32];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucuWR; else goto ccuDo;
       ucuWR: // global
           call _ccuDn(R1) args: 0, res: 0, upd: 0;
       ccuDo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuSw: // global
           I64[Sp - 8] = block_ccuE0_info;
           _scswU::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scswU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuWS; else goto ccuE1;
       ucuWS: // global
           call _ccuE0(R1) args: 0, res: 0, upd: 0;
       ccuE1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuDj_info" {
     block_ccuDj_info:
         const _ccuDj;
         const 6;
         const 244813135902;
         const ScsR0_srt+32;
 },
 _ccuDn() //  [R1]
         { []
         }
     {offset
       ccuDn: // global
           _scsrX::P64 = P64[Sp + 32];
           _scsrY::P64 = P64[Sp + 40];
           _scss2::P64 = P64[Sp + 16];
           _scsvm::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccuSg; else goto ccuSr;
       ccuSg: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto ccuSj; else goto ccuSi;
       ccuSj: // global
           HpAlloc = 208;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuSi: // global
           I64[Hp - 200] = ds8_scsvM_info;
           P64[Hp - 184] = _scsrX::P64;
           P64[Hp - 176] = _scsrY::P64;
           P64[Hp - 168] = _scss2::P64;
           I64[Hp - 160] = stg_sel_3_upd_info;
           _ccuDs::P64 = Hp - 200;
           P64[Hp - 144] = _ccuDs::P64;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _ccuDs::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _scsvm::P64;
           P64[Hp - 96] = GHC.Types.[]_closure+1;
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = lvl21_rcsng_closure+1;
           P64[Hp - 72] = Hp - 110;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 86;
           P64[Hp - 48] = Hp - 136;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccuDs::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuDs::P64;
           R4 = Hp - 160;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuSr: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto ccuSu; else goto ccuSt;
       ccuSu: // global
           HpAlloc = 216;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuSt: // global
           I64[Hp - 208] = ds8_scswl_info;
           P64[Hp - 192] = _scsrX::P64;
           P64[Hp - 184] = _scsrY::P64;
           P64[Hp - 176] = _scss2::P64;
           P64[Hp - 168] = R1;
           I64[Hp - 160] = stg_sel_3_upd_info;
           _ccuDH::P64 = Hp - 208;
           P64[Hp - 144] = _ccuDH::P64;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _ccuDH::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _scsvm::P64;
           P64[Hp - 96] = GHC.Types.[]_closure+1;
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = lvl21_rcsng_closure+1;
           P64[Hp - 72] = Hp - 110;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 86;
           P64[Hp - 48] = Hp - 136;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccuDH::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuDH::P64;
           R4 = Hp - 160;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuDn_info" {
     block_ccuDn_info:
         const _ccuDn;
         const 261;
         const 4294967326;
         const ScsR0_srt+56;
 },
 _ccuE0() //  [R1]
         { []
         }
     {offset
       ccuE0: // global
           if (R1 & 7 == 1) goto ccuSz; else goto ccuTL;
       ccuSz: // global
           I64[Sp + 16] = block_ccuE5_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ucuWT; else goto ccuE6;
       ucuWT: // global
           call _ccuE5(R1) args: 0, res: 0, upd: 0;
       ccuE6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuTL: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuTO; else goto ccuTN;
       ccuTO: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuTN: // global
           I64[Hp - 184] = ds12_scsAZ_info;
           P64[Hp - 168] = P64[Sp + 48];
           P64[Hp - 160] = P64[Sp + 56];
           P64[Hp - 152] = P64[Sp + 32];
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuHf::P64 = Hp - 184;
           P64[Hp - 128] = _ccuHf::P64;
           I64[Hp - 120] = sat_scsBr_info;
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccuHf::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccuHf::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuHf::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuE0_info" {
     block_ccuE0_info:
         const _ccuE0;
         const 7;
         const 244813135902;
         const ScsR0_srt+32;
 },
 _ccuE5() //  [R1]
         { []
         }
     {offset
       ccuE5: // global
           _scsvl::P64 = P64[Sp + 24];
           _ccuWp::P64 = R1 & 7;
           if (_ccuWp::P64 < 3) goto ucuWB; else goto ccuTv;
       ucuWB: // global
           if (_ccuWp::P64 < 2) goto ccuSC; else goto ccuSX;
       ccuSC: // global
           I64[Sp + 8] = block_ccuEa_info;
           _scswY::P64 = P64[R1 + 7];
           R1 = _scsvl::P64;
           P64[Sp + 24] = _scswY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucuWU; else goto ccuEb;
       ucuWU: // global
           call _ccuEa(R1) args: 0, res: 0, upd: 0;
       ccuEb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuSX: // global
           I64[Sp - 8] = block_ccuEN_info;
           _scsy4::P64 = P64[R1 + 6];
           _scsy5::P64 = P64[R1 + 14];
           R1 = _scsvl::P64;
           P64[Sp] = _scsy5::P64;
           P64[Sp + 24] = _scsy4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuWV; else goto ccuEO;
       ucuWV: // global
           call _ccuEN(R1) args: 0, res: 0, upd: 0;
       ccuEO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuTv: // global
           I64[Sp + 8] = block_ccuGh_info;
           _scszP::P64 = P64[R1 + 5];
           R1 = _scsvl::P64;
           P64[Sp + 24] = _scszP::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucuWW; else goto ccuGi;
       ucuWW: // global
           call _ccuGh(R1) args: 0, res: 0, upd: 0;
       ccuGi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuE5_info" {
     block_ccuE5_info:
         const _ccuE5;
         const 5;
         const 12884901918;
         const ScsR0_srt+56;
 },
 _ccuEa() //  [R1]
         { []
         }
     {offset
       ccuEa: // global
           _scsrX::P64 = P64[Sp + 24];
           _scsrY::P64 = P64[Sp + 32];
           _scss2::P64 = P64[Sp + 8];
           _scswY::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto ccuSJ; else goto ccuSS;
       ccuSJ: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccuSM; else goto ccuSL;
       ccuSM: // global
           HpAlloc = 160;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuSL: // global
           I64[Hp - 152] = ds10_scsx0_info;
           P64[Hp - 136] = _scsrX::P64;
           P64[Hp - 128] = _scsrY::P64;
           P64[Hp - 120] = _scss2::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccuEf::P64 = Hp - 152;
           P64[Hp - 96] = _ccuEf::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccuEf::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccuEf::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccuEf::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scswY::P64;
           P64[Hp] = Hp - 40;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuSS: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccuSV; else goto ccuSU;
       ccuSV: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuSU: // global
           I64[Hp - 160] = ds10_scsxx_info;
           P64[Hp - 144] = _scsrX::P64;
           P64[Hp - 136] = _scsrY::P64;
           P64[Hp - 128] = _scss2::P64;
           P64[Hp - 120] = R1;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccuEu::P64 = Hp - 160;
           P64[Hp - 96] = _ccuEu::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccuEu::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccuEu::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccuEu::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scswY::P64;
           P64[Hp] = Hp - 40;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuEa_info" {
     block_ccuEa_info:
         const _ccuEa;
         const 4;
         const 4294967326;
         const ScsR0_srt+56;
 },
 _ccuEN() //  [R1]
         { []
         }
     {offset
       ccuEN: // global
           _scss2::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto ccuT0; else goto ccuTq;
       ccuT0: // global
           I64[Sp] = block_ccuES_info;
           R1 = _scss2::P64;
           if (R1 & 7 != 0) goto ucuWX; else goto ccuET;
       ucuWX: // global
           call _ccuES(R1) args: 0, res: 0, upd: 0;
       ccuET: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuTq: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuTt; else goto ccuTs;
       ccuTt: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuTs: // global
           I64[Hp - 184] = ds11_scszj_info;
           P64[Hp - 168] = P64[Sp + 40];
           P64[Hp - 160] = P64[Sp + 48];
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuG2::P64 = Hp - 184;
           P64[Hp - 128] = _ccuG2::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuG2::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccuG2::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccuG2::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuEN_info" {
     block_ccuEN_info:
         const _ccuEN;
         const 6;
         const 12884901918;
         const ScsR0_srt+56;
 },
 _ccuES() //  [R1]
         { []
         }
     {offset
       ccuES: // global
           _scsrX::P64 = P64[Sp + 40];
           _scsrY::P64 = P64[Sp + 48];
           if (R1 & 7 == 1) goto ccuT6; else goto ccuTg;
       ccuT6: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccuT9; else goto ccuT8;
       ccuT9: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuT8: // global
           I64[Hp - 176] = ds11_scsy8_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuEX::P64 = Hp - 176;
           P64[Hp - 128] = _ccuEX::P64;
           I64[Hp - 120] = sat_scsyB_info;
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 8];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccuEX::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccuEX::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuEX::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuTg: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuTj; else goto ccuTi;
       ccuTj: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuTi: // global
           _scsyJ::P64 = P64[R1 + 6];
           _scsyK::P64 = P64[R1 + 14];
           I64[Hp - 184] = ds11_scsyL_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scsyK::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuFN::P64 = Hp - 184;
           P64[Hp - 128] = _ccuFN::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuFN::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccuFN::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccuFN::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _scsyJ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuES_info" {
     block_ccuES_info:
         const _ccuES;
         const 262;
         const 12884901918;
         const ScsR0_srt+56;
 },
 _ccuGh() //  [R1]
         { []
         }
     {offset
       ccuGh: // global
           _scsrX::P64 = P64[Sp + 24];
           _scsrY::P64 = P64[Sp + 32];
           _scss2::P64 = P64[Sp + 8];
           _scszP::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto ccuTy; else goto ccuTD;
       ccuTy: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccuTB; else goto ccuTA;
       ccuTB: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuTA: // global
           I64[Hp - 176] = ds11_scszS_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           P64[Hp - 144] = _scss2::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccuGm::P64 = Hp - 176;
           P64[Hp - 120] = _ccuGm::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccuGm::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccuGm::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _ccuGm::P64;
           I64[Hp - 40] = sat_scszY_info;
           P64[Hp - 24] = _scszP::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R4 = Hp - 136;
           R3 = Hp - 112;
           R2 = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuTD: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuTG; else goto ccuTF;
       ccuTG: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuTF: // global
           I64[Hp - 184] = ds11_scsAq_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuGM::P64 = Hp - 184;
           P64[Hp - 128] = _ccuGM::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuGM::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccuGM::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccuGM::P64;
           I64[Hp - 48] = sat_scsAx_info;
           P64[Hp - 32] = _scszP::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuGh_info" {
     block_ccuGh_info:
         const _ccuGh;
         const 4;
         const 4294967326;
         const ScsR0_srt+56;
 },
 _ccuAG() //  [R1]
         { []
         }
     {offset
       ccuAG: // global
           _scsrY::P64 = P64[Sp + 40];
           _scss2::P64 = P64[Sp + 16];
           _scss3::P64 = P64[Sp + 8];
           _ccuWw::P64 = R1 & 7;
           if (_ccuWw::P64 < 3) goto ucuWz; else goto ccuRs;
       ucuWz: // global
           if (_ccuWw::P64 < 2) goto ucuWD; else goto ccuRi;
       ucuWD: // global
           Sp = Sp + 24;
           call _ccuRD() args: 0, res: 0, upd: 0;
       ccuRi: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccuRl; else goto ccuRk;
       ccuRl: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuRk: // global
           I64[Hp - 144] = ds4_scste_info;
           P64[Hp - 128] = _scsrY::P64;
           P64[Hp - 120] = _scss2::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccuAM::P64 = Hp - 144;
           P64[Hp - 96] = _ccuAM::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccuAM::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccuAM::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scss3::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuAM::P64;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuRs: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuRv; else goto ccuRu;
       ccuRv: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuRu: // global
           _scstJ::P64 = P64[R1 + 5];
           I64[Hp - 184] = ds4_scstK_info;
           P64[Hp - 168] = _scsrY::P64;
           P64[Hp - 160] = _scss2::P64;
           P64[Hp - 152] = R1;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuB1::P64 = Hp - 184;
           P64[Hp - 128] = _ccuB1::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuB1::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccuB1::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccuB1::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _scstJ::P64;
           P64[Hp - 24] = _scss3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccuAG_info" {
     block_ccuAG_info:
         const _ccuAG;
         const 517;
         const 4294967326;
         const ScsR0_srt+56;
 },
 _ccuRD() //  []
         { []
         }
     {offset
       ccuRD: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[Sp];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.442890672 UTC

[section ""data" . System.Console.GetOpt.getOpt'_closure" {
     System.Console.GetOpt.getOpt'_closure:
         const System.Console.GetOpt.getOpt'_info;
         const 0;
 },
 System.Console.GetOpt.getOpt'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       ccv9l: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccv9m; else goto ccv9n;
       ccv9m: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.getOpt'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccv9n: // global
           I64[Sp - 8] = block_ccv9i_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.getOpt'_info" {
     System.Console.GetOpt.getOpt'_info:
         const System.Console.GetOpt.getOpt'_entry;
         const 0;
         const 73014444046;
         const 12884901911;
         const ScsR0_srt+56;
 },
 _ccv9i() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccv9i: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccv9q; else goto ccv9p;
       ccv9q: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
       ccv9p: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccv9i_info" {
     block_ccv9i_info:
         const _ccv9i;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.45036995 UTC

[section ""data" . System.Console.GetOpt.getOpt_closure" {
     System.Console.GetOpt.getOpt_closure:
         const System.Console.GetOpt.getOpt_info;
         const 0;
 },
 ds_scsJq_entry() //  [R1]
         { []
         }
     {offset
       ccv9L: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccv9M; else goto ccv9N;
       ccv9M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccv9N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccv9I_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_scsJq_info" {
     ds_scsJq_info:
         const ds_scsJq_entry;
         const 3;
         const 4294967311;
         const ScsR0_srt+56;
 },
 _ccv9I() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccv9I: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccv9Q; else goto ccv9P;
       ccv9Q: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccv9P: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccv9I_info" {
     block_ccv9I_info:
         const _ccv9I;
         const 0;
         const 30;
 },
 sat_scsJN_entry() //  [R1]
         { []
         }
     {offset
       ccva4: // global
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.errUnrec_closure+1;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scsJN_info" {
     sat_scsJN_info:
         const sat_scsJN_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+48;
 },
 sat_scsJO_entry() //  [R1]
         { []
         }
     {offset
       ccva7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccva8; else goto ccva9;
       ccva8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccva9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccv9V_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucvad; else goto ccv9W;
       ucvad: // global
           call _ccv9V(R1) args: 0, res: 0, upd: 0;
       ccv9W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scsJO_info" {
     sat_scsJO_info:
         const sat_scsJO_entry;
         const 1;
         const 4294967312;
         const ScsR0_srt+48;
 },
 _ccv9V() //  [R1]
         { []
         }
     {offset
       ccv9V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccvac; else goto ccvab;
       ccvac: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccvab: // global
           _scsJL::P64 = P64[R1 + 23];
           _scsJM::P64 = P64[R1 + 31];
           I64[Hp - 16] = sat_scsJN_info;
           P64[Hp] = _scsJL::P64;
           R3 = Hp - 16;
           R2 = _scsJM::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccv9V_info" {
     block_ccv9V_info:
         const _ccv9V;
         const 0;
         const 4294967326;
         const ScsR0_srt+48;
 },
 System.Console.GetOpt.getOpt_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       ccvah: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccval; else goto ccvak;
       ccval: // global
           HpAlloc = 144;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.getOpt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvak: // global
           I64[Hp - 136] = ds_scsJq_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           I64[Hp - 96] = sat_scsJO_info;
           _ccv9E::P64 = Hp - 136;
           P64[Hp - 80] = _ccv9E::P64;
           I64[Hp - 72] = stg_sel_1_upd_info;
           P64[Hp - 56] = _ccv9E::P64;
           I64[Hp - 48] = stg_sel_0_upd_info;
           P64[Hp - 32] = _ccv9E::P64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.getOpt_info" {
     System.Console.GetOpt.getOpt_info:
         const System.Console.GetOpt.getOpt_entry;
         const 0;
         const 287762808846;
         const 12884901911;
         const ScsR0_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.462668707 UTC

[section ""cstring" . System.Console.GetOpt.$trModule4_bytes" {
     System.Console.GetOpt.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.464357783 UTC

[section ""data" . System.Console.GetOpt.$trModule3_closure" {
     System.Console.GetOpt.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.466375023 UTC

[section ""cstring" . System.Console.GetOpt.$trModule2_bytes" {
     System.Console.GetOpt.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.468061974 UTC

[section ""data" . System.Console.GetOpt.$trModule1_closure" {
     System.Console.GetOpt.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.469759831 UTC

[section ""data" . System.Console.GetOpt.$trModule_closure" {
     System.Console.GetOpt.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Console.GetOpt.$trModule3_closure+1;
         const System.Console.GetOpt.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.47156823 UTC

[section ""data" . $krep_rcsnm_closure" {
     $krep_rcsnm_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.473341546 UTC

[section ""data" . $krep1_rcsnn_closure" {
     $krep1_rcsnn_closure:
         const :_con_info;
         const $krep_rcsnm_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.475090415 UTC

[section ""data" . $krep2_rcsno_closure" {
     $krep2_rcsno_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_rcsnn_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.476822897 UTC

[section ""data" . $krep3_rcsnp_closure" {
     $krep3_rcsnp_closure:
         const :_con_info;
         const $krep2_rcsno_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.479247673 UTC

[section ""data" . $krep4_rcsnq_closure" {
     $krep4_rcsnq_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep3_rcsnp_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.481030754 UTC

[section ""data" . $krep5_rcsnr_closure" {
     $krep5_rcsnr_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep3_rcsnp_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.482800577 UTC

[section ""data" . $krep6_rcsns_closure" {
     $krep6_rcsns_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.485115491 UTC

[section ""data" . $krep7_rcsnt_closure" {
     $krep7_rcsnt_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep6_rcsns_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.486922725 UTC

[section ""data" . $krep8_rcsnu_closure" {
     $krep8_rcsnu_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rcsnq_closure+1;
         const $krep6_rcsns_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.488645479 UTC

[section ""cstring" . System.Console.GetOpt.$tcArgOrder2_bytes" {
     System.Console.GetOpt.$tcArgOrder2_bytes:
         I8[] [65,114,103,79,114,100,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.49087906 UTC

[section ""data" . System.Console.GetOpt.$tcArgOrder1_closure" {
     System.Console.GetOpt.$tcArgOrder1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcArgOrder2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.49259848 UTC

[section ""data" . System.Console.GetOpt.$tcArgOrder_closure" {
     System.Console.GetOpt.$tcArgOrder_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcArgOrder1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 2821249393238363172;
         const 5857765806309969278;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.49438687 UTC

[section ""data" . $krep9_rcsnv_closure" {
     $krep9_rcsnv_closure:
         const :_con_info;
         const $krep6_rcsns_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.496093418 UTC

[section ""data" . System.Console.GetOpt.$tc'Permute1_closure" {
     System.Console.GetOpt.$tc'Permute1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcArgOrder_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.497800594 UTC

[section ""cstring" . System.Console.GetOpt.$tc'RequireOrder2_bytes" {
     System.Console.GetOpt.$tc'RequireOrder2_bytes:
         I8[] [39,82,101,113,117,105,114,101,79,114,100,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.499458634 UTC

[section ""data" . System.Console.GetOpt.$tc'RequireOrder1_closure" {
     System.Console.GetOpt.$tc'RequireOrder1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'RequireOrder2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.50171854 UTC

[section ""data" . System.Console.GetOpt.$tc'RequireOrder_closure" {
     System.Console.GetOpt.$tc'RequireOrder_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'RequireOrder1_closure+1;
         const System.Console.GetOpt.$tc'Permute1_closure+1;
         const 16641478699741903091;
         const 17241976392395699271;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.503553142 UTC

[section ""cstring" . System.Console.GetOpt.$tc'Permute3_bytes" {
     System.Console.GetOpt.$tc'Permute3_bytes:
         I8[] [39,80,101,114,109,117,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.505231131 UTC

[section ""data" . System.Console.GetOpt.$tc'Permute2_closure" {
     System.Console.GetOpt.$tc'Permute2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'Permute3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.507041231 UTC

[section ""data" . System.Console.GetOpt.$tc'Permute_closure" {
     System.Console.GetOpt.$tc'Permute_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'Permute2_closure+1;
         const System.Console.GetOpt.$tc'Permute1_closure+1;
         const 16188869008381252759;
         const 7304126484053682933;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.508872477 UTC

[section ""data" . System.Console.GetOpt.$tc'ReturnInOrder1_closure" {
     System.Console.GetOpt.$tc'ReturnInOrder1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rcsnt_closure+4;
         const System.Console.GetOpt.$tc'Permute1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.511140664 UTC

[section ""cstring" . System.Console.GetOpt.$tc'ReturnInOrder3_bytes" {
     System.Console.GetOpt.$tc'ReturnInOrder3_bytes:
         I8[] [39,82,101,116,117,114,110,73,110,79,114,100,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.512980804 UTC

[section ""data" . System.Console.GetOpt.$tc'ReturnInOrder2_closure" {
     System.Console.GetOpt.$tc'ReturnInOrder2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'ReturnInOrder3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.515263494 UTC

[section ""data" . System.Console.GetOpt.$tc'ReturnInOrder_closure" {
     System.Console.GetOpt.$tc'ReturnInOrder_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'ReturnInOrder2_closure+1;
         const System.Console.GetOpt.$tc'ReturnInOrder1_closure+4;
         const 11429107017830306662;
         const 977062333259332084;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.517137468 UTC

[section ""cstring" . System.Console.GetOpt.$tcArgDescr2_bytes" {
     System.Console.GetOpt.$tcArgDescr2_bytes:
         I8[] [65,114,103,68,101,115,99,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.518882867 UTC

[section ""data" . System.Console.GetOpt.$tcArgDescr1_closure" {
     System.Console.GetOpt.$tcArgDescr1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcArgDescr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.52070456 UTC

[section ""data" . System.Console.GetOpt.$tcArgDescr_closure" {
     System.Console.GetOpt.$tcArgDescr_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcArgDescr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5371299798435897528;
         const 4777542234116424858;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.522630288 UTC

[section ""data" . $krep10_rcsnw_closure" {
     $krep10_rcsnw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcArgDescr_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.524340578 UTC

[section ""data" . System.Console.GetOpt.$tc'NoArg1_closure" {
     System.Console.GetOpt.$tc'NoArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcsns_closure+2;
         const $krep10_rcsnw_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.526543583 UTC

[section ""cstring" . System.Console.GetOpt.$tc'NoArg3_bytes" {
     System.Console.GetOpt.$tc'NoArg3_bytes:
         I8[] [39,78,111,65,114,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.528251079 UTC

[section ""data" . System.Console.GetOpt.$tc'NoArg2_closure" {
     System.Console.GetOpt.$tc'NoArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'NoArg3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.530099877 UTC

[section ""data" . System.Console.GetOpt.$tc'NoArg_closure" {
     System.Console.GetOpt.$tc'NoArg_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'NoArg2_closure+1;
         const System.Console.GetOpt.$tc'NoArg1_closure+4;
         const 4447437708857855473;
         const 9938854276741266046;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.532028803 UTC

[section ""data" . $krep11_rcsnx_closure" {
     $krep11_rcsnx_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep10_rcsnw_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.533858661 UTC

[section ""data" . System.Console.GetOpt.$tc'OptArg1_closure" {
     System.Console.GetOpt.$tc'OptArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rcsnu_closure+4;
         const $krep11_rcsnx_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.535643971 UTC

[section ""cstring" . System.Console.GetOpt.$tc'OptArg3_bytes" {
     System.Console.GetOpt.$tc'OptArg3_bytes:
         I8[] [39,79,112,116,65,114,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.537417557 UTC

[section ""data" . System.Console.GetOpt.$tc'OptArg2_closure" {
     System.Console.GetOpt.$tc'OptArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'OptArg3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.539797297 UTC

[section ""data" . System.Console.GetOpt.$tc'OptArg_closure" {
     System.Console.GetOpt.$tc'OptArg_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'OptArg2_closure+1;
         const System.Console.GetOpt.$tc'OptArg1_closure+4;
         const 2223072509852051452;
         const 11632957215606156764;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.541662145 UTC

[section ""data" . System.Console.GetOpt.$tc'ReqArg1_closure" {
     System.Console.GetOpt.$tc'ReqArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rcsnt_closure+4;
         const $krep11_rcsnx_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.543476922 UTC

[section ""cstring" . System.Console.GetOpt.$tc'ReqArg3_bytes" {
     System.Console.GetOpt.$tc'ReqArg3_bytes:
         I8[] [39,82,101,113,65,114,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.545154133 UTC

[section ""data" . System.Console.GetOpt.$tc'ReqArg2_closure" {
     System.Console.GetOpt.$tc'ReqArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'ReqArg3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.546962489 UTC

[section ""data" . System.Console.GetOpt.$tc'ReqArg_closure" {
     System.Console.GetOpt.$tc'ReqArg_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'ReqArg2_closure+1;
         const System.Console.GetOpt.$tc'ReqArg1_closure+4;
         const 16427330633826478147;
         const 15179110347223027838;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.548775448 UTC

[section ""cstring" . System.Console.GetOpt.$tcOptDescr2_bytes" {
     System.Console.GetOpt.$tcOptDescr2_bytes:
         I8[] [79,112,116,68,101,115,99,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.550536048 UTC

[section ""data" . System.Console.GetOpt.$tcOptDescr1_closure" {
     System.Console.GetOpt.$tcOptDescr1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcOptDescr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.552347478 UTC

[section ""data" . System.Console.GetOpt.$tcOptDescr_closure" {
     System.Console.GetOpt.$tcOptDescr_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcOptDescr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5602371009437266142;
         const 11022077518484673144;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.554997722 UTC

[section ""data" . $krep12_rcsny_closure" {
     $krep12_rcsny_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcOptDescr_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.556782628 UTC

[section ""data" . $krep13_rcsnz_closure" {
     $krep13_rcsnz_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep12_rcsny_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.558651128 UTC

[section ""data" . $krep14_rcsnA_closure" {
     $krep14_rcsnA_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcsnw_closure+1;
         const $krep13_rcsnz_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.560459043 UTC

[section ""data" . $krep15_rcsnB_closure" {
     $krep15_rcsnB_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcsnr_closure+1;
         const $krep14_rcsnA_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.562296827 UTC

[section ""data" . System.Console.GetOpt.$tc'Option1_closure" {
     System.Console.GetOpt.$tc'Option1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep15_rcsnB_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.564061795 UTC

[section ""cstring" . System.Console.GetOpt.$tc'Option3_bytes" {
     System.Console.GetOpt.$tc'Option3_bytes:
         I8[] [39,79,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.56639244 UTC

[section ""data" . System.Console.GetOpt.$tc'Option2_closure" {
     System.Console.GetOpt.$tc'Option2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'Option3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.56816985 UTC

[section ""data" . System.Console.GetOpt.$tc'Option_closure" {
     System.Console.GetOpt.$tc'Option_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'Option2_closure+1;
         const System.Console.GetOpt.$tc'Option1_closure+4;
         const 10066039264625497029;
         const 5674636120141944492;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.570038874 UTC

[section ""cstring" . System.Console.GetOpt.$tcOptKind2_bytes" {
     System.Console.GetOpt.$tcOptKind2_bytes:
         I8[] [79,112,116,75,105,110,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.571763838 UTC

[section ""data" . System.Console.GetOpt.$tcOptKind1_closure" {
     System.Console.GetOpt.$tcOptKind1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcOptKind2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.573971324 UTC

[section ""data" . System.Console.GetOpt.$tcOptKind_closure" {
     System.Console.GetOpt.$tcOptKind_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcOptKind1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5196380470096609574;
         const 4174335291028142741;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.575896262 UTC

[section ""data" . System.Console.GetOpt.$tc'EndOfOpts1_closure" {
     System.Console.GetOpt.$tc'EndOfOpts1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcOptKind_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.577719501 UTC

[section ""cstring" . System.Console.GetOpt.$tc'EndOfOpts3_bytes" {
     System.Console.GetOpt.$tc'EndOfOpts3_bytes:
         I8[] [39,69,110,100,79,102,79,112,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.579506674 UTC

[section ""data" . System.Console.GetOpt.$tc'EndOfOpts2_closure" {
     System.Console.GetOpt.$tc'EndOfOpts2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'EndOfOpts3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.581400917 UTC

[section ""data" . System.Console.GetOpt.$tc'EndOfOpts_closure" {
     System.Console.GetOpt.$tc'EndOfOpts_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'EndOfOpts2_closure+1;
         const System.Console.GetOpt.$tc'EndOfOpts1_closure+1;
         const 16241379069650497856;
         const 7399561775253491405;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.583285183 UTC

[section ""data" . System.Console.GetOpt.$tc'Opt1_closure" {
     System.Console.GetOpt.$tc'Opt1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcsns_closure+2;
         const System.Console.GetOpt.$tc'EndOfOpts1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.585049361 UTC

[section ""cstring" . System.Console.GetOpt.$tc'Opt3_bytes" {
     System.Console.GetOpt.$tc'Opt3_bytes:
         I8[] [39,79,112,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.586860913 UTC

[section ""data" . System.Console.GetOpt.$tc'Opt2_closure" {
     System.Console.GetOpt.$tc'Opt2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'Opt3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.588675087 UTC

[section ""data" . System.Console.GetOpt.$tc'Opt_closure" {
     System.Console.GetOpt.$tc'Opt_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'Opt2_closure+1;
         const System.Console.GetOpt.$tc'Opt1_closure+4;
         const 2387467460439073880;
         const 875868993959501908;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.591168421 UTC

[section ""data" . System.Console.GetOpt.$tc'NonOpt1_closure" {
     System.Console.GetOpt.$tc'NonOpt1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const System.Console.GetOpt.$tc'EndOfOpts1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.593458215 UTC

[section ""cstring" . System.Console.GetOpt.$tc'UnreqOpt2_bytes" {
     System.Console.GetOpt.$tc'UnreqOpt2_bytes:
         I8[] [39,85,110,114,101,113,79,112,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.595194516 UTC

[section ""data" . System.Console.GetOpt.$tc'UnreqOpt1_closure" {
     System.Console.GetOpt.$tc'UnreqOpt1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'UnreqOpt2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.597087202 UTC

[section ""data" . System.Console.GetOpt.$tc'UnreqOpt_closure" {
     System.Console.GetOpt.$tc'UnreqOpt_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'UnreqOpt1_closure+1;
         const System.Console.GetOpt.$tc'NonOpt1_closure+4;
         const 6747281843324563502;
         const 13162655807375334605;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.598874613 UTC

[section ""cstring" . System.Console.GetOpt.$tc'NonOpt3_bytes" {
     System.Console.GetOpt.$tc'NonOpt3_bytes:
         I8[] [39,78,111,110,79,112,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.600497562 UTC

[section ""data" . System.Console.GetOpt.$tc'NonOpt2_closure" {
     System.Console.GetOpt.$tc'NonOpt2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'NonOpt3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.602718187 UTC

[section ""data" . System.Console.GetOpt.$tc'NonOpt_closure" {
     System.Console.GetOpt.$tc'NonOpt_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'NonOpt2_closure+1;
         const System.Console.GetOpt.$tc'NonOpt1_closure+4;
         const 17187900375792953920;
         const 18196243003688324985;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.60451429 UTC

[section ""cstring" . System.Console.GetOpt.$tc'OptErr2_bytes" {
     System.Console.GetOpt.$tc'OptErr2_bytes:
         I8[] [39,79,112,116,69,114,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.60623894 UTC

[section ""data" . System.Console.GetOpt.$tc'OptErr1_closure" {
     System.Console.GetOpt.$tc'OptErr1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'OptErr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.608001112 UTC

[section ""data" . System.Console.GetOpt.$tc'OptErr_closure" {
     System.Console.GetOpt.$tc'OptErr_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'OptErr1_closure+1;
         const System.Console.GetOpt.$tc'NonOpt1_closure+4;
         const 13165663139815598038;
         const 5639435123785572420;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.610419563 UTC

[section ""data" . System.Console.GetOpt.Opt_closure" {
     System.Console.GetOpt.Opt_closure:
         const System.Console.GetOpt.Opt_info;
 },
 System.Console.GetOpt.Opt_entry() //  [R2]
         { []
         }
     {offset
       ccvc8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvcc; else goto ccvcb;
       ccvcc: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.Opt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvcb: // global
           I64[Hp - 8] = System.Console.GetOpt.Opt_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.Opt_info" {
     System.Console.GetOpt.Opt_info:
         const System.Console.GetOpt.Opt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.614734187 UTC

[section ""data" . System.Console.GetOpt.UnreqOpt_closure" {
     System.Console.GetOpt.UnreqOpt_closure:
         const System.Console.GetOpt.UnreqOpt_info;
 },
 System.Console.GetOpt.UnreqOpt_entry() //  [R2]
         { []
         }
     {offset
       ccvcn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvcr; else goto ccvcq;
       ccvcr: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.UnreqOpt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvcq: // global
           I64[Hp - 8] = System.Console.GetOpt.UnreqOpt_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.UnreqOpt_info" {
     System.Console.GetOpt.UnreqOpt_info:
         const System.Console.GetOpt.UnreqOpt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.61849256 UTC

[section ""data" . System.Console.GetOpt.NonOpt_closure" {
     System.Console.GetOpt.NonOpt_closure:
         const System.Console.GetOpt.NonOpt_info;
 },
 System.Console.GetOpt.NonOpt_entry() //  [R2]
         { []
         }
     {offset
       ccvcC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvcG; else goto ccvcF;
       ccvcG: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.NonOpt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvcF: // global
           I64[Hp - 8] = System.Console.GetOpt.NonOpt_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.NonOpt_info" {
     System.Console.GetOpt.NonOpt_info:
         const System.Console.GetOpt.NonOpt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.622467729 UTC

[section ""data" . System.Console.GetOpt.EndOfOpts_closure" {
     System.Console.GetOpt.EndOfOpts_closure:
         const System.Console.GetOpt.EndOfOpts_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.624758096 UTC

[section ""data" . System.Console.GetOpt.OptErr_closure" {
     System.Console.GetOpt.OptErr_closure:
         const System.Console.GetOpt.OptErr_info;
 },
 System.Console.GetOpt.OptErr_entry() //  [R2]
         { []
         }
     {offset
       ccvcS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvcW; else goto ccvcV;
       ccvcW: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.OptErr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvcV: // global
           I64[Hp - 8] = System.Console.GetOpt.OptErr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.OptErr_info" {
     System.Console.GetOpt.OptErr_info:
         const System.Console.GetOpt.OptErr_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.628876056 UTC

[section ""data" . System.Console.GetOpt.NoArg_closure" {
     System.Console.GetOpt.NoArg_closure:
         const System.Console.GetOpt.NoArg_info;
 },
 System.Console.GetOpt.NoArg_entry() //  [R2]
         { []
         }
     {offset
       ccvd7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvdb; else goto ccvda;
       ccvdb: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.NoArg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvda: // global
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.NoArg_info" {
     System.Console.GetOpt.NoArg_info:
         const System.Console.GetOpt.NoArg_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.632736887 UTC

[section ""data" . System.Console.GetOpt.ReqArg_closure" {
     System.Console.GetOpt.ReqArg_closure:
         const System.Console.GetOpt.ReqArg_info;
 },
 System.Console.GetOpt.ReqArg_entry() //  [R2, R3]
         { []
         }
     {offset
       ccvdm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccvdq; else goto ccvdp;
       ccvdq: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.ReqArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvdp: // global
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.ReqArg_info" {
     System.Console.GetOpt.ReqArg_info:
         const System.Console.GetOpt.ReqArg_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.636654337 UTC

[section ""data" . System.Console.GetOpt.OptArg_closure" {
     System.Console.GetOpt.OptArg_closure:
         const System.Console.GetOpt.OptArg_info;
 },
 System.Console.GetOpt.OptArg_entry() //  [R2, R3]
         { []
         }
     {offset
       ccvdB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccvdF; else goto ccvdE;
       ccvdF: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.OptArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvdE: // global
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 13;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.OptArg_info" {
     System.Console.GetOpt.OptArg_info:
         const System.Console.GetOpt.OptArg_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.640909161 UTC

[section ""data" . System.Console.GetOpt.Option_closure" {
     System.Console.GetOpt.Option_closure:
         const System.Console.GetOpt.Option_info;
 },
 System.Console.GetOpt.Option_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       ccvdQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccvdU; else goto ccvdT;
       ccvdU: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.Option_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvdT: // global
           I64[Hp - 32] = System.Console.GetOpt.Option_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.Option_info" {
     System.Console.GetOpt.Option_info:
         const System.Console.GetOpt.Option_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.644382126 UTC

[section ""data" . System.Console.GetOpt.RequireOrder_closure" {
     System.Console.GetOpt.RequireOrder_closure:
         const System.Console.GetOpt.RequireOrder_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.6461828 UTC

[section ""data" . System.Console.GetOpt.Permute_closure" {
     System.Console.GetOpt.Permute_closure:
         const System.Console.GetOpt.Permute_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.648407723 UTC

[section ""data" . System.Console.GetOpt.ReturnInOrder_closure" {
     System.Console.GetOpt.ReturnInOrder_closure:
         const System.Console.GetOpt.ReturnInOrder_info;
 },
 System.Console.GetOpt.ReturnInOrder_entry() //  [R2]
         { []
         }
     {offset
       ccve7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccveb; else goto ccvea;
       ccveb: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.ReturnInOrder_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvea: // global
           I64[Hp - 8] = System.Console.GetOpt.ReturnInOrder_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.ReturnInOrder_info" {
     System.Console.GetOpt.ReturnInOrder_info:
         const System.Console.GetOpt.ReturnInOrder_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.652275396 UTC

[section ""cstring" . icu8D_str" {
     icu8D_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116]
 },
 System.Console.GetOpt.Opt_con_entry() //  [R1]
         { []
         }
     {offset
       ccveh: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.Opt_con_info" {
     System.Console.GetOpt.Opt_con_info:
         const System.Console.GetOpt.Opt_con_entry;
         const 1;
         const 2;
         const icu8D_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.65610457 UTC

[section ""cstring" . icu8F_str" {
     icu8F_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,85,110,114,101,113,79,112,116]
 },
 System.Console.GetOpt.UnreqOpt_con_entry() //  [R1]
         { []
         }
     {offset
       ccven: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.UnreqOpt_con_info" {
     System.Console.GetOpt.UnreqOpt_con_info:
         const System.Console.GetOpt.UnreqOpt_con_entry;
         const 1;
         const 4294967298;
         const icu8F_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.659483885 UTC

[section ""cstring" . icu8H_str" {
     icu8H_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,78,111,110,79,112,116]
 },
 System.Console.GetOpt.NonOpt_con_entry() //  [R1]
         { []
         }
     {offset
       ccvet: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.NonOpt_con_info" {
     System.Console.GetOpt.NonOpt_con_info:
         const System.Console.GetOpt.NonOpt_con_entry;
         const 1;
         const 8589934594;
         const icu8H_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.663089272 UTC

[section ""cstring" . icu8J_str" {
     icu8J_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,69,110,100,79,102,79,112,116,115]
 },
 System.Console.GetOpt.EndOfOpts_con_entry() //  [R1]
         { []
         }
     {offset
       ccvez: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.EndOfOpts_con_info" {
     System.Console.GetOpt.EndOfOpts_con_info:
         const System.Console.GetOpt.EndOfOpts_con_entry;
         const 4294967296;
         const 12884901891;
         const icu8J_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.666316175 UTC

[section ""cstring" . icu8L_str" {
     icu8L_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116,69,114,114]
 },
 System.Console.GetOpt.OptErr_con_entry() //  [R1]
         { []
         }
     {offset
       ccveF: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.OptErr_con_info" {
     System.Console.GetOpt.OptErr_con_info:
         const System.Console.GetOpt.OptErr_con_entry;
         const 1;
         const 17179869186;
         const icu8L_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.669416835 UTC

[section ""cstring" . icu8N_str" {
     icu8N_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,78,111,65,114,103]
 },
 System.Console.GetOpt.NoArg_con_entry() //  [R1]
         { []
         }
     {offset
       ccveL: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.NoArg_con_info" {
     System.Console.GetOpt.NoArg_con_info:
         const System.Console.GetOpt.NoArg_con_entry;
         const 1;
         const 2;
         const icu8N_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.672598778 UTC

[section ""cstring" . icu8P_str" {
     icu8P_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,82,101,113,65,114,103]
 },
 System.Console.GetOpt.ReqArg_con_entry() //  [R1]
         { []
         }
     {offset
       ccveR: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.ReqArg_con_info" {
     System.Console.GetOpt.ReqArg_con_info:
         const System.Console.GetOpt.ReqArg_con_entry;
         const 2;
         const 4294967300;
         const icu8P_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.675881172 UTC

[section ""cstring" . icu8R_str" {
     icu8R_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116,65,114,103]
 },
 System.Console.GetOpt.OptArg_con_entry() //  [R1]
         { []
         }
     {offset
       ccveX: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.OptArg_con_info" {
     System.Console.GetOpt.OptArg_con_info:
         const System.Console.GetOpt.OptArg_con_entry;
         const 2;
         const 8589934596;
         const icu8R_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.679488331 UTC

[section ""cstring" . icu8T_str" {
     icu8T_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116,105,111,110]
 },
 System.Console.GetOpt.Option_con_entry() //  [R1]
         { []
         }
     {offset
       ccvf3: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.Option_con_info" {
     System.Console.GetOpt.Option_con_info:
         const System.Console.GetOpt.Option_con_entry;
         const 4;
         const 1;
         const icu8T_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.682850322 UTC

[section ""cstring" . icu8V_str" {
     icu8V_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,82,101,113,117,105,114,101,79,114,100,101,114]
 },
 System.Console.GetOpt.RequireOrder_con_entry() //  [R1]
         { []
         }
     {offset
       ccvf9: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.RequireOrder_con_info" {
     System.Console.GetOpt.RequireOrder_con_info:
         const System.Console.GetOpt.RequireOrder_con_entry;
         const 4294967296;
         const 3;
         const icu8V_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.686712615 UTC

[section ""cstring" . icu8X_str" {
     icu8X_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,80,101,114,109,117,116,101]
 },
 System.Console.GetOpt.Permute_con_entry() //  [R1]
         { []
         }
     {offset
       ccvff: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.Permute_con_info" {
     System.Console.GetOpt.Permute_con_info:
         const System.Console.GetOpt.Permute_con_entry;
         const 4294967296;
         const 4294967299;
         const icu8X_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.690040172 UTC

[section ""cstring" . icu8Z_str" {
     icu8Z_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,82,101,116,117,114,110,73,110,79,114,100,101,114]
 },
 System.Console.GetOpt.ReturnInOrder_con_entry() //  [R1]
         { []
         }
     {offset
       ccvfl: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.ReturnInOrder_con_info" {
     System.Console.GetOpt.ReturnInOrder_con_info:
         const System.Console.GetOpt.ReturnInOrder_con_entry;
         const 1;
         const 8589934594;
         const icu8Z_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:21.693305997 UTC

[section ""relreadonly" . ScsR0_srt" {
     ScsR0_srt:
         const GHC.List.maximum2_closure;
         const System.Console.GetOpt.usageInfo_sameLen_closure;
         const System.Console.GetOpt.usageInfo1_closure;
         const lvl10_rcsn5_closure;
         const System.Console.GetOpt.usageInfo_closure;
         const lvl17_rcsnc_closure;
         const System.Console.GetOpt.errUnrec_closure;
         const System.Console.GetOpt.$wgetOpt'_closure;
         const lvl16_rcsnb_closure;
         const lvl24_rcsnk_closure;
         const lvl22_rcsnh_closure;
         const System.Console.GetOpt.getOpt'_closure;
         const System.Console.GetOpt.getOpt_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.501150643 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:24.503986285 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure" {
     System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure:
         const System.Console.GetOpt.$fFunctorArgOrder_$cfmap_info;
 },
 sat_scvfw_entry() //  [R1, R2]
         { []
         }
     {offset
       ccvBU: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scvfw_info" {
     sat_scvfw_info:
         const sat_scvfw_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 System.Console.GetOpt.$fFunctorArgOrder_$cfmap_entry() //  [R2, R3]
         { []
         }
     {offset
       ccvC2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvC3; else goto ccvC4;
       ccvC3: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvC4: // global
           I64[Sp - 16] = block_ccvBI_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvCe; else goto ccvBJ;
       ucvCe: // global
           call _ccvBI(R1) args: 0, res: 0, upd: 0;
       ccvBJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.$fFunctorArgOrder_$cfmap_info" {
     System.Console.GetOpt.$fFunctorArgOrder_$cfmap_info:
         const System.Console.GetOpt.$fFunctorArgOrder_$cfmap_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccvBI() //  [R1]
         { []
         }
     {offset
       ccvBI: // global
           _ccvC1::P64 = R1 & 7;
           if (_ccvC1::P64 < 3) goto ucvCd; else goto ccvC0;
       ucvCd: // global
           if (_ccvC1::P64 < 2) goto ccvBY; else goto ccvBZ;
       ccvBY: // global
           R1 = System.Console.GetOpt.RequireOrder_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvBZ: // global
           R1 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvC0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccvCc; else goto ccvCb;
       ccvCc: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvCb: // global
           _scvfv::P64 = P64[R1 + 5];
           I64[Hp - 32] = sat_scvfw_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _scvfv::P64;
           I64[Hp - 8] = System.Console.GetOpt.ReturnInOrder_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 5;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvBI_info" {
     block_ccvBI_info:
         const _ccvBI;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.512680814 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure" {
     System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure:
         const System.Console.GetOpt.$fFunctorArgOrder_$c<$_info;
 },
 sat_scvfC_entry() //  [R1]
         { []
         }
     {offset
       ccvCQ: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scvfC_info" {
     sat_scvfC_info:
         const sat_scvfC_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 System.Console.GetOpt.$fFunctorArgOrder_$c<$_entry() //  [R2, R3]
         { []
         }
     {offset
       ccvCY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvCZ; else goto ccvD0;
       ccvCZ: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvD0: // global
           I64[Sp - 16] = block_ccvCE_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvDa; else goto ccvCF;
       ucvDa: // global
           call _ccvCE(R1) args: 0, res: 0, upd: 0;
       ccvCF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.$fFunctorArgOrder_$c<$_info" {
     System.Console.GetOpt.$fFunctorArgOrder_$c<$_info:
         const System.Console.GetOpt.$fFunctorArgOrder_$c<$_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccvCE() //  [R1]
         { []
         }
     {offset
       ccvCE: // global
           _ccvCX::P64 = R1 & 7;
           if (_ccvCX::P64 < 3) goto ucvD9; else goto ccvCW;
       ucvD9: // global
           if (_ccvCX::P64 < 2) goto ccvCU; else goto ccvCV;
       ccvCU: // global
           R1 = System.Console.GetOpt.RequireOrder_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvCV: // global
           R1 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvCW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccvD8; else goto ccvD7;
       ccvD8: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvD7: // global
           I64[Hp - 24] = sat_scvfC_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = System.Console.GetOpt.ReturnInOrder_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 5;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvCE_info" {
     block_ccvCE_info:
         const _ccvCE;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.522081385 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgOrder_closure" {
     System.Console.GetOpt.$fFunctorArgOrder_closure:
         const GHC.Base.C:Functor_con_info;
         const System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure+2;
         const System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.526329152 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure" {
     System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure:
         const System.Console.GetOpt.$fFunctorArgDescr_$cfmap_info;
 },
 sat_scvfK_entry() //  [R1, R2]
         { []
         }
     {offset
       ccvDM: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scvfK_info" {
     sat_scvfK_info:
         const sat_scvfK_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_scvfN_entry() //  [R1, R2]
         { []
         }
     {offset
       ccvDW: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scvfN_info" {
     sat_scvfN_info:
         const sat_scvfN_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 System.Console.GetOpt.$fFunctorArgDescr_$cfmap_entry() //  [R2, R3]
         { []
         }
     {offset
       ccvE4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvE5; else goto ccvE6;
       ccvE5: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvE6: // global
           I64[Sp - 16] = block_ccvDB_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvEm; else goto ccvDC;
       ucvEm: // global
           call _ccvDB(R1) args: 0, res: 0, upd: 0;
       ccvDC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.$fFunctorArgDescr_$cfmap_info" {
     System.Console.GetOpt.$fFunctorArgDescr_$cfmap_info:
         const System.Console.GetOpt.$fFunctorArgDescr_$cfmap_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccvDB() //  [R1]
         { []
         }
     {offset
       ccvDB: // global
           _scvfD::P64 = P64[Sp + 8];
           _ccvE3::P64 = R1 & 7;
           if (_ccvE3::P64 < 3) goto ucvEl; else goto ccvE2;
       ucvEl: // global
           if (_ccvE3::P64 < 2) goto ccvE0; else goto ccvE1;
       ccvE0: // global
           Hp = Hp + 48;
           _scvfF::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvEk; else goto ccvEb;
       ccvEb: // global
           _scvfG::P64 = P64[_scvfF::P64 + 7];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _scvfD::P64;
           P64[Hp - 16] = _scvfG::P64;
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvE1: // global
           Hp = Hp + 48;
           _scvfF::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvEk; else goto ccvEf;
       ccvEf: // global
           _scvfI::P64 = P64[_scvfF::P64 + 6];
           _scvfJ::P64 = P64[_scvfF::P64 + 14];
           I64[Hp - 40] = sat_scvfK_info;
           P64[Hp - 32] = _scvfD::P64;
           P64[Hp - 24] = _scvfI::P64;
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = _scvfJ::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvE2: // global
           Hp = Hp + 48;
           _scvfF::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvEk; else goto ccvEj;
       ccvEk: // global
           HpAlloc = 48;
           R1 = _scvfF::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvEj: // global
           _scvfL::P64 = P64[_scvfF::P64 + 5];
           _scvfM::P64 = P64[_scvfF::P64 + 13];
           I64[Hp - 40] = sat_scvfN_info;
           P64[Hp - 32] = _scvfD::P64;
           P64[Hp - 24] = _scvfL::P64;
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = _scvfM::P64;
           R1 = Hp - 13;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvDB_info" {
     block_ccvDB_info:
         const _ccvDB;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.54176141 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure" {
     System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure:
         const System.Console.GetOpt.$fFunctorArgDescr_$c<$_info;
 },
 sat_scvfV_entry() //  [R1]
         { []
         }
     {offset
       ccvF5: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scvfV_info" {
     sat_scvfV_info:
         const sat_scvfV_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_scvfZ_entry() //  [R1]
         { []
         }
     {offset
       ccvFf: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scvfZ_info" {
     sat_scvfZ_info:
         const sat_scvfZ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 System.Console.GetOpt.$fFunctorArgDescr_$c<$_entry() //  [R2, R3]
         { []
         }
     {offset
       ccvFn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvFo; else goto ccvFp;
       ccvFo: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvFp: // global
           I64[Sp - 16] = block_ccvEU_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvFE; else goto ccvEV;
       ucvFE: // global
           call _ccvEU(R1) args: 0, res: 0, upd: 0;
       ccvEV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.$fFunctorArgDescr_$c<$_info" {
     System.Console.GetOpt.$fFunctorArgDescr_$c<$_info:
         const System.Console.GetOpt.$fFunctorArgDescr_$c<$_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccvEU() //  [R1]
         { []
         }
     {offset
       ccvEU: // global
           _scvfO::P64 = P64[Sp + 8];
           _ccvFm::P64 = R1 & 7;
           if (_ccvFm::P64 < 3) goto ucvFD; else goto ccvFl;
       ucvFD: // global
           if (_ccvFm::P64 < 2) goto ccvFj; else goto ccvFk;
       ccvFj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvFu; else goto ccvFt;
       ccvFu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvFt: // global
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = _scvfO::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvFk: // global
           Hp = Hp + 40;
           _scvfQ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvFC; else goto ccvFx;
       ccvFx: // global
           _scvfT::P64 = P64[_scvfQ::P64 + 14];
           I64[Hp - 32] = sat_scvfV_info;
           P64[Hp - 24] = _scvfO::P64;
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scvfT::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvFl: // global
           Hp = Hp + 40;
           _scvfQ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvFC; else goto ccvFB;
       ccvFC: // global
           HpAlloc = 40;
           R1 = _scvfQ::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvFB: // global
           _scvfX::P64 = P64[_scvfQ::P64 + 13];
           I64[Hp - 32] = sat_scvfZ_info;
           P64[Hp - 24] = _scvfO::P64;
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scvfX::P64;
           R1 = Hp - 13;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvEU_info" {
     block_ccvEU_info:
         const _ccvEU;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.550768266 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgDescr_closure" {
     System.Console.GetOpt.$fFunctorArgDescr_closure:
         const GHC.Base.C:Functor_con_info;
         const System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure+2;
         const System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.554238081 UTC

[section ""data" . System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure" {
     System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure:
         const System.Console.GetOpt.$fFunctorOptDescr_$cfmap_info;
 },
 sat_scvg7_entry() //  [R1]
         { []
         }
     {offset
       ccvGk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvGl; else goto ccvGm;
       ccvGl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvGm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.Console.GetOpt.$fFunctorArgDescr_$cfmap_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvg7_info" {
     sat_scvg7_info:
         const sat_scvg7_entry;
         const 2;
         const 18;
 },
 System.Console.GetOpt.$fFunctorOptDescr_$cfmap_entry() //  [R2, R3]
         { []
         }
     {offset
       ccvGn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvGp; else goto ccvGq;
       ccvGp: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvGq: // global
           I64[Sp - 16] = block_ccvGb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvGu; else goto ccvGc;
       ucvGu: // global
           call _ccvGb(R1) args: 0, res: 0, upd: 0;
       ccvGc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.$fFunctorOptDescr_$cfmap_info" {
     System.Console.GetOpt.$fFunctorOptDescr_$cfmap_info:
         const System.Console.GetOpt.$fFunctorOptDescr_$cfmap_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccvGb() //  [R1]
         { []
         }
     {offset
       ccvGb: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccvGt; else goto ccvGs;
       ccvGt: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvGs: // global
           _scvg3::P64 = P64[R1 + 7];
           _scvg4::P64 = P64[R1 + 15];
           _scvg5::P64 = P64[R1 + 23];
           _scvg6::P64 = P64[R1 + 31];
           I64[Hp - 64] = sat_scvg7_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _scvg5::P64;
           I64[Hp - 32] = System.Console.GetOpt.Option_con_info;
           P64[Hp - 24] = _scvg3::P64;
           P64[Hp - 16] = _scvg4::P64;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = _scvg6::P64;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvGb_info" {
     block_ccvGb_info:
         const _ccvGb;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.564445433 UTC

[section ""data" . System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure" {
     System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure:
         const System.Console.GetOpt.$fFunctorOptDescr_$c<$_info;
 },
 sat_scvgk_entry() //  [R1]
         { []
         }
     {offset
       ccvHd: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scvgk_info" {
     sat_scvgk_info:
         const sat_scvgk_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_scvgo_entry() //  [R1]
         { []
         }
     {offset
       ccvHn: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scvgo_info" {
     sat_scvgo_info:
         const sat_scvgo_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_scvgp_entry() //  [R1]
         { []
         }
     {offset
       ccvHv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccvHw; else goto ccvHx;
       ccvHw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvHx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccvH2_info;
           _scvg8::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _scvg8::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucvHM; else goto ccvH3;
       ucvHM: // global
           call _ccvH2(R1) args: 0, res: 0, upd: 0;
       ccvH3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvgp_info" {
     sat_scvgp_info:
         const sat_scvgp_entry;
         const 2;
         const 18;
 },
 _ccvH2() //  [R1]
         { []
         }
     {offset
       ccvH2: // global
           _scvg8::P64 = P64[Sp + 8];
           _ccvHu::P64 = R1 & 7;
           if (_ccvHu::P64 < 3) goto ucvHL; else goto ccvHt;
       ucvHL: // global
           if (_ccvHu::P64 < 2) goto ccvHr; else goto ccvHs;
       ccvHr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvHC; else goto ccvHB;
       ccvHC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccvHB: // global
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = _scvg8::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccvHs: // global
           Hp = Hp + 40;
           _scvgf::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvHK; else goto ccvHF;
       ccvHF: // global
           _scvgi::P64 = P64[_scvgf::P64 + 14];
           I64[Hp - 32] = sat_scvgk_info;
           P64[Hp - 24] = _scvg8::P64;
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scvgi::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccvHt: // global
           Hp = Hp + 40;
           _scvgf::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvHK; else goto ccvHJ;
       ccvHK: // global
           HpAlloc = 40;
           R1 = _scvgf::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccvHJ: // global
           _scvgm::P64 = P64[_scvgf::P64 + 13];
           I64[Hp - 32] = sat_scvgo_info;
           P64[Hp - 24] = _scvg8::P64;
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scvgm::P64;
           R1 = Hp - 13;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccvH2_info" {
     block_ccvH2_info:
         const _ccvH2;
         const 1;
         const 30;
 },
 System.Console.GetOpt.$fFunctorOptDescr_$c<$_entry() //  [R2, R3]
         { []
         }
     {offset
       ccvHN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvHP; else goto ccvHQ;
       ccvHP: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvHQ: // global
           I64[Sp - 16] = block_ccvGT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvHU; else goto ccvGU;
       ucvHU: // global
           call _ccvGT(R1) args: 0, res: 0, upd: 0;
       ccvGU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.$fFunctorOptDescr_$c<$_info" {
     System.Console.GetOpt.$fFunctorOptDescr_$c<$_info:
         const System.Console.GetOpt.$fFunctorOptDescr_$c<$_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccvGT() //  [R1]
         { []
         }
     {offset
       ccvGT: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccvHT; else goto ccvHS;
       ccvHT: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvHS: // global
           _scvgb::P64 = P64[R1 + 7];
           _scvgc::P64 = P64[R1 + 15];
           _scvgd::P64 = P64[R1 + 23];
           _scvge::P64 = P64[R1 + 31];
           I64[Hp - 64] = sat_scvgp_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _scvgd::P64;
           I64[Hp - 32] = System.Console.GetOpt.Option_con_info;
           P64[Hp - 24] = _scvgb::P64;
           P64[Hp - 16] = _scvgc::P64;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = _scvge::P64;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvGT_info" {
     block_ccvGT_info:
         const _ccvGT;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.578337729 UTC

[section ""data" . System.Console.GetOpt.$fFunctorOptDescr_closure" {
     System.Console.GetOpt.$fFunctorOptDescr_closure:
         const GHC.Base.C:Functor_con_info;
         const System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure+2;
         const System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.58009503 UTC

[section ""data" . lvl_rcsmT_closure" {
     lvl_rcsmT_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.582385843 UTC

[section ""data" . lvl1_rcsmU_closure" {
     lvl1_rcsmU_closure:
         const :_con_info;
         const lvl_rcsmT_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.585382486 UTC

[section ""data" . $wxs_rcsmV_closure" {
     $wxs_rcsmV_closure:
         const $wxs_rcsmV_info;
 },
 sat_scvgt_entry() //  [R1]
         { []
         }
     {offset
       ccvIQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvIR; else goto ccvIS;
       ccvIR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvIS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16] - 1;
           Sp = Sp - 16;
           call $wxs_rcsmV_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvgt_info" {
     sat_scvgt_info:
         const sat_scvgt_entry;
         const 4294967296;
         const 17;
 },
 $wxs_rcsmV_entry() //  [R2]
         { []
         }
     {offset
       ccvIW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccvJ0; else goto ccvIZ;
       ccvJ0: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = $wxs_rcsmV_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvIZ: // global
           if (R2 == 1) goto ccvIV; else goto ccvIU;
       ccvIV: // global
           Hp = Hp - 48;
           R1 = lvl1_rcsmU_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvIU: // global
           I64[Hp - 40] = sat_scvgt_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl_rcsmT_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wxs_rcsmV_info" {
     $wxs_rcsmV_info:
         const $wxs_rcsmV_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.592467797 UTC

[section ""data" . System.Console.GetOpt.$wgo_closure" {
     System.Console.GetOpt.$wgo_closure:
         const System.Console.GetOpt.$wgo_info;
 },
 sat_scvgB_entry() //  [R1]
         { []
         }
     {offset
       ccvJA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvJB; else goto ccvJC;
       ccvJB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvJC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 24] - 1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.Console.GetOpt.$wgo_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvgB_info" {
     sat_scvgB_info:
         const sat_scvgB_entry;
         const 4294967297;
         const 19;
 },
 System.Console.GetOpt.$wgo_entry() //  [R2, R3]
         { []
         }
     {offset
       ccvJH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvJI; else goto ccvJJ;
       ccvJI: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$wgo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvJJ: // global
           I64[Sp - 16] = block_ccvJm_info;
           R1 = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvJV; else goto ccvJn;
       ucvJV: // global
           call _ccvJm(R1) args: 0, res: 0, upd: 0;
       ccvJn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.$wgo_info" {
     System.Console.GetOpt.$wgo_info:
         const System.Console.GetOpt.$wgo_entry;
         const 0;
         const 14;
         const 8589934606;
 },
 _ccvJm() //  [R1]
         { []
         }
     {offset
       ccvJm: // global
           _scvgv::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto ccvJE; else goto ccvJF;
       ccvJE: // global
           R2 = _scvgv::I64;
           Sp = Sp + 16;
           call $wxs_rcsmV_entry(R2) args: 8, res: 0, upd: 8;
       ccvJF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccvJO; else goto ccvJN;
       ccvJO: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvJN: // global
           _scvgx::P64 = P64[R1 + 6];
           if (_scvgv::I64 == 1) goto ccvJU; else goto ccvJR;
       ccvJU: // global
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = _scvgx::P64;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _ccvJT::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _ccvJT::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvJR: // global
           _scvgy::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_scvgB_info;
           P64[Hp - 32] = _scvgy::P64;
           I64[Hp - 24] = _scvgv::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scvgx::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvJm_info" {
     block_ccvJm_info:
         const _ccvJm;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.605602492 UTC

[section ""data" . System.Console.GetOpt.usageInfo_sameLen_closure" {
     System.Console.GetOpt.usageInfo_sameLen_closure:
         const System.Console.GetOpt.usageInfo_sameLen_info;
         const 0;
 },
 n_scvgD_entry() //  [R1]
         { []
         }
     {offset
       ccvKA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccvKB; else goto ccvKC;
       ccvKB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvKC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccvKu_info;
           R3 = P64[R1 + 16];
           R2 = GHC.List.length_closure+1;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . n_scvgD_info" {
     n_scvgD_info:
         const n_scvgD_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt;
 },
 _ccvKu() //  [R1]
         { []
         }
     {offset
       ccvKu: // global
           if (R1 & 7 == 1) goto ccvKx; else goto ccvKy;
       ccvKx: // global
           R1 = GHC.List.maximum2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       ccvKy: // global
           I64[Sp - 8] = block_ccvKI_info;
           _scvgG::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scvgG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucvKX; else goto ccvKJ;
       ucvKX: // global
           call _ccvKI(R1) args: 0, res: 0, upd: 0;
       ccvKJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccvKu_info" {
     block_ccvKu_info:
         const _ccvKu;
         const 0;
         const 4294967326;
         const ScvMa_srt;
 },
 _ccvKI() //  [R1]
         { []
         }
     {offset
       ccvKI: // global
           _scvgG::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccvKN_info;
           R3 = I64[R1 + 7];
           R2 = _scvgG::P64;
           Sp = Sp + 8;
           call GHC.List.$wgo_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccvKI_info" {
     block_ccvKI_info:
         const _ccvKI;
         const 1;
         const 30;
 },
 _ccvKN() //  [R1]
         { []
         }
     {offset
       ccvKN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvKW; else goto ccvKV;
       ccvKW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       ccvKV: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccvKN_info" {
     block_ccvKN_info:
         const _ccvKN;
         const 0;
         const 30;
 },
 lvl25_scvgK_entry() //  [R1]
         { []
         }
     {offset
       ccvL5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccvL6; else goto ccvL7;
       ccvL6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvL7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccvL2_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucvLc; else goto ccvL3;
       ucvLc: // global
           call _ccvL2(R1) args: 0, res: 0, upd: 0;
       ccvL3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl25_scvgK_info" {
     lvl25_scvgK_info:
         const lvl25_scvgK_entry;
         const 1;
         const 16;
 },
 _ccvL2() //  [R1]
         { []
         }
     {offset
       ccvL2: // global
           R1 = I64[(%MO_S_Lt_W64(0,
                                  I64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccvL2_info" {
     block_ccvL2_info:
         const _ccvL2;
         const 0;
         const 30;
 },
 sat_scvgW_entry() //  [R1]
         { []
         }
     {offset
       ccvLA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccvLB; else goto ccvLC;
       ccvLB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvLC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_ccvLt_info;
           _scvgD::P64 = P64[R1 + 16];
           _scvgR::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _scvgD::P64;
           P64[Sp - 24] = _scvgR::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucvLQ; else goto ccvLu;
       ucvLQ: // global
           call _ccvLt(R1) args: 0, res: 0, upd: 0;
       ccvLu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvgW_info" {
     sat_scvgW_info:
         const sat_scvgW_entry;
         const 3;
         const 15;
 },
 _ccvLt() //  [R1]
         { []
         }
     {offset
       ccvLt: // global
           if (R1 & 7 == 1) goto ccvLx; else goto ccvLy;
       ccvLx: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccvLy: // global
           _scvgD::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccvLI_info;
           R1 = _scvgD::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucvLP; else goto ccvLK;
       ucvLP: // global
           call _ccvLI(R1) args: 0, res: 0, upd: 0;
       ccvLK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccvLt_info" {
     block_ccvLt_info:
         const _ccvLt;
         const 2;
         const 30;
 },
 _ccvLI() //  [R1]
         { []
         }
     {offset
       ccvLI: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call System.Console.GetOpt.$wgo_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccvLI_info" {
     block_ccvLI_info:
         const _ccvLI;
         const 1;
         const 30;
 },
 go_scvgO_entry() //  [R1, R2]
         { []
         }
     {offset
       ccvLV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccvLW; else goto ccvLX;
       ccvLW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvLX: // global
           I64[Sp - 32] = block_ccvLi_info;
           _scvgO::P64 = R1;
           _scvgD::P64 = P64[R1 + 7];
           _scvgK::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _scvgD::P64;
           P64[Sp - 16] = _scvgK::P64;
           P64[Sp - 8] = _scvgO::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucvM4; else goto ccvLj;
       ucvM4: // global
           call _ccvLi(R1) args: 0, res: 0, upd: 0;
       ccvLj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_scvgO_info" {
     go_scvgO_info:
         const go_scvgO_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _ccvLi() //  [R1]
         { []
         }
     {offset
       ccvLi: // global
           if (R1 & 7 == 1) goto ccvLS; else goto ccvLT;
       ccvLS: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvLT: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccvM3; else goto ccvM2;
       ccvM3: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvM2: // global
           _scvgR::P64 = P64[R1 + 6];
           _scvgS::P64 = P64[R1 + 14];
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = _scvgS::P64;
           I64[Hp - 56] = sat_scvgW_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _scvgR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvLi_info" {
     block_ccvLi_info:
         const _ccvLi;
         const 3;
         const 30;
 },
 System.Console.GetOpt.usageInfo_sameLen_entry() //  [R2]
         { []
         }
     {offset
       ccvM5: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccvM9; else goto ccvM8;
       ccvM9: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo_sameLen_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvM8: // global
           I64[Hp - 64] = n_scvgD_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl25_scvgK_info;
           _ccvKq::P64 = Hp - 64;
           P64[Hp - 24] = _ccvKq::P64;
           I64[Hp - 16] = go_scvgO_info;
           P64[Hp - 8] = _ccvKq::P64;
           P64[Hp] = Hp - 40;
           R2 = R2;
           R1 = Hp - 15;
           call go_scvgO_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.usageInfo_sameLen_info" {
     System.Console.GetOpt.usageInfo_sameLen_info:
         const System.Console.GetOpt.usageInfo_sameLen_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScvMa_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.631564872 UTC

[section ""data" . sepBy_rcsmW_closure" {
     sepBy_rcsmW_closure:
         const sepBy_rcsmW_info;
 },
 sat_scvh6_entry() //  [R1]
         { []
         }
     {offset
       ccvNV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvNW; else goto ccvNX;
       ccvNW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvNX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call sepBy_rcsmW_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvh6_info" {
     sat_scvh6_info:
         const sat_scvh6_entry;
         const 2;
         const 18;
 },
 sepBy_rcsmW_entry() //  [R2, R3]
         { []
         }
     {offset
       ccvO2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccvO3; else goto ccvO4;
       ccvO3: // global
           R3 = R3;
           R2 = R2;
           R1 = sepBy_rcsmW_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvO4: // global
           I64[Sp - 16] = block_ccvNF_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvOk; else goto ccvNG;
       ucvOk: // global
           call _ccvNF(R1) args: 0, res: 0, upd: 0;
       ccvNG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sepBy_rcsmW_info" {
     sepBy_rcsmW_info:
         const sepBy_rcsmW_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _ccvNF() //  [R1]
         { []
         }
     {offset
       ccvNF: // global
           if (R1 & 7 == 1) goto ccvNZ; else goto ccvO0;
       ccvNZ: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvO0: // global
           I64[Sp - 8] = block_ccvNL_info;
           _scvh1::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scvh1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucvOj; else goto ccvNM;
       ucvOj: // global
           call _ccvNL(R1) args: 0, res: 0, upd: 0;
       ccvNM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvNF_info" {
     block_ccvNF_info:
         const _ccvNF;
         const 1;
         const 30;
 },
 _ccvNL() //  [R1]
         { []
         }
     {offset
       ccvNL: // global
           _scvh1::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccvOb; else goto ccvOe;
       ccvOb: // global
           R1 = _scvh1::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccvOe: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccvOh; else goto ccvOg;
       ccvOh: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvOg: // global
           I64[Hp - 72] = sat_scvh6_info;
           _scvgY::P64 = P64[Sp + 16];
           P64[Hp - 56] = _scvgY::P64;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl_rcsmT_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scvgY::P64;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _scvh1::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvNL_info" {
     block_ccvNL_info:
         const _ccvNL;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.640923941 UTC

[section ""data" . lvl2_rcsmX_closure" {
     lvl2_rcsmX_closure:
         const GHC.Types.C#_con_info;
         const 44;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.642873098 UTC

[section ""cstring" . lvl3_rcsmY_bytes" {
     lvl3_rcsmY_bytes:
         I8[] [45]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.645167874 UTC

[section ""cstring" . lvl4_rcsmZ_bytes" {
     lvl4_rcsmZ_bytes:
         I8[] [91]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.647392371 UTC

[section ""cstring" . lvl5_rcsn0_bytes" {
     lvl5_rcsn0_bytes:
         I8[] [93]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.64914355 UTC

[section ""cstring" . lvl6_rcsn1_bytes" {
     lvl6_rcsn1_bytes:
         I8[] [45,45]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.650839803 UTC

[section ""cstring" . lvl7_rcsn2_bytes" {
     lvl7_rcsn2_bytes:
         I8[] [91,61]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.652604254 UTC

[section ""cstring" . lvl8_rcsn3_bytes" {
     lvl8_rcsn3_bytes:
         I8[] [32,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.659337915 UTC

[section ""data" . System.Console.GetOpt.usageInfo_go2_closure" {
     System.Console.GetOpt.usageInfo_go2_closure:
         const System.Console.GetOpt.usageInfo_go2_info;
 },
 sat_scvhq_entry() //  [R1]
         { []
         }
     {offset
       ccvPq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvPr; else goto ccvPs;
       ccvPr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvPs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_go2_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvhq_info" {
     sat_scvhq_info:
         const sat_scvhq_entry;
         const 3;
         const 15;
 },
 sat_scvhl_entry() //  [R1]
         { []
         }
     {offset
       ccvPN: // global
           R3 = P64[R1 + 16];
           R2 = lvl8_rcsn3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scvhl_info" {
     sat_scvhl_info:
         const sat_scvhl_entry;
         const 1;
         const 16;
 },
 sat_scvhm_entry() //  [R1]
         { []
         }
     {offset
       ccvPQ: // global
           _scvhm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccvPR; else goto ccvPS;
       ccvPS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccvPU; else goto ccvPT;
       ccvPU: // global
           HpAlloc = 24;
           goto ccvPR;
       ccvPR: // global
           R1 = _scvhm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvPT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvhm::P64;
           _scvhg::P64 = P64[_scvhm::P64 + 16];
           _scvhj::P64 = P64[_scvhm::P64 + 24];
           I64[Hp - 16] = sat_scvhl_info;
           P64[Hp] = _scvhj::P64;
           R3 = Hp - 16;
           R2 = _scvhg::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvhm_info" {
     sat_scvhm_info:
         const sat_scvhm_entry;
         const 2;
         const 18;
 },
 sat_scvhn_entry() //  [R1]
         { []
         }
     {offset
       ccvPV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccvPZ; else goto ccvPY;
       ccvPZ: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvPY: // global
           _scvhg::P64 = P64[R1 + 16];
           _scvhj::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scvhm_info;
           P64[Hp - 8] = _scvhg::P64;
           P64[Hp] = _scvhj::P64;
           R3 = Hp - 24;
           R2 = lvl8_rcsn3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scvhn_info" {
     sat_scvhn_info:
         const sat_scvhn_entry;
         const 2;
         const 18;
 },
 sat_scvho_entry() //  [R1]
         { []
         }
     {offset
       ccvQ0: // global
           _scvho::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccvQ1; else goto ccvQ2;
       ccvQ2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccvQ4; else goto ccvQ3;
       ccvQ4: // global
           HpAlloc = 32;
           goto ccvQ1;
       ccvQ1: // global
           R1 = _scvho::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvQ3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvho::P64;
           _scvhd::P64 = P64[_scvho::P64 + 16];
           _scvhg::P64 = P64[_scvho::P64 + 24];
           _scvhj::P64 = P64[_scvho::P64 + 32];
           I64[Hp - 24] = sat_scvhn_info;
           P64[Hp - 8] = _scvhg::P64;
           P64[Hp] = _scvhj::P64;
           R3 = Hp - 24;
           R2 = _scvhd::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvho_info" {
     sat_scvho_info:
         const sat_scvho_entry;
         const 3;
         const 15;
 },
 sat_scvhp_entry() //  [R1]
         { []
         }
     {offset
       ccvQ5: // global
           _scvhp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccvQ6; else goto ccvQ7;
       ccvQ7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccvQ9; else goto ccvQ8;
       ccvQ9: // global
           HpAlloc = 40;
           goto ccvQ6;
       ccvQ6: // global
           R1 = _scvhp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvQ8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvhp::P64;
           _scvhd::P64 = P64[_scvhp::P64 + 16];
           _scvhg::P64 = P64[_scvhp::P64 + 24];
           _scvhj::P64 = P64[_scvhp::P64 + 32];
           I64[Hp - 32] = sat_scvho_info;
           P64[Hp - 16] = _scvhd::P64;
           P64[Hp - 8] = _scvhg::P64;
           P64[Hp] = _scvhj::P64;
           R3 = Hp - 32;
           R2 = lvl8_rcsn3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvhp_info" {
     sat_scvhp_info:
         const sat_scvhp_entry;
         const 3;
         const 15;
 },
 System.Console.GetOpt.usageInfo_go2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       ccvQe: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccvQf; else goto ccvQg;
       ccvQf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo_go2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvQg: // global
           I64[Sp - 24] = block_ccvP4_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucvQJ; else goto ccvP5;
       ucvQJ: // global
           call _ccvP4(R1) args: 0, res: 0, upd: 0;
       ccvP5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.usageInfo_go2_info" {
     System.Console.GetOpt.usageInfo_go2_info:
         const System.Console.GetOpt.usageInfo_go2_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _ccvP4() //  [R1]
         { []
         }
     {offset
       ccvP4: // global
           if (R1 & 7 == 1) goto ucvQB; else goto ccvQc;
       ucvQB: // global
           Sp = Sp + 24;
           call _ccvQt() args: 0, res: 0, upd: 0;
       ccvQc: // global
           I64[Sp - 8] = block_ccvPa_info;
           _scvhd::P64 = P64[R1 + 6];
           _scvhe::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _scvhe::P64;
           P64[Sp + 8] = _scvhd::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucvQE; else goto ccvPb;
       ucvQE: // global
           call _ccvPa(R1) args: 0, res: 0, upd: 0;
       ccvPb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvP4_info" {
     block_ccvP4_info:
         const _ccvP4;
         const 2;
         const 30;
 },
 _ccvPa() //  [R1]
         { []
         }
     {offset
       ccvPa: // global
           if (R1 & 7 == 1) goto ucvQC; else goto ccvQp;
       ucvQC: // global
           Sp = Sp + 32;
           call _ccvQt() args: 0, res: 0, upd: 0;
       ccvQp: // global
           I64[Sp - 8] = block_ccvPg_info;
           _scvhg::P64 = P64[R1 + 6];
           _scvhh::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp] = _scvhh::P64;
           P64[Sp + 24] = _scvhg::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucvQG; else goto ccvPh;
       ucvQG: // global
           call _ccvPg(R1) args: 0, res: 0, upd: 0;
       ccvPh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvPa_info" {
     block_ccvPa_info:
         const _ccvPa;
         const 3;
         const 30;
 },
 _ccvPg() //  [R1]
         { []
         }
     {offset
       ccvPg: // global
           if (R1 & 7 == 1) goto ucvQD; else goto ccvQv;
       ucvQD: // global
           Sp = Sp + 40;
           call _ccvQt() args: 0, res: 0, upd: 0;
       ccvQv: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccvQy; else goto ccvQx;
       ccvQy: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvQx: // global
           _scvhj::P64 = P64[R1 + 6];
           _scvhk::P64 = P64[R1 + 14];
           I64[Hp - 96] = sat_scvhq_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _scvhk::P64;
           I64[Hp - 56] = sat_scvhp_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _scvhj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvPg_info" {
     block_ccvPg_info:
         const _ccvPg;
         const 4;
         const 30;
 },
 _ccvQt() //  []
         { []
         }
     {offset
       ccvQt: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.681221696 UTC

[section ""cstring" . lvl9_rcsn4_bytes" {
     lvl9_rcsn4_bytes:
         I8[] [32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.68358457 UTC

[section ""data" . lvl10_rcsn5_closure" {
     lvl10_rcsn5_closure:
         const lvl10_rcsn5_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_rcsn5_entry() //  [R1]
         { []
         }
     {offset
       ccvRZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvS0; else goto ccvS1;
       ccvS0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvS1: // global
           (_ccvRW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccvRW::I64 == 0) goto ccvRY; else goto ccvRX;
       ccvRY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccvRX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccvRW::I64;
           R2 = lvl5_rcsn0_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl10_rcsn5_info" {
     lvl10_rcsn5_info:
         const lvl10_rcsn5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.687171816 UTC

[section ""cstring" . lvl11_rcsn6_bytes" {
     lvl11_rcsn6_bytes:
         I8[] [61]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.70209289 UTC

[section ""data" . System.Console.GetOpt.usageInfo1_closure" {
     System.Console.GetOpt.usageInfo1_closure:
         const System.Console.GetOpt.usageInfo1_info;
         const 0;
 },
 b2_scvhA_entry() //  [R1]
         { []
         }
     {offset
       ccvSx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccvSy; else goto ccvSz;
       ccvSy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvSz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccvSu_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.usageInfo1_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . b2_scvhA_info" {
     b2_scvhA_info:
         const b2_scvhA_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+16;
 },
 _ccvSu() //  [R1, R2, R3]
         { []
         }
     {offset
       ccvSu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccvSC; else goto ccvSB;
       ccvSC: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 24;
       ccvSB: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccvSu_info" {
     block_ccvSu_info:
         const _ccvSu;
         const 0;
         const 30;
 },
 sat_scvhM_entry() //  [R1]
         { []
         }
     {offset
       ccvSW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvSX; else goto ccvSY;
       ccvSX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvSY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl9_rcsn4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvhM_info" {
     sat_scvhM_info:
         const sat_scvhM_entry;
         const 1;
         const 16;
 },
 sat_scvhQ_entry() //  [R1]
         { []
         }
     {offset
       ccvT9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvTa; else goto ccvTb;
       ccvTa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvTb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl10_rcsn5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvhQ_info" {
     sat_scvhQ_info:
         const sat_scvhQ_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+24;
 },
 sat_scvhR_entry() //  [R1]
         { []
         }
     {offset
       ccvTc: // global
           _scvhR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccvTd; else goto ccvTe;
       ccvTe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccvTg; else goto ccvTf;
       ccvTg: // global
           HpAlloc = 24;
           goto ccvTd;
       ccvTd: // global
           R1 = _scvhR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvTf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvhR::P64;
           _scvhP::P64 = P64[_scvhR::P64 + 16];
           I64[Hp - 16] = sat_scvhQ_info;
           P64[Hp] = _scvhP::P64;
           R3 = Hp - 16;
           R2 = lvl4_rcsmZ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvhR_info" {
     sat_scvhR_info:
         const sat_scvhR_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+24;
 },
 sat_scvhT_entry() //  [R1, R2]
         { []
         }
     {offset
       ccvTm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvTn; else goto ccvTo;
       ccvTn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvTo: // global
           I64[Sp - 16] = block_ccvSM_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvTD; else goto ccvSN;
       ucvTD: // global
           call _ccvSM(R1) args: 0, res: 0, upd: 0;
       ccvSN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scvhT_info" {
     sat_scvhT_info:
         const sat_scvhT_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const ScvMa_srt+24;
 },
 _ccvSM() //  [R1]
         { []
         }
     {offset
       ccvSM: // global
           _scvhG::P64 = P64[Sp + 8];
           _ccvTl::P64 = R1 & 7;
           if (_ccvTl::P64 < 3) goto ucvTC; else goto ccvTk;
       ucvTC: // global
           if (_ccvTl::P64 < 2) goto ccvTi; else goto ccvTj;
       ccvTi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccvTt; else goto ccvTs;
       ccvTt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvTs: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scvhG::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R3 = Hp - 14;
           R2 = lvl3_rcsmY_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccvTj: // global
           Hp = Hp + 48;
           _scvhH::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvTB; else goto ccvTw;
       ccvTw: // global
           _scvhL::P64 = P64[_scvhH::P64 + 14];
           I64[Hp - 40] = sat_scvhM_info;
           P64[Hp - 24] = _scvhL::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scvhG::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = lvl3_rcsmY_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccvTk: // global
           Hp = Hp + 48;
           _scvhH::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvTB; else goto ccvTA;
       ccvTB: // global
           HpAlloc = 48;
           R1 = _scvhH::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvTA: // global
           _scvhP::P64 = P64[_scvhH::P64 + 13];
           I64[Hp - 40] = sat_scvhR_info;
           P64[Hp - 24] = _scvhP::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scvhG::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = lvl3_rcsmY_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvSM_info" {
     block_ccvSM_info:
         const _ccvSM;
         const 1;
         const 4294967326;
         const ScvMa_srt+24;
 },
 sosFmt_scvhF_entry() //  [R1]
         { []
         }
     {offset
       ccvTG: // global
           _scvhF::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccvTH; else goto ccvTI;
       ccvTI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvTK; else goto ccvTJ;
       ccvTK: // global
           HpAlloc = 16;
           goto ccvTH;
       ccvTH: // global
           R1 = _scvhF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvTJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvhF::P64;
           _scvhw::P64 = P64[_scvhF::P64 + 16];
           _scvhy::P64 = P64[_scvhF::P64 + 24];
           I64[Hp - 8] = sat_scvhT_info;
           P64[Hp] = _scvhy::P64;
           I64[Sp - 24] = block_ccvTE_info;
           R3 = _scvhw::P64;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sosFmt_scvhF_info" {
     sosFmt_scvhF_info:
         const sosFmt_scvhF_entry;
         const 2;
         const 4294967314;
         const ScvMa_srt+24;
 },
 _ccvTE() //  [R1]
         { []
         }
     {offset
       ccvTE: // global
           R3 = R1;
           R2 = lvl2_rcsmX_closure+1;
           Sp = Sp + 8;
           call sepBy_rcsmW_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccvTE_info" {
     block_ccvTE_info:
         const _ccvTE;
         const 0;
         const 30;
 },
 sat_scvi1_entry() //  [R1]
         { []
         }
     {offset
       ccvUb: // global
           R3 = P64[R1 + 16];
           R2 = lvl11_rcsn6_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scvi1_info" {
     sat_scvi1_info:
         const sat_scvi1_entry;
         const 1;
         const 16;
 },
 sat_scvi2_entry() //  [R1]
         { []
         }
     {offset
       ccvUe: // global
           _scvi2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccvUf; else goto ccvUg;
       ccvUg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccvUi; else goto ccvUh;
       ccvUi: // global
           HpAlloc = 24;
           goto ccvUf;
       ccvUf: // global
           R1 = _scvi2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvUh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvi2::P64;
           _scvhW::P64 = P64[_scvi2::P64 + 16];
           _scvi0::P64 = P64[_scvi2::P64 + 24];
           I64[Hp - 16] = sat_scvi1_info;
           P64[Hp] = _scvi0::P64;
           R3 = Hp - 16;
           R2 = _scvhW::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvi2_info" {
     sat_scvi2_info:
         const sat_scvi2_entry;
         const 2;
         const 18;
 },
 sat_scvi5_entry() //  [R1]
         { []
         }
     {offset
       ccvUx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvUy; else goto ccvUz;
       ccvUy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvUz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl10_rcsn5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvi5_info" {
     sat_scvi5_info:
         const sat_scvi5_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+24;
 },
 sat_scvi6_entry() //  [R1]
         { []
         }
     {offset
       ccvUA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccvUE; else goto ccvUD;
       ccvUE: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvUD: // global
           _scvi4::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scvi5_info;
           P64[Hp] = _scvi4::P64;
           R3 = Hp - 16;
           R2 = lvl7_rcsn2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scvi6_info" {
     sat_scvi6_info:
         const sat_scvi6_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+24;
 },
 sat_scvi7_entry() //  [R1]
         { []
         }
     {offset
       ccvUF: // global
           _scvi7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccvUG; else goto ccvUH;
       ccvUH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccvUJ; else goto ccvUI;
       ccvUJ: // global
           HpAlloc = 24;
           goto ccvUG;
       ccvUG: // global
           R1 = _scvi7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvUI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvi7::P64;
           _scvhW::P64 = P64[_scvi7::P64 + 16];
           _scvi4::P64 = P64[_scvi7::P64 + 24];
           I64[Hp - 16] = sat_scvi6_info;
           P64[Hp] = _scvi4::P64;
           R3 = Hp - 16;
           R2 = _scvhW::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvi7_info" {
     sat_scvi7_info:
         const sat_scvi7_entry;
         const 2;
         const 4294967314;
         const ScvMa_srt+24;
 },
 sat_scvi8_entry() //  [R1, R2]
         { []
         }
     {offset
       ccvUP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvUQ; else goto ccvUR;
       ccvUQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvUR: // global
           I64[Sp - 16] = block_ccvTX_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvV1; else goto ccvTY;
       ucvV1: // global
           call _ccvTX(R1) args: 0, res: 0, upd: 0;
       ccvTY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scvi8_info" {
     sat_scvi8_info:
         const sat_scvi8_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const ScvMa_srt+24;
 },
 _ccvTX() //  [R1]
         { []
         }
     {offset
       ccvTX: // global
           _scvhW::P64 = P64[Sp + 8];
           _ccvUO::P64 = R1 & 7;
           if (_ccvUO::P64 < 3) goto ucvV0; else goto ccvUN;
       ucvV0: // global
           if (_ccvUO::P64 < 2) goto ccvUL; else goto ccvUM;
       ccvUL: // global
           R3 = _scvhW::P64;
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccvUM: // global
           Hp = Hp + 32;
           _scvhX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvUZ; else goto ccvUV;
       ccvUV: // global
           _scvi0::P64 = P64[_scvhX::P64 + 14];
           I64[Hp - 24] = sat_scvi2_info;
           P64[Hp - 8] = _scvhW::P64;
           P64[Hp] = _scvi0::P64;
           R3 = Hp - 24;
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccvUN: // global
           Hp = Hp + 32;
           _scvhX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvUZ; else goto ccvUY;
       ccvUZ: // global
           HpAlloc = 32;
           R1 = _scvhX::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvUY: // global
           _scvi4::P64 = P64[_scvhX::P64 + 13];
           I64[Hp - 24] = sat_scvi7_info;
           P64[Hp - 8] = _scvhW::P64;
           P64[Hp] = _scvi4::P64;
           R3 = Hp - 24;
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvTX_info" {
     block_ccvTX_info:
         const _ccvTX;
         const 1;
         const 4294967326;
         const ScvMa_srt+24;
 },
 losFmt_scvhV_entry() //  [R1]
         { []
         }
     {offset
       ccvV4: // global
           _scvhV::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccvV5; else goto ccvV6;
       ccvV6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvV8; else goto ccvV7;
       ccvV8: // global
           HpAlloc = 16;
           goto ccvV5;
       ccvV5: // global
           R1 = _scvhV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvV7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvhV::P64;
           _scvhx::P64 = P64[_scvhV::P64 + 16];
           _scvhy::P64 = P64[_scvhV::P64 + 24];
           I64[Hp - 8] = sat_scvi8_info;
           P64[Hp] = _scvhy::P64;
           I64[Sp - 24] = block_ccvV2_info;
           R3 = _scvhx::P64;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . losFmt_scvhV_info" {
     losFmt_scvhV_info:
         const losFmt_scvhV_entry;
         const 2;
         const 4294967314;
         const ScvMa_srt+24;
 },
 _ccvV2() //  [R1]
         { []
         }
     {offset
       ccvV2: // global
           R3 = R1;
           R2 = lvl2_rcsmX_closure+1;
           Sp = Sp + 8;
           call sepBy_rcsmW_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccvV2_info" {
     block_ccvV2_info:
         const _ccvV2;
         const 0;
         const 30;
 },
 go_scviw_entry() //  [R1, R2]
         { []
         }
     {offset
       ccvVx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccvVy; else goto ccvVz;
       ccvVy: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvVz: // global
           I64[Sp - 24] = block_ccvVq_info;
           _scviw::P64 = R1;
           _scvhA::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _scvhA::P64;
           P64[Sp - 8] = _scviw::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucvVQ; else goto ccvVr;
       ucvVQ: // global
           call _ccvVq(R1) args: 0, res: 0, upd: 0;
       ccvVr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_scviw_info" {
     go_scviw_info:
         const go_scviw_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _ccvVq() //  [R1]
         { []
         }
     {offset
       ccvVq: // global
           if (R1 & 7 == 1) goto ccvVu; else goto ccvVv;
       ccvVu: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccvVv: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto ccvVP; else goto ccvVO;
       ccvVP: // global
           HpAlloc = 208;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvVO: // global
           _scviz::P64 = P64[R1 + 6];
           _scviA::P64 = P64[R1 + 14];
           I64[Hp - 200] = stg_ap_2_upd_info;
           P64[Hp - 184] = P64[Sp + 16];
           P64[Hp - 176] = _scviA::P64;
           I64[Hp - 168] = stg_sel_2_upd_info;
           _ccvVF::P64 = Hp - 200;
           P64[Hp - 152] = _ccvVF::P64;
           I64[Hp - 144] = :_con_info;
           P64[Hp - 136] = _scviz::P64;
           P64[Hp - 128] = Hp - 168;
           I64[Hp - 120] = stg_sel_1_upd_info;
           P64[Hp - 104] = _ccvVF::P64;
           I64[Hp - 96] = :_con_info;
           P64[Hp - 88] = GHC.Types.[]_closure+1;
           P64[Hp - 80] = Hp - 120;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccvVF::P64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           P64[Hp - 32] = Hp - 72;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 46;
           P64[Hp - 8] = Hp - 94;
           P64[Hp] = Hp - 142;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvVq_info" {
     block_ccvVq_info:
         const _ccvVq;
         const 2;
         const 30;
 },
 ds1_scviv_entry() //  [R1]
         { []
         }
     {offset
       ccvVR: // global
           _scviv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccvVS; else goto ccvVT;
       ccvVT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvVV; else goto ccvVU;
       ccvVV: // global
           HpAlloc = 16;
           goto ccvVS;
       ccvVS: // global
           R1 = _scviv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvVU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scviv::P64;
           _scvhA::P64 = P64[_scviv::P64 + 16];
           _scviu::P64 = P64[_scviv::P64 + 24];
           I64[Hp - 8] = go_scviw_info;
           P64[Hp] = _scvhA::P64;
           R2 = _scviu::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call go_scviw_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_scviv_info" {
     ds1_scviv_info:
         const ds1_scviv_entry;
         const 2;
         const 18;
 },
 System.Console.GetOpt.usageInfo1_entry() //  [R2]
         { []
         }
     {offset
       ccvW0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccvW1; else goto ccvW2;
       ccvW1: // global
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvW2: // global
           I64[Sp - 8] = block_ccvSf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucvWx; else goto ccvSg;
       ucvWx: // global
           call _ccvSf(R1) args: 0, res: 0, upd: 0;
       ccvSg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.usageInfo1_info" {
     System.Console.GetOpt.usageInfo1_info:
         const System.Console.GetOpt.usageInfo1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScvMa_srt+16;
 },
 _ccvSf() //  [R1]
         { []
         }
     {offset
       ccvSf: // global
           if (R1 & 7 == 1) goto ccvVX; else goto ccvVY;
       ccvVX: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvVY: // global
           I64[Sp - 8] = block_ccvSl_info;
           _scvhu::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scvhu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucvWw; else goto ccvSm;
       ucvWw: // global
           call _ccvSl(R1) args: 0, res: 0, upd: 0;
       ccvSm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvSf_info" {
     block_ccvSf_info:
         const _ccvSf;
         const 0;
         const 12884901918;
         const ScvMa_srt+16;
 },
 _ccvSl() //  [R1]
         { []
         }
     {offset
       ccvSl: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccvW8; else goto ccvW7;
       ccvW8: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvW7: // global
           _scvhw::P64 = P64[R1 + 7];
           _scvhx::P64 = P64[R1 + 15];
           _scvhy::P64 = P64[R1 + 23];
           _scvhz::P64 = P64[R1 + 31];
           I64[Hp - 80] = b2_scvhA_info;
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = sosFmt_scvhF_info;
           P64[Hp - 40] = _scvhw::P64;
           P64[Hp - 32] = _scvhy::P64;
           I64[Hp - 24] = losFmt_scvhV_info;
           P64[Hp - 8] = _scvhx::P64;
           P64[Hp] = _scvhy::P64;
           I64[Sp - 16] = block_ccvVc_info;
           R2 = _scvhz::P64;
           P64[Sp - 8] = Hp - 24;
           P64[Sp] = Hp - 56;
           P64[Sp + 8] = Hp - 80;
           Sp = Sp - 16;
           call Data.OldList.lines_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvSl_info" {
     block_ccvSl_info:
         const _ccvSl;
         const 1;
         const 12884901918;
         const ScvMa_srt+16;
 },
 _ccvVc() //  [R1]
         { []
         }
     {offset
       ccvVc: // global
           _ccvSq::P64 = P64[Sp + 24];
           _ccvSD::P64 = P64[Sp + 16];
           _ccvTO::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccvWh; else goto ccvWr;
       ccvWh: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccvWk; else goto ccvWj;
       ccvWk: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvWj: // global
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _ccvSq::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = GHC.Types.[]_closure+1;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccvSq::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _ccvTO::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccvSq::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _ccvSD::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvWr: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto ccvWu; else goto ccvWt;
       ccvWu: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvWt: // global
           _scvit::P64 = P64[R1 + 6];
           _scviu::P64 = P64[R1 + 14];
           I64[Hp - 168] = ds1_scviv_info;
           P64[Hp - 152] = _ccvSq::P64;
           P64[Hp - 144] = _scviu::P64;
           I64[Hp - 136] = stg_sel_2_upd_info;
           _ccvVh::P64 = Hp - 168;
           P64[Hp - 120] = _ccvVh::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _scvit::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccvVh::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _ccvTO::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccvVh::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _ccvSD::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccvVc_info" {
     block_ccvVc_info:
         const _ccvVc;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.756027509 UTC

[section ""data" . System.Console.GetOpt.usageInfo_closure" {
     System.Console.GetOpt.usageInfo_closure:
         const System.Console.GetOpt.usageInfo_info;
         const 0;
 },
 sat_scvjj_entry() //  [R1]
         { []
         }
     {offset
       ccvZY: // global
           R2 = P64[R1 + 16];
           call System.Console.GetOpt.usageInfo_sameLen_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scvjj_info" {
     sat_scvjj_info:
         const sat_scvjj_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+8;
 },
 sat_scvjk_entry() //  [R1]
         { []
         }
     {offset
       ccw03: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccw04; else goto ccw05;
       ccw04: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw05: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccvZS_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.usageInfo1_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvjk_info" {
     sat_scvjk_info:
         const sat_scvjk_entry;
         const 1;
         const 12884901904;
         const ScvMa_srt+8;
 },
 _ccvZS() //  [R1, R2, R3]
         { []
         }
     {offset
       ccvZS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccw08; else goto ccw07;
       ccw08: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 24;
       ccw07: // global
           I64[Hp - 16] = sat_scvjj_info;
           P64[Hp] = R2;
           I64[Sp - 16] = block_ccw01_info;
           R2 = R1;
           P64[Sp - 8] = R3;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_sameLen_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccvZS_info" {
     block_ccvZS_info:
         const _ccvZS;
         const 0;
         const 4294967326;
         const ScvMa_srt+8;
 },
 _ccw01() //  [R1]
         { []
         }
     {offset
       ccw01: // global
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = R1;
           Sp = Sp + 24;
           call System.Console.GetOpt.usageInfo_go2_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccw01_info" {
     block_ccw01_info:
         const _ccw01;
         const 2;
         const 30;
 },
 System.Console.GetOpt.usageInfo_entry() //  [R2, R3]
         { []
         }
     {offset
       ccw0d: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccw0h; else goto ccw0g;
       ccw0h: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccw0g: // global
           I64[Hp - 40] = sat_scvjk_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           call Data.OldList.unlines_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.usageInfo_info" {
     System.Console.GetOpt.usageInfo_info:
         const System.Console.GetOpt.usageInfo_entry;
         const 0;
         const 47244640270;
         const 8589934607;
         const ScvMa_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.766203729 UTC

[section ""cstring" . lvl12_rcsn7_bytes" {
     lvl12_rcsn7_bytes:
         I8[] [111,112,116,105,111,110,32,96]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.767900166 UTC

[section ""cstring" . lvl13_rcsn8_bytes" {
     lvl13_rcsn8_bytes:
         I8[] [39,32,105,115,32,97,109,98,105,103,117,111,117,115,59,32,99,111,117,108,100,32,98,101,32,111,110,101,32,111,102,58]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.769754151 UTC

[section ""cstring" . lvl14_rcsn9_bytes" {
     lvl14_rcsn9_bytes:
         I8[] [39,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.771560113 UTC

[section ""cstring" . lvl15_rcsna_bytes" {
     lvl15_rcsna_bytes:
         I8[] [10]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.774102409 UTC

[section ""data" . lvl16_rcsnb_closure" {
     lvl16_rcsnb_closure:
         const lvl16_rcsnb_info;
         const 0;
         const 0;
         const 0;
 },
 lvl16_rcsnb_entry() //  [R1]
         { []
         }
     {offset
       ccw0R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw0S; else goto ccw0T;
       ccw0S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw0T: // global
           (_ccw0O::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccw0O::I64 == 0) goto ccw0Q; else goto ccw0P;
       ccw0Q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccw0P: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccw0O::I64;
           R2 = lvl15_rcsna_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl16_rcsnb_info" {
     lvl16_rcsnb_info:
         const lvl16_rcsnb_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.779059388 UTC

[section ""cstring" . System.Console.GetOpt.getOpt2_bytes" {
     System.Console.GetOpt.getOpt2_bytes:
         I8[] [117,110,114,101,99,111,103,110,105,122,101,100,32,111,112,116,105,111,110,32,96]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.780902728 UTC

[section ""cstring" . System.Console.GetOpt.getOpt1_bytes" {
     System.Console.GetOpt.getOpt1_bytes:
         I8[] [39,10]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.783257057 UTC

[section ""data" . lvl17_rcsnc_closure" {
     lvl17_rcsnc_closure:
         const lvl17_rcsnc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl17_rcsnc_entry() //  [R1]
         { []
         }
     {offset
       ccw1a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw1b; else goto ccw1c;
       ccw1b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw1c: // global
           (_ccw17::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccw17::I64 == 0) goto ccw19; else goto ccw18;
       ccw19: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccw18: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccw17::I64;
           R2 = System.Console.GetOpt.getOpt1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_rcsnc_info" {
     lvl17_rcsnc_info:
         const lvl17_rcsnc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.788212684 UTC

[section ""data" . System.Console.GetOpt.errUnrec_closure" {
     System.Console.GetOpt.errUnrec_closure:
         const System.Console.GetOpt.errUnrec_info;
         const 0;
 },
 sat_scvjn_entry() //  [R1]
         { []
         }
     {offset
       ccw1t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw1u; else goto ccw1v;
       ccw1u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw1v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl17_rcsnc_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvjn_info" {
     sat_scvjn_info:
         const sat_scvjn_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+40;
 },
 System.Console.GetOpt.errUnrec_entry() //  [R2]
         { []
         }
     {offset
       ccw1w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccw1A; else goto ccw1z;
       ccw1A: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = System.Console.GetOpt.errUnrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccw1z: // global
           I64[Hp - 16] = sat_scvjn_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = System.Console.GetOpt.getOpt2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.errUnrec_info" {
     System.Console.GetOpt.errUnrec_info:
         const System.Console.GetOpt.errUnrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScvMa_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.794720233 UTC

[section ""cstring" . lvl18_rcsnd_bytes" {
     lvl18_rcsnd_bytes:
         I8[] [39,32,100,111,101,115,110,39,116,32,97,108,108,111,119,32,97,110,32,97,114,103,117,109,101,110,116,10]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.796889177 UTC

[section ""data" . lvl19_rcsne_closure" {
     lvl19_rcsne_closure:
         const lvl19_rcsne_info;
 },
 lvl19_rcsne_entry() //  [R2, R3]
         { []
         }
     {offset
       ccw1Q: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           call Data.OldList.isPrefixOf_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl19_rcsne_info" {
     lvl19_rcsne_info:
         const lvl19_rcsne_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.800863626 UTC

[section ""data" . lvl20_rcsnf_closure" {
     lvl20_rcsnf_closure:
         const lvl20_rcsnf_info;
 },
 lvl20_rcsnf_entry() //  [R2]
         { []
         }
     {offset
       ccw24: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccw25; else goto ccw26;
       ccw25: // global
           R2 = R2;
           R1 = lvl20_rcsnf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccw26: // global
           I64[Sp - 8] = block_ccw21_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucw2e; else goto ccw22;
       ucw2e: // global
           call _ccw21(R1) args: 0, res: 0, upd: 0;
       ccw22: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl20_rcsnf_info" {
     lvl20_rcsnf_info:
         const lvl20_rcsnf_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccw21() //  [R1]
         { []
         }
     {offset
       ccw21: // global
           if (I64[R1 + 7] == 61) goto ccw2d; else goto ccw2c;
       ccw2d: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccw2c: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw21_info" {
     block_ccw21_info:
         const _ccw21;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.806009224 UTC

[section ""data" . lvl21_rcsng_closure" {
     lvl21_rcsng_closure:
         const GHC.Types.C#_con_info;
         const 45;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.808436411 UTC

[section ""data" . lvl22_rcsnh_closure" {
     lvl22_rcsnh_closure:
         const lvl22_rcsnh_info;
         const 0;
         const 0;
         const 0;
 },
 lvl22_rcsnh_entry() //  [R1]
         { []
         }
     {offset
       ccw2A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw2B; else goto ccw2C;
       ccw2B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw2C: // global
           (_ccw2x::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccw2x::I64 == 0) goto ccw2z; else goto ccw2y;
       ccw2z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccw2y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccw2x::I64;
           R2 = lvl18_rcsnd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl22_rcsnh_info" {
     lvl22_rcsnh_info:
         const lvl22_rcsnh_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.812161616 UTC

[section ""cstring" . lvl23_rcsni_bytes" {
     lvl23_rcsni_bytes:
         I8[] [111,112,116,105,111,110,32,96,45,45]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.81561881 UTC

[section ""data" . poly_go_rcsnj_closure" {
     poly_go_rcsnj_closure:
         const poly_go_rcsnj_info;
 },
 sat_scvjB_entry() //  [R1]
         { []
         }
     {offset
       ccw35: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw36; else goto ccw37;
       ccw36: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw37: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go_rcsnj_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvjB_info" {
     sat_scvjB_info:
         const sat_scvjB_entry;
         const 1;
         const 16;
 },
 poly_go_rcsnj_entry() //  [R2]
         { []
         }
     {offset
       ccw3c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw3d; else goto ccw3e;
       ccw3d: // global
           R2 = R2;
           R1 = poly_go_rcsnj_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccw3e: // global
           I64[Sp - 8] = block_ccw2Q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucw3n; else goto ccw2R;
       ucw3n: // global
           call _ccw2Q(R1) args: 0, res: 0, upd: 0;
       ccw2R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . poly_go_rcsnj_info" {
     poly_go_rcsnj_info:
         const poly_go_rcsnj_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccw2Q() //  [R1]
         { []
         }
     {offset
       ccw2Q: // global
           if (R1 & 7 == 1) goto ccw39; else goto ccw3a;
       ccw39: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccw3a: // global
           I64[Sp - 8] = block_ccw2W_info;
           _scvjv::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scvjv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucw3m; else goto ccw2X;
       ucw3m: // global
           call _ccw2W(R1) args: 0, res: 0, upd: 0;
       ccw2X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw2Q_info" {
     block_ccw2Q_info:
         const _ccw2Q;
         const 0;
         const 30;
 },
 _ccw2W() //  [R1]
         { []
         }
     {offset
       ccw2W: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccw3l; else goto ccw3k;
       ccw3l: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccw3k: // global
           _scvjz::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_scvjB_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scvjz::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw2W_info" {
     block_ccw2W_info:
         const _ccw2W;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.826468456 UTC

[section ""data" . lvl24_rcsnk_closure" {
     lvl24_rcsnk_closure:
         const lvl24_rcsnk_info;
         const 0;
         const 0;
         const 0;
 },
 lvl24_rcsnk_entry() //  [R1]
         { []
         }
     {offset
       ccw3X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw3Y; else goto ccw3Z;
       ccw3Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw3Z: // global
           (_ccw3U::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccw3U::I64 == 0) goto ccw3W; else goto ccw3V;
       ccw3W: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccw3V: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccw3U::I64;
           R2 = lvl13_rcsn8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl24_rcsnk_info" {
     lvl24_rcsnk_info:
         const lvl24_rcsnk_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.832050079 UTC

[section ""data" . poly_go1_rcsnl_closure" {
     poly_go1_rcsnl_closure:
         const poly_go1_rcsnl_info;
 },
 sat_scvjL_entry() //  [R1]
         { []
         }
     {offset
       ccw4r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw4s; else goto ccw4t;
       ccw4s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw4t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go1_rcsnl_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvjL_info" {
     sat_scvjL_info:
         const sat_scvjL_entry;
         const 1;
         const 16;
 },
 poly_go1_rcsnl_entry() //  [R2]
         { []
         }
     {offset
       ccw4y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw4z; else goto ccw4A;
       ccw4z: // global
           R2 = R2;
           R1 = poly_go1_rcsnl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccw4A: // global
           I64[Sp - 8] = block_ccw4c_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucw4J; else goto ccw4d;
       ucw4J: // global
           call _ccw4c(R1) args: 0, res: 0, upd: 0;
       ccw4d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . poly_go1_rcsnl_info" {
     poly_go1_rcsnl_info:
         const poly_go1_rcsnl_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccw4c() //  [R1]
         { []
         }
     {offset
       ccw4c: // global
           if (R1 & 7 == 1) goto ccw4v; else goto ccw4w;
       ccw4v: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccw4w: // global
           I64[Sp - 8] = block_ccw4i_info;
           _scvjF::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scvjF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucw4I; else goto ccw4j;
       ucw4I: // global
           call _ccw4i(R1) args: 0, res: 0, upd: 0;
       ccw4j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw4c_info" {
     block_ccw4c_info:
         const _ccw4c;
         const 0;
         const 30;
 },
 _ccw4i() //  [R1]
         { []
         }
     {offset
       ccw4i: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccw4H; else goto ccw4G;
       ccw4H: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccw4G: // global
           _scvjJ::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_scvjL_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scvjJ::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw4i_info" {
     block_ccw4i_info:
         const _ccw4i;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:24.91654317 UTC

[section ""data" . System.Console.GetOpt.$wgetOpt'_closure" {
     System.Console.GetOpt.$wgetOpt'_closure:
         const System.Console.GetOpt.$wgetOpt'_info;
         const 0;
 },
 ds_scvjV_entry() //  [R1]
         { []
         }
     {offset
       ccw5F: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccw5G; else goto ccw5H;
       ccw5G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw5H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccw5C_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_scvjV_info" {
     ds_scvjV_info:
         const ds_scvjV_entry;
         const 2;
         const 4294967314;
         const ScvMa_srt+56;
 },
 _ccw5C() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccw5C: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccw5K; else goto ccw5J;
       ccw5K: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccw5J: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccw5C_info" {
     block_ccw5C_info:
         const _ccw5C;
         const 0;
         const 30;
 },
 ds_scvkr_entry() //  [R1]
         { []
         }
     {offset
       ccw5U: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccw5V; else goto ccw5W;
       ccw5V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw5W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccw5R_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_scvkr_info" {
     ds_scvkr_info:
         const ds_scvkr_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccw5R() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccw5R: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccw5Z; else goto ccw5Y;
       ccw5Z: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccw5Y: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccw5R_info" {
     block_ccw5R_info:
         const _ccw5R;
         const 0;
         const 30;
 },
 sat_scvkx_entry() //  [R1]
         { []
         }
     {offset
       ccw68: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw69; else goto ccw6a;
       ccw69: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw6a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvkx_info" {
     sat_scvkx_info:
         const sat_scvkx_entry;
         const 1;
         const 16;
 },
 ds4_scvl3_entry() //  [R1]
         { []
         }
     {offset
       ccw6x: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccw6y; else goto ccw6z;
       ccw6y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw6z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccw6u_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds4_scvl3_info" {
     ds4_scvl3_info:
         const ds4_scvl3_entry;
         const 2;
         const 4294967314;
         const ScvMa_srt+56;
 },
 _ccw6u() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccw6u: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccw6C; else goto ccw6B;
       ccw6C: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccw6B: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccw6u_info" {
     block_ccw6u_info:
         const _ccw6u;
         const 0;
         const 30;
 },
 ds4_scvlz_entry() //  [R1]
         { []
         }
     {offset
       ccw6M: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccw6N; else goto ccw6O;
       ccw6N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw6O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccw6J_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds4_scvlz_info" {
     ds4_scvlz_info:
         const ds4_scvlz_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccw6J() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccw6J: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccw6R; else goto ccw6Q;
       ccw6R: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccw6Q: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccw6J_info" {
     block_ccw6J_info:
         const _ccw6J;
         const 0;
         const 30;
 },
 ds4_scvm7_entry() //  [R1]
         { []
         }
     {offset
       ccw7b: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccw7c; else goto ccw7d;
       ccw7c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw7d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccw78_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds4_scvm7_info" {
     ds4_scvm7_info:
         const ds4_scvm7_entry;
         const 2;
         const 4294967314;
         const ScvMa_srt+56;
 },
 _ccw78() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccw78: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccw7g; else goto ccw7f;
       ccw7g: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccw7f: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccw78_info" {
     block_ccw78_info:
         const _ccw78;
         const 0;
         const 30;
 },
 ds4_scvmD_entry() //  [R1]
         { []
         }
     {offset
       ccw7q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccw7r; else goto ccw7s;
       ccw7r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw7s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccw7n_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds4_scvmD_info" {
     ds4_scvmD_info:
         const ds4_scvmD_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccw7n() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccw7n: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccw7v; else goto ccw7u;
       ccw7v: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccw7u: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccw7n_info" {
     block_ccw7n_info:
         const _ccw7n;
         const 0;
         const 30;
 },
 go1_scvnp_entry() //  [R1, R2]
         { []
         }
     {offset
       ccw88: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccw89; else goto ucw8y;
       ccw89: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ucw8y: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _ccw7Y() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go1_scvnp_info" {
     go1_scvnp_info:
         const go1_scvnp_entry;
         const 4294967298;
         const 8;
         const 4294967301;
 },
 _ccw7Y() //  []
         { []
         }
     {offset
       ccw7Y: // global
           I64[Sp - 24] = block_ccw81_info;
           R1 = P64[Sp + 8];
           _scvnp::P64 = P64[Sp];
           P64[Sp - 16] = P64[_scvnp::P64 + 7];
           P64[Sp - 8] = P64[_scvnp::P64 + 15];
           I64[Sp + 8] = I64[_scvnp::P64 + 23];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucw8A; else goto ccw82;
       ucw8A: // global
           call _ccw81(R1) args: 0, res: 0, upd: 0;
       ccw82: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccw81() //  [R1]
         { []
         }
     {offset
       ccw81: // global
           if (R1 & 7 == 1) goto ccw85; else goto ccw86;
       ccw85: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccw86: // global
           I64[Sp] = block_ccw8g_info;
           _scvnt::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _scvnt::P64;
           if (R1 & 7 != 0) goto ucw8B; else goto ccw8i;
       ucw8B: // global
           call _ccw8g(R1) args: 0, res: 0, upd: 0;
       ccw8i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw81_info" {
     block_ccw81_info:
         const _ccw81;
         const 516;
         const 30;
 },
 _ccw8g() //  [R1]
         { []
         }
     {offset
       ccw8g: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccw8o; else goto ccw8n;
       ccw8o: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccw8n: // global
           _scvnt::P64 = P64[Sp + 16];
           if (I64[Sp + 32] == I64[R1 + 7]) goto ccw8x; else goto ccw8s;
       ccw8x: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = _scvnt::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccw8s: // global
           Hp = Hp - 56;
           P64[Sp + 32] = _scvnt::P64;
           Sp = Sp + 24;
           call _ccw7Y() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccw8g_info" {
     block_ccw8g_info:
         const _ccw8g;
         const 516;
         const 30;
 },
 go_scvne_entry() //  [R1, R2]
         { []
         }
     {offset
       ccw8I: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccw8J; else goto ccw8K;
       ccw8J: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccw8K: // global
           I64[Sp - 24] = block_ccw7K_info;
           _scvne::P64 = R1;
           _scvnd::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _scvnd::I64;
           P64[Sp - 8] = _scvne::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucw8S; else goto ccw7L;
       ucw8S: // global
           call _ccw7K(R1) args: 0, res: 0, upd: 0;
       ccw7L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_scvne_info" {
     go_scvne_info:
         const go_scvne_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _ccw7K() //  [R1]
         { []
         }
     {offset
       ccw7K: // global
           if (R1 & 7 == 1) goto ccw8F; else goto ccw8G;
       ccw8F: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccw8G: // global
           I64[Sp - 8] = block_ccw7Q_info;
           _scvni::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scvni::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucw8R; else goto ccw7R;
       ucw8R: // global
           call _ccw7Q(R1) args: 0, res: 0, upd: 0;
       ccw7R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw7K_info" {
     block_ccw7K_info:
         const _ccw7K;
         const 66;
         const 30;
 },
 _ccw7Q() //  [R1]
         { []
         }
     {offset
       ccw7Q: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccw8Q; else goto ccw8P;
       ccw8Q: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccw8P: // global
           _scvnk::P64 = P64[R1 + 7];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = go1_scvnp_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = Hp - 56;
           I64[Hp] = I64[Sp + 16];
           R2 = _scvnk::P64;
           R1 = Hp - 23;
           Sp = Sp + 32;
           call go1_scvnp_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw7Q_info" {
     block_ccw7Q_info:
         const _ccw7Q;
         const 131;
         const 30;
 },
 ds8_scvnB_entry() //  [R1]
         { []
         }
     {offset
       ccw9d: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccw9e; else goto ccw9f;
       ccw9e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw9f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccw9a_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds8_scvnB_info" {
     ds8_scvnB_info:
         const ds8_scvnB_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccw9a() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccw9a: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccw9i; else goto ccw9h;
       ccw9i: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccw9h: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccw9a_info" {
     block_ccw9a_info:
         const _ccw9a;
         const 0;
         const 30;
 },
 ds8_scvoa_entry() //  [R1]
         { []
         }
     {offset
       ccw9u: // global
           _scvoa::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccw9v; else goto ccw9w;
       ccw9w: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccw9y; else goto ccw9x;
       ccw9y: // global
           HpAlloc = 48;
           goto ccw9v;
       ccw9v: // global
           R1 = _scvoa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw9x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvoa::P64;
           _scvjM::P64 = P64[_scvoa::P64 + 16];
           _scvjN::P64 = P64[_scvoa::P64 + 24];
           _scvjR::P64 = P64[_scvoa::P64 + 32];
           _scvnA::P64 = P64[_scvoa::P64 + 40];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl21_rcsng_closure+1;
           P64[Hp - 24] = _scvnA::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = _scvjR::P64;
           I64[Sp - 24] = block_ccw9r_info;
           R4 = Hp - 14;
           R3 = _scvjN::P64;
           R2 = _scvjM::P64;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds8_scvoa_info" {
     ds8_scvoa_info:
         const ds8_scvoa_entry;
         const 4;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccw9r() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccw9r: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccw9B; else goto ccw9A;
       ccw9B: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccw9A: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccw9r_info" {
     block_ccw9r_info:
         const _ccw9r;
         const 0;
         const 30;
 },
 ds10_scvoP_entry() //  [R1]
         { []
         }
     {offset
       ccwa0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwa1; else goto ccwa2;
       ccwa1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwa2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccw9X_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds10_scvoP_info" {
     ds10_scvoP_info:
         const ds10_scvoP_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccw9X() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccw9X: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwa5; else goto ccwa4;
       ccwa5: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwa4: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccw9X_info" {
     block_ccw9X_info:
         const _ccw9X;
         const 0;
         const 30;
 },
 ds10_scvpm_entry() //  [R1]
         { []
         }
     {offset
       ccwah: // global
           _scvpm::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccwai; else goto ccwaj;
       ccwaj: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccwal; else goto ccwak;
       ccwal: // global
           HpAlloc = 48;
           goto ccwai;
       ccwai: // global
           R1 = _scvpm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwak: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvpm::P64;
           _scvjM::P64 = P64[_scvpm::P64 + 16];
           _scvjN::P64 = P64[_scvpm::P64 + 24];
           _scvjR::P64 = P64[_scvpm::P64 + 32];
           _scvoO::P64 = P64[_scvpm::P64 + 40];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl21_rcsng_closure+1;
           P64[Hp - 24] = _scvoO::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = _scvjR::P64;
           I64[Sp - 24] = block_ccwae_info;
           R4 = Hp - 14;
           R3 = _scvjN::P64;
           R2 = _scvjM::P64;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds10_scvpm_info" {
     ds10_scvpm_info:
         const ds10_scvpm_entry;
         const 4;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccwae() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwae: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwao; else goto ccwan;
       ccwao: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwan: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwae_info" {
     block_ccwae_info:
         const _ccwae;
         const 0;
         const 30;
 },
 ds11_scvpX_entry() //  [R1]
         { []
         }
     {offset
       ccwaI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwaJ; else goto ccwaK;
       ccwaJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwaK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwaF_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds11_scvpX_info" {
     ds11_scvpX_info:
         const ds11_scvpX_entry;
         const 2;
         const 4294967314;
         const ScvMa_srt+56;
 },
 _ccwaF() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwaF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwaN; else goto ccwaM;
       ccwaN: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwaM: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwaF_info" {
     block_ccwaF_info:
         const _ccwaF;
         const 0;
         const 30;
 },
 sat_scvqn_entry() //  [R1]
         { []
         }
     {offset
       ccwb5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwb6; else goto ccwb7;
       ccwb6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwb7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl16_rcsnb_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvqn_info" {
     sat_scvqn_info:
         const sat_scvqn_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+64;
 },
 sat_scvqo_entry() //  [R1]
         { []
         }
     {offset
       ccwb8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwbc; else goto ccwbb;
       ccwbc: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwbb: // global
           _scvpU::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scvqn_info;
           P64[Hp] = _scvpU::P64;
           R3 = Hp - 16;
           R2 = lvl14_rcsn9_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scvqo_info" {
     sat_scvqo_info:
         const sat_scvqo_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+64;
 },
 sat_scvqp_entry() //  [R1]
         { []
         }
     {offset
       ccwbf: // global
           _scvqp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwbg; else goto ccwbh;
       ccwbh: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccwbj; else goto ccwbi;
       ccwbj: // global
           HpAlloc = 72;
           goto ccwbg;
       ccwbg: // global
           R1 = _scvqp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwbi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvqp::P64;
           _scvnb::P64 = P64[_scvqp::P64 + 16];
           _scvpU::P64 = P64[_scvqp::P64 + 24];
           I64[Hp - 64] = sat_scvqo_info;
           P64[Hp - 48] = _scvpU::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scvnb::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl21_rcsng_closure+1;
           P64[Hp] = Hp - 38;
           R3 = Hp - 64;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvqp_info" {
     sat_scvqp_info:
         const sat_scvqp_entry;
         const 2;
         const 4294967314;
         const ScvMa_srt+64;
 },
 sat_scvqq_entry() //  [R1]
         { []
         }
     {offset
       ccwbk: // global
           _scvqq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwbl; else goto ccwbm;
       ccwbm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccwbo; else goto ccwbn;
       ccwbo: // global
           HpAlloc = 32;
           goto ccwbl;
       ccwbl: // global
           R1 = _scvqq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwbn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvqq::P64;
           _scvnb::P64 = P64[_scvqq::P64 + 16];
           _scvpU::P64 = P64[_scvqq::P64 + 24];
           I64[Hp - 24] = sat_scvqp_info;
           P64[Hp - 8] = _scvnb::P64;
           P64[Hp] = _scvpU::P64;
           R3 = Hp - 24;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvqq_info" {
     sat_scvqq_info:
         const sat_scvqq_entry;
         const 2;
         const 4294967314;
         const ScvMa_srt+64;
 },
 ds11_scvqA_entry() //  [R1]
         { []
         }
     {offset
       ccwby: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwbz; else goto ccwbA;
       ccwbz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwbA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwbv_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds11_scvqA_info" {
     ds11_scvqA_info:
         const ds11_scvqA_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccwbv() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwbv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwbD; else goto ccwbC;
       ccwbD: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwbC: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwbv_info" {
     block_ccwbv_info:
         const _ccwbv;
         const 0;
         const 30;
 },
 ds11_scvr8_entry() //  [R1]
         { []
         }
     {offset
       ccwbN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwbO; else goto ccwbP;
       ccwbO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwbP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwbK_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds11_scvr8_info" {
     ds11_scvr8_info:
         const ds11_scvr8_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccwbK() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwbK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwbS; else goto ccwbR;
       ccwbS: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwbR: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwbK_info" {
     block_ccwbK_info:
         const _ccwbK;
         const 0;
         const 30;
 },
 ds11_scvrH_entry() //  [R1]
         { []
         }
     {offset
       ccwc7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwc8; else goto ccwc9;
       ccwc8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwc9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwc4_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds11_scvrH_info" {
     ds11_scvrH_info:
         const ds11_scvrH_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccwc4() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwc4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwcc; else goto ccwcb;
       ccwcc: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwcb: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwc4_info" {
     block_ccwc4_info:
         const _ccwc4;
         const 0;
         const 30;
 },
 sat_scvrN_entry() //  [R1]
         { []
         }
     {offset
       ccwcl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwcm; else goto ccwcn;
       ccwcm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwcn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvrN_info" {
     sat_scvrN_info:
         const sat_scvrN_entry;
         const 1;
         const 16;
 },
 ds11_scvsf_entry() //  [R1]
         { []
         }
     {offset
       ccwcx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwcy; else goto ccwcz;
       ccwcy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwcz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwcu_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds11_scvsf_info" {
     ds11_scvsf_info:
         const ds11_scvsf_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccwcu() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwcu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwcC; else goto ccwcB;
       ccwcC: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwcB: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwcu_info" {
     block_ccwcu_info:
         const _ccwcu;
         const 0;
         const 30;
 },
 sat_scvsm_entry() //  [R1]
         { []
         }
     {offset
       ccwcM: // global
           _scvsm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwcN; else goto ccwcO;
       ccwcO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccwcQ; else goto ccwcP;
       ccwcQ: // global
           HpAlloc = 16;
           goto ccwcN;
       ccwcN: // global
           R1 = _scvsm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwcP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvsm::P64;
           _scvrE::P64 = P64[_scvsm::P64 + 16];
           _scvrG::P64 = P64[_scvsm::P64 + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _scvrG::P64;
           R2 = Hp - 6;
           R1 = _scvrE::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvsm_info" {
     sat_scvsm_info:
         const sat_scvsm_entry;
         const 2;
         const 18;
 },
 ds12_scvsO_entry() //  [R1]
         { []
         }
     {offset
       ccwd0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwd1; else goto ccwd2;
       ccwd1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwd2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwcX_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds12_scvsO_info" {
     ds12_scvsO_info:
         const ds12_scvsO_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccwcX() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwcX: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwd5; else goto ccwd4;
       ccwd5: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwd4: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwcX_info" {
     block_ccwcX_info:
         const _ccwcX;
         const 0;
         const 30;
 },
 sat_scvte_entry() //  [R1]
         { []
         }
     {offset
       ccwdl: // global
           _scvte::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwdm; else goto ccwdn;
       ccwdn: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccwdp; else goto ccwdo;
       ccwdp: // global
           HpAlloc = 48;
           goto ccwdm;
       ccwdm: // global
           R1 = _scvte::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwdo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvte::P64;
           _scvnb::P64 = P64[_scvte::P64 + 16];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scvnb::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl21_rcsng_closure+1;
           P64[Hp] = Hp - 38;
           R3 = lvl24_rcsnk_closure;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvte_info" {
     sat_scvte_info:
         const sat_scvte_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+72;
 },
 sat_scvtf_entry() //  [R1]
         { []
         }
     {offset
       ccwdq: // global
           _scvtf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwdr; else goto ccwds;
       ccwds: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwdu; else goto ccwdt;
       ccwdu: // global
           HpAlloc = 24;
           goto ccwdr;
       ccwdr: // global
           R1 = _scvtf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwdt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvtf::P64;
           _scvnb::P64 = P64[_scvtf::P64 + 16];
           I64[Hp - 16] = sat_scvte_info;
           P64[Hp] = _scvnb::P64;
           R3 = Hp - 16;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvtf_info" {
     sat_scvtf_info:
         const sat_scvtf_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+72;
 },
 sat_scvtg_entry() //  [R1]
         { []
         }
     {offset
       ccwdv: // global
           _scvtg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwdw; else goto ccwdx;
       ccwdx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwdz; else goto ccwdy;
       ccwdz: // global
           HpAlloc = 24;
           goto ccwdw;
       ccwdw: // global
           R1 = _scvtg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwdy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvtg::P64;
           _scvnb::P64 = P64[_scvtg::P64 + 16];
           _scvny::P64 = P64[_scvtg::P64 + 24];
           I64[Hp - 16] = sat_scvtf_info;
           P64[Hp] = _scvnb::P64;
           R3 = _scvny::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvtg_info" {
     sat_scvtg_info:
         const sat_scvtg_entry;
         const 2;
         const 141733920786;
         const ScvMa_srt+32;
 },
 sat_scvtr_entry() //  [R1]
         { []
         }
     {offset
       ccwdQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwdR; else goto ccwdS;
       ccwdR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwdS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvtr_info" {
     sat_scvtr_info:
         const sat_scvtr_entry;
         const 2;
         const 18;
 },
 ds8_scvtu_entry() //  [R1]
         { []
         }
     {offset
       ccwe2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwe3; else goto ccwe4;
       ccwe3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwe4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwdZ_info;
           R3 = P64[R1 + 16];
           R2 = lvl20_rcsnf_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds8_scvtu_info" {
     ds8_scvtu_info:
         const ds8_scvtu_entry;
         const 1;
         const 16;
 },
 _ccwdZ() //  [R1, R2]
         { []
         }
     {offset
       ccwdZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwe7; else goto ccwe6;
       ccwe7: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccwe6: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwdZ_info" {
     block_ccwdZ_info:
         const _ccwdZ;
         const 0;
         const 30;
 },
 go_scvtF_entry() //  [R1, R2]
         { []
         }
     {offset
       ccwer: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccwes; else goto ucwfr;
       ccwes: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ucwfr: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _ccweh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_scvtF_info" {
     go_scvtF_info:
         const go_scvtF_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _ccweh() //  []
         { []
         }
     {offset
       ccweh: // global
           _scvtE::P64 = P64[P64[Sp] + 7];
           I64[Sp - 8] = block_ccwek_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scvtE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucwfw; else goto ccwel;
       ucwfw: // global
           call _ccwek(R1) args: 0, res: 0, upd: 0;
       ccwel: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccwek() //  [R1]
         { []
         }
     {offset
       ccwek: // global
           if (R1 & 7 == 1) goto ccweo; else goto ccwep;
       ccweo: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccwep: // global
           I64[Sp - 8] = block_ccwez_info;
           _scvtJ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scvtJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucwfx; else goto ccweB;
       ucwfx: // global
           call _ccwez(R1) args: 0, res: 0, upd: 0;
       ccweB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwek_info" {
     block_ccwek_info:
         const _ccwek;
         const 2;
         const 30;
 },
 _ccwez() //  [R1]
         { []
         }
     {offset
       ccwez: // global
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _ccweZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccwez_info" {
     block_ccwez_info:
         const _ccwez;
         const 3;
         const 30;
 },
 _ccweZ() //  []
         { []
         }
     {offset
       ccweZ: // global
           _scvtT::P64 = P64[Sp];
           I64[Sp] = block_ccwf1_info;
           R1 = _scvtT::P64;
           if (R1 & 7 != 0) goto ucwfA; else goto ccwf3;
       ucwfA: // global
           call _ccwf1(R1) args: 0, res: 0, upd: 0;
       ccwf3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccwf1() //  [R1]
         { []
         }
     {offset
       ccwf1: // global
           if (R1 & 7 == 1) goto ccwf9; else goto ccwfe;
       ccwf9: // global
           P64[Sp + 32] = P64[Sp + 16];
           Sp = Sp + 24;
           call _ccweh() args: 0, res: 0, upd: 0;
       ccwfe: // global
           I64[Sp - 8] = block_ccwfc_info;
           R2 = P64[R1 + 6];
           _scvtW::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _scvtW::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwf1_info" {
     block_ccwf1_info:
         const _ccwf1;
         const 4;
         const 30;
 },
 _ccwfc() //  [R1]
         { []
         }
     {offset
       ccwfc: // global
           if (R1 & 7 == 1) goto ccwfk; else goto ucwft;
       ccwfk: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _ccweZ() args: 0, res: 0, upd: 0;
       ucwft: // global
           Sp = Sp + 8;
           call _ccweP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccwfc_info" {
     block_ccwfc_info:
         const _ccwfc;
         const 5;
         const 30;
 },
 _ccweP() //  []
         { []
         }
     {offset
       ccweP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccweV; else goto ccweU;
       ccweV: // global
           HpAlloc = 56;
           I64[Sp] = block_ccweP_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       ccweU: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccweP_info" {
     block_ccweP_info:
         const _ccweP;
         const 516;
         const 30;
 },
 getWith_scvtC_entry() //  [R1, R2]
         { []
         }
     {offset
       ccwfE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccwfI; else goto ccwfH;
       ccwfI: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccwfH: // global
           _scvjN::P64 = P64[R1 + 7];
           _scvty::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = _scvty::P64;
           I64[Hp - 8] = go_scvtF_info;
           P64[Hp] = Hp - 40;
           R2 = _scvjN::P64;
           R1 = Hp - 7;
           call go_scvtF_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . getWith_scvtC_info" {
     getWith_scvtC_info:
         const getWith_scvtC_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 ds9_scvu1_entry() //  [R1]
         { []
         }
     {offset
       ccwfZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwg0; else goto ccwg1;
       ccwg0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwg1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwfW_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds9_scvu1_info" {
     ds9_scvu1_info:
         const ds9_scvu1_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccwfW() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwfW: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwg4; else goto ccwg3;
       ccwg4: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwg3: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwfW_info" {
     block_ccwfW_info:
         const _ccwfW;
         const 0;
         const 30;
 },
 sat_scvuj_entry() //  [R1]
         { []
         }
     {offset
       ccwgb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwgc; else goto ccwgd;
       ccwgc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwgd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvuj_info" {
     sat_scvuj_info:
         const sat_scvuj_entry;
         const 1;
         const 16;
 },
 ds11_scvuG_entry() //  [R1]
         { []
         }
     {offset
       ccwgH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwgI; else goto ccwgJ;
       ccwgI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwgJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwgE_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds11_scvuG_info" {
     ds11_scvuG_info:
         const ds11_scvuG_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccwgE() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwgE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwgM; else goto ccwgL;
       ccwgM: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwgL: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwgE_info" {
     block_ccwgE_info:
         const _ccwgE;
         const 0;
         const 30;
 },
 ds15_scvvg_entry() //  [R1]
         { []
         }
     {offset
       ccwh3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwh4; else goto ccwh5;
       ccwh4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwh5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwh0_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds15_scvvg_info" {
     ds15_scvvg_info:
         const ds15_scvvg_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccwh0() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwh0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwh8; else goto ccwh7;
       ccwh8: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwh7: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwh0_info" {
     block_ccwh0_info:
         const _ccwh0;
         const 0;
         const 30;
 },
 sat_scvvy_entry() //  [R1]
         { []
         }
     {offset
       ccwhf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwhg; else goto ccwhh;
       ccwhg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwhh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvvy_info" {
     sat_scvvy_info:
         const sat_scvvy_entry;
         const 1;
         const 16;
 },
 ds15_scvvM_entry() //  [R1]
         { []
         }
     {offset
       ccwhq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwhr; else goto ccwhs;
       ccwhr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwhs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwhn_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds15_scvvM_info" {
     ds15_scvvM_info:
         const ds15_scvvM_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccwhn() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwhn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwhv; else goto ccwhu;
       ccwhv: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwhu: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwhn_info" {
     block_ccwhn_info:
         const _ccwhn;
         const 0;
         const 30;
 },
 sat_scvwa_entry() //  [R1]
         { []
         }
     {offset
       ccwhF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwhG; else goto ccwhH;
       ccwhG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwhH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl22_rcsnh_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvwa_info" {
     sat_scvwa_info:
         const sat_scvwa_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+80;
 },
 sat_scvwb_entry() //  [R1]
         { []
         }
     {offset
       ccwhI: // global
           _scvwb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwhJ; else goto ccwhK;
       ccwhK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwhM; else goto ccwhL;
       ccwhM: // global
           HpAlloc = 24;
           goto ccwhJ;
       ccwhJ: // global
           R1 = _scvwb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwhL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvwb::P64;
           _scvty::P64 = P64[_scvwb::P64 + 16];
           I64[Hp - 16] = sat_scvwa_info;
           P64[Hp] = _scvty::P64;
           R3 = Hp - 16;
           R2 = lvl23_rcsni_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvwb_info" {
     sat_scvwb_info:
         const sat_scvwb_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+80;
 },
 ds12_scvwq_entry() //  [R1]
         { []
         }
     {offset
       ccwib: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwic; else goto ccwid;
       ccwic: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwid: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwi8_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds12_scvwq_info" {
     ds12_scvwq_info:
         const ds12_scvwq_entry;
         const 2;
         const 4294967314;
         const ScvMa_srt+56;
 },
 _ccwi8() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwi8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwig; else goto ccwif;
       ccwig: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwif: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwi8_info" {
     block_ccwi8_info:
         const _ccwi8;
         const 0;
         const 30;
 },
 sat_scvwP_entry() //  [R1]
         { []
         }
     {offset
       ccwiy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwiz; else goto ccwiA;
       ccwiz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwiA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl16_rcsnb_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvwP_info" {
     sat_scvwP_info:
         const sat_scvwP_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+64;
 },
 sat_scvwQ_entry() //  [R1]
         { []
         }
     {offset
       ccwiB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwiF; else goto ccwiE;
       ccwiF: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwiE: // global
           _scvwk::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scvwP_info;
           P64[Hp] = _scvwk::P64;
           R3 = Hp - 16;
           R2 = lvl14_rcsn9_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scvwQ_info" {
     sat_scvwQ_info:
         const sat_scvwQ_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+64;
 },
 sat_scvwR_entry() //  [R1]
         { []
         }
     {offset
       ccwiI: // global
           _scvwR::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto ccwiJ; else goto ccwiK;
       ccwiK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwiM; else goto ccwiL;
       ccwiM: // global
           HpAlloc = 24;
           goto ccwiJ;
       ccwiJ: // global
           R1 = _scvwR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwiL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvwR::P64;
           _scvty::P64 = P64[_scvwR::P64 + 16];
           _scvwk::P64 = P64[_scvwR::P64 + 24];
           I64[Hp - 16] = sat_scvwQ_info;
           P64[Hp] = _scvwk::P64;
           I64[Sp - 32] = block_ccwiG_info;
           R3 = _scvty::P64;
           R2 = lvl6_rcsn1_bytes;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvwR_info" {
     sat_scvwR_info:
         const sat_scvwR_entry;
         const 2;
         const 4294967314;
         const ScvMa_srt+64;
 },
 _ccwiG() //  [R1]
         { []
         }
     {offset
       ccwiG: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwiG_info" {
     block_ccwiG_info:
         const _ccwiG;
         const 1;
         const 30;
 },
 sat_scvwS_entry() //  [R1]
         { []
         }
     {offset
       ccwiQ: // global
           _scvwS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwiR; else goto ccwiS;
       ccwiS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccwiU; else goto ccwiT;
       ccwiU: // global
           HpAlloc = 32;
           goto ccwiR;
       ccwiR: // global
           R1 = _scvwS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwiT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvwS::P64;
           _scvty::P64 = P64[_scvwS::P64 + 16];
           _scvwk::P64 = P64[_scvwS::P64 + 24];
           I64[Hp - 24] = sat_scvwR_info;
           P64[Hp - 8] = _scvty::P64;
           P64[Hp] = _scvwk::P64;
           R3 = Hp - 24;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvwS_info" {
     sat_scvwS_info:
         const sat_scvwS_entry;
         const 2;
         const 4294967314;
         const ScvMa_srt+64;
 },
 ds12_scvx2_entry() //  [R1]
         { []
         }
     {offset
       ccwj4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwj5; else goto ccwj6;
       ccwj5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwj6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwj1_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds12_scvx2_info" {
     ds12_scvx2_info:
         const ds12_scvx2_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccwj1() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwj1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwj9; else goto ccwj8;
       ccwj9: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwj8: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwj1_info" {
     block_ccwj1_info:
         const _ccwj1;
         const 0;
         const 30;
 },
 ds15_scvxD_entry() //  [R1]
         { []
         }
     {offset
       ccwjq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwjr; else goto ccwjs;
       ccwjr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwjs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwjn_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds15_scvxD_info" {
     ds15_scvxD_info:
         const ds15_scvxD_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccwjn() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwjn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwjv; else goto ccwju;
       ccwjv: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwju: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwjn_info" {
     block_ccwjn_info:
         const _ccwjn;
         const 0;
         const 30;
 },
 sat_scvxV_entry() //  [R1]
         { []
         }
     {offset
       ccwjC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwjD; else goto ccwjE;
       ccwjD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwjE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvxV_info" {
     sat_scvxV_info:
         const sat_scvxV_entry;
         const 1;
         const 16;
 },
 ds15_scvy9_entry() //  [R1]
         { []
         }
     {offset
       ccwjN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwjO; else goto ccwjP;
       ccwjO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwjP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwjK_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds15_scvy9_info" {
     ds15_scvy9_info:
         const ds15_scvy9_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccwjK() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwjK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwjS; else goto ccwjR;
       ccwjS: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwjR: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwjK_info" {
     block_ccwjK_info:
         const _ccwjK;
         const 0;
         const 30;
 },
 ds12_scvyL_entry() //  [R1]
         { []
         }
     {offset
       ccwkc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwkd; else goto ccwke;
       ccwkd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwke: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwk9_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds12_scvyL_info" {
     ds12_scvyL_info:
         const ds12_scvyL_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccwk9() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwk9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwkh; else goto ccwkg;
       ccwkh: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwkg: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwk9_info" {
     block_ccwk9_info:
         const _ccwk9;
         const 0;
         const 30;
 },
 sat_scvyR_entry() //  [R1]
         { []
         }
     {offset
       ccwkq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwkr; else goto ccwks;
       ccwkr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwks: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvyR_info" {
     sat_scvyR_info:
         const sat_scvyR_entry;
         const 1;
         const 16;
 },
 ds15_scvzm_entry() //  [R1]
         { []
         }
     {offset
       ccwkJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwkK; else goto ccwkL;
       ccwkK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwkL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwkG_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds15_scvzm_info" {
     ds15_scvzm_info:
         const ds15_scvzm_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccwkG() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwkG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwkO; else goto ccwkN;
       ccwkO: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwkN: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwkG_info" {
     block_ccwkG_info:
         const _ccwkG;
         const 0;
         const 30;
 },
 sat_scvzE_entry() //  [R1]
         { []
         }
     {offset
       ccwkV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwkW; else goto ccwkX;
       ccwkW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwkX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvzE_info" {
     sat_scvzE_info:
         const sat_scvzE_entry;
         const 1;
         const 16;
 },
 ds15_scvzS_entry() //  [R1]
         { []
         }
     {offset
       ccwl6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwl7; else goto ccwl8;
       ccwl7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwl8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwl3_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds15_scvzS_info" {
     ds15_scvzS_info:
         const ds15_scvzS_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccwl3() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwl3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwlb; else goto ccwla;
       ccwlb: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwla: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwl3_info" {
     block_ccwl3_info:
         const _ccwl3;
         const 0;
         const 30;
 },
 sat_scvzZ_entry() //  [R1]
         { []
         }
     {offset
       ccwll: // global
           _scvzZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwlm; else goto ccwln;
       ccwln: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccwlp; else goto ccwlo;
       ccwlp: // global
           HpAlloc = 16;
           goto ccwlm;
       ccwlm: // global
           R1 = _scvzZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwlo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvzZ::P64;
           _scvyF::P64 = P64[_scvzZ::P64 + 16];
           _scvzi::P64 = P64[_scvzZ::P64 + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _scvzi::P64;
           R2 = Hp - 6;
           R1 = _scvyF::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvzZ_info" {
     sat_scvzZ_info:
         const sat_scvzZ_entry;
         const 2;
         const 18;
 },
 ds13_scvAr_entry() //  [R1]
         { []
         }
     {offset
       ccwlz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwlA; else goto ccwlB;
       ccwlA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwlB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwlw_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds13_scvAr_info" {
     ds13_scvAr_info:
         const ds13_scvAr_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccwlw() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwlw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwlE; else goto ccwlD;
       ccwlE: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwlD: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwlw_info" {
     block_ccwlw_info:
         const _ccwlw;
         const 0;
         const 30;
 },
 sat_scvAQ_entry() //  [R1]
         { []
         }
     {offset
       ccwlU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwlV; else goto ccwlW;
       ccwlV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwlW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwlS_info;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvAQ_info" {
     sat_scvAQ_info:
         const sat_scvAQ_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+72;
 },
 _ccwlS() //  [R1]
         { []
         }
     {offset
       ccwlS: // global
           R3 = lvl24_rcsnk_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwlS_info" {
     block_ccwlS_info:
         const _ccwlS;
         const 0;
         const 4294967326;
         const ScvMa_srt+72;
 },
 sat_scvAR_entry() //  [R1]
         { []
         }
     {offset
       ccwm0: // global
           _scvAR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwm1; else goto ccwm2;
       ccwm2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwm4; else goto ccwm3;
       ccwm4: // global
           HpAlloc = 24;
           goto ccwm1;
       ccwm1: // global
           R1 = _scvAR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwm3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvAR::P64;
           _scvty::P64 = P64[_scvAR::P64 + 16];
           I64[Hp - 16] = sat_scvAQ_info;
           P64[Hp] = _scvty::P64;
           R3 = Hp - 16;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvAR_info" {
     sat_scvAR_info:
         const sat_scvAR_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+72;
 },
 sat_scvAS_entry() //  [R1]
         { []
         }
     {offset
       ccwm5: // global
           _scvAS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwm6; else goto ccwm7;
       ccwm7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwm9; else goto ccwm8;
       ccwm9: // global
           HpAlloc = 24;
           goto ccwm6;
       ccwm6: // global
           R1 = _scvAS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwm8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvAS::P64;
           _scvty::P64 = P64[_scvAS::P64 + 16];
           _scvtZ::P64 = P64[_scvAS::P64 + 24];
           I64[Hp - 16] = sat_scvAR_info;
           P64[Hp] = _scvty::P64;
           R3 = _scvtZ::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvAS_info" {
     sat_scvAS_info:
         const sat_scvAS_entry;
         const 2;
         const 141733920786;
         const ScvMa_srt+32;
 },
 System.Console.GetOpt.$wgetOpt'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       ccwme: // global
           if ((Sp + -72) < SpLim) (likely: False) goto ccwmf; else goto ccwmg;
       ccwmf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$wgetOpt'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwmg: // global
           I64[Sp - 24] = block_ccw5h_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucwsP; else goto ccw5i;
       ucwsP: // global
           call _ccw5h(R1) args: 0, res: 0, upd: 0;
       ccw5i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.$wgetOpt'_info" {
     System.Console.GetOpt.$wgetOpt'_info:
         const System.Console.GetOpt.$wgetOpt'_entry;
         const 0;
         const 519691042830;
         const 12884901911;
         const ScvMa_srt+32;
 },
 _ccw5h() //  [R1]
         { []
         }
     {offset
       ccw5h: // global
           if (R1 & 7 == 1) goto ccwmb; else goto ccwmc;
       ccwmb: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwmc: // global
           I64[Sp - 16] = block_ccw5n_info;
           _scvjP::P64 = R1;
           _scvjR::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _scvjR::P64;
           P64[Sp] = _scvjP::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucwsl; else goto ccw5o;
       ucwsl: // global
           call _ccw5n(R1) args: 0, res: 0, upd: 0;
       ccw5o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw5h_info" {
     block_ccw5h_info:
         const _ccw5h;
         const 2;
         const 519691042846;
         const ScvMa_srt+32;
 },
 _ccw5n() //  [R1]
         { []
         }
     {offset
       ccw5n: // global
           if (R1 & 7 == 1) goto ccwmm; else goto ccwmJ;
       ccwmm: // global
           I64[Sp] = block_ccw5s_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto ucwsm; else goto ccw5t;
       ucwsm: // global
           call _ccw5s(R1) args: 0, res: 0, upd: 0;
       ccw5t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwmJ: // global
           I64[Sp - 16] = block_ccw6d_info;
           _scvjS::P64 = R1;
           _scvkY::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _scvkY::P64;
           P64[Sp] = _scvjS::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucwsn; else goto ccw6e;
       ucwsn: // global
           call _ccw6d(R1) args: 0, res: 0, upd: 0;
       ccw6e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw5n_info" {
     block_ccw5n_info:
         const _ccw5n;
         const 4;
         const 519691042846;
         const ScvMa_srt+32;
 },
 _ccw5s() //  [R1]
         { []
         }
     {offset
       ccw5s: // global
           _scvjN::P64 = P64[Sp + 32];
           _scvjR::P64 = P64[Sp + 8];
           _ccwsb::P64 = R1 & 7;
           if (_ccwsb::P64 < 3) goto ucwsc; else goto ccwmE;
       ucwsc: // global
           if (_ccwsb::P64 < 2) goto ccwmq; else goto ccwmz;
       ccwmq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwmt; else goto ccwms;
       ccwmt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwms: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = _scvjR::P64;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwmz: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccwmC; else goto ccwmB;
       ccwmC: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwmB: // global
           I64[Hp - 144] = ds_scvjV_info;
           P64[Hp - 128] = _scvjN::P64;
           P64[Hp - 120] = _scvjR::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccw5y::P64 = Hp - 144;
           P64[Hp - 96] = _ccw5y::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccw5y::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccw5y::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccw5y::P64;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwmE: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccwmH; else goto ccwmG;
       ccwmH: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwmG: // global
           _scvkq::P64 = P64[R1 + 5];
           I64[Hp - 176] = ds_scvkr_info;
           P64[Hp - 160] = _scvjN::P64;
           P64[Hp - 152] = _scvjR::P64;
           P64[Hp - 144] = R1;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccw5N::P64 = Hp - 176;
           P64[Hp - 120] = _ccw5N::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccw5N::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccw5N::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _ccw5N::P64;
           I64[Hp - 40] = sat_scvkx_info;
           P64[Hp - 24] = _scvkq::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R4 = Hp - 136;
           R3 = Hp - 112;
           R2 = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw5s_info" {
     block_ccw5s_info:
         const _ccw5s;
         const 388;
         const 4294967326;
         const ScvMa_srt+56;
 },
 _ccw6d() //  [R1]
         { []
         }
     {offset
       ccw6d: // global
           if (I64[R1 + 7] == 45) goto ccwna; else goto ccwmM;
       ccwna: // global
           _scvkY::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccw6T_info;
           R1 = _scvkY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucwsp; else goto ccw6U;
       ucwsp: // global
           call _ccw6T(R1) args: 0, res: 0, upd: 0;
       ccw6U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwmM: // global
           I64[Sp + 8] = block_ccw6k_info;
           R1 = P64[Sp + 40];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucwso; else goto ccw6l;
       ucwso: // global
           call _ccw6k(R1) args: 0, res: 0, upd: 0;
       ccw6l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw6d_info" {
     block_ccw6d_info:
         const _ccw6d;
         const 6;
         const 519691042846;
         const ScvMa_srt+32;
 },
 _ccw6T() //  [R1]
         { []
         }
     {offset
       ccw6T: // global
           if (R1 & 7 == 1) goto ccwnd; else goto ccwnC;
       ccwnd: // global
           I64[Sp] = block_ccw6Y_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto ucwsr; else goto ccw6Z;
       ucwsr: // global
           call _ccw6Y(R1) args: 0, res: 0, upd: 0;
       ccw6Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwnC: // global
           I64[Sp + 8] = block_ccw7y_info;
           _scvna::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _scvna::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucwss; else goto ccw7z;
       ucwss: // global
           call _ccw7y(R1) args: 0, res: 0, upd: 0;
       ccw7z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw6T_info" {
     block_ccw6T_info:
         const _ccw6T;
         const 5;
         const 519691042846;
         const ScvMa_srt+32;
 },
 _ccw6Y() //  [R1]
         { []
         }
     {offset
       ccw6Y: // global
           _scvjN::P64 = P64[Sp + 40];
           _scvjR::P64 = P64[Sp + 16];
           _scvjS::P64 = P64[Sp + 8];
           _ccws9::P64 = R1 & 7;
           if (_ccws9::P64 < 3) goto ucwse; else goto ccwnx;
       ucwse: // global
           if (_ccws9::P64 < 2) goto ucwsk; else goto ccwnn;
       ucwsk: // global
           Sp = Sp + 24;
           call _ccwnh() args: 0, res: 0, upd: 0;
       ccwnn: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccwnq; else goto ccwnp;
       ccwnq: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwnp: // global
           I64[Hp - 144] = ds4_scvm7_info;
           P64[Hp - 128] = _scvjN::P64;
           P64[Hp - 120] = _scvjR::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccw74::P64 = Hp - 144;
           P64[Hp - 96] = _ccw74::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccw74::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccw74::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scvjS::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccw74::P64;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwnx: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwnA; else goto ccwnz;
       ccwnA: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwnz: // global
           _scvmC::P64 = P64[R1 + 5];
           I64[Hp - 184] = ds4_scvmD_info;
           P64[Hp - 168] = _scvjN::P64;
           P64[Hp - 160] = _scvjR::P64;
           P64[Hp - 152] = R1;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccw7j::P64 = Hp - 184;
           P64[Hp - 128] = _ccw7j::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccw7j::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccw7j::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccw7j::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _scvmC::P64;
           P64[Hp - 24] = _scvjS::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw6Y_info" {
     block_ccw6Y_info:
         const _ccw6Y;
         const 517;
         const 4294967326;
         const ScvMa_srt+56;
 },
 _ccw7y() //  [R1]
         { []
         }
     {offset
       ccw7y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccwnF; else goto ccwnE;
       ccwnF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwnE: // global
           _scvnd::I64 = I64[R1 + 7];
           if (_scvnd::I64 == 45) goto ccwpt; else goto ccwnH;
       ccwpt: // global
           Hp = Hp - 16;
           I64[Sp] = block_ccwdB_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto ucwsu; else goto ccwdC;
       ucwsu: // global
           call _ccwdB(R1) args: 0, res: 0, upd: 0;
       ccwdC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwnH: // global
           I64[Hp - 8] = go_scvne_info;
           I64[Hp] = _scvnd::I64;
           I64[Sp - 8] = block_ccw8T_info;
           R2 = P64[Sp + 32];
           _scvnb::P64 = R1;
           R1 = Hp - 7;
           P64[Sp] = _scvnb::P64;
           Sp = Sp - 8;
           call go_scvne_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw7y_info" {
     block_ccw7y_info:
         const _ccw7y;
         const 4;
         const 519691042846;
         const ScvMa_srt+32;
 },
 _ccwdB() //  [R1]
         { []
         }
     {offset
       ccwdB: // global
           if (R1 & 7 == 1) goto ccwpw; else goto ccwpG;
       ccwpw: // global
           I64[Sp] = block_ccwdG_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto ucwsC; else goto ccwdH;
       ucwsC: // global
           call _ccwdG(R1) args: 0, res: 0, upd: 0;
       ccwdH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwpG: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccwpJ; else goto ccwpI;
       ccwpJ: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwpI: // global
           I64[Hp - 64] = ds8_scvtu_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_sel_0_upd_info;
           _ccwdV::P64 = Hp - 64;
           P64[Hp - 24] = _ccwdV::P64;
           I64[Hp - 16] = getWith_scvtC_info;
           P64[Hp - 8] = P64[Sp + 32];
           _ccwe8::P64 = Hp - 40;
           P64[Hp] = _ccwe8::P64;
           I64[Sp - 24] = block_ccwpF_info;
           R2 = GHC.Base.eqString_closure+2;
           _scvto::P64 = R1;
           _ccwe9::P64 = Hp - 15;
           R1 = _ccwe9::P64;
           P64[Sp - 16] = _ccwe9::P64;
           P64[Sp - 8] = _scvto::P64;
           P64[Sp] = _ccwe8::P64;
           P64[Sp + 16] = _ccwdV::P64;
           Sp = Sp - 24;
           call getWith_scvtC_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwdB_info" {
     block_ccwdB_info:
         const _ccwdB;
         const 132;
         const 519691042846;
         const ScvMa_srt+32;
 },
 _ccwdG() //  [R1]
         { []
         }
     {offset
       ccwdG: // global
           _scvjR::P64 = P64[Sp + 8];
           if (R1 & 7 == 3) goto ccwpB; else goto ccwpA;
       ccwpB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccwpE; else goto ccwpD;
       ccwpE: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwpD: // global
           _scvtq::P64 = P64[R1 + 5];
           I64[Hp - 24] = sat_scvtr_info;
           P64[Hp - 8] = _scvjR::P64;
           P64[Hp] = _scvtq::P64;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 24;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwpA: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = _scvjR::P64;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwdG_info" {
     block_ccwdG_info:
         const _ccwdG;
         const 900;
         const 30;
 },
 _ccwpF() //  [R1]
         { []
         }
     {offset
       ccwpF: // global
           if (R1 & 7 == 1) goto ccwrG; else goto ccwrO;
       ccwrG: // global
           _ccwe9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccwrD_info;
           R2 = lvl19_rcsne_closure+2;
           R1 = _ccwe9::P64;
           Sp = Sp + 8;
           call getWith_scvtC_entry(R2, R1) args: 8, res: 8, upd: 8;
       ccwrO: // global
           P64[Sp + 8] = R1;
           Sp = Sp + 8;
           call _scvtY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccwpF_info" {
     block_ccwpF_info:
         const _ccwpF;
         const 7;
         const 519691042846;
         const ScvMa_srt+32;
 },
 _ccwrD() //  [R1]
         { []
         }
     {offset
       ccwrD: // global
           P64[Sp] = R1;
           call _scvtY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccwrD_info" {
     block_ccwrD_info:
         const _ccwrD;
         const 6;
         const 519691042846;
         const ScvMa_srt+32;
 },
 _scvtY() //  []
         { []
         }
     {offset
       scvtY: // global
           I64[Sp - 8] = block_ccwfO_info;
           R2 = P64[Sp];
           Sp = Sp - 8;
           call poly_go_rcsnj_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccwfO() //  [R1]
         { []
         }
     {offset
       ccwfO: // global
           if (R1 & 7 == 1) goto ccwpP; else goto ccwpU;
       ccwpP: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccwpS; else goto ccwpR;
       ccwpS: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwpR: // global
           I64[Hp - 176] = ds9_scvu1_info;
           P64[Hp - 160] = P64[Sp + 48];
           P64[Hp - 152] = P64[Sp + 56];
           P64[Hp - 144] = P64[Sp + 32];
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccwfS::P64 = Hp - 176;
           P64[Hp - 120] = _ccwfS::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccwfS::P64;
           I64[Hp - 88] = sat_scvuj_info;
           P64[Hp - 72] = P64[Sp + 16];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccwfS::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccwfS::P64;
           R4 = Hp - 136;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwpU: // global
           I64[Sp - 8] = block_ccwgg_info;
           _scvux::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scvux::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucwsD; else goto ccwgh;
       ucwsD: // global
           call _ccwgg(R1) args: 0, res: 0, upd: 0;
       ccwgh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwfO_info" {
     block_ccwfO_info:
         const _ccwfO;
         const 7;
         const 519691042846;
         const ScvMa_srt+32;
 },
 _ccwgg() //  [R1]
         { []
         }
     {offset
       ccwgg: // global
           if (R1 & 7 == 1) goto ccwpX; else goto ccwrw;
       ccwpX: // global
           I64[Sp + 16] = block_ccwgl_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ucwsE; else goto ccwgm;
       ucwsE: // global
           call _ccwgl(R1) args: 0, res: 0, upd: 0;
       ccwgm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwrw: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwrz; else goto ccwry;
       ccwrz: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwry: // global
           I64[Hp - 184] = ds13_scvAr_info;
           P64[Hp - 168] = P64[Sp + 56];
           P64[Hp - 160] = P64[Sp + 64];
           P64[Hp - 152] = P64[Sp + 40];
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwls::P64 = Hp - 184;
           P64[Hp - 128] = _ccwls::P64;
           I64[Hp - 120] = sat_scvAS_info;
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccwls::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccwls::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccwls::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwgg_info" {
     block_ccwgg_info:
         const _ccwgg;
         const 8;
         const 519691042846;
         const ScvMa_srt+32;
 },
 _ccwgl() //  [R1]
         { []
         }
     {offset
       ccwgl: // global
           _ccwdV::P64 = P64[Sp + 32];
           _ccwrV::P64 = R1 & 7;
           if (_ccwrV::P64 < 3) goto ucwsg; else goto ccwr8;
       ucwsg: // global
           if (_ccwrV::P64 < 2) goto ccwq0; else goto ccwqs;
       ccwq0: // global
           I64[Sp] = block_ccwgq_info;
           _scvuB::P64 = P64[R1 + 7];
           R1 = _ccwdV::P64;
           P64[Sp + 32] = _scvuB::P64;
           if (R1 & 7 != 0) goto ucwsF; else goto ccwgr;
       ucwsF: // global
           call _ccwgq(R1) args: 0, res: 0, upd: 0;
       ccwgr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwqs: // global
           I64[Sp - 8] = block_ccwhP_info;
           _scvwj::P64 = P64[R1 + 6];
           _scvwk::P64 = P64[R1 + 14];
           R1 = _ccwdV::P64;
           P64[Sp] = _scvwk::P64;
           P64[Sp + 32] = _scvwj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucwsG; else goto ccwhQ;
       ucwsG: // global
           call _ccwhP(R1) args: 0, res: 0, upd: 0;
       ccwhQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwr8: // global
           I64[Sp] = block_ccwjV_info;
           _scvyF::P64 = P64[R1 + 5];
           R1 = _ccwdV::P64;
           P64[Sp + 32] = _scvyF::P64;
           if (R1 & 7 != 0) goto ucwsH; else goto ccwjW;
       ucwsH: // global
           call _ccwjV(R1) args: 0, res: 0, upd: 0;
       ccwjW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwgl_info" {
     block_ccwgl_info:
         const _ccwgl;
         const 6;
         const 47244640286;
         const ScvMa_srt+56;
 },
 _ccwgq() //  [R1]
         { []
         }
     {offset
       ccwgq: // global
           I64[Sp] = block_ccwgv_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ucwsI; else goto ccwgw;
       ucwsI: // global
           call _ccwgv(R1) args: 0, res: 0, upd: 0;
       ccwgw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwgq_info" {
     block_ccwgq_info:
         const _ccwgq;
         const 6;
         const 38654705694;
         const ScvMa_srt+56;
 },
 _ccwgv() //  [R1]
         { []
         }
     {offset
       ccwgv: // global
           if (R1 & 7 == 1) goto ccwq8; else goto ccwqd;
       ccwq8: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccwqb; else goto ccwqa;
       ccwqb: // global
           HpAlloc = 160;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwqa: // global
           I64[Hp - 152] = ds11_scvuG_info;
           P64[Hp - 136] = P64[Sp + 40];
           P64[Hp - 128] = P64[Sp + 48];
           P64[Hp - 120] = P64[Sp + 24];
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccwgA::P64 = Hp - 152;
           P64[Hp - 96] = _ccwgA::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccwgA::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccwgA::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccwgA::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = Hp - 40;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwqd: // global
           I64[Sp] = block_ccwgP_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucwsJ; else goto ccwgQ;
       ucwsJ: // global
           call _ccwgP(R1) args: 0, res: 0, upd: 0;
       ccwgQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwgv_info" {
     block_ccwgv_info:
         const _ccwgv;
         const 6;
         const 38654705694;
         const ScvMa_srt+56;
 },
 _ccwgP() //  [R1]
         { []
         }
     {offset
       ccwgP: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccwqg; else goto ccwqf;
       ccwqg: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwqf: // global
           _scvjM::P64 = P64[Sp + 40];
           _scvjN::P64 = P64[Sp + 48];
           _scvjR::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 61) goto ccwqq; else goto ccwql;
       ccwqq: // global
           I64[Hp - 176] = ds15_scvvM_info;
           P64[Hp - 160] = _scvjM::P64;
           P64[Hp - 152] = _scvjN::P64;
           P64[Hp - 144] = _scvjR::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccwhj::P64 = Hp - 176;
           P64[Hp - 120] = _ccwhj::P64;
           I64[Hp - 112] = sat_scvwb_info;
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 112;
           P64[Hp - 72] = Hp - 136;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccwhj::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccwhj::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccwhj::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwql: // global
           I64[Hp - 176] = ds15_scvvg_info;
           P64[Hp - 160] = _scvjM::P64;
           P64[Hp - 152] = _scvjN::P64;
           P64[Hp - 144] = _scvjR::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccwgW::P64 = Hp - 176;
           P64[Hp - 120] = _ccwgW::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccwgW::P64;
           I64[Hp - 88] = sat_scvvy_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccwgW::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccwgW::P64;
           R4 = Hp - 136;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwgP_info" {
     block_ccwgP_info:
         const _ccwgP;
         const 518;
         const 38654705694;
         const ScvMa_srt+56;
 },
 _ccwhP() //  [R1]
         { []
         }
     {offset
       ccwhP: // global
           I64[Sp] = block_ccwhU_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ucwsK; else goto ccwhV;
       ucwsK: // global
           call _ccwhU(R1) args: 0, res: 0, upd: 0;
       ccwhV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwhP_info" {
     block_ccwhP_info:
         const _ccwhP;
         const 7;
         const 12884901918;
         const ScvMa_srt+56;
 },
 _ccwhU() //  [R1]
         { []
         }
     {offset
       ccwhU: // global
           if (R1 & 7 == 1) goto ccwqw; else goto ccwqR;
       ccwqw: // global
           I64[Sp] = block_ccwhZ_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto ucwsL; else goto ccwi0;
       ucwsL: // global
           call _ccwhZ(R1) args: 0, res: 0, upd: 0;
       ccwi0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwqR: // global
           I64[Sp + 8] = block_ccwjc_info;
           _scvxz::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _scvxz::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucwsM; else goto ccwjd;
       ucwsM: // global
           call _ccwjc(R1) args: 0, res: 0, upd: 0;
       ccwjd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwhU_info" {
     block_ccwhU_info:
         const _ccwhU;
         const 7;
         const 12884901918;
         const ScvMa_srt+56;
 },
 _ccwhZ() //  [R1]
         { []
         }
     {offset
       ccwhZ: // global
           _scvjM::P64 = P64[Sp + 48];
           _scvjN::P64 = P64[Sp + 56];
           if (R1 & 7 == 1) goto ccwqC; else goto ccwqM;
       ccwqC: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccwqF; else goto ccwqE;
       ccwqF: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwqE: // global
           I64[Hp - 176] = ds12_scvwq_info;
           P64[Hp - 160] = _scvjM::P64;
           P64[Hp - 152] = _scvjN::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwi4::P64 = Hp - 176;
           P64[Hp - 128] = _ccwi4::P64;
           I64[Hp - 120] = sat_scvwS_info;
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 8];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccwi4::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccwi4::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccwi4::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwqM: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwqP; else goto ccwqO;
       ccwqP: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwqO: // global
           _scvx0::P64 = P64[R1 + 6];
           _scvx1::P64 = P64[R1 + 14];
           I64[Hp - 184] = ds12_scvx2_info;
           P64[Hp - 168] = _scvjM::P64;
           P64[Hp - 160] = _scvjN::P64;
           P64[Hp - 152] = _scvx1::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwiX::P64 = Hp - 184;
           P64[Hp - 128] = _ccwiX::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccwiX::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccwiX::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccwiX::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = _scvx0::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwhZ_info" {
     block_ccwhZ_info:
         const _ccwhZ;
         const 647;
         const 12884901918;
         const ScvMa_srt+56;
 },
 _ccwjc() //  [R1]
         { []
         }
     {offset
       ccwjc: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwqU; else goto ccwqT;
       ccwqU: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwqT: // global
           _scvjM::P64 = P64[Sp + 40];
           _scvjN::P64 = P64[Sp + 48];
           _scvjR::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 61) goto ccwr6; else goto ccwqZ;
       ccwr6: // global
           I64[Hp - 184] = ds15_scvy9_info;
           P64[Hp - 168] = _scvjM::P64;
           P64[Hp - 160] = _scvjN::P64;
           P64[Hp - 152] = _scvjR::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwjG::P64 = Hp - 184;
           P64[Hp - 128] = _ccwjG::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccwjG::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccwjG::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccwjG::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwqZ: // global
           I64[Hp - 184] = ds15_scvxD_info;
           P64[Hp - 168] = _scvjM::P64;
           P64[Hp - 160] = _scvjN::P64;
           P64[Hp - 152] = _scvjR::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwjj::P64 = Hp - 184;
           P64[Hp - 128] = _ccwjj::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccwjj::P64;
           I64[Hp - 96] = sat_scvxV_info;
           P64[Hp - 80] = P64[Sp + 8];
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           I64[Hp - 48] = stg_sel_1_upd_info;
           P64[Hp - 32] = _ccwjj::P64;
           I64[Hp - 24] = stg_sel_0_upd_info;
           P64[Hp - 8] = _ccwjj::P64;
           _ccwjw::P64 = Hp - 144;
           _ccwqV::P64 = Hp - 70;
           _ccwqW::P64 = Hp - 48;
           _ccwqX::P64 = Hp - 24;
           Hp = Hp - 8;
           R4 = _ccwjw::P64;
           R3 = _ccwqV::P64;
           R2 = _ccwqW::P64;
           R1 = _ccwqX::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwjc_info" {
     block_ccwjc_info:
         const _ccwjc;
         const 6;
         const 4294967326;
         const ScvMa_srt+56;
 },
 _ccwjV() //  [R1]
         { []
         }
     {offset
       ccwjV: // global
           I64[Sp] = block_ccwk0_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ucwsN; else goto ccwk1;
       ucwsN: // global
           call _ccwk0(R1) args: 0, res: 0, upd: 0;
       ccwk1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwjV_info" {
     block_ccwjV_info:
         const _ccwjV;
         const 134;
         const 4294967326;
         const ScvMa_srt+56;
 },
 _ccwk0() //  [R1]
         { []
         }
     {offset
       ccwk0: // global
           if (R1 & 7 == 1) goto ccwrc; else goto ccwrh;
       ccwrc: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccwrf; else goto ccwre;
       ccwrf: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwre: // global
           I64[Hp - 176] = ds12_scvyL_info;
           P64[Hp - 160] = P64[Sp + 40];
           P64[Hp - 152] = P64[Sp + 48];
           P64[Hp - 144] = P64[Sp + 24];
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccwk5::P64 = Hp - 176;
           P64[Hp - 120] = _ccwk5::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccwk5::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccwk5::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _ccwk5::P64;
           I64[Hp - 40] = sat_scvyR_info;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R4 = Hp - 136;
           R3 = Hp - 112;
           R2 = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwrh: // global
           I64[Sp] = block_ccwkv_info;
           _scvzi::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _scvzi::P64;
           if (R1 & 7 != 0) goto ucwsO; else goto ccwkw;
       ucwsO: // global
           call _ccwkv(R1) args: 0, res: 0, upd: 0;
       ccwkw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwk0_info" {
     block_ccwk0_info:
         const _ccwk0;
         const 134;
         const 4294967326;
         const ScvMa_srt+56;
 },
 _ccwkv() //  [R1]
         { []
         }
     {offset
       ccwkv: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwrk; else goto ccwrj;
       ccwrk: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwrj: // global
           _scvjM::P64 = P64[Sp + 40];
           _scvjN::P64 = P64[Sp + 48];
           _scvjR::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 61) goto ccwrr; else goto ccwrp;
       ccwrr: // global
           I64[Hp - 184] = ds15_scvzS_info;
           P64[Hp - 168] = _scvjM::P64;
           P64[Hp - 160] = _scvjN::P64;
           P64[Hp - 152] = _scvjR::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwkZ::P64 = Hp - 184;
           P64[Hp - 128] = _ccwkZ::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccwkZ::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccwkZ::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccwkZ::P64;
           I64[Hp - 48] = sat_scvzZ_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwrp: // global
           I64[Hp - 184] = ds15_scvzm_info;
           P64[Hp - 168] = _scvjM::P64;
           P64[Hp - 160] = _scvjN::P64;
           P64[Hp - 152] = _scvjR::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwkC::P64 = Hp - 184;
           P64[Hp - 128] = _ccwkC::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccwkC::P64;
           I64[Hp - 96] = sat_scvzE_info;
           P64[Hp - 80] = P64[Sp + 8];
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           I64[Hp - 48] = stg_sel_1_upd_info;
           P64[Hp - 32] = _ccwkC::P64;
           I64[Hp - 24] = stg_sel_0_upd_info;
           P64[Hp - 8] = _ccwkC::P64;
           _ccwkP::P64 = Hp - 144;
           _ccwrl::P64 = Hp - 70;
           _ccwrm::P64 = Hp - 48;
           _ccwrn::P64 = Hp - 24;
           Hp = Hp - 8;
           R4 = _ccwkP::P64;
           R3 = _ccwrl::P64;
           R2 = _ccwrm::P64;
           R1 = _ccwrn::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwkv_info" {
     block_ccwkv_info:
         const _ccwkv;
         const 6;
         const 4294967326;
         const ScvMa_srt+56;
 },
 _ccw8T() //  [R1]
         { []
         }
     {offset
       ccw8T: // global
           I64[Sp - 8] = block_ccw8X_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call poly_go1_rcsnl_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw8T_info" {
     block_ccw8T_info:
         const _ccw8T;
         const 5;
         const 244813135902;
         const ScvMa_srt+32;
 },
 _ccw8X() //  [R1]
         { []
         }
     {offset
       ccw8X: // global
           if (R1 & 7 == 1) goto ccwnL; else goto ccwoa;
       ccwnL: // global
           I64[Sp + 8] = block_ccw91_info;
           R1 = P64[Sp + 32];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucwsv; else goto ccw92;
       ucwsv: // global
           call _ccw91(R1) args: 0, res: 0, upd: 0;
       ccw92: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwoa: // global
           I64[Sp - 8] = block_ccw9E_info;
           _scvoJ::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scvoJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucwsw; else goto ccw9F;
       ucwsw: // global
           call _ccw9E(R1) args: 0, res: 0, upd: 0;
       ccw9F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw8X_info" {
     block_ccw8X_info:
         const _ccw8X;
         const 6;
         const 244813135902;
         const ScvMa_srt+32;
 },
 _ccw91() //  [R1]
         { []
         }
     {offset
       ccw91: // global
           _scvjM::P64 = P64[Sp + 32];
           _scvjN::P64 = P64[Sp + 40];
           _scvjR::P64 = P64[Sp + 16];
           _scvnb::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccwnU; else goto ccwo5;
       ccwnU: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto ccwnX; else goto ccwnW;
       ccwnX: // global
           HpAlloc = 208;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwnW: // global
           I64[Hp - 200] = ds8_scvnB_info;
           P64[Hp - 184] = _scvjM::P64;
           P64[Hp - 176] = _scvjN::P64;
           P64[Hp - 168] = _scvjR::P64;
           I64[Hp - 160] = stg_sel_3_upd_info;
           _ccw96::P64 = Hp - 200;
           P64[Hp - 144] = _ccw96::P64;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _ccw96::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _scvnb::P64;
           P64[Hp - 96] = GHC.Types.[]_closure+1;
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = lvl21_rcsng_closure+1;
           P64[Hp - 72] = Hp - 110;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 86;
           P64[Hp - 48] = Hp - 136;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccw96::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccw96::P64;
           R4 = Hp - 160;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwo5: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto ccwo8; else goto ccwo7;
       ccwo8: // global
           HpAlloc = 216;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwo7: // global
           I64[Hp - 208] = ds8_scvoa_info;
           P64[Hp - 192] = _scvjM::P64;
           P64[Hp - 184] = _scvjN::P64;
           P64[Hp - 176] = _scvjR::P64;
           P64[Hp - 168] = R1;
           I64[Hp - 160] = stg_sel_3_upd_info;
           _ccw9l::P64 = Hp - 208;
           P64[Hp - 144] = _ccw9l::P64;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _ccw9l::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _scvnb::P64;
           P64[Hp - 96] = GHC.Types.[]_closure+1;
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = lvl21_rcsng_closure+1;
           P64[Hp - 72] = Hp - 110;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 86;
           P64[Hp - 48] = Hp - 136;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccw9l::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccw9l::P64;
           R4 = Hp - 160;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw91_info" {
     block_ccw91_info:
         const _ccw91;
         const 261;
         const 4294967326;
         const ScvMa_srt+56;
 },
 _ccw9E() //  [R1]
         { []
         }
     {offset
       ccw9E: // global
           if (R1 & 7 == 1) goto ccwod; else goto ccwpp;
       ccwod: // global
           I64[Sp + 16] = block_ccw9J_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ucwsx; else goto ccw9K;
       ucwsx: // global
           call _ccw9J(R1) args: 0, res: 0, upd: 0;
       ccw9K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwpp: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwps; else goto ccwpr;
       ccwps: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwpr: // global
           I64[Hp - 184] = ds12_scvsO_info;
           P64[Hp - 168] = P64[Sp + 48];
           P64[Hp - 160] = P64[Sp + 56];
           P64[Hp - 152] = P64[Sp + 32];
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwcT::P64 = Hp - 184;
           P64[Hp - 128] = _ccwcT::P64;
           I64[Hp - 120] = sat_scvtg_info;
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccwcT::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccwcT::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccwcT::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw9E_info" {
     block_ccw9E_info:
         const _ccw9E;
         const 7;
         const 244813135902;
         const ScvMa_srt+32;
 },
 _ccw9J() //  [R1]
         { []
         }
     {offset
       ccw9J: // global
           _scvna::P64 = P64[Sp + 24];
           _ccws3::P64 = R1 & 7;
           if (_ccws3::P64 < 3) goto ucwsf; else goto ccwp9;
       ucwsf: // global
           if (_ccws3::P64 < 2) goto ccwog; else goto ccwoB;
       ccwog: // global
           I64[Sp + 8] = block_ccw9O_info;
           _scvoN::P64 = P64[R1 + 7];
           R1 = _scvna::P64;
           P64[Sp + 24] = _scvoN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucwsy; else goto ccw9P;
       ucwsy: // global
           call _ccw9O(R1) args: 0, res: 0, upd: 0;
       ccw9P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwoB: // global
           I64[Sp - 8] = block_ccwar_info;
           _scvpT::P64 = P64[R1 + 6];
           _scvpU::P64 = P64[R1 + 14];
           R1 = _scvna::P64;
           P64[Sp] = _scvpU::P64;
           P64[Sp + 24] = _scvpT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucwsz; else goto ccwas;
       ucwsz: // global
           call _ccwar(R1) args: 0, res: 0, upd: 0;
       ccwas: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwp9: // global
           I64[Sp + 8] = block_ccwbV_info;
           _scvrE::P64 = P64[R1 + 5];
           R1 = _scvna::P64;
           P64[Sp + 24] = _scvrE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucwsA; else goto ccwbW;
       ucwsA: // global
           call _ccwbV(R1) args: 0, res: 0, upd: 0;
       ccwbW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw9J_info" {
     block_ccw9J_info:
         const _ccw9J;
         const 5;
         const 12884901918;
         const ScvMa_srt+56;
 },
 _ccw9O() //  [R1]
         { []
         }
     {offset
       ccw9O: // global
           _scvjM::P64 = P64[Sp + 24];
           _scvjN::P64 = P64[Sp + 32];
           _scvjR::P64 = P64[Sp + 8];
           _scvoN::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto ccwon; else goto ccwow;
       ccwon: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccwoq; else goto ccwop;
       ccwoq: // global
           HpAlloc = 160;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwop: // global
           I64[Hp - 152] = ds10_scvoP_info;
           P64[Hp - 136] = _scvjM::P64;
           P64[Hp - 128] = _scvjN::P64;
           P64[Hp - 120] = _scvjR::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccw9T::P64 = Hp - 152;
           P64[Hp - 96] = _ccw9T::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccw9T::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccw9T::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccw9T::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scvoN::P64;
           P64[Hp] = Hp - 40;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwow: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccwoz; else goto ccwoy;
       ccwoz: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwoy: // global
           I64[Hp - 160] = ds10_scvpm_info;
           P64[Hp - 144] = _scvjM::P64;
           P64[Hp - 136] = _scvjN::P64;
           P64[Hp - 128] = _scvjR::P64;
           P64[Hp - 120] = R1;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccwa8::P64 = Hp - 160;
           P64[Hp - 96] = _ccwa8::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccwa8::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccwa8::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccwa8::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scvoN::P64;
           P64[Hp] = Hp - 40;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw9O_info" {
     block_ccw9O_info:
         const _ccw9O;
         const 4;
         const 4294967326;
         const ScvMa_srt+56;
 },
 _ccwar() //  [R1]
         { []
         }
     {offset
       ccwar: // global
           _scvjR::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto ccwoE; else goto ccwp4;
       ccwoE: // global
           I64[Sp] = block_ccwaw_info;
           R1 = _scvjR::P64;
           if (R1 & 7 != 0) goto ucwsB; else goto ccwax;
       ucwsB: // global
           call _ccwaw(R1) args: 0, res: 0, upd: 0;
       ccwax: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwp4: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwp7; else goto ccwp6;
       ccwp7: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwp6: // global
           I64[Hp - 184] = ds11_scvr8_info;
           P64[Hp - 168] = P64[Sp + 40];
           P64[Hp - 160] = P64[Sp + 48];
           P64[Hp - 152] = _scvjR::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwbG::P64 = Hp - 184;
           P64[Hp - 128] = _ccwbG::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccwbG::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccwbG::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccwbG::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwar_info" {
     block_ccwar_info:
         const _ccwar;
         const 6;
         const 12884901918;
         const ScvMa_srt+56;
 },
 _ccwaw() //  [R1]
         { []
         }
     {offset
       ccwaw: // global
           _scvjM::P64 = P64[Sp + 40];
           _scvjN::P64 = P64[Sp + 48];
           if (R1 & 7 == 1) goto ccwoK; else goto ccwoU;
       ccwoK: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccwoN; else goto ccwoM;
       ccwoN: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwoM: // global
           I64[Hp - 176] = ds11_scvpX_info;
           P64[Hp - 160] = _scvjM::P64;
           P64[Hp - 152] = _scvjN::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwaB::P64 = Hp - 176;
           P64[Hp - 128] = _ccwaB::P64;
           I64[Hp - 120] = sat_scvqq_info;
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 8];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccwaB::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccwaB::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccwaB::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwoU: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwoX; else goto ccwoW;
       ccwoX: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwoW: // global
           _scvqy::P64 = P64[R1 + 6];
           _scvqz::P64 = P64[R1 + 14];
           I64[Hp - 184] = ds11_scvqA_info;
           P64[Hp - 168] = _scvjM::P64;
           P64[Hp - 160] = _scvjN::P64;
           P64[Hp - 152] = _scvqz::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwbr::P64 = Hp - 184;
           P64[Hp - 128] = _ccwbr::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccwbr::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccwbr::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccwbr::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _scvqy::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwaw_info" {
     block_ccwaw_info:
         const _ccwaw;
         const 262;
         const 12884901918;
         const ScvMa_srt+56;
 },
 _ccwbV() //  [R1]
         { []
         }
     {offset
       ccwbV: // global
           _scvjM::P64 = P64[Sp + 24];
           _scvjN::P64 = P64[Sp + 32];
           _scvjR::P64 = P64[Sp + 8];
           _scvrE::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto ccwpc; else goto ccwph;
       ccwpc: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccwpf; else goto ccwpe;
       ccwpf: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwpe: // global
           I64[Hp - 176] = ds11_scvrH_info;
           P64[Hp - 160] = _scvjM::P64;
           P64[Hp - 152] = _scvjN::P64;
           P64[Hp - 144] = _scvjR::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccwc0::P64 = Hp - 176;
           P64[Hp - 120] = _ccwc0::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccwc0::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccwc0::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _ccwc0::P64;
           I64[Hp - 40] = sat_scvrN_info;
           P64[Hp - 24] = _scvrE::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R4 = Hp - 136;
           R3 = Hp - 112;
           R2 = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwph: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwpk; else goto ccwpj;
       ccwpk: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwpj: // global
           I64[Hp - 184] = ds11_scvsf_info;
           P64[Hp - 168] = _scvjM::P64;
           P64[Hp - 160] = _scvjN::P64;
           P64[Hp - 152] = _scvjR::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwcq::P64 = Hp - 184;
           P64[Hp - 128] = _ccwcq::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccwcq::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccwcq::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccwcq::P64;
           I64[Hp - 48] = sat_scvsm_info;
           P64[Hp - 32] = _scvrE::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwbV_info" {
     block_ccwbV_info:
         const _ccwbV;
         const 4;
         const 4294967326;
         const ScvMa_srt+56;
 },
 _ccw6k() //  [R1]
         { []
         }
     {offset
       ccw6k: // global
           _scvjN::P64 = P64[Sp + 40];
           _scvjR::P64 = P64[Sp + 16];
           _scvjS::P64 = P64[Sp + 8];
           _ccwsa::P64 = R1 & 7;
           if (_ccwsa::P64 < 3) goto ucwsd; else goto ccwn6;
       ucwsd: // global
           if (_ccwsa::P64 < 2) goto ucwsh; else goto ccwmW;
       ucwsh: // global
           Sp = Sp + 24;
           call _ccwnh() args: 0, res: 0, upd: 0;
       ccwmW: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccwmZ; else goto ccwmY;
       ccwmZ: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwmY: // global
           I64[Hp - 144] = ds4_scvl3_info;
           P64[Hp - 128] = _scvjN::P64;
           P64[Hp - 120] = _scvjR::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccw6q::P64 = Hp - 144;
           P64[Hp - 96] = _ccw6q::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccw6q::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccw6q::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scvjS::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccw6q::P64;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwn6: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwn9; else goto ccwn8;
       ccwn9: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwn8: // global
           _scvly::P64 = P64[R1 + 5];
           I64[Hp - 184] = ds4_scvlz_info;
           P64[Hp - 168] = _scvjN::P64;
           P64[Hp - 160] = _scvjR::P64;
           P64[Hp - 152] = R1;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccw6F::P64 = Hp - 184;
           P64[Hp - 128] = _ccw6F::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccw6F::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccw6F::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccw6F::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _scvly::P64;
           P64[Hp - 24] = _scvjS::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccw6k_info" {
     block_ccw6k_info:
         const _ccw6k;
         const 517;
         const 4294967326;
         const ScvMa_srt+56;
 },
 _ccwnh() //  []
         { []
         }
     {offset
       ccwnh: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[Sp];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.186435959 UTC

[section ""data" . System.Console.GetOpt.getOpt'_closure" {
     System.Console.GetOpt.getOpt'_closure:
         const System.Console.GetOpt.getOpt'_info;
         const 0;
 },
 System.Console.GetOpt.getOpt'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       ccwLQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccwLR; else goto ccwLS;
       ccwLR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.getOpt'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwLS: // global
           I64[Sp - 8] = block_ccwLN_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.getOpt'_info" {
     System.Console.GetOpt.getOpt'_info:
         const System.Console.GetOpt.getOpt'_entry;
         const 0;
         const 73014444046;
         const 12884901911;
         const ScvMa_srt+56;
 },
 _ccwLN() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwLN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwLV; else goto ccwLU;
       ccwLV: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
       ccwLU: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccwLN_info" {
     block_ccwLN_info:
         const _ccwLN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.194543641 UTC

[section ""data" . System.Console.GetOpt.getOpt_closure" {
     System.Console.GetOpt.getOpt_closure:
         const System.Console.GetOpt.getOpt_info;
         const 0;
 },
 ds_scvBf_entry() //  [R1]
         { []
         }
     {offset
       ccwMi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwMj; else goto ccwMk;
       ccwMj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwMk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwMf_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_scvBf_info" {
     ds_scvBf_info:
         const ds_scvBf_entry;
         const 3;
         const 4294967311;
         const ScvMa_srt+56;
 },
 _ccwMf() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       ccwMf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwMn; else goto ccwMm;
       ccwMn: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwMm: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwMf_info" {
     block_ccwMf_info:
         const _ccwMf;
         const 0;
         const 30;
 },
 sat_scvBC_entry() //  [R1]
         { []
         }
     {offset
       ccwMB: // global
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.errUnrec_closure+1;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scvBC_info" {
     sat_scvBC_info:
         const sat_scvBC_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+48;
 },
 sat_scvBD_entry() //  [R1]
         { []
         }
     {offset
       ccwME: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwMF; else goto ccwMG;
       ccwMF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwMG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwMs_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucwMK; else goto ccwMt;
       ucwMK: // global
           call _ccwMs(R1) args: 0, res: 0, upd: 0;
       ccwMt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scvBD_info" {
     sat_scvBD_info:
         const sat_scvBD_entry;
         const 1;
         const 4294967312;
         const ScvMa_srt+48;
 },
 _ccwMs() //  [R1]
         { []
         }
     {offset
       ccwMs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwMJ; else goto ccwMI;
       ccwMJ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccwMI: // global
           _scvBA::P64 = P64[R1 + 23];
           _scvBB::P64 = P64[R1 + 31];
           I64[Hp - 16] = sat_scvBC_info;
           P64[Hp] = _scvBA::P64;
           R3 = Hp - 16;
           R2 = _scvBB::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccwMs_info" {
     block_ccwMs_info:
         const _ccwMs;
         const 0;
         const 4294967326;
         const ScvMa_srt+48;
 },
 System.Console.GetOpt.getOpt_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       ccwMO: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccwMS; else goto ccwMR;
       ccwMS: // global
           HpAlloc = 144;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.getOpt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwMR: // global
           I64[Hp - 136] = ds_scvBf_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           I64[Hp - 96] = sat_scvBD_info;
           _ccwMb::P64 = Hp - 136;
           P64[Hp - 80] = _ccwMb::P64;
           I64[Hp - 72] = stg_sel_1_upd_info;
           P64[Hp - 56] = _ccwMb::P64;
           I64[Hp - 48] = stg_sel_0_upd_info;
           P64[Hp - 32] = _ccwMb::P64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.getOpt_info" {
     System.Console.GetOpt.getOpt_info:
         const System.Console.GetOpt.getOpt_entry;
         const 0;
         const 287762808846;
         const 12884901911;
         const ScvMa_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.207190072 UTC

[section ""cstring" . System.Console.GetOpt.$trModule4_bytes" {
     System.Console.GetOpt.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.209121992 UTC

[section ""data" . System.Console.GetOpt.$trModule3_closure" {
     System.Console.GetOpt.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.211581605 UTC

[section ""cstring" . System.Console.GetOpt.$trModule2_bytes" {
     System.Console.GetOpt.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.213632754 UTC

[section ""data" . System.Console.GetOpt.$trModule1_closure" {
     System.Console.GetOpt.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.215398513 UTC

[section ""data" . System.Console.GetOpt.$trModule_closure" {
     System.Console.GetOpt.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Console.GetOpt.$trModule3_closure+1;
         const System.Console.GetOpt.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.217236299 UTC

[section ""data" . $krep_rcsnm_closure" {
     $krep_rcsnm_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.219092241 UTC

[section ""data" . $krep1_rcsnn_closure" {
     $krep1_rcsnn_closure:
         const :_con_info;
         const $krep_rcsnm_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.220900826 UTC

[section ""data" . $krep2_rcsno_closure" {
     $krep2_rcsno_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_rcsnn_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.222732803 UTC

[section ""data" . $krep3_rcsnp_closure" {
     $krep3_rcsnp_closure:
         const :_con_info;
         const $krep2_rcsno_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.224614482 UTC

[section ""data" . $krep4_rcsnq_closure" {
     $krep4_rcsnq_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep3_rcsnp_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.226819648 UTC

[section ""data" . $krep5_rcsnr_closure" {
     $krep5_rcsnr_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep3_rcsnp_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.228635176 UTC

[section ""data" . $krep6_rcsns_closure" {
     $krep6_rcsns_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.23042348 UTC

[section ""data" . $krep7_rcsnt_closure" {
     $krep7_rcsnt_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep6_rcsns_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.232253385 UTC

[section ""data" . $krep8_rcsnu_closure" {
     $krep8_rcsnu_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rcsnq_closure+1;
         const $krep6_rcsns_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.23406495 UTC

[section ""cstring" . System.Console.GetOpt.$tcArgOrder2_bytes" {
     System.Console.GetOpt.$tcArgOrder2_bytes:
         I8[] [65,114,103,79,114,100,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.235844316 UTC

[section ""data" . System.Console.GetOpt.$tcArgOrder1_closure" {
     System.Console.GetOpt.$tcArgOrder1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcArgOrder2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.238754506 UTC

[section ""data" . System.Console.GetOpt.$tcArgOrder_closure" {
     System.Console.GetOpt.$tcArgOrder_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcArgOrder1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 2821249393238363172;
         const 5857765806309969278;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.240666164 UTC

[section ""data" . $krep9_rcsnv_closure" {
     $krep9_rcsnv_closure:
         const :_con_info;
         const $krep6_rcsns_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.242438493 UTC

[section ""data" . System.Console.GetOpt.$tc'Permute1_closure" {
     System.Console.GetOpt.$tc'Permute1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcArgOrder_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.244137945 UTC

[section ""cstring" . System.Console.GetOpt.$tc'RequireOrder2_bytes" {
     System.Console.GetOpt.$tc'RequireOrder2_bytes:
         I8[] [39,82,101,113,117,105,114,101,79,114,100,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.245891899 UTC

[section ""data" . System.Console.GetOpt.$tc'RequireOrder1_closure" {
     System.Console.GetOpt.$tc'RequireOrder1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'RequireOrder2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.247657827 UTC

[section ""data" . System.Console.GetOpt.$tc'RequireOrder_closure" {
     System.Console.GetOpt.$tc'RequireOrder_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'RequireOrder1_closure+1;
         const System.Console.GetOpt.$tc'Permute1_closure+1;
         const 16641478699741903091;
         const 17241976392395699271;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.250008396 UTC

[section ""cstring" . System.Console.GetOpt.$tc'Permute3_bytes" {
     System.Console.GetOpt.$tc'Permute3_bytes:
         I8[] [39,80,101,114,109,117,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.251691513 UTC

[section ""data" . System.Console.GetOpt.$tc'Permute2_closure" {
     System.Console.GetOpt.$tc'Permute2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'Permute3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.253561314 UTC

[section ""data" . System.Console.GetOpt.$tc'Permute_closure" {
     System.Console.GetOpt.$tc'Permute_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'Permute2_closure+1;
         const System.Console.GetOpt.$tc'Permute1_closure+1;
         const 16188869008381252759;
         const 7304126484053682933;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.255365996 UTC

[section ""data" . System.Console.GetOpt.$tc'ReturnInOrder1_closure" {
     System.Console.GetOpt.$tc'ReturnInOrder1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rcsnt_closure+4;
         const System.Console.GetOpt.$tc'Permute1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.257215487 UTC

[section ""cstring" . System.Console.GetOpt.$tc'ReturnInOrder3_bytes" {
     System.Console.GetOpt.$tc'ReturnInOrder3_bytes:
         I8[] [39,82,101,116,117,114,110,73,110,79,114,100,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.258984985 UTC

[section ""data" . System.Console.GetOpt.$tc'ReturnInOrder2_closure" {
     System.Console.GetOpt.$tc'ReturnInOrder2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'ReturnInOrder3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.260806502 UTC

[section ""data" . System.Console.GetOpt.$tc'ReturnInOrder_closure" {
     System.Console.GetOpt.$tc'ReturnInOrder_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'ReturnInOrder2_closure+1;
         const System.Console.GetOpt.$tc'ReturnInOrder1_closure+4;
         const 11429107017830306662;
         const 977062333259332084;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.26302777 UTC

[section ""cstring" . System.Console.GetOpt.$tcArgDescr2_bytes" {
     System.Console.GetOpt.$tcArgDescr2_bytes:
         I8[] [65,114,103,68,101,115,99,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.264715218 UTC

[section ""data" . System.Console.GetOpt.$tcArgDescr1_closure" {
     System.Console.GetOpt.$tcArgDescr1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcArgDescr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.267092181 UTC

[section ""data" . System.Console.GetOpt.$tcArgDescr_closure" {
     System.Console.GetOpt.$tcArgDescr_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcArgDescr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5371299798435897528;
         const 4777542234116424858;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.268992569 UTC

[section ""data" . $krep10_rcsnw_closure" {
     $krep10_rcsnw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcArgDescr_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.270831603 UTC

[section ""data" . System.Console.GetOpt.$tc'NoArg1_closure" {
     System.Console.GetOpt.$tc'NoArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcsns_closure+2;
         const $krep10_rcsnw_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.272572606 UTC

[section ""cstring" . System.Console.GetOpt.$tc'NoArg3_bytes" {
     System.Console.GetOpt.$tc'NoArg3_bytes:
         I8[] [39,78,111,65,114,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.274747004 UTC

[section ""data" . System.Console.GetOpt.$tc'NoArg2_closure" {
     System.Console.GetOpt.$tc'NoArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'NoArg3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.276522181 UTC

[section ""data" . System.Console.GetOpt.$tc'NoArg_closure" {
     System.Console.GetOpt.$tc'NoArg_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'NoArg2_closure+1;
         const System.Console.GetOpt.$tc'NoArg1_closure+4;
         const 4447437708857855473;
         const 9938854276741266046;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.278435429 UTC

[section ""data" . $krep11_rcsnx_closure" {
     $krep11_rcsnx_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep10_rcsnw_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.280249 UTC

[section ""data" . System.Console.GetOpt.$tc'OptArg1_closure" {
     System.Console.GetOpt.$tc'OptArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rcsnu_closure+4;
         const $krep11_rcsnx_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.282084665 UTC

[section ""cstring" . System.Console.GetOpt.$tc'OptArg3_bytes" {
     System.Console.GetOpt.$tc'OptArg3_bytes:
         I8[] [39,79,112,116,65,114,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.28383764 UTC

[section ""data" . System.Console.GetOpt.$tc'OptArg2_closure" {
     System.Console.GetOpt.$tc'OptArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'OptArg3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.286100267 UTC

[section ""data" . System.Console.GetOpt.$tc'OptArg_closure" {
     System.Console.GetOpt.$tc'OptArg_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'OptArg2_closure+1;
         const System.Console.GetOpt.$tc'OptArg1_closure+4;
         const 2223072509852051452;
         const 11632957215606156764;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.287998349 UTC

[section ""data" . System.Console.GetOpt.$tc'ReqArg1_closure" {
     System.Console.GetOpt.$tc'ReqArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rcsnt_closure+4;
         const $krep11_rcsnx_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.289803137 UTC

[section ""cstring" . System.Console.GetOpt.$tc'ReqArg3_bytes" {
     System.Console.GetOpt.$tc'ReqArg3_bytes:
         I8[] [39,82,101,113,65,114,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.291570202 UTC

[section ""data" . System.Console.GetOpt.$tc'ReqArg2_closure" {
     System.Console.GetOpt.$tc'ReqArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'ReqArg3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.294083878 UTC

[section ""data" . System.Console.GetOpt.$tc'ReqArg_closure" {
     System.Console.GetOpt.$tc'ReqArg_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'ReqArg2_closure+1;
         const System.Console.GetOpt.$tc'ReqArg1_closure+4;
         const 16427330633826478147;
         const 15179110347223027838;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.295923479 UTC

[section ""cstring" . System.Console.GetOpt.$tcOptDescr2_bytes" {
     System.Console.GetOpt.$tcOptDescr2_bytes:
         I8[] [79,112,116,68,101,115,99,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.298129466 UTC

[section ""data" . System.Console.GetOpt.$tcOptDescr1_closure" {
     System.Console.GetOpt.$tcOptDescr1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcOptDescr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.299984547 UTC

[section ""data" . System.Console.GetOpt.$tcOptDescr_closure" {
     System.Console.GetOpt.$tcOptDescr_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcOptDescr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5602371009437266142;
         const 11022077518484673144;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.301773643 UTC

[section ""data" . $krep12_rcsny_closure" {
     $krep12_rcsny_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcOptDescr_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.303606746 UTC

[section ""data" . $krep13_rcsnz_closure" {
     $krep13_rcsnz_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep12_rcsny_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.307658334 UTC

[section ""data" . $krep14_rcsnA_closure" {
     $krep14_rcsnA_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcsnw_closure+1;
         const $krep13_rcsnz_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.309994064 UTC

[section ""data" . $krep15_rcsnB_closure" {
     $krep15_rcsnB_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcsnr_closure+1;
         const $krep14_rcsnA_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.311824204 UTC

[section ""data" . System.Console.GetOpt.$tc'Option1_closure" {
     System.Console.GetOpt.$tc'Option1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep15_rcsnB_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.313700353 UTC

[section ""cstring" . System.Console.GetOpt.$tc'Option3_bytes" {
     System.Console.GetOpt.$tc'Option3_bytes:
         I8[] [39,79,112,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.315496358 UTC

[section ""data" . System.Console.GetOpt.$tc'Option2_closure" {
     System.Console.GetOpt.$tc'Option2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'Option3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.317518963 UTC

[section ""data" . System.Console.GetOpt.$tc'Option_closure" {
     System.Console.GetOpt.$tc'Option_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'Option2_closure+1;
         const System.Console.GetOpt.$tc'Option1_closure+4;
         const 10066039264625497029;
         const 5674636120141944492;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.319486627 UTC

[section ""cstring" . System.Console.GetOpt.$tcOptKind2_bytes" {
     System.Console.GetOpt.$tcOptKind2_bytes:
         I8[] [79,112,116,75,105,110,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.321678834 UTC

[section ""data" . System.Console.GetOpt.$tcOptKind1_closure" {
     System.Console.GetOpt.$tcOptKind1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcOptKind2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.324407243 UTC

[section ""data" . System.Console.GetOpt.$tcOptKind_closure" {
     System.Console.GetOpt.$tcOptKind_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcOptKind1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5196380470096609574;
         const 4174335291028142741;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.326460443 UTC

[section ""data" . System.Console.GetOpt.$tc'EndOfOpts1_closure" {
     System.Console.GetOpt.$tc'EndOfOpts1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcOptKind_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.328309359 UTC

[section ""cstring" . System.Console.GetOpt.$tc'EndOfOpts3_bytes" {
     System.Console.GetOpt.$tc'EndOfOpts3_bytes:
         I8[] [39,69,110,100,79,102,79,112,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.330142912 UTC

[section ""data" . System.Console.GetOpt.$tc'EndOfOpts2_closure" {
     System.Console.GetOpt.$tc'EndOfOpts2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'EndOfOpts3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.331910492 UTC

[section ""data" . System.Console.GetOpt.$tc'EndOfOpts_closure" {
     System.Console.GetOpt.$tc'EndOfOpts_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'EndOfOpts2_closure+1;
         const System.Console.GetOpt.$tc'EndOfOpts1_closure+1;
         const 16241379069650497856;
         const 7399561775253491405;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.334150889 UTC

[section ""data" . System.Console.GetOpt.$tc'Opt1_closure" {
     System.Console.GetOpt.$tc'Opt1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcsns_closure+2;
         const System.Console.GetOpt.$tc'EndOfOpts1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.336051918 UTC

[section ""cstring" . System.Console.GetOpt.$tc'Opt3_bytes" {
     System.Console.GetOpt.$tc'Opt3_bytes:
         I8[] [39,79,112,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.337826359 UTC

[section ""data" . System.Console.GetOpt.$tc'Opt2_closure" {
     System.Console.GetOpt.$tc'Opt2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'Opt3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.339714361 UTC

[section ""data" . System.Console.GetOpt.$tc'Opt_closure" {
     System.Console.GetOpt.$tc'Opt_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'Opt2_closure+1;
         const System.Console.GetOpt.$tc'Opt1_closure+4;
         const 2387467460439073880;
         const 875868993959501908;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.341642545 UTC

[section ""data" . System.Console.GetOpt.$tc'NonOpt1_closure" {
     System.Console.GetOpt.$tc'NonOpt1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const System.Console.GetOpt.$tc'EndOfOpts1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.343423435 UTC

[section ""cstring" . System.Console.GetOpt.$tc'UnreqOpt2_bytes" {
     System.Console.GetOpt.$tc'UnreqOpt2_bytes:
         I8[] [39,85,110,114,101,113,79,112,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.345261939 UTC

[section ""data" . System.Console.GetOpt.$tc'UnreqOpt1_closure" {
     System.Console.GetOpt.$tc'UnreqOpt1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'UnreqOpt2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.347156784 UTC

[section ""data" . System.Console.GetOpt.$tc'UnreqOpt_closure" {
     System.Console.GetOpt.$tc'UnreqOpt_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'UnreqOpt1_closure+1;
         const System.Console.GetOpt.$tc'NonOpt1_closure+4;
         const 6747281843324563502;
         const 13162655807375334605;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.349025201 UTC

[section ""cstring" . System.Console.GetOpt.$tc'NonOpt3_bytes" {
     System.Console.GetOpt.$tc'NonOpt3_bytes:
         I8[] [39,78,111,110,79,112,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.351369096 UTC

[section ""data" . System.Console.GetOpt.$tc'NonOpt2_closure" {
     System.Console.GetOpt.$tc'NonOpt2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'NonOpt3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.353210375 UTC

[section ""data" . System.Console.GetOpt.$tc'NonOpt_closure" {
     System.Console.GetOpt.$tc'NonOpt_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'NonOpt2_closure+1;
         const System.Console.GetOpt.$tc'NonOpt1_closure+4;
         const 17187900375792953920;
         const 18196243003688324985;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.355044117 UTC

[section ""cstring" . System.Console.GetOpt.$tc'OptErr2_bytes" {
     System.Console.GetOpt.$tc'OptErr2_bytes:
         I8[] [39,79,112,116,69,114,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.356826919 UTC

[section ""data" . System.Console.GetOpt.$tc'OptErr1_closure" {
     System.Console.GetOpt.$tc'OptErr1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'OptErr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.358781914 UTC

[section ""data" . System.Console.GetOpt.$tc'OptErr_closure" {
     System.Console.GetOpt.$tc'OptErr_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'OptErr1_closure+1;
         const System.Console.GetOpt.$tc'NonOpt1_closure+4;
         const 13165663139815598038;
         const 5639435123785572420;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.362135329 UTC

[section ""data" . System.Console.GetOpt.Opt_closure" {
     System.Console.GetOpt.Opt_closure:
         const System.Console.GetOpt.Opt_info;
 },
 System.Console.GetOpt.Opt_entry() //  [R2]
         { []
         }
     {offset
       ccwOQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccwOU; else goto ccwOT;
       ccwOU: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.Opt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccwOT: // global
           I64[Hp - 8] = System.Console.GetOpt.Opt_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.Opt_info" {
     System.Console.GetOpt.Opt_info:
         const System.Console.GetOpt.Opt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.366272161 UTC

[section ""data" . System.Console.GetOpt.UnreqOpt_closure" {
     System.Console.GetOpt.UnreqOpt_closure:
         const System.Console.GetOpt.UnreqOpt_info;
 },
 System.Console.GetOpt.UnreqOpt_entry() //  [R2]
         { []
         }
     {offset
       ccwP6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccwPa; else goto ccwP9;
       ccwPa: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.UnreqOpt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccwP9: // global
           I64[Hp - 8] = System.Console.GetOpt.UnreqOpt_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.UnreqOpt_info" {
     System.Console.GetOpt.UnreqOpt_info:
         const System.Console.GetOpt.UnreqOpt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.371248859 UTC

[section ""data" . System.Console.GetOpt.NonOpt_closure" {
     System.Console.GetOpt.NonOpt_closure:
         const System.Console.GetOpt.NonOpt_info;
 },
 System.Console.GetOpt.NonOpt_entry() //  [R2]
         { []
         }
     {offset
       ccwPm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccwPq; else goto ccwPp;
       ccwPq: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.NonOpt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccwPp: // global
           I64[Hp - 8] = System.Console.GetOpt.NonOpt_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.NonOpt_info" {
     System.Console.GetOpt.NonOpt_info:
         const System.Console.GetOpt.NonOpt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.374909219 UTC

[section ""data" . System.Console.GetOpt.EndOfOpts_closure" {
     System.Console.GetOpt.EndOfOpts_closure:
         const System.Console.GetOpt.EndOfOpts_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.37714977 UTC

[section ""data" . System.Console.GetOpt.OptErr_closure" {
     System.Console.GetOpt.OptErr_closure:
         const System.Console.GetOpt.OptErr_info;
 },
 System.Console.GetOpt.OptErr_entry() //  [R2]
         { []
         }
     {offset
       ccwPD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccwPH; else goto ccwPG;
       ccwPH: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.OptErr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccwPG: // global
           I64[Hp - 8] = System.Console.GetOpt.OptErr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.OptErr_info" {
     System.Console.GetOpt.OptErr_info:
         const System.Console.GetOpt.OptErr_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.381531483 UTC

[section ""data" . System.Console.GetOpt.NoArg_closure" {
     System.Console.GetOpt.NoArg_closure:
         const System.Console.GetOpt.NoArg_info;
 },
 System.Console.GetOpt.NoArg_entry() //  [R2]
         { []
         }
     {offset
       ccwPT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccwPX; else goto ccwPW;
       ccwPX: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.NoArg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccwPW: // global
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.NoArg_info" {
     System.Console.GetOpt.NoArg_info:
         const System.Console.GetOpt.NoArg_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.386216121 UTC

[section ""data" . System.Console.GetOpt.ReqArg_closure" {
     System.Console.GetOpt.ReqArg_closure:
         const System.Console.GetOpt.ReqArg_info;
 },
 System.Console.GetOpt.ReqArg_entry() //  [R2, R3]
         { []
         }
     {offset
       ccwQ9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwQd; else goto ccwQc;
       ccwQd: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.ReqArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwQc: // global
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.ReqArg_info" {
     System.Console.GetOpt.ReqArg_info:
         const System.Console.GetOpt.ReqArg_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.390397091 UTC

[section ""data" . System.Console.GetOpt.OptArg_closure" {
     System.Console.GetOpt.OptArg_closure:
         const System.Console.GetOpt.OptArg_info;
 },
 System.Console.GetOpt.OptArg_entry() //  [R2, R3]
         { []
         }
     {offset
       ccwQp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwQt; else goto ccwQs;
       ccwQt: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.OptArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwQs: // global
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 13;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.OptArg_info" {
     System.Console.GetOpt.OptArg_info:
         const System.Console.GetOpt.OptArg_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.394450861 UTC

[section ""data" . System.Console.GetOpt.Option_closure" {
     System.Console.GetOpt.Option_closure:
         const System.Console.GetOpt.Option_info;
 },
 System.Console.GetOpt.Option_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       ccwQF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwQJ; else goto ccwQI;
       ccwQJ: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.Option_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwQI: // global
           I64[Hp - 32] = System.Console.GetOpt.Option_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.Option_info" {
     System.Console.GetOpt.Option_info:
         const System.Console.GetOpt.Option_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.397978804 UTC

[section ""data" . System.Console.GetOpt.RequireOrder_closure" {
     System.Console.GetOpt.RequireOrder_closure:
         const System.Console.GetOpt.RequireOrder_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.399800269 UTC

[section ""data" . System.Console.GetOpt.Permute_closure" {
     System.Console.GetOpt.Permute_closure:
         const System.Console.GetOpt.Permute_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.402085839 UTC

[section ""data" . System.Console.GetOpt.ReturnInOrder_closure" {
     System.Console.GetOpt.ReturnInOrder_closure:
         const System.Console.GetOpt.ReturnInOrder_info;
 },
 System.Console.GetOpt.ReturnInOrder_entry() //  [R2]
         { []
         }
     {offset
       ccwQX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccwR1; else goto ccwR0;
       ccwR1: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.ReturnInOrder_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccwR0: // global
           I64[Hp - 8] = System.Console.GetOpt.ReturnInOrder_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.ReturnInOrder_info" {
     System.Console.GetOpt.ReturnInOrder_info:
         const System.Console.GetOpt.ReturnInOrder_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.405821786 UTC

[section ""cstring" . icwR9_str" {
     icwR9_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116]
 },
 System.Console.GetOpt.Opt_con_entry() //  [R1]
         { []
         }
     {offset
       ccwR8: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.Opt_con_info" {
     System.Console.GetOpt.Opt_con_info:
         const System.Console.GetOpt.Opt_con_entry;
         const 1;
         const 2;
         const icwR9_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.409212763 UTC

[section ""cstring" . icwRg_str" {
     icwRg_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,85,110,114,101,113,79,112,116]
 },
 System.Console.GetOpt.UnreqOpt_con_entry() //  [R1]
         { []
         }
     {offset
       ccwRf: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.UnreqOpt_con_info" {
     System.Console.GetOpt.UnreqOpt_con_info:
         const System.Console.GetOpt.UnreqOpt_con_entry;
         const 1;
         const 4294967298;
         const icwRg_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.412633231 UTC

[section ""cstring" . icwRn_str" {
     icwRn_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,78,111,110,79,112,116]
 },
 System.Console.GetOpt.NonOpt_con_entry() //  [R1]
         { []
         }
     {offset
       ccwRm: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.NonOpt_con_info" {
     System.Console.GetOpt.NonOpt_con_info:
         const System.Console.GetOpt.NonOpt_con_entry;
         const 1;
         const 8589934594;
         const icwRn_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.416555929 UTC

[section ""cstring" . icwRu_str" {
     icwRu_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,69,110,100,79,102,79,112,116,115]
 },
 System.Console.GetOpt.EndOfOpts_con_entry() //  [R1]
         { []
         }
     {offset
       ccwRt: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.EndOfOpts_con_info" {
     System.Console.GetOpt.EndOfOpts_con_info:
         const System.Console.GetOpt.EndOfOpts_con_entry;
         const 4294967296;
         const 12884901891;
         const icwRu_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.420452608 UTC

[section ""cstring" . icwRB_str" {
     icwRB_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116,69,114,114]
 },
 System.Console.GetOpt.OptErr_con_entry() //  [R1]
         { []
         }
     {offset
       ccwRA: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.OptErr_con_info" {
     System.Console.GetOpt.OptErr_con_info:
         const System.Console.GetOpt.OptErr_con_entry;
         const 1;
         const 17179869186;
         const icwRB_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.423746535 UTC

[section ""cstring" . icwRI_str" {
     icwRI_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,78,111,65,114,103]
 },
 System.Console.GetOpt.NoArg_con_entry() //  [R1]
         { []
         }
     {offset
       ccwRH: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.NoArg_con_info" {
     System.Console.GetOpt.NoArg_con_info:
         const System.Console.GetOpt.NoArg_con_entry;
         const 1;
         const 2;
         const icwRI_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.427499595 UTC

[section ""cstring" . icwRP_str" {
     icwRP_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,82,101,113,65,114,103]
 },
 System.Console.GetOpt.ReqArg_con_entry() //  [R1]
         { []
         }
     {offset
       ccwRO: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.ReqArg_con_info" {
     System.Console.GetOpt.ReqArg_con_info:
         const System.Console.GetOpt.ReqArg_con_entry;
         const 2;
         const 4294967300;
         const icwRP_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.430810183 UTC

[section ""cstring" . icwRW_str" {
     icwRW_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116,65,114,103]
 },
 System.Console.GetOpt.OptArg_con_entry() //  [R1]
         { []
         }
     {offset
       ccwRV: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.OptArg_con_info" {
     System.Console.GetOpt.OptArg_con_info:
         const System.Console.GetOpt.OptArg_con_entry;
         const 2;
         const 8589934596;
         const icwRW_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.434271209 UTC

[section ""cstring" . icwS3_str" {
     icwS3_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116,105,111,110]
 },
 System.Console.GetOpt.Option_con_entry() //  [R1]
         { []
         }
     {offset
       ccwS2: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.Option_con_info" {
     System.Console.GetOpt.Option_con_info:
         const System.Console.GetOpt.Option_con_entry;
         const 4;
         const 1;
         const icwS3_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.43801643 UTC

[section ""cstring" . icwSa_str" {
     icwSa_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,82,101,113,117,105,114,101,79,114,100,101,114]
 },
 System.Console.GetOpt.RequireOrder_con_entry() //  [R1]
         { []
         }
     {offset
       ccwS9: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.RequireOrder_con_info" {
     System.Console.GetOpt.RequireOrder_con_info:
         const System.Console.GetOpt.RequireOrder_con_entry;
         const 4294967296;
         const 3;
         const icwSa_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.441334507 UTC

[section ""cstring" . icwSh_str" {
     icwSh_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,80,101,114,109,117,116,101]
 },
 System.Console.GetOpt.Permute_con_entry() //  [R1]
         { []
         }
     {offset
       ccwSg: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.Permute_con_info" {
     System.Console.GetOpt.Permute_con_info:
         const System.Console.GetOpt.Permute_con_entry;
         const 4294967296;
         const 4294967299;
         const icwSh_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.444778246 UTC

[section ""cstring" . icwSo_str" {
     icwSo_str:
         I8[] [98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,82,101,116,117,114,110,73,110,79,114,100,101,114]
 },
 System.Console.GetOpt.ReturnInOrder_con_entry() //  [R1]
         { []
         }
     {offset
       ccwSn: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.Console.GetOpt.ReturnInOrder_con_info" {
     System.Console.GetOpt.ReturnInOrder_con_info:
         const System.Console.GetOpt.ReturnInOrder_con_entry;
         const 1;
         const 8589934594;
         const icwSo_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.448642969 UTC

[section ""relreadonly" . ScvMa_srt" {
     ScvMa_srt:
         const GHC.List.maximum2_closure;
         const System.Console.GetOpt.usageInfo_sameLen_closure;
         const System.Console.GetOpt.usageInfo1_closure;
         const lvl10_rcsn5_closure;
         const System.Console.GetOpt.usageInfo_closure;
         const lvl17_rcsnc_closure;
         const System.Console.GetOpt.errUnrec_closure;
         const System.Console.GetOpt.$wgetOpt'_closure;
         const lvl16_rcsnb_closure;
         const lvl24_rcsnk_closure;
         const lvl22_rcsnh_closure;
         const System.Console.GetOpt.getOpt'_closure;
         const System.Console.GetOpt.getOpt_closure;
 }]

