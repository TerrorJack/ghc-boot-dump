
==================== Output Cmm ====================
2018-03-16 16:07:20.334691253 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:20.336072843 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure" {
     System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure:
         const System.Console.GetOpt.$fFunctorArgOrder_$cfmap_info;
 },
 sat_scsnH_entry() //  [R1, R2]
         { info_tbl: [(ccsK5,
                       label: sat_scsnH_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsK5: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.$fFunctorArgOrder_$cfmap_entry() //  [R2, R3]
         { info_tbl: [(ccsKd,
                       label: System.Console.GetOpt.$fFunctorArgOrder_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsKd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsKe; else goto ccsKf;
       ccsKe: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccsKf: // global
           I64[Sp - 16] = block_ccsJT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucsKp; else goto ccsJU;
       ucsKp: // global
           call _ccsJT(R1) args: 0, res: 0, upd: 0;
       ccsJU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsJT() //  [R1]
         { info_tbl: [(ccsJT,
                       label: block_ccsJT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsJT: // global
           _ccsKc::P64 = R1 & 7;
           if (_ccsKc::P64 < 3) goto ucsKo; else goto ccsKb;
       ucsKo: // global
           if (_ccsKc::P64 < 2) goto ccsK9; else goto ccsKa;
       ccsK9: // global
           R1 = System.Console.GetOpt.RequireOrder_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccsKa: // global
           R1 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccsKb: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccsKn; else goto ccsKm;
       ccsKn: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccsKm: // global
           _scsnG::P64 = P64[R1 + 5];
           I64[Hp - 32] = sat_scsnH_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _scsnG::P64;
           I64[Hp - 8] = System.Console.GetOpt.ReturnInOrder_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 5;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.338345666 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure" {
     System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure:
         const System.Console.GetOpt.$fFunctorArgOrder_$c<$_info;
 },
 sat_scsnN_entry() //  [R1]
         { info_tbl: [(ccsKG,
                       label: sat_scsnN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsKG: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.$fFunctorArgOrder_$c<$_entry() //  [R2, R3]
         { info_tbl: [(ccsKO,
                       label: System.Console.GetOpt.$fFunctorArgOrder_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsKO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsKP; else goto ccsKQ;
       ccsKP: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccsKQ: // global
           I64[Sp - 16] = block_ccsKu_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucsL0; else goto ccsKv;
       ucsL0: // global
           call _ccsKu(R1) args: 0, res: 0, upd: 0;
       ccsKv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsKu() //  [R1]
         { info_tbl: [(ccsKu,
                       label: block_ccsKu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsKu: // global
           _ccsKN::P64 = R1 & 7;
           if (_ccsKN::P64 < 3) goto ucsKZ; else goto ccsKM;
       ucsKZ: // global
           if (_ccsKN::P64 < 2) goto ccsKK; else goto ccsKL;
       ccsKK: // global
           R1 = System.Console.GetOpt.RequireOrder_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccsKL: // global
           R1 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccsKM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccsKY; else goto ccsKX;
       ccsKY: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccsKX: // global
           I64[Hp - 24] = sat_scsnN_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = System.Console.GetOpt.ReturnInOrder_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 5;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.339912859 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgOrder_closure" {
     System.Console.GetOpt.$fFunctorArgOrder_closure:
         const GHC.Base.C:Functor_con_info;
         const System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure+2;
         const System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.341509484 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure" {
     System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure:
         const System.Console.GetOpt.$fFunctorArgDescr_$cfmap_info;
 },
 sat_scsnV_entry() //  [R1, R2]
         { info_tbl: [(ccsLg,
                       label: sat_scsnV_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsLg: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsnY_entry() //  [R1, R2]
         { info_tbl: [(ccsLq,
                       label: sat_scsnY_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsLq: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.$fFunctorArgDescr_$cfmap_entry() //  [R2, R3]
         { info_tbl: [(ccsLy,
                       label: System.Console.GetOpt.$fFunctorArgDescr_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsLy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsLz; else goto ccsLA;
       ccsLz: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccsLA: // global
           I64[Sp - 16] = block_ccsL5_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucsLQ; else goto ccsL6;
       ucsLQ: // global
           call _ccsL5(R1) args: 0, res: 0, upd: 0;
       ccsL6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsL5() //  [R1]
         { info_tbl: [(ccsL5,
                       label: block_ccsL5_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsL5: // global
           _scsnO::P64 = P64[Sp + 8];
           _ccsLx::P64 = R1 & 7;
           if (_ccsLx::P64 < 3) goto ucsLP; else goto ccsLw;
       ucsLP: // global
           if (_ccsLx::P64 < 2) goto ccsLu; else goto ccsLv;
       ccsLu: // global
           Hp = Hp + 48;
           _scsnQ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccsLO; else goto ccsLF;
       ccsLF: // global
           _scsnR::P64 = P64[_scsnQ::P64 + 7];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _scsnO::P64;
           P64[Hp - 16] = _scsnR::P64;
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccsLv: // global
           Hp = Hp + 48;
           _scsnQ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccsLO; else goto ccsLJ;
       ccsLJ: // global
           _scsnT::P64 = P64[_scsnQ::P64 + 6];
           _scsnU::P64 = P64[_scsnQ::P64 + 14];
           I64[Hp - 40] = sat_scsnV_info;
           P64[Hp - 32] = _scsnO::P64;
           P64[Hp - 24] = _scsnT::P64;
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = _scsnU::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccsLw: // global
           Hp = Hp + 48;
           _scsnQ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccsLO; else goto ccsLN;
       ccsLO: // global
           HpAlloc = 48;
           R1 = _scsnQ::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccsLN: // global
           _scsnW::P64 = P64[_scsnQ::P64 + 5];
           _scsnX::P64 = P64[_scsnQ::P64 + 13];
           I64[Hp - 40] = sat_scsnY_info;
           P64[Hp - 32] = _scsnO::P64;
           P64[Hp - 24] = _scsnW::P64;
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = _scsnX::P64;
           R1 = Hp - 13;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.344601084 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure" {
     System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure:
         const System.Console.GetOpt.$fFunctorArgDescr_$c<$_info;
 },
 sat_scso6_entry() //  [R1]
         { info_tbl: [(ccsM6,
                       label: sat_scso6_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsM6: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsoa_entry() //  [R1]
         { info_tbl: [(ccsMg,
                       label: sat_scsoa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsMg: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.$fFunctorArgDescr_$c<$_entry() //  [R2, R3]
         { info_tbl: [(ccsMo,
                       label: System.Console.GetOpt.$fFunctorArgDescr_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsMo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsMp; else goto ccsMq;
       ccsMp: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccsMq: // global
           I64[Sp - 16] = block_ccsLV_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucsMF; else goto ccsLW;
       ucsMF: // global
           call _ccsLV(R1) args: 0, res: 0, upd: 0;
       ccsLW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsLV() //  [R1]
         { info_tbl: [(ccsLV,
                       label: block_ccsLV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsLV: // global
           _scsnZ::P64 = P64[Sp + 8];
           _ccsMn::P64 = R1 & 7;
           if (_ccsMn::P64 < 3) goto ucsME; else goto ccsMm;
       ucsME: // global
           if (_ccsMn::P64 < 2) goto ccsMk; else goto ccsMl;
       ccsMk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccsMv; else goto ccsMu;
       ccsMv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccsMu: // global
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = _scsnZ::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccsMl: // global
           Hp = Hp + 40;
           _scso1::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccsMD; else goto ccsMy;
       ccsMy: // global
           _scso4::P64 = P64[_scso1::P64 + 14];
           I64[Hp - 32] = sat_scso6_info;
           P64[Hp - 24] = _scsnZ::P64;
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scso4::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccsMm: // global
           Hp = Hp + 40;
           _scso1::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccsMD; else goto ccsMC;
       ccsMD: // global
           HpAlloc = 40;
           R1 = _scso1::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccsMC: // global
           _scso8::P64 = P64[_scso1::P64 + 13];
           I64[Hp - 32] = sat_scsoa_info;
           P64[Hp - 24] = _scsnZ::P64;
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scso8::P64;
           R1 = Hp - 13;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.348344289 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgDescr_closure" {
     System.Console.GetOpt.$fFunctorArgDescr_closure:
         const GHC.Base.C:Functor_con_info;
         const System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure+2;
         const System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.349559105 UTC

[section ""data" . System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure" {
     System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure:
         const System.Console.GetOpt.$fFunctorOptDescr_$cfmap_info;
 },
 sat_scsoi_entry() //  [R1]
         { info_tbl: [(ccsMT,
                       label: sat_scsoi_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsMT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsMU; else goto ccsMV;
       ccsMU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsMV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.Console.GetOpt.$fFunctorArgDescr_$cfmap_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.$fFunctorOptDescr_$cfmap_entry() //  [R2, R3]
         { info_tbl: [(ccsMW,
                       label: System.Console.GetOpt.$fFunctorOptDescr_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsMW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsMY; else goto ccsMZ;
       ccsMY: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccsMZ: // global
           I64[Sp - 16] = block_ccsMK_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucsN3; else goto ccsML;
       ucsN3: // global
           call _ccsMK(R1) args: 0, res: 0, upd: 0;
       ccsML: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsMK() //  [R1]
         { info_tbl: [(ccsMK,
                       label: block_ccsMK_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsMK: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccsN2; else goto ccsN1;
       ccsN2: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccsN1: // global
           _scsoe::P64 = P64[R1 + 7];
           _scsof::P64 = P64[R1 + 15];
           _scsog::P64 = P64[R1 + 23];
           _scsoh::P64 = P64[R1 + 31];
           I64[Hp - 64] = sat_scsoi_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _scsog::P64;
           I64[Hp - 32] = System.Console.GetOpt.Option_con_info;
           P64[Hp - 24] = _scsoe::P64;
           P64[Hp - 16] = _scsof::P64;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = _scsoh::P64;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.352112424 UTC

[section ""data" . System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure" {
     System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure:
         const System.Console.GetOpt.$fFunctorOptDescr_$c<$_info;
 },
 sat_scsov_entry() //  [R1]
         { info_tbl: [(ccsNs,
                       label: sat_scsov_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsNs: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsoz_entry() //  [R1]
         { info_tbl: [(ccsNC,
                       label: sat_scsoz_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsNC: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsoA_entry() //  [R1]
         { info_tbl: [(ccsNK,
                       label: sat_scsoA_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsNK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccsNL; else goto ccsNM;
       ccsNL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsNM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccsNh_info;
           _scsoj::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _scsoj::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucsO1; else goto ccsNi;
       ucsO1: // global
           call _ccsNh(R1) args: 0, res: 0, upd: 0;
       ccsNi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccsNh() //  [R1]
         { info_tbl: [(ccsNh,
                       label: block_ccsNh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsNh: // global
           _scsoj::P64 = P64[Sp + 8];
           _ccsNJ::P64 = R1 & 7;
           if (_ccsNJ::P64 < 3) goto ucsO0; else goto ccsNI;
       ucsO0: // global
           if (_ccsNJ::P64 < 2) goto ccsNG; else goto ccsNH;
       ccsNG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccsNR; else goto ccsNQ;
       ccsNR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccsNQ: // global
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = _scsoj::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccsNH: // global
           Hp = Hp + 40;
           _scsoq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccsNZ; else goto ccsNU;
       ccsNU: // global
           _scsot::P64 = P64[_scsoq::P64 + 14];
           I64[Hp - 32] = sat_scsov_info;
           P64[Hp - 24] = _scsoj::P64;
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scsot::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccsNI: // global
           Hp = Hp + 40;
           _scsoq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccsNZ; else goto ccsNY;
       ccsNZ: // global
           HpAlloc = 40;
           R1 = _scsoq::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccsNY: // global
           _scsox::P64 = P64[_scsoq::P64 + 13];
           I64[Hp - 32] = sat_scsoz_info;
           P64[Hp - 24] = _scsoj::P64;
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scsox::P64;
           R1 = Hp - 13;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.$fFunctorOptDescr_$c<$_entry() //  [R2, R3]
         { info_tbl: [(ccsO2,
                       label: System.Console.GetOpt.$fFunctorOptDescr_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsO2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsO4; else goto ccsO5;
       ccsO4: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccsO5: // global
           I64[Sp - 16] = block_ccsN8_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucsO9; else goto ccsN9;
       ucsO9: // global
           call _ccsN8(R1) args: 0, res: 0, upd: 0;
       ccsN9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsN8() //  [R1]
         { info_tbl: [(ccsN8,
                       label: block_ccsN8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsN8: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccsO8; else goto ccsO7;
       ccsO8: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccsO7: // global
           _scsom::P64 = P64[R1 + 7];
           _scson::P64 = P64[R1 + 15];
           _scsoo::P64 = P64[R1 + 23];
           _scsop::P64 = P64[R1 + 31];
           I64[Hp - 64] = sat_scsoA_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _scsoo::P64;
           I64[Hp - 32] = System.Console.GetOpt.Option_con_info;
           P64[Hp - 24] = _scsom::P64;
           P64[Hp - 16] = _scson::P64;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = _scsop::P64;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.354536474 UTC

[section ""data" . System.Console.GetOpt.$fFunctorOptDescr_closure" {
     System.Console.GetOpt.$fFunctorOptDescr_closure:
         const GHC.Base.C:Functor_con_info;
         const System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure+2;
         const System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.355160962 UTC

[section ""data" . lvl_rcsmT_closure" {
     lvl_rcsmT_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.355718268 UTC

[section ""data" . lvl1_rcsmU_closure" {
     lvl1_rcsmU_closure:
         const :_con_info;
         const lvl_rcsmT_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.356794864 UTC

[section ""data" . $wxs_rcsmV_closure" {
     $wxs_rcsmV_closure:
         const $wxs_rcsmV_info;
 },
 sat_scsoE_entry() //  [R1]
         { info_tbl: [(ccsOm,
                       label: sat_scsoE_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsOm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsOn; else goto ccsOo;
       ccsOn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsOo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16] - 1;
           Sp = Sp - 16;
           call $wxs_rcsmV_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 $wxs_rcsmV_entry() //  [R2]
         { info_tbl: [(ccsOs,
                       label: $wxs_rcsmV_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsOs: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccsOw; else goto ccsOv;
       ccsOw: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = $wxs_rcsmV_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccsOv: // global
           if (R2 == 1) goto ccsOr; else goto ccsOq;
       ccsOr: // global
           Hp = Hp - 48;
           R1 = lvl1_rcsmU_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccsOq: // global
           I64[Hp - 40] = sat_scsoE_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl_rcsmT_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.3585586 UTC

[section ""data" . System.Console.GetOpt.$wgo_closure" {
     System.Console.GetOpt.$wgo_closure:
         const System.Console.GetOpt.$wgo_info;
 },
 sat_scsoM_entry() //  [R1]
         { info_tbl: [(ccsOQ,
                       label: sat_scsoM_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsOQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsOR; else goto ccsOS;
       ccsOR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsOS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 24] - 1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.Console.GetOpt.$wgo_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.$wgo_entry() //  [R2, R3]
         { info_tbl: [(ccsOX,
                       label: System.Console.GetOpt.$wgo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 14} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsOX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsOY; else goto ccsOZ;
       ccsOY: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$wgo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccsOZ: // global
           I64[Sp - 16] = block_ccsOC_info;
           R1 = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucsPb; else goto ccsOD;
       ucsPb: // global
           call _ccsOC(R1) args: 0, res: 0, upd: 0;
       ccsOD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsOC() //  [R1]
         { info_tbl: [(ccsOC,
                       label: block_ccsOC_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsOC: // global
           _scsoG::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto ccsOU; else goto ccsOV;
       ccsOU: // global
           R2 = _scsoG::I64;
           Sp = Sp + 16;
           call $wxs_rcsmV_entry(R2) args: 8, res: 0, upd: 8;
       ccsOV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccsP4; else goto ccsP3;
       ccsP4: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccsP3: // global
           _scsoI::P64 = P64[R1 + 6];
           if (_scsoG::I64 == 1) goto ccsPa; else goto ccsP7;
       ccsPa: // global
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = _scsoI::P64;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _ccsP9::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _ccsP9::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccsP7: // global
           _scsoJ::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_scsoM_info;
           P64[Hp - 32] = _scsoJ::P64;
           I64[Hp - 24] = _scsoG::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scsoI::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.361755109 UTC

[section ""data" . System.Console.GetOpt.usageInfo_sameLen_closure" {
     System.Console.GetOpt.usageInfo_sameLen_closure:
         const System.Console.GetOpt.usageInfo_sameLen_info;
         const 0;
 },
 n_scsoO_entry() //  [R1]
         { info_tbl: [(ccsPq,
                       label: n_scsoO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsPq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccsPr; else goto ccsPs;
       ccsPr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsPs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccsPk_info;
           R3 = P64[R1 + 16];
           R2 = GHC.List.length_closure+1;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccsPk() //  [R1]
         { info_tbl: [(ccsPk,
                       label: block_ccsPk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsPk: // global
           if (R1 & 7 == 1) goto ccsPn; else goto ccsPo;
       ccsPn: // global
           R1 = GHC.List.maximum2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       ccsPo: // global
           I64[Sp - 8] = block_ccsPy_info;
           _scsoR::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsoR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucsPN; else goto ccsPz;
       ucsPN: // global
           call _ccsPy(R1) args: 0, res: 0, upd: 0;
       ccsPz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccsPy() //  [R1]
         { info_tbl: [(ccsPy,
                       label: block_ccsPy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsPy: // global
           _scsoR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccsPD_info;
           R3 = I64[R1 + 7];
           R2 = _scsoR::P64;
           Sp = Sp + 8;
           call GHC.List.$wgo_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccsPD() //  [R1]
         { info_tbl: [(ccsPD,
                       label: block_ccsPD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsPD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccsPM; else goto ccsPL;
       ccsPM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       ccsPL: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl25_scsoV_entry() //  [R1]
         { info_tbl: [(ccsPV,
                       label: lvl25_scsoV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsPV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccsPW; else goto ccsPX;
       ccsPW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsPX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccsPS_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucsQ2; else goto ccsPT;
       ucsQ2: // global
           call _ccsPS(R1) args: 0, res: 0, upd: 0;
       ccsPT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccsPS() //  [R1]
         { info_tbl: [(ccsPS,
                       label: block_ccsPS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsPS: // global
           R1 = I64[(%MO_S_Lt_W64(0,
                                  I64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsp7_entry() //  [R1]
         { info_tbl: [(ccsQq,
                       label: sat_scsp7_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsQq: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccsQr; else goto ccsQs;
       ccsQr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsQs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_ccsQj_info;
           _scsoO::P64 = P64[R1 + 16];
           _scsp2::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _scsoO::P64;
           P64[Sp - 24] = _scsp2::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucsQG; else goto ccsQk;
       ucsQG: // global
           call _ccsQj(R1) args: 0, res: 0, upd: 0;
       ccsQk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccsQj() //  [R1]
         { info_tbl: [(ccsQj,
                       label: block_ccsQj_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsQj: // global
           if (R1 & 7 == 1) goto ccsQn; else goto ccsQo;
       ccsQn: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccsQo: // global
           _scsoO::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccsQy_info;
           R1 = _scsoO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucsQF; else goto ccsQA;
       ucsQF: // global
           call _ccsQy(R1) args: 0, res: 0, upd: 0;
       ccsQA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccsQy() //  [R1]
         { info_tbl: [(ccsQy,
                       label: block_ccsQy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsQy: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call System.Console.GetOpt.$wgo_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 go_scsoZ_entry() //  [R1, R2]
         { info_tbl: [(ccsQL,
                       label: go_scsoZ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsQL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccsQM; else goto ccsQN;
       ccsQM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccsQN: // global
           I64[Sp - 32] = block_ccsQ8_info;
           _scsoZ::P64 = R1;
           _scsoO::P64 = P64[R1 + 7];
           _scsoV::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _scsoO::P64;
           P64[Sp - 16] = _scsoV::P64;
           P64[Sp - 8] = _scsoZ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucsQU; else goto ccsQ9;
       ucsQU: // global
           call _ccsQ8(R1) args: 0, res: 0, upd: 0;
       ccsQ9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsQ8() //  [R1]
         { info_tbl: [(ccsQ8,
                       label: block_ccsQ8_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsQ8: // global
           if (R1 & 7 == 1) goto ccsQI; else goto ccsQJ;
       ccsQI: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccsQJ: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccsQT; else goto ccsQS;
       ccsQT: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccsQS: // global
           _scsp2::P64 = P64[R1 + 6];
           _scsp3::P64 = P64[R1 + 14];
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = _scsp3::P64;
           I64[Hp - 56] = sat_scsp7_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _scsp2::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.usageInfo_sameLen_entry() //  [R2]
         { info_tbl: [(ccsQV,
                       label: System.Console.GetOpt.usageInfo_sameLen_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsQV: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccsQZ; else goto ccsQY;
       ccsQZ: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo_sameLen_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccsQY: // global
           I64[Hp - 64] = n_scsoO_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl25_scsoV_info;
           _ccsPg::P64 = Hp - 64;
           P64[Hp - 24] = _ccsPg::P64;
           I64[Hp - 16] = go_scsoZ_info;
           P64[Hp - 8] = _ccsPg::P64;
           P64[Hp] = Hp - 40;
           R2 = R2;
           R1 = Hp - 15;
           call go_scsoZ_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.366459155 UTC

[section ""data" . sepBy_rcsmW_closure" {
     sepBy_rcsmW_closure:
         const sepBy_rcsmW_info;
 },
 sat_scsph_entry() //  [R1]
         { info_tbl: [(ccsRl,
                       label: sat_scsph_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsRl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsRm; else goto ccsRn;
       ccsRm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsRn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call sepBy_rcsmW_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sepBy_rcsmW_entry() //  [R2, R3]
         { info_tbl: [(ccsRs,
                       label: sepBy_rcsmW_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsRs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccsRt; else goto ccsRu;
       ccsRt: // global
           R3 = R3;
           R2 = R2;
           R1 = sepBy_rcsmW_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccsRu: // global
           I64[Sp - 16] = block_ccsR5_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucsRK; else goto ccsR6;
       ucsRK: // global
           call _ccsR5(R1) args: 0, res: 0, upd: 0;
       ccsR6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsR5() //  [R1]
         { info_tbl: [(ccsR5,
                       label: block_ccsR5_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsR5: // global
           if (R1 & 7 == 1) goto ccsRp; else goto ccsRq;
       ccsRp: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccsRq: // global
           I64[Sp - 8] = block_ccsRb_info;
           _scspc::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scspc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucsRJ; else goto ccsRc;
       ucsRJ: // global
           call _ccsRb(R1) args: 0, res: 0, upd: 0;
       ccsRc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsRb() //  [R1]
         { info_tbl: [(ccsRb,
                       label: block_ccsRb_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsRb: // global
           _scspc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccsRB; else goto ccsRE;
       ccsRB: // global
           R1 = _scspc::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccsRE: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccsRH; else goto ccsRG;
       ccsRH: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccsRG: // global
           I64[Hp - 72] = sat_scsph_info;
           _scsp9::P64 = P64[Sp + 16];
           P64[Hp - 56] = _scsp9::P64;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl_rcsmT_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scsp9::P64;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _scspc::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.368266442 UTC

[section ""data" . lvl2_rcsmX_closure" {
     lvl2_rcsmX_closure:
         const GHC.Types.C#_con_info;
         const 44;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.368842495 UTC

[section ""cstring" . lvl3_rcsmY_bytes" {
     lvl3_rcsmY_bytes:
         I8[] [45]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.36944276 UTC

[section ""cstring" . lvl4_rcsmZ_bytes" {
     lvl4_rcsmZ_bytes:
         I8[] [91]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.369989539 UTC

[section ""cstring" . lvl5_rcsn0_bytes" {
     lvl5_rcsn0_bytes:
         I8[] [93]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.370549839 UTC

[section ""cstring" . lvl6_rcsn1_bytes" {
     lvl6_rcsn1_bytes:
         I8[] [45,45]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.371104988 UTC

[section ""cstring" . lvl7_rcsn2_bytes" {
     lvl7_rcsn2_bytes:
         I8[] [91,61]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.371678531 UTC

[section ""cstring" . lvl8_rcsn3_bytes" {
     lvl8_rcsn3_bytes:
         I8[] [32,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.374063273 UTC

[section ""data" . System.Console.GetOpt.usageInfo_go2_closure" {
     System.Console.GetOpt.usageInfo_go2_closure:
         const System.Console.GetOpt.usageInfo_go2_info;
 },
 sat_scspB_entry() //  [R1]
         { info_tbl: [(ccsSb,
                       label: sat_scspB_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsSb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsSc; else goto ccsSd;
       ccsSc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsSd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_go2_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scspw_entry() //  [R1]
         { info_tbl: [(ccsSy,
                       label: sat_scspw_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsSy: // global
           R3 = P64[R1 + 16];
           R2 = lvl8_rcsn3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scspx_entry() //  [R1]
         { info_tbl: [(ccsSB,
                       label: sat_scspx_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsSB: // global
           _scspx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccsSC; else goto ccsSD;
       ccsSD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccsSF; else goto ccsSE;
       ccsSF: // global
           HpAlloc = 24;
           goto ccsSC;
       ccsSC: // global
           R1 = _scspx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsSE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scspx::P64;
           _scspr::P64 = P64[_scspx::P64 + 16];
           _scspu::P64 = P64[_scspx::P64 + 24];
           I64[Hp - 16] = sat_scspw_info;
           P64[Hp] = _scspu::P64;
           R3 = Hp - 16;
           R2 = _scspr::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scspy_entry() //  [R1]
         { info_tbl: [(ccsSG,
                       label: sat_scspy_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsSG: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccsSK; else goto ccsSJ;
       ccsSK: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsSJ: // global
           _scspr::P64 = P64[R1 + 16];
           _scspu::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scspx_info;
           P64[Hp - 8] = _scspr::P64;
           P64[Hp] = _scspu::P64;
           R3 = Hp - 24;
           R2 = lvl8_rcsn3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scspz_entry() //  [R1]
         { info_tbl: [(ccsSL,
                       label: sat_scspz_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsSL: // global
           _scspz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccsSM; else goto ccsSN;
       ccsSN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccsSP; else goto ccsSO;
       ccsSP: // global
           HpAlloc = 32;
           goto ccsSM;
       ccsSM: // global
           R1 = _scspz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsSO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scspz::P64;
           _scspo::P64 = P64[_scspz::P64 + 16];
           _scspr::P64 = P64[_scspz::P64 + 24];
           _scspu::P64 = P64[_scspz::P64 + 32];
           I64[Hp - 24] = sat_scspy_info;
           P64[Hp - 8] = _scspr::P64;
           P64[Hp] = _scspu::P64;
           R3 = Hp - 24;
           R2 = _scspo::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scspA_entry() //  [R1]
         { info_tbl: [(ccsSQ,
                       label: sat_scspA_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsSQ: // global
           _scspA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccsSR; else goto ccsSS;
       ccsSS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccsSU; else goto ccsST;
       ccsSU: // global
           HpAlloc = 40;
           goto ccsSR;
       ccsSR: // global
           R1 = _scspA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsST: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scspA::P64;
           _scspo::P64 = P64[_scspA::P64 + 16];
           _scspr::P64 = P64[_scspA::P64 + 24];
           _scspu::P64 = P64[_scspA::P64 + 32];
           I64[Hp - 32] = sat_scspz_info;
           P64[Hp - 16] = _scspo::P64;
           P64[Hp - 8] = _scspr::P64;
           P64[Hp] = _scspu::P64;
           R3 = Hp - 32;
           R2 = lvl8_rcsn3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.usageInfo_go2_entry() //  [R2, R3, R4]
         { info_tbl: [(ccsSZ,
                       label: System.Console.GetOpt.usageInfo_go2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsSZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccsT0; else goto ccsT1;
       ccsT0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo_go2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccsT1: // global
           I64[Sp - 24] = block_ccsRP_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucsTu; else goto ccsRQ;
       ucsTu: // global
           call _ccsRP(R1) args: 0, res: 0, upd: 0;
       ccsRQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsRP() //  [R1]
         { info_tbl: [(ccsRP,
                       label: block_ccsRP_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsRP: // global
           if (R1 & 7 == 1) goto ucsTm; else goto ccsSX;
       ucsTm: // global
           Sp = Sp + 24;
           call _ccsTe() args: 0, res: 0, upd: 0;
       ccsSX: // global
           I64[Sp - 8] = block_ccsRV_info;
           _scspo::P64 = P64[R1 + 6];
           _scspp::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _scspp::P64;
           P64[Sp + 8] = _scspo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucsTp; else goto ccsRW;
       ucsTp: // global
           call _ccsRV(R1) args: 0, res: 0, upd: 0;
       ccsRW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsRV() //  [R1]
         { info_tbl: [(ccsRV,
                       label: block_ccsRV_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsRV: // global
           if (R1 & 7 == 1) goto ucsTn; else goto ccsTa;
       ucsTn: // global
           Sp = Sp + 32;
           call _ccsTe() args: 0, res: 0, upd: 0;
       ccsTa: // global
           I64[Sp - 8] = block_ccsS1_info;
           _scspr::P64 = P64[R1 + 6];
           _scsps::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp] = _scsps::P64;
           P64[Sp + 24] = _scspr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucsTr; else goto ccsS2;
       ucsTr: // global
           call _ccsS1(R1) args: 0, res: 0, upd: 0;
       ccsS2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsS1() //  [R1]
         { info_tbl: [(ccsS1,
                       label: block_ccsS1_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsS1: // global
           if (R1 & 7 == 1) goto ucsTo; else goto ccsTg;
       ucsTo: // global
           Sp = Sp + 40;
           call _ccsTe() args: 0, res: 0, upd: 0;
       ccsTg: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccsTj; else goto ccsTi;
       ccsTj: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccsTi: // global
           _scspu::P64 = P64[R1 + 6];
           _scspv::P64 = P64[R1 + 14];
           I64[Hp - 96] = sat_scspB_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _scspv::P64;
           I64[Hp - 56] = sat_scspA_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _scspu::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccsTe() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsTe: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.377835995 UTC

[section ""cstring" . lvl9_rcsn4_bytes" {
     lvl9_rcsn4_bytes:
         I8[] [32]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.37863592 UTC

[section ""data" . lvl10_rcsn5_closure" {
     lvl10_rcsn5_closure:
         const lvl10_rcsn5_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_rcsn5_entry() //  [R1]
         { info_tbl: [(ccsTB,
                       label: lvl10_rcsn5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsTB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsTC; else goto ccsTD;
       ccsTC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsTD: // global
           (_ccsTy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccsTy::I64 == 0) goto ccsTA; else goto ccsTz;
       ccsTA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccsTz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccsTy::I64;
           R2 = lvl5_rcsn0_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.379511055 UTC

[section ""cstring" . lvl11_rcsn6_bytes" {
     lvl11_rcsn6_bytes:
         I8[] [61]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.384376314 UTC

[section ""data" . System.Console.GetOpt.usageInfo1_closure" {
     System.Console.GetOpt.usageInfo1_closure:
         const System.Console.GetOpt.usageInfo1_info;
         const 0;
 },
 b2_scspL_entry() //  [R1]
         { info_tbl: [(ccsU0,
                       label: b2_scspL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsU0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccsU1; else goto ccsU2;
       ccsU1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsU2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccsTX_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.usageInfo1_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccsTX() //  [R1, R2, R3]
         { info_tbl: [(ccsTX,
                       label: block_ccsTX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsTX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccsU5; else goto ccsU4;
       ccsU5: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 24;
       ccsU4: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scspX_entry() //  [R1]
         { info_tbl: [(ccsUp,
                       label: sat_scspX_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsUp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsUq; else goto ccsUr;
       ccsUq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsUr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl9_rcsn4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsq1_entry() //  [R1]
         { info_tbl: [(ccsUC,
                       label: sat_scsq1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsUC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsUD; else goto ccsUE;
       ccsUD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsUE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl10_rcsn5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsq2_entry() //  [R1]
         { info_tbl: [(ccsUF,
                       label: sat_scsq2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsUF: // global
           _scsq2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccsUG; else goto ccsUH;
       ccsUH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccsUJ; else goto ccsUI;
       ccsUJ: // global
           HpAlloc = 24;
           goto ccsUG;
       ccsUG: // global
           R1 = _scsq2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsUI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsq2::P64;
           _scsq0::P64 = P64[_scsq2::P64 + 16];
           I64[Hp - 16] = sat_scsq1_info;
           P64[Hp] = _scsq0::P64;
           R3 = Hp - 16;
           R2 = lvl4_rcsmZ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsq4_entry() //  [R1, R2]
         { info_tbl: [(ccsUP,
                       label: sat_scsq4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsUP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsUQ; else goto ccsUR;
       ccsUQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccsUR: // global
           I64[Sp - 16] = block_ccsUf_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucsV6; else goto ccsUg;
       ucsV6: // global
           call _ccsUf(R1) args: 0, res: 0, upd: 0;
       ccsUg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsUf() //  [R1]
         { info_tbl: [(ccsUf,
                       label: block_ccsUf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsUf: // global
           _scspR::P64 = P64[Sp + 8];
           _ccsUO::P64 = R1 & 7;
           if (_ccsUO::P64 < 3) goto ucsV5; else goto ccsUN;
       ucsV5: // global
           if (_ccsUO::P64 < 2) goto ccsUL; else goto ccsUM;
       ccsUL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccsUW; else goto ccsUV;
       ccsUW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccsUV: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scspR::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R3 = Hp - 14;
           R2 = lvl3_rcsmY_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccsUM: // global
           Hp = Hp + 48;
           _scspS::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccsV4; else goto ccsUZ;
       ccsUZ: // global
           _scspW::P64 = P64[_scspS::P64 + 14];
           I64[Hp - 40] = sat_scspX_info;
           P64[Hp - 24] = _scspW::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scspR::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = lvl3_rcsmY_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccsUN: // global
           Hp = Hp + 48;
           _scspS::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccsV4; else goto ccsV3;
       ccsV4: // global
           HpAlloc = 48;
           R1 = _scspS::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccsV3: // global
           _scsq0::P64 = P64[_scspS::P64 + 13];
           I64[Hp - 40] = sat_scsq2_info;
           P64[Hp - 24] = _scsq0::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scspR::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = lvl3_rcsmY_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sosFmt_scspQ_entry() //  [R1]
         { info_tbl: [(ccsV9,
                       label: sosFmt_scspQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsV9: // global
           _scspQ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccsVa; else goto ccsVb;
       ccsVb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccsVd; else goto ccsVc;
       ccsVd: // global
           HpAlloc = 16;
           goto ccsVa;
       ccsVa: // global
           R1 = _scspQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsVc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scspQ::P64;
           _scspH::P64 = P64[_scspQ::P64 + 16];
           _scspJ::P64 = P64[_scspQ::P64 + 24];
           I64[Hp - 8] = sat_scsq4_info;
           P64[Hp] = _scspJ::P64;
           I64[Sp - 24] = block_ccsV7_info;
           R3 = _scspH::P64;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccsV7() //  [R1]
         { info_tbl: [(ccsV7,
                       label: block_ccsV7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsV7: // global
           R3 = R1;
           R2 = lvl2_rcsmX_closure+1;
           Sp = Sp + 8;
           call sepBy_rcsmW_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsqc_entry() //  [R1]
         { info_tbl: [(ccsVE,
                       label: sat_scsqc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsVE: // global
           R3 = P64[R1 + 16];
           R2 = lvl11_rcsn6_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsqd_entry() //  [R1]
         { info_tbl: [(ccsVH,
                       label: sat_scsqd_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsVH: // global
           _scsqd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccsVI; else goto ccsVJ;
       ccsVJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccsVL; else goto ccsVK;
       ccsVL: // global
           HpAlloc = 24;
           goto ccsVI;
       ccsVI: // global
           R1 = _scsqd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsVK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsqd::P64;
           _scsq7::P64 = P64[_scsqd::P64 + 16];
           _scsqb::P64 = P64[_scsqd::P64 + 24];
           I64[Hp - 16] = sat_scsqc_info;
           P64[Hp] = _scsqb::P64;
           R3 = Hp - 16;
           R2 = _scsq7::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsqg_entry() //  [R1]
         { info_tbl: [(ccsW0,
                       label: sat_scsqg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsW0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsW1; else goto ccsW2;
       ccsW1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsW2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl10_rcsn5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsqh_entry() //  [R1]
         { info_tbl: [(ccsW3,
                       label: sat_scsqh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsW3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccsW7; else goto ccsW6;
       ccsW7: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsW6: // global
           _scsqf::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scsqg_info;
           P64[Hp] = _scsqf::P64;
           R3 = Hp - 16;
           R2 = lvl7_rcsn2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsqi_entry() //  [R1]
         { info_tbl: [(ccsW8,
                       label: sat_scsqi_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsW8: // global
           _scsqi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccsW9; else goto ccsWa;
       ccsWa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccsWc; else goto ccsWb;
       ccsWc: // global
           HpAlloc = 24;
           goto ccsW9;
       ccsW9: // global
           R1 = _scsqi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsWb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsqi::P64;
           _scsq7::P64 = P64[_scsqi::P64 + 16];
           _scsqf::P64 = P64[_scsqi::P64 + 24];
           I64[Hp - 16] = sat_scsqh_info;
           P64[Hp] = _scsqf::P64;
           R3 = Hp - 16;
           R2 = _scsq7::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsqj_entry() //  [R1, R2]
         { info_tbl: [(ccsWi,
                       label: sat_scsqj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsWi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsWj; else goto ccsWk;
       ccsWj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccsWk: // global
           I64[Sp - 16] = block_ccsVq_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucsWu; else goto ccsVr;
       ucsWu: // global
           call _ccsVq(R1) args: 0, res: 0, upd: 0;
       ccsVr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsVq() //  [R1]
         { info_tbl: [(ccsVq,
                       label: block_ccsVq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsVq: // global
           _scsq7::P64 = P64[Sp + 8];
           _ccsWh::P64 = R1 & 7;
           if (_ccsWh::P64 < 3) goto ucsWt; else goto ccsWg;
       ucsWt: // global
           if (_ccsWh::P64 < 2) goto ccsWe; else goto ccsWf;
       ccsWe: // global
           R3 = _scsq7::P64;
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccsWf: // global
           Hp = Hp + 32;
           _scsq8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccsWs; else goto ccsWo;
       ccsWo: // global
           _scsqb::P64 = P64[_scsq8::P64 + 14];
           I64[Hp - 24] = sat_scsqd_info;
           P64[Hp - 8] = _scsq7::P64;
           P64[Hp] = _scsqb::P64;
           R3 = Hp - 24;
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccsWg: // global
           Hp = Hp + 32;
           _scsq8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccsWs; else goto ccsWr;
       ccsWs: // global
           HpAlloc = 32;
           R1 = _scsq8::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccsWr: // global
           _scsqf::P64 = P64[_scsq8::P64 + 13];
           I64[Hp - 24] = sat_scsqi_info;
           P64[Hp - 8] = _scsq7::P64;
           P64[Hp] = _scsqf::P64;
           R3 = Hp - 24;
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 losFmt_scsq6_entry() //  [R1]
         { info_tbl: [(ccsWx,
                       label: losFmt_scsq6_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsWx: // global
           _scsq6::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccsWy; else goto ccsWz;
       ccsWz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccsWB; else goto ccsWA;
       ccsWB: // global
           HpAlloc = 16;
           goto ccsWy;
       ccsWy: // global
           R1 = _scsq6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsWA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsq6::P64;
           _scspI::P64 = P64[_scsq6::P64 + 16];
           _scspJ::P64 = P64[_scsq6::P64 + 24];
           I64[Hp - 8] = sat_scsqj_info;
           P64[Hp] = _scspJ::P64;
           I64[Sp - 24] = block_ccsWv_info;
           R3 = _scspI::P64;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccsWv() //  [R1]
         { info_tbl: [(ccsWv,
                       label: block_ccsWv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsWv: // global
           R3 = R1;
           R2 = lvl2_rcsmX_closure+1;
           Sp = Sp + 8;
           call sepBy_rcsmW_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 go_scsqH_entry() //  [R1, R2]
         { info_tbl: [(ccsX0,
                       label: go_scsqH_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsX0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccsX1; else goto ccsX2;
       ccsX1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccsX2: // global
           I64[Sp - 24] = block_ccsWT_info;
           _scsqH::P64 = R1;
           _scspL::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _scspL::P64;
           P64[Sp - 8] = _scsqH::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucsXj; else goto ccsWU;
       ucsXj: // global
           call _ccsWT(R1) args: 0, res: 0, upd: 0;
       ccsWU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsWT() //  [R1]
         { info_tbl: [(ccsWT,
                       label: block_ccsWT_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsWT: // global
           if (R1 & 7 == 1) goto ccsWX; else goto ccsWY;
       ccsWX: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccsWY: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto ccsXi; else goto ccsXh;
       ccsXi: // global
           HpAlloc = 208;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccsXh: // global
           _scsqK::P64 = P64[R1 + 6];
           _scsqL::P64 = P64[R1 + 14];
           I64[Hp - 200] = stg_ap_2_upd_info;
           P64[Hp - 184] = P64[Sp + 16];
           P64[Hp - 176] = _scsqL::P64;
           I64[Hp - 168] = stg_sel_2_upd_info;
           _ccsX8::P64 = Hp - 200;
           P64[Hp - 152] = _ccsX8::P64;
           I64[Hp - 144] = :_con_info;
           P64[Hp - 136] = _scsqK::P64;
           P64[Hp - 128] = Hp - 168;
           I64[Hp - 120] = stg_sel_1_upd_info;
           P64[Hp - 104] = _ccsX8::P64;
           I64[Hp - 96] = :_con_info;
           P64[Hp - 88] = GHC.Types.[]_closure+1;
           P64[Hp - 80] = Hp - 120;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccsX8::P64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           P64[Hp - 32] = Hp - 72;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 46;
           P64[Hp - 8] = Hp - 94;
           P64[Hp] = Hp - 142;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 ds1_scsqG_entry() //  [R1]
         { info_tbl: [(ccsXk,
                       label: ds1_scsqG_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsXk: // global
           _scsqG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccsXl; else goto ccsXm;
       ccsXm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccsXo; else goto ccsXn;
       ccsXo: // global
           HpAlloc = 16;
           goto ccsXl;
       ccsXl: // global
           R1 = _scsqG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsXn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsqG::P64;
           _scspL::P64 = P64[_scsqG::P64 + 16];
           _scsqF::P64 = P64[_scsqG::P64 + 24];
           I64[Hp - 8] = go_scsqH_info;
           P64[Hp] = _scspL::P64;
           R2 = _scsqF::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call go_scsqH_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.usageInfo1_entry() //  [R2]
         { info_tbl: [(ccsXt,
                       label: System.Console.GetOpt.usageInfo1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsXt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccsXu; else goto ccsXv;
       ccsXu: // global
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccsXv: // global
           I64[Sp - 8] = block_ccsTI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucsY0; else goto ccsTJ;
       ucsY0: // global
           call _ccsTI(R1) args: 0, res: 0, upd: 0;
       ccsTJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsTI() //  [R1]
         { info_tbl: [(ccsTI,
                       label: block_ccsTI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsTI: // global
           if (R1 & 7 == 1) goto ccsXq; else goto ccsXr;
       ccsXq: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccsXr: // global
           I64[Sp - 8] = block_ccsTO_info;
           _scspF::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scspF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucsXZ; else goto ccsTP;
       ucsXZ: // global
           call _ccsTO(R1) args: 0, res: 0, upd: 0;
       ccsTP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsTO() //  [R1]
         { info_tbl: [(ccsTO,
                       label: block_ccsTO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsTO: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccsXB; else goto ccsXA;
       ccsXB: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccsXA: // global
           _scspH::P64 = P64[R1 + 7];
           _scspI::P64 = P64[R1 + 15];
           _scspJ::P64 = P64[R1 + 23];
           _scspK::P64 = P64[R1 + 31];
           I64[Hp - 80] = b2_scspL_info;
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = sosFmt_scspQ_info;
           P64[Hp - 40] = _scspH::P64;
           P64[Hp - 32] = _scspJ::P64;
           I64[Hp - 24] = losFmt_scsq6_info;
           P64[Hp - 8] = _scspI::P64;
           P64[Hp] = _scspJ::P64;
           I64[Sp - 16] = block_ccsWF_info;
           R2 = _scspK::P64;
           P64[Sp - 8] = Hp - 24;
           P64[Sp] = Hp - 56;
           P64[Sp + 8] = Hp - 80;
           Sp = Sp - 16;
           call Data.OldList.lines_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccsWF() //  [R1]
         { info_tbl: [(ccsWF,
                       label: block_ccsWF_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsWF: // global
           _ccsTT::P64 = P64[Sp + 24];
           _ccsU6::P64 = P64[Sp + 16];
           _ccsVh::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccsXK; else goto ccsXU;
       ccsXK: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccsXN; else goto ccsXM;
       ccsXN: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccsXM: // global
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _ccsTT::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = GHC.Types.[]_closure+1;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccsTT::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _ccsVh::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccsTT::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _ccsU6::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccsXU: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto ccsXX; else goto ccsXW;
       ccsXX: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccsXW: // global
           _scsqE::P64 = P64[R1 + 6];
           _scsqF::P64 = P64[R1 + 14];
           I64[Hp - 168] = ds1_scsqG_info;
           P64[Hp - 152] = _ccsTT::P64;
           P64[Hp - 144] = _scsqF::P64;
           I64[Hp - 136] = stg_sel_2_upd_info;
           _ccsWK::P64 = Hp - 168;
           P64[Hp - 120] = _ccsWK::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _scsqE::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccsWK::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _ccsVh::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccsWK::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _ccsU6::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.394034171 UTC

[section ""data" . System.Console.GetOpt.usageInfo_closure" {
     System.Console.GetOpt.usageInfo_closure:
         const System.Console.GetOpt.usageInfo_info;
         const 0;
 },
 sat_scsru_entry() //  [R1]
         { info_tbl: [(ccsYf,
                       label: sat_scsru_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsYf: // global
           R2 = P64[R1 + 16];
           call System.Console.GetOpt.usageInfo_sameLen_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsrv_entry() //  [R1]
         { info_tbl: [(ccsYk,
                       label: sat_scsrv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsYk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccsYl; else goto ccsYm;
       ccsYl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsYm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccsY9_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.usageInfo1_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccsY9() //  [R1, R2, R3]
         { info_tbl: [(ccsY9,
                       label: block_ccsY9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsY9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccsYp; else goto ccsYo;
       ccsYp: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 24;
       ccsYo: // global
           I64[Hp - 16] = sat_scsru_info;
           P64[Hp] = R2;
           I64[Sp - 16] = block_ccsYi_info;
           R2 = R1;
           P64[Sp - 8] = R3;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_sameLen_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccsYi() //  [R1]
         { info_tbl: [(ccsYi,
                       label: block_ccsYi_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsYi: // global
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = R1;
           Sp = Sp + 24;
           call System.Console.GetOpt.usageInfo_go2_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.usageInfo_entry() //  [R2, R3]
         { info_tbl: [(ccsYu,
                       label: System.Console.GetOpt.usageInfo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsYu: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccsYy; else goto ccsYx;
       ccsYy: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccsYx: // global
           I64[Hp - 40] = sat_scsrv_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           call Data.OldList.unlines_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.395679129 UTC

[section ""cstring" . lvl12_rcsn7_bytes" {
     lvl12_rcsn7_bytes:
         I8[] [111,112,116,105,111,110,32,96]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.396241572 UTC

[section ""cstring" . lvl13_rcsn8_bytes" {
     lvl13_rcsn8_bytes:
         I8[] [39,32,105,115,32,97,109,98,105,103,117,111,117,115,59,32,99,111,117,108,100,32,98,101,32,111,110,101,32,111,102,58]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.396750481 UTC

[section ""cstring" . lvl14_rcsn9_bytes" {
     lvl14_rcsn9_bytes:
         I8[] [39,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.397338662 UTC

[section ""cstring" . lvl15_rcsna_bytes" {
     lvl15_rcsna_bytes:
         I8[] [10]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.398071064 UTC

[section ""data" . lvl16_rcsnb_closure" {
     lvl16_rcsnb_closure:
         const lvl16_rcsnb_info;
         const 0;
         const 0;
         const 0;
 },
 lvl16_rcsnb_entry() //  [R1]
         { info_tbl: [(ccsYF,
                       label: lvl16_rcsnb_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsYF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsYG; else goto ccsYH;
       ccsYG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsYH: // global
           (_ccsYC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccsYC::I64 == 0) goto ccsYE; else goto ccsYD;
       ccsYE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccsYD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccsYC::I64;
           R2 = lvl15_rcsna_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.398995425 UTC

[section ""cstring" . System.Console.GetOpt.getOpt2_bytes" {
     System.Console.GetOpt.getOpt2_bytes:
         I8[] [117,110,114,101,99,111,103,110,105,122,101,100,32,111,112,116,105,111,110,32,96]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.399543877 UTC

[section ""cstring" . System.Console.GetOpt.getOpt1_bytes" {
     System.Console.GetOpt.getOpt1_bytes:
         I8[] [39,10]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.400295892 UTC

[section ""data" . lvl17_rcsnc_closure" {
     lvl17_rcsnc_closure:
         const lvl17_rcsnc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl17_rcsnc_entry() //  [R1]
         { info_tbl: [(ccsYO,
                       label: lvl17_rcsnc_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsYO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsYP; else goto ccsYQ;
       ccsYP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsYQ: // global
           (_ccsYL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccsYL::I64 == 0) goto ccsYN; else goto ccsYM;
       ccsYN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccsYM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccsYL::I64;
           R2 = System.Console.GetOpt.getOpt1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.401488754 UTC

[section ""data" . System.Console.GetOpt.errUnrec_closure" {
     System.Console.GetOpt.errUnrec_closure:
         const System.Console.GetOpt.errUnrec_info;
         const 0;
 },
 sat_scsry_entry() //  [R1]
         { info_tbl: [(ccsYZ,
                       label: sat_scsry_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsYZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsZ0; else goto ccsZ1;
       ccsZ0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsZ1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl17_rcsnc_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.errUnrec_entry() //  [R2]
         { info_tbl: [(ccsZ2,
                       label: System.Console.GetOpt.errUnrec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsZ2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccsZ6; else goto ccsZ5;
       ccsZ6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = System.Console.GetOpt.errUnrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccsZ5: // global
           I64[Hp - 16] = sat_scsry_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = System.Console.GetOpt.getOpt2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.402555291 UTC

[section ""cstring" . lvl18_rcsnd_bytes" {
     lvl18_rcsnd_bytes:
         I8[] [39,32,100,111,101,115,110,39,116,32,97,108,108,111,119,32,97,110,32,97,114,103,117,109,101,110,116,10]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.403303831 UTC

[section ""data" . lvl19_rcsne_closure" {
     lvl19_rcsne_closure:
         const lvl19_rcsne_info;
 },
 lvl19_rcsne_entry() //  [R2, R3]
         { info_tbl: [(ccsZb,
                       label: lvl19_rcsne_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsZb: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           call Data.OldList.isPrefixOf_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.40429381 UTC

[section ""data" . lvl20_rcsnf_closure" {
     lvl20_rcsnf_closure:
         const lvl20_rcsnf_info;
 },
 lvl20_rcsnf_entry() //  [R2]
         { info_tbl: [(ccsZl,
                       label: lvl20_rcsnf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsZl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccsZm; else goto ccsZn;
       ccsZm: // global
           R2 = R2;
           R1 = lvl20_rcsnf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccsZn: // global
           I64[Sp - 8] = block_ccsZi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucsZv; else goto ccsZj;
       ucsZv: // global
           call _ccsZi(R1) args: 0, res: 0, upd: 0;
       ccsZj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsZi() //  [R1]
         { info_tbl: [(ccsZi,
                       label: block_ccsZi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsZi: // global
           if (I64[R1 + 7] == 61) goto ccsZu; else goto ccsZt;
       ccsZu: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccsZt: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.405400144 UTC

[section ""data" . lvl21_rcsng_closure" {
     lvl21_rcsng_closure:
         const GHC.Types.C#_con_info;
         const 45;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.406101826 UTC

[section ""data" . lvl22_rcsnh_closure" {
     lvl22_rcsnh_closure:
         const lvl22_rcsnh_info;
         const 0;
         const 0;
         const 0;
 },
 lvl22_rcsnh_entry() //  [R1]
         { info_tbl: [(ccsZC,
                       label: lvl22_rcsnh_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsZC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsZD; else goto ccsZE;
       ccsZD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccsZE: // global
           (_ccsZz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccsZz::I64 == 0) goto ccsZB; else goto ccsZA;
       ccsZB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccsZA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccsZz::I64;
           R2 = lvl18_rcsnd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.406986667 UTC

[section ""cstring" . lvl23_rcsni_bytes" {
     lvl23_rcsni_bytes:
         I8[] [111,112,116,105,111,110,32,96,45,45]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.408069749 UTC

[section ""data" . poly_go_rcsnj_closure" {
     poly_go_rcsnj_closure:
         const poly_go_rcsnj_info;
 },
 sat_scsrM_entry() //  [R1]
         { info_tbl: [(ccsZY,
                       label: sat_scsrM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsZY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccsZZ; else goto cct00;
       ccsZZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct00: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go_rcsnj_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go_rcsnj_entry() //  [R2]
         { info_tbl: [(cct05,
                       label: poly_go_rcsnj_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct05: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cct06; else goto cct07;
       cct06: // global
           R2 = R2;
           R1 = poly_go_rcsnj_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cct07: // global
           I64[Sp - 8] = block_ccsZJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uct0g; else goto ccsZK;
       uct0g: // global
           call _ccsZJ(R1) args: 0, res: 0, upd: 0;
       ccsZK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsZJ() //  [R1]
         { info_tbl: [(ccsZJ,
                       label: block_ccsZJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsZJ: // global
           if (R1 & 7 == 1) goto cct02; else goto cct03;
       cct02: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cct03: // global
           I64[Sp - 8] = block_ccsZP_info;
           _scsrG::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsrG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uct0f; else goto ccsZQ;
       uct0f: // global
           call _ccsZP(R1) args: 0, res: 0, upd: 0;
       ccsZQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccsZP() //  [R1]
         { info_tbl: [(ccsZP,
                       label: block_ccsZP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccsZP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cct0e; else goto cct0d;
       cct0e: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cct0d: // global
           _scsrK::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_scsrM_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scsrK::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.409855906 UTC

[section ""data" . lvl24_rcsnk_closure" {
     lvl24_rcsnk_closure:
         const lvl24_rcsnk_info;
         const 0;
         const 0;
         const 0;
 },
 lvl24_rcsnk_entry() //  [R1]
         { info_tbl: [(cct0n,
                       label: lvl24_rcsnk_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct0n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cct0o; else goto cct0p;
       cct0o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct0p: // global
           (_cct0k::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cct0k::I64 == 0) goto cct0m; else goto cct0l;
       cct0m: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cct0l: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cct0k::I64;
           R2 = lvl13_rcsn8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.411273134 UTC

[section ""data" . poly_go1_rcsnl_closure" {
     poly_go1_rcsnl_closure:
         const poly_go1_rcsnl_info;
 },
 sat_scsrW_entry() //  [R1]
         { info_tbl: [(cct0J,
                       label: sat_scsrW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct0J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cct0K; else goto cct0L;
       cct0K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct0L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go1_rcsnl_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go1_rcsnl_entry() //  [R2]
         { info_tbl: [(cct0Q,
                       label: poly_go1_rcsnl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct0Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cct0R; else goto cct0S;
       cct0R: // global
           R2 = R2;
           R1 = poly_go1_rcsnl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cct0S: // global
           I64[Sp - 8] = block_cct0u_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uct11; else goto cct0v;
       uct11: // global
           call _cct0u(R1) args: 0, res: 0, upd: 0;
       cct0v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cct0u() //  [R1]
         { info_tbl: [(cct0u,
                       label: block_cct0u_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct0u: // global
           if (R1 & 7 == 1) goto cct0N; else goto cct0O;
       cct0N: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cct0O: // global
           I64[Sp - 8] = block_cct0A_info;
           _scsrQ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsrQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uct10; else goto cct0B;
       uct10: // global
           call _cct0A(R1) args: 0, res: 0, upd: 0;
       cct0B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cct0A() //  [R1]
         { info_tbl: [(cct0A,
                       label: block_cct0A_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct0A: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cct0Z; else goto cct0Y;
       cct0Z: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cct0Y: // global
           _scsrU::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_scsrW_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scsrU::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.436406833 UTC

[section ""data" . System.Console.GetOpt.$wgetOpt'_closure" {
     System.Console.GetOpt.$wgetOpt'_closure:
         const System.Console.GetOpt.$wgetOpt'_info;
         const 0;
 },
 ds_scss6_entry() //  [R1]
         { info_tbl: [(cct1u,
                       label: ds_scss6_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct1u: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cct1v; else goto cct1w;
       cct1v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct1w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cct1r_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cct1r() //  [R1, R2, R3, R4]
         { info_tbl: [(cct1r,
                       label: block_cct1r_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct1r: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cct1z; else goto cct1y;
       cct1z: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cct1y: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds_scssC_entry() //  [R1]
         { info_tbl: [(cct1J,
                       label: ds_scssC_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct1J: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cct1K; else goto cct1L;
       cct1K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct1L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cct1G_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cct1G() //  [R1, R2, R3, R4]
         { info_tbl: [(cct1G,
                       label: block_cct1G_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct1G: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cct1O; else goto cct1N;
       cct1O: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cct1N: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scssI_entry() //  [R1]
         { info_tbl: [(cct1X,
                       label: sat_scssI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct1X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cct1Y; else goto cct1Z;
       cct1Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct1Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds4_scste_entry() //  [R1]
         { info_tbl: [(cct2m,
                       label: ds4_scste_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct2m: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cct2n; else goto cct2o;
       cct2n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct2o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cct2j_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cct2j() //  [R1, R2, R3, R4]
         { info_tbl: [(cct2j,
                       label: block_cct2j_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct2j: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cct2r; else goto cct2q;
       cct2r: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cct2q: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds4_scstK_entry() //  [R1]
         { info_tbl: [(cct2B,
                       label: ds4_scstK_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct2B: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cct2C; else goto cct2D;
       cct2C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct2D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cct2y_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cct2y() //  [R1, R2, R3, R4]
         { info_tbl: [(cct2y,
                       label: block_cct2y_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct2y: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cct2G; else goto cct2F;
       cct2G: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cct2F: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds4_scsui_entry() //  [R1]
         { info_tbl: [(cct30,
                       label: ds4_scsui_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct30: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cct31; else goto cct32;
       cct31: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct32: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cct2X_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cct2X() //  [R1, R2, R3, R4]
         { info_tbl: [(cct2X,
                       label: block_cct2X_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct2X: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cct35; else goto cct34;
       cct35: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cct34: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds4_scsuO_entry() //  [R1]
         { info_tbl: [(cct3f,
                       label: ds4_scsuO_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct3f: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cct3g; else goto cct3h;
       cct3g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct3h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cct3c_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cct3c() //  [R1, R2, R3, R4]
         { info_tbl: [(cct3c,
                       label: block_cct3c_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct3c: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cct3k; else goto cct3j;
       cct3k: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cct3j: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go1_scsvA_entry() //  [R1, R2]
         { info_tbl: [(cct3X,
                       label: go1_scsvA_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct3X: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cct3Y; else goto uct4n;
       cct3Y: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       uct4n: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _cct3N() args: 0, res: 0, upd: 0;
     }
 },
 _cct3N() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct3N: // global
           I64[Sp - 24] = block_cct3Q_info;
           R1 = P64[Sp + 8];
           _scsvA::P64 = P64[Sp];
           P64[Sp - 16] = P64[_scsvA::P64 + 7];
           P64[Sp - 8] = P64[_scsvA::P64 + 15];
           I64[Sp + 8] = I64[_scsvA::P64 + 23];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uct4p; else goto cct3R;
       uct4p: // global
           call _cct3Q(R1) args: 0, res: 0, upd: 0;
       cct3R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cct3Q() //  [R1]
         { info_tbl: [(cct3Q,
                       label: block_cct3Q_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct3Q: // global
           if (R1 & 7 == 1) goto cct3U; else goto cct3V;
       cct3U: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cct3V: // global
           I64[Sp] = block_cct45_info;
           _scsvE::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _scsvE::P64;
           if (R1 & 7 != 0) goto uct4q; else goto cct47;
       uct4q: // global
           call _cct45(R1) args: 0, res: 0, upd: 0;
       cct47: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cct45() //  [R1]
         { info_tbl: [(cct45,
                       label: block_cct45_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct45: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cct4d; else goto cct4c;
       cct4d: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cct4c: // global
           _scsvE::P64 = P64[Sp + 16];
           if (I64[Sp + 32] == I64[R1 + 7]) goto cct4m; else goto cct4h;
       cct4m: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = _scsvE::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cct4h: // global
           Hp = Hp - 56;
           P64[Sp + 32] = _scsvE::P64;
           Sp = Sp + 24;
           call _cct3N() args: 0, res: 0, upd: 0;
     }
 },
 go_scsvp_entry() //  [R1, R2]
         { info_tbl: [(cct4x,
                       label: go_scsvp_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct4x: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cct4y; else goto cct4z;
       cct4y: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cct4z: // global
           I64[Sp - 24] = block_cct3z_info;
           _scsvp::P64 = R1;
           _scsvo::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _scsvo::I64;
           P64[Sp - 8] = _scsvp::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uct4H; else goto cct3A;
       uct4H: // global
           call _cct3z(R1) args: 0, res: 0, upd: 0;
       cct3A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cct3z() //  [R1]
         { info_tbl: [(cct3z,
                       label: block_cct3z_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct3z: // global
           if (R1 & 7 == 1) goto cct4u; else goto cct4v;
       cct4u: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cct4v: // global
           I64[Sp - 8] = block_cct3F_info;
           _scsvt::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsvt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uct4G; else goto cct3G;
       uct4G: // global
           call _cct3F(R1) args: 0, res: 0, upd: 0;
       cct3G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cct3F() //  [R1]
         { info_tbl: [(cct3F,
                       label: block_cct3F_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct3F: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cct4F; else goto cct4E;
       cct4F: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cct4E: // global
           _scsvv::P64 = P64[R1 + 7];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = go1_scsvA_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = Hp - 56;
           I64[Hp] = I64[Sp + 16];
           R2 = _scsvv::P64;
           R1 = Hp - 23;
           Sp = Sp + 32;
           call go1_scsvA_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 ds8_scsvM_entry() //  [R1]
         { info_tbl: [(cct52,
                       label: ds8_scsvM_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct52: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cct53; else goto cct54;
       cct53: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct54: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cct4Z_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cct4Z() //  [R1, R2, R3, R4]
         { info_tbl: [(cct4Z,
                       label: block_cct4Z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct4Z: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cct57; else goto cct56;
       cct57: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cct56: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds8_scswl_entry() //  [R1]
         { info_tbl: [(cct5j,
                       label: ds8_scswl_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct5j: // global
           _scswl::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cct5k; else goto cct5l;
       cct5l: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cct5n; else goto cct5m;
       cct5n: // global
           HpAlloc = 48;
           goto cct5k;
       cct5k: // global
           R1 = _scswl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct5m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scswl::P64;
           _scsrX::P64 = P64[_scswl::P64 + 16];
           _scsrY::P64 = P64[_scswl::P64 + 24];
           _scss2::P64 = P64[_scswl::P64 + 32];
           _scsvL::P64 = P64[_scswl::P64 + 40];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl21_rcsng_closure+1;
           P64[Hp - 24] = _scsvL::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = _scss2::P64;
           I64[Sp - 24] = block_cct5g_info;
           R4 = Hp - 14;
           R3 = _scsrY::P64;
           R2 = _scsrX::P64;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cct5g() //  [R1, R2, R3, R4]
         { info_tbl: [(cct5g,
                       label: block_cct5g_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct5g: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cct5q; else goto cct5p;
       cct5q: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cct5p: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds10_scsx0_entry() //  [R1]
         { info_tbl: [(cct5P,
                       label: ds10_scsx0_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct5P: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cct5Q; else goto cct5R;
       cct5Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct5R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cct5M_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cct5M() //  [R1, R2, R3, R4]
         { info_tbl: [(cct5M,
                       label: block_cct5M_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct5M: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cct5U; else goto cct5T;
       cct5U: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cct5T: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds10_scsxx_entry() //  [R1]
         { info_tbl: [(cct66,
                       label: ds10_scsxx_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct66: // global
           _scsxx::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cct67; else goto cct68;
       cct68: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cct6a; else goto cct69;
       cct6a: // global
           HpAlloc = 48;
           goto cct67;
       cct67: // global
           R1 = _scsxx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct69: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsxx::P64;
           _scsrX::P64 = P64[_scsxx::P64 + 16];
           _scsrY::P64 = P64[_scsxx::P64 + 24];
           _scss2::P64 = P64[_scsxx::P64 + 32];
           _scswZ::P64 = P64[_scsxx::P64 + 40];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl21_rcsng_closure+1;
           P64[Hp - 24] = _scswZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = _scss2::P64;
           I64[Sp - 24] = block_cct63_info;
           R4 = Hp - 14;
           R3 = _scsrY::P64;
           R2 = _scsrX::P64;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cct63() //  [R1, R2, R3, R4]
         { info_tbl: [(cct63,
                       label: block_cct63_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct63: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cct6d; else goto cct6c;
       cct6d: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cct6c: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scsy8_entry() //  [R1]
         { info_tbl: [(cct6x,
                       label: ds11_scsy8_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct6x: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cct6y; else goto cct6z;
       cct6y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct6z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cct6u_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cct6u() //  [R1, R2, R3, R4]
         { info_tbl: [(cct6u,
                       label: block_cct6u_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct6u: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cct6C; else goto cct6B;
       cct6C: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cct6B: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsyy_entry() //  [R1]
         { info_tbl: [(cct6U,
                       label: sat_scsyy_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct6U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cct6V; else goto cct6W;
       cct6V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct6W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl16_rcsnb_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsyz_entry() //  [R1]
         { info_tbl: [(cct6X,
                       label: sat_scsyz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct6X: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cct71; else goto cct70;
       cct71: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct70: // global
           _scsy5::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scsyy_info;
           P64[Hp] = _scsy5::P64;
           R3 = Hp - 16;
           R2 = lvl14_rcsn9_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsyA_entry() //  [R1]
         { info_tbl: [(cct74,
                       label: sat_scsyA_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct74: // global
           _scsyA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cct75; else goto cct76;
       cct76: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cct78; else goto cct77;
       cct78: // global
           HpAlloc = 72;
           goto cct75;
       cct75: // global
           R1 = _scsyA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct77: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsyA::P64;
           _scsvm::P64 = P64[_scsyA::P64 + 16];
           _scsy5::P64 = P64[_scsyA::P64 + 24];
           I64[Hp - 64] = sat_scsyz_info;
           P64[Hp - 48] = _scsy5::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scsvm::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl21_rcsng_closure+1;
           P64[Hp] = Hp - 38;
           R3 = Hp - 64;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsyB_entry() //  [R1]
         { info_tbl: [(cct79,
                       label: sat_scsyB_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct79: // global
           _scsyB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cct7a; else goto cct7b;
       cct7b: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cct7d; else goto cct7c;
       cct7d: // global
           HpAlloc = 32;
           goto cct7a;
       cct7a: // global
           R1 = _scsyB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct7c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsyB::P64;
           _scsvm::P64 = P64[_scsyB::P64 + 16];
           _scsy5::P64 = P64[_scsyB::P64 + 24];
           I64[Hp - 24] = sat_scsyA_info;
           P64[Hp - 8] = _scsvm::P64;
           P64[Hp] = _scsy5::P64;
           R3 = Hp - 24;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scsyL_entry() //  [R1]
         { info_tbl: [(cct7n,
                       label: ds11_scsyL_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct7n: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cct7o; else goto cct7p;
       cct7o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct7p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cct7k_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cct7k() //  [R1, R2, R3, R4]
         { info_tbl: [(cct7k,
                       label: block_cct7k_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct7k: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cct7s; else goto cct7r;
       cct7s: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cct7r: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scszj_entry() //  [R1]
         { info_tbl: [(cct7C,
                       label: ds11_scszj_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct7C: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cct7D; else goto cct7E;
       cct7D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct7E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cct7z_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cct7z() //  [R1, R2, R3, R4]
         { info_tbl: [(cct7z,
                       label: block_cct7z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct7z: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cct7H; else goto cct7G;
       cct7H: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cct7G: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scszS_entry() //  [R1]
         { info_tbl: [(cct7W,
                       label: ds11_scszS_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct7W: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cct7X; else goto cct7Y;
       cct7X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct7Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cct7T_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cct7T() //  [R1, R2, R3, R4]
         { info_tbl: [(cct7T,
                       label: block_cct7T_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct7T: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cct81; else goto cct80;
       cct81: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cct80: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scszY_entry() //  [R1]
         { info_tbl: [(cct8a,
                       label: sat_scszY_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct8a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cct8b; else goto cct8c;
       cct8b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct8c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scsAq_entry() //  [R1]
         { info_tbl: [(cct8m,
                       label: ds11_scsAq_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct8m: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cct8n; else goto cct8o;
       cct8n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct8o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cct8j_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cct8j() //  [R1, R2, R3, R4]
         { info_tbl: [(cct8j,
                       label: block_cct8j_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct8j: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cct8r; else goto cct8q;
       cct8r: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cct8q: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsAx_entry() //  [R1]
         { info_tbl: [(cct8B,
                       label: sat_scsAx_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct8B: // global
           _scsAx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cct8C; else goto cct8D;
       cct8D: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cct8F; else goto cct8E;
       cct8F: // global
           HpAlloc = 16;
           goto cct8C;
       cct8C: // global
           R1 = _scsAx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct8E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsAx::P64;
           _scszP::P64 = P64[_scsAx::P64 + 16];
           _scszR::P64 = P64[_scsAx::P64 + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _scszR::P64;
           R2 = Hp - 6;
           R1 = _scszP::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds12_scsAZ_entry() //  [R1]
         { info_tbl: [(cct8P,
                       label: ds12_scsAZ_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct8P: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cct8Q; else goto cct8R;
       cct8Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct8R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cct8M_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cct8M() //  [R1, R2, R3, R4]
         { info_tbl: [(cct8M,
                       label: block_cct8M_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct8M: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cct8U; else goto cct8T;
       cct8U: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cct8T: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsBp_entry() //  [R1]
         { info_tbl: [(cct9a,
                       label: sat_scsBp_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct9a: // global
           _scsBp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cct9b; else goto cct9c;
       cct9c: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cct9e; else goto cct9d;
       cct9e: // global
           HpAlloc = 48;
           goto cct9b;
       cct9b: // global
           R1 = _scsBp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct9d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsBp::P64;
           _scsvm::P64 = P64[_scsBp::P64 + 16];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scsvm::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl21_rcsng_closure+1;
           P64[Hp] = Hp - 38;
           R3 = lvl24_rcsnk_closure;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsBq_entry() //  [R1]
         { info_tbl: [(cct9f,
                       label: sat_scsBq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct9f: // global
           _scsBq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cct9g; else goto cct9h;
       cct9h: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cct9j; else goto cct9i;
       cct9j: // global
           HpAlloc = 24;
           goto cct9g;
       cct9g: // global
           R1 = _scsBq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct9i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsBq::P64;
           _scsvm::P64 = P64[_scsBq::P64 + 16];
           I64[Hp - 16] = sat_scsBp_info;
           P64[Hp] = _scsvm::P64;
           R3 = Hp - 16;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsBr_entry() //  [R1]
         { info_tbl: [(cct9k,
                       label: sat_scsBr_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct9k: // global
           _scsBr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cct9l; else goto cct9m;
       cct9m: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cct9o; else goto cct9n;
       cct9o: // global
           HpAlloc = 24;
           goto cct9l;
       cct9l: // global
           R1 = _scsBr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct9n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsBr::P64;
           _scsvm::P64 = P64[_scsBr::P64 + 16];
           _scsvJ::P64 = P64[_scsBr::P64 + 24];
           I64[Hp - 16] = sat_scsBq_info;
           P64[Hp] = _scsvm::P64;
           R3 = _scsvJ::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsBC_entry() //  [R1]
         { info_tbl: [(cct9F,
                       label: sat_scsBC_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct9F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cct9G; else goto cct9H;
       cct9G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct9H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 ds8_scsBF_entry() //  [R1]
         { info_tbl: [(cct9R,
                       label: ds8_scsBF_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct9R: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cct9S; else goto cct9T;
       cct9S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cct9T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cct9O_info;
           R3 = P64[R1 + 16];
           R2 = lvl20_rcsnf_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _cct9O() //  [R1, R2]
         { info_tbl: [(cct9O,
                       label: block_cct9O_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct9O: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cct9W; else goto cct9V;
       cct9W: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cct9V: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_scsBQ_entry() //  [R1, R2]
         { info_tbl: [(cctag,
                       label: go_scsBQ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctag: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cctah; else goto uctbg;
       cctah: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       uctbg: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _ccta6() args: 0, res: 0, upd: 0;
     }
 },
 _ccta6() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccta6: // global
           _scsBP::P64 = P64[P64[Sp] + 7];
           I64[Sp - 8] = block_ccta9_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scsBP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctbl; else goto cctaa;
       uctbl: // global
           call _ccta9(R1) args: 0, res: 0, upd: 0;
       cctaa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccta9() //  [R1]
         { info_tbl: [(ccta9,
                       label: block_ccta9_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccta9: // global
           if (R1 & 7 == 1) goto cctad; else goto cctae;
       cctad: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cctae: // global
           I64[Sp - 8] = block_cctao_info;
           _scsBU::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsBU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctbm; else goto cctaq;
       uctbm: // global
           call _cctao(R1) args: 0, res: 0, upd: 0;
       cctaq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctao() //  [R1]
         { info_tbl: [(cctao,
                       label: block_cctao_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctao: // global
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _cctaO() args: 0, res: 0, upd: 0;
     }
 },
 _cctaO() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctaO: // global
           _scsC4::P64 = P64[Sp];
           I64[Sp] = block_cctaQ_info;
           R1 = _scsC4::P64;
           if (R1 & 7 != 0) goto uctbp; else goto cctaS;
       uctbp: // global
           call _cctaQ(R1) args: 0, res: 0, upd: 0;
       cctaS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctaQ() //  [R1]
         { info_tbl: [(cctaQ,
                       label: block_cctaQ_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctaQ: // global
           if (R1 & 7 == 1) goto cctaY; else goto cctb3;
       cctaY: // global
           P64[Sp + 32] = P64[Sp + 16];
           Sp = Sp + 24;
           call _ccta6() args: 0, res: 0, upd: 0;
       cctb3: // global
           I64[Sp - 8] = block_cctb1_info;
           R2 = P64[R1 + 6];
           _scsC7::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _scsC7::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctb1() //  [R1]
         { info_tbl: [(cctb1,
                       label: block_cctb1_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctb1: // global
           if (R1 & 7 == 1) goto cctb9; else goto uctbi;
       cctb9: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _cctaO() args: 0, res: 0, upd: 0;
       uctbi: // global
           Sp = Sp + 8;
           call _cctaE() args: 0, res: 0, upd: 0;
     }
 },
 _cctaE() //  []
         { info_tbl: [(cctaE,
                       label: block_cctaE_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctaE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cctaK; else goto cctaJ;
       cctaK: // global
           HpAlloc = 56;
           I64[Sp] = block_cctaE_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cctaJ: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 getWith_scsBN_entry() //  [R1, R2]
         { info_tbl: [(cctbt,
                       label: getWith_scsBN_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctbt: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cctbx; else goto cctbw;
       cctbx: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctbw: // global
           _scsrY::P64 = P64[R1 + 7];
           _scsBJ::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = _scsBJ::P64;
           I64[Hp - 8] = go_scsBQ_info;
           P64[Hp] = Hp - 40;
           R2 = _scsrY::P64;
           R1 = Hp - 7;
           call go_scsBQ_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 ds9_scsCc_entry() //  [R1]
         { info_tbl: [(cctbO,
                       label: ds9_scsCc_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctbO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctbP; else goto cctbQ;
       cctbP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctbQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctbL_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctbL() //  [R1, R2, R3, R4]
         { info_tbl: [(cctbL,
                       label: block_cctbL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctbL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctbT; else goto cctbS;
       cctbT: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctbS: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsCu_entry() //  [R1]
         { info_tbl: [(cctc0,
                       label: sat_scsCu_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctc0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctc1; else goto cctc2;
       cctc1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctc2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scsCR_entry() //  [R1]
         { info_tbl: [(cctcw,
                       label: ds11_scsCR_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctcw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctcx; else goto cctcy;
       cctcx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctcy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctct_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctct() //  [R1, R2, R3, R4]
         { info_tbl: [(cctct,
                       label: block_cctct_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctct: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctcB; else goto cctcA;
       cctcB: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctcA: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scsDr_entry() //  [R1]
         { info_tbl: [(cctcS,
                       label: ds15_scsDr_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctcS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctcT; else goto cctcU;
       cctcT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctcU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctcP_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctcP() //  [R1, R2, R3, R4]
         { info_tbl: [(cctcP,
                       label: block_cctcP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctcP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctcX; else goto cctcW;
       cctcX: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctcW: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsDJ_entry() //  [R1]
         { info_tbl: [(cctd4,
                       label: sat_scsDJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctd4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctd5; else goto cctd6;
       cctd5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctd6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scsDX_entry() //  [R1]
         { info_tbl: [(cctdf,
                       label: ds15_scsDX_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctdf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctdg; else goto cctdh;
       cctdg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctdh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctdc_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctdc() //  [R1, R2, R3, R4]
         { info_tbl: [(cctdc,
                       label: block_cctdc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctdc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctdk; else goto cctdj;
       cctdk: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctdj: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsEl_entry() //  [R1]
         { info_tbl: [(cctdu,
                       label: sat_scsEl_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctdu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctdv; else goto cctdw;
       cctdv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctdw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl22_rcsnh_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsEm_entry() //  [R1]
         { info_tbl: [(cctdx,
                       label: sat_scsEm_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctdx: // global
           _scsEm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctdy; else goto cctdz;
       cctdz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctdB; else goto cctdA;
       cctdB: // global
           HpAlloc = 24;
           goto cctdy;
       cctdy: // global
           R1 = _scsEm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctdA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsEm::P64;
           _scsBJ::P64 = P64[_scsEm::P64 + 16];
           I64[Hp - 16] = sat_scsEl_info;
           P64[Hp] = _scsBJ::P64;
           R3 = Hp - 16;
           R2 = lvl23_rcsni_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds12_scsEB_entry() //  [R1]
         { info_tbl: [(ccte0,
                       label: ds12_scsEB_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccte0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccte1; else goto ccte2;
       ccte1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccte2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctdX_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctdX() //  [R1, R2, R3, R4]
         { info_tbl: [(cctdX,
                       label: block_cctdX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctdX: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccte5; else goto ccte4;
       ccte5: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccte4: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsF0_entry() //  [R1]
         { info_tbl: [(ccten,
                       label: sat_scsF0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccten: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccteo; else goto cctep;
       ccteo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctep: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl16_rcsnb_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsF1_entry() //  [R1]
         { info_tbl: [(ccteq,
                       label: sat_scsF1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccteq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccteu; else goto cctet;
       ccteu: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctet: // global
           _scsEv::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scsF0_info;
           P64[Hp] = _scsEv::P64;
           R3 = Hp - 16;
           R2 = lvl14_rcsn9_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsF2_entry() //  [R1]
         { info_tbl: [(cctex,
                       label: sat_scsF2_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctex: // global
           _scsF2::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cctey; else goto cctez;
       cctez: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccteB; else goto ccteA;
       ccteB: // global
           HpAlloc = 24;
           goto cctey;
       cctey: // global
           R1 = _scsF2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccteA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsF2::P64;
           _scsBJ::P64 = P64[_scsF2::P64 + 16];
           _scsEv::P64 = P64[_scsF2::P64 + 24];
           I64[Hp - 16] = sat_scsF1_info;
           P64[Hp] = _scsEv::P64;
           I64[Sp - 32] = block_cctev_info;
           R3 = _scsBJ::P64;
           R2 = lvl6_rcsn1_bytes;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctev() //  [R1]
         { info_tbl: [(cctev,
                       label: block_cctev_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctev: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsF3_entry() //  [R1]
         { info_tbl: [(ccteF,
                       label: sat_scsF3_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccteF: // global
           _scsF3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccteG; else goto ccteH;
       ccteH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccteJ; else goto ccteI;
       ccteJ: // global
           HpAlloc = 32;
           goto ccteG;
       ccteG: // global
           R1 = _scsF3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccteI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsF3::P64;
           _scsBJ::P64 = P64[_scsF3::P64 + 16];
           _scsEv::P64 = P64[_scsF3::P64 + 24];
           I64[Hp - 24] = sat_scsF2_info;
           P64[Hp - 8] = _scsBJ::P64;
           P64[Hp] = _scsEv::P64;
           R3 = Hp - 24;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds12_scsFd_entry() //  [R1]
         { info_tbl: [(ccteT,
                       label: ds12_scsFd_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccteT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccteU; else goto ccteV;
       ccteU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccteV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccteQ_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccteQ() //  [R1, R2, R3, R4]
         { info_tbl: [(ccteQ,
                       label: block_ccteQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccteQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccteY; else goto ccteX;
       ccteY: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccteX: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scsFO_entry() //  [R1]
         { info_tbl: [(cctff,
                       label: ds15_scsFO_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctff: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctfg; else goto cctfh;
       cctfg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctfh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctfc_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctfc() //  [R1, R2, R3, R4]
         { info_tbl: [(cctfc,
                       label: block_cctfc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctfc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctfk; else goto cctfj;
       cctfk: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctfj: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsG6_entry() //  [R1]
         { info_tbl: [(cctfr,
                       label: sat_scsG6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctfr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctfs; else goto cctft;
       cctfs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctft: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scsGk_entry() //  [R1]
         { info_tbl: [(cctfC,
                       label: ds15_scsGk_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctfC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctfD; else goto cctfE;
       cctfD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctfE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctfz_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctfz() //  [R1, R2, R3, R4]
         { info_tbl: [(cctfz,
                       label: block_cctfz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctfz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctfH; else goto cctfG;
       cctfH: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctfG: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds12_scsGW_entry() //  [R1]
         { info_tbl: [(cctg1,
                       label: ds12_scsGW_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctg1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctg2; else goto cctg3;
       cctg2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctg3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctfY_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctfY() //  [R1, R2, R3, R4]
         { info_tbl: [(cctfY,
                       label: block_cctfY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctfY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctg6; else goto cctg5;
       cctg6: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctg5: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsH2_entry() //  [R1]
         { info_tbl: [(cctgf,
                       label: sat_scsH2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctgf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctgg; else goto cctgh;
       cctgg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctgh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scsHx_entry() //  [R1]
         { info_tbl: [(cctgy,
                       label: ds15_scsHx_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctgy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctgz; else goto cctgA;
       cctgz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctgA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctgv_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctgv() //  [R1, R2, R3, R4]
         { info_tbl: [(cctgv,
                       label: block_cctgv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctgv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctgD; else goto cctgC;
       cctgD: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctgC: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsHP_entry() //  [R1]
         { info_tbl: [(cctgK,
                       label: sat_scsHP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctgK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctgL; else goto cctgM;
       cctgL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctgM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scsI3_entry() //  [R1]
         { info_tbl: [(cctgV,
                       label: ds15_scsI3_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctgV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctgW; else goto cctgX;
       cctgW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctgX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctgS_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctgS() //  [R1, R2, R3, R4]
         { info_tbl: [(cctgS,
                       label: block_cctgS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctgS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccth0; else goto cctgZ;
       ccth0: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctgZ: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsIa_entry() //  [R1]
         { info_tbl: [(cctha,
                       label: sat_scsIa_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctha: // global
           _scsIa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccthb; else goto ccthc;
       ccthc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccthe; else goto ccthd;
       ccthe: // global
           HpAlloc = 16;
           goto ccthb;
       ccthb: // global
           R1 = _scsIa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccthd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsIa::P64;
           _scsGQ::P64 = P64[_scsIa::P64 + 16];
           _scsHt::P64 = P64[_scsIa::P64 + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _scsHt::P64;
           R2 = Hp - 6;
           R1 = _scsGQ::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds13_scsIC_entry() //  [R1]
         { info_tbl: [(cctho,
                       label: ds13_scsIC_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctho: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccthp; else goto ccthq;
       ccthp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccthq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccthl_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccthl() //  [R1, R2, R3, R4]
         { info_tbl: [(ccthl,
                       label: block_ccthl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccthl: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctht; else goto ccths;
       cctht: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccths: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsJ1_entry() //  [R1]
         { info_tbl: [(ccthJ,
                       label: sat_scsJ1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccthJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccthK; else goto ccthL;
       ccthK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccthL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccthH_info;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccthH() //  [R1]
         { info_tbl: [(ccthH,
                       label: block_ccthH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccthH: // global
           R3 = lvl24_rcsnk_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsJ2_entry() //  [R1]
         { info_tbl: [(ccthP,
                       label: sat_scsJ2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccthP: // global
           _scsJ2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccthQ; else goto ccthR;
       ccthR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccthT; else goto ccthS;
       ccthT: // global
           HpAlloc = 24;
           goto ccthQ;
       ccthQ: // global
           R1 = _scsJ2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccthS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsJ2::P64;
           _scsBJ::P64 = P64[_scsJ2::P64 + 16];
           I64[Hp - 16] = sat_scsJ1_info;
           P64[Hp] = _scsBJ::P64;
           R3 = Hp - 16;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsJ3_entry() //  [R1]
         { info_tbl: [(ccthU,
                       label: sat_scsJ3_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccthU: // global
           _scsJ3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccthV; else goto ccthW;
       ccthW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccthY; else goto ccthX;
       ccthY: // global
           HpAlloc = 24;
           goto ccthV;
       ccthV: // global
           R1 = _scsJ3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccthX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsJ3::P64;
           _scsBJ::P64 = P64[_scsJ3::P64 + 16];
           _scsCa::P64 = P64[_scsJ3::P64 + 24];
           I64[Hp - 16] = sat_scsJ2_info;
           P64[Hp] = _scsBJ::P64;
           R3 = _scsCa::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.$wgetOpt'_entry() //  [R2, R3, R4]
         { info_tbl: [(ccti3,
                       label: System.Console.GetOpt.$wgetOpt'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccti3: // global
           if ((Sp + -72) < SpLim) (likely: False) goto ccti4; else goto ccti5;
       ccti4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$wgetOpt'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccti5: // global
           I64[Sp - 24] = block_cct16_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uctoE; else goto cct17;
       uctoE: // global
           call _cct16(R1) args: 0, res: 0, upd: 0;
       cct17: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cct16() //  [R1]
         { info_tbl: [(cct16,
                       label: block_cct16_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct16: // global
           if (R1 & 7 == 1) goto ccti0; else goto ccti1;
       ccti0: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccti1: // global
           I64[Sp - 16] = block_cct1c_info;
           _scss0::P64 = R1;
           _scss2::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _scss2::P64;
           P64[Sp] = _scss0::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uctoa; else goto cct1d;
       uctoa: // global
           call _cct1c(R1) args: 0, res: 0, upd: 0;
       cct1d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cct1c() //  [R1]
         { info_tbl: [(cct1c,
                       label: block_cct1c_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct1c: // global
           if (R1 & 7 == 1) goto cctib; else goto cctiy;
       cctib: // global
           I64[Sp] = block_cct1h_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto uctob; else goto cct1i;
       uctob: // global
           call _cct1h(R1) args: 0, res: 0, upd: 0;
       cct1i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cctiy: // global
           I64[Sp - 16] = block_cct22_info;
           _scss3::P64 = R1;
           _scst9::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _scst9::P64;
           P64[Sp] = _scss3::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uctoc; else goto cct23;
       uctoc: // global
           call _cct22(R1) args: 0, res: 0, upd: 0;
       cct23: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cct1h() //  [R1]
         { info_tbl: [(cct1h,
                       label: block_cct1h_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct1h: // global
           _scsrY::P64 = P64[Sp + 32];
           _scss2::P64 = P64[Sp + 8];
           _ccto0::P64 = R1 & 7;
           if (_ccto0::P64 < 3) goto ucto1; else goto cctit;
       ucto1: // global
           if (_ccto0::P64 < 2) goto cctif; else goto cctio;
       cctif: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctii; else goto cctih;
       cctii: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctih: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = _scss2::P64;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctio: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cctir; else goto cctiq;
       cctir: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctiq: // global
           I64[Hp - 144] = ds_scss6_info;
           P64[Hp - 128] = _scsrY::P64;
           P64[Hp - 120] = _scss2::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _cct1n::P64 = Hp - 144;
           P64[Hp - 96] = _cct1n::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _cct1n::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cct1n::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cct1n::P64;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctit: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cctiw; else goto cctiv;
       cctiw: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctiv: // global
           _scssB::P64 = P64[R1 + 5];
           I64[Hp - 176] = ds_scssC_info;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           P64[Hp - 144] = R1;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _cct1C::P64 = Hp - 176;
           P64[Hp - 120] = _cct1C::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _cct1C::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _cct1C::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cct1C::P64;
           I64[Hp - 40] = sat_scssI_info;
           P64[Hp - 24] = _scssB::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R4 = Hp - 136;
           R3 = Hp - 112;
           R2 = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cct22() //  [R1]
         { info_tbl: [(cct22,
                       label: block_cct22_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct22: // global
           if (I64[R1 + 7] == 45) goto cctiZ; else goto cctiB;
       cctiZ: // global
           _scst9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cct2I_info;
           R1 = _scst9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uctoe; else goto cct2J;
       uctoe: // global
           call _cct2I(R1) args: 0, res: 0, upd: 0;
       cct2J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cctiB: // global
           I64[Sp + 8] = block_cct29_info;
           R1 = P64[Sp + 40];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uctod; else goto cct2a;
       uctod: // global
           call _cct29(R1) args: 0, res: 0, upd: 0;
       cct2a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cct2I() //  [R1]
         { info_tbl: [(cct2I,
                       label: block_cct2I_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct2I: // global
           if (R1 & 7 == 1) goto cctj2; else goto cctjr;
       cctj2: // global
           I64[Sp] = block_cct2N_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto uctog; else goto cct2O;
       uctog: // global
           call _cct2N(R1) args: 0, res: 0, upd: 0;
       cct2O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cctjr: // global
           I64[Sp + 8] = block_cct3n_info;
           _scsvl::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _scsvl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uctoh; else goto cct3o;
       uctoh: // global
           call _cct3n(R1) args: 0, res: 0, upd: 0;
       cct3o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cct2N() //  [R1]
         { info_tbl: [(cct2N,
                       label: block_cct2N_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct2N: // global
           _scsrY::P64 = P64[Sp + 40];
           _scss2::P64 = P64[Sp + 16];
           _scss3::P64 = P64[Sp + 8];
           _cctnY::P64 = R1 & 7;
           if (_cctnY::P64 < 3) goto ucto3; else goto cctjm;
       ucto3: // global
           if (_cctnY::P64 < 2) goto ucto9; else goto cctjc;
       ucto9: // global
           Sp = Sp + 24;
           call _cctj6() args: 0, res: 0, upd: 0;
       cctjc: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cctjf; else goto cctje;
       cctjf: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctje: // global
           I64[Hp - 144] = ds4_scsui_info;
           P64[Hp - 128] = _scsrY::P64;
           P64[Hp - 120] = _scss2::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _cct2T::P64 = Hp - 144;
           P64[Hp - 96] = _cct2T::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _cct2T::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cct2T::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scss3::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cct2T::P64;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctjm: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cctjp; else goto cctjo;
       cctjp: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctjo: // global
           _scsuN::P64 = P64[R1 + 5];
           I64[Hp - 184] = ds4_scsuO_info;
           P64[Hp - 168] = _scsrY::P64;
           P64[Hp - 160] = _scss2::P64;
           P64[Hp - 152] = R1;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cct38::P64 = Hp - 184;
           P64[Hp - 128] = _cct38::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cct38::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _cct38::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _cct38::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _scsuN::P64;
           P64[Hp - 24] = _scss3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cct3n() //  [R1]
         { info_tbl: [(cct3n,
                       label: block_cct3n_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct3n: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cctju; else goto cctjt;
       cctju: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctjt: // global
           _scsvo::I64 = I64[R1 + 7];
           if (_scsvo::I64 == 45) goto cctli; else goto cctjw;
       cctli: // global
           Hp = Hp - 16;
           I64[Sp] = block_cct9q_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto uctoj; else goto cct9r;
       uctoj: // global
           call _cct9q(R1) args: 0, res: 0, upd: 0;
       cct9r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cctjw: // global
           I64[Hp - 8] = go_scsvp_info;
           I64[Hp] = _scsvo::I64;
           I64[Sp - 8] = block_cct4I_info;
           R2 = P64[Sp + 32];
           _scsvm::P64 = R1;
           R1 = Hp - 7;
           P64[Sp] = _scsvm::P64;
           Sp = Sp - 8;
           call go_scsvp_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cct9q() //  [R1]
         { info_tbl: [(cct9q,
                       label: block_cct9q_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct9q: // global
           if (R1 & 7 == 1) goto cctll; else goto cctlv;
       cctll: // global
           I64[Sp] = block_cct9v_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto uctor; else goto cct9w;
       uctor: // global
           call _cct9v(R1) args: 0, res: 0, upd: 0;
       cct9w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cctlv: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cctly; else goto cctlx;
       cctly: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctlx: // global
           I64[Hp - 64] = ds8_scsBF_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_sel_0_upd_info;
           _cct9K::P64 = Hp - 64;
           P64[Hp - 24] = _cct9K::P64;
           I64[Hp - 16] = getWith_scsBN_info;
           P64[Hp - 8] = P64[Sp + 32];
           _cct9X::P64 = Hp - 40;
           P64[Hp] = _cct9X::P64;
           I64[Sp - 24] = block_cctlu_info;
           R2 = GHC.Base.eqString_closure+2;
           _scsBz::P64 = R1;
           _cct9Y::P64 = Hp - 15;
           R1 = _cct9Y::P64;
           P64[Sp - 16] = _cct9Y::P64;
           P64[Sp - 8] = _scsBz::P64;
           P64[Sp] = _cct9X::P64;
           P64[Sp + 16] = _cct9K::P64;
           Sp = Sp - 24;
           call getWith_scsBN_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cct9v() //  [R1]
         { info_tbl: [(cct9v,
                       label: block_cct9v_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct9v: // global
           _scss2::P64 = P64[Sp + 8];
           if (R1 & 7 == 3) goto cctlq; else goto cctlp;
       cctlq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cctlt; else goto cctls;
       cctlt: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctls: // global
           _scsBB::P64 = P64[R1 + 5];
           I64[Hp - 24] = sat_scsBC_info;
           P64[Hp - 8] = _scss2::P64;
           P64[Hp] = _scsBB::P64;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 24;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctlp: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = _scss2::P64;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctlu() //  [R1]
         { info_tbl: [(cctlu,
                       label: block_cctlu_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctlu: // global
           if (R1 & 7 == 1) goto cctnv; else goto cctnD;
       cctnv: // global
           _cct9Y::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cctns_info;
           R2 = lvl19_rcsne_closure+2;
           R1 = _cct9Y::P64;
           Sp = Sp + 8;
           call getWith_scsBN_entry(R2, R1) args: 8, res: 8, upd: 8;
       cctnD: // global
           P64[Sp + 8] = R1;
           Sp = Sp + 8;
           call _scsC9() args: 0, res: 0, upd: 0;
     }
 },
 _cctns() //  [R1]
         { info_tbl: [(cctns,
                       label: block_cctns_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctns: // global
           P64[Sp] = R1;
           call _scsC9() args: 0, res: 0, upd: 0;
     }
 },
 _scsC9() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       scsC9: // global
           I64[Sp - 8] = block_cctbD_info;
           R2 = P64[Sp];
           Sp = Sp - 8;
           call poly_go_rcsnj_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cctbD() //  [R1]
         { info_tbl: [(cctbD,
                       label: block_cctbD_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctbD: // global
           if (R1 & 7 == 1) goto cctlE; else goto cctlJ;
       cctlE: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cctlH; else goto cctlG;
       cctlH: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctlG: // global
           I64[Hp - 176] = ds9_scsCc_info;
           P64[Hp - 160] = P64[Sp + 48];
           P64[Hp - 152] = P64[Sp + 56];
           P64[Hp - 144] = P64[Sp + 32];
           I64[Hp - 136] = stg_sel_3_upd_info;
           _cctbH::P64 = Hp - 176;
           P64[Hp - 120] = _cctbH::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _cctbH::P64;
           I64[Hp - 88] = sat_scsCu_info;
           P64[Hp - 72] = P64[Sp + 16];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _cctbH::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cctbH::P64;
           R4 = Hp - 136;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctlJ: // global
           I64[Sp - 8] = block_cctc5_info;
           _scsCI::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scsCI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctos; else goto cctc6;
       uctos: // global
           call _cctc5(R1) args: 0, res: 0, upd: 0;
       cctc6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctc5() //  [R1]
         { info_tbl: [(cctc5,
                       label: block_cctc5_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctc5: // global
           if (R1 & 7 == 1) goto cctlM; else goto cctnl;
       cctlM: // global
           I64[Sp + 16] = block_cctca_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uctot; else goto cctcb;
       uctot: // global
           call _cctca(R1) args: 0, res: 0, upd: 0;
       cctcb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cctnl: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cctno; else goto cctnn;
       cctno: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctnn: // global
           I64[Hp - 184] = ds13_scsIC_info;
           P64[Hp - 168] = P64[Sp + 56];
           P64[Hp - 160] = P64[Sp + 64];
           P64[Hp - 152] = P64[Sp + 40];
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccthh::P64 = Hp - 184;
           P64[Hp - 128] = _ccthh::P64;
           I64[Hp - 120] = sat_scsJ3_info;
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccthh::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccthh::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccthh::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctca() //  [R1]
         { info_tbl: [(cctca,
                       label: block_cctca_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctca: // global
           _cct9K::P64 = P64[Sp + 32];
           _cctnK::P64 = R1 & 7;
           if (_cctnK::P64 < 3) goto ucto5; else goto cctmX;
       ucto5: // global
           if (_cctnK::P64 < 2) goto cctlP; else goto cctmh;
       cctlP: // global
           I64[Sp] = block_cctcf_info;
           _scsCM::P64 = P64[R1 + 7];
           R1 = _cct9K::P64;
           P64[Sp + 32] = _scsCM::P64;
           if (R1 & 7 != 0) goto uctou; else goto cctcg;
       uctou: // global
           call _cctcf(R1) args: 0, res: 0, upd: 0;
       cctcg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cctmh: // global
           I64[Sp - 8] = block_cctdE_info;
           _scsEu::P64 = P64[R1 + 6];
           _scsEv::P64 = P64[R1 + 14];
           R1 = _cct9K::P64;
           P64[Sp] = _scsEv::P64;
           P64[Sp + 32] = _scsEu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctov; else goto cctdF;
       uctov: // global
           call _cctdE(R1) args: 0, res: 0, upd: 0;
       cctdF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cctmX: // global
           I64[Sp] = block_cctfK_info;
           _scsGQ::P64 = P64[R1 + 5];
           R1 = _cct9K::P64;
           P64[Sp + 32] = _scsGQ::P64;
           if (R1 & 7 != 0) goto uctow; else goto cctfL;
       uctow: // global
           call _cctfK(R1) args: 0, res: 0, upd: 0;
       cctfL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctcf() //  [R1]
         { info_tbl: [(cctcf,
                       label: block_cctcf_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctcf: // global
           I64[Sp] = block_cctck_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto uctox; else goto cctcl;
       uctox: // global
           call _cctck(R1) args: 0, res: 0, upd: 0;
       cctcl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctck() //  [R1]
         { info_tbl: [(cctck,
                       label: block_cctck_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctck: // global
           if (R1 & 7 == 1) goto cctlX; else goto cctm2;
       cctlX: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto cctm0; else goto cctlZ;
       cctm0: // global
           HpAlloc = 160;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctlZ: // global
           I64[Hp - 152] = ds11_scsCR_info;
           P64[Hp - 136] = P64[Sp + 40];
           P64[Hp - 128] = P64[Sp + 48];
           P64[Hp - 120] = P64[Sp + 24];
           I64[Hp - 112] = stg_sel_3_upd_info;
           _cctcp::P64 = Hp - 152;
           P64[Hp - 96] = _cctcp::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _cctcp::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cctcp::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cctcp::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = Hp - 40;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctm2: // global
           I64[Sp] = block_cctcE_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uctoy; else goto cctcF;
       uctoy: // global
           call _cctcE(R1) args: 0, res: 0, upd: 0;
       cctcF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctcE() //  [R1]
         { info_tbl: [(cctcE,
                       label: block_cctcE_info
                       rep:StackRep [False, False, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctcE: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cctm5; else goto cctm4;
       cctm5: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctm4: // global
           _scsrX::P64 = P64[Sp + 40];
           _scsrY::P64 = P64[Sp + 48];
           _scss2::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 61) goto cctmf; else goto cctma;
       cctmf: // global
           I64[Hp - 176] = ds15_scsDX_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           P64[Hp - 144] = _scss2::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _cctd8::P64 = Hp - 176;
           P64[Hp - 120] = _cctd8::P64;
           I64[Hp - 112] = sat_scsEm_info;
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 112;
           P64[Hp - 72] = Hp - 136;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _cctd8::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _cctd8::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cctd8::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctma: // global
           I64[Hp - 176] = ds15_scsDr_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           P64[Hp - 144] = _scss2::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _cctcL::P64 = Hp - 176;
           P64[Hp - 120] = _cctcL::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _cctcL::P64;
           I64[Hp - 88] = sat_scsDJ_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _cctcL::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cctcL::P64;
           R4 = Hp - 136;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctdE() //  [R1]
         { info_tbl: [(cctdE,
                       label: block_cctdE_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctdE: // global
           I64[Sp] = block_cctdJ_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto uctoz; else goto cctdK;
       uctoz: // global
           call _cctdJ(R1) args: 0, res: 0, upd: 0;
       cctdK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctdJ() //  [R1]
         { info_tbl: [(cctdJ,
                       label: block_cctdJ_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctdJ: // global
           if (R1 & 7 == 1) goto cctml; else goto cctmG;
       cctml: // global
           I64[Sp] = block_cctdO_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto uctoA; else goto cctdP;
       uctoA: // global
           call _cctdO(R1) args: 0, res: 0, upd: 0;
       cctdP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cctmG: // global
           I64[Sp + 8] = block_cctf1_info;
           _scsFK::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _scsFK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uctoB; else goto cctf2;
       uctoB: // global
           call _cctf1(R1) args: 0, res: 0, upd: 0;
       cctf2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctdO() //  [R1]
         { info_tbl: [(cctdO,
                       label: block_cctdO_info
                       rep:StackRep [False, True, False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctdO: // global
           _scsrX::P64 = P64[Sp + 48];
           _scsrY::P64 = P64[Sp + 56];
           if (R1 & 7 == 1) goto cctmr; else goto cctmB;
       cctmr: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cctmu; else goto cctmt;
       cctmu: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctmt: // global
           I64[Hp - 176] = ds12_scsEB_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctdT::P64 = Hp - 176;
           P64[Hp - 128] = _cctdT::P64;
           I64[Hp - 120] = sat_scsF3_info;
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 8];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _cctdT::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _cctdT::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cctdT::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctmB: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cctmE; else goto cctmD;
       cctmE: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctmD: // global
           _scsFb::P64 = P64[R1 + 6];
           _scsFc::P64 = P64[R1 + 14];
           I64[Hp - 184] = ds12_scsFd_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scsFc::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccteM::P64 = Hp - 184;
           P64[Hp - 128] = _ccteM::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccteM::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccteM::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccteM::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = _scsFb::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctf1() //  [R1]
         { info_tbl: [(cctf1,
                       label: block_cctf1_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctf1: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cctmJ; else goto cctmI;
       cctmJ: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctmI: // global
           _scsrX::P64 = P64[Sp + 40];
           _scsrY::P64 = P64[Sp + 48];
           _scss2::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 61) goto cctmV; else goto cctmO;
       cctmV: // global
           I64[Hp - 184] = ds15_scsGk_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctfv::P64 = Hp - 184;
           P64[Hp - 128] = _cctfv::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cctfv::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _cctfv::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _cctfv::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctmO: // global
           I64[Hp - 184] = ds15_scsFO_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctf8::P64 = Hp - 184;
           P64[Hp - 128] = _cctf8::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cctf8::P64;
           I64[Hp - 96] = sat_scsG6_info;
           P64[Hp - 80] = P64[Sp + 8];
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           I64[Hp - 48] = stg_sel_1_upd_info;
           P64[Hp - 32] = _cctf8::P64;
           I64[Hp - 24] = stg_sel_0_upd_info;
           P64[Hp - 8] = _cctf8::P64;
           _cctfl::P64 = Hp - 144;
           _cctmK::P64 = Hp - 70;
           _cctmL::P64 = Hp - 48;
           _cctmM::P64 = Hp - 24;
           Hp = Hp - 8;
           R4 = _cctfl::P64;
           R3 = _cctmK::P64;
           R2 = _cctmL::P64;
           R1 = _cctmM::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctfK() //  [R1]
         { info_tbl: [(cctfK,
                       label: block_cctfK_info
                       rep:StackRep [False, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctfK: // global
           I64[Sp] = block_cctfP_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto uctoC; else goto cctfQ;
       uctoC: // global
           call _cctfP(R1) args: 0, res: 0, upd: 0;
       cctfQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctfP() //  [R1]
         { info_tbl: [(cctfP,
                       label: block_cctfP_info
                       rep:StackRep [False, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctfP: // global
           if (R1 & 7 == 1) goto cctn1; else goto cctn6;
       cctn1: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cctn4; else goto cctn3;
       cctn4: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctn3: // global
           I64[Hp - 176] = ds12_scsGW_info;
           P64[Hp - 160] = P64[Sp + 40];
           P64[Hp - 152] = P64[Sp + 48];
           P64[Hp - 144] = P64[Sp + 24];
           I64[Hp - 136] = stg_sel_3_upd_info;
           _cctfU::P64 = Hp - 176;
           P64[Hp - 120] = _cctfU::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _cctfU::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _cctfU::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cctfU::P64;
           I64[Hp - 40] = sat_scsH2_info;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R4 = Hp - 136;
           R3 = Hp - 112;
           R2 = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctn6: // global
           I64[Sp] = block_cctgk_info;
           _scsHt::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _scsHt::P64;
           if (R1 & 7 != 0) goto uctoD; else goto cctgl;
       uctoD: // global
           call _cctgk(R1) args: 0, res: 0, upd: 0;
       cctgl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctgk() //  [R1]
         { info_tbl: [(cctgk,
                       label: block_cctgk_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctgk: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cctn9; else goto cctn8;
       cctn9: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctn8: // global
           _scsrX::P64 = P64[Sp + 40];
           _scsrY::P64 = P64[Sp + 48];
           _scss2::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 61) goto cctng; else goto cctne;
       cctng: // global
           I64[Hp - 184] = ds15_scsI3_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctgO::P64 = Hp - 184;
           P64[Hp - 128] = _cctgO::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cctgO::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _cctgO::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _cctgO::P64;
           I64[Hp - 48] = sat_scsIa_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctne: // global
           I64[Hp - 184] = ds15_scsHx_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctgr::P64 = Hp - 184;
           P64[Hp - 128] = _cctgr::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cctgr::P64;
           I64[Hp - 96] = sat_scsHP_info;
           P64[Hp - 80] = P64[Sp + 8];
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           I64[Hp - 48] = stg_sel_1_upd_info;
           P64[Hp - 32] = _cctgr::P64;
           I64[Hp - 24] = stg_sel_0_upd_info;
           P64[Hp - 8] = _cctgr::P64;
           _cctgE::P64 = Hp - 144;
           _cctna::P64 = Hp - 70;
           _cctnb::P64 = Hp - 48;
           _cctnc::P64 = Hp - 24;
           Hp = Hp - 8;
           R4 = _cctgE::P64;
           R3 = _cctna::P64;
           R2 = _cctnb::P64;
           R1 = _cctnc::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cct4I() //  [R1]
         { info_tbl: [(cct4I,
                       label: block_cct4I_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct4I: // global
           I64[Sp - 8] = block_cct4M_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call poly_go1_rcsnl_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cct4M() //  [R1]
         { info_tbl: [(cct4M,
                       label: block_cct4M_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct4M: // global
           if (R1 & 7 == 1) goto cctjA; else goto cctjZ;
       cctjA: // global
           I64[Sp + 8] = block_cct4Q_info;
           R1 = P64[Sp + 32];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uctok; else goto cct4R;
       uctok: // global
           call _cct4Q(R1) args: 0, res: 0, upd: 0;
       cct4R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cctjZ: // global
           I64[Sp - 8] = block_cct5t_info;
           _scswU::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scswU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctol; else goto cct5u;
       uctol: // global
           call _cct5t(R1) args: 0, res: 0, upd: 0;
       cct5u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cct4Q() //  [R1]
         { info_tbl: [(cct4Q,
                       label: block_cct4Q_info
                       rep:StackRep [False, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct4Q: // global
           _scsrX::P64 = P64[Sp + 32];
           _scsrY::P64 = P64[Sp + 40];
           _scss2::P64 = P64[Sp + 16];
           _scsvm::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cctjJ; else goto cctjU;
       cctjJ: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cctjM; else goto cctjL;
       cctjM: // global
           HpAlloc = 208;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctjL: // global
           I64[Hp - 200] = ds8_scsvM_info;
           P64[Hp - 184] = _scsrX::P64;
           P64[Hp - 176] = _scsrY::P64;
           P64[Hp - 168] = _scss2::P64;
           I64[Hp - 160] = stg_sel_3_upd_info;
           _cct4V::P64 = Hp - 200;
           P64[Hp - 144] = _cct4V::P64;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _cct4V::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _scsvm::P64;
           P64[Hp - 96] = GHC.Types.[]_closure+1;
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = lvl21_rcsng_closure+1;
           P64[Hp - 72] = Hp - 110;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 86;
           P64[Hp - 48] = Hp - 136;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _cct4V::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cct4V::P64;
           R4 = Hp - 160;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctjU: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto cctjX; else goto cctjW;
       cctjX: // global
           HpAlloc = 216;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctjW: // global
           I64[Hp - 208] = ds8_scswl_info;
           P64[Hp - 192] = _scsrX::P64;
           P64[Hp - 184] = _scsrY::P64;
           P64[Hp - 176] = _scss2::P64;
           P64[Hp - 168] = R1;
           I64[Hp - 160] = stg_sel_3_upd_info;
           _cct5a::P64 = Hp - 208;
           P64[Hp - 144] = _cct5a::P64;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _cct5a::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _scsvm::P64;
           P64[Hp - 96] = GHC.Types.[]_closure+1;
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = lvl21_rcsng_closure+1;
           P64[Hp - 72] = Hp - 110;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 86;
           P64[Hp - 48] = Hp - 136;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _cct5a::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cct5a::P64;
           R4 = Hp - 160;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cct5t() //  [R1]
         { info_tbl: [(cct5t,
                       label: block_cct5t_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct5t: // global
           if (R1 & 7 == 1) goto cctk2; else goto cctle;
       cctk2: // global
           I64[Sp + 16] = block_cct5y_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uctom; else goto cct5z;
       uctom: // global
           call _cct5y(R1) args: 0, res: 0, upd: 0;
       cct5z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cctle: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cctlh; else goto cctlg;
       cctlh: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctlg: // global
           I64[Hp - 184] = ds12_scsAZ_info;
           P64[Hp - 168] = P64[Sp + 48];
           P64[Hp - 160] = P64[Sp + 56];
           P64[Hp - 152] = P64[Sp + 32];
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cct8I::P64 = Hp - 184;
           P64[Hp - 128] = _cct8I::P64;
           I64[Hp - 120] = sat_scsBr_info;
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _cct8I::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _cct8I::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cct8I::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cct5y() //  [R1]
         { info_tbl: [(cct5y,
                       label: block_cct5y_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct5y: // global
           _scsvl::P64 = P64[Sp + 24];
           _cctnS::P64 = R1 & 7;
           if (_cctnS::P64 < 3) goto ucto4; else goto cctkY;
       ucto4: // global
           if (_cctnS::P64 < 2) goto cctk5; else goto cctkq;
       cctk5: // global
           I64[Sp + 8] = block_cct5D_info;
           _scswY::P64 = P64[R1 + 7];
           R1 = _scsvl::P64;
           P64[Sp + 24] = _scswY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucton; else goto cct5E;
       ucton: // global
           call _cct5D(R1) args: 0, res: 0, upd: 0;
       cct5E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cctkq: // global
           I64[Sp - 8] = block_cct6g_info;
           _scsy4::P64 = P64[R1 + 6];
           _scsy5::P64 = P64[R1 + 14];
           R1 = _scsvl::P64;
           P64[Sp] = _scsy5::P64;
           P64[Sp + 24] = _scsy4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctoo; else goto cct6h;
       uctoo: // global
           call _cct6g(R1) args: 0, res: 0, upd: 0;
       cct6h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cctkY: // global
           I64[Sp + 8] = block_cct7K_info;
           _scszP::P64 = P64[R1 + 5];
           R1 = _scsvl::P64;
           P64[Sp + 24] = _scszP::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uctop; else goto cct7L;
       uctop: // global
           call _cct7K(R1) args: 0, res: 0, upd: 0;
       cct7L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cct5D() //  [R1]
         { info_tbl: [(cct5D,
                       label: block_cct5D_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct5D: // global
           _scsrX::P64 = P64[Sp + 24];
           _scsrY::P64 = P64[Sp + 32];
           _scss2::P64 = P64[Sp + 8];
           _scswY::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cctkc; else goto cctkl;
       cctkc: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto cctkf; else goto cctke;
       cctkf: // global
           HpAlloc = 160;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctke: // global
           I64[Hp - 152] = ds10_scsx0_info;
           P64[Hp - 136] = _scsrX::P64;
           P64[Hp - 128] = _scsrY::P64;
           P64[Hp - 120] = _scss2::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _cct5I::P64 = Hp - 152;
           P64[Hp - 96] = _cct5I::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _cct5I::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cct5I::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cct5I::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scswY::P64;
           P64[Hp] = Hp - 40;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctkl: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cctko; else goto cctkn;
       cctko: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctkn: // global
           I64[Hp - 160] = ds10_scsxx_info;
           P64[Hp - 144] = _scsrX::P64;
           P64[Hp - 136] = _scsrY::P64;
           P64[Hp - 128] = _scss2::P64;
           P64[Hp - 120] = R1;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _cct5X::P64 = Hp - 160;
           P64[Hp - 96] = _cct5X::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _cct5X::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cct5X::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cct5X::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scswY::P64;
           P64[Hp] = Hp - 40;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cct6g() //  [R1]
         { info_tbl: [(cct6g,
                       label: block_cct6g_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct6g: // global
           _scss2::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto cctkt; else goto cctkT;
       cctkt: // global
           I64[Sp] = block_cct6l_info;
           R1 = _scss2::P64;
           if (R1 & 7 != 0) goto uctoq; else goto cct6m;
       uctoq: // global
           call _cct6l(R1) args: 0, res: 0, upd: 0;
       cct6m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cctkT: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cctkW; else goto cctkV;
       cctkW: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctkV: // global
           I64[Hp - 184] = ds11_scszj_info;
           P64[Hp - 168] = P64[Sp + 40];
           P64[Hp - 160] = P64[Sp + 48];
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cct7v::P64 = Hp - 184;
           P64[Hp - 128] = _cct7v::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cct7v::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _cct7v::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _cct7v::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cct6l() //  [R1]
         { info_tbl: [(cct6l,
                       label: block_cct6l_info
                       rep:StackRep [False, False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct6l: // global
           _scsrX::P64 = P64[Sp + 40];
           _scsrY::P64 = P64[Sp + 48];
           if (R1 & 7 == 1) goto cctkz; else goto cctkJ;
       cctkz: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cctkC; else goto cctkB;
       cctkC: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctkB: // global
           I64[Hp - 176] = ds11_scsy8_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cct6q::P64 = Hp - 176;
           P64[Hp - 128] = _cct6q::P64;
           I64[Hp - 120] = sat_scsyB_info;
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 8];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _cct6q::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _cct6q::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cct6q::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctkJ: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cctkM; else goto cctkL;
       cctkM: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctkL: // global
           _scsyJ::P64 = P64[R1 + 6];
           _scsyK::P64 = P64[R1 + 14];
           I64[Hp - 184] = ds11_scsyL_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scsyK::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cct7g::P64 = Hp - 184;
           P64[Hp - 128] = _cct7g::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cct7g::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _cct7g::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _cct7g::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _scsyJ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cct7K() //  [R1]
         { info_tbl: [(cct7K,
                       label: block_cct7K_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct7K: // global
           _scsrX::P64 = P64[Sp + 24];
           _scsrY::P64 = P64[Sp + 32];
           _scss2::P64 = P64[Sp + 8];
           _scszP::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cctl1; else goto cctl6;
       cctl1: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto cctl4; else goto cctl3;
       cctl4: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctl3: // global
           I64[Hp - 176] = ds11_scszS_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           P64[Hp - 144] = _scss2::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _cct7P::P64 = Hp - 176;
           P64[Hp - 120] = _cct7P::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _cct7P::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _cct7P::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cct7P::P64;
           I64[Hp - 40] = sat_scszY_info;
           P64[Hp - 24] = _scszP::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R4 = Hp - 136;
           R3 = Hp - 112;
           R2 = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctl6: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cctl9; else goto cctl8;
       cctl9: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctl8: // global
           I64[Hp - 184] = ds11_scsAq_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cct8f::P64 = Hp - 184;
           P64[Hp - 128] = _cct8f::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cct8f::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _cct8f::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _cct8f::P64;
           I64[Hp - 48] = sat_scsAx_info;
           P64[Hp - 32] = _scszP::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cct29() //  [R1]
         { info_tbl: [(cct29,
                       label: block_cct29_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cct29: // global
           _scsrY::P64 = P64[Sp + 40];
           _scss2::P64 = P64[Sp + 16];
           _scss3::P64 = P64[Sp + 8];
           _cctnZ::P64 = R1 & 7;
           if (_cctnZ::P64 < 3) goto ucto2; else goto cctiV;
       ucto2: // global
           if (_cctnZ::P64 < 2) goto ucto6; else goto cctiL;
       ucto6: // global
           Sp = Sp + 24;
           call _cctj6() args: 0, res: 0, upd: 0;
       cctiL: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cctiO; else goto cctiN;
       cctiO: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctiN: // global
           I64[Hp - 144] = ds4_scste_info;
           P64[Hp - 128] = _scsrY::P64;
           P64[Hp - 120] = _scss2::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _cct2f::P64 = Hp - 144;
           P64[Hp - 96] = _cct2f::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _cct2f::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cct2f::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scss3::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cct2f::P64;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctiV: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto cctiY; else goto cctiX;
       cctiY: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctiX: // global
           _scstJ::P64 = P64[R1 + 5];
           I64[Hp - 184] = ds4_scstK_info;
           P64[Hp - 168] = _scsrY::P64;
           P64[Hp - 160] = _scss2::P64;
           P64[Hp - 152] = R1;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cct2u::P64 = Hp - 184;
           P64[Hp - 128] = _cct2u::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cct2u::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _cct2u::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _cct2u::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _scstJ::P64;
           P64[Hp - 24] = _scss3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctj6() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctj6: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[Sp];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.488402868 UTC

[section ""data" . System.Console.GetOpt.getOpt'_closure" {
     System.Console.GetOpt.getOpt'_closure:
         const System.Console.GetOpt.getOpt'_info;
         const 0;
 },
 System.Console.GetOpt.getOpt'_entry() //  [R2, R3, R4]
         { info_tbl: [(cctoO,
                       label: System.Console.GetOpt.getOpt'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctoO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cctoP; else goto cctoQ;
       cctoP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.getOpt'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctoQ: // global
           I64[Sp - 8] = block_cctoL_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _cctoL() //  [R1, R2, R3, R4]
         { info_tbl: [(cctoL,
                       label: block_cctoL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctoL: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctoT; else goto cctoS;
       cctoT: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
       cctoS: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.490484368 UTC

[section ""data" . System.Console.GetOpt.getOpt_closure" {
     System.Console.GetOpt.getOpt_closure:
         const System.Console.GetOpt.getOpt_info;
         const 0;
 },
 ds_scsJq_entry() //  [R1]
         { info_tbl: [(cctp5,
                       label: ds_scsJq_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctp5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctp6; else goto cctp7;
       cctp6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctp7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctp2_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctp2() //  [R1, R2, R3, R4]
         { info_tbl: [(cctp2,
                       label: block_cctp2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctp2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctpa; else goto cctp9;
       cctpa: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctp9: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsJN_entry() //  [R1]
         { info_tbl: [(cctpo,
                       label: sat_scsJN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctpo: // global
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.errUnrec_closure+1;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsJO_entry() //  [R1]
         { info_tbl: [(cctpr,
                       label: sat_scsJO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctpr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctps; else goto cctpt;
       cctps: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctpt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctpf_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uctpx; else goto cctpg;
       uctpx: // global
           call _cctpf(R1) args: 0, res: 0, upd: 0;
       cctpg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cctpf() //  [R1]
         { info_tbl: [(cctpf,
                       label: block_cctpf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctpf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctpw; else goto cctpv;
       cctpw: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cctpv: // global
           _scsJL::P64 = P64[R1 + 23];
           _scsJM::P64 = P64[R1 + 31];
           I64[Hp - 16] = sat_scsJN_info;
           P64[Hp] = _scsJL::P64;
           R3 = Hp - 16;
           R2 = _scsJM::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.getOpt_entry() //  [R2, R3, R4]
         { info_tbl: [(cctpB,
                       label: System.Console.GetOpt.getOpt_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctpB: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cctpF; else goto cctpE;
       cctpF: // global
           HpAlloc = 144;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.getOpt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctpE: // global
           I64[Hp - 136] = ds_scsJq_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           I64[Hp - 96] = sat_scsJO_info;
           _cctoY::P64 = Hp - 136;
           P64[Hp - 80] = _cctoY::P64;
           I64[Hp - 72] = stg_sel_1_upd_info;
           P64[Hp - 56] = _cctoY::P64;
           I64[Hp - 48] = stg_sel_0_upd_info;
           P64[Hp - 32] = _cctoY::P64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.492659377 UTC

[section ""cstring" . System.Console.GetOpt.$trModule4_bytes" {
     System.Console.GetOpt.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.493302779 UTC

[section ""data" . System.Console.GetOpt.$trModule3_closure" {
     System.Console.GetOpt.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.493855558 UTC

[section ""cstring" . System.Console.GetOpt.$trModule2_bytes" {
     System.Console.GetOpt.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.494414319 UTC

[section ""data" . System.Console.GetOpt.$trModule1_closure" {
     System.Console.GetOpt.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.495051923 UTC

[section ""data" . System.Console.GetOpt.$trModule_closure" {
     System.Console.GetOpt.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Console.GetOpt.$trModule3_closure+1;
         const System.Console.GetOpt.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.495656216 UTC

[section ""data" . $krep_rcsnm_closure" {
     $krep_rcsnm_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.496269557 UTC

[section ""data" . $krep1_rcsnn_closure" {
     $krep1_rcsnn_closure:
         const :_con_info;
         const $krep_rcsnm_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.496871062 UTC

[section ""data" . $krep2_rcsno_closure" {
     $krep2_rcsno_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_rcsnn_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.497492835 UTC

[section ""data" . $krep3_rcsnp_closure" {
     $krep3_rcsnp_closure:
         const :_con_info;
         const $krep2_rcsno_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.49807672 UTC

[section ""data" . $krep4_rcsnq_closure" {
     $krep4_rcsnq_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep3_rcsnp_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.498622779 UTC

[section ""data" . $krep5_rcsnr_closure" {
     $krep5_rcsnr_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep3_rcsnp_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.499204373 UTC

[section ""data" . $krep6_rcsns_closure" {
     $krep6_rcsns_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.499806094 UTC

[section ""data" . $krep7_rcsnt_closure" {
     $krep7_rcsnt_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep6_rcsns_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.500378643 UTC

[section ""data" . $krep8_rcsnu_closure" {
     $krep8_rcsnu_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rcsnq_closure+1;
         const $krep6_rcsns_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.500954568 UTC

[section ""cstring" . System.Console.GetOpt.$tcArgOrder2_bytes" {
     System.Console.GetOpt.$tcArgOrder2_bytes:
         I8[] [65,114,103,79,114,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.501547661 UTC

[section ""data" . System.Console.GetOpt.$tcArgOrder1_closure" {
     System.Console.GetOpt.$tcArgOrder1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcArgOrder2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.502110321 UTC

[section ""data" . System.Console.GetOpt.$tcArgOrder_closure" {
     System.Console.GetOpt.$tcArgOrder_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcArgOrder1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 2821249393238363172;
         const 5857765806309969278;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.502760028 UTC

[section ""data" . $krep9_rcsnv_closure" {
     $krep9_rcsnv_closure:
         const :_con_info;
         const $krep6_rcsns_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.503397341 UTC

[section ""data" . System.Console.GetOpt.$tc'Permute1_closure" {
     System.Console.GetOpt.$tc'Permute1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcArgOrder_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.503969691 UTC

[section ""cstring" . System.Console.GetOpt.$tc'RequireOrder2_bytes" {
     System.Console.GetOpt.$tc'RequireOrder2_bytes:
         I8[] [39,82,101,113,117,105,114,101,79,114,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.504550123 UTC

[section ""data" . System.Console.GetOpt.$tc'RequireOrder1_closure" {
     System.Console.GetOpt.$tc'RequireOrder1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'RequireOrder2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.505144012 UTC

[section ""data" . System.Console.GetOpt.$tc'RequireOrder_closure" {
     System.Console.GetOpt.$tc'RequireOrder_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'RequireOrder1_closure+1;
         const System.Console.GetOpt.$tc'Permute1_closure+1;
         const 16641478699741903091;
         const 17241976392395699271;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.50581582 UTC

[section ""cstring" . System.Console.GetOpt.$tc'Permute3_bytes" {
     System.Console.GetOpt.$tc'Permute3_bytes:
         I8[] [39,80,101,114,109,117,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.506391104 UTC

[section ""data" . System.Console.GetOpt.$tc'Permute2_closure" {
     System.Console.GetOpt.$tc'Permute2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'Permute3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.506972084 UTC

[section ""data" . System.Console.GetOpt.$tc'Permute_closure" {
     System.Console.GetOpt.$tc'Permute_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'Permute2_closure+1;
         const System.Console.GetOpt.$tc'Permute1_closure+1;
         const 16188869008381252759;
         const 7304126484053682933;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.507608888 UTC

[section ""data" . System.Console.GetOpt.$tc'ReturnInOrder1_closure" {
     System.Console.GetOpt.$tc'ReturnInOrder1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rcsnt_closure+4;
         const System.Console.GetOpt.$tc'Permute1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.508164638 UTC

[section ""cstring" . System.Console.GetOpt.$tc'ReturnInOrder3_bytes" {
     System.Console.GetOpt.$tc'ReturnInOrder3_bytes:
         I8[] [39,82,101,116,117,114,110,73,110,79,114,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.508743009 UTC

[section ""data" . System.Console.GetOpt.$tc'ReturnInOrder2_closure" {
     System.Console.GetOpt.$tc'ReturnInOrder2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'ReturnInOrder3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.509376516 UTC

[section ""data" . System.Console.GetOpt.$tc'ReturnInOrder_closure" {
     System.Console.GetOpt.$tc'ReturnInOrder_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'ReturnInOrder2_closure+1;
         const System.Console.GetOpt.$tc'ReturnInOrder1_closure+4;
         const 11429107017830306662;
         const 977062333259332084;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.510017089 UTC

[section ""cstring" . System.Console.GetOpt.$tcArgDescr2_bytes" {
     System.Console.GetOpt.$tcArgDescr2_bytes:
         I8[] [65,114,103,68,101,115,99,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.510595146 UTC

[section ""data" . System.Console.GetOpt.$tcArgDescr1_closure" {
     System.Console.GetOpt.$tcArgDescr1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcArgDescr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.511193764 UTC

[section ""data" . System.Console.GetOpt.$tcArgDescr_closure" {
     System.Console.GetOpt.$tcArgDescr_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcArgDescr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5371299798435897528;
         const 4777542234116424858;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.511850935 UTC

[section ""data" . $krep10_rcsnw_closure" {
     $krep10_rcsnw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcArgDescr_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.512448186 UTC

[section ""data" . System.Console.GetOpt.$tc'NoArg1_closure" {
     System.Console.GetOpt.$tc'NoArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcsns_closure+2;
         const $krep10_rcsnw_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.513087661 UTC

[section ""cstring" . System.Console.GetOpt.$tc'NoArg3_bytes" {
     System.Console.GetOpt.$tc'NoArg3_bytes:
         I8[] [39,78,111,65,114,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.513688311 UTC

[section ""data" . System.Console.GetOpt.$tc'NoArg2_closure" {
     System.Console.GetOpt.$tc'NoArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'NoArg3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.514304531 UTC

[section ""data" . System.Console.GetOpt.$tc'NoArg_closure" {
     System.Console.GetOpt.$tc'NoArg_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'NoArg2_closure+1;
         const System.Console.GetOpt.$tc'NoArg1_closure+4;
         const 4447437708857855473;
         const 9938854276741266046;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.514972496 UTC

[section ""data" . $krep11_rcsnx_closure" {
     $krep11_rcsnx_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep10_rcsnw_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.515577515 UTC

[section ""data" . System.Console.GetOpt.$tc'OptArg1_closure" {
     System.Console.GetOpt.$tc'OptArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rcsnu_closure+4;
         const $krep11_rcsnx_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.516208325 UTC

[section ""cstring" . System.Console.GetOpt.$tc'OptArg3_bytes" {
     System.Console.GetOpt.$tc'OptArg3_bytes:
         I8[] [39,79,112,116,65,114,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.518954811 UTC

[section ""data" . System.Console.GetOpt.$tc'OptArg2_closure" {
     System.Console.GetOpt.$tc'OptArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'OptArg3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.519562982 UTC

[section ""data" . System.Console.GetOpt.$tc'OptArg_closure" {
     System.Console.GetOpt.$tc'OptArg_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'OptArg2_closure+1;
         const System.Console.GetOpt.$tc'OptArg1_closure+4;
         const 2223072509852051452;
         const 11632957215606156764;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.520194586 UTC

[section ""data" . System.Console.GetOpt.$tc'ReqArg1_closure" {
     System.Console.GetOpt.$tc'ReqArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rcsnt_closure+4;
         const $krep11_rcsnx_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.520772257 UTC

[section ""cstring" . System.Console.GetOpt.$tc'ReqArg3_bytes" {
     System.Console.GetOpt.$tc'ReqArg3_bytes:
         I8[] [39,82,101,113,65,114,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.521371606 UTC

[section ""data" . System.Console.GetOpt.$tc'ReqArg2_closure" {
     System.Console.GetOpt.$tc'ReqArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'ReqArg3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.521934091 UTC

[section ""data" . System.Console.GetOpt.$tc'ReqArg_closure" {
     System.Console.GetOpt.$tc'ReqArg_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'ReqArg2_closure+1;
         const System.Console.GetOpt.$tc'ReqArg1_closure+4;
         const 16427330633826478147;
         const 15179110347223027838;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.522571903 UTC

[section ""cstring" . System.Console.GetOpt.$tcOptDescr2_bytes" {
     System.Console.GetOpt.$tcOptDescr2_bytes:
         I8[] [79,112,116,68,101,115,99,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.523165334 UTC

[section ""data" . System.Console.GetOpt.$tcOptDescr1_closure" {
     System.Console.GetOpt.$tcOptDescr1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcOptDescr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.523740761 UTC

[section ""data" . System.Console.GetOpt.$tcOptDescr_closure" {
     System.Console.GetOpt.$tcOptDescr_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcOptDescr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5602371009437266142;
         const 11022077518484673144;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.524368905 UTC

[section ""data" . $krep12_rcsny_closure" {
     $krep12_rcsny_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcOptDescr_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.524956652 UTC

[section ""data" . $krep13_rcsnz_closure" {
     $krep13_rcsnz_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep12_rcsny_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.525550599 UTC

[section ""data" . $krep14_rcsnA_closure" {
     $krep14_rcsnA_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcsnw_closure+1;
         const $krep13_rcsnz_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.526100397 UTC

[section ""data" . $krep15_rcsnB_closure" {
     $krep15_rcsnB_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcsnr_closure+1;
         const $krep14_rcsnA_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.52667467 UTC

[section ""data" . System.Console.GetOpt.$tc'Option1_closure" {
     System.Console.GetOpt.$tc'Option1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep15_rcsnB_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.527247725 UTC

[section ""cstring" . System.Console.GetOpt.$tc'Option3_bytes" {
     System.Console.GetOpt.$tc'Option3_bytes:
         I8[] [39,79,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.527782914 UTC

[section ""data" . System.Console.GetOpt.$tc'Option2_closure" {
     System.Console.GetOpt.$tc'Option2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'Option3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.528342084 UTC

[section ""data" . System.Console.GetOpt.$tc'Option_closure" {
     System.Console.GetOpt.$tc'Option_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'Option2_closure+1;
         const System.Console.GetOpt.$tc'Option1_closure+4;
         const 10066039264625497029;
         const 5674636120141944492;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.528968771 UTC

[section ""cstring" . System.Console.GetOpt.$tcOptKind2_bytes" {
     System.Console.GetOpt.$tcOptKind2_bytes:
         I8[] [79,112,116,75,105,110,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.529602313 UTC

[section ""data" . System.Console.GetOpt.$tcOptKind1_closure" {
     System.Console.GetOpt.$tcOptKind1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcOptKind2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.530201267 UTC

[section ""data" . System.Console.GetOpt.$tcOptKind_closure" {
     System.Console.GetOpt.$tcOptKind_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcOptKind1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5196380470096609574;
         const 4174335291028142741;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.530841397 UTC

[section ""data" . System.Console.GetOpt.$tc'EndOfOpts1_closure" {
     System.Console.GetOpt.$tc'EndOfOpts1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcOptKind_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.531458641 UTC

[section ""cstring" . System.Console.GetOpt.$tc'EndOfOpts3_bytes" {
     System.Console.GetOpt.$tc'EndOfOpts3_bytes:
         I8[] [39,69,110,100,79,102,79,112,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.5320245 UTC

[section ""data" . System.Console.GetOpt.$tc'EndOfOpts2_closure" {
     System.Console.GetOpt.$tc'EndOfOpts2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'EndOfOpts3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.532591927 UTC

[section ""data" . System.Console.GetOpt.$tc'EndOfOpts_closure" {
     System.Console.GetOpt.$tc'EndOfOpts_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'EndOfOpts2_closure+1;
         const System.Console.GetOpt.$tc'EndOfOpts1_closure+1;
         const 16241379069650497856;
         const 7399561775253491405;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.533211758 UTC

[section ""data" . System.Console.GetOpt.$tc'Opt1_closure" {
     System.Console.GetOpt.$tc'Opt1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcsns_closure+2;
         const System.Console.GetOpt.$tc'EndOfOpts1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.533904456 UTC

[section ""cstring" . System.Console.GetOpt.$tc'Opt3_bytes" {
     System.Console.GetOpt.$tc'Opt3_bytes:
         I8[] [39,79,112,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.534481769 UTC

[section ""data" . System.Console.GetOpt.$tc'Opt2_closure" {
     System.Console.GetOpt.$tc'Opt2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'Opt3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.535050041 UTC

[section ""data" . System.Console.GetOpt.$tc'Opt_closure" {
     System.Console.GetOpt.$tc'Opt_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'Opt2_closure+1;
         const System.Console.GetOpt.$tc'Opt1_closure+4;
         const 2387467460439073880;
         const 875868993959501908;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.53567122 UTC

[section ""data" . System.Console.GetOpt.$tc'NonOpt1_closure" {
     System.Console.GetOpt.$tc'NonOpt1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const System.Console.GetOpt.$tc'EndOfOpts1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.536229085 UTC

[section ""cstring" . System.Console.GetOpt.$tc'UnreqOpt2_bytes" {
     System.Console.GetOpt.$tc'UnreqOpt2_bytes:
         I8[] [39,85,110,114,101,113,79,112,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.536826002 UTC

[section ""data" . System.Console.GetOpt.$tc'UnreqOpt1_closure" {
     System.Console.GetOpt.$tc'UnreqOpt1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'UnreqOpt2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.53745296 UTC

[section ""data" . System.Console.GetOpt.$tc'UnreqOpt_closure" {
     System.Console.GetOpt.$tc'UnreqOpt_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'UnreqOpt1_closure+1;
         const System.Console.GetOpt.$tc'NonOpt1_closure+4;
         const 6747281843324563502;
         const 13162655807375334605;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.538058653 UTC

[section ""cstring" . System.Console.GetOpt.$tc'NonOpt3_bytes" {
     System.Console.GetOpt.$tc'NonOpt3_bytes:
         I8[] [39,78,111,110,79,112,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.538659067 UTC

[section ""data" . System.Console.GetOpt.$tc'NonOpt2_closure" {
     System.Console.GetOpt.$tc'NonOpt2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'NonOpt3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.53925381 UTC

[section ""data" . System.Console.GetOpt.$tc'NonOpt_closure" {
     System.Console.GetOpt.$tc'NonOpt_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'NonOpt2_closure+1;
         const System.Console.GetOpt.$tc'NonOpt1_closure+4;
         const 17187900375792953920;
         const 18196243003688324985;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.539877209 UTC

[section ""cstring" . System.Console.GetOpt.$tc'OptErr2_bytes" {
     System.Console.GetOpt.$tc'OptErr2_bytes:
         I8[] [39,79,112,116,69,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.540427088 UTC

[section ""data" . System.Console.GetOpt.$tc'OptErr1_closure" {
     System.Console.GetOpt.$tc'OptErr1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'OptErr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.541011269 UTC

[section ""data" . System.Console.GetOpt.$tc'OptErr_closure" {
     System.Console.GetOpt.$tc'OptErr_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'OptErr1_closure+1;
         const System.Console.GetOpt.$tc'NonOpt1_closure+4;
         const 13165663139815598038;
         const 5639435123785572420;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.541978467 UTC

[section ""data" . System.Console.GetOpt.Opt_closure" {
     System.Console.GetOpt.Opt_closure:
         const System.Console.GetOpt.Opt_info;
 },
 System.Console.GetOpt.Opt_entry() //  [R2]
         { info_tbl: [(cctpL,
                       label: System.Console.GetOpt.Opt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctpL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cctpP; else goto cctpO;
       cctpP: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.Opt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctpO: // global
           I64[Hp - 8] = System.Console.GetOpt.Opt_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.543031281 UTC

[section ""data" . System.Console.GetOpt.UnreqOpt_closure" {
     System.Console.GetOpt.UnreqOpt_closure:
         const System.Console.GetOpt.UnreqOpt_info;
 },
 System.Console.GetOpt.UnreqOpt_entry() //  [R2]
         { info_tbl: [(cctpV,
                       label: System.Console.GetOpt.UnreqOpt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctpV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cctpZ; else goto cctpY;
       cctpZ: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.UnreqOpt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctpY: // global
           I64[Hp - 8] = System.Console.GetOpt.UnreqOpt_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.544066332 UTC

[section ""data" . System.Console.GetOpt.NonOpt_closure" {
     System.Console.GetOpt.NonOpt_closure:
         const System.Console.GetOpt.NonOpt_info;
 },
 System.Console.GetOpt.NonOpt_entry() //  [R2]
         { info_tbl: [(cctq5,
                       label: System.Console.GetOpt.NonOpt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctq5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cctq9; else goto cctq8;
       cctq9: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.NonOpt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctq8: // global
           I64[Hp - 8] = System.Console.GetOpt.NonOpt_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.544952603 UTC

[section ""data" . System.Console.GetOpt.EndOfOpts_closure" {
     System.Console.GetOpt.EndOfOpts_closure:
         const System.Console.GetOpt.EndOfOpts_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.546149885 UTC

[section ""data" . System.Console.GetOpt.OptErr_closure" {
     System.Console.GetOpt.OptErr_closure:
         const System.Console.GetOpt.OptErr_info;
 },
 System.Console.GetOpt.OptErr_entry() //  [R2]
         { info_tbl: [(cctqf,
                       label: System.Console.GetOpt.OptErr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctqf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cctqj; else goto cctqi;
       cctqj: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.OptErr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctqi: // global
           I64[Hp - 8] = System.Console.GetOpt.OptErr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.547840962 UTC

[section ""data" . System.Console.GetOpt.NoArg_closure" {
     System.Console.GetOpt.NoArg_closure:
         const System.Console.GetOpt.NoArg_info;
 },
 System.Console.GetOpt.NoArg_entry() //  [R2]
         { info_tbl: [(cctqp,
                       label: System.Console.GetOpt.NoArg_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctqp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cctqt; else goto cctqs;
       cctqt: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.NoArg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctqs: // global
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.548861916 UTC

[section ""data" . System.Console.GetOpt.ReqArg_closure" {
     System.Console.GetOpt.ReqArg_closure:
         const System.Console.GetOpt.ReqArg_info;
 },
 System.Console.GetOpt.ReqArg_entry() //  [R2, R3]
         { info_tbl: [(cctqz,
                       label: System.Console.GetOpt.ReqArg_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctqz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctqD; else goto cctqC;
       cctqD: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.ReqArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cctqC: // global
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.549953041 UTC

[section ""data" . System.Console.GetOpt.OptArg_closure" {
     System.Console.GetOpt.OptArg_closure:
         const System.Console.GetOpt.OptArg_info;
 },
 System.Console.GetOpt.OptArg_entry() //  [R2, R3]
         { info_tbl: [(cctqJ,
                       label: System.Console.GetOpt.OptArg_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctqJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctqN; else goto cctqM;
       cctqN: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.OptArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cctqM: // global
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 13;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.551023734 UTC

[section ""data" . System.Console.GetOpt.Option_closure" {
     System.Console.GetOpt.Option_closure:
         const System.Console.GetOpt.Option_info;
 },
 System.Console.GetOpt.Option_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(cctqT,
                       label: System.Console.GetOpt.Option_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctqT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctqX; else goto cctqW;
       cctqX: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.Option_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctqW: // global
           I64[Hp - 32] = System.Console.GetOpt.Option_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.551937141 UTC

[section ""data" . System.Console.GetOpt.RequireOrder_closure" {
     System.Console.GetOpt.RequireOrder_closure:
         const System.Console.GetOpt.RequireOrder_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.55251778 UTC

[section ""data" . System.Console.GetOpt.Permute_closure" {
     System.Console.GetOpt.Permute_closure:
         const System.Console.GetOpt.Permute_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.553212264 UTC

[section ""data" . System.Console.GetOpt.ReturnInOrder_closure" {
     System.Console.GetOpt.ReturnInOrder_closure:
         const System.Console.GetOpt.ReturnInOrder_info;
 },
 System.Console.GetOpt.ReturnInOrder_entry() //  [R2]
         { info_tbl: [(cctr3,
                       label: System.Console.GetOpt.ReturnInOrder_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctr3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cctr7; else goto cctr6;
       cctr7: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.ReturnInOrder_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctr6: // global
           I64[Hp - 8] = System.Console.GetOpt.ReturnInOrder_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.554089718 UTC

[System.Console.GetOpt.Opt_con_entry() //  [R1]
         { info_tbl: [(cctr8,
                       label: System.Console.GetOpt.Opt_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctr8: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.554788137 UTC

[System.Console.GetOpt.UnreqOpt_con_entry() //  [R1]
         { info_tbl: [(cctr9,
                       label: System.Console.GetOpt.UnreqOpt_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,85,110,114,101,113,79,112,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctr9: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.555502688 UTC

[System.Console.GetOpt.NonOpt_con_entry() //  [R1]
         { info_tbl: [(cctra,
                       label: System.Console.GetOpt.NonOpt_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,78,111,110,79,112,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctra: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.556211709 UTC

[System.Console.GetOpt.EndOfOpts_con_entry() //  [R1]
         { info_tbl: [(cctrb,
                       label: System.Console.GetOpt.EndOfOpts_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,69,110,100,79,102,79,112,116,115]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctrb: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.556915258 UTC

[System.Console.GetOpt.OptErr_con_entry() //  [R1]
         { info_tbl: [(cctrc,
                       label: System.Console.GetOpt.OptErr_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116,69,114,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctrc: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.557701205 UTC

[System.Console.GetOpt.NoArg_con_entry() //  [R1]
         { info_tbl: [(cctrd,
                       label: System.Console.GetOpt.NoArg_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,78,111,65,114,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctrd: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.558424272 UTC

[System.Console.GetOpt.ReqArg_con_entry() //  [R1]
         { info_tbl: [(cctre,
                       label: System.Console.GetOpt.ReqArg_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,82,101,113,65,114,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctre: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.559121726 UTC

[System.Console.GetOpt.OptArg_con_entry() //  [R1]
         { info_tbl: [(cctrf,
                       label: System.Console.GetOpt.OptArg_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116,65,114,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctrf: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.559855851 UTC

[System.Console.GetOpt.Option_con_entry() //  [R1]
         { info_tbl: [(cctrg,
                       label: System.Console.GetOpt.Option_con_info
                       rep:HeapRep 4 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctrg: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.560624018 UTC

[System.Console.GetOpt.RequireOrder_con_entry() //  [R1]
         { info_tbl: [(cctrh,
                       label: System.Console.GetOpt.RequireOrder_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,82,101,113,117,105,114,101,79,114,100,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctrh: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.562512555 UTC

[System.Console.GetOpt.Permute_con_entry() //  [R1]
         { info_tbl: [(cctri,
                       label: System.Console.GetOpt.Permute_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,80,101,114,109,117,116,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctri: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.563213838 UTC

[System.Console.GetOpt.ReturnInOrder_con_entry() //  [R1]
         { info_tbl: [(cctrj,
                       label: System.Console.GetOpt.ReturnInOrder_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,82,101,116,117,114,110,73,110,79,114,100,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctrj: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.56391789 UTC

[section ""relreadonly" . ScsR0_srt" {
     ScsR0_srt:
         const GHC.List.maximum2_closure;
         const System.Console.GetOpt.usageInfo_sameLen_closure;
         const System.Console.GetOpt.usageInfo1_closure;
         const lvl10_rcsn5_closure;
         const System.Console.GetOpt.usageInfo_closure;
         const lvl17_rcsnc_closure;
         const System.Console.GetOpt.errUnrec_closure;
         const System.Console.GetOpt.$wgetOpt'_closure;
         const lvl16_rcsnb_closure;
         const lvl24_rcsnk_closure;
         const lvl22_rcsnh_closure;
         const System.Console.GetOpt.getOpt'_closure;
         const System.Console.GetOpt.getOpt_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.564590723 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:20.565848227 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure" {
     System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure:
         const System.Console.GetOpt.$fFunctorArgOrder_$cfmap_info;
 },
 sat_scsnH_entry() //  [R1, R2]
         { info_tbl: [(cctrA,
                       label: sat_scsnH_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctrA: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.$fFunctorArgOrder_$cfmap_entry() //  [R2, R3]
         { info_tbl: [(cctrI,
                       label: System.Console.GetOpt.$fFunctorArgOrder_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctrI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctrJ; else goto cctrK;
       cctrJ: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cctrK: // global
           I64[Sp - 16] = block_cctro_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uctrU; else goto cctrp;
       uctrU: // global
           call _cctro(R1) args: 0, res: 0, upd: 0;
       cctrp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctro() //  [R1]
         { info_tbl: [(cctro,
                       label: block_cctro_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctro: // global
           _cctrH::P64 = R1 & 7;
           if (_cctrH::P64 < 3) goto uctrT; else goto cctrG;
       uctrT: // global
           if (_cctrH::P64 < 2) goto cctrE; else goto cctrF;
       cctrE: // global
           R1 = System.Console.GetOpt.RequireOrder_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cctrF: // global
           R1 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cctrG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctrS; else goto cctrR;
       cctrS: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctrR: // global
           _scsnG::P64 = P64[R1 + 5];
           I64[Hp - 32] = sat_scsnH_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _scsnG::P64;
           I64[Hp - 8] = System.Console.GetOpt.ReturnInOrder_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 5;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.56782447 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure" {
     System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure:
         const System.Console.GetOpt.$fFunctorArgOrder_$c<$_info;
 },
 sat_scsnN_entry() //  [R1]
         { info_tbl: [(cctsb,
                       label: sat_scsnN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctsb: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.$fFunctorArgOrder_$c<$_entry() //  [R2, R3]
         { info_tbl: [(cctsj,
                       label: System.Console.GetOpt.$fFunctorArgOrder_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctsj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctsk; else goto cctsl;
       cctsk: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cctsl: // global
           I64[Sp - 16] = block_cctrZ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uctsv; else goto ccts0;
       uctsv: // global
           call _cctrZ(R1) args: 0, res: 0, upd: 0;
       ccts0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctrZ() //  [R1]
         { info_tbl: [(cctrZ,
                       label: block_cctrZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctrZ: // global
           _cctsi::P64 = R1 & 7;
           if (_cctsi::P64 < 3) goto uctsu; else goto cctsh;
       uctsu: // global
           if (_cctsi::P64 < 2) goto cctsf; else goto cctsg;
       cctsf: // global
           R1 = System.Console.GetOpt.RequireOrder_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cctsg: // global
           R1 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cctsh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cctst; else goto cctss;
       cctst: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctss: // global
           I64[Hp - 24] = sat_scsnN_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = System.Console.GetOpt.ReturnInOrder_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 5;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.569265937 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgOrder_closure" {
     System.Console.GetOpt.$fFunctorArgOrder_closure:
         const GHC.Base.C:Functor_con_info;
         const System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure+2;
         const System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.570661359 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure" {
     System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure:
         const System.Console.GetOpt.$fFunctorArgDescr_$cfmap_info;
 },
 sat_scsnV_entry() //  [R1, R2]
         { info_tbl: [(cctsL,
                       label: sat_scsnV_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctsL: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsnY_entry() //  [R1, R2]
         { info_tbl: [(cctsV,
                       label: sat_scsnY_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctsV: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.$fFunctorArgDescr_$cfmap_entry() //  [R2, R3]
         { info_tbl: [(cctt3,
                       label: System.Console.GetOpt.$fFunctorArgDescr_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctt3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctt4; else goto cctt5;
       cctt4: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cctt5: // global
           I64[Sp - 16] = block_cctsA_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucttl; else goto cctsB;
       ucttl: // global
           call _cctsA(R1) args: 0, res: 0, upd: 0;
       cctsB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctsA() //  [R1]
         { info_tbl: [(cctsA,
                       label: block_cctsA_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctsA: // global
           _scsnO::P64 = P64[Sp + 8];
           _cctt2::P64 = R1 & 7;
           if (_cctt2::P64 < 3) goto ucttk; else goto cctt1;
       ucttk: // global
           if (_cctt2::P64 < 2) goto cctsZ; else goto cctt0;
       cctsZ: // global
           Hp = Hp + 48;
           _scsnQ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccttj; else goto cctta;
       cctta: // global
           _scsnR::P64 = P64[_scsnQ::P64 + 7];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _scsnO::P64;
           P64[Hp - 16] = _scsnR::P64;
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cctt0: // global
           Hp = Hp + 48;
           _scsnQ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccttj; else goto cctte;
       cctte: // global
           _scsnT::P64 = P64[_scsnQ::P64 + 6];
           _scsnU::P64 = P64[_scsnQ::P64 + 14];
           I64[Hp - 40] = sat_scsnV_info;
           P64[Hp - 32] = _scsnO::P64;
           P64[Hp - 24] = _scsnT::P64;
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = _scsnU::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cctt1: // global
           Hp = Hp + 48;
           _scsnQ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccttj; else goto cctti;
       ccttj: // global
           HpAlloc = 48;
           R1 = _scsnQ::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctti: // global
           _scsnW::P64 = P64[_scsnQ::P64 + 5];
           _scsnX::P64 = P64[_scsnQ::P64 + 13];
           I64[Hp - 40] = sat_scsnY_info;
           P64[Hp - 32] = _scsnO::P64;
           P64[Hp - 24] = _scsnW::P64;
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = _scsnX::P64;
           R1 = Hp - 13;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.573291491 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure" {
     System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure:
         const System.Console.GetOpt.$fFunctorArgDescr_$c<$_info;
 },
 sat_scso6_entry() //  [R1]
         { info_tbl: [(ccttB,
                       label: sat_scso6_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccttB: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsoa_entry() //  [R1]
         { info_tbl: [(ccttL,
                       label: sat_scsoa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccttL: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.$fFunctorArgDescr_$c<$_entry() //  [R2, R3]
         { info_tbl: [(ccttT,
                       label: System.Console.GetOpt.$fFunctorArgDescr_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccttT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccttU; else goto ccttV;
       ccttU: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccttV: // global
           I64[Sp - 16] = block_ccttq_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uctua; else goto ccttr;
       uctua: // global
           call _ccttq(R1) args: 0, res: 0, upd: 0;
       ccttr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccttq() //  [R1]
         { info_tbl: [(ccttq,
                       label: block_ccttq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccttq: // global
           _scsnZ::P64 = P64[Sp + 8];
           _ccttS::P64 = R1 & 7;
           if (_ccttS::P64 < 3) goto uctu9; else goto ccttR;
       uctu9: // global
           if (_ccttS::P64 < 2) goto ccttP; else goto ccttQ;
       ccttP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cctu0; else goto ccttZ;
       cctu0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccttZ: // global
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = _scsnZ::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccttQ: // global
           Hp = Hp + 40;
           _scso1::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cctu8; else goto cctu3;
       cctu3: // global
           _scso4::P64 = P64[_scso1::P64 + 14];
           I64[Hp - 32] = sat_scso6_info;
           P64[Hp - 24] = _scsnZ::P64;
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scso4::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccttR: // global
           Hp = Hp + 40;
           _scso1::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cctu8; else goto cctu7;
       cctu8: // global
           HpAlloc = 40;
           R1 = _scso1::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctu7: // global
           _scso8::P64 = P64[_scso1::P64 + 13];
           I64[Hp - 32] = sat_scsoa_info;
           P64[Hp - 24] = _scsnZ::P64;
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scso8::P64;
           R1 = Hp - 13;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.575077084 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgDescr_closure" {
     System.Console.GetOpt.$fFunctorArgDescr_closure:
         const GHC.Base.C:Functor_con_info;
         const System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure+2;
         const System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.576107572 UTC

[section ""data" . System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure" {
     System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure:
         const System.Console.GetOpt.$fFunctorOptDescr_$cfmap_info;
 },
 sat_scsoi_entry() //  [R1]
         { info_tbl: [(cctuo,
                       label: sat_scsoi_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctuo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctup; else goto cctuq;
       cctup: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctuq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.Console.GetOpt.$fFunctorArgDescr_$cfmap_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.$fFunctorOptDescr_$cfmap_entry() //  [R2, R3]
         { info_tbl: [(cctur,
                       label: System.Console.GetOpt.$fFunctorOptDescr_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctur: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctut; else goto cctuu;
       cctut: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cctuu: // global
           I64[Sp - 16] = block_cctuf_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uctuy; else goto cctug;
       uctuy: // global
           call _cctuf(R1) args: 0, res: 0, upd: 0;
       cctug: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctuf() //  [R1]
         { info_tbl: [(cctuf,
                       label: block_cctuf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctuf: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cctux; else goto cctuw;
       cctux: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctuw: // global
           _scsoe::P64 = P64[R1 + 7];
           _scsof::P64 = P64[R1 + 15];
           _scsog::P64 = P64[R1 + 23];
           _scsoh::P64 = P64[R1 + 31];
           I64[Hp - 64] = sat_scsoi_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _scsog::P64;
           I64[Hp - 32] = System.Console.GetOpt.Option_con_info;
           P64[Hp - 24] = _scsoe::P64;
           P64[Hp - 16] = _scsof::P64;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = _scsoh::P64;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.578600046 UTC

[section ""data" . System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure" {
     System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure:
         const System.Console.GetOpt.$fFunctorOptDescr_$c<$_info;
 },
 sat_scsov_entry() //  [R1]
         { info_tbl: [(cctuX,
                       label: sat_scsov_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctuX: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsoz_entry() //  [R1]
         { info_tbl: [(cctv7,
                       label: sat_scsoz_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctv7: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsoA_entry() //  [R1]
         { info_tbl: [(cctvf,
                       label: sat_scsoA_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctvf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cctvg; else goto cctvh;
       cctvg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctvh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cctuM_info;
           _scsoj::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _scsoj::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uctvw; else goto cctuN;
       uctvw: // global
           call _cctuM(R1) args: 0, res: 0, upd: 0;
       cctuN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cctuM() //  [R1]
         { info_tbl: [(cctuM,
                       label: block_cctuM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctuM: // global
           _scsoj::P64 = P64[Sp + 8];
           _cctve::P64 = R1 & 7;
           if (_cctve::P64 < 3) goto uctvv; else goto cctvd;
       uctvv: // global
           if (_cctve::P64 < 2) goto cctvb; else goto cctvc;
       cctvb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cctvm; else goto cctvl;
       cctvm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cctvl: // global
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = _scsoj::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cctvc: // global
           Hp = Hp + 40;
           _scsoq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cctvu; else goto cctvp;
       cctvp: // global
           _scsot::P64 = P64[_scsoq::P64 + 14];
           I64[Hp - 32] = sat_scsov_info;
           P64[Hp - 24] = _scsoj::P64;
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scsot::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cctvd: // global
           Hp = Hp + 40;
           _scsoq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cctvu; else goto cctvt;
       cctvu: // global
           HpAlloc = 40;
           R1 = _scsoq::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cctvt: // global
           _scsox::P64 = P64[_scsoq::P64 + 13];
           I64[Hp - 32] = sat_scsoz_info;
           P64[Hp - 24] = _scsoj::P64;
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scsox::P64;
           R1 = Hp - 13;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.$fFunctorOptDescr_$c<$_entry() //  [R2, R3]
         { info_tbl: [(cctvx,
                       label: System.Console.GetOpt.$fFunctorOptDescr_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctvx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctvz; else goto cctvA;
       cctvz: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cctvA: // global
           I64[Sp - 16] = block_cctuD_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uctvE; else goto cctuE;
       uctvE: // global
           call _cctuD(R1) args: 0, res: 0, upd: 0;
       cctuE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctuD() //  [R1]
         { info_tbl: [(cctuD,
                       label: block_cctuD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctuD: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cctvD; else goto cctvC;
       cctvD: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctvC: // global
           _scsom::P64 = P64[R1 + 7];
           _scson::P64 = P64[R1 + 15];
           _scsoo::P64 = P64[R1 + 23];
           _scsop::P64 = P64[R1 + 31];
           I64[Hp - 64] = sat_scsoA_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _scsoo::P64;
           I64[Hp - 32] = System.Console.GetOpt.Option_con_info;
           P64[Hp - 24] = _scsom::P64;
           P64[Hp - 16] = _scson::P64;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = _scsop::P64;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.580969152 UTC

[section ""data" . System.Console.GetOpt.$fFunctorOptDescr_closure" {
     System.Console.GetOpt.$fFunctorOptDescr_closure:
         const GHC.Base.C:Functor_con_info;
         const System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure+2;
         const System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.581941245 UTC

[section ""data" . lvl_rcsmT_closure" {
     lvl_rcsmT_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.582528526 UTC

[section ""data" . lvl1_rcsmU_closure" {
     lvl1_rcsmU_closure:
         const :_con_info;
         const lvl_rcsmT_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.583507958 UTC

[section ""data" . $wxs_rcsmV_closure" {
     $wxs_rcsmV_closure:
         const $wxs_rcsmV_info;
 },
 sat_scsoE_entry() //  [R1]
         { info_tbl: [(cctvR,
                       label: sat_scsoE_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctvR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctvS; else goto cctvT;
       cctvS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctvT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16] - 1;
           Sp = Sp - 16;
           call $wxs_rcsmV_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 $wxs_rcsmV_entry() //  [R2]
         { info_tbl: [(cctvX,
                       label: $wxs_rcsmV_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctvX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cctw1; else goto cctw0;
       cctw1: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = $wxs_rcsmV_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctw0: // global
           if (R2 == 1) goto cctvW; else goto cctvV;
       cctvW: // global
           Hp = Hp - 48;
           R1 = lvl1_rcsmU_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cctvV: // global
           I64[Hp - 40] = sat_scsoE_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl_rcsmT_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.585230713 UTC

[section ""data" . System.Console.GetOpt.$wgo_closure" {
     System.Console.GetOpt.$wgo_closure:
         const System.Console.GetOpt.$wgo_info;
 },
 sat_scsoM_entry() //  [R1]
         { info_tbl: [(cctwl,
                       label: sat_scsoM_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctwl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctwm; else goto cctwn;
       cctwm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctwn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 24] - 1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.Console.GetOpt.$wgo_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.$wgo_entry() //  [R2, R3]
         { info_tbl: [(cctws,
                       label: System.Console.GetOpt.$wgo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 14} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctws: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctwt; else goto cctwu;
       cctwt: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$wgo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cctwu: // global
           I64[Sp - 16] = block_cctw7_info;
           R1 = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uctwG; else goto cctw8;
       uctwG: // global
           call _cctw7(R1) args: 0, res: 0, upd: 0;
       cctw8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctw7() //  [R1]
         { info_tbl: [(cctw7,
                       label: block_cctw7_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctw7: // global
           _scsoG::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto cctwp; else goto cctwq;
       cctwp: // global
           R2 = _scsoG::I64;
           Sp = Sp + 16;
           call $wxs_rcsmV_entry(R2) args: 8, res: 0, upd: 8;
       cctwq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cctwz; else goto cctwy;
       cctwz: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctwy: // global
           _scsoI::P64 = P64[R1 + 6];
           if (_scsoG::I64 == 1) goto cctwF; else goto cctwC;
       cctwF: // global
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = _scsoI::P64;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _cctwE::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _cctwE::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cctwC: // global
           _scsoJ::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_scsoM_info;
           P64[Hp - 32] = _scsoJ::P64;
           I64[Hp - 24] = _scsoG::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scsoI::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.588386754 UTC

[section ""data" . System.Console.GetOpt.usageInfo_sameLen_closure" {
     System.Console.GetOpt.usageInfo_sameLen_closure:
         const System.Console.GetOpt.usageInfo_sameLen_info;
         const 0;
 },
 n_scsoO_entry() //  [R1]
         { info_tbl: [(cctwV,
                       label: n_scsoO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctwV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cctwW; else goto cctwX;
       cctwW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctwX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctwP_info;
           R3 = P64[R1 + 16];
           R2 = GHC.List.length_closure+1;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctwP() //  [R1]
         { info_tbl: [(cctwP,
                       label: block_cctwP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctwP: // global
           if (R1 & 7 == 1) goto cctwS; else goto cctwT;
       cctwS: // global
           R1 = GHC.List.maximum2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cctwT: // global
           I64[Sp - 8] = block_cctx3_info;
           _scsoR::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsoR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctxi; else goto cctx4;
       uctxi: // global
           call _cctx3(R1) args: 0, res: 0, upd: 0;
       cctx4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cctx3() //  [R1]
         { info_tbl: [(cctx3,
                       label: block_cctx3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctx3: // global
           _scsoR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cctx8_info;
           R3 = I64[R1 + 7];
           R2 = _scsoR::P64;
           Sp = Sp + 8;
           call GHC.List.$wgo_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctx8() //  [R1]
         { info_tbl: [(cctx8,
                       label: block_cctx8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctx8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cctxh; else goto cctxg;
       cctxh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       cctxg: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl25_scsoV_entry() //  [R1]
         { info_tbl: [(cctxq,
                       label: lvl25_scsoV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctxq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctxr; else goto cctxs;
       cctxr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctxs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctxn_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uctxx; else goto cctxo;
       uctxx: // global
           call _cctxn(R1) args: 0, res: 0, upd: 0;
       cctxo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cctxn() //  [R1]
         { info_tbl: [(cctxn,
                       label: block_cctxn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctxn: // global
           R1 = I64[(%MO_S_Lt_W64(0,
                                  I64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsp7_entry() //  [R1]
         { info_tbl: [(cctxV,
                       label: sat_scsp7_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctxV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cctxW; else goto cctxX;
       cctxW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctxX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cctxO_info;
           _scsoO::P64 = P64[R1 + 16];
           _scsp2::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _scsoO::P64;
           P64[Sp - 24] = _scsp2::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uctyb; else goto cctxP;
       uctyb: // global
           call _cctxO(R1) args: 0, res: 0, upd: 0;
       cctxP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cctxO() //  [R1]
         { info_tbl: [(cctxO,
                       label: block_cctxO_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctxO: // global
           if (R1 & 7 == 1) goto cctxS; else goto cctxT;
       cctxS: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cctxT: // global
           _scsoO::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccty3_info;
           R1 = _scsoO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uctya; else goto ccty5;
       uctya: // global
           call _ccty3(R1) args: 0, res: 0, upd: 0;
       ccty5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccty3() //  [R1]
         { info_tbl: [(ccty3,
                       label: block_ccty3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccty3: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call System.Console.GetOpt.$wgo_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 go_scsoZ_entry() //  [R1, R2]
         { info_tbl: [(cctyg,
                       label: go_scsoZ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctyg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cctyh; else goto cctyi;
       cctyh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctyi: // global
           I64[Sp - 32] = block_cctxD_info;
           _scsoZ::P64 = R1;
           _scsoO::P64 = P64[R1 + 7];
           _scsoV::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _scsoO::P64;
           P64[Sp - 16] = _scsoV::P64;
           P64[Sp - 8] = _scsoZ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uctyp; else goto cctxE;
       uctyp: // global
           call _cctxD(R1) args: 0, res: 0, upd: 0;
       cctxE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctxD() //  [R1]
         { info_tbl: [(cctxD,
                       label: block_cctxD_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctxD: // global
           if (R1 & 7 == 1) goto cctyd; else goto cctye;
       cctyd: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cctye: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cctyo; else goto cctyn;
       cctyo: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctyn: // global
           _scsp2::P64 = P64[R1 + 6];
           _scsp3::P64 = P64[R1 + 14];
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = _scsp3::P64;
           I64[Hp - 56] = sat_scsp7_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _scsp2::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.usageInfo_sameLen_entry() //  [R2]
         { info_tbl: [(cctyq,
                       label: System.Console.GetOpt.usageInfo_sameLen_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctyq: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cctyu; else goto cctyt;
       cctyu: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo_sameLen_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctyt: // global
           I64[Hp - 64] = n_scsoO_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl25_scsoV_info;
           _cctwL::P64 = Hp - 64;
           P64[Hp - 24] = _cctwL::P64;
           I64[Hp - 16] = go_scsoZ_info;
           P64[Hp - 8] = _cctwL::P64;
           P64[Hp] = Hp - 40;
           R2 = R2;
           R1 = Hp - 15;
           call go_scsoZ_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.592730309 UTC

[section ""data" . sepBy_rcsmW_closure" {
     sepBy_rcsmW_closure:
         const sepBy_rcsmW_info;
 },
 sat_scsph_entry() //  [R1]
         { info_tbl: [(cctyP,
                       label: sat_scsph_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctyP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctyQ; else goto cctyR;
       cctyQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctyR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call sepBy_rcsmW_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sepBy_rcsmW_entry() //  [R2, R3]
         { info_tbl: [(cctyW,
                       label: sepBy_rcsmW_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctyW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctyX; else goto cctyY;
       cctyX: // global
           R3 = R3;
           R2 = R2;
           R1 = sepBy_rcsmW_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cctyY: // global
           I64[Sp - 16] = block_cctyz_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uctze; else goto cctyA;
       uctze: // global
           call _cctyz(R1) args: 0, res: 0, upd: 0;
       cctyA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctyz() //  [R1]
         { info_tbl: [(cctyz,
                       label: block_cctyz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctyz: // global
           if (R1 & 7 == 1) goto cctyT; else goto cctyU;
       cctyT: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cctyU: // global
           I64[Sp - 8] = block_cctyF_info;
           _scspc::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scspc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctzd; else goto cctyG;
       uctzd: // global
           call _cctyF(R1) args: 0, res: 0, upd: 0;
       cctyG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctyF() //  [R1]
         { info_tbl: [(cctyF,
                       label: block_cctyF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctyF: // global
           _scspc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cctz5; else goto cctz8;
       cctz5: // global
           R1 = _scspc::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cctz8: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cctzb; else goto cctza;
       cctzb: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctza: // global
           I64[Hp - 72] = sat_scsph_info;
           _scsp9::P64 = P64[Sp + 16];
           P64[Hp - 56] = _scsp9::P64;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl_rcsmT_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scsp9::P64;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _scspc::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.59481768 UTC

[section ""data" . lvl2_rcsmX_closure" {
     lvl2_rcsmX_closure:
         const GHC.Types.C#_con_info;
         const 44;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.595413626 UTC

[section ""cstring" . lvl3_rcsmY_bytes" {
     lvl3_rcsmY_bytes:
         I8[] [45]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.595975821 UTC

[section ""cstring" . lvl4_rcsmZ_bytes" {
     lvl4_rcsmZ_bytes:
         I8[] [91]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.596537111 UTC

[section ""cstring" . lvl5_rcsn0_bytes" {
     lvl5_rcsn0_bytes:
         I8[] [93]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.597103483 UTC

[section ""cstring" . lvl6_rcsn1_bytes" {
     lvl6_rcsn1_bytes:
         I8[] [45,45]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.597667233 UTC

[section ""cstring" . lvl7_rcsn2_bytes" {
     lvl7_rcsn2_bytes:
         I8[] [91,61]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.598216736 UTC

[section ""cstring" . lvl8_rcsn3_bytes" {
     lvl8_rcsn3_bytes:
         I8[] [32,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.601782537 UTC

[section ""data" . System.Console.GetOpt.usageInfo_go2_closure" {
     System.Console.GetOpt.usageInfo_go2_closure:
         const System.Console.GetOpt.usageInfo_go2_info;
 },
 sat_scspB_entry() //  [R1]
         { info_tbl: [(cctzF,
                       label: sat_scspB_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctzF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctzG; else goto cctzH;
       cctzG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctzH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_go2_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scspw_entry() //  [R1]
         { info_tbl: [(cctA2,
                       label: sat_scspw_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctA2: // global
           R3 = P64[R1 + 16];
           R2 = lvl8_rcsn3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scspx_entry() //  [R1]
         { info_tbl: [(cctA5,
                       label: sat_scspx_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctA5: // global
           _scspx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctA6; else goto cctA7;
       cctA7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctA9; else goto cctA8;
       cctA9: // global
           HpAlloc = 24;
           goto cctA6;
       cctA6: // global
           R1 = _scspx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctA8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scspx::P64;
           _scspr::P64 = P64[_scspx::P64 + 16];
           _scspu::P64 = P64[_scspx::P64 + 24];
           I64[Hp - 16] = sat_scspw_info;
           P64[Hp] = _scspu::P64;
           R3 = Hp - 16;
           R2 = _scspr::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scspy_entry() //  [R1]
         { info_tbl: [(cctAa,
                       label: sat_scspy_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctAa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cctAe; else goto cctAd;
       cctAe: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctAd: // global
           _scspr::P64 = P64[R1 + 16];
           _scspu::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scspx_info;
           P64[Hp - 8] = _scspr::P64;
           P64[Hp] = _scspu::P64;
           R3 = Hp - 24;
           R2 = lvl8_rcsn3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scspz_entry() //  [R1]
         { info_tbl: [(cctAf,
                       label: sat_scspz_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctAf: // global
           _scspz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctAg; else goto cctAh;
       cctAh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cctAj; else goto cctAi;
       cctAj: // global
           HpAlloc = 32;
           goto cctAg;
       cctAg: // global
           R1 = _scspz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctAi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scspz::P64;
           _scspo::P64 = P64[_scspz::P64 + 16];
           _scspr::P64 = P64[_scspz::P64 + 24];
           _scspu::P64 = P64[_scspz::P64 + 32];
           I64[Hp - 24] = sat_scspy_info;
           P64[Hp - 8] = _scspr::P64;
           P64[Hp] = _scspu::P64;
           R3 = Hp - 24;
           R2 = _scspo::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scspA_entry() //  [R1]
         { info_tbl: [(cctAk,
                       label: sat_scspA_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctAk: // global
           _scspA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctAl; else goto cctAm;
       cctAm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctAo; else goto cctAn;
       cctAo: // global
           HpAlloc = 40;
           goto cctAl;
       cctAl: // global
           R1 = _scspA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctAn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scspA::P64;
           _scspo::P64 = P64[_scspA::P64 + 16];
           _scspr::P64 = P64[_scspA::P64 + 24];
           _scspu::P64 = P64[_scspA::P64 + 32];
           I64[Hp - 32] = sat_scspz_info;
           P64[Hp - 16] = _scspo::P64;
           P64[Hp - 8] = _scspr::P64;
           P64[Hp] = _scspu::P64;
           R3 = Hp - 32;
           R2 = lvl8_rcsn3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.usageInfo_go2_entry() //  [R2, R3, R4]
         { info_tbl: [(cctAt,
                       label: System.Console.GetOpt.usageInfo_go2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctAt: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cctAu; else goto cctAv;
       cctAu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo_go2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctAv: // global
           I64[Sp - 24] = block_cctzj_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uctAY; else goto cctzk;
       uctAY: // global
           call _cctzj(R1) args: 0, res: 0, upd: 0;
       cctzk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctzj() //  [R1]
         { info_tbl: [(cctzj,
                       label: block_cctzj_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctzj: // global
           if (R1 & 7 == 1) goto uctAQ; else goto cctAr;
       uctAQ: // global
           Sp = Sp + 24;
           call _cctAI() args: 0, res: 0, upd: 0;
       cctAr: // global
           I64[Sp - 8] = block_cctzp_info;
           _scspo::P64 = P64[R1 + 6];
           _scspp::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _scspp::P64;
           P64[Sp + 8] = _scspo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctAT; else goto cctzq;
       uctAT: // global
           call _cctzp(R1) args: 0, res: 0, upd: 0;
       cctzq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctzp() //  [R1]
         { info_tbl: [(cctzp,
                       label: block_cctzp_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctzp: // global
           if (R1 & 7 == 1) goto uctAR; else goto cctAE;
       uctAR: // global
           Sp = Sp + 32;
           call _cctAI() args: 0, res: 0, upd: 0;
       cctAE: // global
           I64[Sp - 8] = block_cctzv_info;
           _scspr::P64 = P64[R1 + 6];
           _scsps::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp] = _scsps::P64;
           P64[Sp + 24] = _scspr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctAV; else goto cctzw;
       uctAV: // global
           call _cctzv(R1) args: 0, res: 0, upd: 0;
       cctzw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctzv() //  [R1]
         { info_tbl: [(cctzv,
                       label: block_cctzv_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctzv: // global
           if (R1 & 7 == 1) goto uctAS; else goto cctAK;
       uctAS: // global
           Sp = Sp + 40;
           call _cctAI() args: 0, res: 0, upd: 0;
       cctAK: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cctAN; else goto cctAM;
       cctAN: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctAM: // global
           _scspu::P64 = P64[R1 + 6];
           _scspv::P64 = P64[R1 + 14];
           I64[Hp - 96] = sat_scspB_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _scspv::P64;
           I64[Hp - 56] = sat_scspA_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _scspu::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctAI() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctAI: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.605581493 UTC

[section ""cstring" . lvl9_rcsn4_bytes" {
     lvl9_rcsn4_bytes:
         I8[] [32]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.606323014 UTC

[section ""data" . lvl10_rcsn5_closure" {
     lvl10_rcsn5_closure:
         const lvl10_rcsn5_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_rcsn5_entry() //  [R1]
         { info_tbl: [(cctB5,
                       label: lvl10_rcsn5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctB5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctB6; else goto cctB7;
       cctB6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctB7: // global
           (_cctB2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cctB2::I64 == 0) goto cctB4; else goto cctB3;
       cctB4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cctB3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cctB2::I64;
           R2 = lvl5_rcsn0_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.607208493 UTC

[section ""cstring" . lvl11_rcsn6_bytes" {
     lvl11_rcsn6_bytes:
         I8[] [61]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.611846403 UTC

[section ""data" . System.Console.GetOpt.usageInfo1_closure" {
     System.Console.GetOpt.usageInfo1_closure:
         const System.Console.GetOpt.usageInfo1_info;
         const 0;
 },
 b2_scspL_entry() //  [R1]
         { info_tbl: [(cctBu,
                       label: b2_scspL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctBu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctBv; else goto cctBw;
       cctBv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctBw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctBr_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.usageInfo1_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctBr() //  [R1, R2, R3]
         { info_tbl: [(cctBr,
                       label: block_cctBr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctBr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cctBz; else goto cctBy;
       cctBz: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 24;
       cctBy: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scspX_entry() //  [R1]
         { info_tbl: [(cctBT,
                       label: sat_scspX_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctBT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctBU; else goto cctBV;
       cctBU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctBV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl9_rcsn4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsq1_entry() //  [R1]
         { info_tbl: [(cctC6,
                       label: sat_scsq1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctC6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctC7; else goto cctC8;
       cctC7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctC8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl10_rcsn5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsq2_entry() //  [R1]
         { info_tbl: [(cctC9,
                       label: sat_scsq2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctC9: // global
           _scsq2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctCa; else goto cctCb;
       cctCb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctCd; else goto cctCc;
       cctCd: // global
           HpAlloc = 24;
           goto cctCa;
       cctCa: // global
           R1 = _scsq2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctCc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsq2::P64;
           _scsq0::P64 = P64[_scsq2::P64 + 16];
           I64[Hp - 16] = sat_scsq1_info;
           P64[Hp] = _scsq0::P64;
           R3 = Hp - 16;
           R2 = lvl4_rcsmZ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsq4_entry() //  [R1, R2]
         { info_tbl: [(cctCj,
                       label: sat_scsq4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctCj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctCk; else goto cctCl;
       cctCk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctCl: // global
           I64[Sp - 16] = block_cctBJ_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uctCA; else goto cctBK;
       uctCA: // global
           call _cctBJ(R1) args: 0, res: 0, upd: 0;
       cctBK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctBJ() //  [R1]
         { info_tbl: [(cctBJ,
                       label: block_cctBJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctBJ: // global
           _scspR::P64 = P64[Sp + 8];
           _cctCi::P64 = R1 & 7;
           if (_cctCi::P64 < 3) goto uctCz; else goto cctCh;
       uctCz: // global
           if (_cctCi::P64 < 2) goto cctCf; else goto cctCg;
       cctCf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctCq; else goto cctCp;
       cctCq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctCp: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scspR::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R3 = Hp - 14;
           R2 = lvl3_rcsmY_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cctCg: // global
           Hp = Hp + 48;
           _scspS::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cctCy; else goto cctCt;
       cctCt: // global
           _scspW::P64 = P64[_scspS::P64 + 14];
           I64[Hp - 40] = sat_scspX_info;
           P64[Hp - 24] = _scspW::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scspR::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = lvl3_rcsmY_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cctCh: // global
           Hp = Hp + 48;
           _scspS::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cctCy; else goto cctCx;
       cctCy: // global
           HpAlloc = 48;
           R1 = _scspS::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctCx: // global
           _scsq0::P64 = P64[_scspS::P64 + 13];
           I64[Hp - 40] = sat_scsq2_info;
           P64[Hp - 24] = _scsq0::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scspR::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = lvl3_rcsmY_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sosFmt_scspQ_entry() //  [R1]
         { info_tbl: [(cctCD,
                       label: sosFmt_scspQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctCD: // global
           _scspQ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cctCE; else goto cctCF;
       cctCF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cctCH; else goto cctCG;
       cctCH: // global
           HpAlloc = 16;
           goto cctCE;
       cctCE: // global
           R1 = _scspQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctCG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scspQ::P64;
           _scspH::P64 = P64[_scspQ::P64 + 16];
           _scspJ::P64 = P64[_scspQ::P64 + 24];
           I64[Hp - 8] = sat_scsq4_info;
           P64[Hp] = _scspJ::P64;
           I64[Sp - 24] = block_cctCB_info;
           R3 = _scspH::P64;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctCB() //  [R1]
         { info_tbl: [(cctCB,
                       label: block_cctCB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctCB: // global
           R3 = R1;
           R2 = lvl2_rcsmX_closure+1;
           Sp = Sp + 8;
           call sepBy_rcsmW_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsqc_entry() //  [R1]
         { info_tbl: [(cctD8,
                       label: sat_scsqc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctD8: // global
           R3 = P64[R1 + 16];
           R2 = lvl11_rcsn6_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsqd_entry() //  [R1]
         { info_tbl: [(cctDb,
                       label: sat_scsqd_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctDb: // global
           _scsqd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctDc; else goto cctDd;
       cctDd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctDf; else goto cctDe;
       cctDf: // global
           HpAlloc = 24;
           goto cctDc;
       cctDc: // global
           R1 = _scsqd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctDe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsqd::P64;
           _scsq7::P64 = P64[_scsqd::P64 + 16];
           _scsqb::P64 = P64[_scsqd::P64 + 24];
           I64[Hp - 16] = sat_scsqc_info;
           P64[Hp] = _scsqb::P64;
           R3 = Hp - 16;
           R2 = _scsq7::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsqg_entry() //  [R1]
         { info_tbl: [(cctDu,
                       label: sat_scsqg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctDu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctDv; else goto cctDw;
       cctDv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctDw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl10_rcsn5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsqh_entry() //  [R1]
         { info_tbl: [(cctDx,
                       label: sat_scsqh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctDx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctDB; else goto cctDA;
       cctDB: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctDA: // global
           _scsqf::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scsqg_info;
           P64[Hp] = _scsqf::P64;
           R3 = Hp - 16;
           R2 = lvl7_rcsn2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsqi_entry() //  [R1]
         { info_tbl: [(cctDC,
                       label: sat_scsqi_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctDC: // global
           _scsqi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctDD; else goto cctDE;
       cctDE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctDG; else goto cctDF;
       cctDG: // global
           HpAlloc = 24;
           goto cctDD;
       cctDD: // global
           R1 = _scsqi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctDF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsqi::P64;
           _scsq7::P64 = P64[_scsqi::P64 + 16];
           _scsqf::P64 = P64[_scsqi::P64 + 24];
           I64[Hp - 16] = sat_scsqh_info;
           P64[Hp] = _scsqf::P64;
           R3 = Hp - 16;
           R2 = _scsq7::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsqj_entry() //  [R1, R2]
         { info_tbl: [(cctDM,
                       label: sat_scsqj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctDM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctDN; else goto cctDO;
       cctDN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctDO: // global
           I64[Sp - 16] = block_cctCU_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uctDY; else goto cctCV;
       uctDY: // global
           call _cctCU(R1) args: 0, res: 0, upd: 0;
       cctCV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctCU() //  [R1]
         { info_tbl: [(cctCU,
                       label: block_cctCU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctCU: // global
           _scsq7::P64 = P64[Sp + 8];
           _cctDL::P64 = R1 & 7;
           if (_cctDL::P64 < 3) goto uctDX; else goto cctDK;
       uctDX: // global
           if (_cctDL::P64 < 2) goto cctDI; else goto cctDJ;
       cctDI: // global
           R3 = _scsq7::P64;
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cctDJ: // global
           Hp = Hp + 32;
           _scsq8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cctDW; else goto cctDS;
       cctDS: // global
           _scsqb::P64 = P64[_scsq8::P64 + 14];
           I64[Hp - 24] = sat_scsqd_info;
           P64[Hp - 8] = _scsq7::P64;
           P64[Hp] = _scsqb::P64;
           R3 = Hp - 24;
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cctDK: // global
           Hp = Hp + 32;
           _scsq8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cctDW; else goto cctDV;
       cctDW: // global
           HpAlloc = 32;
           R1 = _scsq8::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctDV: // global
           _scsqf::P64 = P64[_scsq8::P64 + 13];
           I64[Hp - 24] = sat_scsqi_info;
           P64[Hp - 8] = _scsq7::P64;
           P64[Hp] = _scsqf::P64;
           R3 = Hp - 24;
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 losFmt_scsq6_entry() //  [R1]
         { info_tbl: [(cctE1,
                       label: losFmt_scsq6_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctE1: // global
           _scsq6::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cctE2; else goto cctE3;
       cctE3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cctE5; else goto cctE4;
       cctE5: // global
           HpAlloc = 16;
           goto cctE2;
       cctE2: // global
           R1 = _scsq6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctE4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsq6::P64;
           _scspI::P64 = P64[_scsq6::P64 + 16];
           _scspJ::P64 = P64[_scsq6::P64 + 24];
           I64[Hp - 8] = sat_scsqj_info;
           P64[Hp] = _scspJ::P64;
           I64[Sp - 24] = block_cctDZ_info;
           R3 = _scspI::P64;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctDZ() //  [R1]
         { info_tbl: [(cctDZ,
                       label: block_cctDZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctDZ: // global
           R3 = R1;
           R2 = lvl2_rcsmX_closure+1;
           Sp = Sp + 8;
           call sepBy_rcsmW_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 go_scsqH_entry() //  [R1, R2]
         { info_tbl: [(cctEu,
                       label: go_scsqH_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctEu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctEv; else goto cctEw;
       cctEv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctEw: // global
           I64[Sp - 24] = block_cctEn_info;
           _scsqH::P64 = R1;
           _scspL::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _scspL::P64;
           P64[Sp - 8] = _scsqH::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uctEN; else goto cctEo;
       uctEN: // global
           call _cctEn(R1) args: 0, res: 0, upd: 0;
       cctEo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctEn() //  [R1]
         { info_tbl: [(cctEn,
                       label: block_cctEn_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctEn: // global
           if (R1 & 7 == 1) goto cctEr; else goto cctEs;
       cctEr: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cctEs: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cctEM; else goto cctEL;
       cctEM: // global
           HpAlloc = 208;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctEL: // global
           _scsqK::P64 = P64[R1 + 6];
           _scsqL::P64 = P64[R1 + 14];
           I64[Hp - 200] = stg_ap_2_upd_info;
           P64[Hp - 184] = P64[Sp + 16];
           P64[Hp - 176] = _scsqL::P64;
           I64[Hp - 168] = stg_sel_2_upd_info;
           _cctEC::P64 = Hp - 200;
           P64[Hp - 152] = _cctEC::P64;
           I64[Hp - 144] = :_con_info;
           P64[Hp - 136] = _scsqK::P64;
           P64[Hp - 128] = Hp - 168;
           I64[Hp - 120] = stg_sel_1_upd_info;
           P64[Hp - 104] = _cctEC::P64;
           I64[Hp - 96] = :_con_info;
           P64[Hp - 88] = GHC.Types.[]_closure+1;
           P64[Hp - 80] = Hp - 120;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _cctEC::P64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           P64[Hp - 32] = Hp - 72;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 46;
           P64[Hp - 8] = Hp - 94;
           P64[Hp] = Hp - 142;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 ds1_scsqG_entry() //  [R1]
         { info_tbl: [(cctEO,
                       label: ds1_scsqG_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctEO: // global
           _scsqG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctEP; else goto cctEQ;
       cctEQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cctES; else goto cctER;
       cctES: // global
           HpAlloc = 16;
           goto cctEP;
       cctEP: // global
           R1 = _scsqG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctER: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsqG::P64;
           _scspL::P64 = P64[_scsqG::P64 + 16];
           _scsqF::P64 = P64[_scsqG::P64 + 24];
           I64[Hp - 8] = go_scsqH_info;
           P64[Hp] = _scspL::P64;
           R2 = _scsqF::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call go_scsqH_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.usageInfo1_entry() //  [R2]
         { info_tbl: [(cctEX,
                       label: System.Console.GetOpt.usageInfo1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctEX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cctEY; else goto cctEZ;
       cctEY: // global
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctEZ: // global
           I64[Sp - 8] = block_cctBc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctFu; else goto cctBd;
       uctFu: // global
           call _cctBc(R1) args: 0, res: 0, upd: 0;
       cctBd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctBc() //  [R1]
         { info_tbl: [(cctBc,
                       label: block_cctBc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctBc: // global
           if (R1 & 7 == 1) goto cctEU; else goto cctEV;
       cctEU: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       cctEV: // global
           I64[Sp - 8] = block_cctBi_info;
           _scspF::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scspF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctFt; else goto cctBj;
       uctFt: // global
           call _cctBi(R1) args: 0, res: 0, upd: 0;
       cctBj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctBi() //  [R1]
         { info_tbl: [(cctBi,
                       label: block_cctBi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctBi: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cctF5; else goto cctF4;
       cctF5: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctF4: // global
           _scspH::P64 = P64[R1 + 7];
           _scspI::P64 = P64[R1 + 15];
           _scspJ::P64 = P64[R1 + 23];
           _scspK::P64 = P64[R1 + 31];
           I64[Hp - 80] = b2_scspL_info;
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = sosFmt_scspQ_info;
           P64[Hp - 40] = _scspH::P64;
           P64[Hp - 32] = _scspJ::P64;
           I64[Hp - 24] = losFmt_scsq6_info;
           P64[Hp - 8] = _scspI::P64;
           P64[Hp] = _scspJ::P64;
           I64[Sp - 16] = block_cctE9_info;
           R2 = _scspK::P64;
           P64[Sp - 8] = Hp - 24;
           P64[Sp] = Hp - 56;
           P64[Sp + 8] = Hp - 80;
           Sp = Sp - 16;
           call Data.OldList.lines_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cctE9() //  [R1]
         { info_tbl: [(cctE9,
                       label: block_cctE9_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctE9: // global
           _cctBn::P64 = P64[Sp + 24];
           _cctBA::P64 = P64[Sp + 16];
           _cctCL::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cctFe; else goto cctFo;
       cctFe: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cctFh; else goto cctFg;
       cctFh: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctFg: // global
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _cctBn::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = GHC.Types.[]_closure+1;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _cctBn::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _cctCL::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cctBn::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _cctBA::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       cctFo: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto cctFr; else goto cctFq;
       cctFr: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctFq: // global
           _scsqE::P64 = P64[R1 + 6];
           _scsqF::P64 = P64[R1 + 14];
           I64[Hp - 168] = ds1_scsqG_info;
           P64[Hp - 152] = _cctBn::P64;
           P64[Hp - 144] = _scsqF::P64;
           I64[Hp - 136] = stg_sel_2_upd_info;
           _cctEe::P64 = Hp - 168;
           P64[Hp - 120] = _cctEe::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _scsqE::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _cctEe::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _cctCL::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cctEe::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _cctBA::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.621727874 UTC

[section ""data" . System.Console.GetOpt.usageInfo_closure" {
     System.Console.GetOpt.usageInfo_closure:
         const System.Console.GetOpt.usageInfo_info;
         const 0;
 },
 sat_scsru_entry() //  [R1]
         { info_tbl: [(cctFJ,
                       label: sat_scsru_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctFJ: // global
           R2 = P64[R1 + 16];
           call System.Console.GetOpt.usageInfo_sameLen_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsrv_entry() //  [R1]
         { info_tbl: [(cctFO,
                       label: sat_scsrv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctFO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cctFP; else goto cctFQ;
       cctFP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctFQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctFD_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.usageInfo1_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctFD() //  [R1, R2, R3]
         { info_tbl: [(cctFD,
                       label: block_cctFD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctFD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctFT; else goto cctFS;
       cctFT: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 24;
       cctFS: // global
           I64[Hp - 16] = sat_scsru_info;
           P64[Hp] = R2;
           I64[Sp - 16] = block_cctFM_info;
           R2 = R1;
           P64[Sp - 8] = R3;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_sameLen_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctFM() //  [R1]
         { info_tbl: [(cctFM,
                       label: block_cctFM_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctFM: // global
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = R1;
           Sp = Sp + 24;
           call System.Console.GetOpt.usageInfo_go2_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.usageInfo_entry() //  [R2, R3]
         { info_tbl: [(cctFY,
                       label: System.Console.GetOpt.usageInfo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctFY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cctG2; else goto cctG1;
       cctG2: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cctG1: // global
           I64[Hp - 40] = sat_scsrv_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           call Data.OldList.unlines_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.623440272 UTC

[section ""cstring" . lvl12_rcsn7_bytes" {
     lvl12_rcsn7_bytes:
         I8[] [111,112,116,105,111,110,32,96]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.624015671 UTC

[section ""cstring" . lvl13_rcsn8_bytes" {
     lvl13_rcsn8_bytes:
         I8[] [39,32,105,115,32,97,109,98,105,103,117,111,117,115,59,32,99,111,117,108,100,32,98,101,32,111,110,101,32,111,102,58]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.624554497 UTC

[section ""cstring" . lvl14_rcsn9_bytes" {
     lvl14_rcsn9_bytes:
         I8[] [39,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.625111485 UTC

[section ""cstring" . lvl15_rcsna_bytes" {
     lvl15_rcsna_bytes:
         I8[] [10]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.62586442 UTC

[section ""data" . lvl16_rcsnb_closure" {
     lvl16_rcsnb_closure:
         const lvl16_rcsnb_info;
         const 0;
         const 0;
         const 0;
 },
 lvl16_rcsnb_entry() //  [R1]
         { info_tbl: [(cctG9,
                       label: lvl16_rcsnb_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctG9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctGa; else goto cctGb;
       cctGa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctGb: // global
           (_cctG6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cctG6::I64 == 0) goto cctG8; else goto cctG7;
       cctG8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cctG7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cctG6::I64;
           R2 = lvl15_rcsna_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.626742999 UTC

[section ""cstring" . System.Console.GetOpt.getOpt2_bytes" {
     System.Console.GetOpt.getOpt2_bytes:
         I8[] [117,110,114,101,99,111,103,110,105,122,101,100,32,111,112,116,105,111,110,32,96]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.627320373 UTC

[section ""cstring" . System.Console.GetOpt.getOpt1_bytes" {
     System.Console.GetOpt.getOpt1_bytes:
         I8[] [39,10]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.628096413 UTC

[section ""data" . lvl17_rcsnc_closure" {
     lvl17_rcsnc_closure:
         const lvl17_rcsnc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl17_rcsnc_entry() //  [R1]
         { info_tbl: [(cctGi,
                       label: lvl17_rcsnc_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctGi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctGj; else goto cctGk;
       cctGj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctGk: // global
           (_cctGf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cctGf::I64 == 0) goto cctGh; else goto cctGg;
       cctGh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cctGg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cctGf::I64;
           R2 = System.Console.GetOpt.getOpt1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.629405646 UTC

[section ""data" . System.Console.GetOpt.errUnrec_closure" {
     System.Console.GetOpt.errUnrec_closure:
         const System.Console.GetOpt.errUnrec_info;
         const 0;
 },
 sat_scsry_entry() //  [R1]
         { info_tbl: [(cctGt,
                       label: sat_scsry_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctGt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctGu; else goto cctGv;
       cctGu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctGv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl17_rcsnc_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.errUnrec_entry() //  [R2]
         { info_tbl: [(cctGw,
                       label: System.Console.GetOpt.errUnrec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctGw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctGA; else goto cctGz;
       cctGA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = System.Console.GetOpt.errUnrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctGz: // global
           I64[Hp - 16] = sat_scsry_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = System.Console.GetOpt.getOpt2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.630494374 UTC

[section ""cstring" . lvl18_rcsnd_bytes" {
     lvl18_rcsnd_bytes:
         I8[] [39,32,100,111,101,115,110,39,116,32,97,108,108,111,119,32,97,110,32,97,114,103,117,109,101,110,116,10]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.631218118 UTC

[section ""data" . lvl19_rcsne_closure" {
     lvl19_rcsne_closure:
         const lvl19_rcsne_info;
 },
 lvl19_rcsne_entry() //  [R2, R3]
         { info_tbl: [(cctGF,
                       label: lvl19_rcsne_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctGF: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           call Data.OldList.isPrefixOf_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.632247115 UTC

[section ""data" . lvl20_rcsnf_closure" {
     lvl20_rcsnf_closure:
         const lvl20_rcsnf_info;
 },
 lvl20_rcsnf_entry() //  [R2]
         { info_tbl: [(cctGP,
                       label: lvl20_rcsnf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctGP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cctGQ; else goto cctGR;
       cctGQ: // global
           R2 = R2;
           R1 = lvl20_rcsnf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctGR: // global
           I64[Sp - 8] = block_cctGM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctGZ; else goto cctGN;
       uctGZ: // global
           call _cctGM(R1) args: 0, res: 0, upd: 0;
       cctGN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctGM() //  [R1]
         { info_tbl: [(cctGM,
                       label: block_cctGM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctGM: // global
           if (I64[R1 + 7] == 61) goto cctGY; else goto cctGX;
       cctGY: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cctGX: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.633306382 UTC

[section ""data" . lvl21_rcsng_closure" {
     lvl21_rcsng_closure:
         const GHC.Types.C#_con_info;
         const 45;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.634057227 UTC

[section ""data" . lvl22_rcsnh_closure" {
     lvl22_rcsnh_closure:
         const lvl22_rcsnh_info;
         const 0;
         const 0;
         const 0;
 },
 lvl22_rcsnh_entry() //  [R1]
         { info_tbl: [(cctH6,
                       label: lvl22_rcsnh_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctH6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctH7; else goto cctH8;
       cctH7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctH8: // global
           (_cctH3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cctH3::I64 == 0) goto cctH5; else goto cctH4;
       cctH5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cctH4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cctH3::I64;
           R2 = lvl18_rcsnd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.634957166 UTC

[section ""cstring" . lvl23_rcsni_bytes" {
     lvl23_rcsni_bytes:
         I8[] [111,112,116,105,111,110,32,96,45,45]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.636103728 UTC

[section ""data" . poly_go_rcsnj_closure" {
     poly_go_rcsnj_closure:
         const poly_go_rcsnj_info;
 },
 sat_scsrM_entry() //  [R1]
         { info_tbl: [(cctHs,
                       label: sat_scsrM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctHs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctHt; else goto cctHu;
       cctHt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctHu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go_rcsnj_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go_rcsnj_entry() //  [R2]
         { info_tbl: [(cctHz,
                       label: poly_go_rcsnj_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctHz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctHA; else goto cctHB;
       cctHA: // global
           R2 = R2;
           R1 = poly_go_rcsnj_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctHB: // global
           I64[Sp - 8] = block_cctHd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctHK; else goto cctHe;
       uctHK: // global
           call _cctHd(R1) args: 0, res: 0, upd: 0;
       cctHe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctHd() //  [R1]
         { info_tbl: [(cctHd,
                       label: block_cctHd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctHd: // global
           if (R1 & 7 == 1) goto cctHw; else goto cctHx;
       cctHw: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cctHx: // global
           I64[Sp - 8] = block_cctHj_info;
           _scsrG::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsrG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctHJ; else goto cctHk;
       uctHJ: // global
           call _cctHj(R1) args: 0, res: 0, upd: 0;
       cctHk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctHj() //  [R1]
         { info_tbl: [(cctHj,
                       label: block_cctHj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctHj: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cctHI; else goto cctHH;
       cctHI: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctHH: // global
           _scsrK::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_scsrM_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scsrK::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.637868642 UTC

[section ""data" . lvl24_rcsnk_closure" {
     lvl24_rcsnk_closure:
         const lvl24_rcsnk_info;
         const 0;
         const 0;
         const 0;
 },
 lvl24_rcsnk_entry() //  [R1]
         { info_tbl: [(cctHR,
                       label: lvl24_rcsnk_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctHR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctHS; else goto cctHT;
       cctHS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctHT: // global
           (_cctHO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cctHO::I64 == 0) goto cctHQ; else goto cctHP;
       cctHQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cctHP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cctHO::I64;
           R2 = lvl13_rcsn8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.639316503 UTC

[section ""data" . poly_go1_rcsnl_closure" {
     poly_go1_rcsnl_closure:
         const poly_go1_rcsnl_info;
 },
 sat_scsrW_entry() //  [R1]
         { info_tbl: [(cctId,
                       label: sat_scsrW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctId: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctIe; else goto cctIf;
       cctIe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctIf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go1_rcsnl_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go1_rcsnl_entry() //  [R2]
         { info_tbl: [(cctIk,
                       label: poly_go1_rcsnl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctIk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctIl; else goto cctIm;
       cctIl: // global
           R2 = R2;
           R1 = poly_go1_rcsnl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctIm: // global
           I64[Sp - 8] = block_cctHY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctIv; else goto cctHZ;
       uctIv: // global
           call _cctHY(R1) args: 0, res: 0, upd: 0;
       cctHZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctHY() //  [R1]
         { info_tbl: [(cctHY,
                       label: block_cctHY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctHY: // global
           if (R1 & 7 == 1) goto cctIh; else goto cctIi;
       cctIh: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cctIi: // global
           I64[Sp - 8] = block_cctI4_info;
           _scsrQ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsrQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctIu; else goto cctI5;
       uctIu: // global
           call _cctI4(R1) args: 0, res: 0, upd: 0;
       cctI5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctI4() //  [R1]
         { info_tbl: [(cctI4,
                       label: block_cctI4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctI4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cctIt; else goto cctIs;
       cctIt: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctIs: // global
           _scsrU::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_scsrW_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scsrU::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.664489202 UTC

[section ""data" . System.Console.GetOpt.$wgetOpt'_closure" {
     System.Console.GetOpt.$wgetOpt'_closure:
         const System.Console.GetOpt.$wgetOpt'_info;
         const 0;
 },
 ds_scss6_entry() //  [R1]
         { info_tbl: [(cctIY,
                       label: ds_scss6_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctIY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctIZ; else goto cctJ0;
       cctIZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctJ0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctIV_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctIV() //  [R1, R2, R3, R4]
         { info_tbl: [(cctIV,
                       label: block_cctIV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctIV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctJ3; else goto cctJ2;
       cctJ3: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctJ2: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds_scssC_entry() //  [R1]
         { info_tbl: [(cctJd,
                       label: ds_scssC_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctJd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctJe; else goto cctJf;
       cctJe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctJf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctJa_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctJa() //  [R1, R2, R3, R4]
         { info_tbl: [(cctJa,
                       label: block_cctJa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctJa: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctJi; else goto cctJh;
       cctJi: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctJh: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scssI_entry() //  [R1]
         { info_tbl: [(cctJr,
                       label: sat_scssI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctJr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctJs; else goto cctJt;
       cctJs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctJt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds4_scste_entry() //  [R1]
         { info_tbl: [(cctJQ,
                       label: ds4_scste_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctJQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctJR; else goto cctJS;
       cctJR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctJS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctJN_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctJN() //  [R1, R2, R3, R4]
         { info_tbl: [(cctJN,
                       label: block_cctJN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctJN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctJV; else goto cctJU;
       cctJV: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctJU: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds4_scstK_entry() //  [R1]
         { info_tbl: [(cctK5,
                       label: ds4_scstK_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctK5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctK6; else goto cctK7;
       cctK6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctK7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctK2_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctK2() //  [R1, R2, R3, R4]
         { info_tbl: [(cctK2,
                       label: block_cctK2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctK2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctKa; else goto cctK9;
       cctKa: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctK9: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds4_scsui_entry() //  [R1]
         { info_tbl: [(cctKu,
                       label: ds4_scsui_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctKu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctKv; else goto cctKw;
       cctKv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctKw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctKr_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctKr() //  [R1, R2, R3, R4]
         { info_tbl: [(cctKr,
                       label: block_cctKr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctKr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctKz; else goto cctKy;
       cctKz: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctKy: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds4_scsuO_entry() //  [R1]
         { info_tbl: [(cctKJ,
                       label: ds4_scsuO_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctKJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctKK; else goto cctKL;
       cctKK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctKL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctKG_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctKG() //  [R1, R2, R3, R4]
         { info_tbl: [(cctKG,
                       label: block_cctKG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctKG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctKO; else goto cctKN;
       cctKO: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctKN: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go1_scsvA_entry() //  [R1, R2]
         { info_tbl: [(cctLr,
                       label: go1_scsvA_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctLr: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cctLs; else goto uctLR;
       cctLs: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       uctLR: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _cctLh() args: 0, res: 0, upd: 0;
     }
 },
 _cctLh() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctLh: // global
           I64[Sp - 24] = block_cctLk_info;
           R1 = P64[Sp + 8];
           _scsvA::P64 = P64[Sp];
           P64[Sp - 16] = P64[_scsvA::P64 + 7];
           P64[Sp - 8] = P64[_scsvA::P64 + 15];
           I64[Sp + 8] = I64[_scsvA::P64 + 23];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uctLT; else goto cctLl;
       uctLT: // global
           call _cctLk(R1) args: 0, res: 0, upd: 0;
       cctLl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctLk() //  [R1]
         { info_tbl: [(cctLk,
                       label: block_cctLk_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctLk: // global
           if (R1 & 7 == 1) goto cctLo; else goto cctLp;
       cctLo: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cctLp: // global
           I64[Sp] = block_cctLz_info;
           _scsvE::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _scsvE::P64;
           if (R1 & 7 != 0) goto uctLU; else goto cctLB;
       uctLU: // global
           call _cctLz(R1) args: 0, res: 0, upd: 0;
       cctLB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctLz() //  [R1]
         { info_tbl: [(cctLz,
                       label: block_cctLz_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctLz: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cctLH; else goto cctLG;
       cctLH: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctLG: // global
           _scsvE::P64 = P64[Sp + 16];
           if (I64[Sp + 32] == I64[R1 + 7]) goto cctLQ; else goto cctLL;
       cctLQ: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = _scsvE::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cctLL: // global
           Hp = Hp - 56;
           P64[Sp + 32] = _scsvE::P64;
           Sp = Sp + 24;
           call _cctLh() args: 0, res: 0, upd: 0;
     }
 },
 go_scsvp_entry() //  [R1, R2]
         { info_tbl: [(cctM1,
                       label: go_scsvp_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctM1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cctM2; else goto cctM3;
       cctM2: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctM3: // global
           I64[Sp - 24] = block_cctL3_info;
           _scsvp::P64 = R1;
           _scsvo::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _scsvo::I64;
           P64[Sp - 8] = _scsvp::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uctMb; else goto cctL4;
       uctMb: // global
           call _cctL3(R1) args: 0, res: 0, upd: 0;
       cctL4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctL3() //  [R1]
         { info_tbl: [(cctL3,
                       label: block_cctL3_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctL3: // global
           if (R1 & 7 == 1) goto cctLY; else goto cctLZ;
       cctLY: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cctLZ: // global
           I64[Sp - 8] = block_cctL9_info;
           _scsvt::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsvt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctMa; else goto cctLa;
       uctMa: // global
           call _cctL9(R1) args: 0, res: 0, upd: 0;
       cctLa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctL9() //  [R1]
         { info_tbl: [(cctL9,
                       label: block_cctL9_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctL9: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cctM9; else goto cctM8;
       cctM9: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctM8: // global
           _scsvv::P64 = P64[R1 + 7];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = go1_scsvA_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = Hp - 56;
           I64[Hp] = I64[Sp + 16];
           R2 = _scsvv::P64;
           R1 = Hp - 23;
           Sp = Sp + 32;
           call go1_scsvA_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 ds8_scsvM_entry() //  [R1]
         { info_tbl: [(cctMw,
                       label: ds8_scsvM_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctMw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctMx; else goto cctMy;
       cctMx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctMy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctMt_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctMt() //  [R1, R2, R3, R4]
         { info_tbl: [(cctMt,
                       label: block_cctMt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctMt: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctMB; else goto cctMA;
       cctMB: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctMA: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds8_scswl_entry() //  [R1]
         { info_tbl: [(cctMN,
                       label: ds8_scswl_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctMN: // global
           _scswl::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cctMO; else goto cctMP;
       cctMP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cctMR; else goto cctMQ;
       cctMR: // global
           HpAlloc = 48;
           goto cctMO;
       cctMO: // global
           R1 = _scswl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctMQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scswl::P64;
           _scsrX::P64 = P64[_scswl::P64 + 16];
           _scsrY::P64 = P64[_scswl::P64 + 24];
           _scss2::P64 = P64[_scswl::P64 + 32];
           _scsvL::P64 = P64[_scswl::P64 + 40];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl21_rcsng_closure+1;
           P64[Hp - 24] = _scsvL::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = _scss2::P64;
           I64[Sp - 24] = block_cctMK_info;
           R4 = Hp - 14;
           R3 = _scsrY::P64;
           R2 = _scsrX::P64;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctMK() //  [R1, R2, R3, R4]
         { info_tbl: [(cctMK,
                       label: block_cctMK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctMK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctMU; else goto cctMT;
       cctMU: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctMT: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds10_scsx0_entry() //  [R1]
         { info_tbl: [(cctNj,
                       label: ds10_scsx0_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctNj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctNk; else goto cctNl;
       cctNk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctNl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctNg_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctNg() //  [R1, R2, R3, R4]
         { info_tbl: [(cctNg,
                       label: block_cctNg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctNg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctNo; else goto cctNn;
       cctNo: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctNn: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds10_scsxx_entry() //  [R1]
         { info_tbl: [(cctNA,
                       label: ds10_scsxx_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctNA: // global
           _scsxx::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cctNB; else goto cctNC;
       cctNC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cctNE; else goto cctND;
       cctNE: // global
           HpAlloc = 48;
           goto cctNB;
       cctNB: // global
           R1 = _scsxx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctND: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsxx::P64;
           _scsrX::P64 = P64[_scsxx::P64 + 16];
           _scsrY::P64 = P64[_scsxx::P64 + 24];
           _scss2::P64 = P64[_scsxx::P64 + 32];
           _scswZ::P64 = P64[_scsxx::P64 + 40];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl21_rcsng_closure+1;
           P64[Hp - 24] = _scswZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = _scss2::P64;
           I64[Sp - 24] = block_cctNx_info;
           R4 = Hp - 14;
           R3 = _scsrY::P64;
           R2 = _scsrX::P64;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctNx() //  [R1, R2, R3, R4]
         { info_tbl: [(cctNx,
                       label: block_cctNx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctNx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctNH; else goto cctNG;
       cctNH: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctNG: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scsy8_entry() //  [R1]
         { info_tbl: [(cctO1,
                       label: ds11_scsy8_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctO1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctO2; else goto cctO3;
       cctO2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctO3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctNY_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctNY() //  [R1, R2, R3, R4]
         { info_tbl: [(cctNY,
                       label: block_cctNY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctNY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctO6; else goto cctO5;
       cctO6: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctO5: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsyy_entry() //  [R1]
         { info_tbl: [(cctOo,
                       label: sat_scsyy_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctOo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctOp; else goto cctOq;
       cctOp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctOq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl16_rcsnb_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsyz_entry() //  [R1]
         { info_tbl: [(cctOr,
                       label: sat_scsyz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctOr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctOv; else goto cctOu;
       cctOv: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctOu: // global
           _scsy5::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scsyy_info;
           P64[Hp] = _scsy5::P64;
           R3 = Hp - 16;
           R2 = lvl14_rcsn9_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsyA_entry() //  [R1]
         { info_tbl: [(cctOy,
                       label: sat_scsyA_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctOy: // global
           _scsyA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctOz; else goto cctOA;
       cctOA: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cctOC; else goto cctOB;
       cctOC: // global
           HpAlloc = 72;
           goto cctOz;
       cctOz: // global
           R1 = _scsyA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctOB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsyA::P64;
           _scsvm::P64 = P64[_scsyA::P64 + 16];
           _scsy5::P64 = P64[_scsyA::P64 + 24];
           I64[Hp - 64] = sat_scsyz_info;
           P64[Hp - 48] = _scsy5::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scsvm::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl21_rcsng_closure+1;
           P64[Hp] = Hp - 38;
           R3 = Hp - 64;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsyB_entry() //  [R1]
         { info_tbl: [(cctOD,
                       label: sat_scsyB_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctOD: // global
           _scsyB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctOE; else goto cctOF;
       cctOF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cctOH; else goto cctOG;
       cctOH: // global
           HpAlloc = 32;
           goto cctOE;
       cctOE: // global
           R1 = _scsyB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctOG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsyB::P64;
           _scsvm::P64 = P64[_scsyB::P64 + 16];
           _scsy5::P64 = P64[_scsyB::P64 + 24];
           I64[Hp - 24] = sat_scsyA_info;
           P64[Hp - 8] = _scsvm::P64;
           P64[Hp] = _scsy5::P64;
           R3 = Hp - 24;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scsyL_entry() //  [R1]
         { info_tbl: [(cctOR,
                       label: ds11_scsyL_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctOR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctOS; else goto cctOT;
       cctOS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctOT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctOO_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctOO() //  [R1, R2, R3, R4]
         { info_tbl: [(cctOO,
                       label: block_cctOO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctOO: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctOW; else goto cctOV;
       cctOW: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctOV: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scszj_entry() //  [R1]
         { info_tbl: [(cctP6,
                       label: ds11_scszj_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctP6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctP7; else goto cctP8;
       cctP7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctP8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctP3_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctP3() //  [R1, R2, R3, R4]
         { info_tbl: [(cctP3,
                       label: block_cctP3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctP3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctPb; else goto cctPa;
       cctPb: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctPa: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scszS_entry() //  [R1]
         { info_tbl: [(cctPq,
                       label: ds11_scszS_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctPq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctPr; else goto cctPs;
       cctPr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctPs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctPn_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctPn() //  [R1, R2, R3, R4]
         { info_tbl: [(cctPn,
                       label: block_cctPn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctPn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctPv; else goto cctPu;
       cctPv: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctPu: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scszY_entry() //  [R1]
         { info_tbl: [(cctPE,
                       label: sat_scszY_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctPE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctPF; else goto cctPG;
       cctPF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctPG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scsAq_entry() //  [R1]
         { info_tbl: [(cctPQ,
                       label: ds11_scsAq_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctPQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctPR; else goto cctPS;
       cctPR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctPS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctPN_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctPN() //  [R1, R2, R3, R4]
         { info_tbl: [(cctPN,
                       label: block_cctPN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctPN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctPV; else goto cctPU;
       cctPV: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctPU: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsAx_entry() //  [R1]
         { info_tbl: [(cctQ5,
                       label: sat_scsAx_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctQ5: // global
           _scsAx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctQ6; else goto cctQ7;
       cctQ7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cctQ9; else goto cctQ8;
       cctQ9: // global
           HpAlloc = 16;
           goto cctQ6;
       cctQ6: // global
           R1 = _scsAx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctQ8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsAx::P64;
           _scszP::P64 = P64[_scsAx::P64 + 16];
           _scszR::P64 = P64[_scsAx::P64 + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _scszR::P64;
           R2 = Hp - 6;
           R1 = _scszP::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds12_scsAZ_entry() //  [R1]
         { info_tbl: [(cctQj,
                       label: ds12_scsAZ_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctQj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctQk; else goto cctQl;
       cctQk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctQl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctQg_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctQg() //  [R1, R2, R3, R4]
         { info_tbl: [(cctQg,
                       label: block_cctQg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctQg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctQo; else goto cctQn;
       cctQo: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctQn: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsBp_entry() //  [R1]
         { info_tbl: [(cctQE,
                       label: sat_scsBp_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctQE: // global
           _scsBp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctQF; else goto cctQG;
       cctQG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cctQI; else goto cctQH;
       cctQI: // global
           HpAlloc = 48;
           goto cctQF;
       cctQF: // global
           R1 = _scsBp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctQH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsBp::P64;
           _scsvm::P64 = P64[_scsBp::P64 + 16];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scsvm::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl21_rcsng_closure+1;
           P64[Hp] = Hp - 38;
           R3 = lvl24_rcsnk_closure;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsBq_entry() //  [R1]
         { info_tbl: [(cctQJ,
                       label: sat_scsBq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctQJ: // global
           _scsBq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctQK; else goto cctQL;
       cctQL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctQN; else goto cctQM;
       cctQN: // global
           HpAlloc = 24;
           goto cctQK;
       cctQK: // global
           R1 = _scsBq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctQM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsBq::P64;
           _scsvm::P64 = P64[_scsBq::P64 + 16];
           I64[Hp - 16] = sat_scsBp_info;
           P64[Hp] = _scsvm::P64;
           R3 = Hp - 16;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsBr_entry() //  [R1]
         { info_tbl: [(cctQO,
                       label: sat_scsBr_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctQO: // global
           _scsBr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctQP; else goto cctQQ;
       cctQQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctQS; else goto cctQR;
       cctQS: // global
           HpAlloc = 24;
           goto cctQP;
       cctQP: // global
           R1 = _scsBr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctQR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsBr::P64;
           _scsvm::P64 = P64[_scsBr::P64 + 16];
           _scsvJ::P64 = P64[_scsBr::P64 + 24];
           I64[Hp - 16] = sat_scsBq_info;
           P64[Hp] = _scsvm::P64;
           R3 = _scsvJ::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsBC_entry() //  [R1]
         { info_tbl: [(cctR9,
                       label: sat_scsBC_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctR9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctRa; else goto cctRb;
       cctRa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctRb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 ds8_scsBF_entry() //  [R1]
         { info_tbl: [(cctRl,
                       label: ds8_scsBF_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctRl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctRm; else goto cctRn;
       cctRm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctRn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctRi_info;
           R3 = P64[R1 + 16];
           R2 = lvl20_rcsnf_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctRi() //  [R1, R2]
         { info_tbl: [(cctRi,
                       label: block_cctRi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctRi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctRq; else goto cctRp;
       cctRq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cctRp: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_scsBQ_entry() //  [R1, R2]
         { info_tbl: [(cctRK,
                       label: go_scsBQ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctRK: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cctRL; else goto uctSK;
       cctRL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       uctSK: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _cctRA() args: 0, res: 0, upd: 0;
     }
 },
 _cctRA() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctRA: // global
           _scsBP::P64 = P64[P64[Sp] + 7];
           I64[Sp - 8] = block_cctRD_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scsBP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctSP; else goto cctRE;
       uctSP: // global
           call _cctRD(R1) args: 0, res: 0, upd: 0;
       cctRE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctRD() //  [R1]
         { info_tbl: [(cctRD,
                       label: block_cctRD_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctRD: // global
           if (R1 & 7 == 1) goto cctRH; else goto cctRI;
       cctRH: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cctRI: // global
           I64[Sp - 8] = block_cctRS_info;
           _scsBU::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsBU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uctSQ; else goto cctRU;
       uctSQ: // global
           call _cctRS(R1) args: 0, res: 0, upd: 0;
       cctRU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctRS() //  [R1]
         { info_tbl: [(cctRS,
                       label: block_cctRS_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctRS: // global
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _cctSi() args: 0, res: 0, upd: 0;
     }
 },
 _cctSi() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctSi: // global
           _scsC4::P64 = P64[Sp];
           I64[Sp] = block_cctSk_info;
           R1 = _scsC4::P64;
           if (R1 & 7 != 0) goto uctST; else goto cctSm;
       uctST: // global
           call _cctSk(R1) args: 0, res: 0, upd: 0;
       cctSm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctSk() //  [R1]
         { info_tbl: [(cctSk,
                       label: block_cctSk_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctSk: // global
           if (R1 & 7 == 1) goto cctSs; else goto cctSx;
       cctSs: // global
           P64[Sp + 32] = P64[Sp + 16];
           Sp = Sp + 24;
           call _cctRA() args: 0, res: 0, upd: 0;
       cctSx: // global
           I64[Sp - 8] = block_cctSv_info;
           R2 = P64[R1 + 6];
           _scsC7::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _scsC7::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctSv() //  [R1]
         { info_tbl: [(cctSv,
                       label: block_cctSv_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctSv: // global
           if (R1 & 7 == 1) goto cctSD; else goto uctSM;
       cctSD: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _cctSi() args: 0, res: 0, upd: 0;
       uctSM: // global
           Sp = Sp + 8;
           call _cctS8() args: 0, res: 0, upd: 0;
     }
 },
 _cctS8() //  []
         { info_tbl: [(cctS8,
                       label: block_cctS8_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctS8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cctSe; else goto cctSd;
       cctSe: // global
           HpAlloc = 56;
           I64[Sp] = block_cctS8_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cctSd: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 getWith_scsBN_entry() //  [R1, R2]
         { info_tbl: [(cctSX,
                       label: getWith_scsBN_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctSX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cctT1; else goto cctT0;
       cctT1: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cctT0: // global
           _scsrY::P64 = P64[R1 + 7];
           _scsBJ::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = _scsBJ::P64;
           I64[Hp - 8] = go_scsBQ_info;
           P64[Hp] = Hp - 40;
           R2 = _scsrY::P64;
           R1 = Hp - 7;
           call go_scsBQ_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 ds9_scsCc_entry() //  [R1]
         { info_tbl: [(cctTi,
                       label: ds9_scsCc_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctTi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctTj; else goto cctTk;
       cctTj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctTk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctTf_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctTf() //  [R1, R2, R3, R4]
         { info_tbl: [(cctTf,
                       label: block_cctTf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctTf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctTn; else goto cctTm;
       cctTn: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctTm: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsCu_entry() //  [R1]
         { info_tbl: [(cctTu,
                       label: sat_scsCu_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctTu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctTv; else goto cctTw;
       cctTv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctTw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scsCR_entry() //  [R1]
         { info_tbl: [(cctU0,
                       label: ds11_scsCR_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctU0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctU1; else goto cctU2;
       cctU1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctU2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctTX_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctTX() //  [R1, R2, R3, R4]
         { info_tbl: [(cctTX,
                       label: block_cctTX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctTX: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctU5; else goto cctU4;
       cctU5: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctU4: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scsDr_entry() //  [R1]
         { info_tbl: [(cctUm,
                       label: ds15_scsDr_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctUm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctUn; else goto cctUo;
       cctUn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctUo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctUj_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctUj() //  [R1, R2, R3, R4]
         { info_tbl: [(cctUj,
                       label: block_cctUj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctUj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctUr; else goto cctUq;
       cctUr: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctUq: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsDJ_entry() //  [R1]
         { info_tbl: [(cctUy,
                       label: sat_scsDJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctUy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctUz; else goto cctUA;
       cctUz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctUA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scsDX_entry() //  [R1]
         { info_tbl: [(cctUJ,
                       label: ds15_scsDX_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctUJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctUK; else goto cctUL;
       cctUK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctUL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctUG_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctUG() //  [R1, R2, R3, R4]
         { info_tbl: [(cctUG,
                       label: block_cctUG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctUG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctUO; else goto cctUN;
       cctUO: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctUN: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsEl_entry() //  [R1]
         { info_tbl: [(cctUY,
                       label: sat_scsEl_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctUY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctUZ; else goto cctV0;
       cctUZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctV0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl22_rcsnh_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsEm_entry() //  [R1]
         { info_tbl: [(cctV1,
                       label: sat_scsEm_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctV1: // global
           _scsEm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctV2; else goto cctV3;
       cctV3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctV5; else goto cctV4;
       cctV5: // global
           HpAlloc = 24;
           goto cctV2;
       cctV2: // global
           R1 = _scsEm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctV4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsEm::P64;
           _scsBJ::P64 = P64[_scsEm::P64 + 16];
           I64[Hp - 16] = sat_scsEl_info;
           P64[Hp] = _scsBJ::P64;
           R3 = Hp - 16;
           R2 = lvl23_rcsni_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds12_scsEB_entry() //  [R1]
         { info_tbl: [(cctVu,
                       label: ds12_scsEB_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctVu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctVv; else goto cctVw;
       cctVv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctVw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctVr_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctVr() //  [R1, R2, R3, R4]
         { info_tbl: [(cctVr,
                       label: block_cctVr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctVr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctVz; else goto cctVy;
       cctVz: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctVy: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsF0_entry() //  [R1]
         { info_tbl: [(cctVR,
                       label: sat_scsF0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctVR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctVS; else goto cctVT;
       cctVS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctVT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl16_rcsnb_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsF1_entry() //  [R1]
         { info_tbl: [(cctVU,
                       label: sat_scsF1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctVU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctVY; else goto cctVX;
       cctVY: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctVX: // global
           _scsEv::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scsF0_info;
           P64[Hp] = _scsEv::P64;
           R3 = Hp - 16;
           R2 = lvl14_rcsn9_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsF2_entry() //  [R1]
         { info_tbl: [(cctW1,
                       label: sat_scsF2_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctW1: // global
           _scsF2::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cctW2; else goto cctW3;
       cctW3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctW5; else goto cctW4;
       cctW5: // global
           HpAlloc = 24;
           goto cctW2;
       cctW2: // global
           R1 = _scsF2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctW4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsF2::P64;
           _scsBJ::P64 = P64[_scsF2::P64 + 16];
           _scsEv::P64 = P64[_scsF2::P64 + 24];
           I64[Hp - 16] = sat_scsF1_info;
           P64[Hp] = _scsEv::P64;
           I64[Sp - 32] = block_cctVZ_info;
           R3 = _scsBJ::P64;
           R2 = lvl6_rcsn1_bytes;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctVZ() //  [R1]
         { info_tbl: [(cctVZ,
                       label: block_cctVZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctVZ: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsF3_entry() //  [R1]
         { info_tbl: [(cctW9,
                       label: sat_scsF3_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctW9: // global
           _scsF3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctWa; else goto cctWb;
       cctWb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cctWd; else goto cctWc;
       cctWd: // global
           HpAlloc = 32;
           goto cctWa;
       cctWa: // global
           R1 = _scsF3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctWc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsF3::P64;
           _scsBJ::P64 = P64[_scsF3::P64 + 16];
           _scsEv::P64 = P64[_scsF3::P64 + 24];
           I64[Hp - 24] = sat_scsF2_info;
           P64[Hp - 8] = _scsBJ::P64;
           P64[Hp] = _scsEv::P64;
           R3 = Hp - 24;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds12_scsFd_entry() //  [R1]
         { info_tbl: [(cctWn,
                       label: ds12_scsFd_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctWn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctWo; else goto cctWp;
       cctWo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctWp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctWk_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctWk() //  [R1, R2, R3, R4]
         { info_tbl: [(cctWk,
                       label: block_cctWk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctWk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctWs; else goto cctWr;
       cctWs: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctWr: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scsFO_entry() //  [R1]
         { info_tbl: [(cctWJ,
                       label: ds15_scsFO_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctWJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctWK; else goto cctWL;
       cctWK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctWL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctWG_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctWG() //  [R1, R2, R3, R4]
         { info_tbl: [(cctWG,
                       label: block_cctWG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctWG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctWO; else goto cctWN;
       cctWO: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctWN: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsG6_entry() //  [R1]
         { info_tbl: [(cctWV,
                       label: sat_scsG6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctWV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctWW; else goto cctWX;
       cctWW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctWX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scsGk_entry() //  [R1]
         { info_tbl: [(cctX6,
                       label: ds15_scsGk_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctX6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctX7; else goto cctX8;
       cctX7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctX8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctX3_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctX3() //  [R1, R2, R3, R4]
         { info_tbl: [(cctX3,
                       label: block_cctX3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctX3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctXb; else goto cctXa;
       cctXb: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctXa: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds12_scsGW_entry() //  [R1]
         { info_tbl: [(cctXv,
                       label: ds12_scsGW_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctXv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctXw; else goto cctXx;
       cctXw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctXx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctXs_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctXs() //  [R1, R2, R3, R4]
         { info_tbl: [(cctXs,
                       label: block_cctXs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctXs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctXA; else goto cctXz;
       cctXA: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctXz: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsH2_entry() //  [R1]
         { info_tbl: [(cctXJ,
                       label: sat_scsH2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctXJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctXK; else goto cctXL;
       cctXK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctXL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scsHx_entry() //  [R1]
         { info_tbl: [(cctY2,
                       label: ds15_scsHx_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctY2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctY3; else goto cctY4;
       cctY3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctY4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctXZ_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctXZ() //  [R1, R2, R3, R4]
         { info_tbl: [(cctXZ,
                       label: block_cctXZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctXZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctY7; else goto cctY6;
       cctY7: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctY6: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsHP_entry() //  [R1]
         { info_tbl: [(cctYe,
                       label: sat_scsHP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctYe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cctYf; else goto cctYg;
       cctYf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctYg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scsI3_entry() //  [R1]
         { info_tbl: [(cctYp,
                       label: ds15_scsI3_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctYp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctYq; else goto cctYr;
       cctYq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctYr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctYm_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctYm() //  [R1, R2, R3, R4]
         { info_tbl: [(cctYm,
                       label: block_cctYm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctYm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctYu; else goto cctYt;
       cctYu: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctYt: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsIa_entry() //  [R1]
         { info_tbl: [(cctYE,
                       label: sat_scsIa_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctYE: // global
           _scsIa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctYF; else goto cctYG;
       cctYG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cctYI; else goto cctYH;
       cctYI: // global
           HpAlloc = 16;
           goto cctYF;
       cctYF: // global
           R1 = _scsIa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctYH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsIa::P64;
           _scsGQ::P64 = P64[_scsIa::P64 + 16];
           _scsHt::P64 = P64[_scsIa::P64 + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _scsHt::P64;
           R2 = Hp - 6;
           R1 = _scsGQ::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds13_scsIC_entry() //  [R1]
         { info_tbl: [(cctYS,
                       label: ds13_scsIC_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctYS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctYT; else goto cctYU;
       cctYT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctYU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctYP_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctYP() //  [R1, R2, R3, R4]
         { info_tbl: [(cctYP,
                       label: block_cctYP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctYP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cctYX; else goto cctYW;
       cctYX: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       cctYW: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsJ1_entry() //  [R1]
         { info_tbl: [(cctZd,
                       label: sat_scsJ1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctZd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cctZe; else goto cctZf;
       cctZe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctZf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cctZb_info;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 _cctZb() //  [R1]
         { info_tbl: [(cctZb,
                       label: block_cctZb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctZb: // global
           R3 = lvl24_rcsnk_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsJ2_entry() //  [R1]
         { info_tbl: [(cctZj,
                       label: sat_scsJ2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctZj: // global
           _scsJ2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctZk; else goto cctZl;
       cctZl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctZn; else goto cctZm;
       cctZn: // global
           HpAlloc = 24;
           goto cctZk;
       cctZk: // global
           R1 = _scsJ2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctZm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsJ2::P64;
           _scsBJ::P64 = P64[_scsJ2::P64 + 16];
           I64[Hp - 16] = sat_scsJ1_info;
           P64[Hp] = _scsBJ::P64;
           R3 = Hp - 16;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsJ3_entry() //  [R1]
         { info_tbl: [(cctZo,
                       label: sat_scsJ3_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctZo: // global
           _scsJ3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cctZp; else goto cctZq;
       cctZq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctZs; else goto cctZr;
       cctZs: // global
           HpAlloc = 24;
           goto cctZp;
       cctZp: // global
           R1 = _scsJ3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cctZr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsJ3::P64;
           _scsBJ::P64 = P64[_scsJ3::P64 + 16];
           _scsCa::P64 = P64[_scsJ3::P64 + 24];
           I64[Hp - 16] = sat_scsJ2_info;
           P64[Hp] = _scsBJ::P64;
           R3 = _scsCa::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.$wgetOpt'_entry() //  [R2, R3, R4]
         { info_tbl: [(cctZx,
                       label: System.Console.GetOpt.$wgetOpt'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctZx: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cctZy; else goto cctZz;
       cctZy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$wgetOpt'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctZz: // global
           I64[Sp - 24] = block_cctIA_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucu68; else goto cctIB;
       ucu68: // global
           call _cctIA(R1) args: 0, res: 0, upd: 0;
       cctIB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctIA() //  [R1]
         { info_tbl: [(cctIA,
                       label: block_cctIA_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctIA: // global
           if (R1 & 7 == 1) goto cctZu; else goto cctZv;
       cctZu: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctZv: // global
           I64[Sp - 16] = block_cctIG_info;
           _scss0::P64 = R1;
           _scss2::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _scss2::P64;
           P64[Sp] = _scss0::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucu5E; else goto cctIH;
       ucu5E: // global
           call _cctIG(R1) args: 0, res: 0, upd: 0;
       cctIH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctIG() //  [R1]
         { info_tbl: [(cctIG,
                       label: block_cctIG_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctIG: // global
           if (R1 & 7 == 1) goto cctZF; else goto ccu02;
       cctZF: // global
           I64[Sp] = block_cctIL_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto ucu5F; else goto cctIM;
       ucu5F: // global
           call _cctIL(R1) args: 0, res: 0, upd: 0;
       cctIM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccu02: // global
           I64[Sp - 16] = block_cctJw_info;
           _scss3::P64 = R1;
           _scst9::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _scst9::P64;
           P64[Sp] = _scss3::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucu5G; else goto cctJx;
       ucu5G: // global
           call _cctJw(R1) args: 0, res: 0, upd: 0;
       cctJx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctIL() //  [R1]
         { info_tbl: [(cctIL,
                       label: block_cctIL_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctIL: // global
           _scsrY::P64 = P64[Sp + 32];
           _scss2::P64 = P64[Sp + 8];
           _ccu5u::P64 = R1 & 7;
           if (_ccu5u::P64 < 3) goto ucu5v; else goto cctZX;
       ucu5v: // global
           if (_ccu5u::P64 < 2) goto cctZJ; else goto cctZS;
       cctZJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cctZM; else goto cctZL;
       cctZM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctZL: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = _scss2::P64;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctZS: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cctZV; else goto cctZU;
       cctZV: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctZU: // global
           I64[Hp - 144] = ds_scss6_info;
           P64[Hp - 128] = _scsrY::P64;
           P64[Hp - 120] = _scss2::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _cctIR::P64 = Hp - 144;
           P64[Hp - 96] = _cctIR::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _cctIR::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cctIR::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cctIR::P64;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cctZX: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccu00; else goto cctZZ;
       ccu00: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cctZZ: // global
           _scssB::P64 = P64[R1 + 5];
           I64[Hp - 176] = ds_scssC_info;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           P64[Hp - 144] = R1;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _cctJ6::P64 = Hp - 176;
           P64[Hp - 120] = _cctJ6::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _cctJ6::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _cctJ6::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cctJ6::P64;
           I64[Hp - 40] = sat_scssI_info;
           P64[Hp - 24] = _scssB::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R4 = Hp - 136;
           R3 = Hp - 112;
           R2 = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctJw() //  [R1]
         { info_tbl: [(cctJw,
                       label: block_cctJw_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctJw: // global
           if (I64[R1 + 7] == 45) goto ccu0t; else goto ccu05;
       ccu0t: // global
           _scst9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cctKc_info;
           R1 = _scst9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucu5I; else goto cctKd;
       ucu5I: // global
           call _cctKc(R1) args: 0, res: 0, upd: 0;
       cctKd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccu05: // global
           I64[Sp + 8] = block_cctJD_info;
           R1 = P64[Sp + 40];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucu5H; else goto cctJE;
       ucu5H: // global
           call _cctJD(R1) args: 0, res: 0, upd: 0;
       cctJE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctKc() //  [R1]
         { info_tbl: [(cctKc,
                       label: block_cctKc_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctKc: // global
           if (R1 & 7 == 1) goto ccu0w; else goto ccu0V;
       ccu0w: // global
           I64[Sp] = block_cctKh_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto ucu5K; else goto cctKi;
       ucu5K: // global
           call _cctKh(R1) args: 0, res: 0, upd: 0;
       cctKi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccu0V: // global
           I64[Sp + 8] = block_cctKR_info;
           _scsvl::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _scsvl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucu5L; else goto cctKS;
       ucu5L: // global
           call _cctKR(R1) args: 0, res: 0, upd: 0;
       cctKS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctKh() //  [R1]
         { info_tbl: [(cctKh,
                       label: block_cctKh_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctKh: // global
           _scsrY::P64 = P64[Sp + 40];
           _scss2::P64 = P64[Sp + 16];
           _scss3::P64 = P64[Sp + 8];
           _ccu5s::P64 = R1 & 7;
           if (_ccu5s::P64 < 3) goto ucu5x; else goto ccu0Q;
       ucu5x: // global
           if (_ccu5s::P64 < 2) goto ucu5D; else goto ccu0G;
       ucu5D: // global
           Sp = Sp + 24;
           call _ccu0A() args: 0, res: 0, upd: 0;
       ccu0G: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccu0J; else goto ccu0I;
       ccu0J: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu0I: // global
           I64[Hp - 144] = ds4_scsui_info;
           P64[Hp - 128] = _scsrY::P64;
           P64[Hp - 120] = _scss2::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _cctKn::P64 = Hp - 144;
           P64[Hp - 96] = _cctKn::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _cctKn::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cctKn::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scss3::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cctKn::P64;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu0Q: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccu0T; else goto ccu0S;
       ccu0T: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu0S: // global
           _scsuN::P64 = P64[R1 + 5];
           I64[Hp - 184] = ds4_scsuO_info;
           P64[Hp - 168] = _scsrY::P64;
           P64[Hp - 160] = _scss2::P64;
           P64[Hp - 152] = R1;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctKC::P64 = Hp - 184;
           P64[Hp - 128] = _cctKC::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cctKC::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _cctKC::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _cctKC::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _scsuN::P64;
           P64[Hp - 24] = _scss3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctKR() //  [R1]
         { info_tbl: [(cctKR,
                       label: block_cctKR_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctKR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccu0Y; else goto ccu0X;
       ccu0Y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu0X: // global
           _scsvo::I64 = I64[R1 + 7];
           if (_scsvo::I64 == 45) goto ccu2M; else goto ccu10;
       ccu2M: // global
           Hp = Hp - 16;
           I64[Sp] = block_cctQU_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto ucu5N; else goto cctQV;
       ucu5N: // global
           call _cctQU(R1) args: 0, res: 0, upd: 0;
       cctQV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccu10: // global
           I64[Hp - 8] = go_scsvp_info;
           I64[Hp] = _scsvo::I64;
           I64[Sp - 8] = block_cctMc_info;
           R2 = P64[Sp + 32];
           _scsvm::P64 = R1;
           R1 = Hp - 7;
           P64[Sp] = _scsvm::P64;
           Sp = Sp - 8;
           call go_scsvp_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctQU() //  [R1]
         { info_tbl: [(cctQU,
                       label: block_cctQU_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctQU: // global
           if (R1 & 7 == 1) goto ccu2P; else goto ccu2Z;
       ccu2P: // global
           I64[Sp] = block_cctQZ_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto ucu5V; else goto cctR0;
       ucu5V: // global
           call _cctQZ(R1) args: 0, res: 0, upd: 0;
       cctR0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccu2Z: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccu32; else goto ccu31;
       ccu32: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu31: // global
           I64[Hp - 64] = ds8_scsBF_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_sel_0_upd_info;
           _cctRe::P64 = Hp - 64;
           P64[Hp - 24] = _cctRe::P64;
           I64[Hp - 16] = getWith_scsBN_info;
           P64[Hp - 8] = P64[Sp + 32];
           _cctRr::P64 = Hp - 40;
           P64[Hp] = _cctRr::P64;
           I64[Sp - 24] = block_ccu2Y_info;
           R2 = GHC.Base.eqString_closure+2;
           _scsBz::P64 = R1;
           _cctRs::P64 = Hp - 15;
           R1 = _cctRs::P64;
           P64[Sp - 16] = _cctRs::P64;
           P64[Sp - 8] = _scsBz::P64;
           P64[Sp] = _cctRr::P64;
           P64[Sp + 16] = _cctRe::P64;
           Sp = Sp - 24;
           call getWith_scsBN_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctQZ() //  [R1]
         { info_tbl: [(cctQZ,
                       label: block_cctQZ_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctQZ: // global
           _scss2::P64 = P64[Sp + 8];
           if (R1 & 7 == 3) goto ccu2U; else goto ccu2T;
       ccu2U: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccu2X; else goto ccu2W;
       ccu2X: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu2W: // global
           _scsBB::P64 = P64[R1 + 5];
           I64[Hp - 24] = sat_scsBC_info;
           P64[Hp - 8] = _scss2::P64;
           P64[Hp] = _scsBB::P64;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 24;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu2T: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = _scss2::P64;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccu2Y() //  [R1]
         { info_tbl: [(ccu2Y,
                       label: block_ccu2Y_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu2Y: // global
           if (R1 & 7 == 1) goto ccu4Z; else goto ccu57;
       ccu4Z: // global
           _cctRs::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccu4W_info;
           R2 = lvl19_rcsne_closure+2;
           R1 = _cctRs::P64;
           Sp = Sp + 8;
           call getWith_scsBN_entry(R2, R1) args: 8, res: 8, upd: 8;
       ccu57: // global
           P64[Sp + 8] = R1;
           Sp = Sp + 8;
           call _scsC9() args: 0, res: 0, upd: 0;
     }
 },
 _ccu4W() //  [R1]
         { info_tbl: [(ccu4W,
                       label: block_ccu4W_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu4W: // global
           P64[Sp] = R1;
           call _scsC9() args: 0, res: 0, upd: 0;
     }
 },
 _scsC9() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       scsC9: // global
           I64[Sp - 8] = block_cctT7_info;
           R2 = P64[Sp];
           Sp = Sp - 8;
           call poly_go_rcsnj_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cctT7() //  [R1]
         { info_tbl: [(cctT7,
                       label: block_cctT7_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctT7: // global
           if (R1 & 7 == 1) goto ccu38; else goto ccu3d;
       ccu38: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccu3b; else goto ccu3a;
       ccu3b: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu3a: // global
           I64[Hp - 176] = ds9_scsCc_info;
           P64[Hp - 160] = P64[Sp + 48];
           P64[Hp - 152] = P64[Sp + 56];
           P64[Hp - 144] = P64[Sp + 32];
           I64[Hp - 136] = stg_sel_3_upd_info;
           _cctTb::P64 = Hp - 176;
           P64[Hp - 120] = _cctTb::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _cctTb::P64;
           I64[Hp - 88] = sat_scsCu_info;
           P64[Hp - 72] = P64[Sp + 16];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _cctTb::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cctTb::P64;
           R4 = Hp - 136;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu3d: // global
           I64[Sp - 8] = block_cctTz_info;
           _scsCI::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scsCI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucu5W; else goto cctTA;
       ucu5W: // global
           call _cctTz(R1) args: 0, res: 0, upd: 0;
       cctTA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctTz() //  [R1]
         { info_tbl: [(cctTz,
                       label: block_cctTz_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctTz: // global
           if (R1 & 7 == 1) goto ccu3g; else goto ccu4P;
       ccu3g: // global
           I64[Sp + 16] = block_cctTE_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ucu5X; else goto cctTF;
       ucu5X: // global
           call _cctTE(R1) args: 0, res: 0, upd: 0;
       cctTF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccu4P: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccu4S; else goto ccu4R;
       ccu4S: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu4R: // global
           I64[Hp - 184] = ds13_scsIC_info;
           P64[Hp - 168] = P64[Sp + 56];
           P64[Hp - 160] = P64[Sp + 64];
           P64[Hp - 152] = P64[Sp + 40];
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctYL::P64 = Hp - 184;
           P64[Hp - 128] = _cctYL::P64;
           I64[Hp - 120] = sat_scsJ3_info;
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _cctYL::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _cctYL::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cctYL::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctTE() //  [R1]
         { info_tbl: [(cctTE,
                       label: block_cctTE_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctTE: // global
           _cctRe::P64 = P64[Sp + 32];
           _ccu5e::P64 = R1 & 7;
           if (_ccu5e::P64 < 3) goto ucu5z; else goto ccu4r;
       ucu5z: // global
           if (_ccu5e::P64 < 2) goto ccu3j; else goto ccu3L;
       ccu3j: // global
           I64[Sp] = block_cctTJ_info;
           _scsCM::P64 = P64[R1 + 7];
           R1 = _cctRe::P64;
           P64[Sp + 32] = _scsCM::P64;
           if (R1 & 7 != 0) goto ucu5Y; else goto cctTK;
       ucu5Y: // global
           call _cctTJ(R1) args: 0, res: 0, upd: 0;
       cctTK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccu3L: // global
           I64[Sp - 8] = block_cctV8_info;
           _scsEu::P64 = P64[R1 + 6];
           _scsEv::P64 = P64[R1 + 14];
           R1 = _cctRe::P64;
           P64[Sp] = _scsEv::P64;
           P64[Sp + 32] = _scsEu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucu5Z; else goto cctV9;
       ucu5Z: // global
           call _cctV8(R1) args: 0, res: 0, upd: 0;
       cctV9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccu4r: // global
           I64[Sp] = block_cctXe_info;
           _scsGQ::P64 = P64[R1 + 5];
           R1 = _cctRe::P64;
           P64[Sp + 32] = _scsGQ::P64;
           if (R1 & 7 != 0) goto ucu60; else goto cctXf;
       ucu60: // global
           call _cctXe(R1) args: 0, res: 0, upd: 0;
       cctXf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctTJ() //  [R1]
         { info_tbl: [(cctTJ,
                       label: block_cctTJ_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctTJ: // global
           I64[Sp] = block_cctTO_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ucu61; else goto cctTP;
       ucu61: // global
           call _cctTO(R1) args: 0, res: 0, upd: 0;
       cctTP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctTO() //  [R1]
         { info_tbl: [(cctTO,
                       label: block_cctTO_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctTO: // global
           if (R1 & 7 == 1) goto ccu3r; else goto ccu3w;
       ccu3r: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccu3u; else goto ccu3t;
       ccu3u: // global
           HpAlloc = 160;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu3t: // global
           I64[Hp - 152] = ds11_scsCR_info;
           P64[Hp - 136] = P64[Sp + 40];
           P64[Hp - 128] = P64[Sp + 48];
           P64[Hp - 120] = P64[Sp + 24];
           I64[Hp - 112] = stg_sel_3_upd_info;
           _cctTT::P64 = Hp - 152;
           P64[Hp - 96] = _cctTT::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _cctTT::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cctTT::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cctTT::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = Hp - 40;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu3w: // global
           I64[Sp] = block_cctU8_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucu62; else goto cctU9;
       ucu62: // global
           call _cctU8(R1) args: 0, res: 0, upd: 0;
       cctU9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctU8() //  [R1]
         { info_tbl: [(cctU8,
                       label: block_cctU8_info
                       rep:StackRep [False, False, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctU8: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccu3z; else goto ccu3y;
       ccu3z: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu3y: // global
           _scsrX::P64 = P64[Sp + 40];
           _scsrY::P64 = P64[Sp + 48];
           _scss2::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 61) goto ccu3J; else goto ccu3E;
       ccu3J: // global
           I64[Hp - 176] = ds15_scsDX_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           P64[Hp - 144] = _scss2::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _cctUC::P64 = Hp - 176;
           P64[Hp - 120] = _cctUC::P64;
           I64[Hp - 112] = sat_scsEm_info;
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 112;
           P64[Hp - 72] = Hp - 136;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _cctUC::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _cctUC::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cctUC::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu3E: // global
           I64[Hp - 176] = ds15_scsDr_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           P64[Hp - 144] = _scss2::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _cctUf::P64 = Hp - 176;
           P64[Hp - 120] = _cctUf::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _cctUf::P64;
           I64[Hp - 88] = sat_scsDJ_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _cctUf::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cctUf::P64;
           R4 = Hp - 136;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctV8() //  [R1]
         { info_tbl: [(cctV8,
                       label: block_cctV8_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctV8: // global
           I64[Sp] = block_cctVd_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ucu63; else goto cctVe;
       ucu63: // global
           call _cctVd(R1) args: 0, res: 0, upd: 0;
       cctVe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctVd() //  [R1]
         { info_tbl: [(cctVd,
                       label: block_cctVd_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctVd: // global
           if (R1 & 7 == 1) goto ccu3P; else goto ccu4a;
       ccu3P: // global
           I64[Sp] = block_cctVi_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto ucu64; else goto cctVj;
       ucu64: // global
           call _cctVi(R1) args: 0, res: 0, upd: 0;
       cctVj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccu4a: // global
           I64[Sp + 8] = block_cctWv_info;
           _scsFK::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _scsFK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucu65; else goto cctWw;
       ucu65: // global
           call _cctWv(R1) args: 0, res: 0, upd: 0;
       cctWw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctVi() //  [R1]
         { info_tbl: [(cctVi,
                       label: block_cctVi_info
                       rep:StackRep [False, True, False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctVi: // global
           _scsrX::P64 = P64[Sp + 48];
           _scsrY::P64 = P64[Sp + 56];
           if (R1 & 7 == 1) goto ccu3V; else goto ccu45;
       ccu3V: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccu3Y; else goto ccu3X;
       ccu3Y: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu3X: // global
           I64[Hp - 176] = ds12_scsEB_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctVn::P64 = Hp - 176;
           P64[Hp - 128] = _cctVn::P64;
           I64[Hp - 120] = sat_scsF3_info;
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 8];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _cctVn::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _cctVn::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cctVn::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu45: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccu48; else goto ccu47;
       ccu48: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu47: // global
           _scsFb::P64 = P64[R1 + 6];
           _scsFc::P64 = P64[R1 + 14];
           I64[Hp - 184] = ds12_scsFd_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scsFc::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctWg::P64 = Hp - 184;
           P64[Hp - 128] = _cctWg::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cctWg::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _cctWg::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _cctWg::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = _scsFb::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctWv() //  [R1]
         { info_tbl: [(cctWv,
                       label: block_cctWv_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctWv: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccu4d; else goto ccu4c;
       ccu4d: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu4c: // global
           _scsrX::P64 = P64[Sp + 40];
           _scsrY::P64 = P64[Sp + 48];
           _scss2::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 61) goto ccu4p; else goto ccu4i;
       ccu4p: // global
           I64[Hp - 184] = ds15_scsGk_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctWZ::P64 = Hp - 184;
           P64[Hp - 128] = _cctWZ::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cctWZ::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _cctWZ::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _cctWZ::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu4i: // global
           I64[Hp - 184] = ds15_scsFO_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctWC::P64 = Hp - 184;
           P64[Hp - 128] = _cctWC::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cctWC::P64;
           I64[Hp - 96] = sat_scsG6_info;
           P64[Hp - 80] = P64[Sp + 8];
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           I64[Hp - 48] = stg_sel_1_upd_info;
           P64[Hp - 32] = _cctWC::P64;
           I64[Hp - 24] = stg_sel_0_upd_info;
           P64[Hp - 8] = _cctWC::P64;
           _cctWP::P64 = Hp - 144;
           _ccu4e::P64 = Hp - 70;
           _ccu4f::P64 = Hp - 48;
           _ccu4g::P64 = Hp - 24;
           Hp = Hp - 8;
           R4 = _cctWP::P64;
           R3 = _ccu4e::P64;
           R2 = _ccu4f::P64;
           R1 = _ccu4g::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctXe() //  [R1]
         { info_tbl: [(cctXe,
                       label: block_cctXe_info
                       rep:StackRep [False, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctXe: // global
           I64[Sp] = block_cctXj_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ucu66; else goto cctXk;
       ucu66: // global
           call _cctXj(R1) args: 0, res: 0, upd: 0;
       cctXk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctXj() //  [R1]
         { info_tbl: [(cctXj,
                       label: block_cctXj_info
                       rep:StackRep [False, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctXj: // global
           if (R1 & 7 == 1) goto ccu4v; else goto ccu4A;
       ccu4v: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccu4y; else goto ccu4x;
       ccu4y: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu4x: // global
           I64[Hp - 176] = ds12_scsGW_info;
           P64[Hp - 160] = P64[Sp + 40];
           P64[Hp - 152] = P64[Sp + 48];
           P64[Hp - 144] = P64[Sp + 24];
           I64[Hp - 136] = stg_sel_3_upd_info;
           _cctXo::P64 = Hp - 176;
           P64[Hp - 120] = _cctXo::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _cctXo::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _cctXo::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cctXo::P64;
           I64[Hp - 40] = sat_scsH2_info;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R4 = Hp - 136;
           R3 = Hp - 112;
           R2 = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu4A: // global
           I64[Sp] = block_cctXO_info;
           _scsHt::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _scsHt::P64;
           if (R1 & 7 != 0) goto ucu67; else goto cctXP;
       ucu67: // global
           call _cctXO(R1) args: 0, res: 0, upd: 0;
       cctXP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctXO() //  [R1]
         { info_tbl: [(cctXO,
                       label: block_cctXO_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctXO: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccu4D; else goto ccu4C;
       ccu4D: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu4C: // global
           _scsrX::P64 = P64[Sp + 40];
           _scsrY::P64 = P64[Sp + 48];
           _scss2::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 61) goto ccu4K; else goto ccu4I;
       ccu4K: // global
           I64[Hp - 184] = ds15_scsI3_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctYi::P64 = Hp - 184;
           P64[Hp - 128] = _cctYi::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cctYi::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _cctYi::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _cctYi::P64;
           I64[Hp - 48] = sat_scsIa_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu4I: // global
           I64[Hp - 184] = ds15_scsHx_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctXV::P64 = Hp - 184;
           P64[Hp - 128] = _cctXV::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cctXV::P64;
           I64[Hp - 96] = sat_scsHP_info;
           P64[Hp - 80] = P64[Sp + 8];
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           I64[Hp - 48] = stg_sel_1_upd_info;
           P64[Hp - 32] = _cctXV::P64;
           I64[Hp - 24] = stg_sel_0_upd_info;
           P64[Hp - 8] = _cctXV::P64;
           _cctY8::P64 = Hp - 144;
           _ccu4E::P64 = Hp - 70;
           _ccu4F::P64 = Hp - 48;
           _ccu4G::P64 = Hp - 24;
           Hp = Hp - 8;
           R4 = _cctY8::P64;
           R3 = _ccu4E::P64;
           R2 = _ccu4F::P64;
           R1 = _ccu4G::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctMc() //  [R1]
         { info_tbl: [(cctMc,
                       label: block_cctMc_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctMc: // global
           I64[Sp - 8] = block_cctMg_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call poly_go1_rcsnl_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cctMg() //  [R1]
         { info_tbl: [(cctMg,
                       label: block_cctMg_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctMg: // global
           if (R1 & 7 == 1) goto ccu14; else goto ccu1t;
       ccu14: // global
           I64[Sp + 8] = block_cctMk_info;
           R1 = P64[Sp + 32];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucu5O; else goto cctMl;
       ucu5O: // global
           call _cctMk(R1) args: 0, res: 0, upd: 0;
       cctMl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccu1t: // global
           I64[Sp - 8] = block_cctMX_info;
           _scswU::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scswU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucu5P; else goto cctMY;
       ucu5P: // global
           call _cctMX(R1) args: 0, res: 0, upd: 0;
       cctMY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctMk() //  [R1]
         { info_tbl: [(cctMk,
                       label: block_cctMk_info
                       rep:StackRep [False, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctMk: // global
           _scsrX::P64 = P64[Sp + 32];
           _scsrY::P64 = P64[Sp + 40];
           _scss2::P64 = P64[Sp + 16];
           _scsvm::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccu1d; else goto ccu1o;
       ccu1d: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto ccu1g; else goto ccu1f;
       ccu1g: // global
           HpAlloc = 208;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu1f: // global
           I64[Hp - 200] = ds8_scsvM_info;
           P64[Hp - 184] = _scsrX::P64;
           P64[Hp - 176] = _scsrY::P64;
           P64[Hp - 168] = _scss2::P64;
           I64[Hp - 160] = stg_sel_3_upd_info;
           _cctMp::P64 = Hp - 200;
           P64[Hp - 144] = _cctMp::P64;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _cctMp::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _scsvm::P64;
           P64[Hp - 96] = GHC.Types.[]_closure+1;
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = lvl21_rcsng_closure+1;
           P64[Hp - 72] = Hp - 110;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 86;
           P64[Hp - 48] = Hp - 136;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _cctMp::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cctMp::P64;
           R4 = Hp - 160;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu1o: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto ccu1r; else goto ccu1q;
       ccu1r: // global
           HpAlloc = 216;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu1q: // global
           I64[Hp - 208] = ds8_scswl_info;
           P64[Hp - 192] = _scsrX::P64;
           P64[Hp - 184] = _scsrY::P64;
           P64[Hp - 176] = _scss2::P64;
           P64[Hp - 168] = R1;
           I64[Hp - 160] = stg_sel_3_upd_info;
           _cctME::P64 = Hp - 208;
           P64[Hp - 144] = _cctME::P64;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _cctME::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _scsvm::P64;
           P64[Hp - 96] = GHC.Types.[]_closure+1;
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = lvl21_rcsng_closure+1;
           P64[Hp - 72] = Hp - 110;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 86;
           P64[Hp - 48] = Hp - 136;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _cctME::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cctME::P64;
           R4 = Hp - 160;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctMX() //  [R1]
         { info_tbl: [(cctMX,
                       label: block_cctMX_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctMX: // global
           if (R1 & 7 == 1) goto ccu1w; else goto ccu2I;
       ccu1w: // global
           I64[Sp + 16] = block_cctN2_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ucu5Q; else goto cctN3;
       ucu5Q: // global
           call _cctN2(R1) args: 0, res: 0, upd: 0;
       cctN3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccu2I: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccu2L; else goto ccu2K;
       ccu2L: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu2K: // global
           I64[Hp - 184] = ds12_scsAZ_info;
           P64[Hp - 168] = P64[Sp + 48];
           P64[Hp - 160] = P64[Sp + 56];
           P64[Hp - 152] = P64[Sp + 32];
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctQc::P64 = Hp - 184;
           P64[Hp - 128] = _cctQc::P64;
           I64[Hp - 120] = sat_scsBr_info;
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _cctQc::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _cctQc::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cctQc::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctN2() //  [R1]
         { info_tbl: [(cctN2,
                       label: block_cctN2_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctN2: // global
           _scsvl::P64 = P64[Sp + 24];
           _ccu5m::P64 = R1 & 7;
           if (_ccu5m::P64 < 3) goto ucu5y; else goto ccu2s;
       ucu5y: // global
           if (_ccu5m::P64 < 2) goto ccu1z; else goto ccu1U;
       ccu1z: // global
           I64[Sp + 8] = block_cctN7_info;
           _scswY::P64 = P64[R1 + 7];
           R1 = _scsvl::P64;
           P64[Sp + 24] = _scswY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucu5R; else goto cctN8;
       ucu5R: // global
           call _cctN7(R1) args: 0, res: 0, upd: 0;
       cctN8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccu1U: // global
           I64[Sp - 8] = block_cctNK_info;
           _scsy4::P64 = P64[R1 + 6];
           _scsy5::P64 = P64[R1 + 14];
           R1 = _scsvl::P64;
           P64[Sp] = _scsy5::P64;
           P64[Sp + 24] = _scsy4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucu5S; else goto cctNL;
       ucu5S: // global
           call _cctNK(R1) args: 0, res: 0, upd: 0;
       cctNL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccu2s: // global
           I64[Sp + 8] = block_cctPe_info;
           _scszP::P64 = P64[R1 + 5];
           R1 = _scsvl::P64;
           P64[Sp + 24] = _scszP::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucu5T; else goto cctPf;
       ucu5T: // global
           call _cctPe(R1) args: 0, res: 0, upd: 0;
       cctPf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cctN7() //  [R1]
         { info_tbl: [(cctN7,
                       label: block_cctN7_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctN7: // global
           _scsrX::P64 = P64[Sp + 24];
           _scsrY::P64 = P64[Sp + 32];
           _scss2::P64 = P64[Sp + 8];
           _scswY::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto ccu1G; else goto ccu1P;
       ccu1G: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccu1J; else goto ccu1I;
       ccu1J: // global
           HpAlloc = 160;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu1I: // global
           I64[Hp - 152] = ds10_scsx0_info;
           P64[Hp - 136] = _scsrX::P64;
           P64[Hp - 128] = _scsrY::P64;
           P64[Hp - 120] = _scss2::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _cctNc::P64 = Hp - 152;
           P64[Hp - 96] = _cctNc::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _cctNc::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cctNc::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cctNc::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scswY::P64;
           P64[Hp] = Hp - 40;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu1P: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccu1S; else goto ccu1R;
       ccu1S: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu1R: // global
           I64[Hp - 160] = ds10_scsxx_info;
           P64[Hp - 144] = _scsrX::P64;
           P64[Hp - 136] = _scsrY::P64;
           P64[Hp - 128] = _scss2::P64;
           P64[Hp - 120] = R1;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _cctNr::P64 = Hp - 160;
           P64[Hp - 96] = _cctNr::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _cctNr::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cctNr::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cctNr::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scswY::P64;
           P64[Hp] = Hp - 40;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctNK() //  [R1]
         { info_tbl: [(cctNK,
                       label: block_cctNK_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctNK: // global
           _scss2::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto ccu1X; else goto ccu2n;
       ccu1X: // global
           I64[Sp] = block_cctNP_info;
           R1 = _scss2::P64;
           if (R1 & 7 != 0) goto ucu5U; else goto cctNQ;
       ucu5U: // global
           call _cctNP(R1) args: 0, res: 0, upd: 0;
       cctNQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccu2n: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccu2q; else goto ccu2p;
       ccu2q: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu2p: // global
           I64[Hp - 184] = ds11_scszj_info;
           P64[Hp - 168] = P64[Sp + 40];
           P64[Hp - 160] = P64[Sp + 48];
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctOZ::P64 = Hp - 184;
           P64[Hp - 128] = _cctOZ::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cctOZ::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _cctOZ::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _cctOZ::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctNP() //  [R1]
         { info_tbl: [(cctNP,
                       label: block_cctNP_info
                       rep:StackRep [False, False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctNP: // global
           _scsrX::P64 = P64[Sp + 40];
           _scsrY::P64 = P64[Sp + 48];
           if (R1 & 7 == 1) goto ccu23; else goto ccu2d;
       ccu23: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccu26; else goto ccu25;
       ccu26: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu25: // global
           I64[Hp - 176] = ds11_scsy8_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctNU::P64 = Hp - 176;
           P64[Hp - 128] = _cctNU::P64;
           I64[Hp - 120] = sat_scsyB_info;
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 8];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _cctNU::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _cctNU::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cctNU::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu2d: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccu2g; else goto ccu2f;
       ccu2g: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu2f: // global
           _scsyJ::P64 = P64[R1 + 6];
           _scsyK::P64 = P64[R1 + 14];
           I64[Hp - 184] = ds11_scsyL_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scsyK::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctOK::P64 = Hp - 184;
           P64[Hp - 128] = _cctOK::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cctOK::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _cctOK::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _cctOK::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _scsyJ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctPe() //  [R1]
         { info_tbl: [(cctPe,
                       label: block_cctPe_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctPe: // global
           _scsrX::P64 = P64[Sp + 24];
           _scsrY::P64 = P64[Sp + 32];
           _scss2::P64 = P64[Sp + 8];
           _scszP::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto ccu2v; else goto ccu2A;
       ccu2v: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccu2y; else goto ccu2x;
       ccu2y: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu2x: // global
           I64[Hp - 176] = ds11_scszS_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           P64[Hp - 144] = _scss2::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _cctPj::P64 = Hp - 176;
           P64[Hp - 120] = _cctPj::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _cctPj::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _cctPj::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cctPj::P64;
           I64[Hp - 40] = sat_scszY_info;
           P64[Hp - 24] = _scszP::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R4 = Hp - 136;
           R3 = Hp - 112;
           R2 = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu2A: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccu2D; else goto ccu2C;
       ccu2D: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu2C: // global
           I64[Hp - 184] = ds11_scsAq_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctPJ::P64 = Hp - 184;
           P64[Hp - 128] = _cctPJ::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cctPJ::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _cctPJ::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _cctPJ::P64;
           I64[Hp - 48] = sat_scsAx_info;
           P64[Hp - 32] = _scszP::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cctJD() //  [R1]
         { info_tbl: [(cctJD,
                       label: block_cctJD_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cctJD: // global
           _scsrY::P64 = P64[Sp + 40];
           _scss2::P64 = P64[Sp + 16];
           _scss3::P64 = P64[Sp + 8];
           _ccu5t::P64 = R1 & 7;
           if (_ccu5t::P64 < 3) goto ucu5w; else goto ccu0p;
       ucu5w: // global
           if (_ccu5t::P64 < 2) goto ucu5A; else goto ccu0f;
       ucu5A: // global
           Sp = Sp + 24;
           call _ccu0A() args: 0, res: 0, upd: 0;
       ccu0f: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccu0i; else goto ccu0h;
       ccu0i: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu0h: // global
           I64[Hp - 144] = ds4_scste_info;
           P64[Hp - 128] = _scsrY::P64;
           P64[Hp - 120] = _scss2::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _cctJJ::P64 = Hp - 144;
           P64[Hp - 96] = _cctJJ::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _cctJJ::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cctJJ::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scss3::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cctJJ::P64;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu0p: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccu0s; else goto ccu0r;
       ccu0s: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu0r: // global
           _scstJ::P64 = P64[R1 + 5];
           I64[Hp - 184] = ds4_scstK_info;
           P64[Hp - 168] = _scsrY::P64;
           P64[Hp - 160] = _scss2::P64;
           P64[Hp - 152] = R1;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _cctJY::P64 = Hp - 184;
           P64[Hp - 128] = _cctJY::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _cctJY::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _cctJY::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _cctJY::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _scstJ::P64;
           P64[Hp - 24] = _scss3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccu0A() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu0A: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[Sp];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.717581181 UTC

[section ""data" . System.Console.GetOpt.getOpt'_closure" {
     System.Console.GetOpt.getOpt'_closure:
         const System.Console.GetOpt.getOpt'_info;
         const 0;
 },
 System.Console.GetOpt.getOpt'_entry() //  [R2, R3, R4]
         { info_tbl: [(ccu6i,
                       label: System.Console.GetOpt.getOpt'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu6i: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccu6j; else goto ccu6k;
       ccu6j: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.getOpt'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu6k: // global
           I64[Sp - 8] = block_ccu6f_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccu6f() //  [R1, R2, R3, R4]
         { info_tbl: [(ccu6f,
                       label: block_ccu6f_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu6f: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccu6n; else goto ccu6m;
       ccu6n: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
       ccu6m: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.719736143 UTC

[section ""data" . System.Console.GetOpt.getOpt_closure" {
     System.Console.GetOpt.getOpt_closure:
         const System.Console.GetOpt.getOpt_info;
         const 0;
 },
 ds_scsJq_entry() //  [R1]
         { info_tbl: [(ccu6z,
                       label: ds_scsJq_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu6z: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccu6A; else goto ccu6B;
       ccu6A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccu6B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccu6w_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccu6w() //  [R1, R2, R3, R4]
         { info_tbl: [(ccu6w,
                       label: block_ccu6w_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu6w: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccu6E; else goto ccu6D;
       ccu6E: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccu6D: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsJN_entry() //  [R1]
         { info_tbl: [(ccu6S,
                       label: sat_scsJN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu6S: // global
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.errUnrec_closure+1;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsJO_entry() //  [R1]
         { info_tbl: [(ccu6V,
                       label: sat_scsJO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu6V: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccu6W; else goto ccu6X;
       ccu6W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccu6X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccu6J_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucu71; else goto ccu6K;
       ucu71: // global
           call _ccu6J(R1) args: 0, res: 0, upd: 0;
       ccu6K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccu6J() //  [R1]
         { info_tbl: [(ccu6J,
                       label: block_ccu6J_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu6J: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccu70; else goto ccu6Z;
       ccu70: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccu6Z: // global
           _scsJL::P64 = P64[R1 + 23];
           _scsJM::P64 = P64[R1 + 31];
           I64[Hp - 16] = sat_scsJN_info;
           P64[Hp] = _scsJL::P64;
           R3 = Hp - 16;
           R2 = _scsJM::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.getOpt_entry() //  [R2, R3, R4]
         { info_tbl: [(ccu75,
                       label: System.Console.GetOpt.getOpt_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu75: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccu79; else goto ccu78;
       ccu79: // global
           HpAlloc = 144;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.getOpt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu78: // global
           I64[Hp - 136] = ds_scsJq_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           I64[Hp - 96] = sat_scsJO_info;
           _ccu6s::P64 = Hp - 136;
           P64[Hp - 80] = _ccu6s::P64;
           I64[Hp - 72] = stg_sel_1_upd_info;
           P64[Hp - 56] = _ccu6s::P64;
           I64[Hp - 48] = stg_sel_0_upd_info;
           P64[Hp - 32] = _ccu6s::P64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.721994219 UTC

[section ""cstring" . System.Console.GetOpt.$trModule4_bytes" {
     System.Console.GetOpt.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.722601723 UTC

[section ""data" . System.Console.GetOpt.$trModule3_closure" {
     System.Console.GetOpt.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.72320988 UTC

[section ""cstring" . System.Console.GetOpt.$trModule2_bytes" {
     System.Console.GetOpt.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.723781681 UTC

[section ""data" . System.Console.GetOpt.$trModule1_closure" {
     System.Console.GetOpt.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.724392508 UTC

[section ""data" . System.Console.GetOpt.$trModule_closure" {
     System.Console.GetOpt.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Console.GetOpt.$trModule3_closure+1;
         const System.Console.GetOpt.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.725020704 UTC

[section ""data" . $krep_rcsnm_closure" {
     $krep_rcsnm_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.725648872 UTC

[section ""data" . $krep1_rcsnn_closure" {
     $krep1_rcsnn_closure:
         const :_con_info;
         const $krep_rcsnm_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.726256216 UTC

[section ""data" . $krep2_rcsno_closure" {
     $krep2_rcsno_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_rcsnn_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.726852871 UTC

[section ""data" . $krep3_rcsnp_closure" {
     $krep3_rcsnp_closure:
         const :_con_info;
         const $krep2_rcsno_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.727448047 UTC

[section ""data" . $krep4_rcsnq_closure" {
     $krep4_rcsnq_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep3_rcsnp_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.728040551 UTC

[section ""data" . $krep5_rcsnr_closure" {
     $krep5_rcsnr_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep3_rcsnp_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.728651404 UTC

[section ""data" . $krep6_rcsns_closure" {
     $krep6_rcsns_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.729280815 UTC

[section ""data" . $krep7_rcsnt_closure" {
     $krep7_rcsnt_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep6_rcsns_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.72986389 UTC

[section ""data" . $krep8_rcsnu_closure" {
     $krep8_rcsnu_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rcsnq_closure+1;
         const $krep6_rcsns_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.730453904 UTC

[section ""cstring" . System.Console.GetOpt.$tcArgOrder2_bytes" {
     System.Console.GetOpt.$tcArgOrder2_bytes:
         I8[] [65,114,103,79,114,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.731016827 UTC

[section ""data" . System.Console.GetOpt.$tcArgOrder1_closure" {
     System.Console.GetOpt.$tcArgOrder1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcArgOrder2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.731655937 UTC

[section ""data" . System.Console.GetOpt.$tcArgOrder_closure" {
     System.Console.GetOpt.$tcArgOrder_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcArgOrder1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 2821249393238363172;
         const 5857765806309969278;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.732303134 UTC

[section ""data" . $krep9_rcsnv_closure" {
     $krep9_rcsnv_closure:
         const :_con_info;
         const $krep6_rcsns_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.732940575 UTC

[section ""data" . System.Console.GetOpt.$tc'Permute1_closure" {
     System.Console.GetOpt.$tc'Permute1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcArgOrder_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.733522983 UTC

[section ""cstring" . System.Console.GetOpt.$tc'RequireOrder2_bytes" {
     System.Console.GetOpt.$tc'RequireOrder2_bytes:
         I8[] [39,82,101,113,117,105,114,101,79,114,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.734108058 UTC

[section ""data" . System.Console.GetOpt.$tc'RequireOrder1_closure" {
     System.Console.GetOpt.$tc'RequireOrder1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'RequireOrder2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.734691503 UTC

[section ""data" . System.Console.GetOpt.$tc'RequireOrder_closure" {
     System.Console.GetOpt.$tc'RequireOrder_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'RequireOrder1_closure+1;
         const System.Console.GetOpt.$tc'Permute1_closure+1;
         const 16641478699741903091;
         const 17241976392395699271;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.735315614 UTC

[section ""cstring" . System.Console.GetOpt.$tc'Permute3_bytes" {
     System.Console.GetOpt.$tc'Permute3_bytes:
         I8[] [39,80,101,114,109,117,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.735886321 UTC

[section ""data" . System.Console.GetOpt.$tc'Permute2_closure" {
     System.Console.GetOpt.$tc'Permute2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'Permute3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.736509892 UTC

[section ""data" . System.Console.GetOpt.$tc'Permute_closure" {
     System.Console.GetOpt.$tc'Permute_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'Permute2_closure+1;
         const System.Console.GetOpt.$tc'Permute1_closure+1;
         const 16188869008381252759;
         const 7304126484053682933;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.737180667 UTC

[section ""data" . System.Console.GetOpt.$tc'ReturnInOrder1_closure" {
     System.Console.GetOpt.$tc'ReturnInOrder1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rcsnt_closure+4;
         const System.Console.GetOpt.$tc'Permute1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.737809825 UTC

[section ""cstring" . System.Console.GetOpt.$tc'ReturnInOrder3_bytes" {
     System.Console.GetOpt.$tc'ReturnInOrder3_bytes:
         I8[] [39,82,101,116,117,114,110,73,110,79,114,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.738376292 UTC

[section ""data" . System.Console.GetOpt.$tc'ReturnInOrder2_closure" {
     System.Console.GetOpt.$tc'ReturnInOrder2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'ReturnInOrder3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.738988863 UTC

[section ""data" . System.Console.GetOpt.$tc'ReturnInOrder_closure" {
     System.Console.GetOpt.$tc'ReturnInOrder_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'ReturnInOrder2_closure+1;
         const System.Console.GetOpt.$tc'ReturnInOrder1_closure+4;
         const 11429107017830306662;
         const 977062333259332084;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.739639064 UTC

[section ""cstring" . System.Console.GetOpt.$tcArgDescr2_bytes" {
     System.Console.GetOpt.$tcArgDescr2_bytes:
         I8[] [65,114,103,68,101,115,99,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.740247405 UTC

[section ""data" . System.Console.GetOpt.$tcArgDescr1_closure" {
     System.Console.GetOpt.$tcArgDescr1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcArgDescr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.740822865 UTC

[section ""data" . System.Console.GetOpt.$tcArgDescr_closure" {
     System.Console.GetOpt.$tcArgDescr_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcArgDescr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5371299798435897528;
         const 4777542234116424858;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.741804513 UTC

[section ""data" . $krep10_rcsnw_closure" {
     $krep10_rcsnw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcArgDescr_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.742412618 UTC

[section ""data" . System.Console.GetOpt.$tc'NoArg1_closure" {
     System.Console.GetOpt.$tc'NoArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcsns_closure+2;
         const $krep10_rcsnw_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.743001883 UTC

[section ""cstring" . System.Console.GetOpt.$tc'NoArg3_bytes" {
     System.Console.GetOpt.$tc'NoArg3_bytes:
         I8[] [39,78,111,65,114,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.743579257 UTC

[section ""data" . System.Console.GetOpt.$tc'NoArg2_closure" {
     System.Console.GetOpt.$tc'NoArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'NoArg3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.744172295 UTC

[section ""data" . System.Console.GetOpt.$tc'NoArg_closure" {
     System.Console.GetOpt.$tc'NoArg_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'NoArg2_closure+1;
         const System.Console.GetOpt.$tc'NoArg1_closure+4;
         const 4447437708857855473;
         const 9938854276741266046;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.744781383 UTC

[section ""data" . $krep11_rcsnx_closure" {
     $krep11_rcsnx_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep10_rcsnw_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.745406548 UTC

[section ""data" . System.Console.GetOpt.$tc'OptArg1_closure" {
     System.Console.GetOpt.$tc'OptArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rcsnu_closure+4;
         const $krep11_rcsnx_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.745996464 UTC

[section ""cstring" . System.Console.GetOpt.$tc'OptArg3_bytes" {
     System.Console.GetOpt.$tc'OptArg3_bytes:
         I8[] [39,79,112,116,65,114,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.748544412 UTC

[section ""data" . System.Console.GetOpt.$tc'OptArg2_closure" {
     System.Console.GetOpt.$tc'OptArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'OptArg3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.749131175 UTC

[section ""data" . System.Console.GetOpt.$tc'OptArg_closure" {
     System.Console.GetOpt.$tc'OptArg_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'OptArg2_closure+1;
         const System.Console.GetOpt.$tc'OptArg1_closure+4;
         const 2223072509852051452;
         const 11632957215606156764;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.749740856 UTC

[section ""data" . System.Console.GetOpt.$tc'ReqArg1_closure" {
     System.Console.GetOpt.$tc'ReqArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rcsnt_closure+4;
         const $krep11_rcsnx_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.750302194 UTC

[section ""cstring" . System.Console.GetOpt.$tc'ReqArg3_bytes" {
     System.Console.GetOpt.$tc'ReqArg3_bytes:
         I8[] [39,82,101,113,65,114,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.750850978 UTC

[section ""data" . System.Console.GetOpt.$tc'ReqArg2_closure" {
     System.Console.GetOpt.$tc'ReqArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'ReqArg3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.75139959 UTC

[section ""data" . System.Console.GetOpt.$tc'ReqArg_closure" {
     System.Console.GetOpt.$tc'ReqArg_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'ReqArg2_closure+1;
         const System.Console.GetOpt.$tc'ReqArg1_closure+4;
         const 16427330633826478147;
         const 15179110347223027838;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.752013627 UTC

[section ""cstring" . System.Console.GetOpt.$tcOptDescr2_bytes" {
     System.Console.GetOpt.$tcOptDescr2_bytes:
         I8[] [79,112,116,68,101,115,99,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.752575487 UTC

[section ""data" . System.Console.GetOpt.$tcOptDescr1_closure" {
     System.Console.GetOpt.$tcOptDescr1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcOptDescr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.753161157 UTC

[section ""data" . System.Console.GetOpt.$tcOptDescr_closure" {
     System.Console.GetOpt.$tcOptDescr_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcOptDescr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5602371009437266142;
         const 11022077518484673144;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.753838704 UTC

[section ""data" . $krep12_rcsny_closure" {
     $krep12_rcsny_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcOptDescr_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.754397313 UTC

[section ""data" . $krep13_rcsnz_closure" {
     $krep13_rcsnz_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep12_rcsny_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.754983059 UTC

[section ""data" . $krep14_rcsnA_closure" {
     $krep14_rcsnA_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcsnw_closure+1;
         const $krep13_rcsnz_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.755577496 UTC

[section ""data" . $krep15_rcsnB_closure" {
     $krep15_rcsnB_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcsnr_closure+1;
         const $krep14_rcsnA_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.756165553 UTC

[section ""data" . System.Console.GetOpt.$tc'Option1_closure" {
     System.Console.GetOpt.$tc'Option1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep15_rcsnB_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.756772263 UTC

[section ""cstring" . System.Console.GetOpt.$tc'Option3_bytes" {
     System.Console.GetOpt.$tc'Option3_bytes:
         I8[] [39,79,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.757531869 UTC

[section ""data" . System.Console.GetOpt.$tc'Option2_closure" {
     System.Console.GetOpt.$tc'Option2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'Option3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.758206513 UTC

[section ""data" . System.Console.GetOpt.$tc'Option_closure" {
     System.Console.GetOpt.$tc'Option_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'Option2_closure+1;
         const System.Console.GetOpt.$tc'Option1_closure+4;
         const 10066039264625497029;
         const 5674636120141944492;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.758839475 UTC

[section ""cstring" . System.Console.GetOpt.$tcOptKind2_bytes" {
     System.Console.GetOpt.$tcOptKind2_bytes:
         I8[] [79,112,116,75,105,110,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.759407752 UTC

[section ""data" . System.Console.GetOpt.$tcOptKind1_closure" {
     System.Console.GetOpt.$tcOptKind1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcOptKind2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.759991101 UTC

[section ""data" . System.Console.GetOpt.$tcOptKind_closure" {
     System.Console.GetOpt.$tcOptKind_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcOptKind1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5196380470096609574;
         const 4174335291028142741;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.760624435 UTC

[section ""data" . System.Console.GetOpt.$tc'EndOfOpts1_closure" {
     System.Console.GetOpt.$tc'EndOfOpts1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcOptKind_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.761204198 UTC

[section ""cstring" . System.Console.GetOpt.$tc'EndOfOpts3_bytes" {
     System.Console.GetOpt.$tc'EndOfOpts3_bytes:
         I8[] [39,69,110,100,79,102,79,112,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.761829183 UTC

[section ""data" . System.Console.GetOpt.$tc'EndOfOpts2_closure" {
     System.Console.GetOpt.$tc'EndOfOpts2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'EndOfOpts3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.762386635 UTC

[section ""data" . System.Console.GetOpt.$tc'EndOfOpts_closure" {
     System.Console.GetOpt.$tc'EndOfOpts_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'EndOfOpts2_closure+1;
         const System.Console.GetOpt.$tc'EndOfOpts1_closure+1;
         const 16241379069650497856;
         const 7399561775253491405;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.762991702 UTC

[section ""data" . System.Console.GetOpt.$tc'Opt1_closure" {
     System.Console.GetOpt.$tc'Opt1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcsns_closure+2;
         const System.Console.GetOpt.$tc'EndOfOpts1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.763590146 UTC

[section ""cstring" . System.Console.GetOpt.$tc'Opt3_bytes" {
     System.Console.GetOpt.$tc'Opt3_bytes:
         I8[] [39,79,112,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.764174132 UTC

[section ""data" . System.Console.GetOpt.$tc'Opt2_closure" {
     System.Console.GetOpt.$tc'Opt2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'Opt3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.764782652 UTC

[section ""data" . System.Console.GetOpt.$tc'Opt_closure" {
     System.Console.GetOpt.$tc'Opt_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'Opt2_closure+1;
         const System.Console.GetOpt.$tc'Opt1_closure+4;
         const 2387467460439073880;
         const 875868993959501908;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.765419384 UTC

[section ""data" . System.Console.GetOpt.$tc'NonOpt1_closure" {
     System.Console.GetOpt.$tc'NonOpt1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const System.Console.GetOpt.$tc'EndOfOpts1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.765976916 UTC

[section ""cstring" . System.Console.GetOpt.$tc'UnreqOpt2_bytes" {
     System.Console.GetOpt.$tc'UnreqOpt2_bytes:
         I8[] [39,85,110,114,101,113,79,112,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.76655844 UTC

[section ""data" . System.Console.GetOpt.$tc'UnreqOpt1_closure" {
     System.Console.GetOpt.$tc'UnreqOpt1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'UnreqOpt2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.767105492 UTC

[section ""data" . System.Console.GetOpt.$tc'UnreqOpt_closure" {
     System.Console.GetOpt.$tc'UnreqOpt_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'UnreqOpt1_closure+1;
         const System.Console.GetOpt.$tc'NonOpt1_closure+4;
         const 6747281843324563502;
         const 13162655807375334605;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.767712337 UTC

[section ""cstring" . System.Console.GetOpt.$tc'NonOpt3_bytes" {
     System.Console.GetOpt.$tc'NonOpt3_bytes:
         I8[] [39,78,111,110,79,112,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.768288607 UTC

[section ""data" . System.Console.GetOpt.$tc'NonOpt2_closure" {
     System.Console.GetOpt.$tc'NonOpt2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'NonOpt3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.768861853 UTC

[section ""data" . System.Console.GetOpt.$tc'NonOpt_closure" {
     System.Console.GetOpt.$tc'NonOpt_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'NonOpt2_closure+1;
         const System.Console.GetOpt.$tc'NonOpt1_closure+4;
         const 17187900375792953920;
         const 18196243003688324985;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.769601484 UTC

[section ""cstring" . System.Console.GetOpt.$tc'OptErr2_bytes" {
     System.Console.GetOpt.$tc'OptErr2_bytes:
         I8[] [39,79,112,116,69,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.770255492 UTC

[section ""data" . System.Console.GetOpt.$tc'OptErr1_closure" {
     System.Console.GetOpt.$tc'OptErr1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'OptErr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.770874681 UTC

[section ""data" . System.Console.GetOpt.$tc'OptErr_closure" {
     System.Console.GetOpt.$tc'OptErr_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'OptErr1_closure+1;
         const System.Console.GetOpt.$tc'NonOpt1_closure+4;
         const 13165663139815598038;
         const 5639435123785572420;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.771816668 UTC

[section ""data" . System.Console.GetOpt.Opt_closure" {
     System.Console.GetOpt.Opt_closure:
         const System.Console.GetOpt.Opt_info;
 },
 System.Console.GetOpt.Opt_entry() //  [R2]
         { info_tbl: [(ccu7f,
                       label: System.Console.GetOpt.Opt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu7f: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccu7j; else goto ccu7i;
       ccu7j: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.Opt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccu7i: // global
           I64[Hp - 8] = System.Console.GetOpt.Opt_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.772857428 UTC

[section ""data" . System.Console.GetOpt.UnreqOpt_closure" {
     System.Console.GetOpt.UnreqOpt_closure:
         const System.Console.GetOpt.UnreqOpt_info;
 },
 System.Console.GetOpt.UnreqOpt_entry() //  [R2]
         { info_tbl: [(ccu7p,
                       label: System.Console.GetOpt.UnreqOpt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu7p: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccu7t; else goto ccu7s;
       ccu7t: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.UnreqOpt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccu7s: // global
           I64[Hp - 8] = System.Console.GetOpt.UnreqOpt_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.773937299 UTC

[section ""data" . System.Console.GetOpt.NonOpt_closure" {
     System.Console.GetOpt.NonOpt_closure:
         const System.Console.GetOpt.NonOpt_info;
 },
 System.Console.GetOpt.NonOpt_entry() //  [R2]
         { info_tbl: [(ccu7z,
                       label: System.Console.GetOpt.NonOpt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu7z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccu7D; else goto ccu7C;
       ccu7D: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.NonOpt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccu7C: // global
           I64[Hp - 8] = System.Console.GetOpt.NonOpt_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.774777934 UTC

[section ""data" . System.Console.GetOpt.EndOfOpts_closure" {
     System.Console.GetOpt.EndOfOpts_closure:
         const System.Console.GetOpt.EndOfOpts_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.775472545 UTC

[section ""data" . System.Console.GetOpt.OptErr_closure" {
     System.Console.GetOpt.OptErr_closure:
         const System.Console.GetOpt.OptErr_info;
 },
 System.Console.GetOpt.OptErr_entry() //  [R2]
         { info_tbl: [(ccu7J,
                       label: System.Console.GetOpt.OptErr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu7J: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccu7N; else goto ccu7M;
       ccu7N: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.OptErr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccu7M: // global
           I64[Hp - 8] = System.Console.GetOpt.OptErr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.777266593 UTC

[section ""data" . System.Console.GetOpt.NoArg_closure" {
     System.Console.GetOpt.NoArg_closure:
         const System.Console.GetOpt.NoArg_info;
 },
 System.Console.GetOpt.NoArg_entry() //  [R2]
         { info_tbl: [(ccu7T,
                       label: System.Console.GetOpt.NoArg_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu7T: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccu7X; else goto ccu7W;
       ccu7X: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.NoArg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccu7W: // global
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.778263895 UTC

[section ""data" . System.Console.GetOpt.ReqArg_closure" {
     System.Console.GetOpt.ReqArg_closure:
         const System.Console.GetOpt.ReqArg_info;
 },
 System.Console.GetOpt.ReqArg_entry() //  [R2, R3]
         { info_tbl: [(ccu83,
                       label: System.Console.GetOpt.ReqArg_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu83: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccu87; else goto ccu86;
       ccu87: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.ReqArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu86: // global
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.779238297 UTC

[section ""data" . System.Console.GetOpt.OptArg_closure" {
     System.Console.GetOpt.OptArg_closure:
         const System.Console.GetOpt.OptArg_info;
 },
 System.Console.GetOpt.OptArg_entry() //  [R2, R3]
         { info_tbl: [(ccu8d,
                       label: System.Console.GetOpt.OptArg_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu8d: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccu8h; else goto ccu8g;
       ccu8h: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.OptArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu8g: // global
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 13;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.780278772 UTC

[section ""data" . System.Console.GetOpt.Option_closure" {
     System.Console.GetOpt.Option_closure:
         const System.Console.GetOpt.Option_info;
 },
 System.Console.GetOpt.Option_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(ccu8n,
                       label: System.Console.GetOpt.Option_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu8n: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccu8r; else goto ccu8q;
       ccu8r: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.Option_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu8q: // global
           I64[Hp - 32] = System.Console.GetOpt.Option_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.781195993 UTC

[section ""data" . System.Console.GetOpt.RequireOrder_closure" {
     System.Console.GetOpt.RequireOrder_closure:
         const System.Console.GetOpt.RequireOrder_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.782068773 UTC

[section ""data" . System.Console.GetOpt.Permute_closure" {
     System.Console.GetOpt.Permute_closure:
         const System.Console.GetOpt.Permute_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.78280221 UTC

[section ""data" . System.Console.GetOpt.ReturnInOrder_closure" {
     System.Console.GetOpt.ReturnInOrder_closure:
         const System.Console.GetOpt.ReturnInOrder_info;
 },
 System.Console.GetOpt.ReturnInOrder_entry() //  [R2]
         { info_tbl: [(ccu8x,
                       label: System.Console.GetOpt.ReturnInOrder_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu8x: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccu8B; else goto ccu8A;
       ccu8B: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.ReturnInOrder_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccu8A: // global
           I64[Hp - 8] = System.Console.GetOpt.ReturnInOrder_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.783684295 UTC

[System.Console.GetOpt.Opt_con_entry() //  [R1]
         { info_tbl: [(ccu8C,
                       label: System.Console.GetOpt.Opt_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu8C: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.784477002 UTC

[System.Console.GetOpt.UnreqOpt_con_entry() //  [R1]
         { info_tbl: [(ccu8E,
                       label: System.Console.GetOpt.UnreqOpt_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,85,110,114,101,113,79,112,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu8E: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.785278686 UTC

[System.Console.GetOpt.NonOpt_con_entry() //  [R1]
         { info_tbl: [(ccu8G,
                       label: System.Console.GetOpt.NonOpt_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,78,111,110,79,112,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu8G: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.786009175 UTC

[System.Console.GetOpt.EndOfOpts_con_entry() //  [R1]
         { info_tbl: [(ccu8I,
                       label: System.Console.GetOpt.EndOfOpts_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,69,110,100,79,102,79,112,116,115]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu8I: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.786679031 UTC

[System.Console.GetOpt.OptErr_con_entry() //  [R1]
         { info_tbl: [(ccu8K,
                       label: System.Console.GetOpt.OptErr_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116,69,114,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu8K: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.787453161 UTC

[System.Console.GetOpt.NoArg_con_entry() //  [R1]
         { info_tbl: [(ccu8M,
                       label: System.Console.GetOpt.NoArg_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,78,111,65,114,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu8M: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.788169703 UTC

[System.Console.GetOpt.ReqArg_con_entry() //  [R1]
         { info_tbl: [(ccu8O,
                       label: System.Console.GetOpt.ReqArg_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,82,101,113,65,114,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu8O: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.788907192 UTC

[System.Console.GetOpt.OptArg_con_entry() //  [R1]
         { info_tbl: [(ccu8Q,
                       label: System.Console.GetOpt.OptArg_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116,65,114,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu8Q: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.78968758 UTC

[System.Console.GetOpt.Option_con_entry() //  [R1]
         { info_tbl: [(ccu8S,
                       label: System.Console.GetOpt.Option_con_info
                       rep:HeapRep 4 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu8S: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.790390074 UTC

[System.Console.GetOpt.RequireOrder_con_entry() //  [R1]
         { info_tbl: [(ccu8U,
                       label: System.Console.GetOpt.RequireOrder_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,82,101,113,117,105,114,101,79,114,100,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu8U: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.791122438 UTC

[System.Console.GetOpt.Permute_con_entry() //  [R1]
         { info_tbl: [(ccu8W,
                       label: System.Console.GetOpt.Permute_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,80,101,114,109,117,116,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu8W: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.791844152 UTC

[System.Console.GetOpt.ReturnInOrder_con_entry() //  [R1]
         { info_tbl: [(ccu8Y,
                       label: System.Console.GetOpt.ReturnInOrder_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,82,101,116,117,114,110,73,110,79,114,100,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu8Y: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.79257184 UTC

[section ""relreadonly" . ScsR0_srt" {
     ScsR0_srt:
         const GHC.List.maximum2_closure;
         const System.Console.GetOpt.usageInfo_sameLen_closure;
         const System.Console.GetOpt.usageInfo1_closure;
         const lvl10_rcsn5_closure;
         const System.Console.GetOpt.usageInfo_closure;
         const lvl17_rcsnc_closure;
         const System.Console.GetOpt.errUnrec_closure;
         const System.Console.GetOpt.$wgetOpt'_closure;
         const lvl16_rcsnb_closure;
         const lvl24_rcsnk_closure;
         const lvl22_rcsnh_closure;
         const System.Console.GetOpt.getOpt'_closure;
         const System.Console.GetOpt.getOpt_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.793466519 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:20.795263782 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure" {
     System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure:
         const System.Console.GetOpt.$fFunctorArgOrder_$cfmap_info;
 },
 sat_scsnH_entry() //  [R1, R2]
         { info_tbl: [(ccu9g,
                       label: sat_scsnH_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu9g: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.$fFunctorArgOrder_$cfmap_entry() //  [R2, R3]
         { info_tbl: [(ccu9o,
                       label: System.Console.GetOpt.$fFunctorArgOrder_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu9o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccu9p; else goto ccu9q;
       ccu9p: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccu9q: // global
           I64[Sp - 16] = block_ccu94_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucu9A; else goto ccu95;
       ucu9A: // global
           call _ccu94(R1) args: 0, res: 0, upd: 0;
       ccu95: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccu94() //  [R1]
         { info_tbl: [(ccu94,
                       label: block_ccu94_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu94: // global
           _ccu9n::P64 = R1 & 7;
           if (_ccu9n::P64 < 3) goto ucu9z; else goto ccu9m;
       ucu9z: // global
           if (_ccu9n::P64 < 2) goto ccu9k; else goto ccu9l;
       ccu9k: // global
           R1 = System.Console.GetOpt.RequireOrder_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccu9l: // global
           R1 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccu9m: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccu9y; else goto ccu9x;
       ccu9y: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccu9x: // global
           _scsnG::P64 = P64[R1 + 5];
           I64[Hp - 32] = sat_scsnH_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _scsnG::P64;
           I64[Hp - 8] = System.Console.GetOpt.ReturnInOrder_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 5;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.804094835 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure" {
     System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure:
         const System.Console.GetOpt.$fFunctorArgOrder_$c<$_info;
 },
 sat_scsnN_entry() //  [R1]
         { info_tbl: [(ccua9,
                       label: sat_scsnN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccua9: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.$fFunctorArgOrder_$c<$_entry() //  [R2, R3]
         { info_tbl: [(ccuah,
                       label: System.Console.GetOpt.$fFunctorArgOrder_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuah: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuai; else goto ccuaj;
       ccuai: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuaj: // global
           I64[Sp - 16] = block_ccu9X_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucuat; else goto ccu9Y;
       ucuat: // global
           call _ccu9X(R1) args: 0, res: 0, upd: 0;
       ccu9Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccu9X() //  [R1]
         { info_tbl: [(ccu9X,
                       label: block_ccu9X_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccu9X: // global
           _ccuag::P64 = R1 & 7;
           if (_ccuag::P64 < 3) goto ucuas; else goto ccuaf;
       ucuas: // global
           if (_ccuag::P64 < 2) goto ccuad; else goto ccuae;
       ccuad: // global
           R1 = System.Console.GetOpt.RequireOrder_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuae: // global
           R1 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuaf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccuar; else goto ccuaq;
       ccuar: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuaq: // global
           I64[Hp - 24] = sat_scsnN_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = System.Console.GetOpt.ReturnInOrder_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 5;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.812330579 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgOrder_closure" {
     System.Console.GetOpt.$fFunctorArgOrder_closure:
         const GHC.Base.C:Functor_con_info;
         const System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure+2;
         const System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.81580201 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure" {
     System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure:
         const System.Console.GetOpt.$fFunctorArgDescr_$cfmap_info;
 },
 sat_scsnV_entry() //  [R1, R2]
         { info_tbl: [(ccub2,
                       label: sat_scsnV_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccub2: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsnY_entry() //  [R1, R2]
         { info_tbl: [(ccubc,
                       label: sat_scsnY_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccubc: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.$fFunctorArgDescr_$cfmap_entry() //  [R2, R3]
         { info_tbl: [(ccubk,
                       label: System.Console.GetOpt.$fFunctorArgDescr_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccubk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccubl; else goto ccubm;
       ccubl: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccubm: // global
           I64[Sp - 16] = block_ccuaR_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucubC; else goto ccuaS;
       ucubC: // global
           call _ccuaR(R1) args: 0, res: 0, upd: 0;
       ccuaS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuaR() //  [R1]
         { info_tbl: [(ccuaR,
                       label: block_ccuaR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuaR: // global
           _scsnO::P64 = P64[Sp + 8];
           _ccubj::P64 = R1 & 7;
           if (_ccubj::P64 < 3) goto ucubB; else goto ccubi;
       ucubB: // global
           if (_ccubj::P64 < 2) goto ccubg; else goto ccubh;
       ccubg: // global
           Hp = Hp + 48;
           _scsnQ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccubA; else goto ccubr;
       ccubr: // global
           _scsnR::P64 = P64[_scsnQ::P64 + 7];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _scsnO::P64;
           P64[Hp - 16] = _scsnR::P64;
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccubh: // global
           Hp = Hp + 48;
           _scsnQ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccubA; else goto ccubv;
       ccubv: // global
           _scsnT::P64 = P64[_scsnQ::P64 + 6];
           _scsnU::P64 = P64[_scsnQ::P64 + 14];
           I64[Hp - 40] = sat_scsnV_info;
           P64[Hp - 32] = _scsnO::P64;
           P64[Hp - 24] = _scsnT::P64;
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = _scsnU::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccubi: // global
           Hp = Hp + 48;
           _scsnQ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccubA; else goto ccubz;
       ccubA: // global
           HpAlloc = 48;
           R1 = _scsnQ::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccubz: // global
           _scsnW::P64 = P64[_scsnQ::P64 + 5];
           _scsnX::P64 = P64[_scsnQ::P64 + 13];
           I64[Hp - 40] = sat_scsnY_info;
           P64[Hp - 32] = _scsnO::P64;
           P64[Hp - 24] = _scsnW::P64;
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = _scsnX::P64;
           R1 = Hp - 13;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.827103511 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure" {
     System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure:
         const System.Console.GetOpt.$fFunctorArgDescr_$c<$_info;
 },
 sat_scso6_entry() //  [R1]
         { info_tbl: [(ccuce,
                       label: sat_scso6_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuce: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsoa_entry() //  [R1]
         { info_tbl: [(ccuco,
                       label: sat_scsoa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuco: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.$fFunctorArgDescr_$c<$_entry() //  [R2, R3]
         { info_tbl: [(ccucw,
                       label: System.Console.GetOpt.$fFunctorArgDescr_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccucw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccucx; else goto ccucy;
       ccucx: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccucy: // global
           I64[Sp - 16] = block_ccuc3_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucucN; else goto ccuc4;
       ucucN: // global
           call _ccuc3(R1) args: 0, res: 0, upd: 0;
       ccuc4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuc3() //  [R1]
         { info_tbl: [(ccuc3,
                       label: block_ccuc3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuc3: // global
           _scsnZ::P64 = P64[Sp + 8];
           _ccucv::P64 = R1 & 7;
           if (_ccucv::P64 < 3) goto ucucM; else goto ccucu;
       ucucM: // global
           if (_ccucv::P64 < 2) goto ccucs; else goto ccuct;
       ccucs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccucD; else goto ccucC;
       ccucD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccucC: // global
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = _scsnZ::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuct: // global
           Hp = Hp + 40;
           _scso1::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccucL; else goto ccucG;
       ccucG: // global
           _scso4::P64 = P64[_scso1::P64 + 14];
           I64[Hp - 32] = sat_scso6_info;
           P64[Hp - 24] = _scsnZ::P64;
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scso4::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccucu: // global
           Hp = Hp + 40;
           _scso1::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccucL; else goto ccucK;
       ccucL: // global
           HpAlloc = 40;
           R1 = _scso1::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccucK: // global
           _scso8::P64 = P64[_scso1::P64 + 13];
           I64[Hp - 32] = sat_scsoa_info;
           P64[Hp - 24] = _scsnZ::P64;
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scso8::P64;
           R1 = Hp - 13;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.837138334 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgDescr_closure" {
     System.Console.GetOpt.$fFunctorArgDescr_closure:
         const GHC.Base.C:Functor_con_info;
         const System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure+2;
         const System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.839489112 UTC

[section ""data" . System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure" {
     System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure:
         const System.Console.GetOpt.$fFunctorOptDescr_$cfmap_info;
 },
 sat_scsoi_entry() //  [R1]
         { info_tbl: [(ccudn,
                       label: sat_scsoi_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccudn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccudo; else goto ccudp;
       ccudo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccudp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.Console.GetOpt.$fFunctorArgDescr_$cfmap_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.$fFunctorOptDescr_$cfmap_entry() //  [R2, R3]
         { info_tbl: [(ccudq,
                       label: System.Console.GetOpt.$fFunctorOptDescr_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccudq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuds; else goto ccudt;
       ccuds: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccudt: // global
           I64[Sp - 16] = block_ccude_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucudx; else goto ccudf;
       ucudx: // global
           call _ccude(R1) args: 0, res: 0, upd: 0;
       ccudf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccude() //  [R1]
         { info_tbl: [(ccude,
                       label: block_ccude_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccude: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccudw; else goto ccudv;
       ccudw: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccudv: // global
           _scsoe::P64 = P64[R1 + 7];
           _scsof::P64 = P64[R1 + 15];
           _scsog::P64 = P64[R1 + 23];
           _scsoh::P64 = P64[R1 + 31];
           I64[Hp - 64] = sat_scsoi_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _scsog::P64;
           I64[Hp - 32] = System.Console.GetOpt.Option_con_info;
           P64[Hp - 24] = _scsoe::P64;
           P64[Hp - 16] = _scsof::P64;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = _scsoh::P64;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.848593921 UTC

[section ""data" . System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure" {
     System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure:
         const System.Console.GetOpt.$fFunctorOptDescr_$c<$_info;
 },
 sat_scsov_entry() //  [R1]
         { info_tbl: [(ccuec,
                       label: sat_scsov_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuec: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsoz_entry() //  [R1]
         { info_tbl: [(ccuem,
                       label: sat_scsoz_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuem: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsoA_entry() //  [R1]
         { info_tbl: [(ccueu,
                       label: sat_scsoA_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccueu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccuev; else goto ccuew;
       ccuev: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuew: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccue1_info;
           _scsoj::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _scsoj::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucueL; else goto ccue2;
       ucueL: // global
           call _ccue1(R1) args: 0, res: 0, upd: 0;
       ccue2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccue1() //  [R1]
         { info_tbl: [(ccue1,
                       label: block_ccue1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccue1: // global
           _scsoj::P64 = P64[Sp + 8];
           _ccuet::P64 = R1 & 7;
           if (_ccuet::P64 < 3) goto ucueK; else goto ccues;
       ucueK: // global
           if (_ccuet::P64 < 2) goto ccueq; else goto ccuer;
       ccueq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccueB; else goto ccueA;
       ccueB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccueA: // global
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = _scsoj::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccuer: // global
           Hp = Hp + 40;
           _scsoq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccueJ; else goto ccueE;
       ccueE: // global
           _scsot::P64 = P64[_scsoq::P64 + 14];
           I64[Hp - 32] = sat_scsov_info;
           P64[Hp - 24] = _scsoj::P64;
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scsot::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccues: // global
           Hp = Hp + 40;
           _scsoq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccueJ; else goto ccueI;
       ccueJ: // global
           HpAlloc = 40;
           R1 = _scsoq::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccueI: // global
           _scsox::P64 = P64[_scsoq::P64 + 13];
           I64[Hp - 32] = sat_scsoz_info;
           P64[Hp - 24] = _scsoj::P64;
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scsox::P64;
           R1 = Hp - 13;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.$fFunctorOptDescr_$c<$_entry() //  [R2, R3]
         { info_tbl: [(ccueM,
                       label: System.Console.GetOpt.$fFunctorOptDescr_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccueM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccueO; else goto ccueP;
       ccueO: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccueP: // global
           I64[Sp - 16] = block_ccudS_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucueT; else goto ccudT;
       ucueT: // global
           call _ccudS(R1) args: 0, res: 0, upd: 0;
       ccudT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccudS() //  [R1]
         { info_tbl: [(ccudS,
                       label: block_ccudS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccudS: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccueS; else goto ccueR;
       ccueS: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccueR: // global
           _scsom::P64 = P64[R1 + 7];
           _scson::P64 = P64[R1 + 15];
           _scsoo::P64 = P64[R1 + 23];
           _scsop::P64 = P64[R1 + 31];
           I64[Hp - 64] = sat_scsoA_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _scsoo::P64;
           I64[Hp - 32] = System.Console.GetOpt.Option_con_info;
           P64[Hp - 24] = _scsom::P64;
           P64[Hp - 16] = _scson::P64;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = _scsop::P64;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.863585222 UTC

[section ""data" . System.Console.GetOpt.$fFunctorOptDescr_closure" {
     System.Console.GetOpt.$fFunctorOptDescr_closure:
         const GHC.Base.C:Functor_con_info;
         const System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure+2;
         const System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.865350137 UTC

[section ""data" . lvl_rcsmT_closure" {
     lvl_rcsmT_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.867017465 UTC

[section ""data" . lvl1_rcsmU_closure" {
     lvl1_rcsmU_closure:
         const :_con_info;
         const lvl_rcsmT_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.869494741 UTC

[section ""data" . $wxs_rcsmV_closure" {
     $wxs_rcsmV_closure:
         const $wxs_rcsmV_info;
 },
 sat_scsoE_entry() //  [R1]
         { info_tbl: [(ccufF,
                       label: sat_scsoE_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccufF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccufG; else goto ccufH;
       ccufG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccufH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16] - 1;
           Sp = Sp - 16;
           call $wxs_rcsmV_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 $wxs_rcsmV_entry() //  [R2]
         { info_tbl: [(ccufL,
                       label: $wxs_rcsmV_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccufL: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccufP; else goto ccufO;
       ccufP: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = $wxs_rcsmV_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccufO: // global
           if (R2 == 1) goto ccufK; else goto ccufJ;
       ccufK: // global
           Hp = Hp - 48;
           R1 = lvl1_rcsmU_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccufJ: // global
           I64[Hp - 40] = sat_scsoE_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl_rcsmT_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.875784419 UTC

[section ""data" . System.Console.GetOpt.$wgo_closure" {
     System.Console.GetOpt.$wgo_closure:
         const System.Console.GetOpt.$wgo_info;
 },
 sat_scsoM_entry() //  [R1]
         { info_tbl: [(ccugl,
                       label: sat_scsoM_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccugl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccugm; else goto ccugn;
       ccugm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccugn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 24] - 1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.Console.GetOpt.$wgo_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.$wgo_entry() //  [R2, R3]
         { info_tbl: [(ccugs,
                       label: System.Console.GetOpt.$wgo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 14} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccugs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccugt; else goto ccugu;
       ccugt: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$wgo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccugu: // global
           I64[Sp - 16] = block_ccug7_info;
           R1 = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucugG; else goto ccug8;
       ucugG: // global
           call _ccug7(R1) args: 0, res: 0, upd: 0;
       ccug8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccug7() //  [R1]
         { info_tbl: [(ccug7,
                       label: block_ccug7_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccug7: // global
           _scsoG::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto ccugp; else goto ccugq;
       ccugp: // global
           R2 = _scsoG::I64;
           Sp = Sp + 16;
           call $wxs_rcsmV_entry(R2) args: 8, res: 0, upd: 8;
       ccugq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccugz; else goto ccugy;
       ccugz: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccugy: // global
           _scsoI::P64 = P64[R1 + 6];
           if (_scsoG::I64 == 1) goto ccugF; else goto ccugC;
       ccugF: // global
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = _scsoI::P64;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _ccugE::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _ccugE::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccugC: // global
           _scsoJ::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_scsoM_info;
           P64[Hp - 32] = _scsoJ::P64;
           I64[Hp - 24] = _scsoG::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scsoI::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.885968659 UTC

[section ""data" . System.Console.GetOpt.usageInfo_sameLen_closure" {
     System.Console.GetOpt.usageInfo_sameLen_closure:
         const System.Console.GetOpt.usageInfo_sameLen_info;
         const 0;
 },
 n_scsoO_entry() //  [R1]
         { info_tbl: [(ccuhe,
                       label: n_scsoO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuhe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccuhf; else goto ccuhg;
       ccuhf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuhg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuh8_info;
           R3 = P64[R1 + 16];
           R2 = GHC.List.length_closure+1;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuh8() //  [R1]
         { info_tbl: [(ccuh8,
                       label: block_ccuh8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuh8: // global
           if (R1 & 7 == 1) goto ccuhb; else goto ccuhc;
       ccuhb: // global
           R1 = GHC.List.maximum2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       ccuhc: // global
           I64[Sp - 8] = block_ccuhm_info;
           _scsoR::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsoR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuhB; else goto ccuhn;
       ucuhB: // global
           call _ccuhm(R1) args: 0, res: 0, upd: 0;
       ccuhn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccuhm() //  [R1]
         { info_tbl: [(ccuhm,
                       label: block_ccuhm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuhm: // global
           _scsoR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccuhr_info;
           R3 = I64[R1 + 7];
           R2 = _scsoR::P64;
           Sp = Sp + 8;
           call GHC.List.$wgo_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuhr() //  [R1]
         { info_tbl: [(ccuhr,
                       label: block_ccuhr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuhr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccuhA; else goto ccuhz;
       ccuhA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       ccuhz: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl25_scsoV_entry() //  [R1]
         { info_tbl: [(ccuhJ,
                       label: lvl25_scsoV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuhJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuhK; else goto ccuhL;
       ccuhK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuhL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuhG_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucuhQ; else goto ccuhH;
       ucuhQ: // global
           call _ccuhG(R1) args: 0, res: 0, upd: 0;
       ccuhH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccuhG() //  [R1]
         { info_tbl: [(ccuhG,
                       label: block_ccuhG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuhG: // global
           R1 = I64[(%MO_S_Lt_W64(0,
                                  I64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsp7_entry() //  [R1]
         { info_tbl: [(ccuie,
                       label: sat_scsp7_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuie: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccuif; else goto ccuig;
       ccuif: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuig: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_ccui7_info;
           _scsoO::P64 = P64[R1 + 16];
           _scsp2::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _scsoO::P64;
           P64[Sp - 24] = _scsp2::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucuiu; else goto ccui8;
       ucuiu: // global
           call _ccui7(R1) args: 0, res: 0, upd: 0;
       ccui8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccui7() //  [R1]
         { info_tbl: [(ccui7,
                       label: block_ccui7_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccui7: // global
           if (R1 & 7 == 1) goto ccuib; else goto ccuic;
       ccuib: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccuic: // global
           _scsoO::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccuim_info;
           R1 = _scsoO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucuit; else goto ccuio;
       ucuit: // global
           call _ccuim(R1) args: 0, res: 0, upd: 0;
       ccuio: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccuim() //  [R1]
         { info_tbl: [(ccuim,
                       label: block_ccuim_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuim: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call System.Console.GetOpt.$wgo_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 go_scsoZ_entry() //  [R1, R2]
         { info_tbl: [(ccuiz,
                       label: go_scsoZ_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuiz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccuiA; else goto ccuiB;
       ccuiA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccuiB: // global
           I64[Sp - 32] = block_ccuhW_info;
           _scsoZ::P64 = R1;
           _scsoO::P64 = P64[R1 + 7];
           _scsoV::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _scsoO::P64;
           P64[Sp - 16] = _scsoV::P64;
           P64[Sp - 8] = _scsoZ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucuiI; else goto ccuhX;
       ucuiI: // global
           call _ccuhW(R1) args: 0, res: 0, upd: 0;
       ccuhX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuhW() //  [R1]
         { info_tbl: [(ccuhW,
                       label: block_ccuhW_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuhW: // global
           if (R1 & 7 == 1) goto ccuiw; else goto ccuix;
       ccuiw: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuix: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccuiH; else goto ccuiG;
       ccuiH: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuiG: // global
           _scsp2::P64 = P64[R1 + 6];
           _scsp3::P64 = P64[R1 + 14];
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = _scsp3::P64;
           I64[Hp - 56] = sat_scsp7_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _scsp2::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.usageInfo_sameLen_entry() //  [R2]
         { info_tbl: [(ccuiJ,
                       label: System.Console.GetOpt.usageInfo_sameLen_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuiJ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccuiN; else goto ccuiM;
       ccuiN: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo_sameLen_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccuiM: // global
           I64[Hp - 64] = n_scsoO_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl25_scsoV_info;
           _ccuh4::P64 = Hp - 64;
           P64[Hp - 24] = _ccuh4::P64;
           I64[Hp - 16] = go_scsoZ_info;
           P64[Hp - 8] = _ccuh4::P64;
           P64[Hp] = Hp - 40;
           R2 = R2;
           R1 = Hp - 15;
           call go_scsoZ_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.912399861 UTC

[section ""data" . sepBy_rcsmW_closure" {
     sepBy_rcsmW_closure:
         const sepBy_rcsmW_info;
 },
 sat_scsph_entry() //  [R1]
         { info_tbl: [(ccukd,
                       label: sat_scsph_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccukd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuke; else goto ccukf;
       ccuke: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccukf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call sepBy_rcsmW_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sepBy_rcsmW_entry() //  [R2, R3]
         { info_tbl: [(ccukk,
                       label: sepBy_rcsmW_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccukk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccukl; else goto ccukm;
       ccukl: // global
           R3 = R3;
           R2 = R2;
           R1 = sepBy_rcsmW_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccukm: // global
           I64[Sp - 16] = block_ccujX_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucukC; else goto ccujY;
       ucukC: // global
           call _ccujX(R1) args: 0, res: 0, upd: 0;
       ccujY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccujX() //  [R1]
         { info_tbl: [(ccujX,
                       label: block_ccujX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccujX: // global
           if (R1 & 7 == 1) goto ccukh; else goto ccuki;
       ccukh: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuki: // global
           I64[Sp - 8] = block_ccuk3_info;
           _scspc::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scspc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucukB; else goto ccuk4;
       ucukB: // global
           call _ccuk3(R1) args: 0, res: 0, upd: 0;
       ccuk4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuk3() //  [R1]
         { info_tbl: [(ccuk3,
                       label: block_ccuk3_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuk3: // global
           _scspc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccukt; else goto ccukw;
       ccukt: // global
           R1 = _scspc::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccukw: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccukz; else goto ccuky;
       ccukz: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuky: // global
           I64[Hp - 72] = sat_scsph_info;
           _scsp9::P64 = P64[Sp + 16];
           P64[Hp - 56] = _scsp9::P64;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl_rcsmT_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scsp9::P64;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _scspc::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.922761444 UTC

[section ""data" . lvl2_rcsmX_closure" {
     lvl2_rcsmX_closure:
         const GHC.Types.C#_con_info;
         const 44;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.924490891 UTC

[section ""cstring" . lvl3_rcsmY_bytes" {
     lvl3_rcsmY_bytes:
         I8[] [45]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.926184328 UTC

[section ""cstring" . lvl4_rcsmZ_bytes" {
     lvl4_rcsmZ_bytes:
         I8[] [91]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.927885811 UTC

[section ""cstring" . lvl5_rcsn0_bytes" {
     lvl5_rcsn0_bytes:
         I8[] [93]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.929886387 UTC

[section ""cstring" . lvl6_rcsn1_bytes" {
     lvl6_rcsn1_bytes:
         I8[] [45,45]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.932013462 UTC

[section ""cstring" . lvl7_rcsn2_bytes" {
     lvl7_rcsn2_bytes:
         I8[] [91,61]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.933742194 UTC

[section ""cstring" . lvl8_rcsn3_bytes" {
     lvl8_rcsn3_bytes:
         I8[] [32,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.937268862 UTC

[section ""data" . System.Console.GetOpt.usageInfo_go2_closure" {
     System.Console.GetOpt.usageInfo_go2_closure:
         const System.Console.GetOpt.usageInfo_go2_info;
 },
 sat_scspB_entry() //  [R1]
         { info_tbl: [(cculA,
                       label: sat_scspB_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cculA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cculB; else goto cculC;
       cculB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cculC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_go2_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scspw_entry() //  [R1]
         { info_tbl: [(cculX,
                       label: sat_scspw_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cculX: // global
           R3 = P64[R1 + 16];
           R2 = lvl8_rcsn3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scspx_entry() //  [R1]
         { info_tbl: [(ccum0,
                       label: sat_scspx_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccum0: // global
           _scspx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccum1; else goto ccum2;
       ccum2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccum4; else goto ccum3;
       ccum4: // global
           HpAlloc = 24;
           goto ccum1;
       ccum1: // global
           R1 = _scspx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccum3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scspx::P64;
           _scspr::P64 = P64[_scspx::P64 + 16];
           _scspu::P64 = P64[_scspx::P64 + 24];
           I64[Hp - 16] = sat_scspw_info;
           P64[Hp] = _scspu::P64;
           R3 = Hp - 16;
           R2 = _scspr::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scspy_entry() //  [R1]
         { info_tbl: [(ccum5,
                       label: sat_scspy_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccum5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccum9; else goto ccum8;
       ccum9: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccum8: // global
           _scspr::P64 = P64[R1 + 16];
           _scspu::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scspx_info;
           P64[Hp - 8] = _scspr::P64;
           P64[Hp] = _scspu::P64;
           R3 = Hp - 24;
           R2 = lvl8_rcsn3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scspz_entry() //  [R1]
         { info_tbl: [(ccuma,
                       label: sat_scspz_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuma: // global
           _scspz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccumb; else goto ccumc;
       ccumc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccume; else goto ccumd;
       ccume: // global
           HpAlloc = 32;
           goto ccumb;
       ccumb: // global
           R1 = _scspz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccumd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scspz::P64;
           _scspo::P64 = P64[_scspz::P64 + 16];
           _scspr::P64 = P64[_scspz::P64 + 24];
           _scspu::P64 = P64[_scspz::P64 + 32];
           I64[Hp - 24] = sat_scspy_info;
           P64[Hp - 8] = _scspr::P64;
           P64[Hp] = _scspu::P64;
           R3 = Hp - 24;
           R2 = _scspo::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scspA_entry() //  [R1]
         { info_tbl: [(ccumf,
                       label: sat_scspA_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccumf: // global
           _scspA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccumg; else goto ccumh;
       ccumh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccumj; else goto ccumi;
       ccumj: // global
           HpAlloc = 40;
           goto ccumg;
       ccumg: // global
           R1 = _scspA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccumi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scspA::P64;
           _scspo::P64 = P64[_scspA::P64 + 16];
           _scspr::P64 = P64[_scspA::P64 + 24];
           _scspu::P64 = P64[_scspA::P64 + 32];
           I64[Hp - 32] = sat_scspz_info;
           P64[Hp - 16] = _scspo::P64;
           P64[Hp - 8] = _scspr::P64;
           P64[Hp] = _scspu::P64;
           R3 = Hp - 32;
           R2 = lvl8_rcsn3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.usageInfo_go2_entry() //  [R2, R3, R4]
         { info_tbl: [(ccumo,
                       label: System.Console.GetOpt.usageInfo_go2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccumo: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccump; else goto ccumq;
       ccump: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo_go2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccumq: // global
           I64[Sp - 24] = block_ccule_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucumT; else goto cculf;
       ucumT: // global
           call _ccule(R1) args: 0, res: 0, upd: 0;
       cculf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccule() //  [R1]
         { info_tbl: [(ccule,
                       label: block_ccule_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccule: // global
           if (R1 & 7 == 1) goto ucumL; else goto ccumm;
       ucumL: // global
           Sp = Sp + 24;
           call _ccumD() args: 0, res: 0, upd: 0;
       ccumm: // global
           I64[Sp - 8] = block_cculk_info;
           _scspo::P64 = P64[R1 + 6];
           _scspp::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _scspp::P64;
           P64[Sp + 8] = _scspo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucumO; else goto ccull;
       ucumO: // global
           call _cculk(R1) args: 0, res: 0, upd: 0;
       ccull: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cculk() //  [R1]
         { info_tbl: [(cculk,
                       label: block_cculk_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cculk: // global
           if (R1 & 7 == 1) goto ucumM; else goto ccumz;
       ucumM: // global
           Sp = Sp + 32;
           call _ccumD() args: 0, res: 0, upd: 0;
       ccumz: // global
           I64[Sp - 8] = block_cculq_info;
           _scspr::P64 = P64[R1 + 6];
           _scsps::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp] = _scsps::P64;
           P64[Sp + 24] = _scspr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucumQ; else goto cculr;
       ucumQ: // global
           call _cculq(R1) args: 0, res: 0, upd: 0;
       cculr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cculq() //  [R1]
         { info_tbl: [(cculq,
                       label: block_cculq_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cculq: // global
           if (R1 & 7 == 1) goto ucumN; else goto ccumF;
       ucumN: // global
           Sp = Sp + 40;
           call _ccumD() args: 0, res: 0, upd: 0;
       ccumF: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccumI; else goto ccumH;
       ccumI: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccumH: // global
           _scspu::P64 = P64[R1 + 6];
           _scspv::P64 = P64[R1 + 14];
           I64[Hp - 96] = sat_scspB_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _scspv::P64;
           I64[Hp - 56] = sat_scspA_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _scspu::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccumD() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccumD: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.960342038 UTC

[section ""cstring" . lvl9_rcsn4_bytes" {
     lvl9_rcsn4_bytes:
         I8[] [32]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.962796209 UTC

[section ""data" . lvl10_rcsn5_closure" {
     lvl10_rcsn5_closure:
         const lvl10_rcsn5_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_rcsn5_entry() //  [R1]
         { info_tbl: [(ccunU,
                       label: lvl10_rcsn5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccunU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccunV; else goto ccunW;
       ccunV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccunW: // global
           (_ccunR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccunR::I64 == 0) goto ccunT; else goto ccunS;
       ccunT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccunS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccunR::I64;
           R2 = lvl5_rcsn0_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.96659325 UTC

[section ""cstring" . lvl11_rcsn6_bytes" {
     lvl11_rcsn6_bytes:
         I8[] [61]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:20.972354722 UTC

[section ""data" . System.Console.GetOpt.usageInfo1_closure" {
     System.Console.GetOpt.usageInfo1_closure:
         const System.Console.GetOpt.usageInfo1_info;
         const 0;
 },
 b2_scspL_entry() //  [R1]
         { info_tbl: [(ccuor,
                       label: b2_scspL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuor: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuos; else goto ccuot;
       ccuos: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuot: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuoo_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.usageInfo1_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuoo() //  [R1, R2, R3]
         { info_tbl: [(ccuoo,
                       label: block_ccuoo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuoo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccuow; else goto ccuov;
       ccuow: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuov: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scspX_entry() //  [R1]
         { info_tbl: [(ccuoQ,
                       label: sat_scspX_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuoQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuoR; else goto ccuoS;
       ccuoR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuoS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl9_rcsn4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsq1_entry() //  [R1]
         { info_tbl: [(ccup3,
                       label: sat_scsq1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccup3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccup4; else goto ccup5;
       ccup4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccup5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl10_rcsn5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsq2_entry() //  [R1]
         { info_tbl: [(ccup6,
                       label: sat_scsq2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccup6: // global
           _scsq2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccup7; else goto ccup8;
       ccup8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccupa; else goto ccup9;
       ccupa: // global
           HpAlloc = 24;
           goto ccup7;
       ccup7: // global
           R1 = _scsq2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccup9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsq2::P64;
           _scsq0::P64 = P64[_scsq2::P64 + 16];
           I64[Hp - 16] = sat_scsq1_info;
           P64[Hp] = _scsq0::P64;
           R3 = Hp - 16;
           R2 = lvl4_rcsmZ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsq4_entry() //  [R1, R2]
         { info_tbl: [(ccupg,
                       label: sat_scsq4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccupg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuph; else goto ccupi;
       ccuph: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccupi: // global
           I64[Sp - 16] = block_ccuoG_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucupx; else goto ccuoH;
       ucupx: // global
           call _ccuoG(R1) args: 0, res: 0, upd: 0;
       ccuoH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuoG() //  [R1]
         { info_tbl: [(ccuoG,
                       label: block_ccuoG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuoG: // global
           _scspR::P64 = P64[Sp + 8];
           _ccupf::P64 = R1 & 7;
           if (_ccupf::P64 < 3) goto ucupw; else goto ccupe;
       ucupw: // global
           if (_ccupf::P64 < 2) goto ccupc; else goto ccupd;
       ccupc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccupn; else goto ccupm;
       ccupn: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccupm: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scspR::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R3 = Hp - 14;
           R2 = lvl3_rcsmY_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccupd: // global
           Hp = Hp + 48;
           _scspS::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccupv; else goto ccupq;
       ccupq: // global
           _scspW::P64 = P64[_scspS::P64 + 14];
           I64[Hp - 40] = sat_scspX_info;
           P64[Hp - 24] = _scspW::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scspR::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = lvl3_rcsmY_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccupe: // global
           Hp = Hp + 48;
           _scspS::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccupv; else goto ccupu;
       ccupv: // global
           HpAlloc = 48;
           R1 = _scspS::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccupu: // global
           _scsq0::P64 = P64[_scspS::P64 + 13];
           I64[Hp - 40] = sat_scsq2_info;
           P64[Hp - 24] = _scsq0::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scspR::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = lvl3_rcsmY_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sosFmt_scspQ_entry() //  [R1]
         { info_tbl: [(ccupA,
                       label: sosFmt_scspQ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccupA: // global
           _scspQ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccupB; else goto ccupC;
       ccupC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccupE; else goto ccupD;
       ccupE: // global
           HpAlloc = 16;
           goto ccupB;
       ccupB: // global
           R1 = _scspQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccupD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scspQ::P64;
           _scspH::P64 = P64[_scspQ::P64 + 16];
           _scspJ::P64 = P64[_scspQ::P64 + 24];
           I64[Hp - 8] = sat_scsq4_info;
           P64[Hp] = _scspJ::P64;
           I64[Sp - 24] = block_ccupy_info;
           R3 = _scspH::P64;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccupy() //  [R1]
         { info_tbl: [(ccupy,
                       label: block_ccupy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccupy: // global
           R3 = R1;
           R2 = lvl2_rcsmX_closure+1;
           Sp = Sp + 8;
           call sepBy_rcsmW_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsqc_entry() //  [R1]
         { info_tbl: [(ccuq5,
                       label: sat_scsqc_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuq5: // global
           R3 = P64[R1 + 16];
           R2 = lvl11_rcsn6_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsqd_entry() //  [R1]
         { info_tbl: [(ccuq8,
                       label: sat_scsqd_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuq8: // global
           _scsqd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuq9; else goto ccuqa;
       ccuqa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuqc; else goto ccuqb;
       ccuqc: // global
           HpAlloc = 24;
           goto ccuq9;
       ccuq9: // global
           R1 = _scsqd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuqb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsqd::P64;
           _scsq7::P64 = P64[_scsqd::P64 + 16];
           _scsqb::P64 = P64[_scsqd::P64 + 24];
           I64[Hp - 16] = sat_scsqc_info;
           P64[Hp] = _scsqb::P64;
           R3 = Hp - 16;
           R2 = _scsq7::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsqg_entry() //  [R1]
         { info_tbl: [(ccuqr,
                       label: sat_scsqg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuqr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuqs; else goto ccuqt;
       ccuqs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuqt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl10_rcsn5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsqh_entry() //  [R1]
         { info_tbl: [(ccuqu,
                       label: sat_scsqh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuqu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuqy; else goto ccuqx;
       ccuqy: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuqx: // global
           _scsqf::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scsqg_info;
           P64[Hp] = _scsqf::P64;
           R3 = Hp - 16;
           R2 = lvl7_rcsn2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsqi_entry() //  [R1]
         { info_tbl: [(ccuqz,
                       label: sat_scsqi_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuqz: // global
           _scsqi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuqA; else goto ccuqB;
       ccuqB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuqD; else goto ccuqC;
       ccuqD: // global
           HpAlloc = 24;
           goto ccuqA;
       ccuqA: // global
           R1 = _scsqi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuqC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsqi::P64;
           _scsq7::P64 = P64[_scsqi::P64 + 16];
           _scsqf::P64 = P64[_scsqi::P64 + 24];
           I64[Hp - 16] = sat_scsqh_info;
           P64[Hp] = _scsqf::P64;
           R3 = Hp - 16;
           R2 = _scsq7::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsqj_entry() //  [R1, R2]
         { info_tbl: [(ccuqJ,
                       label: sat_scsqj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuqJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuqK; else goto ccuqL;
       ccuqK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccuqL: // global
           I64[Sp - 16] = block_ccupR_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucuqV; else goto ccupS;
       ucuqV: // global
           call _ccupR(R1) args: 0, res: 0, upd: 0;
       ccupS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccupR() //  [R1]
         { info_tbl: [(ccupR,
                       label: block_ccupR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccupR: // global
           _scsq7::P64 = P64[Sp + 8];
           _ccuqI::P64 = R1 & 7;
           if (_ccuqI::P64 < 3) goto ucuqU; else goto ccuqH;
       ucuqU: // global
           if (_ccuqI::P64 < 2) goto ccuqF; else goto ccuqG;
       ccuqF: // global
           R3 = _scsq7::P64;
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccuqG: // global
           Hp = Hp + 32;
           _scsq8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccuqT; else goto ccuqP;
       ccuqP: // global
           _scsqb::P64 = P64[_scsq8::P64 + 14];
           I64[Hp - 24] = sat_scsqd_info;
           P64[Hp - 8] = _scsq7::P64;
           P64[Hp] = _scsqb::P64;
           R3 = Hp - 24;
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccuqH: // global
           Hp = Hp + 32;
           _scsq8::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccuqT; else goto ccuqS;
       ccuqT: // global
           HpAlloc = 32;
           R1 = _scsq8::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuqS: // global
           _scsqf::P64 = P64[_scsq8::P64 + 13];
           I64[Hp - 24] = sat_scsqi_info;
           P64[Hp - 8] = _scsq7::P64;
           P64[Hp] = _scsqf::P64;
           R3 = Hp - 24;
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 losFmt_scsq6_entry() //  [R1]
         { info_tbl: [(ccuqY,
                       label: losFmt_scsq6_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuqY: // global
           _scsq6::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccuqZ; else goto ccur0;
       ccur0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccur2; else goto ccur1;
       ccur2: // global
           HpAlloc = 16;
           goto ccuqZ;
       ccuqZ: // global
           R1 = _scsq6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccur1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsq6::P64;
           _scspI::P64 = P64[_scsq6::P64 + 16];
           _scspJ::P64 = P64[_scsq6::P64 + 24];
           I64[Hp - 8] = sat_scsqj_info;
           P64[Hp] = _scspJ::P64;
           I64[Sp - 24] = block_ccuqW_info;
           R3 = _scspI::P64;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuqW() //  [R1]
         { info_tbl: [(ccuqW,
                       label: block_ccuqW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuqW: // global
           R3 = R1;
           R2 = lvl2_rcsmX_closure+1;
           Sp = Sp + 8;
           call sepBy_rcsmW_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 go_scsqH_entry() //  [R1, R2]
         { info_tbl: [(ccurr,
                       label: go_scsqH_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccurr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccurs; else goto ccurt;
       ccurs: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccurt: // global
           I64[Sp - 24] = block_ccurk_info;
           _scsqH::P64 = R1;
           _scspL::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _scspL::P64;
           P64[Sp - 8] = _scsqH::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucurK; else goto ccurl;
       ucurK: // global
           call _ccurk(R1) args: 0, res: 0, upd: 0;
       ccurl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccurk() //  [R1]
         { info_tbl: [(ccurk,
                       label: block_ccurk_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccurk: // global
           if (R1 & 7 == 1) goto ccuro; else goto ccurp;
       ccuro: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccurp: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto ccurJ; else goto ccurI;
       ccurJ: // global
           HpAlloc = 208;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccurI: // global
           _scsqK::P64 = P64[R1 + 6];
           _scsqL::P64 = P64[R1 + 14];
           I64[Hp - 200] = stg_ap_2_upd_info;
           P64[Hp - 184] = P64[Sp + 16];
           P64[Hp - 176] = _scsqL::P64;
           I64[Hp - 168] = stg_sel_2_upd_info;
           _ccurz::P64 = Hp - 200;
           P64[Hp - 152] = _ccurz::P64;
           I64[Hp - 144] = :_con_info;
           P64[Hp - 136] = _scsqK::P64;
           P64[Hp - 128] = Hp - 168;
           I64[Hp - 120] = stg_sel_1_upd_info;
           P64[Hp - 104] = _ccurz::P64;
           I64[Hp - 96] = :_con_info;
           P64[Hp - 88] = GHC.Types.[]_closure+1;
           P64[Hp - 80] = Hp - 120;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccurz::P64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           P64[Hp - 32] = Hp - 72;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 46;
           P64[Hp - 8] = Hp - 94;
           P64[Hp] = Hp - 142;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 ds1_scsqG_entry() //  [R1]
         { info_tbl: [(ccurL,
                       label: ds1_scsqG_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccurL: // global
           _scsqG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccurM; else goto ccurN;
       ccurN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccurP; else goto ccurO;
       ccurP: // global
           HpAlloc = 16;
           goto ccurM;
       ccurM: // global
           R1 = _scsqG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccurO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsqG::P64;
           _scspL::P64 = P64[_scsqG::P64 + 16];
           _scsqF::P64 = P64[_scsqG::P64 + 24];
           I64[Hp - 8] = go_scsqH_info;
           P64[Hp] = _scspL::P64;
           R2 = _scsqF::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call go_scsqH_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.usageInfo1_entry() //  [R2]
         { info_tbl: [(ccurU,
                       label: System.Console.GetOpt.usageInfo1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccurU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccurV; else goto ccurW;
       ccurV: // global
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccurW: // global
           I64[Sp - 8] = block_ccuo9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucusr; else goto ccuoa;
       ucusr: // global
           call _ccuo9(R1) args: 0, res: 0, upd: 0;
       ccuoa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuo9() //  [R1]
         { info_tbl: [(ccuo9,
                       label: block_ccuo9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuo9: // global
           if (R1 & 7 == 1) goto ccurR; else goto ccurS;
       ccurR: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccurS: // global
           I64[Sp - 8] = block_ccuof_info;
           _scspF::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scspF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucusq; else goto ccuog;
       ucusq: // global
           call _ccuof(R1) args: 0, res: 0, upd: 0;
       ccuog: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuof() //  [R1]
         { info_tbl: [(ccuof,
                       label: block_ccuof_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuof: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccus2; else goto ccus1;
       ccus2: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccus1: // global
           _scspH::P64 = P64[R1 + 7];
           _scspI::P64 = P64[R1 + 15];
           _scspJ::P64 = P64[R1 + 23];
           _scspK::P64 = P64[R1 + 31];
           I64[Hp - 80] = b2_scspL_info;
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = sosFmt_scspQ_info;
           P64[Hp - 40] = _scspH::P64;
           P64[Hp - 32] = _scspJ::P64;
           I64[Hp - 24] = losFmt_scsq6_info;
           P64[Hp - 8] = _scspI::P64;
           P64[Hp] = _scspJ::P64;
           I64[Sp - 16] = block_ccur6_info;
           R2 = _scspK::P64;
           P64[Sp - 8] = Hp - 24;
           P64[Sp] = Hp - 56;
           P64[Sp + 8] = Hp - 80;
           Sp = Sp - 16;
           call Data.OldList.lines_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccur6() //  [R1]
         { info_tbl: [(ccur6,
                       label: block_ccur6_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccur6: // global
           _ccuok::P64 = P64[Sp + 24];
           _ccuox::P64 = P64[Sp + 16];
           _ccupI::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccusb; else goto ccusl;
       ccusb: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccuse; else goto ccusd;
       ccuse: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccusd: // global
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _ccuok::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = GHC.Types.[]_closure+1;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccuok::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _ccupI::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccuok::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _ccuox::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccusl: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto ccuso; else goto ccusn;
       ccuso: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccusn: // global
           _scsqE::P64 = P64[R1 + 6];
           _scsqF::P64 = P64[R1 + 14];
           I64[Hp - 168] = ds1_scsqG_info;
           P64[Hp - 152] = _ccuok::P64;
           P64[Hp - 144] = _scsqF::P64;
           I64[Hp - 136] = stg_sel_2_upd_info;
           _ccurb::P64 = Hp - 168;
           P64[Hp - 120] = _ccurb::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _scsqE::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccurb::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _ccupI::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccurb::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _ccuox::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.02956561 UTC

[section ""data" . System.Console.GetOpt.usageInfo_closure" {
     System.Console.GetOpt.usageInfo_closure:
         const System.Console.GetOpt.usageInfo_info;
         const 0;
 },
 sat_scsru_entry() //  [R1]
         { info_tbl: [(ccuuL,
                       label: sat_scsru_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuuL: // global
           R2 = P64[R1 + 16];
           call System.Console.GetOpt.usageInfo_sameLen_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsrv_entry() //  [R1]
         { info_tbl: [(ccuuQ,
                       label: sat_scsrv_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuuQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccuuR; else goto ccuuS;
       ccuuR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuuS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuuF_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.usageInfo1_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuuF() //  [R1, R2, R3]
         { info_tbl: [(ccuuF,
                       label: block_ccuuF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuuF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuuV; else goto ccuuU;
       ccuuV: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuuU: // global
           I64[Hp - 16] = sat_scsru_info;
           P64[Hp] = R2;
           I64[Sp - 16] = block_ccuuO_info;
           R2 = R1;
           P64[Sp - 8] = R3;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_sameLen_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuuO() //  [R1]
         { info_tbl: [(ccuuO,
                       label: block_ccuuO_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuuO: // global
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = R1;
           Sp = Sp + 24;
           call System.Console.GetOpt.usageInfo_go2_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.usageInfo_entry() //  [R2, R3]
         { info_tbl: [(ccuv0,
                       label: System.Console.GetOpt.usageInfo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuv0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccuv4; else goto ccuv3;
       ccuv4: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuv3: // global
           I64[Hp - 40] = sat_scsrv_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           call Data.OldList.unlines_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.040527684 UTC

[section ""cstring" . lvl12_rcsn7_bytes" {
     lvl12_rcsn7_bytes:
         I8[] [111,112,116,105,111,110,32,96]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.042222597 UTC

[section ""cstring" . lvl13_rcsn8_bytes" {
     lvl13_rcsn8_bytes:
         I8[] [39,32,105,115,32,97,109,98,105,103,117,111,117,115,59,32,99,111,117,108,100,32,98,101,32,111,110,101,32,111,102,58]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.043922713 UTC

[section ""cstring" . lvl14_rcsn9_bytes" {
     lvl14_rcsn9_bytes:
         I8[] [39,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.045955425 UTC

[section ""cstring" . lvl15_rcsna_bytes" {
     lvl15_rcsna_bytes:
         I8[] [10]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.047898112 UTC

[section ""data" . lvl16_rcsnb_closure" {
     lvl16_rcsnb_closure:
         const lvl16_rcsnb_info;
         const 0;
         const 0;
         const 0;
 },
 lvl16_rcsnb_entry() //  [R1]
         { info_tbl: [(ccuvy,
                       label: lvl16_rcsnb_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuvy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuvz; else goto ccuvA;
       ccuvz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuvA: // global
           (_ccuvv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccuvv::I64 == 0) goto ccuvx; else goto ccuvw;
       ccuvx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccuvw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccuvv::I64;
           R2 = lvl15_rcsna_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.051834433 UTC

[section ""cstring" . System.Console.GetOpt.getOpt2_bytes" {
     System.Console.GetOpt.getOpt2_bytes:
         I8[] [117,110,114,101,99,111,103,110,105,122,101,100,32,111,112,116,105,111,110,32,96]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.053576064 UTC

[section ""cstring" . System.Console.GetOpt.getOpt1_bytes" {
     System.Console.GetOpt.getOpt1_bytes:
         I8[] [39,10]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.055947927 UTC

[section ""data" . lvl17_rcsnc_closure" {
     lvl17_rcsnc_closure:
         const lvl17_rcsnc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl17_rcsnc_entry() //  [R1]
         { info_tbl: [(ccuvQ,
                       label: lvl17_rcsnc_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuvQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuvR; else goto ccuvS;
       ccuvR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuvS: // global
           (_ccuvN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccuvN::I64 == 0) goto ccuvP; else goto ccuvO;
       ccuvP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccuvO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccuvN::I64;
           R2 = System.Console.GetOpt.getOpt1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.060519573 UTC

[section ""data" . System.Console.GetOpt.errUnrec_closure" {
     System.Console.GetOpt.errUnrec_closure:
         const System.Console.GetOpt.errUnrec_info;
         const 0;
 },
 sat_scsry_entry() //  [R1]
         { info_tbl: [(ccuw8,
                       label: sat_scsry_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuw8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuw9; else goto ccuwa;
       ccuw9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuwa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl17_rcsnc_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.errUnrec_entry() //  [R2]
         { info_tbl: [(ccuwb,
                       label: System.Console.GetOpt.errUnrec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuwb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuwf; else goto ccuwe;
       ccuwf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = System.Console.GetOpt.errUnrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccuwe: // global
           I64[Hp - 16] = sat_scsry_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = System.Console.GetOpt.getOpt2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.066089022 UTC

[section ""cstring" . lvl18_rcsnd_bytes" {
     lvl18_rcsnd_bytes:
         I8[] [39,32,100,111,101,115,110,39,116,32,97,108,108,111,119,32,97,110,32,97,114,103,117,109,101,110,116,10]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.067965278 UTC

[section ""data" . lvl19_rcsne_closure" {
     lvl19_rcsne_closure:
         const lvl19_rcsne_info;
 },
 lvl19_rcsne_entry() //  [R2, R3]
         { info_tbl: [(ccuwt,
                       label: lvl19_rcsne_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuwt: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           call Data.OldList.isPrefixOf_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.071753482 UTC

[section ""data" . lvl20_rcsnf_closure" {
     lvl20_rcsnf_closure:
         const lvl20_rcsnf_info;
 },
 lvl20_rcsnf_entry() //  [R2]
         { info_tbl: [(ccuwH,
                       label: lvl20_rcsnf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuwH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccuwI; else goto ccuwJ;
       ccuwI: // global
           R2 = R2;
           R1 = lvl20_rcsnf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccuwJ: // global
           I64[Sp - 8] = block_ccuwE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuwR; else goto ccuwF;
       ucuwR: // global
           call _ccuwE(R1) args: 0, res: 0, upd: 0;
       ccuwF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuwE() //  [R1]
         { info_tbl: [(ccuwE,
                       label: block_ccuwE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuwE: // global
           if (I64[R1 + 7] == 61) goto ccuwQ; else goto ccuwP;
       ccuwQ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuwP: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.077118021 UTC

[section ""data" . lvl21_rcsng_closure" {
     lvl21_rcsng_closure:
         const GHC.Types.C#_con_info;
         const 45;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.07899045 UTC

[section ""data" . lvl22_rcsnh_closure" {
     lvl22_rcsnh_closure:
         const lvl22_rcsnh_info;
         const 0;
         const 0;
         const 0;
 },
 lvl22_rcsnh_entry() //  [R1]
         { info_tbl: [(ccuxa,
                       label: lvl22_rcsnh_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuxa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuxb; else goto ccuxc;
       ccuxb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuxc: // global
           (_ccux7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccux7::I64 == 0) goto ccux9; else goto ccux8;
       ccux9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccux8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccux7::I64;
           R2 = lvl18_rcsnd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.083099276 UTC

[section ""cstring" . lvl23_rcsni_bytes" {
     lvl23_rcsni_bytes:
         I8[] [111,112,116,105,111,110,32,96,45,45]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.085342474 UTC

[section ""data" . poly_go_rcsnj_closure" {
     poly_go_rcsnj_closure:
         const poly_go_rcsnj_info;
 },
 sat_scsrM_entry() //  [R1]
         { info_tbl: [(ccuxE,
                       label: sat_scsrM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuxE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuxF; else goto ccuxG;
       ccuxF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuxG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go_rcsnj_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go_rcsnj_entry() //  [R2]
         { info_tbl: [(ccuxL,
                       label: poly_go_rcsnj_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuxL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuxM; else goto ccuxN;
       ccuxM: // global
           R2 = R2;
           R1 = poly_go_rcsnj_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccuxN: // global
           I64[Sp - 8] = block_ccuxp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuxW; else goto ccuxq;
       ucuxW: // global
           call _ccuxp(R1) args: 0, res: 0, upd: 0;
       ccuxq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuxp() //  [R1]
         { info_tbl: [(ccuxp,
                       label: block_ccuxp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuxp: // global
           if (R1 & 7 == 1) goto ccuxI; else goto ccuxJ;
       ccuxI: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuxJ: // global
           I64[Sp - 8] = block_ccuxv_info;
           _scsrG::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsrG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuxV; else goto ccuxw;
       ucuxV: // global
           call _ccuxv(R1) args: 0, res: 0, upd: 0;
       ccuxw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuxv() //  [R1]
         { info_tbl: [(ccuxv,
                       label: block_ccuxv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuxv: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccuxU; else goto ccuxT;
       ccuxU: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuxT: // global
           _scsrK::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_scsrM_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scsrK::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.095677424 UTC

[section ""data" . lvl24_rcsnk_closure" {
     lvl24_rcsnk_closure:
         const lvl24_rcsnk_info;
         const 0;
         const 0;
         const 0;
 },
 lvl24_rcsnk_entry() //  [R1]
         { info_tbl: [(ccuyq,
                       label: lvl24_rcsnk_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuyq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuyr; else goto ccuys;
       ccuyr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuys: // global
           (_ccuyn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccuyn::I64 == 0) goto ccuyp; else goto ccuyo;
       ccuyp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccuyo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccuyn::I64;
           R2 = lvl13_rcsn8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.100026058 UTC

[section ""data" . poly_go1_rcsnl_closure" {
     poly_go1_rcsnl_closure:
         const poly_go1_rcsnl_info;
 },
 sat_scsrW_entry() //  [R1]
         { info_tbl: [(ccuyT,
                       label: sat_scsrW_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuyT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuyU; else goto ccuyV;
       ccuyU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuyV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go1_rcsnl_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go1_rcsnl_entry() //  [R2]
         { info_tbl: [(ccuz0,
                       label: poly_go1_rcsnl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuz0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuz1; else goto ccuz2;
       ccuz1: // global
           R2 = R2;
           R1 = poly_go1_rcsnl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccuz2: // global
           I64[Sp - 8] = block_ccuyE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuzb; else goto ccuyF;
       ucuzb: // global
           call _ccuyE(R1) args: 0, res: 0, upd: 0;
       ccuyF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuyE() //  [R1]
         { info_tbl: [(ccuyE,
                       label: block_ccuyE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuyE: // global
           if (R1 & 7 == 1) goto ccuyX; else goto ccuyY;
       ccuyX: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuyY: // global
           I64[Sp - 8] = block_ccuyK_info;
           _scsrQ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsrQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuza; else goto ccuyL;
       ucuza: // global
           call _ccuyK(R1) args: 0, res: 0, upd: 0;
       ccuyL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuyK() //  [R1]
         { info_tbl: [(ccuyK,
                       label: block_ccuyK_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuyK: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccuz9; else goto ccuz8;
       ccuz9: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuz8: // global
           _scsrU::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_scsrW_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scsrU::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.132960077 UTC

[section ""data" . System.Console.GetOpt.$wgetOpt'_closure" {
     System.Console.GetOpt.$wgetOpt'_closure:
         const System.Console.GetOpt.$wgetOpt'_info;
         const 0;
 },
 ds_scss6_entry() //  [R1]
         { info_tbl: [(ccuA1,
                       label: ds_scss6_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuA1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuA2; else goto ccuA3;
       ccuA2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuA3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuzY_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuzY() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuzY,
                       label: block_ccuzY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuzY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuA6; else goto ccuA5;
       ccuA6: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuA5: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds_scssC_entry() //  [R1]
         { info_tbl: [(ccuAg,
                       label: ds_scssC_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuAg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuAh; else goto ccuAi;
       ccuAh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuAi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuAd_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuAd() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuAd,
                       label: block_ccuAd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuAd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuAl; else goto ccuAk;
       ccuAl: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuAk: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scssI_entry() //  [R1]
         { info_tbl: [(ccuAu,
                       label: sat_scssI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuAu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuAv; else goto ccuAw;
       ccuAv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuAw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds4_scste_entry() //  [R1]
         { info_tbl: [(ccuAT,
                       label: ds4_scste_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuAT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuAU; else goto ccuAV;
       ccuAU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuAV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuAQ_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuAQ() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuAQ,
                       label: block_ccuAQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuAQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuAY; else goto ccuAX;
       ccuAY: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuAX: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds4_scstK_entry() //  [R1]
         { info_tbl: [(ccuB8,
                       label: ds4_scstK_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuB8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuB9; else goto ccuBa;
       ccuB9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuBa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuB5_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuB5() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuB5,
                       label: block_ccuB5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuB5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuBd; else goto ccuBc;
       ccuBd: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuBc: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds4_scsui_entry() //  [R1]
         { info_tbl: [(ccuBx,
                       label: ds4_scsui_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuBx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuBy; else goto ccuBz;
       ccuBy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuBz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuBu_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuBu() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuBu,
                       label: block_ccuBu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuBu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuBC; else goto ccuBB;
       ccuBC: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuBB: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds4_scsuO_entry() //  [R1]
         { info_tbl: [(ccuBM,
                       label: ds4_scsuO_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuBM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuBN; else goto ccuBO;
       ccuBN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuBO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuBJ_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuBJ() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuBJ,
                       label: block_ccuBJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuBJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuBR; else goto ccuBQ;
       ccuBR: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuBQ: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go1_scsvA_entry() //  [R1, R2]
         { info_tbl: [(ccuCu,
                       label: go1_scsvA_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuCu: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccuCv; else goto ucuCU;
       ccuCv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ucuCU: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _ccuCk() args: 0, res: 0, upd: 0;
     }
 },
 _ccuCk() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuCk: // global
           I64[Sp - 24] = block_ccuCn_info;
           R1 = P64[Sp + 8];
           _scsvA::P64 = P64[Sp];
           P64[Sp - 16] = P64[_scsvA::P64 + 7];
           P64[Sp - 8] = P64[_scsvA::P64 + 15];
           I64[Sp + 8] = I64[_scsvA::P64 + 23];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucuCW; else goto ccuCo;
       ucuCW: // global
           call _ccuCn(R1) args: 0, res: 0, upd: 0;
       ccuCo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuCn() //  [R1]
         { info_tbl: [(ccuCn,
                       label: block_ccuCn_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuCn: // global
           if (R1 & 7 == 1) goto ccuCr; else goto ccuCs;
       ccuCr: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccuCs: // global
           I64[Sp] = block_ccuCC_info;
           _scsvE::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _scsvE::P64;
           if (R1 & 7 != 0) goto ucuCX; else goto ccuCE;
       ucuCX: // global
           call _ccuCC(R1) args: 0, res: 0, upd: 0;
       ccuCE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuCC() //  [R1]
         { info_tbl: [(ccuCC,
                       label: block_ccuCC_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuCC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccuCK; else goto ccuCJ;
       ccuCK: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuCJ: // global
           _scsvE::P64 = P64[Sp + 16];
           if (I64[Sp + 32] == I64[R1 + 7]) goto ccuCT; else goto ccuCO;
       ccuCT: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = _scsvE::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuCO: // global
           Hp = Hp - 56;
           P64[Sp + 32] = _scsvE::P64;
           Sp = Sp + 24;
           call _ccuCk() args: 0, res: 0, upd: 0;
     }
 },
 go_scsvp_entry() //  [R1, R2]
         { info_tbl: [(ccuD4,
                       label: go_scsvp_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuD4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccuD5; else goto ccuD6;
       ccuD5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccuD6: // global
           I64[Sp - 24] = block_ccuC6_info;
           _scsvp::P64 = R1;
           _scsvo::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _scsvo::I64;
           P64[Sp - 8] = _scsvp::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucuDe; else goto ccuC7;
       ucuDe: // global
           call _ccuC6(R1) args: 0, res: 0, upd: 0;
       ccuC7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuC6() //  [R1]
         { info_tbl: [(ccuC6,
                       label: block_ccuC6_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuC6: // global
           if (R1 & 7 == 1) goto ccuD1; else goto ccuD2;
       ccuD1: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuD2: // global
           I64[Sp - 8] = block_ccuCc_info;
           _scsvt::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsvt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuDd; else goto ccuCd;
       ucuDd: // global
           call _ccuCc(R1) args: 0, res: 0, upd: 0;
       ccuCd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuCc() //  [R1]
         { info_tbl: [(ccuCc,
                       label: block_ccuCc_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuCc: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccuDc; else goto ccuDb;
       ccuDc: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuDb: // global
           _scsvv::P64 = P64[R1 + 7];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = go1_scsvA_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = Hp - 56;
           I64[Hp] = I64[Sp + 16];
           R2 = _scsvv::P64;
           R1 = Hp - 23;
           Sp = Sp + 32;
           call go1_scsvA_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 ds8_scsvM_entry() //  [R1]
         { info_tbl: [(ccuDz,
                       label: ds8_scsvM_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuDz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuDA; else goto ccuDB;
       ccuDA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuDB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuDw_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuDw() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuDw,
                       label: block_ccuDw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuDw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuDE; else goto ccuDD;
       ccuDE: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuDD: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds8_scswl_entry() //  [R1]
         { info_tbl: [(ccuDQ,
                       label: ds8_scswl_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuDQ: // global
           _scswl::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccuDR; else goto ccuDS;
       ccuDS: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccuDU; else goto ccuDT;
       ccuDU: // global
           HpAlloc = 48;
           goto ccuDR;
       ccuDR: // global
           R1 = _scswl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuDT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scswl::P64;
           _scsrX::P64 = P64[_scswl::P64 + 16];
           _scsrY::P64 = P64[_scswl::P64 + 24];
           _scss2::P64 = P64[_scswl::P64 + 32];
           _scsvL::P64 = P64[_scswl::P64 + 40];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl21_rcsng_closure+1;
           P64[Hp - 24] = _scsvL::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = _scss2::P64;
           I64[Sp - 24] = block_ccuDN_info;
           R4 = Hp - 14;
           R3 = _scsrY::P64;
           R2 = _scsrX::P64;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuDN() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuDN,
                       label: block_ccuDN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuDN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuDX; else goto ccuDW;
       ccuDX: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuDW: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds10_scsx0_entry() //  [R1]
         { info_tbl: [(ccuEm,
                       label: ds10_scsx0_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuEm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuEn; else goto ccuEo;
       ccuEn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuEo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuEj_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuEj() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuEj,
                       label: block_ccuEj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuEj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuEr; else goto ccuEq;
       ccuEr: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuEq: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds10_scsxx_entry() //  [R1]
         { info_tbl: [(ccuED,
                       label: ds10_scsxx_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuED: // global
           _scsxx::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccuEE; else goto ccuEF;
       ccuEF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccuEH; else goto ccuEG;
       ccuEH: // global
           HpAlloc = 48;
           goto ccuEE;
       ccuEE: // global
           R1 = _scsxx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuEG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsxx::P64;
           _scsrX::P64 = P64[_scsxx::P64 + 16];
           _scsrY::P64 = P64[_scsxx::P64 + 24];
           _scss2::P64 = P64[_scsxx::P64 + 32];
           _scswZ::P64 = P64[_scsxx::P64 + 40];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl21_rcsng_closure+1;
           P64[Hp - 24] = _scswZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = _scss2::P64;
           I64[Sp - 24] = block_ccuEA_info;
           R4 = Hp - 14;
           R3 = _scsrY::P64;
           R2 = _scsrX::P64;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuEA() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuEA,
                       label: block_ccuEA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuEA: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuEK; else goto ccuEJ;
       ccuEK: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuEJ: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scsy8_entry() //  [R1]
         { info_tbl: [(ccuF4,
                       label: ds11_scsy8_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuF4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuF5; else goto ccuF6;
       ccuF5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuF6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuF1_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuF1() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuF1,
                       label: block_ccuF1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuF1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuF9; else goto ccuF8;
       ccuF9: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuF8: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsyy_entry() //  [R1]
         { info_tbl: [(ccuFr,
                       label: sat_scsyy_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuFr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuFs; else goto ccuFt;
       ccuFs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuFt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl16_rcsnb_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsyz_entry() //  [R1]
         { info_tbl: [(ccuFu,
                       label: sat_scsyz_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuFu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuFy; else goto ccuFx;
       ccuFy: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuFx: // global
           _scsy5::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scsyy_info;
           P64[Hp] = _scsy5::P64;
           R3 = Hp - 16;
           R2 = lvl14_rcsn9_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsyA_entry() //  [R1]
         { info_tbl: [(ccuFB,
                       label: sat_scsyA_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuFB: // global
           _scsyA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuFC; else goto ccuFD;
       ccuFD: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccuFF; else goto ccuFE;
       ccuFF: // global
           HpAlloc = 72;
           goto ccuFC;
       ccuFC: // global
           R1 = _scsyA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuFE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsyA::P64;
           _scsvm::P64 = P64[_scsyA::P64 + 16];
           _scsy5::P64 = P64[_scsyA::P64 + 24];
           I64[Hp - 64] = sat_scsyz_info;
           P64[Hp - 48] = _scsy5::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scsvm::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl21_rcsng_closure+1;
           P64[Hp] = Hp - 38;
           R3 = Hp - 64;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsyB_entry() //  [R1]
         { info_tbl: [(ccuFG,
                       label: sat_scsyB_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuFG: // global
           _scsyB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuFH; else goto ccuFI;
       ccuFI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccuFK; else goto ccuFJ;
       ccuFK: // global
           HpAlloc = 32;
           goto ccuFH;
       ccuFH: // global
           R1 = _scsyB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuFJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsyB::P64;
           _scsvm::P64 = P64[_scsyB::P64 + 16];
           _scsy5::P64 = P64[_scsyB::P64 + 24];
           I64[Hp - 24] = sat_scsyA_info;
           P64[Hp - 8] = _scsvm::P64;
           P64[Hp] = _scsy5::P64;
           R3 = Hp - 24;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scsyL_entry() //  [R1]
         { info_tbl: [(ccuFU,
                       label: ds11_scsyL_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuFU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuFV; else goto ccuFW;
       ccuFV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuFW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuFR_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuFR() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuFR,
                       label: block_ccuFR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuFR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuFZ; else goto ccuFY;
       ccuFZ: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuFY: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scszj_entry() //  [R1]
         { info_tbl: [(ccuG9,
                       label: ds11_scszj_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuG9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuGa; else goto ccuGb;
       ccuGa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuGb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuG6_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuG6() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuG6,
                       label: block_ccuG6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuG6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuGe; else goto ccuGd;
       ccuGe: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuGd: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scszS_entry() //  [R1]
         { info_tbl: [(ccuGt,
                       label: ds11_scszS_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuGt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuGu; else goto ccuGv;
       ccuGu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuGv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuGq_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuGq() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuGq,
                       label: block_ccuGq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuGq: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuGy; else goto ccuGx;
       ccuGy: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuGx: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scszY_entry() //  [R1]
         { info_tbl: [(ccuGH,
                       label: sat_scszY_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuGH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuGI; else goto ccuGJ;
       ccuGI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuGJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scsAq_entry() //  [R1]
         { info_tbl: [(ccuGT,
                       label: ds11_scsAq_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuGT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuGU; else goto ccuGV;
       ccuGU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuGV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuGQ_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuGQ() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuGQ,
                       label: block_ccuGQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuGQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuGY; else goto ccuGX;
       ccuGY: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuGX: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsAx_entry() //  [R1]
         { info_tbl: [(ccuH8,
                       label: sat_scsAx_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuH8: // global
           _scsAx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuH9; else goto ccuHa;
       ccuHa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccuHc; else goto ccuHb;
       ccuHc: // global
           HpAlloc = 16;
           goto ccuH9;
       ccuH9: // global
           R1 = _scsAx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuHb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsAx::P64;
           _scszP::P64 = P64[_scsAx::P64 + 16];
           _scszR::P64 = P64[_scsAx::P64 + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _scszR::P64;
           R2 = Hp - 6;
           R1 = _scszP::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds12_scsAZ_entry() //  [R1]
         { info_tbl: [(ccuHm,
                       label: ds12_scsAZ_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuHm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuHn; else goto ccuHo;
       ccuHn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuHo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuHj_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuHj() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuHj,
                       label: block_ccuHj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuHj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuHr; else goto ccuHq;
       ccuHr: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuHq: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsBp_entry() //  [R1]
         { info_tbl: [(ccuHH,
                       label: sat_scsBp_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuHH: // global
           _scsBp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuHI; else goto ccuHJ;
       ccuHJ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccuHL; else goto ccuHK;
       ccuHL: // global
           HpAlloc = 48;
           goto ccuHI;
       ccuHI: // global
           R1 = _scsBp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuHK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsBp::P64;
           _scsvm::P64 = P64[_scsBp::P64 + 16];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scsvm::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl21_rcsng_closure+1;
           P64[Hp] = Hp - 38;
           R3 = lvl24_rcsnk_closure;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsBq_entry() //  [R1]
         { info_tbl: [(ccuHM,
                       label: sat_scsBq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuHM: // global
           _scsBq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuHN; else goto ccuHO;
       ccuHO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuHQ; else goto ccuHP;
       ccuHQ: // global
           HpAlloc = 24;
           goto ccuHN;
       ccuHN: // global
           R1 = _scsBq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuHP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsBq::P64;
           _scsvm::P64 = P64[_scsBq::P64 + 16];
           I64[Hp - 16] = sat_scsBp_info;
           P64[Hp] = _scsvm::P64;
           R3 = Hp - 16;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsBr_entry() //  [R1]
         { info_tbl: [(ccuHR,
                       label: sat_scsBr_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuHR: // global
           _scsBr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuHS; else goto ccuHT;
       ccuHT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuHV; else goto ccuHU;
       ccuHV: // global
           HpAlloc = 24;
           goto ccuHS;
       ccuHS: // global
           R1 = _scsBr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuHU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsBr::P64;
           _scsvm::P64 = P64[_scsBr::P64 + 16];
           _scsvJ::P64 = P64[_scsBr::P64 + 24];
           I64[Hp - 16] = sat_scsBq_info;
           P64[Hp] = _scsvm::P64;
           R3 = _scsvJ::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsBC_entry() //  [R1]
         { info_tbl: [(ccuIc,
                       label: sat_scsBC_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuIc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuId; else goto ccuIe;
       ccuId: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuIe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 ds8_scsBF_entry() //  [R1]
         { info_tbl: [(ccuIo,
                       label: ds8_scsBF_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuIo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuIp; else goto ccuIq;
       ccuIp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuIq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuIl_info;
           R3 = P64[R1 + 16];
           R2 = lvl20_rcsnf_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuIl() //  [R1, R2]
         { info_tbl: [(ccuIl,
                       label: block_ccuIl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuIl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuIt; else goto ccuIs;
       ccuIt: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccuIs: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_scsBQ_entry() //  [R1, R2]
         { info_tbl: [(ccuIN,
                       label: go_scsBQ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuIN: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccuIO; else goto ucuJN;
       ccuIO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ucuJN: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _ccuID() args: 0, res: 0, upd: 0;
     }
 },
 _ccuID() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuID: // global
           _scsBP::P64 = P64[P64[Sp] + 7];
           I64[Sp - 8] = block_ccuIG_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scsBP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuJS; else goto ccuIH;
       ucuJS: // global
           call _ccuIG(R1) args: 0, res: 0, upd: 0;
       ccuIH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuIG() //  [R1]
         { info_tbl: [(ccuIG,
                       label: block_ccuIG_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuIG: // global
           if (R1 & 7 == 1) goto ccuIK; else goto ccuIL;
       ccuIK: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccuIL: // global
           I64[Sp - 8] = block_ccuIV_info;
           _scsBU::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scsBU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuJT; else goto ccuIX;
       ucuJT: // global
           call _ccuIV(R1) args: 0, res: 0, upd: 0;
       ccuIX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuIV() //  [R1]
         { info_tbl: [(ccuIV,
                       label: block_ccuIV_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuIV: // global
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _ccuJl() args: 0, res: 0, upd: 0;
     }
 },
 _ccuJl() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuJl: // global
           _scsC4::P64 = P64[Sp];
           I64[Sp] = block_ccuJn_info;
           R1 = _scsC4::P64;
           if (R1 & 7 != 0) goto ucuJW; else goto ccuJp;
       ucuJW: // global
           call _ccuJn(R1) args: 0, res: 0, upd: 0;
       ccuJp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuJn() //  [R1]
         { info_tbl: [(ccuJn,
                       label: block_ccuJn_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuJn: // global
           if (R1 & 7 == 1) goto ccuJv; else goto ccuJA;
       ccuJv: // global
           P64[Sp + 32] = P64[Sp + 16];
           Sp = Sp + 24;
           call _ccuID() args: 0, res: 0, upd: 0;
       ccuJA: // global
           I64[Sp - 8] = block_ccuJy_info;
           R2 = P64[R1 + 6];
           _scsC7::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _scsC7::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuJy() //  [R1]
         { info_tbl: [(ccuJy,
                       label: block_ccuJy_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuJy: // global
           if (R1 & 7 == 1) goto ccuJG; else goto ucuJP;
       ccuJG: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _ccuJl() args: 0, res: 0, upd: 0;
       ucuJP: // global
           Sp = Sp + 8;
           call _ccuJb() args: 0, res: 0, upd: 0;
     }
 },
 _ccuJb() //  []
         { info_tbl: [(ccuJb,
                       label: block_ccuJb_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuJb: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccuJh; else goto ccuJg;
       ccuJh: // global
           HpAlloc = 56;
           I64[Sp] = block_ccuJb_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       ccuJg: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 getWith_scsBN_entry() //  [R1, R2]
         { info_tbl: [(ccuK0,
                       label: getWith_scsBN_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuK0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccuK4; else goto ccuK3;
       ccuK4: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccuK3: // global
           _scsrY::P64 = P64[R1 + 7];
           _scsBJ::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = _scsBJ::P64;
           I64[Hp - 8] = go_scsBQ_info;
           P64[Hp] = Hp - 40;
           R2 = _scsrY::P64;
           R1 = Hp - 7;
           call go_scsBQ_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 ds9_scsCc_entry() //  [R1]
         { info_tbl: [(ccuKl,
                       label: ds9_scsCc_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuKl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuKm; else goto ccuKn;
       ccuKm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuKn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuKi_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuKi() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuKi,
                       label: block_ccuKi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuKi: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuKq; else goto ccuKp;
       ccuKq: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuKp: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsCu_entry() //  [R1]
         { info_tbl: [(ccuKx,
                       label: sat_scsCu_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuKx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuKy; else goto ccuKz;
       ccuKy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuKz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scsCR_entry() //  [R1]
         { info_tbl: [(ccuL3,
                       label: ds11_scsCR_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuL3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuL4; else goto ccuL5;
       ccuL4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuL5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuL0_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuL0() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuL0,
                       label: block_ccuL0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuL0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuL8; else goto ccuL7;
       ccuL8: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuL7: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scsDr_entry() //  [R1]
         { info_tbl: [(ccuLp,
                       label: ds15_scsDr_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuLp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuLq; else goto ccuLr;
       ccuLq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuLr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuLm_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuLm() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuLm,
                       label: block_ccuLm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuLm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuLu; else goto ccuLt;
       ccuLu: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuLt: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsDJ_entry() //  [R1]
         { info_tbl: [(ccuLB,
                       label: sat_scsDJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuLB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuLC; else goto ccuLD;
       ccuLC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuLD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scsDX_entry() //  [R1]
         { info_tbl: [(ccuLM,
                       label: ds15_scsDX_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuLM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuLN; else goto ccuLO;
       ccuLN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuLO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuLJ_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuLJ() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuLJ,
                       label: block_ccuLJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuLJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuLR; else goto ccuLQ;
       ccuLR: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuLQ: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsEl_entry() //  [R1]
         { info_tbl: [(ccuM1,
                       label: sat_scsEl_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuM1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuM2; else goto ccuM3;
       ccuM2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuM3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl22_rcsnh_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsEm_entry() //  [R1]
         { info_tbl: [(ccuM4,
                       label: sat_scsEm_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuM4: // global
           _scsEm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuM5; else goto ccuM6;
       ccuM6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuM8; else goto ccuM7;
       ccuM8: // global
           HpAlloc = 24;
           goto ccuM5;
       ccuM5: // global
           R1 = _scsEm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuM7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsEm::P64;
           _scsBJ::P64 = P64[_scsEm::P64 + 16];
           I64[Hp - 16] = sat_scsEl_info;
           P64[Hp] = _scsBJ::P64;
           R3 = Hp - 16;
           R2 = lvl23_rcsni_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds12_scsEB_entry() //  [R1]
         { info_tbl: [(ccuMx,
                       label: ds12_scsEB_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuMx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuMy; else goto ccuMz;
       ccuMy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuMz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuMu_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuMu() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuMu,
                       label: block_ccuMu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuMu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuMC; else goto ccuMB;
       ccuMC: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuMB: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsF0_entry() //  [R1]
         { info_tbl: [(ccuMU,
                       label: sat_scsF0_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuMU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuMV; else goto ccuMW;
       ccuMV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuMW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl16_rcsnb_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsF1_entry() //  [R1]
         { info_tbl: [(ccuMX,
                       label: sat_scsF1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuMX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuN1; else goto ccuN0;
       ccuN1: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuN0: // global
           _scsEv::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scsF0_info;
           P64[Hp] = _scsEv::P64;
           R3 = Hp - 16;
           R2 = lvl14_rcsn9_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsF2_entry() //  [R1]
         { info_tbl: [(ccuN4,
                       label: sat_scsF2_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuN4: // global
           _scsF2::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto ccuN5; else goto ccuN6;
       ccuN6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuN8; else goto ccuN7;
       ccuN8: // global
           HpAlloc = 24;
           goto ccuN5;
       ccuN5: // global
           R1 = _scsF2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuN7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsF2::P64;
           _scsBJ::P64 = P64[_scsF2::P64 + 16];
           _scsEv::P64 = P64[_scsF2::P64 + 24];
           I64[Hp - 16] = sat_scsF1_info;
           P64[Hp] = _scsEv::P64;
           I64[Sp - 32] = block_ccuN2_info;
           R3 = _scsBJ::P64;
           R2 = lvl6_rcsn1_bytes;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuN2() //  [R1]
         { info_tbl: [(ccuN2,
                       label: block_ccuN2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuN2: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsF3_entry() //  [R1]
         { info_tbl: [(ccuNc,
                       label: sat_scsF3_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuNc: // global
           _scsF3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuNd; else goto ccuNe;
       ccuNe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccuNg; else goto ccuNf;
       ccuNg: // global
           HpAlloc = 32;
           goto ccuNd;
       ccuNd: // global
           R1 = _scsF3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuNf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsF3::P64;
           _scsBJ::P64 = P64[_scsF3::P64 + 16];
           _scsEv::P64 = P64[_scsF3::P64 + 24];
           I64[Hp - 24] = sat_scsF2_info;
           P64[Hp - 8] = _scsBJ::P64;
           P64[Hp] = _scsEv::P64;
           R3 = Hp - 24;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds12_scsFd_entry() //  [R1]
         { info_tbl: [(ccuNq,
                       label: ds12_scsFd_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuNq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuNr; else goto ccuNs;
       ccuNr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuNs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuNn_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuNn() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuNn,
                       label: block_ccuNn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuNn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuNv; else goto ccuNu;
       ccuNv: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuNu: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scsFO_entry() //  [R1]
         { info_tbl: [(ccuNM,
                       label: ds15_scsFO_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuNM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuNN; else goto ccuNO;
       ccuNN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuNO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuNJ_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuNJ() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuNJ,
                       label: block_ccuNJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuNJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuNR; else goto ccuNQ;
       ccuNR: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuNQ: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsG6_entry() //  [R1]
         { info_tbl: [(ccuNY,
                       label: sat_scsG6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuNY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuNZ; else goto ccuO0;
       ccuNZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuO0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scsGk_entry() //  [R1]
         { info_tbl: [(ccuO9,
                       label: ds15_scsGk_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuO9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuOa; else goto ccuOb;
       ccuOa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuOb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuO6_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuO6() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuO6,
                       label: block_ccuO6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuO6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuOe; else goto ccuOd;
       ccuOe: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuOd: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds12_scsGW_entry() //  [R1]
         { info_tbl: [(ccuOy,
                       label: ds12_scsGW_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuOy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuOz; else goto ccuOA;
       ccuOz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuOA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuOv_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuOv() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuOv,
                       label: block_ccuOv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuOv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuOD; else goto ccuOC;
       ccuOD: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuOC: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsH2_entry() //  [R1]
         { info_tbl: [(ccuOM,
                       label: sat_scsH2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuOM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuON; else goto ccuOO;
       ccuON: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuOO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scsHx_entry() //  [R1]
         { info_tbl: [(ccuP5,
                       label: ds15_scsHx_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuP5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuP6; else goto ccuP7;
       ccuP6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuP7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuP2_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuP2() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuP2,
                       label: block_ccuP2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuP2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuPa; else goto ccuP9;
       ccuPa: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuP9: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsHP_entry() //  [R1]
         { info_tbl: [(ccuPh,
                       label: sat_scsHP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuPh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccuPi; else goto ccuPj;
       ccuPi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuPj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scsI3_entry() //  [R1]
         { info_tbl: [(ccuPs,
                       label: ds15_scsI3_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuPs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuPt; else goto ccuPu;
       ccuPt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuPu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuPp_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuPp() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuPp,
                       label: block_ccuPp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuPp: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuPx; else goto ccuPw;
       ccuPx: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuPw: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsIa_entry() //  [R1]
         { info_tbl: [(ccuPH,
                       label: sat_scsIa_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuPH: // global
           _scsIa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuPI; else goto ccuPJ;
       ccuPJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccuPL; else goto ccuPK;
       ccuPL: // global
           HpAlloc = 16;
           goto ccuPI;
       ccuPI: // global
           R1 = _scsIa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuPK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsIa::P64;
           _scsGQ::P64 = P64[_scsIa::P64 + 16];
           _scsHt::P64 = P64[_scsIa::P64 + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _scsHt::P64;
           R2 = Hp - 6;
           R1 = _scsGQ::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds13_scsIC_entry() //  [R1]
         { info_tbl: [(ccuPV,
                       label: ds13_scsIC_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuPV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuPW; else goto ccuPX;
       ccuPW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuPX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuPS_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuPS() //  [R1, R2, R3, R4]
         { info_tbl: [(ccuPS,
                       label: block_ccuPS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuPS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccuQ0; else goto ccuPZ;
       ccuQ0: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccuPZ: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsJ1_entry() //  [R1]
         { info_tbl: [(ccuQg,
                       label: sat_scsJ1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuQg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccuQh; else goto ccuQi;
       ccuQh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuQi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccuQe_info;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccuQe() //  [R1]
         { info_tbl: [(ccuQe,
                       label: block_ccuQe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuQe: // global
           R3 = lvl24_rcsnk_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsJ2_entry() //  [R1]
         { info_tbl: [(ccuQm,
                       label: sat_scsJ2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuQm: // global
           _scsJ2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuQn; else goto ccuQo;
       ccuQo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuQq; else goto ccuQp;
       ccuQq: // global
           HpAlloc = 24;
           goto ccuQn;
       ccuQn: // global
           R1 = _scsJ2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuQp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsJ2::P64;
           _scsBJ::P64 = P64[_scsJ2::P64 + 16];
           I64[Hp - 16] = sat_scsJ1_info;
           P64[Hp] = _scsBJ::P64;
           R3 = Hp - 16;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsJ3_entry() //  [R1]
         { info_tbl: [(ccuQr,
                       label: sat_scsJ3_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuQr: // global
           _scsJ3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccuQs; else goto ccuQt;
       ccuQt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuQv; else goto ccuQu;
       ccuQv: // global
           HpAlloc = 24;
           goto ccuQs;
       ccuQs: // global
           R1 = _scsJ3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccuQu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scsJ3::P64;
           _scsBJ::P64 = P64[_scsJ3::P64 + 16];
           _scsCa::P64 = P64[_scsJ3::P64 + 24];
           I64[Hp - 16] = sat_scsJ2_info;
           P64[Hp] = _scsBJ::P64;
           R3 = _scsCa::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.$wgetOpt'_entry() //  [R2, R3, R4]
         { info_tbl: [(ccuQA,
                       label: System.Console.GetOpt.$wgetOpt'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuQA: // global
           if ((Sp + -72) < SpLim) (likely: False) goto ccuQB; else goto ccuQC;
       ccuQB: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$wgetOpt'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuQC: // global
           I64[Sp - 24] = block_ccuzD_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucuXb; else goto ccuzE;
       ucuXb: // global
           call _ccuzD(R1) args: 0, res: 0, upd: 0;
       ccuzE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuzD() //  [R1]
         { info_tbl: [(ccuzD,
                       label: block_ccuzD_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuzD: // global
           if (R1 & 7 == 1) goto ccuQx; else goto ccuQy;
       ccuQx: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuQy: // global
           I64[Sp - 16] = block_ccuzJ_info;
           _scss0::P64 = R1;
           _scss2::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _scss2::P64;
           P64[Sp] = _scss0::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucuWH; else goto ccuzK;
       ucuWH: // global
           call _ccuzJ(R1) args: 0, res: 0, upd: 0;
       ccuzK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuzJ() //  [R1]
         { info_tbl: [(ccuzJ,
                       label: block_ccuzJ_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuzJ: // global
           if (R1 & 7 == 1) goto ccuQI; else goto ccuR5;
       ccuQI: // global
           I64[Sp] = block_ccuzO_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto ucuWI; else goto ccuzP;
       ucuWI: // global
           call _ccuzO(R1) args: 0, res: 0, upd: 0;
       ccuzP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuR5: // global
           I64[Sp - 16] = block_ccuAz_info;
           _scss3::P64 = R1;
           _scst9::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _scst9::P64;
           P64[Sp] = _scss3::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucuWJ; else goto ccuAA;
       ucuWJ: // global
           call _ccuAz(R1) args: 0, res: 0, upd: 0;
       ccuAA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuzO() //  [R1]
         { info_tbl: [(ccuzO,
                       label: block_ccuzO_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuzO: // global
           _scsrY::P64 = P64[Sp + 32];
           _scss2::P64 = P64[Sp + 8];
           _ccuWx::P64 = R1 & 7;
           if (_ccuWx::P64 < 3) goto ucuWy; else goto ccuR0;
       ucuWy: // global
           if (_ccuWx::P64 < 2) goto ccuQM; else goto ccuQV;
       ccuQM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccuQP; else goto ccuQO;
       ccuQP: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuQO: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = _scss2::P64;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuQV: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccuQY; else goto ccuQX;
       ccuQY: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuQX: // global
           I64[Hp - 144] = ds_scss6_info;
           P64[Hp - 128] = _scsrY::P64;
           P64[Hp - 120] = _scss2::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccuzU::P64 = Hp - 144;
           P64[Hp - 96] = _ccuzU::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccuzU::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccuzU::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuzU::P64;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuR0: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccuR3; else goto ccuR2;
       ccuR3: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuR2: // global
           _scssB::P64 = P64[R1 + 5];
           I64[Hp - 176] = ds_scssC_info;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           P64[Hp - 144] = R1;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccuA9::P64 = Hp - 176;
           P64[Hp - 120] = _ccuA9::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccuA9::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccuA9::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _ccuA9::P64;
           I64[Hp - 40] = sat_scssI_info;
           P64[Hp - 24] = _scssB::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R4 = Hp - 136;
           R3 = Hp - 112;
           R2 = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccuAz() //  [R1]
         { info_tbl: [(ccuAz,
                       label: block_ccuAz_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuAz: // global
           if (I64[R1 + 7] == 45) goto ccuRw; else goto ccuR8;
       ccuRw: // global
           _scst9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccuBf_info;
           R1 = _scst9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucuWL; else goto ccuBg;
       ucuWL: // global
           call _ccuBf(R1) args: 0, res: 0, upd: 0;
       ccuBg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuR8: // global
           I64[Sp + 8] = block_ccuAG_info;
           R1 = P64[Sp + 40];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucuWK; else goto ccuAH;
       ucuWK: // global
           call _ccuAG(R1) args: 0, res: 0, upd: 0;
       ccuAH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuBf() //  [R1]
         { info_tbl: [(ccuBf,
                       label: block_ccuBf_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuBf: // global
           if (R1 & 7 == 1) goto ccuRz; else goto ccuRY;
       ccuRz: // global
           I64[Sp] = block_ccuBk_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto ucuWN; else goto ccuBl;
       ucuWN: // global
           call _ccuBk(R1) args: 0, res: 0, upd: 0;
       ccuBl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuRY: // global
           I64[Sp + 8] = block_ccuBU_info;
           _scsvl::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _scsvl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucuWO; else goto ccuBV;
       ucuWO: // global
           call _ccuBU(R1) args: 0, res: 0, upd: 0;
       ccuBV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuBk() //  [R1]
         { info_tbl: [(ccuBk,
                       label: block_ccuBk_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuBk: // global
           _scsrY::P64 = P64[Sp + 40];
           _scss2::P64 = P64[Sp + 16];
           _scss3::P64 = P64[Sp + 8];
           _ccuWv::P64 = R1 & 7;
           if (_ccuWv::P64 < 3) goto ucuWA; else goto ccuRT;
       ucuWA: // global
           if (_ccuWv::P64 < 2) goto ucuWG; else goto ccuRJ;
       ucuWG: // global
           Sp = Sp + 24;
           call _ccuRD() args: 0, res: 0, upd: 0;
       ccuRJ: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccuRM; else goto ccuRL;
       ccuRM: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuRL: // global
           I64[Hp - 144] = ds4_scsui_info;
           P64[Hp - 128] = _scsrY::P64;
           P64[Hp - 120] = _scss2::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccuBq::P64 = Hp - 144;
           P64[Hp - 96] = _ccuBq::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccuBq::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccuBq::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scss3::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuBq::P64;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuRT: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuRW; else goto ccuRV;
       ccuRW: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuRV: // global
           _scsuN::P64 = P64[R1 + 5];
           I64[Hp - 184] = ds4_scsuO_info;
           P64[Hp - 168] = _scsrY::P64;
           P64[Hp - 160] = _scss2::P64;
           P64[Hp - 152] = R1;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuBF::P64 = Hp - 184;
           P64[Hp - 128] = _ccuBF::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuBF::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccuBF::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccuBF::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _scsuN::P64;
           P64[Hp - 24] = _scss3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccuBU() //  [R1]
         { info_tbl: [(ccuBU,
                       label: block_ccuBU_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuBU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccuS1; else goto ccuS0;
       ccuS1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuS0: // global
           _scsvo::I64 = I64[R1 + 7];
           if (_scsvo::I64 == 45) goto ccuTP; else goto ccuS3;
       ccuTP: // global
           Hp = Hp - 16;
           I64[Sp] = block_ccuHX_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto ucuWQ; else goto ccuHY;
       ucuWQ: // global
           call _ccuHX(R1) args: 0, res: 0, upd: 0;
       ccuHY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuS3: // global
           I64[Hp - 8] = go_scsvp_info;
           I64[Hp] = _scsvo::I64;
           I64[Sp - 8] = block_ccuDf_info;
           R2 = P64[Sp + 32];
           _scsvm::P64 = R1;
           R1 = Hp - 7;
           P64[Sp] = _scsvm::P64;
           Sp = Sp - 8;
           call go_scsvp_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuHX() //  [R1]
         { info_tbl: [(ccuHX,
                       label: block_ccuHX_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuHX: // global
           if (R1 & 7 == 1) goto ccuTS; else goto ccuU2;
       ccuTS: // global
           I64[Sp] = block_ccuI2_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto ucuWY; else goto ccuI3;
       ucuWY: // global
           call _ccuI2(R1) args: 0, res: 0, upd: 0;
       ccuI3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuU2: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccuU5; else goto ccuU4;
       ccuU5: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuU4: // global
           I64[Hp - 64] = ds8_scsBF_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_sel_0_upd_info;
           _ccuIh::P64 = Hp - 64;
           P64[Hp - 24] = _ccuIh::P64;
           I64[Hp - 16] = getWith_scsBN_info;
           P64[Hp - 8] = P64[Sp + 32];
           _ccuIu::P64 = Hp - 40;
           P64[Hp] = _ccuIu::P64;
           I64[Sp - 24] = block_ccuU1_info;
           R2 = GHC.Base.eqString_closure+2;
           _scsBz::P64 = R1;
           _ccuIv::P64 = Hp - 15;
           R1 = _ccuIv::P64;
           P64[Sp - 16] = _ccuIv::P64;
           P64[Sp - 8] = _scsBz::P64;
           P64[Sp] = _ccuIu::P64;
           P64[Sp + 16] = _ccuIh::P64;
           Sp = Sp - 24;
           call getWith_scsBN_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuI2() //  [R1]
         { info_tbl: [(ccuI2,
                       label: block_ccuI2_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuI2: // global
           _scss2::P64 = P64[Sp + 8];
           if (R1 & 7 == 3) goto ccuTX; else goto ccuTW;
       ccuTX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccuU0; else goto ccuTZ;
       ccuU0: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuTZ: // global
           _scsBB::P64 = P64[R1 + 5];
           I64[Hp - 24] = sat_scsBC_info;
           P64[Hp - 8] = _scss2::P64;
           P64[Hp] = _scsBB::P64;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 24;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuTW: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = _scss2::P64;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccuU1() //  [R1]
         { info_tbl: [(ccuU1,
                       label: block_ccuU1_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuU1: // global
           if (R1 & 7 == 1) goto ccuW2; else goto ccuWa;
       ccuW2: // global
           _ccuIv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccuVZ_info;
           R2 = lvl19_rcsne_closure+2;
           R1 = _ccuIv::P64;
           Sp = Sp + 8;
           call getWith_scsBN_entry(R2, R1) args: 8, res: 8, upd: 8;
       ccuWa: // global
           P64[Sp + 8] = R1;
           Sp = Sp + 8;
           call _scsC9() args: 0, res: 0, upd: 0;
     }
 },
 _ccuVZ() //  [R1]
         { info_tbl: [(ccuVZ,
                       label: block_ccuVZ_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuVZ: // global
           P64[Sp] = R1;
           call _scsC9() args: 0, res: 0, upd: 0;
     }
 },
 _scsC9() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       scsC9: // global
           I64[Sp - 8] = block_ccuKa_info;
           R2 = P64[Sp];
           Sp = Sp - 8;
           call poly_go_rcsnj_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccuKa() //  [R1]
         { info_tbl: [(ccuKa,
                       label: block_ccuKa_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuKa: // global
           if (R1 & 7 == 1) goto ccuUb; else goto ccuUg;
       ccuUb: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccuUe; else goto ccuUd;
       ccuUe: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuUd: // global
           I64[Hp - 176] = ds9_scsCc_info;
           P64[Hp - 160] = P64[Sp + 48];
           P64[Hp - 152] = P64[Sp + 56];
           P64[Hp - 144] = P64[Sp + 32];
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccuKe::P64 = Hp - 176;
           P64[Hp - 120] = _ccuKe::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccuKe::P64;
           I64[Hp - 88] = sat_scsCu_info;
           P64[Hp - 72] = P64[Sp + 16];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccuKe::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuKe::P64;
           R4 = Hp - 136;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuUg: // global
           I64[Sp - 8] = block_ccuKC_info;
           _scsCI::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scsCI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuWZ; else goto ccuKD;
       ucuWZ: // global
           call _ccuKC(R1) args: 0, res: 0, upd: 0;
       ccuKD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuKC() //  [R1]
         { info_tbl: [(ccuKC,
                       label: block_ccuKC_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuKC: // global
           if (R1 & 7 == 1) goto ccuUj; else goto ccuVS;
       ccuUj: // global
           I64[Sp + 16] = block_ccuKH_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ucuX0; else goto ccuKI;
       ucuX0: // global
           call _ccuKH(R1) args: 0, res: 0, upd: 0;
       ccuKI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuVS: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuVV; else goto ccuVU;
       ccuVV: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuVU: // global
           I64[Hp - 184] = ds13_scsIC_info;
           P64[Hp - 168] = P64[Sp + 56];
           P64[Hp - 160] = P64[Sp + 64];
           P64[Hp - 152] = P64[Sp + 40];
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuPO::P64 = Hp - 184;
           P64[Hp - 128] = _ccuPO::P64;
           I64[Hp - 120] = sat_scsJ3_info;
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccuPO::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccuPO::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuPO::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccuKH() //  [R1]
         { info_tbl: [(ccuKH,
                       label: block_ccuKH_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuKH: // global
           _ccuIh::P64 = P64[Sp + 32];
           _ccuWh::P64 = R1 & 7;
           if (_ccuWh::P64 < 3) goto ucuWC; else goto ccuVu;
       ucuWC: // global
           if (_ccuWh::P64 < 2) goto ccuUm; else goto ccuUO;
       ccuUm: // global
           I64[Sp] = block_ccuKM_info;
           _scsCM::P64 = P64[R1 + 7];
           R1 = _ccuIh::P64;
           P64[Sp + 32] = _scsCM::P64;
           if (R1 & 7 != 0) goto ucuX1; else goto ccuKN;
       ucuX1: // global
           call _ccuKM(R1) args: 0, res: 0, upd: 0;
       ccuKN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuUO: // global
           I64[Sp - 8] = block_ccuMb_info;
           _scsEu::P64 = P64[R1 + 6];
           _scsEv::P64 = P64[R1 + 14];
           R1 = _ccuIh::P64;
           P64[Sp] = _scsEv::P64;
           P64[Sp + 32] = _scsEu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuX2; else goto ccuMc;
       ucuX2: // global
           call _ccuMb(R1) args: 0, res: 0, upd: 0;
       ccuMc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuVu: // global
           I64[Sp] = block_ccuOh_info;
           _scsGQ::P64 = P64[R1 + 5];
           R1 = _ccuIh::P64;
           P64[Sp + 32] = _scsGQ::P64;
           if (R1 & 7 != 0) goto ucuX3; else goto ccuOi;
       ucuX3: // global
           call _ccuOh(R1) args: 0, res: 0, upd: 0;
       ccuOi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuKM() //  [R1]
         { info_tbl: [(ccuKM,
                       label: block_ccuKM_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuKM: // global
           I64[Sp] = block_ccuKR_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ucuX4; else goto ccuKS;
       ucuX4: // global
           call _ccuKR(R1) args: 0, res: 0, upd: 0;
       ccuKS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuKR() //  [R1]
         { info_tbl: [(ccuKR,
                       label: block_ccuKR_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuKR: // global
           if (R1 & 7 == 1) goto ccuUu; else goto ccuUz;
       ccuUu: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccuUx; else goto ccuUw;
       ccuUx: // global
           HpAlloc = 160;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuUw: // global
           I64[Hp - 152] = ds11_scsCR_info;
           P64[Hp - 136] = P64[Sp + 40];
           P64[Hp - 128] = P64[Sp + 48];
           P64[Hp - 120] = P64[Sp + 24];
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccuKW::P64 = Hp - 152;
           P64[Hp - 96] = _ccuKW::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccuKW::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccuKW::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccuKW::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = Hp - 40;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuUz: // global
           I64[Sp] = block_ccuLb_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucuX5; else goto ccuLc;
       ucuX5: // global
           call _ccuLb(R1) args: 0, res: 0, upd: 0;
       ccuLc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuLb() //  [R1]
         { info_tbl: [(ccuLb,
                       label: block_ccuLb_info
                       rep:StackRep [False, False, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuLb: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccuUC; else goto ccuUB;
       ccuUC: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuUB: // global
           _scsrX::P64 = P64[Sp + 40];
           _scsrY::P64 = P64[Sp + 48];
           _scss2::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 61) goto ccuUM; else goto ccuUH;
       ccuUM: // global
           I64[Hp - 176] = ds15_scsDX_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           P64[Hp - 144] = _scss2::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccuLF::P64 = Hp - 176;
           P64[Hp - 120] = _ccuLF::P64;
           I64[Hp - 112] = sat_scsEm_info;
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 112;
           P64[Hp - 72] = Hp - 136;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccuLF::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccuLF::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuLF::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuUH: // global
           I64[Hp - 176] = ds15_scsDr_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           P64[Hp - 144] = _scss2::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccuLi::P64 = Hp - 176;
           P64[Hp - 120] = _ccuLi::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccuLi::P64;
           I64[Hp - 88] = sat_scsDJ_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccuLi::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuLi::P64;
           R4 = Hp - 136;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccuMb() //  [R1]
         { info_tbl: [(ccuMb,
                       label: block_ccuMb_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuMb: // global
           I64[Sp] = block_ccuMg_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ucuX6; else goto ccuMh;
       ucuX6: // global
           call _ccuMg(R1) args: 0, res: 0, upd: 0;
       ccuMh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuMg() //  [R1]
         { info_tbl: [(ccuMg,
                       label: block_ccuMg_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuMg: // global
           if (R1 & 7 == 1) goto ccuUS; else goto ccuVd;
       ccuUS: // global
           I64[Sp] = block_ccuMl_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto ucuX7; else goto ccuMm;
       ucuX7: // global
           call _ccuMl(R1) args: 0, res: 0, upd: 0;
       ccuMm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuVd: // global
           I64[Sp + 8] = block_ccuNy_info;
           _scsFK::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _scsFK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucuX8; else goto ccuNz;
       ucuX8: // global
           call _ccuNy(R1) args: 0, res: 0, upd: 0;
       ccuNz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuMl() //  [R1]
         { info_tbl: [(ccuMl,
                       label: block_ccuMl_info
                       rep:StackRep [False, True, False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuMl: // global
           _scsrX::P64 = P64[Sp + 48];
           _scsrY::P64 = P64[Sp + 56];
           if (R1 & 7 == 1) goto ccuUY; else goto ccuV8;
       ccuUY: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccuV1; else goto ccuV0;
       ccuV1: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuV0: // global
           I64[Hp - 176] = ds12_scsEB_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuMq::P64 = Hp - 176;
           P64[Hp - 128] = _ccuMq::P64;
           I64[Hp - 120] = sat_scsF3_info;
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 8];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccuMq::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccuMq::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuMq::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuV8: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuVb; else goto ccuVa;
       ccuVb: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuVa: // global
           _scsFb::P64 = P64[R1 + 6];
           _scsFc::P64 = P64[R1 + 14];
           I64[Hp - 184] = ds12_scsFd_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scsFc::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuNj::P64 = Hp - 184;
           P64[Hp - 128] = _ccuNj::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuNj::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccuNj::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccuNj::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = _scsFb::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccuNy() //  [R1]
         { info_tbl: [(ccuNy,
                       label: block_ccuNy_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuNy: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuVg; else goto ccuVf;
       ccuVg: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuVf: // global
           _scsrX::P64 = P64[Sp + 40];
           _scsrY::P64 = P64[Sp + 48];
           _scss2::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 61) goto ccuVs; else goto ccuVl;
       ccuVs: // global
           I64[Hp - 184] = ds15_scsGk_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuO2::P64 = Hp - 184;
           P64[Hp - 128] = _ccuO2::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuO2::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccuO2::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccuO2::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuVl: // global
           I64[Hp - 184] = ds15_scsFO_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuNF::P64 = Hp - 184;
           P64[Hp - 128] = _ccuNF::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuNF::P64;
           I64[Hp - 96] = sat_scsG6_info;
           P64[Hp - 80] = P64[Sp + 8];
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           I64[Hp - 48] = stg_sel_1_upd_info;
           P64[Hp - 32] = _ccuNF::P64;
           I64[Hp - 24] = stg_sel_0_upd_info;
           P64[Hp - 8] = _ccuNF::P64;
           _ccuNS::P64 = Hp - 144;
           _ccuVh::P64 = Hp - 70;
           _ccuVi::P64 = Hp - 48;
           _ccuVj::P64 = Hp - 24;
           Hp = Hp - 8;
           R4 = _ccuNS::P64;
           R3 = _ccuVh::P64;
           R2 = _ccuVi::P64;
           R1 = _ccuVj::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccuOh() //  [R1]
         { info_tbl: [(ccuOh,
                       label: block_ccuOh_info
                       rep:StackRep [False, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuOh: // global
           I64[Sp] = block_ccuOm_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ucuX9; else goto ccuOn;
       ucuX9: // global
           call _ccuOm(R1) args: 0, res: 0, upd: 0;
       ccuOn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuOm() //  [R1]
         { info_tbl: [(ccuOm,
                       label: block_ccuOm_info
                       rep:StackRep [False, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuOm: // global
           if (R1 & 7 == 1) goto ccuVy; else goto ccuVD;
       ccuVy: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccuVB; else goto ccuVA;
       ccuVB: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuVA: // global
           I64[Hp - 176] = ds12_scsGW_info;
           P64[Hp - 160] = P64[Sp + 40];
           P64[Hp - 152] = P64[Sp + 48];
           P64[Hp - 144] = P64[Sp + 24];
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccuOr::P64 = Hp - 176;
           P64[Hp - 120] = _ccuOr::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccuOr::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccuOr::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _ccuOr::P64;
           I64[Hp - 40] = sat_scsH2_info;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R4 = Hp - 136;
           R3 = Hp - 112;
           R2 = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuVD: // global
           I64[Sp] = block_ccuOR_info;
           _scsHt::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _scsHt::P64;
           if (R1 & 7 != 0) goto ucuXa; else goto ccuOS;
       ucuXa: // global
           call _ccuOR(R1) args: 0, res: 0, upd: 0;
       ccuOS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuOR() //  [R1]
         { info_tbl: [(ccuOR,
                       label: block_ccuOR_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuOR: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuVG; else goto ccuVF;
       ccuVG: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuVF: // global
           _scsrX::P64 = P64[Sp + 40];
           _scsrY::P64 = P64[Sp + 48];
           _scss2::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 61) goto ccuVN; else goto ccuVL;
       ccuVN: // global
           I64[Hp - 184] = ds15_scsI3_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuPl::P64 = Hp - 184;
           P64[Hp - 128] = _ccuPl::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuPl::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccuPl::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccuPl::P64;
           I64[Hp - 48] = sat_scsIa_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuVL: // global
           I64[Hp - 184] = ds15_scsHx_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuOY::P64 = Hp - 184;
           P64[Hp - 128] = _ccuOY::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuOY::P64;
           I64[Hp - 96] = sat_scsHP_info;
           P64[Hp - 80] = P64[Sp + 8];
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           I64[Hp - 48] = stg_sel_1_upd_info;
           P64[Hp - 32] = _ccuOY::P64;
           I64[Hp - 24] = stg_sel_0_upd_info;
           P64[Hp - 8] = _ccuOY::P64;
           _ccuPb::P64 = Hp - 144;
           _ccuVH::P64 = Hp - 70;
           _ccuVI::P64 = Hp - 48;
           _ccuVJ::P64 = Hp - 24;
           Hp = Hp - 8;
           R4 = _ccuPb::P64;
           R3 = _ccuVH::P64;
           R2 = _ccuVI::P64;
           R1 = _ccuVJ::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccuDf() //  [R1]
         { info_tbl: [(ccuDf,
                       label: block_ccuDf_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuDf: // global
           I64[Sp - 8] = block_ccuDj_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call poly_go1_rcsnl_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccuDj() //  [R1]
         { info_tbl: [(ccuDj,
                       label: block_ccuDj_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuDj: // global
           if (R1 & 7 == 1) goto ccuS7; else goto ccuSw;
       ccuS7: // global
           I64[Sp + 8] = block_ccuDn_info;
           R1 = P64[Sp + 32];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucuWR; else goto ccuDo;
       ucuWR: // global
           call _ccuDn(R1) args: 0, res: 0, upd: 0;
       ccuDo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuSw: // global
           I64[Sp - 8] = block_ccuE0_info;
           _scswU::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scswU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuWS; else goto ccuE1;
       ucuWS: // global
           call _ccuE0(R1) args: 0, res: 0, upd: 0;
       ccuE1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuDn() //  [R1]
         { info_tbl: [(ccuDn,
                       label: block_ccuDn_info
                       rep:StackRep [False, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuDn: // global
           _scsrX::P64 = P64[Sp + 32];
           _scsrY::P64 = P64[Sp + 40];
           _scss2::P64 = P64[Sp + 16];
           _scsvm::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccuSg; else goto ccuSr;
       ccuSg: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto ccuSj; else goto ccuSi;
       ccuSj: // global
           HpAlloc = 208;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuSi: // global
           I64[Hp - 200] = ds8_scsvM_info;
           P64[Hp - 184] = _scsrX::P64;
           P64[Hp - 176] = _scsrY::P64;
           P64[Hp - 168] = _scss2::P64;
           I64[Hp - 160] = stg_sel_3_upd_info;
           _ccuDs::P64 = Hp - 200;
           P64[Hp - 144] = _ccuDs::P64;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _ccuDs::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _scsvm::P64;
           P64[Hp - 96] = GHC.Types.[]_closure+1;
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = lvl21_rcsng_closure+1;
           P64[Hp - 72] = Hp - 110;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 86;
           P64[Hp - 48] = Hp - 136;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccuDs::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuDs::P64;
           R4 = Hp - 160;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuSr: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto ccuSu; else goto ccuSt;
       ccuSu: // global
           HpAlloc = 216;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuSt: // global
           I64[Hp - 208] = ds8_scswl_info;
           P64[Hp - 192] = _scsrX::P64;
           P64[Hp - 184] = _scsrY::P64;
           P64[Hp - 176] = _scss2::P64;
           P64[Hp - 168] = R1;
           I64[Hp - 160] = stg_sel_3_upd_info;
           _ccuDH::P64 = Hp - 208;
           P64[Hp - 144] = _ccuDH::P64;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _ccuDH::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _scsvm::P64;
           P64[Hp - 96] = GHC.Types.[]_closure+1;
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = lvl21_rcsng_closure+1;
           P64[Hp - 72] = Hp - 110;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 86;
           P64[Hp - 48] = Hp - 136;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccuDH::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuDH::P64;
           R4 = Hp - 160;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccuE0() //  [R1]
         { info_tbl: [(ccuE0,
                       label: block_ccuE0_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuE0: // global
           if (R1 & 7 == 1) goto ccuSz; else goto ccuTL;
       ccuSz: // global
           I64[Sp + 16] = block_ccuE5_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ucuWT; else goto ccuE6;
       ucuWT: // global
           call _ccuE5(R1) args: 0, res: 0, upd: 0;
       ccuE6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuTL: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuTO; else goto ccuTN;
       ccuTO: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuTN: // global
           I64[Hp - 184] = ds12_scsAZ_info;
           P64[Hp - 168] = P64[Sp + 48];
           P64[Hp - 160] = P64[Sp + 56];
           P64[Hp - 152] = P64[Sp + 32];
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuHf::P64 = Hp - 184;
           P64[Hp - 128] = _ccuHf::P64;
           I64[Hp - 120] = sat_scsBr_info;
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccuHf::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccuHf::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuHf::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccuE5() //  [R1]
         { info_tbl: [(ccuE5,
                       label: block_ccuE5_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuE5: // global
           _scsvl::P64 = P64[Sp + 24];
           _ccuWp::P64 = R1 & 7;
           if (_ccuWp::P64 < 3) goto ucuWB; else goto ccuTv;
       ucuWB: // global
           if (_ccuWp::P64 < 2) goto ccuSC; else goto ccuSX;
       ccuSC: // global
           I64[Sp + 8] = block_ccuEa_info;
           _scswY::P64 = P64[R1 + 7];
           R1 = _scsvl::P64;
           P64[Sp + 24] = _scswY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucuWU; else goto ccuEb;
       ucuWU: // global
           call _ccuEa(R1) args: 0, res: 0, upd: 0;
       ccuEb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuSX: // global
           I64[Sp - 8] = block_ccuEN_info;
           _scsy4::P64 = P64[R1 + 6];
           _scsy5::P64 = P64[R1 + 14];
           R1 = _scsvl::P64;
           P64[Sp] = _scsy5::P64;
           P64[Sp + 24] = _scsy4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucuWV; else goto ccuEO;
       ucuWV: // global
           call _ccuEN(R1) args: 0, res: 0, upd: 0;
       ccuEO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuTv: // global
           I64[Sp + 8] = block_ccuGh_info;
           _scszP::P64 = P64[R1 + 5];
           R1 = _scsvl::P64;
           P64[Sp + 24] = _scszP::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucuWW; else goto ccuGi;
       ucuWW: // global
           call _ccuGh(R1) args: 0, res: 0, upd: 0;
       ccuGi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccuEa() //  [R1]
         { info_tbl: [(ccuEa,
                       label: block_ccuEa_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuEa: // global
           _scsrX::P64 = P64[Sp + 24];
           _scsrY::P64 = P64[Sp + 32];
           _scss2::P64 = P64[Sp + 8];
           _scswY::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto ccuSJ; else goto ccuSS;
       ccuSJ: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccuSM; else goto ccuSL;
       ccuSM: // global
           HpAlloc = 160;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuSL: // global
           I64[Hp - 152] = ds10_scsx0_info;
           P64[Hp - 136] = _scsrX::P64;
           P64[Hp - 128] = _scsrY::P64;
           P64[Hp - 120] = _scss2::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccuEf::P64 = Hp - 152;
           P64[Hp - 96] = _ccuEf::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccuEf::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccuEf::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccuEf::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scswY::P64;
           P64[Hp] = Hp - 40;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuSS: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccuSV; else goto ccuSU;
       ccuSV: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuSU: // global
           I64[Hp - 160] = ds10_scsxx_info;
           P64[Hp - 144] = _scsrX::P64;
           P64[Hp - 136] = _scsrY::P64;
           P64[Hp - 128] = _scss2::P64;
           P64[Hp - 120] = R1;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccuEu::P64 = Hp - 160;
           P64[Hp - 96] = _ccuEu::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccuEu::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccuEu::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccuEu::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scswY::P64;
           P64[Hp] = Hp - 40;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccuEN() //  [R1]
         { info_tbl: [(ccuEN,
                       label: block_ccuEN_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuEN: // global
           _scss2::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto ccuT0; else goto ccuTq;
       ccuT0: // global
           I64[Sp] = block_ccuES_info;
           R1 = _scss2::P64;
           if (R1 & 7 != 0) goto ucuWX; else goto ccuET;
       ucuWX: // global
           call _ccuES(R1) args: 0, res: 0, upd: 0;
       ccuET: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccuTq: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuTt; else goto ccuTs;
       ccuTt: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuTs: // global
           I64[Hp - 184] = ds11_scszj_info;
           P64[Hp - 168] = P64[Sp + 40];
           P64[Hp - 160] = P64[Sp + 48];
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuG2::P64 = Hp - 184;
           P64[Hp - 128] = _ccuG2::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuG2::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccuG2::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccuG2::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccuES() //  [R1]
         { info_tbl: [(ccuES,
                       label: block_ccuES_info
                       rep:StackRep [False, False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuES: // global
           _scsrX::P64 = P64[Sp + 40];
           _scsrY::P64 = P64[Sp + 48];
           if (R1 & 7 == 1) goto ccuT6; else goto ccuTg;
       ccuT6: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccuT9; else goto ccuT8;
       ccuT9: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuT8: // global
           I64[Hp - 176] = ds11_scsy8_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuEX::P64 = Hp - 176;
           P64[Hp - 128] = _ccuEX::P64;
           I64[Hp - 120] = sat_scsyB_info;
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 8];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccuEX::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccuEX::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuEX::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuTg: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuTj; else goto ccuTi;
       ccuTj: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuTi: // global
           _scsyJ::P64 = P64[R1 + 6];
           _scsyK::P64 = P64[R1 + 14];
           I64[Hp - 184] = ds11_scsyL_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scsyK::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuFN::P64 = Hp - 184;
           P64[Hp - 128] = _ccuFN::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuFN::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccuFN::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccuFN::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _scsyJ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccuGh() //  [R1]
         { info_tbl: [(ccuGh,
                       label: block_ccuGh_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuGh: // global
           _scsrX::P64 = P64[Sp + 24];
           _scsrY::P64 = P64[Sp + 32];
           _scss2::P64 = P64[Sp + 8];
           _scszP::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto ccuTy; else goto ccuTD;
       ccuTy: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccuTB; else goto ccuTA;
       ccuTB: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuTA: // global
           I64[Hp - 176] = ds11_scszS_info;
           P64[Hp - 160] = _scsrX::P64;
           P64[Hp - 152] = _scsrY::P64;
           P64[Hp - 144] = _scss2::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccuGm::P64 = Hp - 176;
           P64[Hp - 120] = _ccuGm::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccuGm::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccuGm::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _ccuGm::P64;
           I64[Hp - 40] = sat_scszY_info;
           P64[Hp - 24] = _scszP::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R4 = Hp - 136;
           R3 = Hp - 112;
           R2 = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuTD: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuTG; else goto ccuTF;
       ccuTG: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuTF: // global
           I64[Hp - 184] = ds11_scsAq_info;
           P64[Hp - 168] = _scsrX::P64;
           P64[Hp - 160] = _scsrY::P64;
           P64[Hp - 152] = _scss2::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuGM::P64 = Hp - 184;
           P64[Hp - 128] = _ccuGM::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuGM::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccuGM::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccuGM::P64;
           I64[Hp - 48] = sat_scsAx_info;
           P64[Hp - 32] = _scszP::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccuAG() //  [R1]
         { info_tbl: [(ccuAG,
                       label: block_ccuAG_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuAG: // global
           _scsrY::P64 = P64[Sp + 40];
           _scss2::P64 = P64[Sp + 16];
           _scss3::P64 = P64[Sp + 8];
           _ccuWw::P64 = R1 & 7;
           if (_ccuWw::P64 < 3) goto ucuWz; else goto ccuRs;
       ucuWz: // global
           if (_ccuWw::P64 < 2) goto ucuWD; else goto ccuRi;
       ucuWD: // global
           Sp = Sp + 24;
           call _ccuRD() args: 0, res: 0, upd: 0;
       ccuRi: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccuRl; else goto ccuRk;
       ccuRl: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuRk: // global
           I64[Hp - 144] = ds4_scste_info;
           P64[Hp - 128] = _scsrY::P64;
           P64[Hp - 120] = _scss2::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccuAM::P64 = Hp - 144;
           P64[Hp - 96] = _ccuAM::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccuAM::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccuAM::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scss3::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccuAM::P64;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccuRs: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccuRv; else goto ccuRu;
       ccuRv: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccuRu: // global
           _scstJ::P64 = P64[R1 + 5];
           I64[Hp - 184] = ds4_scstK_info;
           P64[Hp - 168] = _scsrY::P64;
           P64[Hp - 160] = _scss2::P64;
           P64[Hp - 152] = R1;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccuB1::P64 = Hp - 184;
           P64[Hp - 128] = _ccuB1::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccuB1::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccuB1::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccuB1::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _scstJ::P64;
           P64[Hp - 24] = _scss3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccuRD() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccuRD: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[Sp];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.441669024 UTC

[section ""data" . System.Console.GetOpt.getOpt'_closure" {
     System.Console.GetOpt.getOpt'_closure:
         const System.Console.GetOpt.getOpt'_info;
         const 0;
 },
 System.Console.GetOpt.getOpt'_entry() //  [R2, R3, R4]
         { info_tbl: [(ccv9l,
                       label: System.Console.GetOpt.getOpt'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccv9l: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccv9m; else goto ccv9n;
       ccv9m: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.getOpt'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccv9n: // global
           I64[Sp - 8] = block_ccv9i_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccv9i() //  [R1, R2, R3, R4]
         { info_tbl: [(ccv9i,
                       label: block_ccv9i_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccv9i: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccv9q; else goto ccv9p;
       ccv9q: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
       ccv9p: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.448189761 UTC

[section ""data" . System.Console.GetOpt.getOpt_closure" {
     System.Console.GetOpt.getOpt_closure:
         const System.Console.GetOpt.getOpt_info;
         const 0;
 },
 ds_scsJq_entry() //  [R1]
         { info_tbl: [(ccv9L,
                       label: ds_scsJq_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccv9L: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccv9M; else goto ccv9N;
       ccv9M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccv9N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccv9I_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccv9I() //  [R1, R2, R3, R4]
         { info_tbl: [(ccv9I,
                       label: block_ccv9I_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccv9I: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccv9Q; else goto ccv9P;
       ccv9Q: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccv9P: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scsJN_entry() //  [R1]
         { info_tbl: [(ccva4,
                       label: sat_scsJN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccva4: // global
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.errUnrec_closure+1;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scsJO_entry() //  [R1]
         { info_tbl: [(ccva7,
                       label: sat_scsJO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccva7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccva8; else goto ccva9;
       ccva8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccva9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccv9V_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucvad; else goto ccv9W;
       ucvad: // global
           call _ccv9V(R1) args: 0, res: 0, upd: 0;
       ccv9W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccv9V() //  [R1]
         { info_tbl: [(ccv9V,
                       label: block_ccv9V_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccv9V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccvac; else goto ccvab;
       ccvac: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccvab: // global
           _scsJL::P64 = P64[R1 + 23];
           _scsJM::P64 = P64[R1 + 31];
           I64[Hp - 16] = sat_scsJN_info;
           P64[Hp] = _scsJL::P64;
           R3 = Hp - 16;
           R2 = _scsJM::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.getOpt_entry() //  [R2, R3, R4]
         { info_tbl: [(ccvah,
                       label: System.Console.GetOpt.getOpt_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvah: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccval; else goto ccvak;
       ccval: // global
           HpAlloc = 144;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.getOpt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvak: // global
           I64[Hp - 136] = ds_scsJq_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           I64[Hp - 96] = sat_scsJO_info;
           _ccv9E::P64 = Hp - 136;
           P64[Hp - 80] = _ccv9E::P64;
           I64[Hp - 72] = stg_sel_1_upd_info;
           P64[Hp - 56] = _ccv9E::P64;
           I64[Hp - 48] = stg_sel_0_upd_info;
           P64[Hp - 32] = _ccv9E::P64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.462089251 UTC

[section ""cstring" . System.Console.GetOpt.$trModule4_bytes" {
     System.Console.GetOpt.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.463804518 UTC

[section ""data" . System.Console.GetOpt.$trModule3_closure" {
     System.Console.GetOpt.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.465820154 UTC

[section ""cstring" . System.Console.GetOpt.$trModule2_bytes" {
     System.Console.GetOpt.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.467500987 UTC

[section ""data" . System.Console.GetOpt.$trModule1_closure" {
     System.Console.GetOpt.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.469144548 UTC

[section ""data" . System.Console.GetOpt.$trModule_closure" {
     System.Console.GetOpt.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Console.GetOpt.$trModule3_closure+1;
         const System.Console.GetOpt.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.470987162 UTC

[section ""data" . $krep_rcsnm_closure" {
     $krep_rcsnm_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.472736472 UTC

[section ""data" . $krep1_rcsnn_closure" {
     $krep1_rcsnn_closure:
         const :_con_info;
         const $krep_rcsnm_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.474513783 UTC

[section ""data" . $krep2_rcsno_closure" {
     $krep2_rcsno_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_rcsnn_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.476279096 UTC

[section ""data" . $krep3_rcsnp_closure" {
     $krep3_rcsnp_closure:
         const :_con_info;
         const $krep2_rcsno_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.478686337 UTC

[section ""data" . $krep4_rcsnq_closure" {
     $krep4_rcsnq_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep3_rcsnp_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.480462781 UTC

[section ""data" . $krep5_rcsnr_closure" {
     $krep5_rcsnr_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep3_rcsnp_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.482232166 UTC

[section ""data" . $krep6_rcsns_closure" {
     $krep6_rcsns_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.484440428 UTC

[section ""data" . $krep7_rcsnt_closure" {
     $krep7_rcsnt_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep6_rcsns_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.486334896 UTC

[section ""data" . $krep8_rcsnu_closure" {
     $krep8_rcsnu_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rcsnq_closure+1;
         const $krep6_rcsns_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.488075503 UTC

[section ""cstring" . System.Console.GetOpt.$tcArgOrder2_bytes" {
     System.Console.GetOpt.$tcArgOrder2_bytes:
         I8[] [65,114,103,79,114,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.490321034 UTC

[section ""data" . System.Console.GetOpt.$tcArgOrder1_closure" {
     System.Console.GetOpt.$tcArgOrder1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcArgOrder2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.492002399 UTC

[section ""data" . System.Console.GetOpt.$tcArgOrder_closure" {
     System.Console.GetOpt.$tcArgOrder_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcArgOrder1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 2821249393238363172;
         const 5857765806309969278;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.493835618 UTC

[section ""data" . $krep9_rcsnv_closure" {
     $krep9_rcsnv_closure:
         const :_con_info;
         const $krep6_rcsns_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.495499746 UTC

[section ""data" . System.Console.GetOpt.$tc'Permute1_closure" {
     System.Console.GetOpt.$tc'Permute1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcArgOrder_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.497208971 UTC

[section ""cstring" . System.Console.GetOpt.$tc'RequireOrder2_bytes" {
     System.Console.GetOpt.$tc'RequireOrder2_bytes:
         I8[] [39,82,101,113,117,105,114,101,79,114,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.498907408 UTC

[section ""data" . System.Console.GetOpt.$tc'RequireOrder1_closure" {
     System.Console.GetOpt.$tc'RequireOrder1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'RequireOrder2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.500658005 UTC

[section ""data" . System.Console.GetOpt.$tc'RequireOrder_closure" {
     System.Console.GetOpt.$tc'RequireOrder_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'RequireOrder1_closure+1;
         const System.Console.GetOpt.$tc'Permute1_closure+1;
         const 16641478699741903091;
         const 17241976392395699271;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.502980786 UTC

[section ""cstring" . System.Console.GetOpt.$tc'Permute3_bytes" {
     System.Console.GetOpt.$tc'Permute3_bytes:
         I8[] [39,80,101,114,109,117,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.504701148 UTC

[section ""data" . System.Console.GetOpt.$tc'Permute2_closure" {
     System.Console.GetOpt.$tc'Permute2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'Permute3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.506438798 UTC

[section ""data" . System.Console.GetOpt.$tc'Permute_closure" {
     System.Console.GetOpt.$tc'Permute_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'Permute2_closure+1;
         const System.Console.GetOpt.$tc'Permute1_closure+1;
         const 16188869008381252759;
         const 7304126484053682933;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.508282631 UTC

[section ""data" . System.Console.GetOpt.$tc'ReturnInOrder1_closure" {
     System.Console.GetOpt.$tc'ReturnInOrder1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rcsnt_closure+4;
         const System.Console.GetOpt.$tc'Permute1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.510096881 UTC

[section ""cstring" . System.Console.GetOpt.$tc'ReturnInOrder3_bytes" {
     System.Console.GetOpt.$tc'ReturnInOrder3_bytes:
         I8[] [39,82,101,116,117,114,110,73,110,79,114,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.512404474 UTC

[section ""data" . System.Console.GetOpt.$tc'ReturnInOrder2_closure" {
     System.Console.GetOpt.$tc'ReturnInOrder2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'ReturnInOrder3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.514570627 UTC

[section ""data" . System.Console.GetOpt.$tc'ReturnInOrder_closure" {
     System.Console.GetOpt.$tc'ReturnInOrder_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'ReturnInOrder2_closure+1;
         const System.Console.GetOpt.$tc'ReturnInOrder1_closure+4;
         const 11429107017830306662;
         const 977062333259332084;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.516528782 UTC

[section ""cstring" . System.Console.GetOpt.$tcArgDescr2_bytes" {
     System.Console.GetOpt.$tcArgDescr2_bytes:
         I8[] [65,114,103,68,101,115,99,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.518329765 UTC

[section ""data" . System.Console.GetOpt.$tcArgDescr1_closure" {
     System.Console.GetOpt.$tcArgDescr1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcArgDescr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.520082493 UTC

[section ""data" . System.Console.GetOpt.$tcArgDescr_closure" {
     System.Console.GetOpt.$tcArgDescr_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcArgDescr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5371299798435897528;
         const 4777542234116424858;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.522015381 UTC

[section ""data" . $krep10_rcsnw_closure" {
     $krep10_rcsnw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcArgDescr_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.523754581 UTC

[section ""data" . System.Console.GetOpt.$tc'NoArg1_closure" {
     System.Console.GetOpt.$tc'NoArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcsns_closure+2;
         const $krep10_rcsnw_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.526008239 UTC

[section ""cstring" . System.Console.GetOpt.$tc'NoArg3_bytes" {
     System.Console.GetOpt.$tc'NoArg3_bytes:
         I8[] [39,78,111,65,114,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.527705844 UTC

[section ""data" . System.Console.GetOpt.$tc'NoArg2_closure" {
     System.Console.GetOpt.$tc'NoArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'NoArg3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.529478686 UTC

[section ""data" . System.Console.GetOpt.$tc'NoArg_closure" {
     System.Console.GetOpt.$tc'NoArg_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'NoArg2_closure+1;
         const System.Console.GetOpt.$tc'NoArg1_closure+4;
         const 4447437708857855473;
         const 9938854276741266046;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.531437835 UTC

[section ""data" . $krep11_rcsnx_closure" {
     $krep11_rcsnx_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep10_rcsnw_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.533282527 UTC

[section ""data" . System.Console.GetOpt.$tc'OptArg1_closure" {
     System.Console.GetOpt.$tc'OptArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rcsnu_closure+4;
         const $krep11_rcsnx_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.535087519 UTC

[section ""cstring" . System.Console.GetOpt.$tc'OptArg3_bytes" {
     System.Console.GetOpt.$tc'OptArg3_bytes:
         I8[] [39,79,112,116,65,114,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.536798323 UTC

[section ""data" . System.Console.GetOpt.$tc'OptArg2_closure" {
     System.Console.GetOpt.$tc'OptArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'OptArg3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.53920597 UTC

[section ""data" . System.Console.GetOpt.$tc'OptArg_closure" {
     System.Console.GetOpt.$tc'OptArg_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'OptArg2_closure+1;
         const System.Console.GetOpt.$tc'OptArg1_closure+4;
         const 2223072509852051452;
         const 11632957215606156764;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.54105269 UTC

[section ""data" . System.Console.GetOpt.$tc'ReqArg1_closure" {
     System.Console.GetOpt.$tc'ReqArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rcsnt_closure+4;
         const $krep11_rcsnx_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.542910628 UTC

[section ""cstring" . System.Console.GetOpt.$tc'ReqArg3_bytes" {
     System.Console.GetOpt.$tc'ReqArg3_bytes:
         I8[] [39,82,101,113,65,114,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.544571761 UTC

[section ""data" . System.Console.GetOpt.$tc'ReqArg2_closure" {
     System.Console.GetOpt.$tc'ReqArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'ReqArg3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.546378905 UTC

[section ""data" . System.Console.GetOpt.$tc'ReqArg_closure" {
     System.Console.GetOpt.$tc'ReqArg_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'ReqArg2_closure+1;
         const System.Console.GetOpt.$tc'ReqArg1_closure+4;
         const 16427330633826478147;
         const 15179110347223027838;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.548201096 UTC

[section ""cstring" . System.Console.GetOpt.$tcOptDescr2_bytes" {
     System.Console.GetOpt.$tcOptDescr2_bytes:
         I8[] [79,112,116,68,101,115,99,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.549965064 UTC

[section ""data" . System.Console.GetOpt.$tcOptDescr1_closure" {
     System.Console.GetOpt.$tcOptDescr1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcOptDescr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.55172329 UTC

[section ""data" . System.Console.GetOpt.$tcOptDescr_closure" {
     System.Console.GetOpt.$tcOptDescr_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcOptDescr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5602371009437266142;
         const 11022077518484673144;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.554369327 UTC

[section ""data" . $krep12_rcsny_closure" {
     $krep12_rcsny_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcOptDescr_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.556158102 UTC

[section ""data" . $krep13_rcsnz_closure" {
     $krep13_rcsnz_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep12_rcsny_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.558062703 UTC

[section ""data" . $krep14_rcsnA_closure" {
     $krep14_rcsnA_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcsnw_closure+1;
         const $krep13_rcsnz_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.559864823 UTC

[section ""data" . $krep15_rcsnB_closure" {
     $krep15_rcsnB_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcsnr_closure+1;
         const $krep14_rcsnA_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.561712064 UTC

[section ""data" . System.Console.GetOpt.$tc'Option1_closure" {
     System.Console.GetOpt.$tc'Option1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep15_rcsnB_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.563519804 UTC

[section ""cstring" . System.Console.GetOpt.$tc'Option3_bytes" {
     System.Console.GetOpt.$tc'Option3_bytes:
         I8[] [39,79,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.565763597 UTC

[section ""data" . System.Console.GetOpt.$tc'Option2_closure" {
     System.Console.GetOpt.$tc'Option2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'Option3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.567559867 UTC

[section ""data" . System.Console.GetOpt.$tc'Option_closure" {
     System.Console.GetOpt.$tc'Option_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'Option2_closure+1;
         const System.Console.GetOpt.$tc'Option1_closure+4;
         const 10066039264625497029;
         const 5674636120141944492;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.569479965 UTC

[section ""cstring" . System.Console.GetOpt.$tcOptKind2_bytes" {
     System.Console.GetOpt.$tcOptKind2_bytes:
         I8[] [79,112,116,75,105,110,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.571190181 UTC

[section ""data" . System.Console.GetOpt.$tcOptKind1_closure" {
     System.Console.GetOpt.$tcOptKind1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcOptKind2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.572867623 UTC

[section ""data" . System.Console.GetOpt.$tcOptKind_closure" {
     System.Console.GetOpt.$tcOptKind_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcOptKind1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5196380470096609574;
         const 4174335291028142741;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.57526174 UTC

[section ""data" . System.Console.GetOpt.$tc'EndOfOpts1_closure" {
     System.Console.GetOpt.$tc'EndOfOpts1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcOptKind_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.577121109 UTC

[section ""cstring" . System.Console.GetOpt.$tc'EndOfOpts3_bytes" {
     System.Console.GetOpt.$tc'EndOfOpts3_bytes:
         I8[] [39,69,110,100,79,102,79,112,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.578940169 UTC

[section ""data" . System.Console.GetOpt.$tc'EndOfOpts2_closure" {
     System.Console.GetOpt.$tc'EndOfOpts2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'EndOfOpts3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.580750974 UTC

[section ""data" . System.Console.GetOpt.$tc'EndOfOpts_closure" {
     System.Console.GetOpt.$tc'EndOfOpts_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'EndOfOpts2_closure+1;
         const System.Console.GetOpt.$tc'EndOfOpts1_closure+1;
         const 16241379069650497856;
         const 7399561775253491405;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.582716365 UTC

[section ""data" . System.Console.GetOpt.$tc'Opt1_closure" {
     System.Console.GetOpt.$tc'Opt1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcsns_closure+2;
         const System.Console.GetOpt.$tc'EndOfOpts1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.584493994 UTC

[section ""cstring" . System.Console.GetOpt.$tc'Opt3_bytes" {
     System.Console.GetOpt.$tc'Opt3_bytes:
         I8[] [39,79,112,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.586288567 UTC

[section ""data" . System.Console.GetOpt.$tc'Opt2_closure" {
     System.Console.GetOpt.$tc'Opt2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'Opt3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.588038308 UTC

[section ""data" . System.Console.GetOpt.$tc'Opt_closure" {
     System.Console.GetOpt.$tc'Opt_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'Opt2_closure+1;
         const System.Console.GetOpt.$tc'Opt1_closure+4;
         const 2387467460439073880;
         const 875868993959501908;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.590557556 UTC

[section ""data" . System.Console.GetOpt.$tc'NonOpt1_closure" {
     System.Console.GetOpt.$tc'NonOpt1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const System.Console.GetOpt.$tc'EndOfOpts1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.592811596 UTC

[section ""cstring" . System.Console.GetOpt.$tc'UnreqOpt2_bytes" {
     System.Console.GetOpt.$tc'UnreqOpt2_bytes:
         I8[] [39,85,110,114,101,113,79,112,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.594603153 UTC

[section ""data" . System.Console.GetOpt.$tc'UnreqOpt1_closure" {
     System.Console.GetOpt.$tc'UnreqOpt1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'UnreqOpt2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.596444267 UTC

[section ""data" . System.Console.GetOpt.$tc'UnreqOpt_closure" {
     System.Console.GetOpt.$tc'UnreqOpt_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'UnreqOpt1_closure+1;
         const System.Console.GetOpt.$tc'NonOpt1_closure+4;
         const 6747281843324563502;
         const 13162655807375334605;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.598336622 UTC

[section ""cstring" . System.Console.GetOpt.$tc'NonOpt3_bytes" {
     System.Console.GetOpt.$tc'NonOpt3_bytes:
         I8[] [39,78,111,110,79,112,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.600005383 UTC

[section ""data" . System.Console.GetOpt.$tc'NonOpt2_closure" {
     System.Console.GetOpt.$tc'NonOpt2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'NonOpt3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.60211459 UTC

[section ""data" . System.Console.GetOpt.$tc'NonOpt_closure" {
     System.Console.GetOpt.$tc'NonOpt_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'NonOpt2_closure+1;
         const System.Console.GetOpt.$tc'NonOpt1_closure+4;
         const 17187900375792953920;
         const 18196243003688324985;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.603963817 UTC

[section ""cstring" . System.Console.GetOpt.$tc'OptErr2_bytes" {
     System.Console.GetOpt.$tc'OptErr2_bytes:
         I8[] [39,79,112,116,69,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.605662824 UTC

[section ""data" . System.Console.GetOpt.$tc'OptErr1_closure" {
     System.Console.GetOpt.$tc'OptErr1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'OptErr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.607389767 UTC

[section ""data" . System.Console.GetOpt.$tc'OptErr_closure" {
     System.Console.GetOpt.$tc'OptErr_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'OptErr1_closure+1;
         const System.Console.GetOpt.$tc'NonOpt1_closure+4;
         const 13165663139815598038;
         const 5639435123785572420;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.609550724 UTC

[section ""data" . System.Console.GetOpt.Opt_closure" {
     System.Console.GetOpt.Opt_closure:
         const System.Console.GetOpt.Opt_info;
 },
 System.Console.GetOpt.Opt_entry() //  [R2]
         { info_tbl: [(ccvc8,
                       label: System.Console.GetOpt.Opt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvc8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvcc; else goto ccvcb;
       ccvcc: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.Opt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvcb: // global
           I64[Hp - 8] = System.Console.GetOpt.Opt_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.613892218 UTC

[section ""data" . System.Console.GetOpt.UnreqOpt_closure" {
     System.Console.GetOpt.UnreqOpt_closure:
         const System.Console.GetOpt.UnreqOpt_info;
 },
 System.Console.GetOpt.UnreqOpt_entry() //  [R2]
         { info_tbl: [(ccvcn,
                       label: System.Console.GetOpt.UnreqOpt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvcn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvcr; else goto ccvcq;
       ccvcr: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.UnreqOpt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvcq: // global
           I64[Hp - 8] = System.Console.GetOpt.UnreqOpt_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.617667376 UTC

[section ""data" . System.Console.GetOpt.NonOpt_closure" {
     System.Console.GetOpt.NonOpt_closure:
         const System.Console.GetOpt.NonOpt_info;
 },
 System.Console.GetOpt.NonOpt_entry() //  [R2]
         { info_tbl: [(ccvcC,
                       label: System.Console.GetOpt.NonOpt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvcC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvcG; else goto ccvcF;
       ccvcG: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.NonOpt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvcF: // global
           I64[Hp - 8] = System.Console.GetOpt.NonOpt_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.621318759 UTC

[section ""data" . System.Console.GetOpt.EndOfOpts_closure" {
     System.Console.GetOpt.EndOfOpts_closure:
         const System.Console.GetOpt.EndOfOpts_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.623906345 UTC

[section ""data" . System.Console.GetOpt.OptErr_closure" {
     System.Console.GetOpt.OptErr_closure:
         const System.Console.GetOpt.OptErr_info;
 },
 System.Console.GetOpt.OptErr_entry() //  [R2]
         { info_tbl: [(ccvcS,
                       label: System.Console.GetOpt.OptErr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvcS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvcW; else goto ccvcV;
       ccvcW: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.OptErr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvcV: // global
           I64[Hp - 8] = System.Console.GetOpt.OptErr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.628036594 UTC

[section ""data" . System.Console.GetOpt.NoArg_closure" {
     System.Console.GetOpt.NoArg_closure:
         const System.Console.GetOpt.NoArg_info;
 },
 System.Console.GetOpt.NoArg_entry() //  [R2]
         { info_tbl: [(ccvd7,
                       label: System.Console.GetOpt.NoArg_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvd7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvdb; else goto ccvda;
       ccvdb: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.NoArg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvda: // global
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.631875021 UTC

[section ""data" . System.Console.GetOpt.ReqArg_closure" {
     System.Console.GetOpt.ReqArg_closure:
         const System.Console.GetOpt.ReqArg_info;
 },
 System.Console.GetOpt.ReqArg_entry() //  [R2, R3]
         { info_tbl: [(ccvdm,
                       label: System.Console.GetOpt.ReqArg_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvdm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccvdq; else goto ccvdp;
       ccvdq: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.ReqArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvdp: // global
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.635777282 UTC

[section ""data" . System.Console.GetOpt.OptArg_closure" {
     System.Console.GetOpt.OptArg_closure:
         const System.Console.GetOpt.OptArg_info;
 },
 System.Console.GetOpt.OptArg_entry() //  [R2, R3]
         { info_tbl: [(ccvdB,
                       label: System.Console.GetOpt.OptArg_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvdB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccvdF; else goto ccvdE;
       ccvdF: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.OptArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvdE: // global
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 13;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.640005162 UTC

[section ""data" . System.Console.GetOpt.Option_closure" {
     System.Console.GetOpt.Option_closure:
         const System.Console.GetOpt.Option_info;
 },
 System.Console.GetOpt.Option_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(ccvdQ,
                       label: System.Console.GetOpt.Option_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvdQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccvdU; else goto ccvdT;
       ccvdU: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.Option_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvdT: // global
           I64[Hp - 32] = System.Console.GetOpt.Option_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.643801379 UTC

[section ""data" . System.Console.GetOpt.RequireOrder_closure" {
     System.Console.GetOpt.RequireOrder_closure:
         const System.Console.GetOpt.RequireOrder_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.645609234 UTC

[section ""data" . System.Console.GetOpt.Permute_closure" {
     System.Console.GetOpt.Permute_closure:
         const System.Console.GetOpt.Permute_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.647521659 UTC

[section ""data" . System.Console.GetOpt.ReturnInOrder_closure" {
     System.Console.GetOpt.ReturnInOrder_closure:
         const System.Console.GetOpt.ReturnInOrder_info;
 },
 System.Console.GetOpt.ReturnInOrder_entry() //  [R2]
         { info_tbl: [(ccve7,
                       label: System.Console.GetOpt.ReturnInOrder_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccve7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccveb; else goto ccvea;
       ccveb: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.ReturnInOrder_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvea: // global
           I64[Hp - 8] = System.Console.GetOpt.ReturnInOrder_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.651583839 UTC

[System.Console.GetOpt.Opt_con_entry() //  [R1]
         { info_tbl: [(ccveh,
                       label: System.Console.GetOpt.Opt_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccveh: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.65542745 UTC

[System.Console.GetOpt.UnreqOpt_con_entry() //  [R1]
         { info_tbl: [(ccven,
                       label: System.Console.GetOpt.UnreqOpt_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,85,110,114,101,113,79,112,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccven: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.658789584 UTC

[System.Console.GetOpt.NonOpt_con_entry() //  [R1]
         { info_tbl: [(ccvet,
                       label: System.Console.GetOpt.NonOpt_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,78,111,110,79,112,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvet: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.662376741 UTC

[System.Console.GetOpt.EndOfOpts_con_entry() //  [R1]
         { info_tbl: [(ccvez,
                       label: System.Console.GetOpt.EndOfOpts_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,69,110,100,79,102,79,112,116,115]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvez: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.665636052 UTC

[System.Console.GetOpt.OptErr_con_entry() //  [R1]
         { info_tbl: [(ccveF,
                       label: System.Console.GetOpt.OptErr_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116,69,114,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccveF: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.668706242 UTC

[System.Console.GetOpt.NoArg_con_entry() //  [R1]
         { info_tbl: [(ccveL,
                       label: System.Console.GetOpt.NoArg_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,78,111,65,114,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccveL: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.671936192 UTC

[System.Console.GetOpt.ReqArg_con_entry() //  [R1]
         { info_tbl: [(ccveR,
                       label: System.Console.GetOpt.ReqArg_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,82,101,113,65,114,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccveR: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.67519669 UTC

[System.Console.GetOpt.OptArg_con_entry() //  [R1]
         { info_tbl: [(ccveX,
                       label: System.Console.GetOpt.OptArg_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116,65,114,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccveX: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.678815997 UTC

[System.Console.GetOpt.Option_con_entry() //  [R1]
         { info_tbl: [(ccvf3,
                       label: System.Console.GetOpt.Option_con_info
                       rep:HeapRep 4 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvf3: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.68212011 UTC

[System.Console.GetOpt.RequireOrder_con_entry() //  [R1]
         { info_tbl: [(ccvf9,
                       label: System.Console.GetOpt.RequireOrder_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,82,101,113,117,105,114,101,79,114,100,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvf9: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.686003997 UTC

[System.Console.GetOpt.Permute_con_entry() //  [R1]
         { info_tbl: [(ccvff,
                       label: System.Console.GetOpt.Permute_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,80,101,114,109,117,116,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvff: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.689302918 UTC

[System.Console.GetOpt.ReturnInOrder_con_entry() //  [R1]
         { info_tbl: [(ccvfl,
                       label: System.Console.GetOpt.ReturnInOrder_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,82,101,116,117,114,110,73,110,79,114,100,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvfl: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:21.692639865 UTC

[section ""relreadonly" . ScsR0_srt" {
     ScsR0_srt:
         const GHC.List.maximum2_closure;
         const System.Console.GetOpt.usageInfo_sameLen_closure;
         const System.Console.GetOpt.usageInfo1_closure;
         const lvl10_rcsn5_closure;
         const System.Console.GetOpt.usageInfo_closure;
         const lvl17_rcsnc_closure;
         const System.Console.GetOpt.errUnrec_closure;
         const System.Console.GetOpt.$wgetOpt'_closure;
         const lvl16_rcsnb_closure;
         const lvl24_rcsnk_closure;
         const lvl22_rcsnh_closure;
         const System.Console.GetOpt.getOpt'_closure;
         const System.Console.GetOpt.getOpt_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.500581899 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:24.502456141 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure" {
     System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure:
         const System.Console.GetOpt.$fFunctorArgOrder_$cfmap_info;
 },
 sat_scvfw_entry() //  [R1, R2]
         { info_tbl: [(ccvBU,
                       label: sat_scvfw_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvBU: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.$fFunctorArgOrder_$cfmap_entry() //  [R2, R3]
         { info_tbl: [(ccvC2,
                       label: System.Console.GetOpt.$fFunctorArgOrder_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvC2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvC3; else goto ccvC4;
       ccvC3: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvC4: // global
           I64[Sp - 16] = block_ccvBI_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvCe; else goto ccvBJ;
       ucvCe: // global
           call _ccvBI(R1) args: 0, res: 0, upd: 0;
       ccvBJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccvBI() //  [R1]
         { info_tbl: [(ccvBI,
                       label: block_ccvBI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvBI: // global
           _ccvC1::P64 = R1 & 7;
           if (_ccvC1::P64 < 3) goto ucvCd; else goto ccvC0;
       ucvCd: // global
           if (_ccvC1::P64 < 2) goto ccvBY; else goto ccvBZ;
       ccvBY: // global
           R1 = System.Console.GetOpt.RequireOrder_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvBZ: // global
           R1 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvC0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccvCc; else goto ccvCb;
       ccvCc: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvCb: // global
           _scvfv::P64 = P64[R1 + 5];
           I64[Hp - 32] = sat_scvfw_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = _scvfv::P64;
           I64[Hp - 8] = System.Console.GetOpt.ReturnInOrder_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 5;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.511137591 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure" {
     System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure:
         const System.Console.GetOpt.$fFunctorArgOrder_$c<$_info;
 },
 sat_scvfC_entry() //  [R1]
         { info_tbl: [(ccvCQ,
                       label: sat_scvfC_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvCQ: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.$fFunctorArgOrder_$c<$_entry() //  [R2, R3]
         { info_tbl: [(ccvCY,
                       label: System.Console.GetOpt.$fFunctorArgOrder_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvCY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvCZ; else goto ccvD0;
       ccvCZ: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvD0: // global
           I64[Sp - 16] = block_ccvCE_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvDa; else goto ccvCF;
       ucvDa: // global
           call _ccvCE(R1) args: 0, res: 0, upd: 0;
       ccvCF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccvCE() //  [R1]
         { info_tbl: [(ccvCE,
                       label: block_ccvCE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvCE: // global
           _ccvCX::P64 = R1 & 7;
           if (_ccvCX::P64 < 3) goto ucvD9; else goto ccvCW;
       ucvD9: // global
           if (_ccvCX::P64 < 2) goto ccvCU; else goto ccvCV;
       ccvCU: // global
           R1 = System.Console.GetOpt.RequireOrder_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvCV: // global
           R1 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvCW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccvD8; else goto ccvD7;
       ccvD8: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvD7: // global
           I64[Hp - 24] = sat_scvfC_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = System.Console.GetOpt.ReturnInOrder_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 5;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.521446724 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgOrder_closure" {
     System.Console.GetOpt.$fFunctorArgOrder_closure:
         const GHC.Base.C:Functor_con_info;
         const System.Console.GetOpt.$fFunctorArgOrder_$cfmap_closure+2;
         const System.Console.GetOpt.$fFunctorArgOrder_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.524217703 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure" {
     System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure:
         const System.Console.GetOpt.$fFunctorArgDescr_$cfmap_info;
 },
 sat_scvfK_entry() //  [R1, R2]
         { info_tbl: [(ccvDM,
                       label: sat_scvfK_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvDM: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scvfN_entry() //  [R1, R2]
         { info_tbl: [(ccvDW,
                       label: sat_scvfN_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvDW: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Base.._entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.$fFunctorArgDescr_$cfmap_entry() //  [R2, R3]
         { info_tbl: [(ccvE4,
                       label: System.Console.GetOpt.$fFunctorArgDescr_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvE4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvE5; else goto ccvE6;
       ccvE5: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvE6: // global
           I64[Sp - 16] = block_ccvDB_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvEm; else goto ccvDC;
       ucvEm: // global
           call _ccvDB(R1) args: 0, res: 0, upd: 0;
       ccvDC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccvDB() //  [R1]
         { info_tbl: [(ccvDB,
                       label: block_ccvDB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvDB: // global
           _scvfD::P64 = P64[Sp + 8];
           _ccvE3::P64 = R1 & 7;
           if (_ccvE3::P64 < 3) goto ucvEl; else goto ccvE2;
       ucvEl: // global
           if (_ccvE3::P64 < 2) goto ccvE0; else goto ccvE1;
       ccvE0: // global
           Hp = Hp + 48;
           _scvfF::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvEk; else goto ccvEb;
       ccvEb: // global
           _scvfG::P64 = P64[_scvfF::P64 + 7];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _scvfD::P64;
           P64[Hp - 16] = _scvfG::P64;
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = Hp - 40;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvE1: // global
           Hp = Hp + 48;
           _scvfF::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvEk; else goto ccvEf;
       ccvEf: // global
           _scvfI::P64 = P64[_scvfF::P64 + 6];
           _scvfJ::P64 = P64[_scvfF::P64 + 14];
           I64[Hp - 40] = sat_scvfK_info;
           P64[Hp - 32] = _scvfD::P64;
           P64[Hp - 24] = _scvfI::P64;
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = _scvfJ::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvE2: // global
           Hp = Hp + 48;
           _scvfF::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvEk; else goto ccvEj;
       ccvEk: // global
           HpAlloc = 48;
           R1 = _scvfF::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvEj: // global
           _scvfL::P64 = P64[_scvfF::P64 + 5];
           _scvfM::P64 = P64[_scvfF::P64 + 13];
           I64[Hp - 40] = sat_scvfN_info;
           P64[Hp - 32] = _scvfD::P64;
           P64[Hp - 24] = _scvfL::P64;
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = _scvfM::P64;
           R1 = Hp - 13;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.539950737 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure" {
     System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure:
         const System.Console.GetOpt.$fFunctorArgDescr_$c<$_info;
 },
 sat_scvfV_entry() //  [R1]
         { info_tbl: [(ccvF5,
                       label: sat_scvfV_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvF5: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_scvfZ_entry() //  [R1]
         { info_tbl: [(ccvFf,
                       label: sat_scvfZ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvFf: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.$fFunctorArgDescr_$c<$_entry() //  [R2, R3]
         { info_tbl: [(ccvFn,
                       label: System.Console.GetOpt.$fFunctorArgDescr_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvFn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvFo; else goto ccvFp;
       ccvFo: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvFp: // global
           I64[Sp - 16] = block_ccvEU_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvFE; else goto ccvEV;
       ucvFE: // global
           call _ccvEU(R1) args: 0, res: 0, upd: 0;
       ccvEV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccvEU() //  [R1]
         { info_tbl: [(ccvEU,
                       label: block_ccvEU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvEU: // global
           _scvfO::P64 = P64[Sp + 8];
           _ccvFm::P64 = R1 & 7;
           if (_ccvFm::P64 < 3) goto ucvFD; else goto ccvFl;
       ucvFD: // global
           if (_ccvFm::P64 < 2) goto ccvFj; else goto ccvFk;
       ccvFj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvFu; else goto ccvFt;
       ccvFu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvFt: // global
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = _scvfO::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvFk: // global
           Hp = Hp + 40;
           _scvfQ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvFC; else goto ccvFx;
       ccvFx: // global
           _scvfT::P64 = P64[_scvfQ::P64 + 14];
           I64[Hp - 32] = sat_scvfV_info;
           P64[Hp - 24] = _scvfO::P64;
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scvfT::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvFl: // global
           Hp = Hp + 40;
           _scvfQ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvFC; else goto ccvFB;
       ccvFC: // global
           HpAlloc = 40;
           R1 = _scvfQ::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvFB: // global
           _scvfX::P64 = P64[_scvfQ::P64 + 13];
           I64[Hp - 32] = sat_scvfZ_info;
           P64[Hp - 24] = _scvfO::P64;
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scvfX::P64;
           R1 = Hp - 13;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.550174845 UTC

[section ""data" . System.Console.GetOpt.$fFunctorArgDescr_closure" {
     System.Console.GetOpt.$fFunctorArgDescr_closure:
         const GHC.Base.C:Functor_con_info;
         const System.Console.GetOpt.$fFunctorArgDescr_$cfmap_closure+2;
         const System.Console.GetOpt.$fFunctorArgDescr_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.552606043 UTC

[section ""data" . System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure" {
     System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure:
         const System.Console.GetOpt.$fFunctorOptDescr_$cfmap_info;
 },
 sat_scvg7_entry() //  [R1]
         { info_tbl: [(ccvGk,
                       label: sat_scvg7_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvGk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvGl; else goto ccvGm;
       ccvGl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvGm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.Console.GetOpt.$fFunctorArgDescr_$cfmap_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.$fFunctorOptDescr_$cfmap_entry() //  [R2, R3]
         { info_tbl: [(ccvGn,
                       label: System.Console.GetOpt.$fFunctorOptDescr_$cfmap_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvGn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvGp; else goto ccvGq;
       ccvGp: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvGq: // global
           I64[Sp - 16] = block_ccvGb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvGu; else goto ccvGc;
       ucvGu: // global
           call _ccvGb(R1) args: 0, res: 0, upd: 0;
       ccvGc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccvGb() //  [R1]
         { info_tbl: [(ccvGb,
                       label: block_ccvGb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvGb: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccvGt; else goto ccvGs;
       ccvGt: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvGs: // global
           _scvg3::P64 = P64[R1 + 7];
           _scvg4::P64 = P64[R1 + 15];
           _scvg5::P64 = P64[R1 + 23];
           _scvg6::P64 = P64[R1 + 31];
           I64[Hp - 64] = sat_scvg7_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _scvg5::P64;
           I64[Hp - 32] = System.Console.GetOpt.Option_con_info;
           P64[Hp - 24] = _scvg3::P64;
           P64[Hp - 16] = _scvg4::P64;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = _scvg6::P64;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.561982536 UTC

[section ""data" . System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure" {
     System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure:
         const System.Console.GetOpt.$fFunctorOptDescr_$c<$_info;
 },
 sat_scvgk_entry() //  [R1]
         { info_tbl: [(ccvHd,
                       label: sat_scvgk_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvHd: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_scvgo_entry() //  [R1]
         { info_tbl: [(ccvHn,
                       label: sat_scvgo_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvHn: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_scvgp_entry() //  [R1]
         { info_tbl: [(ccvHv,
                       label: sat_scvgp_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvHv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccvHw; else goto ccvHx;
       ccvHw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvHx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccvH2_info;
           _scvg8::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _scvg8::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucvHM; else goto ccvH3;
       ucvHM: // global
           call _ccvH2(R1) args: 0, res: 0, upd: 0;
       ccvH3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccvH2() //  [R1]
         { info_tbl: [(ccvH2,
                       label: block_ccvH2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvH2: // global
           _scvg8::P64 = P64[Sp + 8];
           _ccvHu::P64 = R1 & 7;
           if (_ccvHu::P64 < 3) goto ucvHL; else goto ccvHt;
       ucvHL: // global
           if (_ccvHu::P64 < 2) goto ccvHr; else goto ccvHs;
       ccvHr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvHC; else goto ccvHB;
       ccvHC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccvHB: // global
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = _scvg8::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccvHs: // global
           Hp = Hp + 40;
           _scvgf::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvHK; else goto ccvHF;
       ccvHF: // global
           _scvgi::P64 = P64[_scvgf::P64 + 14];
           I64[Hp - 32] = sat_scvgk_info;
           P64[Hp - 24] = _scvg8::P64;
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scvgi::P64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccvHt: // global
           Hp = Hp + 40;
           _scvgf::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvHK; else goto ccvHJ;
       ccvHK: // global
           HpAlloc = 40;
           R1 = _scvgf::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccvHJ: // global
           _scvgm::P64 = P64[_scvgf::P64 + 13];
           I64[Hp - 32] = sat_scvgo_info;
           P64[Hp - 24] = _scvg8::P64;
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _scvgm::P64;
           R1 = Hp - 13;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.$fFunctorOptDescr_$c<$_entry() //  [R2, R3]
         { info_tbl: [(ccvHN,
                       label: System.Console.GetOpt.$fFunctorOptDescr_$c<$_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvHN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvHP; else goto ccvHQ;
       ccvHP: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvHQ: // global
           I64[Sp - 16] = block_ccvGT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvHU; else goto ccvGU;
       ucvHU: // global
           call _ccvGT(R1) args: 0, res: 0, upd: 0;
       ccvGU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccvGT() //  [R1]
         { info_tbl: [(ccvGT,
                       label: block_ccvGT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvGT: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccvHT; else goto ccvHS;
       ccvHT: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvHS: // global
           _scvgb::P64 = P64[R1 + 7];
           _scvgc::P64 = P64[R1 + 15];
           _scvgd::P64 = P64[R1 + 23];
           _scvge::P64 = P64[R1 + 31];
           I64[Hp - 64] = sat_scvgp_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _scvgd::P64;
           I64[Hp - 32] = System.Console.GetOpt.Option_con_info;
           P64[Hp - 24] = _scvgb::P64;
           P64[Hp - 16] = _scvgc::P64;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = _scvge::P64;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.577717965 UTC

[section ""data" . System.Console.GetOpt.$fFunctorOptDescr_closure" {
     System.Console.GetOpt.$fFunctorOptDescr_closure:
         const GHC.Base.C:Functor_con_info;
         const System.Console.GetOpt.$fFunctorOptDescr_$cfmap_closure+2;
         const System.Console.GetOpt.$fFunctorOptDescr_$c<$_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.579512993 UTC

[section ""data" . lvl_rcsmT_closure" {
     lvl_rcsmT_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.581755433 UTC

[section ""data" . lvl1_rcsmU_closure" {
     lvl1_rcsmU_closure:
         const :_con_info;
         const lvl_rcsmT_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.584151724 UTC

[section ""data" . $wxs_rcsmV_closure" {
     $wxs_rcsmV_closure:
         const $wxs_rcsmV_info;
 },
 sat_scvgt_entry() //  [R1]
         { info_tbl: [(ccvIQ,
                       label: sat_scvgt_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvIQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvIR; else goto ccvIS;
       ccvIR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvIS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16] - 1;
           Sp = Sp - 16;
           call $wxs_rcsmV_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 $wxs_rcsmV_entry() //  [R2]
         { info_tbl: [(ccvIW,
                       label: $wxs_rcsmV_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvIW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccvJ0; else goto ccvIZ;
       ccvJ0: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = $wxs_rcsmV_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvIZ: // global
           if (R2 == 1) goto ccvIV; else goto ccvIU;
       ccvIV: // global
           Hp = Hp - 48;
           R1 = lvl1_rcsmU_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvIU: // global
           I64[Hp - 40] = sat_scvgt_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl_rcsmT_closure+1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.590797756 UTC

[section ""data" . System.Console.GetOpt.$wgo_closure" {
     System.Console.GetOpt.$wgo_closure:
         const System.Console.GetOpt.$wgo_info;
 },
 sat_scvgB_entry() //  [R1]
         { info_tbl: [(ccvJA,
                       label: sat_scvgB_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvJA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvJB; else goto ccvJC;
       ccvJB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvJC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = I64[R1 + 24] - 1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.Console.GetOpt.$wgo_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.$wgo_entry() //  [R2, R3]
         { info_tbl: [(ccvJH,
                       label: System.Console.GetOpt.$wgo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 14} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvJH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvJI; else goto ccvJJ;
       ccvJI: // global
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$wgo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvJJ: // global
           I64[Sp - 16] = block_ccvJm_info;
           R1 = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvJV; else goto ccvJn;
       ucvJV: // global
           call _ccvJm(R1) args: 0, res: 0, upd: 0;
       ccvJn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccvJm() //  [R1]
         { info_tbl: [(ccvJm,
                       label: block_ccvJm_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvJm: // global
           _scvgv::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto ccvJE; else goto ccvJF;
       ccvJE: // global
           R2 = _scvgv::I64;
           Sp = Sp + 16;
           call $wxs_rcsmV_entry(R2) args: 8, res: 0, upd: 8;
       ccvJF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccvJO; else goto ccvJN;
       ccvJO: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvJN: // global
           _scvgx::P64 = P64[R1 + 6];
           if (_scvgv::I64 == 1) goto ccvJU; else goto ccvJR;
       ccvJU: // global
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = _scvgx::P64;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _ccvJT::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _ccvJT::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvJR: // global
           _scvgy::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_scvgB_info;
           P64[Hp - 32] = _scvgy::P64;
           I64[Hp - 24] = _scvgv::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scvgx::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.601165555 UTC

[section ""data" . System.Console.GetOpt.usageInfo_sameLen_closure" {
     System.Console.GetOpt.usageInfo_sameLen_closure:
         const System.Console.GetOpt.usageInfo_sameLen_info;
         const 0;
 },
 n_scvgD_entry() //  [R1]
         { info_tbl: [(ccvKA,
                       label: n_scvgD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvKA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccvKB; else goto ccvKC;
       ccvKB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvKC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccvKu_info;
           R3 = P64[R1 + 16];
           R2 = GHC.List.length_closure+1;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccvKu() //  [R1]
         { info_tbl: [(ccvKu,
                       label: block_ccvKu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvKu: // global
           if (R1 & 7 == 1) goto ccvKx; else goto ccvKy;
       ccvKx: // global
           R1 = GHC.List.maximum2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       ccvKy: // global
           I64[Sp - 8] = block_ccvKI_info;
           _scvgG::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scvgG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucvKX; else goto ccvKJ;
       ucvKX: // global
           call _ccvKI(R1) args: 0, res: 0, upd: 0;
       ccvKJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccvKI() //  [R1]
         { info_tbl: [(ccvKI,
                       label: block_ccvKI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvKI: // global
           _scvgG::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccvKN_info;
           R3 = I64[R1 + 7];
           R2 = _scvgG::P64;
           Sp = Sp + 8;
           call GHC.List.$wgo_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccvKN() //  [R1]
         { info_tbl: [(ccvKN,
                       label: block_ccvKN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvKN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvKW; else goto ccvKV;
       ccvKW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       ccvKV: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 lvl25_scvgK_entry() //  [R1]
         { info_tbl: [(ccvL5,
                       label: lvl25_scvgK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvL5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccvL6; else goto ccvL7;
       ccvL6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvL7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccvL2_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucvLc; else goto ccvL3;
       ucvLc: // global
           call _ccvL2(R1) args: 0, res: 0, upd: 0;
       ccvL3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccvL2() //  [R1]
         { info_tbl: [(ccvL2,
                       label: block_ccvL2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvL2: // global
           R1 = I64[(%MO_S_Lt_W64(0,
                                  I64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvgW_entry() //  [R1]
         { info_tbl: [(ccvLA,
                       label: sat_scvgW_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvLA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccvLB; else goto ccvLC;
       ccvLB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvLC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_ccvLt_info;
           _scvgD::P64 = P64[R1 + 16];
           _scvgR::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _scvgD::P64;
           P64[Sp - 24] = _scvgR::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucvLQ; else goto ccvLu;
       ucvLQ: // global
           call _ccvLt(R1) args: 0, res: 0, upd: 0;
       ccvLu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccvLt() //  [R1]
         { info_tbl: [(ccvLt,
                       label: block_ccvLt_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvLt: // global
           if (R1 & 7 == 1) goto ccvLx; else goto ccvLy;
       ccvLx: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccvLy: // global
           _scvgD::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccvLI_info;
           R1 = _scvgD::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucvLP; else goto ccvLK;
       ucvLP: // global
           call _ccvLI(R1) args: 0, res: 0, upd: 0;
       ccvLK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccvLI() //  [R1]
         { info_tbl: [(ccvLI,
                       label: block_ccvLI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvLI: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call System.Console.GetOpt.$wgo_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 go_scvgO_entry() //  [R1, R2]
         { info_tbl: [(ccvLV,
                       label: go_scvgO_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvLV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccvLW; else goto ccvLX;
       ccvLW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvLX: // global
           I64[Sp - 32] = block_ccvLi_info;
           _scvgO::P64 = R1;
           _scvgD::P64 = P64[R1 + 7];
           _scvgK::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _scvgD::P64;
           P64[Sp - 16] = _scvgK::P64;
           P64[Sp - 8] = _scvgO::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucvM4; else goto ccvLj;
       ucvM4: // global
           call _ccvLi(R1) args: 0, res: 0, upd: 0;
       ccvLj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccvLi() //  [R1]
         { info_tbl: [(ccvLi,
                       label: block_ccvLi_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvLi: // global
           if (R1 & 7 == 1) goto ccvLS; else goto ccvLT;
       ccvLS: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvLT: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccvM3; else goto ccvM2;
       ccvM3: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvM2: // global
           _scvgR::P64 = P64[R1 + 6];
           _scvgS::P64 = P64[R1 + 14];
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = _scvgS::P64;
           I64[Hp - 56] = sat_scvgW_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _scvgR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 System.Console.GetOpt.usageInfo_sameLen_entry() //  [R2]
         { info_tbl: [(ccvM5,
                       label: System.Console.GetOpt.usageInfo_sameLen_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvM5: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccvM9; else goto ccvM8;
       ccvM9: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo_sameLen_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvM8: // global
           I64[Hp - 64] = n_scvgD_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl25_scvgK_info;
           _ccvKq::P64 = Hp - 64;
           P64[Hp - 24] = _ccvKq::P64;
           I64[Hp - 16] = go_scvgO_info;
           P64[Hp - 8] = _ccvKq::P64;
           P64[Hp] = Hp - 40;
           R2 = R2;
           R1 = Hp - 15;
           call go_scvgO_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.629675736 UTC

[section ""data" . sepBy_rcsmW_closure" {
     sepBy_rcsmW_closure:
         const sepBy_rcsmW_info;
 },
 sat_scvh6_entry() //  [R1]
         { info_tbl: [(ccvNV,
                       label: sat_scvh6_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvNV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvNW; else goto ccvNX;
       ccvNW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvNX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call sepBy_rcsmW_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sepBy_rcsmW_entry() //  [R2, R3]
         { info_tbl: [(ccvO2,
                       label: sepBy_rcsmW_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvO2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccvO3; else goto ccvO4;
       ccvO3: // global
           R3 = R3;
           R2 = R2;
           R1 = sepBy_rcsmW_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvO4: // global
           I64[Sp - 16] = block_ccvNF_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvOk; else goto ccvNG;
       ucvOk: // global
           call _ccvNF(R1) args: 0, res: 0, upd: 0;
       ccvNG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccvNF() //  [R1]
         { info_tbl: [(ccvNF,
                       label: block_ccvNF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvNF: // global
           if (R1 & 7 == 1) goto ccvNZ; else goto ccvO0;
       ccvNZ: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccvO0: // global
           I64[Sp - 8] = block_ccvNL_info;
           _scvh1::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scvh1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucvOj; else goto ccvNM;
       ucvOj: // global
           call _ccvNL(R1) args: 0, res: 0, upd: 0;
       ccvNM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccvNL() //  [R1]
         { info_tbl: [(ccvNL,
                       label: block_ccvNL_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvNL: // global
           _scvh1::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccvOb; else goto ccvOe;
       ccvOb: // global
           R1 = _scvh1::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccvOe: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccvOh; else goto ccvOg;
       ccvOh: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvOg: // global
           I64[Hp - 72] = sat_scvh6_info;
           _scvgY::P64 = P64[Sp + 16];
           P64[Hp - 56] = _scvgY::P64;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl_rcsmT_closure+1;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scvgY::P64;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = _scvh1::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.640281236 UTC

[section ""data" . lvl2_rcsmX_closure" {
     lvl2_rcsmX_closure:
         const GHC.Types.C#_con_info;
         const 44;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.64225297 UTC

[section ""cstring" . lvl3_rcsmY_bytes" {
     lvl3_rcsmY_bytes:
         I8[] [45]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.644570337 UTC

[section ""cstring" . lvl4_rcsmZ_bytes" {
     lvl4_rcsmZ_bytes:
         I8[] [91]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.646841997 UTC

[section ""cstring" . lvl5_rcsn0_bytes" {
     lvl5_rcsn0_bytes:
         I8[] [93]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.648583412 UTC

[section ""cstring" . lvl6_rcsn1_bytes" {
     lvl6_rcsn1_bytes:
         I8[] [45,45]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.650313097 UTC

[section ""cstring" . lvl7_rcsn2_bytes" {
     lvl7_rcsn2_bytes:
         I8[] [91,61]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.652034566 UTC

[section ""cstring" . lvl8_rcsn3_bytes" {
     lvl8_rcsn3_bytes:
         I8[] [32,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.655572613 UTC

[section ""data" . System.Console.GetOpt.usageInfo_go2_closure" {
     System.Console.GetOpt.usageInfo_go2_closure:
         const System.Console.GetOpt.usageInfo_go2_info;
 },
 sat_scvhq_entry() //  [R1]
         { info_tbl: [(ccvPq,
                       label: sat_scvhq_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvPq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvPr; else goto ccvPs;
       ccvPr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvPs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_go2_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvhl_entry() //  [R1]
         { info_tbl: [(ccvPN,
                       label: sat_scvhl_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvPN: // global
           R3 = P64[R1 + 16];
           R2 = lvl8_rcsn3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scvhm_entry() //  [R1]
         { info_tbl: [(ccvPQ,
                       label: sat_scvhm_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvPQ: // global
           _scvhm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccvPR; else goto ccvPS;
       ccvPS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccvPU; else goto ccvPT;
       ccvPU: // global
           HpAlloc = 24;
           goto ccvPR;
       ccvPR: // global
           R1 = _scvhm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvPT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvhm::P64;
           _scvhg::P64 = P64[_scvhm::P64 + 16];
           _scvhj::P64 = P64[_scvhm::P64 + 24];
           I64[Hp - 16] = sat_scvhl_info;
           P64[Hp] = _scvhj::P64;
           R3 = Hp - 16;
           R2 = _scvhg::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvhn_entry() //  [R1]
         { info_tbl: [(ccvPV,
                       label: sat_scvhn_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvPV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccvPZ; else goto ccvPY;
       ccvPZ: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvPY: // global
           _scvhg::P64 = P64[R1 + 16];
           _scvhj::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scvhm_info;
           P64[Hp - 8] = _scvhg::P64;
           P64[Hp] = _scvhj::P64;
           R3 = Hp - 24;
           R2 = lvl8_rcsn3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scvho_entry() //  [R1]
         { info_tbl: [(ccvQ0,
                       label: sat_scvho_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvQ0: // global
           _scvho::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccvQ1; else goto ccvQ2;
       ccvQ2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccvQ4; else goto ccvQ3;
       ccvQ4: // global
           HpAlloc = 32;
           goto ccvQ1;
       ccvQ1: // global
           R1 = _scvho::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvQ3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvho::P64;
           _scvhd::P64 = P64[_scvho::P64 + 16];
           _scvhg::P64 = P64[_scvho::P64 + 24];
           _scvhj::P64 = P64[_scvho::P64 + 32];
           I64[Hp - 24] = sat_scvhn_info;
           P64[Hp - 8] = _scvhg::P64;
           P64[Hp] = _scvhj::P64;
           R3 = Hp - 24;
           R2 = _scvhd::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvhp_entry() //  [R1]
         { info_tbl: [(ccvQ5,
                       label: sat_scvhp_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvQ5: // global
           _scvhp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccvQ6; else goto ccvQ7;
       ccvQ7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccvQ9; else goto ccvQ8;
       ccvQ9: // global
           HpAlloc = 40;
           goto ccvQ6;
       ccvQ6: // global
           R1 = _scvhp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvQ8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvhp::P64;
           _scvhd::P64 = P64[_scvhp::P64 + 16];
           _scvhg::P64 = P64[_scvhp::P64 + 24];
           _scvhj::P64 = P64[_scvhp::P64 + 32];
           I64[Hp - 32] = sat_scvho_info;
           P64[Hp - 16] = _scvhd::P64;
           P64[Hp - 8] = _scvhg::P64;
           P64[Hp] = _scvhj::P64;
           R3 = Hp - 32;
           R2 = lvl8_rcsn3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.usageInfo_go2_entry() //  [R2, R3, R4]
         { info_tbl: [(ccvQe,
                       label: System.Console.GetOpt.usageInfo_go2_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvQe: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccvQf; else goto ccvQg;
       ccvQf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo_go2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvQg: // global
           I64[Sp - 24] = block_ccvP4_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucvQJ; else goto ccvP5;
       ucvQJ: // global
           call _ccvP4(R1) args: 0, res: 0, upd: 0;
       ccvP5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccvP4() //  [R1]
         { info_tbl: [(ccvP4,
                       label: block_ccvP4_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvP4: // global
           if (R1 & 7 == 1) goto ucvQB; else goto ccvQc;
       ucvQB: // global
           Sp = Sp + 24;
           call _ccvQt() args: 0, res: 0, upd: 0;
       ccvQc: // global
           I64[Sp - 8] = block_ccvPa_info;
           _scvhd::P64 = P64[R1 + 6];
           _scvhe::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _scvhe::P64;
           P64[Sp + 8] = _scvhd::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucvQE; else goto ccvPb;
       ucvQE: // global
           call _ccvPa(R1) args: 0, res: 0, upd: 0;
       ccvPb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccvPa() //  [R1]
         { info_tbl: [(ccvPa,
                       label: block_ccvPa_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvPa: // global
           if (R1 & 7 == 1) goto ucvQC; else goto ccvQp;
       ucvQC: // global
           Sp = Sp + 32;
           call _ccvQt() args: 0, res: 0, upd: 0;
       ccvQp: // global
           I64[Sp - 8] = block_ccvPg_info;
           _scvhg::P64 = P64[R1 + 6];
           _scvhh::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp] = _scvhh::P64;
           P64[Sp + 24] = _scvhg::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucvQG; else goto ccvPh;
       ucvQG: // global
           call _ccvPg(R1) args: 0, res: 0, upd: 0;
       ccvPh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccvPg() //  [R1]
         { info_tbl: [(ccvPg,
                       label: block_ccvPg_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvPg: // global
           if (R1 & 7 == 1) goto ucvQD; else goto ccvQv;
       ucvQD: // global
           Sp = Sp + 40;
           call _ccvQt() args: 0, res: 0, upd: 0;
       ccvQv: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccvQy; else goto ccvQx;
       ccvQy: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvQx: // global
           _scvhj::P64 = P64[R1 + 6];
           _scvhk::P64 = P64[R1 + 14];
           I64[Hp - 96] = sat_scvhq_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = _scvhk::P64;
           I64[Hp - 56] = sat_scvhp_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _scvhj::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccvQt() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvQt: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.680095046 UTC

[section ""cstring" . lvl9_rcsn4_bytes" {
     lvl9_rcsn4_bytes:
         I8[] [32]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.682628126 UTC

[section ""data" . lvl10_rcsn5_closure" {
     lvl10_rcsn5_closure:
         const lvl10_rcsn5_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_rcsn5_entry() //  [R1]
         { info_tbl: [(ccvRZ,
                       label: lvl10_rcsn5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvRZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvS0; else goto ccvS1;
       ccvS0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvS1: // global
           (_ccvRW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccvRW::I64 == 0) goto ccvRY; else goto ccvRX;
       ccvRY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccvRX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccvRW::I64;
           R2 = lvl5_rcsn0_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.686618666 UTC

[section ""cstring" . lvl11_rcsn6_bytes" {
     lvl11_rcsn6_bytes:
         I8[] [61]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.692432613 UTC

[section ""data" . System.Console.GetOpt.usageInfo1_closure" {
     System.Console.GetOpt.usageInfo1_closure:
         const System.Console.GetOpt.usageInfo1_info;
         const 0;
 },
 b2_scvhA_entry() //  [R1]
         { info_tbl: [(ccvSx,
                       label: b2_scvhA_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvSx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccvSy; else goto ccvSz;
       ccvSy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvSz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccvSu_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.usageInfo1_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccvSu() //  [R1, R2, R3]
         { info_tbl: [(ccvSu,
                       label: block_ccvSu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvSu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccvSC; else goto ccvSB;
       ccvSC: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 24;
       ccvSB: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvhM_entry() //  [R1]
         { info_tbl: [(ccvSW,
                       label: sat_scvhM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvSW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvSX; else goto ccvSY;
       ccvSX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvSY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl9_rcsn4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvhQ_entry() //  [R1]
         { info_tbl: [(ccvT9,
                       label: sat_scvhQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvT9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvTa; else goto ccvTb;
       ccvTa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvTb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl10_rcsn5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvhR_entry() //  [R1]
         { info_tbl: [(ccvTc,
                       label: sat_scvhR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvTc: // global
           _scvhR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccvTd; else goto ccvTe;
       ccvTe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccvTg; else goto ccvTf;
       ccvTg: // global
           HpAlloc = 24;
           goto ccvTd;
       ccvTd: // global
           R1 = _scvhR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvTf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvhR::P64;
           _scvhP::P64 = P64[_scvhR::P64 + 16];
           I64[Hp - 16] = sat_scvhQ_info;
           P64[Hp] = _scvhP::P64;
           R3 = Hp - 16;
           R2 = lvl4_rcsmZ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvhT_entry() //  [R1, R2]
         { info_tbl: [(ccvTm,
                       label: sat_scvhT_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvTm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvTn; else goto ccvTo;
       ccvTn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvTo: // global
           I64[Sp - 16] = block_ccvSM_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvTD; else goto ccvSN;
       ucvTD: // global
           call _ccvSM(R1) args: 0, res: 0, upd: 0;
       ccvSN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccvSM() //  [R1]
         { info_tbl: [(ccvSM,
                       label: block_ccvSM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvSM: // global
           _scvhG::P64 = P64[Sp + 8];
           _ccvTl::P64 = R1 & 7;
           if (_ccvTl::P64 < 3) goto ucvTC; else goto ccvTk;
       ucvTC: // global
           if (_ccvTl::P64 < 2) goto ccvTi; else goto ccvTj;
       ccvTi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccvTt; else goto ccvTs;
       ccvTt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvTs: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scvhG::P64;
           P64[Hp] = GHC.Types.[]_closure+1;
           R3 = Hp - 14;
           R2 = lvl3_rcsmY_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccvTj: // global
           Hp = Hp + 48;
           _scvhH::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvTB; else goto ccvTw;
       ccvTw: // global
           _scvhL::P64 = P64[_scvhH::P64 + 14];
           I64[Hp - 40] = sat_scvhM_info;
           P64[Hp - 24] = _scvhL::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scvhG::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = lvl3_rcsmY_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccvTk: // global
           Hp = Hp + 48;
           _scvhH::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvTB; else goto ccvTA;
       ccvTB: // global
           HpAlloc = 48;
           R1 = _scvhH::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvTA: // global
           _scvhP::P64 = P64[_scvhH::P64 + 13];
           I64[Hp - 40] = sat_scvhR_info;
           P64[Hp - 24] = _scvhP::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scvhG::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = lvl3_rcsmY_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sosFmt_scvhF_entry() //  [R1]
         { info_tbl: [(ccvTG,
                       label: sosFmt_scvhF_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvTG: // global
           _scvhF::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccvTH; else goto ccvTI;
       ccvTI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvTK; else goto ccvTJ;
       ccvTK: // global
           HpAlloc = 16;
           goto ccvTH;
       ccvTH: // global
           R1 = _scvhF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvTJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvhF::P64;
           _scvhw::P64 = P64[_scvhF::P64 + 16];
           _scvhy::P64 = P64[_scvhF::P64 + 24];
           I64[Hp - 8] = sat_scvhT_info;
           P64[Hp] = _scvhy::P64;
           I64[Sp - 24] = block_ccvTE_info;
           R3 = _scvhw::P64;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccvTE() //  [R1]
         { info_tbl: [(ccvTE,
                       label: block_ccvTE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvTE: // global
           R3 = R1;
           R2 = lvl2_rcsmX_closure+1;
           Sp = Sp + 8;
           call sepBy_rcsmW_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvi1_entry() //  [R1]
         { info_tbl: [(ccvUb,
                       label: sat_scvi1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvUb: // global
           R3 = P64[R1 + 16];
           R2 = lvl11_rcsn6_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scvi2_entry() //  [R1]
         { info_tbl: [(ccvUe,
                       label: sat_scvi2_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvUe: // global
           _scvi2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccvUf; else goto ccvUg;
       ccvUg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccvUi; else goto ccvUh;
       ccvUi: // global
           HpAlloc = 24;
           goto ccvUf;
       ccvUf: // global
           R1 = _scvi2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvUh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvi2::P64;
           _scvhW::P64 = P64[_scvi2::P64 + 16];
           _scvi0::P64 = P64[_scvi2::P64 + 24];
           I64[Hp - 16] = sat_scvi1_info;
           P64[Hp] = _scvi0::P64;
           R3 = Hp - 16;
           R2 = _scvhW::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvi5_entry() //  [R1]
         { info_tbl: [(ccvUx,
                       label: sat_scvi5_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvUx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvUy; else goto ccvUz;
       ccvUy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvUz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl10_rcsn5_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvi6_entry() //  [R1]
         { info_tbl: [(ccvUA,
                       label: sat_scvi6_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvUA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccvUE; else goto ccvUD;
       ccvUE: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvUD: // global
           _scvi4::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scvi5_info;
           P64[Hp] = _scvi4::P64;
           R3 = Hp - 16;
           R2 = lvl7_rcsn2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scvi7_entry() //  [R1]
         { info_tbl: [(ccvUF,
                       label: sat_scvi7_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvUF: // global
           _scvi7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccvUG; else goto ccvUH;
       ccvUH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccvUJ; else goto ccvUI;
       ccvUJ: // global
           HpAlloc = 24;
           goto ccvUG;
       ccvUG: // global
           R1 = _scvi7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvUI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvi7::P64;
           _scvhW::P64 = P64[_scvi7::P64 + 16];
           _scvi4::P64 = P64[_scvi7::P64 + 24];
           I64[Hp - 16] = sat_scvi6_info;
           P64[Hp] = _scvi4::P64;
           R3 = Hp - 16;
           R2 = _scvhW::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvi8_entry() //  [R1, R2]
         { info_tbl: [(ccvUP,
                       label: sat_scvi8_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvUP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccvUQ; else goto ccvUR;
       ccvUQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvUR: // global
           I64[Sp - 16] = block_ccvTX_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucvV1; else goto ccvTY;
       ucvV1: // global
           call _ccvTX(R1) args: 0, res: 0, upd: 0;
       ccvTY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccvTX() //  [R1]
         { info_tbl: [(ccvTX,
                       label: block_ccvTX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvTX: // global
           _scvhW::P64 = P64[Sp + 8];
           _ccvUO::P64 = R1 & 7;
           if (_ccvUO::P64 < 3) goto ucvV0; else goto ccvUN;
       ucvV0: // global
           if (_ccvUO::P64 < 2) goto ccvUL; else goto ccvUM;
       ccvUL: // global
           R3 = _scvhW::P64;
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccvUM: // global
           Hp = Hp + 32;
           _scvhX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvUZ; else goto ccvUV;
       ccvUV: // global
           _scvi0::P64 = P64[_scvhX::P64 + 14];
           I64[Hp - 24] = sat_scvi2_info;
           P64[Hp - 8] = _scvhW::P64;
           P64[Hp] = _scvi0::P64;
           R3 = Hp - 24;
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       ccvUN: // global
           Hp = Hp + 32;
           _scvhX::P64 = R1;
           if (Hp > HpLim) (likely: False) goto ccvUZ; else goto ccvUY;
       ccvUZ: // global
           HpAlloc = 32;
           R1 = _scvhX::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvUY: // global
           _scvi4::P64 = P64[_scvhX::P64 + 13];
           I64[Hp - 24] = sat_scvi7_info;
           P64[Hp - 8] = _scvhW::P64;
           P64[Hp] = _scvi4::P64;
           R3 = Hp - 24;
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 losFmt_scvhV_entry() //  [R1]
         { info_tbl: [(ccvV4,
                       label: losFmt_scvhV_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvV4: // global
           _scvhV::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccvV5; else goto ccvV6;
       ccvV6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvV8; else goto ccvV7;
       ccvV8: // global
           HpAlloc = 16;
           goto ccvV5;
       ccvV5: // global
           R1 = _scvhV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvV7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvhV::P64;
           _scvhx::P64 = P64[_scvhV::P64 + 16];
           _scvhy::P64 = P64[_scvhV::P64 + 24];
           I64[Hp - 8] = sat_scvi8_info;
           P64[Hp] = _scvhy::P64;
           I64[Sp - 24] = block_ccvV2_info;
           R3 = _scvhx::P64;
           R2 = Hp - 7;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccvV2() //  [R1]
         { info_tbl: [(ccvV2,
                       label: block_ccvV2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvV2: // global
           R3 = R1;
           R2 = lvl2_rcsmX_closure+1;
           Sp = Sp + 8;
           call sepBy_rcsmW_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 go_scviw_entry() //  [R1, R2]
         { info_tbl: [(ccvVx,
                       label: go_scviw_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvVx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccvVy; else goto ccvVz;
       ccvVy: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvVz: // global
           I64[Sp - 24] = block_ccvVq_info;
           _scviw::P64 = R1;
           _scvhA::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _scvhA::P64;
           P64[Sp - 8] = _scviw::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucvVQ; else goto ccvVr;
       ucvVQ: // global
           call _ccvVq(R1) args: 0, res: 0, upd: 0;
       ccvVr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccvVq() //  [R1]
         { info_tbl: [(ccvVq,
                       label: block_ccvVq_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvVq: // global
           if (R1 & 7 == 1) goto ccvVu; else goto ccvVv;
       ccvVu: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccvVv: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto ccvVP; else goto ccvVO;
       ccvVP: // global
           HpAlloc = 208;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvVO: // global
           _scviz::P64 = P64[R1 + 6];
           _scviA::P64 = P64[R1 + 14];
           I64[Hp - 200] = stg_ap_2_upd_info;
           P64[Hp - 184] = P64[Sp + 16];
           P64[Hp - 176] = _scviA::P64;
           I64[Hp - 168] = stg_sel_2_upd_info;
           _ccvVF::P64 = Hp - 200;
           P64[Hp - 152] = _ccvVF::P64;
           I64[Hp - 144] = :_con_info;
           P64[Hp - 136] = _scviz::P64;
           P64[Hp - 128] = Hp - 168;
           I64[Hp - 120] = stg_sel_1_upd_info;
           P64[Hp - 104] = _ccvVF::P64;
           I64[Hp - 96] = :_con_info;
           P64[Hp - 88] = GHC.Types.[]_closure+1;
           P64[Hp - 80] = Hp - 120;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccvVF::P64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           P64[Hp - 32] = Hp - 72;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 46;
           P64[Hp - 8] = Hp - 94;
           P64[Hp] = Hp - 142;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 ds1_scviv_entry() //  [R1]
         { info_tbl: [(ccvVR,
                       label: ds1_scviv_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvVR: // global
           _scviv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccvVS; else goto ccvVT;
       ccvVT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccvVV; else goto ccvVU;
       ccvVV: // global
           HpAlloc = 16;
           goto ccvVS;
       ccvVS: // global
           R1 = _scviv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccvVU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scviv::P64;
           _scvhA::P64 = P64[_scviv::P64 + 16];
           _scviu::P64 = P64[_scviv::P64 + 24];
           I64[Hp - 8] = go_scviw_info;
           P64[Hp] = _scvhA::P64;
           R2 = _scviu::P64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call go_scviw_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.usageInfo1_entry() //  [R2]
         { info_tbl: [(ccvW0,
                       label: System.Console.GetOpt.usageInfo1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvW0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccvW1; else goto ccvW2;
       ccvW1: // global
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccvW2: // global
           I64[Sp - 8] = block_ccvSf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucvWx; else goto ccvSg;
       ucvWx: // global
           call _ccvSf(R1) args: 0, res: 0, upd: 0;
       ccvSg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccvSf() //  [R1]
         { info_tbl: [(ccvSf,
                       label: block_ccvSf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvSf: // global
           if (R1 & 7 == 1) goto ccvVX; else goto ccvVY;
       ccvVX: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvVY: // global
           I64[Sp - 8] = block_ccvSl_info;
           _scvhu::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scvhu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucvWw; else goto ccvSm;
       ucvWw: // global
           call _ccvSl(R1) args: 0, res: 0, upd: 0;
       ccvSm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccvSl() //  [R1]
         { info_tbl: [(ccvSl,
                       label: block_ccvSl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvSl: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccvW8; else goto ccvW7;
       ccvW8: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvW7: // global
           _scvhw::P64 = P64[R1 + 7];
           _scvhx::P64 = P64[R1 + 15];
           _scvhy::P64 = P64[R1 + 23];
           _scvhz::P64 = P64[R1 + 31];
           I64[Hp - 80] = b2_scvhA_info;
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = sosFmt_scvhF_info;
           P64[Hp - 40] = _scvhw::P64;
           P64[Hp - 32] = _scvhy::P64;
           I64[Hp - 24] = losFmt_scvhV_info;
           P64[Hp - 8] = _scvhx::P64;
           P64[Hp] = _scvhy::P64;
           I64[Sp - 16] = block_ccvVc_info;
           R2 = _scvhz::P64;
           P64[Sp - 8] = Hp - 24;
           P64[Sp] = Hp - 56;
           P64[Sp + 8] = Hp - 80;
           Sp = Sp - 16;
           call Data.OldList.lines_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccvVc() //  [R1]
         { info_tbl: [(ccvVc,
                       label: block_ccvVc_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvVc: // global
           _ccvSq::P64 = P64[Sp + 24];
           _ccvSD::P64 = P64[Sp + 16];
           _ccvTO::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccvWh; else goto ccvWr;
       ccvWh: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccvWk; else goto ccvWj;
       ccvWk: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvWj: // global
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _ccvSq::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = GHC.Types.[]_closure+1;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccvSq::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _ccvTO::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccvSq::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _ccvSD::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccvWr: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto ccvWu; else goto ccvWt;
       ccvWu: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccvWt: // global
           _scvit::P64 = P64[R1 + 6];
           _scviu::P64 = P64[R1 + 14];
           I64[Hp - 168] = ds1_scviv_info;
           P64[Hp - 152] = _ccvSq::P64;
           P64[Hp - 144] = _scviu::P64;
           I64[Hp - 136] = stg_sel_2_upd_info;
           _ccvVh::P64 = Hp - 168;
           P64[Hp - 120] = _ccvVh::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _scvit::P64;
           P64[Hp - 96] = Hp - 136;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccvVh::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = _ccvTO::P64;
           P64[Hp - 48] = Hp - 88;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccvVh::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _ccvSD::P64;
           P64[Hp] = Hp - 40;
           R3 = Hp - 110;
           R2 = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.753590197 UTC

[section ""data" . System.Console.GetOpt.usageInfo_closure" {
     System.Console.GetOpt.usageInfo_closure:
         const System.Console.GetOpt.usageInfo_info;
         const 0;
 },
 sat_scvjj_entry() //  [R1]
         { info_tbl: [(ccvZY,
                       label: sat_scvjj_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvZY: // global
           R2 = P64[R1 + 16];
           call System.Console.GetOpt.usageInfo_sameLen_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scvjk_entry() //  [R1]
         { info_tbl: [(ccw03,
                       label: sat_scvjk_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw03: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccw04; else goto ccw05;
       ccw04: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw05: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccvZS_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.usageInfo1_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccvZS() //  [R1, R2, R3]
         { info_tbl: [(ccvZS,
                       label: block_ccvZS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccvZS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccw08; else goto ccw07;
       ccw08: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 24;
       ccw07: // global
           I64[Hp - 16] = sat_scvjj_info;
           P64[Hp] = R2;
           I64[Sp - 16] = block_ccw01_info;
           R2 = R1;
           P64[Sp - 8] = R3;
           P64[Sp] = Hp - 16;
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_sameLen_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccw01() //  [R1]
         { info_tbl: [(ccw01,
                       label: block_ccw01_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw01: // global
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = R1;
           Sp = Sp + 24;
           call System.Console.GetOpt.usageInfo_go2_entry(R4,
                                                          R3,
                                                          R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.usageInfo_entry() //  [R2, R3]
         { info_tbl: [(ccw0d,
                       label: System.Console.GetOpt.usageInfo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw0d: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccw0h; else goto ccw0g;
       ccw0h: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.usageInfo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccw0g: // global
           I64[Hp - 40] = sat_scvjk_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R2 = Hp - 14;
           call Data.OldList.unlines_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.765617143 UTC

[section ""cstring" . lvl12_rcsn7_bytes" {
     lvl12_rcsn7_bytes:
         I8[] [111,112,116,105,111,110,32,96]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.767361711 UTC

[section ""cstring" . lvl13_rcsn8_bytes" {
     lvl13_rcsn8_bytes:
         I8[] [39,32,105,115,32,97,109,98,105,103,117,111,117,115,59,32,99,111,117,108,100,32,98,101,32,111,110,101,32,111,102,58]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.769114747 UTC

[section ""cstring" . lvl14_rcsn9_bytes" {
     lvl14_rcsn9_bytes:
         I8[] [39,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.770947719 UTC

[section ""cstring" . lvl15_rcsna_bytes" {
     lvl15_rcsna_bytes:
         I8[] [10]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.77306836 UTC

[section ""data" . lvl16_rcsnb_closure" {
     lvl16_rcsnb_closure:
         const lvl16_rcsnb_info;
         const 0;
         const 0;
         const 0;
 },
 lvl16_rcsnb_entry() //  [R1]
         { info_tbl: [(ccw0R,
                       label: lvl16_rcsnb_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw0R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw0S; else goto ccw0T;
       ccw0S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw0T: // global
           (_ccw0O::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccw0O::I64 == 0) goto ccw0Q; else goto ccw0P;
       ccw0Q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccw0P: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccw0O::I64;
           R2 = lvl15_rcsna_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.778422933 UTC

[section ""cstring" . System.Console.GetOpt.getOpt2_bytes" {
     System.Console.GetOpt.getOpt2_bytes:
         I8[] [117,110,114,101,99,111,103,110,105,122,101,100,32,111,112,116,105,111,110,32,96]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.780296772 UTC

[section ""cstring" . System.Console.GetOpt.getOpt1_bytes" {
     System.Console.GetOpt.getOpt1_bytes:
         I8[] [39,10]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.782322656 UTC

[section ""data" . lvl17_rcsnc_closure" {
     lvl17_rcsnc_closure:
         const lvl17_rcsnc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl17_rcsnc_entry() //  [R1]
         { info_tbl: [(ccw1a,
                       label: lvl17_rcsnc_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw1a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw1b; else goto ccw1c;
       ccw1b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw1c: // global
           (_ccw17::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccw17::I64 == 0) goto ccw19; else goto ccw18;
       ccw19: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccw18: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccw17::I64;
           R2 = System.Console.GetOpt.getOpt1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.786953109 UTC

[section ""data" . System.Console.GetOpt.errUnrec_closure" {
     System.Console.GetOpt.errUnrec_closure:
         const System.Console.GetOpt.errUnrec_info;
         const 0;
 },
 sat_scvjn_entry() //  [R1]
         { info_tbl: [(ccw1t,
                       label: sat_scvjn_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw1t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw1u; else goto ccw1v;
       ccw1u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw1v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl17_rcsnc_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.errUnrec_entry() //  [R2]
         { info_tbl: [(ccw1w,
                       label: System.Console.GetOpt.errUnrec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw1w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccw1A; else goto ccw1z;
       ccw1A: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = System.Console.GetOpt.errUnrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccw1z: // global
           I64[Hp - 16] = sat_scvjn_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = System.Console.GetOpt.getOpt2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.794153481 UTC

[section ""cstring" . lvl18_rcsnd_bytes" {
     lvl18_rcsnd_bytes:
         I8[] [39,32,100,111,101,115,110,39,116,32,97,108,108,111,119,32,97,110,32,97,114,103,117,109,101,110,116,10]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.796112349 UTC

[section ""data" . lvl19_rcsne_closure" {
     lvl19_rcsne_closure:
         const lvl19_rcsne_info;
 },
 lvl19_rcsne_entry() //  [R2, R3]
         { info_tbl: [(ccw1Q,
                       label: lvl19_rcsne_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw1Q: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Classes.$fEqChar_closure;
           call Data.OldList.isPrefixOf_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.799824822 UTC

[section ""data" . lvl20_rcsnf_closure" {
     lvl20_rcsnf_closure:
         const lvl20_rcsnf_info;
 },
 lvl20_rcsnf_entry() //  [R2]
         { info_tbl: [(ccw24,
                       label: lvl20_rcsnf_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw24: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccw25; else goto ccw26;
       ccw25: // global
           R2 = R2;
           R1 = lvl20_rcsnf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccw26: // global
           I64[Sp - 8] = block_ccw21_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucw2e; else goto ccw22;
       ucw2e: // global
           call _ccw21(R1) args: 0, res: 0, upd: 0;
       ccw22: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccw21() //  [R1]
         { info_tbl: [(ccw21,
                       label: block_ccw21_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw21: // global
           if (I64[R1 + 7] == 61) goto ccw2d; else goto ccw2c;
       ccw2d: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccw2c: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.805395125 UTC

[section ""data" . lvl21_rcsng_closure" {
     lvl21_rcsng_closure:
         const GHC.Types.C#_con_info;
         const 45;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.807482646 UTC

[section ""data" . lvl22_rcsnh_closure" {
     lvl22_rcsnh_closure:
         const lvl22_rcsnh_info;
         const 0;
         const 0;
         const 0;
 },
 lvl22_rcsnh_entry() //  [R1]
         { info_tbl: [(ccw2A,
                       label: lvl22_rcsnh_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw2A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw2B; else goto ccw2C;
       ccw2B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw2C: // global
           (_ccw2x::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccw2x::I64 == 0) goto ccw2z; else goto ccw2y;
       ccw2z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccw2y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccw2x::I64;
           R2 = lvl18_rcsnd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.811593599 UTC

[section ""cstring" . lvl23_rcsni_bytes" {
     lvl23_rcsni_bytes:
         I8[] [111,112,116,105,111,110,32,96,45,45]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.813947501 UTC

[section ""data" . poly_go_rcsnj_closure" {
     poly_go_rcsnj_closure:
         const poly_go_rcsnj_info;
 },
 sat_scvjB_entry() //  [R1]
         { info_tbl: [(ccw35,
                       label: sat_scvjB_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw35: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw36; else goto ccw37;
       ccw36: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw37: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go_rcsnj_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go_rcsnj_entry() //  [R2]
         { info_tbl: [(ccw3c,
                       label: poly_go_rcsnj_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw3c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw3d; else goto ccw3e;
       ccw3d: // global
           R2 = R2;
           R1 = poly_go_rcsnj_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccw3e: // global
           I64[Sp - 8] = block_ccw2Q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucw3n; else goto ccw2R;
       ucw3n: // global
           call _ccw2Q(R1) args: 0, res: 0, upd: 0;
       ccw2R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccw2Q() //  [R1]
         { info_tbl: [(ccw2Q,
                       label: block_ccw2Q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw2Q: // global
           if (R1 & 7 == 1) goto ccw39; else goto ccw3a;
       ccw39: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccw3a: // global
           I64[Sp - 8] = block_ccw2W_info;
           _scvjv::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scvjv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucw3m; else goto ccw2X;
       ucw3m: // global
           call _ccw2W(R1) args: 0, res: 0, upd: 0;
       ccw2X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccw2W() //  [R1]
         { info_tbl: [(ccw2W,
                       label: block_ccw2W_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw2W: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccw3l; else goto ccw3k;
       ccw3l: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccw3k: // global
           _scvjz::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_scvjB_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scvjz::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.82485554 UTC

[section ""data" . lvl24_rcsnk_closure" {
     lvl24_rcsnk_closure:
         const lvl24_rcsnk_info;
         const 0;
         const 0;
         const 0;
 },
 lvl24_rcsnk_entry() //  [R1]
         { info_tbl: [(ccw3X,
                       label: lvl24_rcsnk_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw3X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw3Y; else goto ccw3Z;
       ccw3Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw3Z: // global
           (_ccw3U::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccw3U::I64 == 0) goto ccw3W; else goto ccw3V;
       ccw3W: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccw3V: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccw3U::I64;
           R2 = lvl13_rcsn8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.830420198 UTC

[section ""data" . poly_go1_rcsnl_closure" {
     poly_go1_rcsnl_closure:
         const poly_go1_rcsnl_info;
 },
 sat_scvjL_entry() //  [R1]
         { info_tbl: [(ccw4r,
                       label: sat_scvjL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw4r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw4s; else goto ccw4t;
       ccw4s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw4t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call poly_go1_rcsnl_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 poly_go1_rcsnl_entry() //  [R2]
         { info_tbl: [(ccw4y,
                       label: poly_go1_rcsnl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw4y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw4z; else goto ccw4A;
       ccw4z: // global
           R2 = R2;
           R1 = poly_go1_rcsnl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccw4A: // global
           I64[Sp - 8] = block_ccw4c_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucw4J; else goto ccw4d;
       ucw4J: // global
           call _ccw4c(R1) args: 0, res: 0, upd: 0;
       ccw4d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccw4c() //  [R1]
         { info_tbl: [(ccw4c,
                       label: block_ccw4c_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw4c: // global
           if (R1 & 7 == 1) goto ccw4v; else goto ccw4w;
       ccw4v: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccw4w: // global
           I64[Sp - 8] = block_ccw4i_info;
           _scvjF::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scvjF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucw4I; else goto ccw4j;
       ucw4I: // global
           call _ccw4i(R1) args: 0, res: 0, upd: 0;
       ccw4j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccw4i() //  [R1]
         { info_tbl: [(ccw4i,
                       label: block_ccw4i_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw4i: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccw4H; else goto ccw4G;
       ccw4H: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccw4G: // global
           _scvjJ::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_scvjL_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scvjJ::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:24.863687072 UTC

[section ""data" . System.Console.GetOpt.$wgetOpt'_closure" {
     System.Console.GetOpt.$wgetOpt'_closure:
         const System.Console.GetOpt.$wgetOpt'_info;
         const 0;
 },
 ds_scvjV_entry() //  [R1]
         { info_tbl: [(ccw5F,
                       label: ds_scvjV_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw5F: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccw5G; else goto ccw5H;
       ccw5G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw5H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccw5C_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccw5C() //  [R1, R2, R3, R4]
         { info_tbl: [(ccw5C,
                       label: block_ccw5C_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw5C: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccw5K; else goto ccw5J;
       ccw5K: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccw5J: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds_scvkr_entry() //  [R1]
         { info_tbl: [(ccw5U,
                       label: ds_scvkr_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw5U: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccw5V; else goto ccw5W;
       ccw5V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw5W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccw5R_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccw5R() //  [R1, R2, R3, R4]
         { info_tbl: [(ccw5R,
                       label: block_ccw5R_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw5R: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccw5Z; else goto ccw5Y;
       ccw5Z: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccw5Y: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvkx_entry() //  [R1]
         { info_tbl: [(ccw68,
                       label: sat_scvkx_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw68: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccw69; else goto ccw6a;
       ccw69: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw6a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Types.[]_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds4_scvl3_entry() //  [R1]
         { info_tbl: [(ccw6x,
                       label: ds4_scvl3_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw6x: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccw6y; else goto ccw6z;
       ccw6y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw6z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccw6u_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccw6u() //  [R1, R2, R3, R4]
         { info_tbl: [(ccw6u,
                       label: block_ccw6u_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw6u: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccw6C; else goto ccw6B;
       ccw6C: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccw6B: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds4_scvlz_entry() //  [R1]
         { info_tbl: [(ccw6M,
                       label: ds4_scvlz_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw6M: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccw6N; else goto ccw6O;
       ccw6N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw6O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccw6J_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccw6J() //  [R1, R2, R3, R4]
         { info_tbl: [(ccw6J,
                       label: block_ccw6J_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw6J: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccw6R; else goto ccw6Q;
       ccw6R: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccw6Q: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds4_scvm7_entry() //  [R1]
         { info_tbl: [(ccw7b,
                       label: ds4_scvm7_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw7b: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccw7c; else goto ccw7d;
       ccw7c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw7d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccw78_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.Permute_closure+2;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccw78() //  [R1, R2, R3, R4]
         { info_tbl: [(ccw78,
                       label: block_ccw78_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw78: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccw7g; else goto ccw7f;
       ccw7g: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccw7f: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds4_scvmD_entry() //  [R1]
         { info_tbl: [(ccw7q,
                       label: ds4_scvmD_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw7q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccw7r; else goto ccw7s;
       ccw7r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw7s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccw7n_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 32];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccw7n() //  [R1, R2, R3, R4]
         { info_tbl: [(ccw7n,
                       label: block_ccw7n_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw7n: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccw7v; else goto ccw7u;
       ccw7v: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccw7u: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go1_scvnp_entry() //  [R1, R2]
         { info_tbl: [(ccw88,
                       label: go1_scvnp_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw88: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccw89; else goto ucw8y;
       ccw89: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ucw8y: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _ccw7Y() args: 0, res: 0, upd: 0;
     }
 },
 _ccw7Y() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw7Y: // global
           I64[Sp - 24] = block_ccw81_info;
           R1 = P64[Sp + 8];
           _scvnp::P64 = P64[Sp];
           P64[Sp - 16] = P64[_scvnp::P64 + 7];
           P64[Sp - 8] = P64[_scvnp::P64 + 15];
           I64[Sp + 8] = I64[_scvnp::P64 + 23];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucw8A; else goto ccw82;
       ucw8A: // global
           call _ccw81(R1) args: 0, res: 0, upd: 0;
       ccw82: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccw81() //  [R1]
         { info_tbl: [(ccw81,
                       label: block_ccw81_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw81: // global
           if (R1 & 7 == 1) goto ccw85; else goto ccw86;
       ccw85: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       ccw86: // global
           I64[Sp] = block_ccw8g_info;
           _scvnt::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _scvnt::P64;
           if (R1 & 7 != 0) goto ucw8B; else goto ccw8i;
       ucw8B: // global
           call _ccw8g(R1) args: 0, res: 0, upd: 0;
       ccw8i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccw8g() //  [R1]
         { info_tbl: [(ccw8g,
                       label: block_ccw8g_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw8g: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccw8o; else goto ccw8n;
       ccw8o: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccw8n: // global
           _scvnt::P64 = P64[Sp + 16];
           if (I64[Sp + 32] == I64[R1 + 7]) goto ccw8x; else goto ccw8s;
       ccw8x: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = _scvnt::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccw8s: // global
           Hp = Hp - 56;
           P64[Sp + 32] = _scvnt::P64;
           Sp = Sp + 24;
           call _ccw7Y() args: 0, res: 0, upd: 0;
     }
 },
 go_scvne_entry() //  [R1, R2]
         { info_tbl: [(ccw8I,
                       label: go_scvne_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw8I: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccw8J; else goto ccw8K;
       ccw8J: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccw8K: // global
           I64[Sp - 24] = block_ccw7K_info;
           _scvne::P64 = R1;
           _scvnd::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _scvnd::I64;
           P64[Sp - 8] = _scvne::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucw8S; else goto ccw7L;
       ucw8S: // global
           call _ccw7K(R1) args: 0, res: 0, upd: 0;
       ccw7L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccw7K() //  [R1]
         { info_tbl: [(ccw7K,
                       label: block_ccw7K_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw7K: // global
           if (R1 & 7 == 1) goto ccw8F; else goto ccw8G;
       ccw8F: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccw8G: // global
           I64[Sp - 8] = block_ccw7Q_info;
           _scvni::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scvni::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucw8R; else goto ccw7R;
       ucw8R: // global
           call _ccw7Q(R1) args: 0, res: 0, upd: 0;
       ccw7R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccw7Q() //  [R1]
         { info_tbl: [(ccw7Q,
                       label: block_ccw7Q_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw7Q: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccw8Q; else goto ccw8P;
       ccw8Q: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccw8P: // global
           _scvnk::P64 = P64[R1 + 7];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = go1_scvnp_info;
           P64[Hp - 16] = R1;
           P64[Hp - 8] = Hp - 56;
           I64[Hp] = I64[Sp + 16];
           R2 = _scvnk::P64;
           R1 = Hp - 23;
           Sp = Sp + 32;
           call go1_scvnp_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 ds8_scvnB_entry() //  [R1]
         { info_tbl: [(ccw9d,
                       label: ds8_scvnB_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw9d: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccw9e; else goto ccw9f;
       ccw9e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw9f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccw9a_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccw9a() //  [R1, R2, R3, R4]
         { info_tbl: [(ccw9a,
                       label: block_ccw9a_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw9a: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccw9i; else goto ccw9h;
       ccw9i: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccw9h: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds8_scvoa_entry() //  [R1]
         { info_tbl: [(ccw9u,
                       label: ds8_scvoa_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw9u: // global
           _scvoa::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccw9v; else goto ccw9w;
       ccw9w: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccw9y; else goto ccw9x;
       ccw9y: // global
           HpAlloc = 48;
           goto ccw9v;
       ccw9v: // global
           R1 = _scvoa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccw9x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvoa::P64;
           _scvjM::P64 = P64[_scvoa::P64 + 16];
           _scvjN::P64 = P64[_scvoa::P64 + 24];
           _scvjR::P64 = P64[_scvoa::P64 + 32];
           _scvnA::P64 = P64[_scvoa::P64 + 40];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl21_rcsng_closure+1;
           P64[Hp - 24] = _scvnA::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = _scvjR::P64;
           I64[Sp - 24] = block_ccw9r_info;
           R4 = Hp - 14;
           R3 = _scvjN::P64;
           R2 = _scvjM::P64;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccw9r() //  [R1, R2, R3, R4]
         { info_tbl: [(ccw9r,
                       label: block_ccw9r_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw9r: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccw9B; else goto ccw9A;
       ccw9B: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccw9A: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds10_scvoP_entry() //  [R1]
         { info_tbl: [(ccwa0,
                       label: ds10_scvoP_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwa0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwa1; else goto ccwa2;
       ccwa1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwa2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccw9X_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccw9X() //  [R1, R2, R3, R4]
         { info_tbl: [(ccw9X,
                       label: block_ccw9X_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw9X: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwa5; else goto ccwa4;
       ccwa5: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwa4: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds10_scvpm_entry() //  [R1]
         { info_tbl: [(ccwah,
                       label: ds10_scvpm_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwah: // global
           _scvpm::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccwai; else goto ccwaj;
       ccwaj: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccwal; else goto ccwak;
       ccwal: // global
           HpAlloc = 48;
           goto ccwai;
       ccwai: // global
           R1 = _scvpm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwak: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvpm::P64;
           _scvjM::P64 = P64[_scvpm::P64 + 16];
           _scvjN::P64 = P64[_scvpm::P64 + 24];
           _scvjR::P64 = P64[_scvpm::P64 + 32];
           _scvoO::P64 = P64[_scvpm::P64 + 40];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = lvl21_rcsng_closure+1;
           P64[Hp - 24] = _scvoO::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = _scvjR::P64;
           I64[Sp - 24] = block_ccwae_info;
           R4 = Hp - 14;
           R3 = _scvjN::P64;
           R2 = _scvjM::P64;
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwae() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwae,
                       label: block_ccwae_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwae: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwao; else goto ccwan;
       ccwao: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwan: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scvpX_entry() //  [R1]
         { info_tbl: [(ccwaI,
                       label: ds11_scvpX_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwaI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwaJ; else goto ccwaK;
       ccwaJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwaK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwaF_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwaF() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwaF,
                       label: block_ccwaF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwaF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwaN; else goto ccwaM;
       ccwaN: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwaM: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvqn_entry() //  [R1]
         { info_tbl: [(ccwb5,
                       label: sat_scvqn_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwb5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwb6; else goto ccwb7;
       ccwb6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwb7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl16_rcsnb_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvqo_entry() //  [R1]
         { info_tbl: [(ccwb8,
                       label: sat_scvqo_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwb8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwbc; else goto ccwbb;
       ccwbc: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwbb: // global
           _scvpU::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scvqn_info;
           P64[Hp] = _scvpU::P64;
           R3 = Hp - 16;
           R2 = lvl14_rcsn9_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scvqp_entry() //  [R1]
         { info_tbl: [(ccwbf,
                       label: sat_scvqp_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwbf: // global
           _scvqp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwbg; else goto ccwbh;
       ccwbh: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccwbj; else goto ccwbi;
       ccwbj: // global
           HpAlloc = 72;
           goto ccwbg;
       ccwbg: // global
           R1 = _scvqp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwbi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvqp::P64;
           _scvnb::P64 = P64[_scvqp::P64 + 16];
           _scvpU::P64 = P64[_scvqp::P64 + 24];
           I64[Hp - 64] = sat_scvqo_info;
           P64[Hp - 48] = _scvpU::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scvnb::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl21_rcsng_closure+1;
           P64[Hp] = Hp - 38;
           R3 = Hp - 64;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvqq_entry() //  [R1]
         { info_tbl: [(ccwbk,
                       label: sat_scvqq_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwbk: // global
           _scvqq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwbl; else goto ccwbm;
       ccwbm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccwbo; else goto ccwbn;
       ccwbo: // global
           HpAlloc = 32;
           goto ccwbl;
       ccwbl: // global
           R1 = _scvqq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwbn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvqq::P64;
           _scvnb::P64 = P64[_scvqq::P64 + 16];
           _scvpU::P64 = P64[_scvqq::P64 + 24];
           I64[Hp - 24] = sat_scvqp_info;
           P64[Hp - 8] = _scvnb::P64;
           P64[Hp] = _scvpU::P64;
           R3 = Hp - 24;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scvqA_entry() //  [R1]
         { info_tbl: [(ccwby,
                       label: ds11_scvqA_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwby: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwbz; else goto ccwbA;
       ccwbz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwbA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwbv_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwbv() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwbv,
                       label: block_ccwbv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwbv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwbD; else goto ccwbC;
       ccwbD: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwbC: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scvr8_entry() //  [R1]
         { info_tbl: [(ccwbN,
                       label: ds11_scvr8_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwbN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwbO; else goto ccwbP;
       ccwbO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwbP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwbK_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwbK() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwbK,
                       label: block_ccwbK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwbK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwbS; else goto ccwbR;
       ccwbS: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwbR: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scvrH_entry() //  [R1]
         { info_tbl: [(ccwc7,
                       label: ds11_scvrH_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwc7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwc8; else goto ccwc9;
       ccwc8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwc9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwc4_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwc4() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwc4,
                       label: block_ccwc4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwc4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwcc; else goto ccwcb;
       ccwcc: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwcb: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvrN_entry() //  [R1]
         { info_tbl: [(ccwcl,
                       label: sat_scvrN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwcl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwcm; else goto ccwcn;
       ccwcm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwcn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scvsf_entry() //  [R1]
         { info_tbl: [(ccwcx,
                       label: ds11_scvsf_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwcx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwcy; else goto ccwcz;
       ccwcy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwcz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwcu_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwcu() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwcu,
                       label: block_ccwcu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwcu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwcC; else goto ccwcB;
       ccwcC: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwcB: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvsm_entry() //  [R1]
         { info_tbl: [(ccwcM,
                       label: sat_scvsm_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwcM: // global
           _scvsm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwcN; else goto ccwcO;
       ccwcO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccwcQ; else goto ccwcP;
       ccwcQ: // global
           HpAlloc = 16;
           goto ccwcN;
       ccwcN: // global
           R1 = _scvsm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwcP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvsm::P64;
           _scvrE::P64 = P64[_scvsm::P64 + 16];
           _scvrG::P64 = P64[_scvsm::P64 + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _scvrG::P64;
           R2 = Hp - 6;
           R1 = _scvrE::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds12_scvsO_entry() //  [R1]
         { info_tbl: [(ccwd0,
                       label: ds12_scvsO_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwd0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwd1; else goto ccwd2;
       ccwd1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwd2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwcX_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwcX() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwcX,
                       label: block_ccwcX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwcX: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwd5; else goto ccwd4;
       ccwd5: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwd4: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvte_entry() //  [R1]
         { info_tbl: [(ccwdl,
                       label: sat_scvte_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwdl: // global
           _scvte::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwdm; else goto ccwdn;
       ccwdn: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccwdp; else goto ccwdo;
       ccwdp: // global
           HpAlloc = 48;
           goto ccwdm;
       ccwdm: // global
           R1 = _scvte::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwdo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvte::P64;
           _scvnb::P64 = P64[_scvte::P64 + 16];
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scvnb::P64;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl21_rcsng_closure+1;
           P64[Hp] = Hp - 38;
           R3 = lvl24_rcsnk_closure;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvtf_entry() //  [R1]
         { info_tbl: [(ccwdq,
                       label: sat_scvtf_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwdq: // global
           _scvtf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwdr; else goto ccwds;
       ccwds: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwdu; else goto ccwdt;
       ccwdu: // global
           HpAlloc = 24;
           goto ccwdr;
       ccwdr: // global
           R1 = _scvtf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwdt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvtf::P64;
           _scvnb::P64 = P64[_scvtf::P64 + 16];
           I64[Hp - 16] = sat_scvte_info;
           P64[Hp] = _scvnb::P64;
           R3 = Hp - 16;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvtg_entry() //  [R1]
         { info_tbl: [(ccwdv,
                       label: sat_scvtg_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwdv: // global
           _scvtg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwdw; else goto ccwdx;
       ccwdx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwdz; else goto ccwdy;
       ccwdz: // global
           HpAlloc = 24;
           goto ccwdw;
       ccwdw: // global
           R1 = _scvtg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwdy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvtg::P64;
           _scvnb::P64 = P64[_scvtg::P64 + 16];
           _scvny::P64 = P64[_scvtg::P64 + 24];
           I64[Hp - 16] = sat_scvtf_info;
           P64[Hp] = _scvnb::P64;
           R3 = _scvny::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvtr_entry() //  [R1]
         { info_tbl: [(ccwdQ,
                       label: sat_scvtr_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwdQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwdR; else goto ccwdS;
       ccwdR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwdS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 ds8_scvtu_entry() //  [R1]
         { info_tbl: [(ccwe2,
                       label: ds8_scvtu_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwe2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwe3; else goto ccwe4;
       ccwe3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwe4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwdZ_info;
           R3 = P64[R1 + 16];
           R2 = lvl20_rcsnf_closure+1;
           Sp = Sp - 24;
           call GHC.List.$wbreak_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwdZ() //  [R1, R2]
         { info_tbl: [(ccwdZ,
                       label: block_ccwdZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwdZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwe7; else goto ccwe6;
       ccwe7: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccwe6: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_scvtF_entry() //  [R1, R2]
         { info_tbl: [(ccwer,
                       label: go_scvtF_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwer: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccwes; else goto ucwfr;
       ccwes: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ucwfr: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _ccweh() args: 0, res: 0, upd: 0;
     }
 },
 _ccweh() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccweh: // global
           _scvtE::P64 = P64[P64[Sp] + 7];
           I64[Sp - 8] = block_ccwek_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _scvtE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucwfw; else goto ccwel;
       ucwfw: // global
           call _ccwek(R1) args: 0, res: 0, upd: 0;
       ccwel: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccwek() //  [R1]
         { info_tbl: [(ccwek,
                       label: block_ccwek_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwek: // global
           if (R1 & 7 == 1) goto ccweo; else goto ccwep;
       ccweo: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccwep: // global
           I64[Sp - 8] = block_ccwez_info;
           _scvtJ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _scvtJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucwfx; else goto ccweB;
       ucwfx: // global
           call _ccwez(R1) args: 0, res: 0, upd: 0;
       ccweB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccwez() //  [R1]
         { info_tbl: [(ccwez,
                       label: block_ccwez_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwez: // global
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _ccweZ() args: 0, res: 0, upd: 0;
     }
 },
 _ccweZ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccweZ: // global
           _scvtT::P64 = P64[Sp];
           I64[Sp] = block_ccwf1_info;
           R1 = _scvtT::P64;
           if (R1 & 7 != 0) goto ucwfA; else goto ccwf3;
       ucwfA: // global
           call _ccwf1(R1) args: 0, res: 0, upd: 0;
       ccwf3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccwf1() //  [R1]
         { info_tbl: [(ccwf1,
                       label: block_ccwf1_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwf1: // global
           if (R1 & 7 == 1) goto ccwf9; else goto ccwfe;
       ccwf9: // global
           P64[Sp + 32] = P64[Sp + 16];
           Sp = Sp + 24;
           call _ccweh() args: 0, res: 0, upd: 0;
       ccwfe: // global
           I64[Sp - 8] = block_ccwfc_info;
           R2 = P64[R1 + 6];
           _scvtW::P64 = P64[R1 + 14];
           R1 = P64[Sp + 32];
           P64[Sp] = _scvtW::P64;
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccwfc() //  [R1]
         { info_tbl: [(ccwfc,
                       label: block_ccwfc_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwfc: // global
           if (R1 & 7 == 1) goto ccwfk; else goto ucwft;
       ccwfk: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _ccweZ() args: 0, res: 0, upd: 0;
       ucwft: // global
           Sp = Sp + 8;
           call _ccweP() args: 0, res: 0, upd: 0;
     }
 },
 _ccweP() //  []
         { info_tbl: [(ccweP,
                       label: block_ccweP_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccweP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccweV; else goto ccweU;
       ccweV: // global
           HpAlloc = 56;
           I64[Sp] = block_ccweP_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       ccweU: // global
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 getWith_scvtC_entry() //  [R1, R2]
         { info_tbl: [(ccwfE,
                       label: getWith_scvtC_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwfE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccwfI; else goto ccwfH;
       ccwfI: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccwfH: // global
           _scvjN::P64 = P64[R1 + 7];
           _scvty::P64 = P64[R1 + 15];
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = _scvty::P64;
           I64[Hp - 8] = go_scvtF_info;
           P64[Hp] = Hp - 40;
           R2 = _scvjN::P64;
           R1 = Hp - 7;
           call go_scvtF_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 ds9_scvu1_entry() //  [R1]
         { info_tbl: [(ccwfZ,
                       label: ds9_scvu1_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwfZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwg0; else goto ccwg1;
       ccwg0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwg1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwfW_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwfW() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwfW,
                       label: block_ccwfW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwfW: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwg4; else goto ccwg3;
       ccwg4: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwg3: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvuj_entry() //  [R1]
         { info_tbl: [(ccwgb,
                       label: sat_scvuj_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwgb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwgc; else goto ccwgd;
       ccwgc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwgd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds11_scvuG_entry() //  [R1]
         { info_tbl: [(ccwgH,
                       label: ds11_scvuG_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwgH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwgI; else goto ccwgJ;
       ccwgI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwgJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwgE_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwgE() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwgE,
                       label: block_ccwgE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwgE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwgM; else goto ccwgL;
       ccwgM: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwgL: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scvvg_entry() //  [R1]
         { info_tbl: [(ccwh3,
                       label: ds15_scvvg_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwh3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwh4; else goto ccwh5;
       ccwh4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwh5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwh0_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwh0() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwh0,
                       label: block_ccwh0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwh0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwh8; else goto ccwh7;
       ccwh8: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwh7: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvvy_entry() //  [R1]
         { info_tbl: [(ccwhf,
                       label: sat_scvvy_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwhf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwhg; else goto ccwhh;
       ccwhg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwhh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scvvM_entry() //  [R1]
         { info_tbl: [(ccwhq,
                       label: ds15_scvvM_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwhq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwhr; else goto ccwhs;
       ccwhr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwhs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwhn_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwhn() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwhn,
                       label: block_ccwhn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwhn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwhv; else goto ccwhu;
       ccwhv: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwhu: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvwa_entry() //  [R1]
         { info_tbl: [(ccwhF,
                       label: sat_scvwa_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwhF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwhG; else goto ccwhH;
       ccwhG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwhH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl22_rcsnh_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvwb_entry() //  [R1]
         { info_tbl: [(ccwhI,
                       label: sat_scvwb_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwhI: // global
           _scvwb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwhJ; else goto ccwhK;
       ccwhK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwhM; else goto ccwhL;
       ccwhM: // global
           HpAlloc = 24;
           goto ccwhJ;
       ccwhJ: // global
           R1 = _scvwb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwhL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvwb::P64;
           _scvty::P64 = P64[_scvwb::P64 + 16];
           I64[Hp - 16] = sat_scvwa_info;
           P64[Hp] = _scvty::P64;
           R3 = Hp - 16;
           R2 = lvl23_rcsni_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds12_scvwq_entry() //  [R1]
         { info_tbl: [(ccwib,
                       label: ds12_scvwq_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwib: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwic; else goto ccwid;
       ccwic: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwid: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwi8_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwi8() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwi8,
                       label: block_ccwi8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwi8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwig; else goto ccwif;
       ccwig: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwif: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvwP_entry() //  [R1]
         { info_tbl: [(ccwiy,
                       label: sat_scvwP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwiy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwiz; else goto ccwiA;
       ccwiz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwiA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl16_rcsnb_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvwQ_entry() //  [R1]
         { info_tbl: [(ccwiB,
                       label: sat_scvwQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwiB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwiF; else goto ccwiE;
       ccwiF: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwiE: // global
           _scvwk::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_scvwP_info;
           P64[Hp] = _scvwk::P64;
           R3 = Hp - 16;
           R2 = lvl14_rcsn9_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scvwR_entry() //  [R1]
         { info_tbl: [(ccwiI,
                       label: sat_scvwR_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwiI: // global
           _scvwR::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto ccwiJ; else goto ccwiK;
       ccwiK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwiM; else goto ccwiL;
       ccwiM: // global
           HpAlloc = 24;
           goto ccwiJ;
       ccwiJ: // global
           R1 = _scvwR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwiL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvwR::P64;
           _scvty::P64 = P64[_scvwR::P64 + 16];
           _scvwk::P64 = P64[_scvwR::P64 + 24];
           I64[Hp - 16] = sat_scvwQ_info;
           P64[Hp] = _scvwk::P64;
           I64[Sp - 32] = block_ccwiG_info;
           R3 = _scvty::P64;
           R2 = lvl6_rcsn1_bytes;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwiG() //  [R1]
         { info_tbl: [(ccwiG,
                       label: block_ccwiG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwiG: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvwS_entry() //  [R1]
         { info_tbl: [(ccwiQ,
                       label: sat_scvwS_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwiQ: // global
           _scvwS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwiR; else goto ccwiS;
       ccwiS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccwiU; else goto ccwiT;
       ccwiU: // global
           HpAlloc = 32;
           goto ccwiR;
       ccwiR: // global
           R1 = _scvwS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwiT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvwS::P64;
           _scvty::P64 = P64[_scvwS::P64 + 16];
           _scvwk::P64 = P64[_scvwS::P64 + 24];
           I64[Hp - 24] = sat_scvwR_info;
           P64[Hp - 8] = _scvty::P64;
           P64[Hp] = _scvwk::P64;
           R3 = Hp - 24;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds12_scvx2_entry() //  [R1]
         { info_tbl: [(ccwj4,
                       label: ds12_scvx2_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwj4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwj5; else goto ccwj6;
       ccwj5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwj6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwj1_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwj1() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwj1,
                       label: block_ccwj1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwj1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwj9; else goto ccwj8;
       ccwj9: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwj8: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scvxD_entry() //  [R1]
         { info_tbl: [(ccwjq,
                       label: ds15_scvxD_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwjq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwjr; else goto ccwjs;
       ccwjr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwjs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwjn_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwjn() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwjn,
                       label: block_ccwjn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwjn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwjv; else goto ccwju;
       ccwjv: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwju: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvxV_entry() //  [R1]
         { info_tbl: [(ccwjC,
                       label: sat_scvxV_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwjC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwjD; else goto ccwjE;
       ccwjD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwjE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scvy9_entry() //  [R1]
         { info_tbl: [(ccwjN,
                       label: ds15_scvy9_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwjN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwjO; else goto ccwjP;
       ccwjO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwjP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwjK_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwjK() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwjK,
                       label: block_ccwjK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwjK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwjS; else goto ccwjR;
       ccwjS: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwjR: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 ds12_scvyL_entry() //  [R1]
         { info_tbl: [(ccwkc,
                       label: ds12_scvyL_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwkc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwkd; else goto ccwke;
       ccwkd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwke: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwk9_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwk9() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwk9,
                       label: block_ccwk9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwk9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwkh; else goto ccwkg;
       ccwkh: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwkg: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvyR_entry() //  [R1]
         { info_tbl: [(ccwkq,
                       label: sat_scvyR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwkq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwkr; else goto ccwks;
       ccwkr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwks: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scvzm_entry() //  [R1]
         { info_tbl: [(ccwkJ,
                       label: ds15_scvzm_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwkJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwkK; else goto ccwkL;
       ccwkK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwkL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwkG_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwkG() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwkG,
                       label: block_ccwkG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwkG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwkO; else goto ccwkN;
       ccwkO: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwkN: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvzE_entry() //  [R1]
         { info_tbl: [(ccwkV,
                       label: sat_scvzE_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwkV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccwkW; else goto ccwkX;
       ccwkW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwkX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 ds15_scvzS_entry() //  [R1]
         { info_tbl: [(ccwl6,
                       label: ds15_scvzS_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwl6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwl7; else goto ccwl8;
       ccwl7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwl8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwl3_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwl3() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwl3,
                       label: block_ccwl3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwl3: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwlb; else goto ccwla;
       ccwlb: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwla: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvzZ_entry() //  [R1]
         { info_tbl: [(ccwll,
                       label: sat_scvzZ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwll: // global
           _scvzZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwlm; else goto ccwln;
       ccwln: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccwlp; else goto ccwlo;
       ccwlp: // global
           HpAlloc = 16;
           goto ccwlm;
       ccwlm: // global
           R1 = _scvzZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwlo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvzZ::P64;
           _scvyF::P64 = P64[_scvzZ::P64 + 16];
           _scvzi::P64 = P64[_scvzZ::P64 + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _scvzi::P64;
           R2 = Hp - 6;
           R1 = _scvyF::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 ds13_scvAr_entry() //  [R1]
         { info_tbl: [(ccwlz,
                       label: ds13_scvAr_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwlz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwlA; else goto ccwlB;
       ccwlA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwlB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwlw_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwlw() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwlw,
                       label: block_ccwlw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwlw: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwlE; else goto ccwlD;
       ccwlE: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwlD: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvAQ_entry() //  [R1]
         { info_tbl: [(ccwlU,
                       label: sat_scvAQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwlU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwlV; else goto ccwlW;
       ccwlV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwlW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwlS_info;
           R3 = P64[R1 + 16];
           R2 = lvl6_rcsn1_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwlS() //  [R1]
         { info_tbl: [(ccwlS,
                       label: block_ccwlS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwlS: // global
           R3 = lvl24_rcsnk_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvAR_entry() //  [R1]
         { info_tbl: [(ccwm0,
                       label: sat_scvAR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwm0: // global
           _scvAR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwm1; else goto ccwm2;
       ccwm2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwm4; else goto ccwm3;
       ccwm4: // global
           HpAlloc = 24;
           goto ccwm1;
       ccwm1: // global
           R1 = _scvAR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwm3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvAR::P64;
           _scvty::P64 = P64[_scvAR::P64 + 16];
           I64[Hp - 16] = sat_scvAQ_info;
           P64[Hp] = _scvty::P64;
           R3 = Hp - 16;
           R2 = lvl12_rcsn7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvAS_entry() //  [R1]
         { info_tbl: [(ccwm5,
                       label: sat_scvAS_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwm5: // global
           _scvAS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccwm6; else goto ccwm7;
       ccwm7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwm9; else goto ccwm8;
       ccwm9: // global
           HpAlloc = 24;
           goto ccwm6;
       ccwm6: // global
           R1 = _scvAS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwm8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scvAS::P64;
           _scvty::P64 = P64[_scvAS::P64 + 16];
           _scvtZ::P64 = P64[_scvAS::P64 + 24];
           I64[Hp - 16] = sat_scvAR_info;
           P64[Hp] = _scvty::P64;
           R3 = _scvtZ::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call System.Console.GetOpt.usageInfo_entry(R3,
                                                      R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.$wgetOpt'_entry() //  [R2, R3, R4]
         { info_tbl: [(ccwme,
                       label: System.Console.GetOpt.$wgetOpt'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwme: // global
           if ((Sp + -72) < SpLim) (likely: False) goto ccwmf; else goto ccwmg;
       ccwmf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.$wgetOpt'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwmg: // global
           I64[Sp - 24] = block_ccw5h_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucwsP; else goto ccw5i;
       ucwsP: // global
           call _ccw5h(R1) args: 0, res: 0, upd: 0;
       ccw5i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccw5h() //  [R1]
         { info_tbl: [(ccw5h,
                       label: block_ccw5h_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw5h: // global
           if (R1 & 7 == 1) goto ccwmb; else goto ccwmc;
       ccwmb: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwmc: // global
           I64[Sp - 16] = block_ccw5n_info;
           _scvjP::P64 = R1;
           _scvjR::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _scvjR::P64;
           P64[Sp] = _scvjP::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucwsl; else goto ccw5o;
       ucwsl: // global
           call _ccw5n(R1) args: 0, res: 0, upd: 0;
       ccw5o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccw5n() //  [R1]
         { info_tbl: [(ccw5n,
                       label: block_ccw5n_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw5n: // global
           if (R1 & 7 == 1) goto ccwmm; else goto ccwmJ;
       ccwmm: // global
           I64[Sp] = block_ccw5s_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto ucwsm; else goto ccw5t;
       ucwsm: // global
           call _ccw5s(R1) args: 0, res: 0, upd: 0;
       ccw5t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwmJ: // global
           I64[Sp - 16] = block_ccw6d_info;
           _scvjS::P64 = R1;
           _scvkY::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _scvkY::P64;
           P64[Sp] = _scvjS::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucwsn; else goto ccw6e;
       ucwsn: // global
           call _ccw6d(R1) args: 0, res: 0, upd: 0;
       ccw6e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccw5s() //  [R1]
         { info_tbl: [(ccw5s,
                       label: block_ccw5s_info
                       rep:StackRep [False, True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw5s: // global
           _scvjN::P64 = P64[Sp + 32];
           _scvjR::P64 = P64[Sp + 8];
           _ccwsb::P64 = R1 & 7;
           if (_ccwsb::P64 < 3) goto ucwsc; else goto ccwmE;
       ucwsc: // global
           if (_ccwsb::P64 < 2) goto ccwmq; else goto ccwmz;
       ccwmq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwmt; else goto ccwms;
       ccwmt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwms: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = _scvjR::P64;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwmz: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccwmC; else goto ccwmB;
       ccwmC: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwmB: // global
           I64[Hp - 144] = ds_scvjV_info;
           P64[Hp - 128] = _scvjN::P64;
           P64[Hp - 120] = _scvjR::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccw5y::P64 = Hp - 144;
           P64[Hp - 96] = _ccw5y::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccw5y::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccw5y::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccw5y::P64;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwmE: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccwmH; else goto ccwmG;
       ccwmH: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwmG: // global
           _scvkq::P64 = P64[R1 + 5];
           I64[Hp - 176] = ds_scvkr_info;
           P64[Hp - 160] = _scvjN::P64;
           P64[Hp - 152] = _scvjR::P64;
           P64[Hp - 144] = R1;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccw5N::P64 = Hp - 176;
           P64[Hp - 120] = _ccw5N::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccw5N::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccw5N::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _ccw5N::P64;
           I64[Hp - 40] = sat_scvkx_info;
           P64[Hp - 24] = _scvkq::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R4 = Hp - 136;
           R3 = Hp - 112;
           R2 = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccw6d() //  [R1]
         { info_tbl: [(ccw6d,
                       label: block_ccw6d_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw6d: // global
           if (I64[R1 + 7] == 45) goto ccwna; else goto ccwmM;
       ccwna: // global
           _scvkY::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccw6T_info;
           R1 = _scvkY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucwsp; else goto ccw6U;
       ucwsp: // global
           call _ccw6T(R1) args: 0, res: 0, upd: 0;
       ccw6U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwmM: // global
           I64[Sp + 8] = block_ccw6k_info;
           R1 = P64[Sp + 40];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucwso; else goto ccw6l;
       ucwso: // global
           call _ccw6k(R1) args: 0, res: 0, upd: 0;
       ccw6l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccw6T() //  [R1]
         { info_tbl: [(ccw6T,
                       label: block_ccw6T_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw6T: // global
           if (R1 & 7 == 1) goto ccwnd; else goto ccwnC;
       ccwnd: // global
           I64[Sp] = block_ccw6Y_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto ucwsr; else goto ccw6Z;
       ucwsr: // global
           call _ccw6Y(R1) args: 0, res: 0, upd: 0;
       ccw6Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwnC: // global
           I64[Sp + 8] = block_ccw7y_info;
           _scvna::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _scvna::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucwss; else goto ccw7z;
       ucwss: // global
           call _ccw7y(R1) args: 0, res: 0, upd: 0;
       ccw7z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccw6Y() //  [R1]
         { info_tbl: [(ccw6Y,
                       label: block_ccw6Y_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw6Y: // global
           _scvjN::P64 = P64[Sp + 40];
           _scvjR::P64 = P64[Sp + 16];
           _scvjS::P64 = P64[Sp + 8];
           _ccws9::P64 = R1 & 7;
           if (_ccws9::P64 < 3) goto ucwse; else goto ccwnx;
       ucwse: // global
           if (_ccws9::P64 < 2) goto ucwsk; else goto ccwnn;
       ucwsk: // global
           Sp = Sp + 24;
           call _ccwnh() args: 0, res: 0, upd: 0;
       ccwnn: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccwnq; else goto ccwnp;
       ccwnq: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwnp: // global
           I64[Hp - 144] = ds4_scvm7_info;
           P64[Hp - 128] = _scvjN::P64;
           P64[Hp - 120] = _scvjR::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccw74::P64 = Hp - 144;
           P64[Hp - 96] = _ccw74::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccw74::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccw74::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scvjS::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccw74::P64;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwnx: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwnA; else goto ccwnz;
       ccwnA: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwnz: // global
           _scvmC::P64 = P64[R1 + 5];
           I64[Hp - 184] = ds4_scvmD_info;
           P64[Hp - 168] = _scvjN::P64;
           P64[Hp - 160] = _scvjR::P64;
           P64[Hp - 152] = R1;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccw7j::P64 = Hp - 184;
           P64[Hp - 128] = _ccw7j::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccw7j::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccw7j::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccw7j::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _scvmC::P64;
           P64[Hp - 24] = _scvjS::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccw7y() //  [R1]
         { info_tbl: [(ccw7y,
                       label: block_ccw7y_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw7y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccwnF; else goto ccwnE;
       ccwnF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwnE: // global
           _scvnd::I64 = I64[R1 + 7];
           if (_scvnd::I64 == 45) goto ccwpt; else goto ccwnH;
       ccwpt: // global
           Hp = Hp - 16;
           I64[Sp] = block_ccwdB_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto ucwsu; else goto ccwdC;
       ucwsu: // global
           call _ccwdB(R1) args: 0, res: 0, upd: 0;
       ccwdC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwnH: // global
           I64[Hp - 8] = go_scvne_info;
           I64[Hp] = _scvnd::I64;
           I64[Sp - 8] = block_ccw8T_info;
           R2 = P64[Sp + 32];
           _scvnb::P64 = R1;
           R1 = Hp - 7;
           P64[Sp] = _scvnb::P64;
           Sp = Sp - 8;
           call go_scvne_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccwdB() //  [R1]
         { info_tbl: [(ccwdB,
                       label: block_ccwdB_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwdB: // global
           if (R1 & 7 == 1) goto ccwpw; else goto ccwpG;
       ccwpw: // global
           I64[Sp] = block_ccwdG_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto ucwsC; else goto ccwdH;
       ucwsC: // global
           call _ccwdG(R1) args: 0, res: 0, upd: 0;
       ccwdH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwpG: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccwpJ; else goto ccwpI;
       ccwpJ: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwpI: // global
           I64[Hp - 64] = ds8_scvtu_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_sel_0_upd_info;
           _ccwdV::P64 = Hp - 64;
           P64[Hp - 24] = _ccwdV::P64;
           I64[Hp - 16] = getWith_scvtC_info;
           P64[Hp - 8] = P64[Sp + 32];
           _ccwe8::P64 = Hp - 40;
           P64[Hp] = _ccwe8::P64;
           I64[Sp - 24] = block_ccwpF_info;
           R2 = GHC.Base.eqString_closure+2;
           _scvto::P64 = R1;
           _ccwe9::P64 = Hp - 15;
           R1 = _ccwe9::P64;
           P64[Sp - 16] = _ccwe9::P64;
           P64[Sp - 8] = _scvto::P64;
           P64[Sp] = _ccwe8::P64;
           P64[Sp + 16] = _ccwdV::P64;
           Sp = Sp - 24;
           call getWith_scvtC_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccwdG() //  [R1]
         { info_tbl: [(ccwdG,
                       label: block_ccwdG_info
                       rep:StackRep [False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwdG: // global
           _scvjR::P64 = P64[Sp + 8];
           if (R1 & 7 == 3) goto ccwpB; else goto ccwpA;
       ccwpB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccwpE; else goto ccwpD;
       ccwpE: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwpD: // global
           _scvtq::P64 = P64[R1 + 5];
           I64[Hp - 24] = sat_scvtr_info;
           P64[Hp - 8] = _scvjR::P64;
           P64[Hp] = _scvtq::P64;
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.[]_closure+1;
           R1 = Hp - 24;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwpA: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = _scvjR::P64;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccwpF() //  [R1]
         { info_tbl: [(ccwpF,
                       label: block_ccwpF_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwpF: // global
           if (R1 & 7 == 1) goto ccwrG; else goto ccwrO;
       ccwrG: // global
           _ccwe9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccwrD_info;
           R2 = lvl19_rcsne_closure+2;
           R1 = _ccwe9::P64;
           Sp = Sp + 8;
           call getWith_scvtC_entry(R2, R1) args: 8, res: 8, upd: 8;
       ccwrO: // global
           P64[Sp + 8] = R1;
           Sp = Sp + 8;
           call _scvtY() args: 0, res: 0, upd: 0;
     }
 },
 _ccwrD() //  [R1]
         { info_tbl: [(ccwrD,
                       label: block_ccwrD_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwrD: // global
           P64[Sp] = R1;
           call _scvtY() args: 0, res: 0, upd: 0;
     }
 },
 _scvtY() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       scvtY: // global
           I64[Sp - 8] = block_ccwfO_info;
           R2 = P64[Sp];
           Sp = Sp - 8;
           call poly_go_rcsnj_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccwfO() //  [R1]
         { info_tbl: [(ccwfO,
                       label: block_ccwfO_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwfO: // global
           if (R1 & 7 == 1) goto ccwpP; else goto ccwpU;
       ccwpP: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccwpS; else goto ccwpR;
       ccwpS: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwpR: // global
           I64[Hp - 176] = ds9_scvu1_info;
           P64[Hp - 160] = P64[Sp + 48];
           P64[Hp - 152] = P64[Sp + 56];
           P64[Hp - 144] = P64[Sp + 32];
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccwfS::P64 = Hp - 176;
           P64[Hp - 120] = _ccwfS::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccwfS::P64;
           I64[Hp - 88] = sat_scvuj_info;
           P64[Hp - 72] = P64[Sp + 16];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccwfS::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccwfS::P64;
           R4 = Hp - 136;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwpU: // global
           I64[Sp - 8] = block_ccwgg_info;
           _scvux::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scvux::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucwsD; else goto ccwgh;
       ucwsD: // global
           call _ccwgg(R1) args: 0, res: 0, upd: 0;
       ccwgh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccwgg() //  [R1]
         { info_tbl: [(ccwgg,
                       label: block_ccwgg_info
                       rep:StackRep [False, False, False, False, False, False, False,
                                     False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwgg: // global
           if (R1 & 7 == 1) goto ccwpX; else goto ccwrw;
       ccwpX: // global
           I64[Sp + 16] = block_ccwgl_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ucwsE; else goto ccwgm;
       ucwsE: // global
           call _ccwgl(R1) args: 0, res: 0, upd: 0;
       ccwgm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwrw: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwrz; else goto ccwry;
       ccwrz: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwry: // global
           I64[Hp - 184] = ds13_scvAr_info;
           P64[Hp - 168] = P64[Sp + 56];
           P64[Hp - 160] = P64[Sp + 64];
           P64[Hp - 152] = P64[Sp + 40];
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwls::P64 = Hp - 184;
           P64[Hp - 128] = _ccwls::P64;
           I64[Hp - 120] = sat_scvAS_info;
           P64[Hp - 104] = P64[Sp + 32];
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccwls::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccwls::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccwls::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccwgl() //  [R1]
         { info_tbl: [(ccwgl,
                       label: block_ccwgl_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwgl: // global
           _ccwdV::P64 = P64[Sp + 32];
           _ccwrV::P64 = R1 & 7;
           if (_ccwrV::P64 < 3) goto ucwsg; else goto ccwr8;
       ucwsg: // global
           if (_ccwrV::P64 < 2) goto ccwq0; else goto ccwqs;
       ccwq0: // global
           I64[Sp] = block_ccwgq_info;
           _scvuB::P64 = P64[R1 + 7];
           R1 = _ccwdV::P64;
           P64[Sp + 32] = _scvuB::P64;
           if (R1 & 7 != 0) goto ucwsF; else goto ccwgr;
       ucwsF: // global
           call _ccwgq(R1) args: 0, res: 0, upd: 0;
       ccwgr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwqs: // global
           I64[Sp - 8] = block_ccwhP_info;
           _scvwj::P64 = P64[R1 + 6];
           _scvwk::P64 = P64[R1 + 14];
           R1 = _ccwdV::P64;
           P64[Sp] = _scvwk::P64;
           P64[Sp + 32] = _scvwj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucwsG; else goto ccwhQ;
       ucwsG: // global
           call _ccwhP(R1) args: 0, res: 0, upd: 0;
       ccwhQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwr8: // global
           I64[Sp] = block_ccwjV_info;
           _scvyF::P64 = P64[R1 + 5];
           R1 = _ccwdV::P64;
           P64[Sp + 32] = _scvyF::P64;
           if (R1 & 7 != 0) goto ucwsH; else goto ccwjW;
       ucwsH: // global
           call _ccwjV(R1) args: 0, res: 0, upd: 0;
       ccwjW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccwgq() //  [R1]
         { info_tbl: [(ccwgq,
                       label: block_ccwgq_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwgq: // global
           I64[Sp] = block_ccwgv_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ucwsI; else goto ccwgw;
       ucwsI: // global
           call _ccwgv(R1) args: 0, res: 0, upd: 0;
       ccwgw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccwgv() //  [R1]
         { info_tbl: [(ccwgv,
                       label: block_ccwgv_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwgv: // global
           if (R1 & 7 == 1) goto ccwq8; else goto ccwqd;
       ccwq8: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccwqb; else goto ccwqa;
       ccwqb: // global
           HpAlloc = 160;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwqa: // global
           I64[Hp - 152] = ds11_scvuG_info;
           P64[Hp - 136] = P64[Sp + 40];
           P64[Hp - 128] = P64[Sp + 48];
           P64[Hp - 120] = P64[Sp + 24];
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccwgA::P64 = Hp - 152;
           P64[Hp - 96] = _ccwgA::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccwgA::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccwgA::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccwgA::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = Hp - 40;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwqd: // global
           I64[Sp] = block_ccwgP_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ucwsJ; else goto ccwgQ;
       ucwsJ: // global
           call _ccwgP(R1) args: 0, res: 0, upd: 0;
       ccwgQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccwgP() //  [R1]
         { info_tbl: [(ccwgP,
                       label: block_ccwgP_info
                       rep:StackRep [False, False, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwgP: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccwqg; else goto ccwqf;
       ccwqg: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwqf: // global
           _scvjM::P64 = P64[Sp + 40];
           _scvjN::P64 = P64[Sp + 48];
           _scvjR::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 61) goto ccwqq; else goto ccwql;
       ccwqq: // global
           I64[Hp - 176] = ds15_scvvM_info;
           P64[Hp - 160] = _scvjM::P64;
           P64[Hp - 152] = _scvjN::P64;
           P64[Hp - 144] = _scvjR::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccwhj::P64 = Hp - 176;
           P64[Hp - 120] = _ccwhj::P64;
           I64[Hp - 112] = sat_scvwb_info;
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 112;
           P64[Hp - 72] = Hp - 136;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccwhj::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccwhj::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccwhj::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwql: // global
           I64[Hp - 176] = ds15_scvvg_info;
           P64[Hp - 160] = _scvjM::P64;
           P64[Hp - 152] = _scvjN::P64;
           P64[Hp - 144] = _scvjR::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccwgW::P64 = Hp - 176;
           P64[Hp - 120] = _ccwgW::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccwgW::P64;
           I64[Hp - 88] = sat_scvvy_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 112;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccwgW::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccwgW::P64;
           R4 = Hp - 136;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccwhP() //  [R1]
         { info_tbl: [(ccwhP,
                       label: block_ccwhP_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwhP: // global
           I64[Sp] = block_ccwhU_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ucwsK; else goto ccwhV;
       ucwsK: // global
           call _ccwhU(R1) args: 0, res: 0, upd: 0;
       ccwhV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccwhU() //  [R1]
         { info_tbl: [(ccwhU,
                       label: block_ccwhU_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwhU: // global
           if (R1 & 7 == 1) goto ccwqw; else goto ccwqR;
       ccwqw: // global
           I64[Sp] = block_ccwhZ_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto ucwsL; else goto ccwi0;
       ucwsL: // global
           call _ccwhZ(R1) args: 0, res: 0, upd: 0;
       ccwi0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwqR: // global
           I64[Sp + 8] = block_ccwjc_info;
           _scvxz::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _scvxz::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucwsM; else goto ccwjd;
       ucwsM: // global
           call _ccwjc(R1) args: 0, res: 0, upd: 0;
       ccwjd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccwhZ() //  [R1]
         { info_tbl: [(ccwhZ,
                       label: block_ccwhZ_info
                       rep:StackRep [False, True, False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwhZ: // global
           _scvjM::P64 = P64[Sp + 48];
           _scvjN::P64 = P64[Sp + 56];
           if (R1 & 7 == 1) goto ccwqC; else goto ccwqM;
       ccwqC: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccwqF; else goto ccwqE;
       ccwqF: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwqE: // global
           I64[Hp - 176] = ds12_scvwq_info;
           P64[Hp - 160] = _scvjM::P64;
           P64[Hp - 152] = _scvjN::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwi4::P64 = Hp - 176;
           P64[Hp - 128] = _ccwi4::P64;
           I64[Hp - 120] = sat_scvwS_info;
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 8];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccwi4::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccwi4::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccwi4::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwqM: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwqP; else goto ccwqO;
       ccwqP: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwqO: // global
           _scvx0::P64 = P64[R1 + 6];
           _scvx1::P64 = P64[R1 + 14];
           I64[Hp - 184] = ds12_scvx2_info;
           P64[Hp - 168] = _scvjM::P64;
           P64[Hp - 160] = _scvjN::P64;
           P64[Hp - 152] = _scvx1::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwiX::P64 = Hp - 184;
           P64[Hp - 128] = _ccwiX::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccwiX::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccwiX::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccwiX::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 40];
           P64[Hp - 24] = _scvx0::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccwjc() //  [R1]
         { info_tbl: [(ccwjc,
                       label: block_ccwjc_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwjc: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwqU; else goto ccwqT;
       ccwqU: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwqT: // global
           _scvjM::P64 = P64[Sp + 40];
           _scvjN::P64 = P64[Sp + 48];
           _scvjR::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 61) goto ccwr6; else goto ccwqZ;
       ccwr6: // global
           I64[Hp - 184] = ds15_scvy9_info;
           P64[Hp - 168] = _scvjM::P64;
           P64[Hp - 160] = _scvjN::P64;
           P64[Hp - 152] = _scvjR::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwjG::P64 = Hp - 184;
           P64[Hp - 128] = _ccwjG::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccwjG::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccwjG::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccwjG::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwqZ: // global
           I64[Hp - 184] = ds15_scvxD_info;
           P64[Hp - 168] = _scvjM::P64;
           P64[Hp - 160] = _scvjN::P64;
           P64[Hp - 152] = _scvjR::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwjj::P64 = Hp - 184;
           P64[Hp - 128] = _ccwjj::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccwjj::P64;
           I64[Hp - 96] = sat_scvxV_info;
           P64[Hp - 80] = P64[Sp + 8];
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           I64[Hp - 48] = stg_sel_1_upd_info;
           P64[Hp - 32] = _ccwjj::P64;
           I64[Hp - 24] = stg_sel_0_upd_info;
           P64[Hp - 8] = _ccwjj::P64;
           _ccwjw::P64 = Hp - 144;
           _ccwqV::P64 = Hp - 70;
           _ccwqW::P64 = Hp - 48;
           _ccwqX::P64 = Hp - 24;
           Hp = Hp - 8;
           R4 = _ccwjw::P64;
           R3 = _ccwqV::P64;
           R2 = _ccwqW::P64;
           R1 = _ccwqX::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccwjV() //  [R1]
         { info_tbl: [(ccwjV,
                       label: block_ccwjV_info
                       rep:StackRep [False, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwjV: // global
           I64[Sp] = block_ccwk0_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ucwsN; else goto ccwk1;
       ucwsN: // global
           call _ccwk0(R1) args: 0, res: 0, upd: 0;
       ccwk1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccwk0() //  [R1]
         { info_tbl: [(ccwk0,
                       label: block_ccwk0_info
                       rep:StackRep [False, True, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwk0: // global
           if (R1 & 7 == 1) goto ccwrc; else goto ccwrh;
       ccwrc: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccwrf; else goto ccwre;
       ccwrf: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwre: // global
           I64[Hp - 176] = ds12_scvyL_info;
           P64[Hp - 160] = P64[Sp + 40];
           P64[Hp - 152] = P64[Sp + 48];
           P64[Hp - 144] = P64[Sp + 24];
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccwk5::P64 = Hp - 176;
           P64[Hp - 120] = _ccwk5::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccwk5::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccwk5::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _ccwk5::P64;
           I64[Hp - 40] = sat_scvyR_info;
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R4 = Hp - 136;
           R3 = Hp - 112;
           R2 = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwrh: // global
           I64[Sp] = block_ccwkv_info;
           _scvzi::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _scvzi::P64;
           if (R1 & 7 != 0) goto ucwsO; else goto ccwkw;
       ucwsO: // global
           call _ccwkv(R1) args: 0, res: 0, upd: 0;
       ccwkw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccwkv() //  [R1]
         { info_tbl: [(ccwkv,
                       label: block_ccwkv_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwkv: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwrk; else goto ccwrj;
       ccwrk: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwrj: // global
           _scvjM::P64 = P64[Sp + 40];
           _scvjN::P64 = P64[Sp + 48];
           _scvjR::P64 = P64[Sp + 24];
           if (I64[R1 + 7] == 61) goto ccwrr; else goto ccwrp;
       ccwrr: // global
           I64[Hp - 184] = ds15_scvzS_info;
           P64[Hp - 168] = _scvjM::P64;
           P64[Hp - 160] = _scvjN::P64;
           P64[Hp - 152] = _scvjR::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwkZ::P64 = Hp - 184;
           P64[Hp - 128] = _ccwkZ::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccwkZ::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccwkZ::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccwkZ::P64;
           I64[Hp - 48] = sat_scvzZ_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwrp: // global
           I64[Hp - 184] = ds15_scvzm_info;
           P64[Hp - 168] = _scvjM::P64;
           P64[Hp - 160] = _scvjN::P64;
           P64[Hp - 152] = _scvjR::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwkC::P64 = Hp - 184;
           P64[Hp - 128] = _ccwkC::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccwkC::P64;
           I64[Hp - 96] = sat_scvzE_info;
           P64[Hp - 80] = P64[Sp + 8];
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 96;
           P64[Hp - 56] = Hp - 120;
           I64[Hp - 48] = stg_sel_1_upd_info;
           P64[Hp - 32] = _ccwkC::P64;
           I64[Hp - 24] = stg_sel_0_upd_info;
           P64[Hp - 8] = _ccwkC::P64;
           _ccwkP::P64 = Hp - 144;
           _ccwrl::P64 = Hp - 70;
           _ccwrm::P64 = Hp - 48;
           _ccwrn::P64 = Hp - 24;
           Hp = Hp - 8;
           R4 = _ccwkP::P64;
           R3 = _ccwrl::P64;
           R2 = _ccwrm::P64;
           R1 = _ccwrn::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccw8T() //  [R1]
         { info_tbl: [(ccw8T,
                       label: block_ccw8T_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw8T: // global
           I64[Sp - 8] = block_ccw8X_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call poly_go1_rcsnl_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccw8X() //  [R1]
         { info_tbl: [(ccw8X,
                       label: block_ccw8X_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw8X: // global
           if (R1 & 7 == 1) goto ccwnL; else goto ccwoa;
       ccwnL: // global
           I64[Sp + 8] = block_ccw91_info;
           R1 = P64[Sp + 32];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucwsv; else goto ccw92;
       ucwsv: // global
           call _ccw91(R1) args: 0, res: 0, upd: 0;
       ccw92: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwoa: // global
           I64[Sp - 8] = block_ccw9E_info;
           _scvoJ::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp] = _scvoJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucwsw; else goto ccw9F;
       ucwsw: // global
           call _ccw9E(R1) args: 0, res: 0, upd: 0;
       ccw9F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccw91() //  [R1]
         { info_tbl: [(ccw91,
                       label: block_ccw91_info
                       rep:StackRep [False, False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw91: // global
           _scvjM::P64 = P64[Sp + 32];
           _scvjN::P64 = P64[Sp + 40];
           _scvjR::P64 = P64[Sp + 16];
           _scvnb::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto ccwnU; else goto ccwo5;
       ccwnU: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto ccwnX; else goto ccwnW;
       ccwnX: // global
           HpAlloc = 208;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwnW: // global
           I64[Hp - 200] = ds8_scvnB_info;
           P64[Hp - 184] = _scvjM::P64;
           P64[Hp - 176] = _scvjN::P64;
           P64[Hp - 168] = _scvjR::P64;
           I64[Hp - 160] = stg_sel_3_upd_info;
           _ccw96::P64 = Hp - 200;
           P64[Hp - 144] = _ccw96::P64;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _ccw96::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _scvnb::P64;
           P64[Hp - 96] = GHC.Types.[]_closure+1;
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = lvl21_rcsng_closure+1;
           P64[Hp - 72] = Hp - 110;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 86;
           P64[Hp - 48] = Hp - 136;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccw96::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccw96::P64;
           R4 = Hp - 160;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwo5: // global
           Hp = Hp + 216;
           if (Hp > HpLim) (likely: False) goto ccwo8; else goto ccwo7;
       ccwo8: // global
           HpAlloc = 216;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwo7: // global
           I64[Hp - 208] = ds8_scvoa_info;
           P64[Hp - 192] = _scvjM::P64;
           P64[Hp - 184] = _scvjN::P64;
           P64[Hp - 176] = _scvjR::P64;
           P64[Hp - 168] = R1;
           I64[Hp - 160] = stg_sel_3_upd_info;
           _ccw9l::P64 = Hp - 208;
           P64[Hp - 144] = _ccw9l::P64;
           I64[Hp - 136] = stg_sel_2_upd_info;
           P64[Hp - 120] = _ccw9l::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = _scvnb::P64;
           P64[Hp - 96] = GHC.Types.[]_closure+1;
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = lvl21_rcsng_closure+1;
           P64[Hp - 72] = Hp - 110;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 86;
           P64[Hp - 48] = Hp - 136;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccw9l::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccw9l::P64;
           R4 = Hp - 160;
           R3 = Hp - 62;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccw9E() //  [R1]
         { info_tbl: [(ccw9E,
                       label: block_ccw9E_info
                       rep:StackRep [False, False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw9E: // global
           if (R1 & 7 == 1) goto ccwod; else goto ccwpp;
       ccwod: // global
           I64[Sp + 16] = block_ccw9J_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ucwsx; else goto ccw9K;
       ucwsx: // global
           call _ccw9J(R1) args: 0, res: 0, upd: 0;
       ccw9K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwpp: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwps; else goto ccwpr;
       ccwps: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwpr: // global
           I64[Hp - 184] = ds12_scvsO_info;
           P64[Hp - 168] = P64[Sp + 48];
           P64[Hp - 160] = P64[Sp + 56];
           P64[Hp - 152] = P64[Sp + 32];
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwcT::P64 = Hp - 184;
           P64[Hp - 128] = _ccwcT::P64;
           I64[Hp - 120] = sat_scvtg_info;
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 16];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccwcT::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccwcT::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccwcT::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccw9J() //  [R1]
         { info_tbl: [(ccw9J,
                       label: block_ccw9J_info
                       rep:StackRep [False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw9J: // global
           _scvna::P64 = P64[Sp + 24];
           _ccws3::P64 = R1 & 7;
           if (_ccws3::P64 < 3) goto ucwsf; else goto ccwp9;
       ucwsf: // global
           if (_ccws3::P64 < 2) goto ccwog; else goto ccwoB;
       ccwog: // global
           I64[Sp + 8] = block_ccw9O_info;
           _scvoN::P64 = P64[R1 + 7];
           R1 = _scvna::P64;
           P64[Sp + 24] = _scvoN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucwsy; else goto ccw9P;
       ucwsy: // global
           call _ccw9O(R1) args: 0, res: 0, upd: 0;
       ccw9P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwoB: // global
           I64[Sp - 8] = block_ccwar_info;
           _scvpT::P64 = P64[R1 + 6];
           _scvpU::P64 = P64[R1 + 14];
           R1 = _scvna::P64;
           P64[Sp] = _scvpU::P64;
           P64[Sp + 24] = _scvpT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucwsz; else goto ccwas;
       ucwsz: // global
           call _ccwar(R1) args: 0, res: 0, upd: 0;
       ccwas: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwp9: // global
           I64[Sp + 8] = block_ccwbV_info;
           _scvrE::P64 = P64[R1 + 5];
           R1 = _scvna::P64;
           P64[Sp + 24] = _scvrE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ucwsA; else goto ccwbW;
       ucwsA: // global
           call _ccwbV(R1) args: 0, res: 0, upd: 0;
       ccwbW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccw9O() //  [R1]
         { info_tbl: [(ccw9O,
                       label: block_ccw9O_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw9O: // global
           _scvjM::P64 = P64[Sp + 24];
           _scvjN::P64 = P64[Sp + 32];
           _scvjR::P64 = P64[Sp + 8];
           _scvoN::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto ccwon; else goto ccwow;
       ccwon: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccwoq; else goto ccwop;
       ccwoq: // global
           HpAlloc = 160;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwop: // global
           I64[Hp - 152] = ds10_scvoP_info;
           P64[Hp - 136] = _scvjM::P64;
           P64[Hp - 128] = _scvjN::P64;
           P64[Hp - 120] = _scvjR::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccw9T::P64 = Hp - 152;
           P64[Hp - 96] = _ccw9T::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccw9T::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccw9T::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccw9T::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scvoN::P64;
           P64[Hp] = Hp - 40;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwow: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccwoz; else goto ccwoy;
       ccwoz: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwoy: // global
           I64[Hp - 160] = ds10_scvpm_info;
           P64[Hp - 144] = _scvjM::P64;
           P64[Hp - 136] = _scvjN::P64;
           P64[Hp - 128] = _scvjR::P64;
           P64[Hp - 120] = R1;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccwa8::P64 = Hp - 160;
           P64[Hp - 96] = _ccwa8::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccwa8::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccwa8::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _ccwa8::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _scvoN::P64;
           P64[Hp] = Hp - 40;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccwar() //  [R1]
         { info_tbl: [(ccwar,
                       label: block_ccwar_info
                       rep:StackRep [False, False, False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwar: // global
           _scvjR::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto ccwoE; else goto ccwp4;
       ccwoE: // global
           I64[Sp] = block_ccwaw_info;
           R1 = _scvjR::P64;
           if (R1 & 7 != 0) goto ucwsB; else goto ccwax;
       ucwsB: // global
           call _ccwaw(R1) args: 0, res: 0, upd: 0;
       ccwax: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ccwp4: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwp7; else goto ccwp6;
       ccwp7: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwp6: // global
           I64[Hp - 184] = ds11_scvr8_info;
           P64[Hp - 168] = P64[Sp + 40];
           P64[Hp - 160] = P64[Sp + 48];
           P64[Hp - 152] = _scvjR::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwbG::P64 = Hp - 184;
           P64[Hp - 128] = _ccwbG::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccwbG::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccwbG::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccwbG::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccwaw() //  [R1]
         { info_tbl: [(ccwaw,
                       label: block_ccwaw_info
                       rep:StackRep [False, False, True, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwaw: // global
           _scvjM::P64 = P64[Sp + 40];
           _scvjN::P64 = P64[Sp + 48];
           if (R1 & 7 == 1) goto ccwoK; else goto ccwoU;
       ccwoK: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccwoN; else goto ccwoM;
       ccwoN: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwoM: // global
           I64[Hp - 176] = ds11_scvpX_info;
           P64[Hp - 160] = _scvjM::P64;
           P64[Hp - 152] = _scvjN::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwaB::P64 = Hp - 176;
           P64[Hp - 128] = _ccwaB::P64;
           I64[Hp - 120] = sat_scvqq_info;
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 8];
           I64[Hp - 88] = :_con_info;
           P64[Hp - 80] = Hp - 120;
           P64[Hp - 72] = Hp - 144;
           I64[Hp - 64] = stg_sel_2_upd_info;
           P64[Hp - 48] = _ccwaB::P64;
           I64[Hp - 40] = stg_sel_1_upd_info;
           P64[Hp - 24] = _ccwaB::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccwaB::P64;
           R4 = Hp - 86;
           R3 = Hp - 64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwoU: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwoX; else goto ccwoW;
       ccwoX: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwoW: // global
           _scvqy::P64 = P64[R1 + 6];
           _scvqz::P64 = P64[R1 + 14];
           I64[Hp - 184] = ds11_scvqA_info;
           P64[Hp - 168] = _scvjM::P64;
           P64[Hp - 160] = _scvjN::P64;
           P64[Hp - 152] = _scvqz::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwbr::P64 = Hp - 184;
           P64[Hp - 128] = _ccwbr::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccwbr::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccwbr::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccwbr::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _scvqy::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccwbV() //  [R1]
         { info_tbl: [(ccwbV,
                       label: block_ccwbV_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwbV: // global
           _scvjM::P64 = P64[Sp + 24];
           _scvjN::P64 = P64[Sp + 32];
           _scvjR::P64 = P64[Sp + 8];
           _scvrE::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto ccwpc; else goto ccwph;
       ccwpc: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccwpf; else goto ccwpe;
       ccwpf: // global
           HpAlloc = 184;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwpe: // global
           I64[Hp - 176] = ds11_scvrH_info;
           P64[Hp - 160] = _scvjM::P64;
           P64[Hp - 152] = _scvjN::P64;
           P64[Hp - 144] = _scvjR::P64;
           I64[Hp - 136] = stg_sel_3_upd_info;
           _ccwc0::P64 = Hp - 176;
           P64[Hp - 120] = _ccwc0::P64;
           I64[Hp - 112] = stg_sel_2_upd_info;
           P64[Hp - 96] = _ccwc0::P64;
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _ccwc0::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _ccwc0::P64;
           I64[Hp - 40] = sat_scvrN_info;
           P64[Hp - 24] = _scvrE::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R4 = Hp - 136;
           R3 = Hp - 112;
           R2 = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwph: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwpk; else goto ccwpj;
       ccwpk: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwpj: // global
           I64[Hp - 184] = ds11_scvsf_info;
           P64[Hp - 168] = _scvjM::P64;
           P64[Hp - 160] = _scvjN::P64;
           P64[Hp - 152] = _scvjR::P64;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccwcq::P64 = Hp - 184;
           P64[Hp - 128] = _ccwcq::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccwcq::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccwcq::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccwcq::P64;
           I64[Hp - 48] = sat_scvsm_info;
           P64[Hp - 32] = _scvrE::P64;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccw6k() //  [R1]
         { info_tbl: [(ccw6k,
                       label: block_ccw6k_info
                       rep:StackRep [False, False, False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccw6k: // global
           _scvjN::P64 = P64[Sp + 40];
           _scvjR::P64 = P64[Sp + 16];
           _scvjS::P64 = P64[Sp + 8];
           _ccwsa::P64 = R1 & 7;
           if (_ccwsa::P64 < 3) goto ucwsd; else goto ccwn6;
       ucwsd: // global
           if (_ccwsa::P64 < 2) goto ucwsh; else goto ccwmW;
       ucwsh: // global
           Sp = Sp + 24;
           call _ccwnh() args: 0, res: 0, upd: 0;
       ccwmW: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccwmZ; else goto ccwmY;
       ccwmZ: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwmY: // global
           I64[Hp - 144] = ds4_scvl3_info;
           P64[Hp - 128] = _scvjN::P64;
           P64[Hp - 120] = _scvjR::P64;
           I64[Hp - 112] = stg_sel_3_upd_info;
           _ccw6q::P64 = Hp - 144;
           P64[Hp - 96] = _ccw6q::P64;
           I64[Hp - 88] = stg_sel_2_upd_info;
           P64[Hp - 72] = _ccw6q::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _ccw6q::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _scvjS::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _ccw6q::P64;
           R4 = Hp - 112;
           R3 = Hp - 88;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwn6: // global
           Hp = Hp + 192;
           if (Hp > HpLim) (likely: False) goto ccwn9; else goto ccwn8;
       ccwn9: // global
           HpAlloc = 192;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccwn8: // global
           _scvly::P64 = P64[R1 + 5];
           I64[Hp - 184] = ds4_scvlz_info;
           P64[Hp - 168] = _scvjN::P64;
           P64[Hp - 160] = _scvjR::P64;
           P64[Hp - 152] = R1;
           I64[Hp - 144] = stg_sel_3_upd_info;
           _ccw6F::P64 = Hp - 184;
           P64[Hp - 128] = _ccw6F::P64;
           I64[Hp - 120] = stg_sel_2_upd_info;
           P64[Hp - 104] = _ccw6F::P64;
           I64[Hp - 96] = stg_sel_1_upd_info;
           P64[Hp - 80] = _ccw6F::P64;
           I64[Hp - 72] = stg_sel_0_upd_info;
           P64[Hp - 56] = _ccw6F::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = _scvly::P64;
           P64[Hp - 24] = _scvjS::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 72;
           R4 = Hp - 144;
           R3 = Hp - 120;
           R2 = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccwnh() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwnh: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[Sp];
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.185189164 UTC

[section ""data" . System.Console.GetOpt.getOpt'_closure" {
     System.Console.GetOpt.getOpt'_closure:
         const System.Console.GetOpt.getOpt'_info;
         const 0;
 },
 System.Console.GetOpt.getOpt'_entry() //  [R2, R3, R4]
         { info_tbl: [(ccwLQ,
                       label: System.Console.GetOpt.getOpt'_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwLQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccwLR; else goto ccwLS;
       ccwLR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.getOpt'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwLS: // global
           I64[Sp - 8] = block_ccwLN_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _ccwLN() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwLN,
                       label: block_ccwLN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwLN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwLV; else goto ccwLU;
       ccwLV: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
       ccwLU: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.192238702 UTC

[section ""data" . System.Console.GetOpt.getOpt_closure" {
     System.Console.GetOpt.getOpt_closure:
         const System.Console.GetOpt.getOpt_info;
         const 0;
 },
 ds_scvBf_entry() //  [R1]
         { info_tbl: [(ccwMi,
                       label: ds_scvBf_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwMi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwMj; else goto ccwMk;
       ccwMj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwMk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwMf_info;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call System.Console.GetOpt.$wgetOpt'_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccwMf() //  [R1, R2, R3, R4]
         { info_tbl: [(ccwMf,
                       label: block_ccwMf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwMf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwMn; else goto ccwMm;
       ccwMn: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_pppp(R4, R3, R2, R1) args: 8, res: 8, upd: 24;
       ccwMm: // global
           I64[Hp - 32] = (,,,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_scvBC_entry() //  [R1]
         { info_tbl: [(ccwMB,
                       label: sat_scvBC_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwMB: // global
           R3 = P64[R1 + 16];
           R2 = System.Console.GetOpt.errUnrec_closure+1;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_scvBD_entry() //  [R1]
         { info_tbl: [(ccwME,
                       label: sat_scvBD_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwME: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccwMF; else goto ccwMG;
       ccwMF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccwMG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccwMs_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucwMK; else goto ccwMt;
       ucwMK: // global
           call _ccwMs(R1) args: 0, res: 0, upd: 0;
       ccwMt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _ccwMs() //  [R1]
         { info_tbl: [(ccwMs,
                       label: block_ccwMs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwMs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwMJ; else goto ccwMI;
       ccwMJ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccwMI: // global
           _scvBA::P64 = P64[R1 + 23];
           _scvBB::P64 = P64[R1 + 31];
           I64[Hp - 16] = sat_scvBC_info;
           P64[Hp] = _scvBA::P64;
           R3 = Hp - 16;
           R2 = _scvBB::P64;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 System.Console.GetOpt.getOpt_entry() //  [R2, R3, R4]
         { info_tbl: [(ccwMO,
                       label: System.Console.GetOpt.getOpt_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwMO: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccwMS; else goto ccwMR;
       ccwMS: // global
           HpAlloc = 144;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.getOpt_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwMR: // global
           I64[Hp - 136] = ds_scvBf_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           I64[Hp - 96] = sat_scvBD_info;
           _ccwMb::P64 = Hp - 136;
           P64[Hp - 80] = _ccwMb::P64;
           I64[Hp - 72] = stg_sel_1_upd_info;
           P64[Hp - 56] = _ccwMb::P64;
           I64[Hp - 48] = stg_sel_0_upd_info;
           P64[Hp - 32] = _ccwMb::P64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 48;
           P64[Hp - 8] = Hp - 72;
           P64[Hp] = Hp - 96;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.206597797 UTC

[section ""cstring" . System.Console.GetOpt.$trModule4_bytes" {
     System.Console.GetOpt.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.208485668 UTC

[section ""data" . System.Console.GetOpt.$trModule3_closure" {
     System.Console.GetOpt.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.210410411 UTC

[section ""cstring" . System.Console.GetOpt.$trModule2_bytes" {
     System.Console.GetOpt.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.212741997 UTC

[section ""data" . System.Console.GetOpt.$trModule1_closure" {
     System.Console.GetOpt.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.21481772 UTC

[section ""data" . System.Console.GetOpt.$trModule_closure" {
     System.Console.GetOpt.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.Console.GetOpt.$trModule3_closure+1;
         const System.Console.GetOpt.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.21666791 UTC

[section ""data" . $krep_rcsnm_closure" {
     $krep_rcsnm_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.218467939 UTC

[section ""data" . $krep1_rcsnn_closure" {
     $krep1_rcsnn_closure:
         const :_con_info;
         const $krep_rcsnm_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.220324412 UTC

[section ""data" . $krep2_rcsno_closure" {
     $krep2_rcsno_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_rcsnn_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.222139122 UTC

[section ""data" . $krep3_rcsnp_closure" {
     $krep3_rcsnp_closure:
         const :_con_info;
         const $krep2_rcsno_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.22396444 UTC

[section ""data" . $krep4_rcsnq_closure" {
     $krep4_rcsnq_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep3_rcsnp_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.226201786 UTC

[section ""data" . $krep5_rcsnr_closure" {
     $krep5_rcsnr_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep3_rcsnp_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.228045613 UTC

[section ""data" . $krep6_rcsns_closure" {
     $krep6_rcsns_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.229820275 UTC

[section ""data" . $krep7_rcsnt_closure" {
     $krep7_rcsnt_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep6_rcsns_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.231642876 UTC

[section ""data" . $krep8_rcsnu_closure" {
     $krep8_rcsnu_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rcsnq_closure+1;
         const $krep6_rcsns_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.233447443 UTC

[section ""cstring" . System.Console.GetOpt.$tcArgOrder2_bytes" {
     System.Console.GetOpt.$tcArgOrder2_bytes:
         I8[] [65,114,103,79,114,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.235287326 UTC

[section ""data" . System.Console.GetOpt.$tcArgOrder1_closure" {
     System.Console.GetOpt.$tcArgOrder1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcArgOrder2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.237090213 UTC

[section ""data" . System.Console.GetOpt.$tcArgOrder_closure" {
     System.Console.GetOpt.$tcArgOrder_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcArgOrder1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 2821249393238363172;
         const 5857765806309969278;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.240080703 UTC

[section ""data" . $krep9_rcsnv_closure" {
     $krep9_rcsnv_closure:
         const :_con_info;
         const $krep6_rcsns_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.241868692 UTC

[section ""data" . System.Console.GetOpt.$tc'Permute1_closure" {
     System.Console.GetOpt.$tc'Permute1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcArgOrder_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.243619536 UTC

[section ""cstring" . System.Console.GetOpt.$tc'RequireOrder2_bytes" {
     System.Console.GetOpt.$tc'RequireOrder2_bytes:
         I8[] [39,82,101,113,117,105,114,101,79,114,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.245307974 UTC

[section ""data" . System.Console.GetOpt.$tc'RequireOrder1_closure" {
     System.Console.GetOpt.$tc'RequireOrder1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'RequireOrder2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.247063233 UTC

[section ""data" . System.Console.GetOpt.$tc'RequireOrder_closure" {
     System.Console.GetOpt.$tc'RequireOrder_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'RequireOrder1_closure+1;
         const System.Console.GetOpt.$tc'Permute1_closure+1;
         const 16641478699741903091;
         const 17241976392395699271;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.248980569 UTC

[section ""cstring" . System.Console.GetOpt.$tc'Permute3_bytes" {
     System.Console.GetOpt.$tc'Permute3_bytes:
         I8[] [39,80,101,114,109,117,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.251125724 UTC

[section ""data" . System.Console.GetOpt.$tc'Permute2_closure" {
     System.Console.GetOpt.$tc'Permute2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'Permute3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.252895643 UTC

[section ""data" . System.Console.GetOpt.$tc'Permute_closure" {
     System.Console.GetOpt.$tc'Permute_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'Permute2_closure+1;
         const System.Console.GetOpt.$tc'Permute1_closure+1;
         const 16188869008381252759;
         const 7304126484053682933;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.254803125 UTC

[section ""data" . System.Console.GetOpt.$tc'ReturnInOrder1_closure" {
     System.Console.GetOpt.$tc'ReturnInOrder1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rcsnt_closure+4;
         const System.Console.GetOpt.$tc'Permute1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.256619001 UTC

[section ""cstring" . System.Console.GetOpt.$tc'ReturnInOrder3_bytes" {
     System.Console.GetOpt.$tc'ReturnInOrder3_bytes:
         I8[] [39,82,101,116,117,114,110,73,110,79,114,100,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.258416246 UTC

[section ""data" . System.Console.GetOpt.$tc'ReturnInOrder2_closure" {
     System.Console.GetOpt.$tc'ReturnInOrder2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'ReturnInOrder3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.26018137 UTC

[section ""data" . System.Console.GetOpt.$tc'ReturnInOrder_closure" {
     System.Console.GetOpt.$tc'ReturnInOrder_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'ReturnInOrder2_closure+1;
         const System.Console.GetOpt.$tc'ReturnInOrder1_closure+4;
         const 11429107017830306662;
         const 977062333259332084;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.262442383 UTC

[section ""cstring" . System.Console.GetOpt.$tcArgDescr2_bytes" {
     System.Console.GetOpt.$tcArgDescr2_bytes:
         I8[] [65,114,103,68,101,115,99,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.264143997 UTC

[section ""data" . System.Console.GetOpt.$tcArgDescr1_closure" {
     System.Console.GetOpt.$tcArgDescr1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcArgDescr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.266445726 UTC

[section ""data" . System.Console.GetOpt.$tcArgDescr_closure" {
     System.Console.GetOpt.$tcArgDescr_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcArgDescr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5371299798435897528;
         const 4777542234116424858;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.268392266 UTC

[section ""data" . $krep10_rcsnw_closure" {
     $krep10_rcsnw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcArgDescr_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.270258925 UTC

[section ""data" . System.Console.GetOpt.$tc'NoArg1_closure" {
     System.Console.GetOpt.$tc'NoArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcsns_closure+2;
         const $krep10_rcsnw_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.27201845 UTC

[section ""cstring" . System.Console.GetOpt.$tc'NoArg3_bytes" {
     System.Console.GetOpt.$tc'NoArg3_bytes:
         I8[] [39,78,111,65,114,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.274180737 UTC

[section ""data" . System.Console.GetOpt.$tc'NoArg2_closure" {
     System.Console.GetOpt.$tc'NoArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'NoArg3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.27590347 UTC

[section ""data" . System.Console.GetOpt.$tc'NoArg_closure" {
     System.Console.GetOpt.$tc'NoArg_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'NoArg2_closure+1;
         const System.Console.GetOpt.$tc'NoArg1_closure+4;
         const 4447437708857855473;
         const 9938854276741266046;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.277856885 UTC

[section ""data" . $krep11_rcsnx_closure" {
     $krep11_rcsnx_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep10_rcsnw_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.279618744 UTC

[section ""data" . System.Console.GetOpt.$tc'OptArg1_closure" {
     System.Console.GetOpt.$tc'OptArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rcsnu_closure+4;
         const $krep11_rcsnx_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.281490745 UTC

[section ""cstring" . System.Console.GetOpt.$tc'OptArg3_bytes" {
     System.Console.GetOpt.$tc'OptArg3_bytes:
         I8[] [39,79,112,116,65,114,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.283238442 UTC

[section ""data" . System.Console.GetOpt.$tc'OptArg2_closure" {
     System.Console.GetOpt.$tc'OptArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'OptArg3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.285024217 UTC

[section ""data" . System.Console.GetOpt.$tc'OptArg_closure" {
     System.Console.GetOpt.$tc'OptArg_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'OptArg2_closure+1;
         const System.Console.GetOpt.$tc'OptArg1_closure+4;
         const 2223072509852051452;
         const 11632957215606156764;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.287384006 UTC

[section ""data" . System.Console.GetOpt.$tc'ReqArg1_closure" {
     System.Console.GetOpt.$tc'ReqArg1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rcsnt_closure+4;
         const $krep11_rcsnx_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.289232908 UTC

[section ""cstring" . System.Console.GetOpt.$tc'ReqArg3_bytes" {
     System.Console.GetOpt.$tc'ReqArg3_bytes:
         I8[] [39,82,101,113,65,114,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.290961817 UTC

[section ""data" . System.Console.GetOpt.$tc'ReqArg2_closure" {
     System.Console.GetOpt.$tc'ReqArg2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'ReqArg3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.293428308 UTC

[section ""data" . System.Console.GetOpt.$tc'ReqArg_closure" {
     System.Console.GetOpt.$tc'ReqArg_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'ReqArg2_closure+1;
         const System.Console.GetOpt.$tc'ReqArg1_closure+4;
         const 16427330633826478147;
         const 15179110347223027838;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.295364052 UTC

[section ""cstring" . System.Console.GetOpt.$tcOptDescr2_bytes" {
     System.Console.GetOpt.$tcOptDescr2_bytes:
         I8[] [79,112,116,68,101,115,99,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.29710662 UTC

[section ""data" . System.Console.GetOpt.$tcOptDescr1_closure" {
     System.Console.GetOpt.$tcOptDescr1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcOptDescr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.299334129 UTC

[section ""data" . System.Console.GetOpt.$tcOptDescr_closure" {
     System.Console.GetOpt.$tcOptDescr_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcOptDescr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5602371009437266142;
         const 11022077518484673144;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.301213294 UTC

[section ""data" . $krep12_rcsny_closure" {
     $krep12_rcsny_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcOptDescr_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.303006649 UTC

[section ""data" . $krep13_rcsnz_closure" {
     $krep13_rcsnz_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep12_rcsny_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.304845865 UTC

[section ""data" . $krep14_rcsnA_closure" {
     $krep14_rcsnA_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rcsnw_closure+1;
         const $krep13_rcsnz_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.30892971 UTC

[section ""data" . $krep15_rcsnB_closure" {
     $krep15_rcsnB_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rcsnr_closure+1;
         const $krep14_rcsnA_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.311195814 UTC

[section ""data" . System.Console.GetOpt.$tc'Option1_closure" {
     System.Console.GetOpt.$tc'Option1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const $krep15_rcsnB_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.313096924 UTC

[section ""cstring" . System.Console.GetOpt.$tc'Option3_bytes" {
     System.Console.GetOpt.$tc'Option3_bytes:
         I8[] [39,79,112,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.314917108 UTC

[section ""data" . System.Console.GetOpt.$tc'Option2_closure" {
     System.Console.GetOpt.$tc'Option2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'Option3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.316837493 UTC

[section ""data" . System.Console.GetOpt.$tc'Option_closure" {
     System.Console.GetOpt.$tc'Option_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'Option2_closure+1;
         const System.Console.GetOpt.$tc'Option1_closure+4;
         const 10066039264625497029;
         const 5674636120141944492;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.318872749 UTC

[section ""cstring" . System.Console.GetOpt.$tcOptKind2_bytes" {
     System.Console.GetOpt.$tcOptKind2_bytes:
         I8[] [79,112,116,75,105,110,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.320755842 UTC

[section ""data" . System.Console.GetOpt.$tcOptKind1_closure" {
     System.Console.GetOpt.$tcOptKind1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tcOptKind2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.323706784 UTC

[section ""data" . System.Console.GetOpt.$tcOptKind_closure" {
     System.Console.GetOpt.$tcOptKind_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tcOptKind1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 5196380470096609574;
         const 4174335291028142741;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.325838929 UTC

[section ""data" . System.Console.GetOpt.$tc'EndOfOpts1_closure" {
     System.Console.GetOpt.$tc'EndOfOpts1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Console.GetOpt.$tcOptKind_closure+1;
         const $krep9_rcsnv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.327759911 UTC

[section ""cstring" . System.Console.GetOpt.$tc'EndOfOpts3_bytes" {
     System.Console.GetOpt.$tc'EndOfOpts3_bytes:
         I8[] [39,69,110,100,79,102,79,112,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.32959598 UTC

[section ""data" . System.Console.GetOpt.$tc'EndOfOpts2_closure" {
     System.Console.GetOpt.$tc'EndOfOpts2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'EndOfOpts3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.331286224 UTC

[section ""data" . System.Console.GetOpt.$tc'EndOfOpts_closure" {
     System.Console.GetOpt.$tc'EndOfOpts_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'EndOfOpts2_closure+1;
         const System.Console.GetOpt.$tc'EndOfOpts1_closure+1;
         const 16241379069650497856;
         const 7399561775253491405;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.33318407 UTC

[section ""data" . System.Console.GetOpt.$tc'Opt1_closure" {
     System.Console.GetOpt.$tc'Opt1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rcsns_closure+2;
         const System.Console.GetOpt.$tc'EndOfOpts1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.335447328 UTC

[section ""cstring" . System.Console.GetOpt.$tc'Opt3_bytes" {
     System.Console.GetOpt.$tc'Opt3_bytes:
         I8[] [39,79,112,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.337277862 UTC

[section ""data" . System.Console.GetOpt.$tc'Opt2_closure" {
     System.Console.GetOpt.$tc'Opt2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'Opt3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.339036127 UTC

[section ""data" . System.Console.GetOpt.$tc'Opt_closure" {
     System.Console.GetOpt.$tc'Opt_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'Opt2_closure+1;
         const System.Console.GetOpt.$tc'Opt1_closure+4;
         const 2387467460439073880;
         const 875868993959501908;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.341013962 UTC

[section ""data" . System.Console.GetOpt.$tc'NonOpt1_closure" {
     System.Console.GetOpt.$tc'NonOpt1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcsno_closure+1;
         const System.Console.GetOpt.$tc'EndOfOpts1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.342853703 UTC

[section ""cstring" . System.Console.GetOpt.$tc'UnreqOpt2_bytes" {
     System.Console.GetOpt.$tc'UnreqOpt2_bytes:
         I8[] [39,85,110,114,101,113,79,112,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.344663344 UTC

[section ""data" . System.Console.GetOpt.$tc'UnreqOpt1_closure" {
     System.Console.GetOpt.$tc'UnreqOpt1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'UnreqOpt2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.346541592 UTC

[section ""data" . System.Console.GetOpt.$tc'UnreqOpt_closure" {
     System.Console.GetOpt.$tc'UnreqOpt_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'UnreqOpt1_closure+1;
         const System.Console.GetOpt.$tc'NonOpt1_closure+4;
         const 6747281843324563502;
         const 13162655807375334605;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.348420242 UTC

[section ""cstring" . System.Console.GetOpt.$tc'NonOpt3_bytes" {
     System.Console.GetOpt.$tc'NonOpt3_bytes:
         I8[] [39,78,111,110,79,112,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.350230915 UTC

[section ""data" . System.Console.GetOpt.$tc'NonOpt2_closure" {
     System.Console.GetOpt.$tc'NonOpt2_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'NonOpt3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.35258927 UTC

[section ""data" . System.Console.GetOpt.$tc'NonOpt_closure" {
     System.Console.GetOpt.$tc'NonOpt_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'NonOpt2_closure+1;
         const System.Console.GetOpt.$tc'NonOpt1_closure+4;
         const 17187900375792953920;
         const 18196243003688324985;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.354458531 UTC

[section ""cstring" . System.Console.GetOpt.$tc'OptErr2_bytes" {
     System.Console.GetOpt.$tc'OptErr2_bytes:
         I8[] [39,79,112,116,69,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.356246903 UTC

[section ""data" . System.Console.GetOpt.$tc'OptErr1_closure" {
     System.Console.GetOpt.$tc'OptErr1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.Console.GetOpt.$tc'OptErr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.358113768 UTC

[section ""data" . System.Console.GetOpt.$tc'OptErr_closure" {
     System.Console.GetOpt.$tc'OptErr_closure:
         const GHC.Types.TyCon_con_info;
         const System.Console.GetOpt.$trModule_closure+1;
         const System.Console.GetOpt.$tc'OptErr1_closure+1;
         const System.Console.GetOpt.$tc'NonOpt1_closure+4;
         const 13165663139815598038;
         const 5639435123785572420;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.360405006 UTC

[section ""data" . System.Console.GetOpt.Opt_closure" {
     System.Console.GetOpt.Opt_closure:
         const System.Console.GetOpt.Opt_info;
 },
 System.Console.GetOpt.Opt_entry() //  [R2]
         { info_tbl: [(ccwOQ,
                       label: System.Console.GetOpt.Opt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwOQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccwOU; else goto ccwOT;
       ccwOU: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.Opt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccwOT: // global
           I64[Hp - 8] = System.Console.GetOpt.Opt_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.365409128 UTC

[section ""data" . System.Console.GetOpt.UnreqOpt_closure" {
     System.Console.GetOpt.UnreqOpt_closure:
         const System.Console.GetOpt.UnreqOpt_info;
 },
 System.Console.GetOpt.UnreqOpt_entry() //  [R2]
         { info_tbl: [(ccwP6,
                       label: System.Console.GetOpt.UnreqOpt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwP6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccwPa; else goto ccwP9;
       ccwPa: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.UnreqOpt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccwP9: // global
           I64[Hp - 8] = System.Console.GetOpt.UnreqOpt_con_info;
           P64[Hp] = R2;
           R1 = Hp - 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.370326886 UTC

[section ""data" . System.Console.GetOpt.NonOpt_closure" {
     System.Console.GetOpt.NonOpt_closure:
         const System.Console.GetOpt.NonOpt_info;
 },
 System.Console.GetOpt.NonOpt_entry() //  [R2]
         { info_tbl: [(ccwPm,
                       label: System.Console.GetOpt.NonOpt_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwPm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccwPq; else goto ccwPp;
       ccwPq: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.NonOpt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccwPp: // global
           I64[Hp - 8] = System.Console.GetOpt.NonOpt_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.374305781 UTC

[section ""data" . System.Console.GetOpt.EndOfOpts_closure" {
     System.Console.GetOpt.EndOfOpts_closure:
         const System.Console.GetOpt.EndOfOpts_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.376285364 UTC

[section ""data" . System.Console.GetOpt.OptErr_closure" {
     System.Console.GetOpt.OptErr_closure:
         const System.Console.GetOpt.OptErr_info;
 },
 System.Console.GetOpt.OptErr_entry() //  [R2]
         { info_tbl: [(ccwPD,
                       label: System.Console.GetOpt.OptErr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwPD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccwPH; else goto ccwPG;
       ccwPH: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.OptErr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccwPG: // global
           I64[Hp - 8] = System.Console.GetOpt.OptErr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.380586825 UTC

[section ""data" . System.Console.GetOpt.NoArg_closure" {
     System.Console.GetOpt.NoArg_closure:
         const System.Console.GetOpt.NoArg_info;
 },
 System.Console.GetOpt.NoArg_entry() //  [R2]
         { info_tbl: [(ccwPT,
                       label: System.Console.GetOpt.NoArg_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwPT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccwPX; else goto ccwPW;
       ccwPX: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.NoArg_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccwPW: // global
           I64[Hp - 8] = System.Console.GetOpt.NoArg_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.384768379 UTC

[section ""data" . System.Console.GetOpt.ReqArg_closure" {
     System.Console.GetOpt.ReqArg_closure:
         const System.Console.GetOpt.ReqArg_info;
 },
 System.Console.GetOpt.ReqArg_entry() //  [R2, R3]
         { info_tbl: [(ccwQ9,
                       label: System.Console.GetOpt.ReqArg_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwQ9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwQd; else goto ccwQc;
       ccwQd: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.ReqArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwQc: // global
           I64[Hp - 16] = System.Console.GetOpt.ReqArg_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.389192012 UTC

[section ""data" . System.Console.GetOpt.OptArg_closure" {
     System.Console.GetOpt.OptArg_closure:
         const System.Console.GetOpt.OptArg_info;
 },
 System.Console.GetOpt.OptArg_entry() //  [R2, R3]
         { info_tbl: [(ccwQp,
                       label: System.Console.GetOpt.OptArg_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwQp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccwQt; else goto ccwQs;
       ccwQt: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.OptArg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwQs: // global
           I64[Hp - 16] = System.Console.GetOpt.OptArg_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 13;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.393515623 UTC

[section ""data" . System.Console.GetOpt.Option_closure" {
     System.Console.GetOpt.Option_closure:
         const System.Console.GetOpt.Option_info;
 },
 System.Console.GetOpt.Option_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(ccwQF,
                       label: System.Console.GetOpt.Option_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwQF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccwQJ; else goto ccwQI;
       ccwQJ: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = System.Console.GetOpt.Option_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ccwQI: // global
           I64[Hp - 32] = System.Console.GetOpt.Option_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.397371501 UTC

[section ""data" . System.Console.GetOpt.RequireOrder_closure" {
     System.Console.GetOpt.RequireOrder_closure:
         const System.Console.GetOpt.RequireOrder_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.399211421 UTC

[section ""data" . System.Console.GetOpt.Permute_closure" {
     System.Console.GetOpt.Permute_closure:
         const System.Console.GetOpt.Permute_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.401185538 UTC

[section ""data" . System.Console.GetOpt.ReturnInOrder_closure" {
     System.Console.GetOpt.ReturnInOrder_closure:
         const System.Console.GetOpt.ReturnInOrder_info;
 },
 System.Console.GetOpt.ReturnInOrder_entry() //  [R2]
         { info_tbl: [(ccwQX,
                       label: System.Console.GetOpt.ReturnInOrder_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwQX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccwR1; else goto ccwR0;
       ccwR1: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = System.Console.GetOpt.ReturnInOrder_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccwR0: // global
           I64[Hp - 8] = System.Console.GetOpt.ReturnInOrder_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.405073313 UTC

[System.Console.GetOpt.Opt_con_entry() //  [R1]
         { info_tbl: [(ccwR8,
                       label: System.Console.GetOpt.Opt_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwR8: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.408475642 UTC

[System.Console.GetOpt.UnreqOpt_con_entry() //  [R1]
         { info_tbl: [(ccwRf,
                       label: System.Console.GetOpt.UnreqOpt_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,85,110,114,101,113,79,112,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwRf: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.411914306 UTC

[System.Console.GetOpt.NonOpt_con_entry() //  [R1]
         { info_tbl: [(ccwRm,
                       label: System.Console.GetOpt.NonOpt_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,78,111,110,79,112,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwRm: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.415772059 UTC

[System.Console.GetOpt.EndOfOpts_con_entry() //  [R1]
         { info_tbl: [(ccwRt,
                       label: System.Console.GetOpt.EndOfOpts_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,69,110,100,79,102,79,112,116,115]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwRt: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.419751804 UTC

[System.Console.GetOpt.OptErr_con_entry() //  [R1]
         { info_tbl: [(ccwRA,
                       label: System.Console.GetOpt.OptErr_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116,69,114,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwRA: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.423028207 UTC

[System.Console.GetOpt.NoArg_con_entry() //  [R1]
         { info_tbl: [(ccwRH,
                       label: System.Console.GetOpt.NoArg_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,78,111,65,114,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwRH: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.426845377 UTC

[System.Console.GetOpt.ReqArg_con_entry() //  [R1]
         { info_tbl: [(ccwRO,
                       label: System.Console.GetOpt.ReqArg_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,82,101,113,65,114,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwRO: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.430105278 UTC

[System.Console.GetOpt.OptArg_con_entry() //  [R1]
         { info_tbl: [(ccwRV,
                       label: System.Console.GetOpt.OptArg_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116,65,114,103]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwRV: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.433533811 UTC

[System.Console.GetOpt.Option_con_entry() //  [R1]
         { info_tbl: [(ccwS2,
                       label: System.Console.GetOpt.Option_con_info
                       rep:HeapRep 4 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,79,112,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwS2: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.436979646 UTC

[System.Console.GetOpt.RequireOrder_con_entry() //  [R1]
         { info_tbl: [(ccwS9,
                       label: System.Console.GetOpt.RequireOrder_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,82,101,113,117,105,114,101,79,114,100,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwS9: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.440626708 UTC

[System.Console.GetOpt.Permute_con_entry() //  [R1]
         { info_tbl: [(ccwSg,
                       label: System.Console.GetOpt.Permute_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,80,101,114,109,117,116,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwSg: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.444049969 UTC

[System.Console.GetOpt.ReturnInOrder_con_entry() //  [R1]
         { info_tbl: [(ccwSn,
                       label: System.Console.GetOpt.ReturnInOrder_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,83,121,115,116,101,109,46,67,111,110,115,111,108,101,46,71,101,116,79,112,116,46,82,101,116,117,114,110,73,110,79,114,100,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccwSn: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.447961865 UTC

[section ""relreadonly" . ScvMa_srt" {
     ScvMa_srt:
         const GHC.List.maximum2_closure;
         const System.Console.GetOpt.usageInfo_sameLen_closure;
         const System.Console.GetOpt.usageInfo1_closure;
         const lvl10_rcsn5_closure;
         const System.Console.GetOpt.usageInfo_closure;
         const lvl17_rcsnc_closure;
         const System.Console.GetOpt.errUnrec_closure;
         const System.Console.GetOpt.$wgetOpt'_closure;
         const lvl16_rcsnb_closure;
         const lvl24_rcsnk_closure;
         const lvl22_rcsnh_closure;
         const System.Console.GetOpt.getOpt'_closure;
         const System.Console.GetOpt.getOpt_closure;
 }]

