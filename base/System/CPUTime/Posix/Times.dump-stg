
==================== Pre unarise: ====================
2018-03-16 16:07:31.287983312 UTC

System.CPUTime.Posix.Times.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

System.CPUTime.Posix.Times.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.CPUTime.Posix.Times.$trModule4];

System.CPUTime.Posix.Times.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "System.CPUTime.Posix.Times"#;

System.CPUTime.Posix.Times.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.CPUTime.Posix.Times.$trModule2];

System.CPUTime.Posix.Times.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [System.CPUTime.Posix.Times.$trModule3
                                     System.CPUTime.Posix.Times.$trModule1];

System.CPUTime.Posix.Times.clockTicks :: GHC.Integer.Type.Integer
[GblId] =
    [] \u []
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          (#,#) _ [Occ=Dead] ds1_scCw3 [Occ=Once] ->
              GHC.Integer.Type.smallInteger ds1_scCw3;
        };

sat_scCw5 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [465#];

sat_scCw6 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scCw5 GHC.Types.[]];

sat_scCw4 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1420103680#];

sat_scCw7 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scCw4 sat_scCw6];

System.CPUTime.Posix.Times.getCPUTime2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_scCw7;

System.CPUTime.Posix.Times.getCpuTimePrecision2
  :: GHC.Integer.Type.Integer
[GblId] =
    [] \u []
        case
            GHC.Real.$w$s$cfromRational
                System.CPUTime.Posix.Times.getCPUTime2
                System.CPUTime.Posix.Times.clockTicks
        of
        { (#,#) ww1_scCw9 [Occ=Once] ww2_scCwa [Occ=Once] ->
              GHC.Real.$w$s$cround
                  GHC.Real.$fIntegralInteger ww1_scCw9 ww2_scCwa;
        };

System.CPUTime.Posix.Times.getCpuTimePrecision1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_scCwb]
        (#,#) [s_scCwb System.CPUTime.Posix.Times.getCpuTimePrecision2];

System.CPUTime.Posix.Times.getCpuTimePrecision
  :: GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1]
        System.CPUTime.Posix.Times.getCpuTimePrecision1 eta_B1;

System.CPUTime.Posix.Times.getCPUTime3 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

System.CPUTime.Posix.Times.getCPUTime1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_scCwc]
        case newPinnedByteArray# [32# eta_scCwc] of {
          (#,#) ipv_scCwe [Occ=Once] ipv1_scCwf [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_scCwf ipv_scCwe] of {
                (#,#) ipv2_scCwh [Occ=Once] ipv3_scCwi ->
                    case byteArrayContents# [ipv3_scCwi] of p_tms_scCwj [Dmd=<S,U>] {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [p_tms_scCwj ipv2_scCwh] of {
                            (#,#) ds_scCwm [Occ=Once] _ [Occ=Dead] ->
                                case readInt64OffAddr# [p_tms_scCwj 0# ds_scCwm] of {
                                  (#,#) ipv4_scCwp [Occ=Once] ipv5_scCwq [Occ=Once] ->
                                      case plusAddr# [p_tms_scCwj 8#] of sat_scCwr {
                                        __DEFAULT ->
                                            case readInt64OffAddr# [sat_scCwr 0# ipv4_scCwp] of {
                                              (#,#) ipv6_scCwt [Occ=Once] ipv7_scCwu [Occ=Once] ->
                                                  case touch# [ipv3_scCwi ipv6_scCwt] of s4_scCwv {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_scCwB [Occ=Once]
                                                            :: GHC.Integer.Type.Integer
                                                          [LclId] =
                                                              [ipv5_scCwq ipv7_scCwu] \u []
                                                                  case
                                                                      GHC.Integer.Type.eqInteger#
                                                                          System.CPUTime.Posix.Times.clockTicks
                                                                          System.CPUTime.Posix.Times.getCPUTime3
                                                                  of
                                                                  { __DEFAULT ->
                                                                        case
                                                                            GHC.Integer.Type.smallInteger
                                                                                ipv7_scCwu
                                                                        of
                                                                        sat_scCwy
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  GHC.Integer.Type.smallInteger
                                                                                      ipv5_scCwq
                                                                              of
                                                                              sat_scCwx
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        GHC.Integer.Type.plusInteger
                                                                                            sat_scCwx
                                                                                            sat_scCwy
                                                                                    of
                                                                                    sat_scCwz
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              GHC.Integer.Type.timesInteger
                                                                                                  sat_scCwz
                                                                                                  System.CPUTime.Posix.Times.getCPUTime2
                                                                                          of
                                                                                          sat_scCwA
                                                                                          { __DEFAULT ->
                                                                                                GHC.Integer.Type.divInteger
                                                                                                    sat_scCwA
                                                                                                    System.CPUTime.Posix.Times.clockTicks;
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                    1# -> GHC.Real.divZeroError;
                                                                  };
                                                        } in  (#,#) [s4_scCwv sat_scCwB];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

System.CPUTime.Posix.Times.getCPUTime
  :: GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] System.CPUTime.Posix.Times.getCPUTime1 eta_B1;


==================== STG syntax: ====================
2018-03-16 16:07:31.29080957 UTC

System.CPUTime.Posix.Times.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

System.CPUTime.Posix.Times.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.CPUTime.Posix.Times.$trModule4];

System.CPUTime.Posix.Times.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "System.CPUTime.Posix.Times"#;

System.CPUTime.Posix.Times.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.CPUTime.Posix.Times.$trModule2];

System.CPUTime.Posix.Times.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [System.CPUTime.Posix.Times.$trModule3
                                     System.CPUTime.Posix.Times.$trModule1];

System.CPUTime.Posix.Times.clockTicks :: GHC.Integer.Type.Integer
[GblId] =
    [] \u []
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          Unit# ds1_scCw3 [Occ=Once] ->
              GHC.Integer.Type.smallInteger ds1_scCw3;
        };

sat_scCw5 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [465#];

sat_scCw6 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scCw5 GHC.Types.[]];

sat_scCw4 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1420103680#];

sat_scCw7 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scCw4 sat_scCw6];

System.CPUTime.Posix.Times.getCPUTime2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_scCw7;

System.CPUTime.Posix.Times.getCpuTimePrecision2
  :: GHC.Integer.Type.Integer
[GblId] =
    [] \u []
        case
            GHC.Real.$w$s$cfromRational
                System.CPUTime.Posix.Times.getCPUTime2
                System.CPUTime.Posix.Times.clockTicks
        of
        { (#,#) ww1_scCw9 [Occ=Once] ww2_scCwa [Occ=Once] ->
              GHC.Real.$w$s$cround
                  GHC.Real.$fIntegralInteger ww1_scCw9 ww2_scCwa;
        };

System.CPUTime.Posix.Times.getCpuTimePrecision1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        Unit# [System.CPUTime.Posix.Times.getCpuTimePrecision2];

System.CPUTime.Posix.Times.getCpuTimePrecision
  :: GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        System.CPUTime.Posix.Times.getCpuTimePrecision1 GHC.Prim.void#;

System.CPUTime.Posix.Times.getCPUTime3 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

System.CPUTime.Posix.Times.getCPUTime1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case newPinnedByteArray# [32# GHC.Prim.void#] of {
          Unit# ipv1_scCwf [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_scCwf GHC.Prim.void#] of {
                Unit# ipv3_scCwi ->
                    case byteArrayContents# [ipv3_scCwi] of p_tms_scCwj [Dmd=<S,U>] {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [p_tms_scCwj GHC.Prim.void#] of {
                            Unit# _ [Occ=Dead] ->
                                case readInt64OffAddr# [p_tms_scCwj 0# GHC.Prim.void#] of {
                                  Unit# ipv5_scCwq [Occ=Once] ->
                                      case plusAddr# [p_tms_scCwj 8#] of sat_scCwr {
                                        __DEFAULT ->
                                            case
                                                readInt64OffAddr# [sat_scCwr 0# GHC.Prim.void#]
                                            of
                                            { Unit# ipv7_scCwu [Occ=Once] ->
                                                  case
                                                      touch# [ipv3_scCwi GHC.Prim.void#]
                                                  of
                                                  s4_scCwv
                                                  { (##) ->
                                                        let {
                                                          sat_scCwB [Occ=Once]
                                                            :: GHC.Integer.Type.Integer
                                                          [LclId] =
                                                              [ipv5_scCwq ipv7_scCwu] \u []
                                                                  case
                                                                      GHC.Integer.Type.eqInteger#
                                                                          System.CPUTime.Posix.Times.clockTicks
                                                                          System.CPUTime.Posix.Times.getCPUTime3
                                                                  of
                                                                  { __DEFAULT ->
                                                                        case
                                                                            GHC.Integer.Type.smallInteger
                                                                                ipv7_scCwu
                                                                        of
                                                                        sat_scCwy
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  GHC.Integer.Type.smallInteger
                                                                                      ipv5_scCwq
                                                                              of
                                                                              sat_scCwx
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        GHC.Integer.Type.plusInteger
                                                                                            sat_scCwx
                                                                                            sat_scCwy
                                                                                    of
                                                                                    sat_scCwz
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              GHC.Integer.Type.timesInteger
                                                                                                  sat_scCwz
                                                                                                  System.CPUTime.Posix.Times.getCPUTime2
                                                                                          of
                                                                                          sat_scCwA
                                                                                          { __DEFAULT ->
                                                                                                GHC.Integer.Type.divInteger
                                                                                                    sat_scCwA
                                                                                                    System.CPUTime.Posix.Times.clockTicks;
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                    1# -> GHC.Real.divZeroError;
                                                                  };
                                                        } in  Unit# [sat_scCwB];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

System.CPUTime.Posix.Times.getCPUTime
  :: GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        System.CPUTime.Posix.Times.getCPUTime1 GHC.Prim.void#;


==================== Pre unarise: ====================
2018-03-16 16:07:31.488047538 UTC

System.CPUTime.Posix.Times.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

System.CPUTime.Posix.Times.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.CPUTime.Posix.Times.$trModule4];

System.CPUTime.Posix.Times.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "System.CPUTime.Posix.Times"#;

System.CPUTime.Posix.Times.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.CPUTime.Posix.Times.$trModule2];

System.CPUTime.Posix.Times.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [System.CPUTime.Posix.Times.$trModule3
                                     System.CPUTime.Posix.Times.$trModule1];

System.CPUTime.Posix.Times.clockTicks :: GHC.Integer.Type.Integer
[GblId] =
    [] \u []
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          (#,#) _ [Occ=Dead] ds1_scCDQ [Occ=Once] ->
              GHC.Integer.Type.smallInteger ds1_scCDQ;
        };

sat_scCDS :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [465#];

sat_scCDT :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scCDS GHC.Types.[]];

sat_scCDR :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1420103680#];

sat_scCDU :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scCDR sat_scCDT];

System.CPUTime.Posix.Times.getCPUTime2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_scCDU;

System.CPUTime.Posix.Times.getCpuTimePrecision2
  :: GHC.Integer.Type.Integer
[GblId] =
    [] \u []
        case
            GHC.Real.$w$s$cfromRational
                System.CPUTime.Posix.Times.getCPUTime2
                System.CPUTime.Posix.Times.clockTicks
        of
        { (#,#) ww1_scCDW [Occ=Once] ww2_scCDX [Occ=Once] ->
              GHC.Real.$w$s$cround
                  GHC.Real.$fIntegralInteger ww1_scCDW ww2_scCDX;
        };

System.CPUTime.Posix.Times.getCpuTimePrecision1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_scCDY]
        (#,#) [s_scCDY System.CPUTime.Posix.Times.getCpuTimePrecision2];

System.CPUTime.Posix.Times.getCpuTimePrecision
  :: GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1]
        System.CPUTime.Posix.Times.getCpuTimePrecision1 eta_B1;

System.CPUTime.Posix.Times.getCPUTime3 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

System.CPUTime.Posix.Times.getCPUTime1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_scCDZ]
        case newPinnedByteArray# [32# eta_scCDZ] of {
          (#,#) ipv_scCE1 [Occ=Once] ipv1_scCE2 [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_scCE2 ipv_scCE1] of {
                (#,#) ipv2_scCE4 [Occ=Once] ipv3_scCE5 ->
                    case byteArrayContents# [ipv3_scCE5] of p_tms_scCE6 [Dmd=<S,U>] {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [p_tms_scCE6 ipv2_scCE4] of {
                            (#,#) ds_scCE9 [Occ=Once] _ [Occ=Dead] ->
                                case readInt64OffAddr# [p_tms_scCE6 0# ds_scCE9] of {
                                  (#,#) ipv4_scCEc [Occ=Once] ipv5_scCEd [Occ=Once] ->
                                      case plusAddr# [p_tms_scCE6 8#] of sat_scCEe {
                                        __DEFAULT ->
                                            case readInt64OffAddr# [sat_scCEe 0# ipv4_scCEc] of {
                                              (#,#) ipv6_scCEg [Occ=Once] ipv7_scCEh [Occ=Once] ->
                                                  case touch# [ipv3_scCE5 ipv6_scCEg] of s4_scCEi {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_scCEo [Occ=Once]
                                                            :: GHC.Integer.Type.Integer
                                                          [LclId] =
                                                              [ipv5_scCEd ipv7_scCEh] \u []
                                                                  case
                                                                      GHC.Integer.Type.eqInteger#
                                                                          System.CPUTime.Posix.Times.clockTicks
                                                                          System.CPUTime.Posix.Times.getCPUTime3
                                                                  of
                                                                  { __DEFAULT ->
                                                                        case
                                                                            GHC.Integer.Type.smallInteger
                                                                                ipv7_scCEh
                                                                        of
                                                                        sat_scCEl
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  GHC.Integer.Type.smallInteger
                                                                                      ipv5_scCEd
                                                                              of
                                                                              sat_scCEk
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        GHC.Integer.Type.plusInteger
                                                                                            sat_scCEk
                                                                                            sat_scCEl
                                                                                    of
                                                                                    sat_scCEm
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              GHC.Integer.Type.timesInteger
                                                                                                  sat_scCEm
                                                                                                  System.CPUTime.Posix.Times.getCPUTime2
                                                                                          of
                                                                                          sat_scCEn
                                                                                          { __DEFAULT ->
                                                                                                GHC.Integer.Type.divInteger
                                                                                                    sat_scCEn
                                                                                                    System.CPUTime.Posix.Times.clockTicks;
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                    1# -> GHC.Real.divZeroError;
                                                                  };
                                                        } in  (#,#) [s4_scCEi sat_scCEo];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

System.CPUTime.Posix.Times.getCPUTime
  :: GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] System.CPUTime.Posix.Times.getCPUTime1 eta_B1;


==================== STG syntax: ====================
2018-03-16 16:07:31.491473573 UTC

System.CPUTime.Posix.Times.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

System.CPUTime.Posix.Times.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.CPUTime.Posix.Times.$trModule4];

System.CPUTime.Posix.Times.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "System.CPUTime.Posix.Times"#;

System.CPUTime.Posix.Times.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [System.CPUTime.Posix.Times.$trModule2];

System.CPUTime.Posix.Times.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [System.CPUTime.Posix.Times.$trModule3
                                     System.CPUTime.Posix.Times.$trModule1];

System.CPUTime.Posix.Times.clockTicks :: GHC.Integer.Type.Integer
[GblId] =
    [] \u []
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          Unit# ds1_scCDQ [Occ=Once] ->
              GHC.Integer.Type.smallInteger ds1_scCDQ;
        };

sat_scCDS :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [465#];

sat_scCDT :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scCDS GHC.Types.[]];

sat_scCDR :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1420103680#];

sat_scCDU :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scCDR sat_scCDT];

System.CPUTime.Posix.Times.getCPUTime2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_scCDU;

System.CPUTime.Posix.Times.getCpuTimePrecision2
  :: GHC.Integer.Type.Integer
[GblId] =
    [] \u []
        case
            GHC.Real.$w$s$cfromRational
                System.CPUTime.Posix.Times.getCPUTime2
                System.CPUTime.Posix.Times.clockTicks
        of
        { (#,#) ww1_scCDW [Occ=Once] ww2_scCDX [Occ=Once] ->
              GHC.Real.$w$s$cround
                  GHC.Real.$fIntegralInteger ww1_scCDW ww2_scCDX;
        };

System.CPUTime.Posix.Times.getCpuTimePrecision1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        Unit# [System.CPUTime.Posix.Times.getCpuTimePrecision2];

System.CPUTime.Posix.Times.getCpuTimePrecision
  :: GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        System.CPUTime.Posix.Times.getCpuTimePrecision1 GHC.Prim.void#;

System.CPUTime.Posix.Times.getCPUTime3 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

System.CPUTime.Posix.Times.getCPUTime1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case newPinnedByteArray# [32# GHC.Prim.void#] of {
          Unit# ipv1_scCE2 [Occ=Once] ->
              case unsafeFreezeByteArray# [ipv1_scCE2 GHC.Prim.void#] of {
                Unit# ipv3_scCE5 ->
                    case byteArrayContents# [ipv3_scCE5] of p_tms_scCE6 [Dmd=<S,U>] {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [p_tms_scCE6 GHC.Prim.void#] of {
                            Unit# _ [Occ=Dead] ->
                                case readInt64OffAddr# [p_tms_scCE6 0# GHC.Prim.void#] of {
                                  Unit# ipv5_scCEd [Occ=Once] ->
                                      case plusAddr# [p_tms_scCE6 8#] of sat_scCEe {
                                        __DEFAULT ->
                                            case
                                                readInt64OffAddr# [sat_scCEe 0# GHC.Prim.void#]
                                            of
                                            { Unit# ipv7_scCEh [Occ=Once] ->
                                                  case
                                                      touch# [ipv3_scCE5 GHC.Prim.void#]
                                                  of
                                                  s4_scCEi
                                                  { (##) ->
                                                        let {
                                                          sat_scCEo [Occ=Once]
                                                            :: GHC.Integer.Type.Integer
                                                          [LclId] =
                                                              [ipv5_scCEd ipv7_scCEh] \u []
                                                                  case
                                                                      GHC.Integer.Type.eqInteger#
                                                                          System.CPUTime.Posix.Times.clockTicks
                                                                          System.CPUTime.Posix.Times.getCPUTime3
                                                                  of
                                                                  { __DEFAULT ->
                                                                        case
                                                                            GHC.Integer.Type.smallInteger
                                                                                ipv7_scCEh
                                                                        of
                                                                        sat_scCEl
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  GHC.Integer.Type.smallInteger
                                                                                      ipv5_scCEd
                                                                              of
                                                                              sat_scCEk
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        GHC.Integer.Type.plusInteger
                                                                                            sat_scCEk
                                                                                            sat_scCEl
                                                                                    of
                                                                                    sat_scCEm
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              GHC.Integer.Type.timesInteger
                                                                                                  sat_scCEm
                                                                                                  System.CPUTime.Posix.Times.getCPUTime2
                                                                                          of
                                                                                          sat_scCEn
                                                                                          { __DEFAULT ->
                                                                                                GHC.Integer.Type.divInteger
                                                                                                    sat_scCEn
                                                                                                    System.CPUTime.Posix.Times.clockTicks;
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                    1# -> GHC.Real.divZeroError;
                                                                  };
                                                        } in  Unit# [sat_scCEo];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

System.CPUTime.Posix.Times.getCPUTime
  :: GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        System.CPUTime.Posix.Times.getCPUTime1 GHC.Prim.void#;

