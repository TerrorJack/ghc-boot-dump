
==================== Output Cmm ====================
2018-03-16 16:07:25.914377515 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:25.915008671 UTC

[section ""data" . sat_scxhJ_closure" {
     sat_scxhJ_closure:
         const GHC.Types.I#_con_info;
         const 465;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.915648986 UTC

[section ""data" . sat_scxhK_closure" {
     sat_scxhK_closure:
         const :_con_info;
         const sat_scxhJ_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.91625631 UTC

[section ""data" . sat_scxhI_closure" {
     sat_scxhI_closure:
         const GHC.Types.I#_con_info;
         const 1420103680;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.916831937 UTC

[section ""data" . sat_scxhL_closure" {
     sat_scxhL_closure:
         const :_con_info;
         const sat_scxhI_closure+1;
         const sat_scxhK_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.91779758 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime4_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime4_entry() //  [R1]
         { info_tbl: [(ccxj0,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxj0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxj1; else goto ccxj2;
       ccxj1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxj2: // global
           (_ccxiX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxiX::I64 == 0) goto ccxiZ; else goto ccxiY;
       ccxiZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxiY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxiX::I64;
           R3 = sat_scxhL_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.918770564 UTC

[section ""data" . sat_scxhM_closure" {
     sat_scxhM_closure:
         const GHC.Types.I#_con_info;
         const 1000;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.919400488 UTC

[section ""data" . sat_scxhN_closure" {
     sat_scxhN_closure:
         const :_con_info;
         const sat_scxhM_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.920163236 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime3_entry() //  [R1]
         { info_tbl: [(ccxja,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxja: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxjb; else goto ccxjc;
       ccxjb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxjc: // global
           (_ccxj7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxj7::I64 == 0) goto ccxj9; else goto ccxj8;
       ccxj9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxj8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxj7::I64;
           R3 = sat_scxhN_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.921109435 UTC

[section ""cstring" . System.CPUTime.Posix.ClockGetTime.$trModule4_bytes" {
     System.CPUTime.Posix.ClockGetTime.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.921780075 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$trModule3_closure" {
     System.CPUTime.Posix.ClockGetTime.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.922400842 UTC

[section ""cstring" . System.CPUTime.Posix.ClockGetTime.$trModule2_bytes" {
     System.CPUTime.Posix.ClockGetTime.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,80,85,84,105,109,101,46,80,111,115,105,120,46,67,108,111,99,107,71,101,116,84,105,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.922989258 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$trModule1_closure" {
     System.CPUTime.Posix.ClockGetTime.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.923568199 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$trModule_closure" {
     System.CPUTime.Posix.ClockGetTime.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule3_closure+1;
         const System.CPUTime.Posix.ClockGetTime.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.924158477 UTC

[section ""cstring" . System.CPUTime.Posix.ClockGetTime.$tcTimespec2_bytes" {
     System.CPUTime.Posix.ClockGetTime.$tcTimespec2_bytes:
         I8[] [84,105,109,101,115,112,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.924765991 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$tcTimespec1_closure" {
     System.CPUTime.Posix.ClockGetTime.$tcTimespec1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.ClockGetTime.$tcTimespec2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.925363759 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$tcTimespec_closure" {
     System.CPUTime.Posix.ClockGetTime.$tcTimespec_closure:
         const GHC.Types.TyCon_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule_closure+1;
         const System.CPUTime.Posix.ClockGetTime.$tcTimespec1_closure+1;
         const GHC.Types.krep$*_closure;
         const 13346594173291483587;
         const 3590994262607885225;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.925999601 UTC

[section ""cstring" . lvl_rcxhD_bytes" {
     lvl_rcxhD_bytes:
         I8[] [99,108,111,99,107,95,103,101,116,114,101,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.926738327 UTC

[section ""data" . lvl1_rcxhE_closure" {
     lvl1_rcxhE_closure:
         const lvl1_rcxhE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rcxhE_entry() //  [R1]
         { info_tbl: [(ccxjj,
                       label: lvl1_rcxhE_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxjj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxjk; else goto ccxjl;
       ccxjk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxjl: // global
           (_ccxjg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxjg::I64 == 0) goto ccxji; else goto ccxjh;
       ccxji: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxjh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxjg::I64;
           R2 = lvl_rcxhD_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.927833341 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_closure" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_closure:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_entry() //  [R2]
         { info_tbl: [(ccxjs,
                       label: System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxjs: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_rcxhE_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.92948899 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_info;
         const 0;
 },
 sat_scxig_entry() //  [R1]
         { info_tbl: [(ccxjX,
                       label: sat_scxig_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxjX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxk9; else goto ccxka;
       ccxk9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxka: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccxjV_info;
           R2 = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxjV() //  [R1]
         { info_tbl: [(ccxjV,
                       label: block_ccxjV_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxjV: // global
           I64[Sp] = block_ccxk0_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxk0() //  [R1]
         { info_tbl: [(ccxk0,
                       label: block_ccxk0_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxk0: // global
           I64[Sp] = block_ccxk4_info;
           R2 = I64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxk4() //  [R1]
         { info_tbl: [(ccxk4,
                       label: block_ccxk4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxk4: // global
           I64[Sp] = block_ccxk8_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxk8() //  [R1]
         { info_tbl: [(ccxk8,
                       label: block_ccxk8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxk8: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_entry() //  []
         { info_tbl: [(ccxki,
                       label: System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxki: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxkj; else goto ccxkk;
       ccxkj: // global
           R1 = System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccxkk: // global
           I64[Sp - 8] = block_ccxjz_info;
           R1 = 16;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccxjz() //  [R1]
         { info_tbl: [(ccxjz,
                       label: block_ccxjz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxjz: // global
           _scxhY::I64 = R1 + 16;
           (_scxi2::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint]  result hints:  [‘signed’] ghczuwrapperZC1ZCbaseZCSystemziCPUTimeziPosixziClockGetTimeZCclockzugetres(2, _scxhY::I64);
           _scxi3::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scxi2::I64));
           if (_scxi3::I64 == (-1)) goto ccxkt; else goto ucxky;
       ccxkt: // global
           (_scxik::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scxik::I64;
           Sp = Sp + 8;
           call System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_entry(R2) args: 8, res: 0, upd: 8;
       ucxky: // global
           I64[Sp - 16] = _scxhY::I64;
           I64[Sp - 8] = _scxi3::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _ccxjL() args: 0, res: 0, upd: 0;
     }
 },
 _ccxjL() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxjL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccxkq; else goto ccxkp;
       ccxkq: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_ccxjK_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccxkp: // global
           _scxhY::I64 = I64[Sp];
           _scxi6::I64 = I64[_scxhY::I64];
           _scxia::I64 = I64[_scxhY::I64 + 8];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 24] = sat_scxig_info;
           I64[Hp - 8] = _scxi6::I64;
           I64[Hp] = _scxia::I64;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccxjK() //  [R1]
         { info_tbl: [(ccxjK,
                       label: block_ccxjK_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxjK: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccxjL() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.931916087 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_closure" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_closure:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_entry() //  []
         { info_tbl: [(ccxkG,
                       label: System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxkG: // global
           call System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.93268512 UTC

[section ""cstring" . lvl2_rcxhF_bytes" {
     lvl2_rcxhF_bytes:
         I8[] [99,108,111,99,107,95,103,101,116,116,105,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.933650704 UTC

[section ""data" . lvl3_rcxhG_closure" {
     lvl3_rcxhG_closure:
         const lvl3_rcxhG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rcxhG_entry() //  [R1]
         { info_tbl: [(ccxkP,
                       label: lvl3_rcxhG_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxkP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxkQ; else goto ccxkR;
       ccxkQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxkR: // global
           (_ccxkM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxkM::I64 == 0) goto ccxkO; else goto ccxkN;
       ccxkO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxkN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxkM::I64;
           R2 = lvl2_rcxhF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.93469942 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime2_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime2_entry() //  [R2]
         { info_tbl: [(ccxkY,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxkY: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl3_rcxhG_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.936292923 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime1_info;
         const 0;
 },
 sat_scxiO_entry() //  [R1]
         { info_tbl: [(ccxlt,
                       label: sat_scxiO_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxlt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxlF; else goto ccxlG;
       ccxlF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxlG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccxlr_info;
           R2 = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxlr() //  [R1]
         { info_tbl: [(ccxlr,
                       label: block_ccxlr_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxlr: // global
           I64[Sp] = block_ccxlw_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxlw() //  [R1]
         { info_tbl: [(ccxlw,
                       label: block_ccxlw_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxlw: // global
           I64[Sp] = block_ccxlA_info;
           R2 = I64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxlA() //  [R1]
         { info_tbl: [(ccxlA,
                       label: block_ccxlA_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxlA: // global
           I64[Sp] = block_ccxlE_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxlE() //  [R1]
         { info_tbl: [(ccxlE,
                       label: block_ccxlE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxlE: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime1_entry() //  []
         { info_tbl: [(ccxlO,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxlO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxlP; else goto ccxlQ;
       ccxlP: // global
           R1 = System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccxlQ: // global
           I64[Sp - 8] = block_ccxl5_info;
           R1 = 16;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccxl5() //  [R1]
         { info_tbl: [(ccxl5,
                       label: block_ccxl5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxl5: // global
           _scxiw::I64 = R1 + 16;
           (_scxiA::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint]  result hints:  [‘signed’] ghczuwrapperZC0ZCbaseZCSystemziCPUTimeziPosixziClockGetTimeZCclockzugettime(2, _scxiw::I64);
           _scxiB::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scxiA::I64));
           if (_scxiB::I64 == (-1)) goto ccxlZ; else goto ucxm4;
       ccxlZ: // global
           (_scxiS::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scxiS::I64;
           Sp = Sp + 8;
           call System.CPUTime.Posix.ClockGetTime.getCPUTime2_entry(R2) args: 8, res: 0, upd: 8;
       ucxm4: // global
           I64[Sp - 16] = _scxiw::I64;
           I64[Sp - 8] = _scxiB::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _ccxlh() args: 0, res: 0, upd: 0;
     }
 },
 _ccxlh() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxlh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccxlW; else goto ccxlV;
       ccxlW: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_ccxlg_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccxlV: // global
           _scxiw::I64 = I64[Sp];
           _scxiE::I64 = I64[_scxiw::I64];
           _scxiI::I64 = I64[_scxiw::I64 + 8];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 24] = sat_scxiO_info;
           I64[Hp - 8] = _scxiE::I64;
           I64[Hp] = _scxiI::I64;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccxlg() //  [R1]
         { info_tbl: [(ccxlg,
                       label: block_ccxlg_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxlg: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccxlh() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.938849507 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime_entry() //  []
         { info_tbl: [(ccxmc,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxmc: // global
           call System.CPUTime.Posix.ClockGetTime.getCPUTime1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.939618386 UTC

[section ""relreadonly" . Scxj3_srt" {
     Scxj3_srt:
         const sat_scxhL_closure;
         const sat_scxhN_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_rcxhE_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure;
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure;
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_closure;
         const lvl3_rcxhG_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.940321903 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:25.941787262 UTC

[section ""data" . sat_scxhJ_closure" {
     sat_scxhJ_closure:
         const GHC.Types.I#_con_info;
         const 465;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.942391631 UTC

[section ""data" . sat_scxhK_closure" {
     sat_scxhK_closure:
         const :_con_info;
         const sat_scxhJ_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.943026714 UTC

[section ""data" . sat_scxhI_closure" {
     sat_scxhI_closure:
         const GHC.Types.I#_con_info;
         const 1420103680;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.943625211 UTC

[section ""data" . sat_scxhL_closure" {
     sat_scxhL_closure:
         const :_con_info;
         const sat_scxhI_closure+1;
         const sat_scxhK_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.944415057 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime4_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime4_entry() //  [R1]
         { info_tbl: [(ccxml,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxml: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxmm; else goto ccxmn;
       ccxmm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxmn: // global
           (_ccxmi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxmi::I64 == 0) goto ccxmk; else goto ccxmj;
       ccxmk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxmj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxmi::I64;
           R3 = sat_scxhL_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.945831782 UTC

[section ""data" . sat_scxhM_closure" {
     sat_scxhM_closure:
         const GHC.Types.I#_con_info;
         const 1000;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.946414849 UTC

[section ""data" . sat_scxhN_closure" {
     sat_scxhN_closure:
         const :_con_info;
         const sat_scxhM_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.947152499 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime3_entry() //  [R1]
         { info_tbl: [(ccxmu,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxmu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxmv; else goto ccxmw;
       ccxmv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxmw: // global
           (_ccxmr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxmr::I64 == 0) goto ccxmt; else goto ccxms;
       ccxmt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxms: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxmr::I64;
           R3 = sat_scxhN_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.948059114 UTC

[section ""cstring" . System.CPUTime.Posix.ClockGetTime.$trModule4_bytes" {
     System.CPUTime.Posix.ClockGetTime.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.948660341 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$trModule3_closure" {
     System.CPUTime.Posix.ClockGetTime.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.949280967 UTC

[section ""cstring" . System.CPUTime.Posix.ClockGetTime.$trModule2_bytes" {
     System.CPUTime.Posix.ClockGetTime.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,80,85,84,105,109,101,46,80,111,115,105,120,46,67,108,111,99,107,71,101,116,84,105,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.949857975 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$trModule1_closure" {
     System.CPUTime.Posix.ClockGetTime.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.95043018 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$trModule_closure" {
     System.CPUTime.Posix.ClockGetTime.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule3_closure+1;
         const System.CPUTime.Posix.ClockGetTime.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.951015023 UTC

[section ""cstring" . System.CPUTime.Posix.ClockGetTime.$tcTimespec2_bytes" {
     System.CPUTime.Posix.ClockGetTime.$tcTimespec2_bytes:
         I8[] [84,105,109,101,115,112,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.951615231 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$tcTimespec1_closure" {
     System.CPUTime.Posix.ClockGetTime.$tcTimespec1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.ClockGetTime.$tcTimespec2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.95220353 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$tcTimespec_closure" {
     System.CPUTime.Posix.ClockGetTime.$tcTimespec_closure:
         const GHC.Types.TyCon_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule_closure+1;
         const System.CPUTime.Posix.ClockGetTime.$tcTimespec1_closure+1;
         const GHC.Types.krep$*_closure;
         const 13346594173291483587;
         const 3590994262607885225;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.952838335 UTC

[section ""cstring" . lvl_rcxhD_bytes" {
     lvl_rcxhD_bytes:
         I8[] [99,108,111,99,107,95,103,101,116,114,101,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.953630688 UTC

[section ""data" . lvl1_rcxhE_closure" {
     lvl1_rcxhE_closure:
         const lvl1_rcxhE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rcxhE_entry() //  [R1]
         { info_tbl: [(ccxmD,
                       label: lvl1_rcxhE_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxmD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxmE; else goto ccxmF;
       ccxmE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxmF: // global
           (_ccxmA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxmA::I64 == 0) goto ccxmC; else goto ccxmB;
       ccxmC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxmB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxmA::I64;
           R2 = lvl_rcxhD_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.954694324 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_closure" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_closure:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_entry() //  [R2]
         { info_tbl: [(ccxmM,
                       label: System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxmM: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_rcxhE_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.956278701 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_info;
         const 0;
 },
 sat_scxig_entry() //  [R1]
         { info_tbl: [(ccxnh,
                       label: sat_scxig_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxnh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxnt; else goto ccxnu;
       ccxnt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxnu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccxnf_info;
           R2 = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxnf() //  [R1]
         { info_tbl: [(ccxnf,
                       label: block_ccxnf_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxnf: // global
           I64[Sp] = block_ccxnk_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxnk() //  [R1]
         { info_tbl: [(ccxnk,
                       label: block_ccxnk_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxnk: // global
           I64[Sp] = block_ccxno_info;
           R2 = I64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxno() //  [R1]
         { info_tbl: [(ccxno,
                       label: block_ccxno_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxno: // global
           I64[Sp] = block_ccxns_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxns() //  [R1]
         { info_tbl: [(ccxns,
                       label: block_ccxns_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxns: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_entry() //  []
         { info_tbl: [(ccxnC,
                       label: System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxnC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxnD; else goto ccxnE;
       ccxnD: // global
           R1 = System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccxnE: // global
           I64[Sp - 8] = block_ccxmT_info;
           R1 = 16;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccxmT() //  [R1]
         { info_tbl: [(ccxmT,
                       label: block_ccxmT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxmT: // global
           _scxhY::I64 = R1 + 16;
           (_scxi2::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint]  result hints:  [‘signed’] ghczuwrapperZC1ZCbaseZCSystemziCPUTimeziPosixziClockGetTimeZCclockzugetres(2, _scxhY::I64);
           _scxi3::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scxi2::I64));
           if (_scxi3::I64 == (-1)) goto ccxnN; else goto ucxnS;
       ccxnN: // global
           (_scxik::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scxik::I64;
           Sp = Sp + 8;
           call System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_entry(R2) args: 8, res: 0, upd: 8;
       ucxnS: // global
           I64[Sp - 16] = _scxhY::I64;
           I64[Sp - 8] = _scxi3::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _ccxn5() args: 0, res: 0, upd: 0;
     }
 },
 _ccxn5() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxn5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccxnK; else goto ccxnJ;
       ccxnK: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_ccxn4_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccxnJ: // global
           _scxhY::I64 = I64[Sp];
           _scxi6::I64 = I64[_scxhY::I64];
           _scxia::I64 = I64[_scxhY::I64 + 8];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 24] = sat_scxig_info;
           I64[Hp - 8] = _scxi6::I64;
           I64[Hp] = _scxia::I64;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccxn4() //  [R1]
         { info_tbl: [(ccxn4,
                       label: block_ccxn4_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxn4: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccxn5() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.95873752 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_closure" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_closure:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_entry() //  []
         { info_tbl: [(ccxo0,
                       label: System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxo0: // global
           call System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.959466008 UTC

[section ""cstring" . lvl2_rcxhF_bytes" {
     lvl2_rcxhF_bytes:
         I8[] [99,108,111,99,107,95,103,101,116,116,105,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.960210728 UTC

[section ""data" . lvl3_rcxhG_closure" {
     lvl3_rcxhG_closure:
         const lvl3_rcxhG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rcxhG_entry() //  [R1]
         { info_tbl: [(ccxo9,
                       label: lvl3_rcxhG_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxo9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxoa; else goto ccxob;
       ccxoa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxob: // global
           (_ccxo6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxo6::I64 == 0) goto ccxo8; else goto ccxo7;
       ccxo8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxo7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxo6::I64;
           R2 = lvl2_rcxhF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.961562305 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime2_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime2_entry() //  [R2]
         { info_tbl: [(ccxoi,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxoi: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl3_rcxhG_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.963059587 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime1_info;
         const 0;
 },
 sat_scxiO_entry() //  [R1]
         { info_tbl: [(ccxoN,
                       label: sat_scxiO_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxoN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxoZ; else goto ccxp0;
       ccxoZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxp0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccxoL_info;
           R2 = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxoL() //  [R1]
         { info_tbl: [(ccxoL,
                       label: block_ccxoL_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxoL: // global
           I64[Sp] = block_ccxoQ_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxoQ() //  [R1]
         { info_tbl: [(ccxoQ,
                       label: block_ccxoQ_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxoQ: // global
           I64[Sp] = block_ccxoU_info;
           R2 = I64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxoU() //  [R1]
         { info_tbl: [(ccxoU,
                       label: block_ccxoU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxoU: // global
           I64[Sp] = block_ccxoY_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxoY() //  [R1]
         { info_tbl: [(ccxoY,
                       label: block_ccxoY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxoY: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime1_entry() //  []
         { info_tbl: [(ccxp8,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxp8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxp9; else goto ccxpa;
       ccxp9: // global
           R1 = System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccxpa: // global
           I64[Sp - 8] = block_ccxop_info;
           R1 = 16;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccxop() //  [R1]
         { info_tbl: [(ccxop,
                       label: block_ccxop_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxop: // global
           _scxiw::I64 = R1 + 16;
           (_scxiA::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint]  result hints:  [‘signed’] ghczuwrapperZC0ZCbaseZCSystemziCPUTimeziPosixziClockGetTimeZCclockzugettime(2, _scxiw::I64);
           _scxiB::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scxiA::I64));
           if (_scxiB::I64 == (-1)) goto ccxpj; else goto ucxpo;
       ccxpj: // global
           (_scxiS::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scxiS::I64;
           Sp = Sp + 8;
           call System.CPUTime.Posix.ClockGetTime.getCPUTime2_entry(R2) args: 8, res: 0, upd: 8;
       ucxpo: // global
           I64[Sp - 16] = _scxiw::I64;
           I64[Sp - 8] = _scxiB::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _ccxoB() args: 0, res: 0, upd: 0;
     }
 },
 _ccxoB() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxoB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccxpg; else goto ccxpf;
       ccxpg: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_ccxoA_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccxpf: // global
           _scxiw::I64 = I64[Sp];
           _scxiE::I64 = I64[_scxiw::I64];
           _scxiI::I64 = I64[_scxiw::I64 + 8];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 24] = sat_scxiO_info;
           I64[Hp - 8] = _scxiE::I64;
           I64[Hp] = _scxiI::I64;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccxoA() //  [R1]
         { info_tbl: [(ccxoA,
                       label: block_ccxoA_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxoA: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccxoB() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.965452002 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime_entry() //  []
         { info_tbl: [(ccxpw,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxpw: // global
           call System.CPUTime.Posix.ClockGetTime.getCPUTime1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.96620161 UTC

[section ""relreadonly" . Scxj3_srt" {
     Scxj3_srt:
         const sat_scxhL_closure;
         const sat_scxhN_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_rcxhE_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure;
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure;
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_closure;
         const lvl3_rcxhG_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.967361977 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:25.968596128 UTC

[section ""data" . sat_scxhJ_closure" {
     sat_scxhJ_closure:
         const GHC.Types.I#_con_info;
         const 465;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.970485314 UTC

[section ""data" . sat_scxhK_closure" {
     sat_scxhK_closure:
         const :_con_info;
         const sat_scxhJ_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.972319735 UTC

[section ""data" . sat_scxhI_closure" {
     sat_scxhI_closure:
         const GHC.Types.I#_con_info;
         const 1420103680;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.97421136 UTC

[section ""data" . sat_scxhL_closure" {
     sat_scxhL_closure:
         const :_con_info;
         const sat_scxhI_closure+1;
         const sat_scxhK_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.979098297 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime4_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime4_entry() //  [R1]
         { info_tbl: [(ccxpJ,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxpJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxpK; else goto ccxpL;
       ccxpK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxpL: // global
           (_ccxpG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxpG::I64 == 0) goto ccxpI; else goto ccxpH;
       ccxpI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxpH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxpG::I64;
           R3 = sat_scxhL_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.984126446 UTC

[section ""data" . sat_scxhM_closure" {
     sat_scxhM_closure:
         const GHC.Types.I#_con_info;
         const 1000;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.986183843 UTC

[section ""data" . sat_scxhN_closure" {
     sat_scxhN_closure:
         const :_con_info;
         const sat_scxhM_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.988482497 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime3_entry() //  [R1]
         { info_tbl: [(ccxq1,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxq1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxq2; else goto ccxq3;
       ccxq2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxq3: // global
           (_ccxpY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxpY::I64 == 0) goto ccxq0; else goto ccxpZ;
       ccxq0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxpZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxpY::I64;
           R3 = sat_scxhN_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.993817388 UTC

[section ""cstring" . System.CPUTime.Posix.ClockGetTime.$trModule4_bytes" {
     System.CPUTime.Posix.ClockGetTime.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.995824825 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$trModule3_closure" {
     System.CPUTime.Posix.ClockGetTime.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.997952452 UTC

[section ""cstring" . System.CPUTime.Posix.ClockGetTime.$trModule2_bytes" {
     System.CPUTime.Posix.ClockGetTime.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,80,85,84,105,109,101,46,80,111,115,105,120,46,67,108,111,99,107,71,101,116,84,105,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:25.999782104 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$trModule1_closure" {
     System.CPUTime.Posix.ClockGetTime.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.00171356 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$trModule_closure" {
     System.CPUTime.Posix.ClockGetTime.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule3_closure+1;
         const System.CPUTime.Posix.ClockGetTime.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.003769172 UTC

[section ""cstring" . System.CPUTime.Posix.ClockGetTime.$tcTimespec2_bytes" {
     System.CPUTime.Posix.ClockGetTime.$tcTimespec2_bytes:
         I8[] [84,105,109,101,115,112,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.006135658 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$tcTimespec1_closure" {
     System.CPUTime.Posix.ClockGetTime.$tcTimespec1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.ClockGetTime.$tcTimespec2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.008086001 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$tcTimespec_closure" {
     System.CPUTime.Posix.ClockGetTime.$tcTimespec_closure:
         const GHC.Types.TyCon_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule_closure+1;
         const System.CPUTime.Posix.ClockGetTime.$tcTimespec1_closure+1;
         const GHC.Types.krep$*_closure;
         const 13346594173291483587;
         const 3590994262607885225;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.01031546 UTC

[section ""cstring" . lvl_rcxhD_bytes" {
     lvl_rcxhD_bytes:
         I8[] [99,108,111,99,107,95,103,101,116,114,101,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.013372142 UTC

[section ""data" . lvl1_rcxhE_closure" {
     lvl1_rcxhE_closure:
         const lvl1_rcxhE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rcxhE_entry() //  [R1]
         { info_tbl: [(ccxqq,
                       label: lvl1_rcxhE_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxqq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxqr; else goto ccxqs;
       ccxqr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxqs: // global
           (_ccxqn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxqn::I64 == 0) goto ccxqp; else goto ccxqo;
       ccxqp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxqo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxqn::I64;
           R2 = lvl_rcxhD_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.017991023 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_closure" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_closure:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_entry() //  [R2]
         { info_tbl: [(ccxqG,
                       label: System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxqG: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_rcxhE_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.022346605 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_info;
         const 0;
 },
 sat_scxig_entry() //  [R1]
         { info_tbl: [(ccxrf,
                       label: sat_scxig_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxrf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxrr; else goto ccxrs;
       ccxrr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxrs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccxrd_info;
           R2 = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxrd() //  [R1]
         { info_tbl: [(ccxrd,
                       label: block_ccxrd_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxrd: // global
           I64[Sp] = block_ccxri_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxri() //  [R1]
         { info_tbl: [(ccxri,
                       label: block_ccxri_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxri: // global
           I64[Sp] = block_ccxrm_info;
           R2 = I64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxrm() //  [R1]
         { info_tbl: [(ccxrm,
                       label: block_ccxrm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxrm: // global
           I64[Sp] = block_ccxrq_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxrq() //  [R1]
         { info_tbl: [(ccxrq,
                       label: block_ccxrq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxrq: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_entry() //  []
         { info_tbl: [(ccxrA,
                       label: System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxrA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxrB; else goto ccxrC;
       ccxrB: // global
           R1 = System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccxrC: // global
           I64[Sp - 8] = block_ccxqR_info;
           R1 = 16;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccxqR() //  [R1]
         { info_tbl: [(ccxqR,
                       label: block_ccxqR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxqR: // global
           _scxhY::I64 = R1 + 16;
           (_scxi2::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint]  result hints:  [‘signed’] ghczuwrapperZC1ZCbaseZCSystemziCPUTimeziPosixziClockGetTimeZCclockzugetres(2, _scxhY::I64);
           _scxi3::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scxi2::I64));
           if (_scxi3::I64 == (-1)) goto ccxrL; else goto ucxrQ;
       ccxrL: // global
           (_scxik::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scxik::I64;
           Sp = Sp + 8;
           call System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_entry(R2) args: 8, res: 0, upd: 8;
       ucxrQ: // global
           I64[Sp - 16] = _scxhY::I64;
           I64[Sp - 8] = _scxi3::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _ccxr3() args: 0, res: 0, upd: 0;
     }
 },
 _ccxr3() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxr3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccxrI; else goto ccxrH;
       ccxrI: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_ccxr2_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccxrH: // global
           _scxhY::I64 = I64[Sp];
           _scxi6::I64 = I64[_scxhY::I64];
           _scxia::I64 = I64[_scxhY::I64 + 8];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 24] = sat_scxig_info;
           I64[Hp - 8] = _scxi6::I64;
           I64[Hp] = _scxia::I64;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccxr2() //  [R1]
         { info_tbl: [(ccxr2,
                       label: block_ccxr2_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxr2: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccxr3() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.03967377 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_closure" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_closure:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_entry() //  []
         { info_tbl: [(ccxst,
                       label: System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxst: // global
           call System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.043103912 UTC

[section ""cstring" . lvl2_rcxhF_bytes" {
     lvl2_rcxhF_bytes:
         I8[] [99,108,111,99,107,95,103,101,116,116,105,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.045586242 UTC

[section ""data" . lvl3_rcxhG_closure" {
     lvl3_rcxhG_closure:
         const lvl3_rcxhG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rcxhG_entry() //  [R1]
         { info_tbl: [(ccxsH,
                       label: lvl3_rcxhG_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxsH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxsI; else goto ccxsJ;
       ccxsI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxsJ: // global
           (_ccxsE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxsE::I64 == 0) goto ccxsG; else goto ccxsF;
       ccxsG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxsF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxsE::I64;
           R2 = lvl2_rcxhF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.050668582 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime2_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime2_entry() //  [R2]
         { info_tbl: [(ccxsX,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxsX: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl3_rcxhG_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.054967105 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime1_info;
         const 0;
 },
 sat_scxiO_entry() //  [R1]
         { info_tbl: [(ccxtw,
                       label: sat_scxiO_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxtw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxtI; else goto ccxtJ;
       ccxtI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxtJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccxtu_info;
           R2 = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxtu() //  [R1]
         { info_tbl: [(ccxtu,
                       label: block_ccxtu_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxtu: // global
           I64[Sp] = block_ccxtz_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxtz() //  [R1]
         { info_tbl: [(ccxtz,
                       label: block_ccxtz_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxtz: // global
           I64[Sp] = block_ccxtD_info;
           R2 = I64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxtD() //  [R1]
         { info_tbl: [(ccxtD,
                       label: block_ccxtD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxtD: // global
           I64[Sp] = block_ccxtH_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxtH() //  [R1]
         { info_tbl: [(ccxtH,
                       label: block_ccxtH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxtH: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime1_entry() //  []
         { info_tbl: [(ccxtR,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxtR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxtS; else goto ccxtT;
       ccxtS: // global
           R1 = System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccxtT: // global
           I64[Sp - 8] = block_ccxt8_info;
           R1 = 16;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccxt8() //  [R1]
         { info_tbl: [(ccxt8,
                       label: block_ccxt8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxt8: // global
           _scxiw::I64 = R1 + 16;
           (_scxiA::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint]  result hints:  [‘signed’] ghczuwrapperZC0ZCbaseZCSystemziCPUTimeziPosixziClockGetTimeZCclockzugettime(2, _scxiw::I64);
           _scxiB::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scxiA::I64));
           if (_scxiB::I64 == (-1)) goto ccxu2; else goto ucxu7;
       ccxu2: // global
           (_scxiS::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scxiS::I64;
           Sp = Sp + 8;
           call System.CPUTime.Posix.ClockGetTime.getCPUTime2_entry(R2) args: 8, res: 0, upd: 8;
       ucxu7: // global
           I64[Sp - 16] = _scxiw::I64;
           I64[Sp - 8] = _scxiB::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _ccxtk() args: 0, res: 0, upd: 0;
     }
 },
 _ccxtk() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxtk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccxtZ; else goto ccxtY;
       ccxtZ: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_ccxtj_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccxtY: // global
           _scxiw::I64 = I64[Sp];
           _scxiE::I64 = I64[_scxiw::I64];
           _scxiI::I64 = I64[_scxiw::I64 + 8];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 24] = sat_scxiO_info;
           I64[Hp - 8] = _scxiE::I64;
           I64[Hp] = _scxiI::I64;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccxtj() //  [R1]
         { info_tbl: [(ccxtj,
                       label: block_ccxtj_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxtj: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccxtk() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.072406678 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime_entry() //  []
         { info_tbl: [(ccxuK,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxuK: // global
           call System.CPUTime.Posix.ClockGetTime.getCPUTime1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.076056914 UTC

[section ""relreadonly" . Scxj3_srt" {
     Scxj3_srt:
         const sat_scxhL_closure;
         const sat_scxhN_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_rcxhE_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure;
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure;
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_closure;
         const lvl3_rcxhG_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.272510973 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:26.273726106 UTC

[section ""data" . sat_scxuT_closure" {
     sat_scxuT_closure:
         const GHC.Types.I#_con_info;
         const 465;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.275505662 UTC

[section ""data" . sat_scxuU_closure" {
     sat_scxuU_closure:
         const :_con_info;
         const sat_scxuT_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.277346492 UTC

[section ""data" . sat_scxuS_closure" {
     sat_scxuS_closure:
         const GHC.Types.I#_con_info;
         const 1420103680;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.279071165 UTC

[section ""data" . sat_scxuV_closure" {
     sat_scxuV_closure:
         const :_con_info;
         const sat_scxuS_closure+1;
         const sat_scxuU_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.281091583 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime4_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime4_entry() //  [R1]
         { info_tbl: [(ccxwe,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxwe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxwf; else goto ccxwg;
       ccxwf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxwg: // global
           (_ccxwb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxwb::I64 == 0) goto ccxwd; else goto ccxwc;
       ccxwd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxwc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxwb::I64;
           R3 = sat_scxuV_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.285591855 UTC

[section ""data" . sat_scxuW_closure" {
     sat_scxuW_closure:
         const GHC.Types.I#_con_info;
         const 1000;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.287400283 UTC

[section ""data" . sat_scxuX_closure" {
     sat_scxuX_closure:
         const :_con_info;
         const sat_scxuW_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.289396383 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime3_entry() //  [R1]
         { info_tbl: [(ccxwz,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxwz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxwA; else goto ccxwB;
       ccxwA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxwB: // global
           (_ccxww::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxww::I64 == 0) goto ccxwy; else goto ccxwx;
       ccxwy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxwx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxww::I64;
           R3 = sat_scxuX_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.293903319 UTC

[section ""cstring" . System.CPUTime.Posix.ClockGetTime.$trModule4_bytes" {
     System.CPUTime.Posix.ClockGetTime.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.295663949 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$trModule3_closure" {
     System.CPUTime.Posix.ClockGetTime.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.297608945 UTC

[section ""cstring" . System.CPUTime.Posix.ClockGetTime.$trModule2_bytes" {
     System.CPUTime.Posix.ClockGetTime.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,80,85,84,105,109,101,46,80,111,115,105,120,46,67,108,111,99,107,71,101,116,84,105,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.299530031 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$trModule1_closure" {
     System.CPUTime.Posix.ClockGetTime.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.3020185 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$trModule_closure" {
     System.CPUTime.Posix.ClockGetTime.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule3_closure+1;
         const System.CPUTime.Posix.ClockGetTime.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.303803661 UTC

[section ""cstring" . System.CPUTime.Posix.ClockGetTime.$tcTimespec2_bytes" {
     System.CPUTime.Posix.ClockGetTime.$tcTimespec2_bytes:
         I8[] [84,105,109,101,115,112,101,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.305626849 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$tcTimespec1_closure" {
     System.CPUTime.Posix.ClockGetTime.$tcTimespec1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.ClockGetTime.$tcTimespec2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.307413699 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$tcTimespec_closure" {
     System.CPUTime.Posix.ClockGetTime.$tcTimespec_closure:
         const GHC.Types.TyCon_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule_closure+1;
         const System.CPUTime.Posix.ClockGetTime.$tcTimespec1_closure+1;
         const GHC.Types.krep$*_closure;
         const 13346594173291483587;
         const 3590994262607885225;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.309367067 UTC

[section ""cstring" . lvl_rcxhD_bytes" {
     lvl_rcxhD_bytes:
         I8[] [99,108,111,99,107,95,103,101,116,114,101,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.311404101 UTC

[section ""data" . lvl1_rcxhE_closure" {
     lvl1_rcxhE_closure:
         const lvl1_rcxhE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rcxhE_entry() //  [R1]
         { info_tbl: [(ccxx0,
                       label: lvl1_rcxhE_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxx0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxx1; else goto ccxx2;
       ccxx1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxx2: // global
           (_ccxwX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxwX::I64 == 0) goto ccxwZ; else goto ccxwY;
       ccxwZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxwY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxwX::I64;
           R2 = lvl_rcxhD_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.315664486 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_closure" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_closure:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_entry() //  [R2]
         { info_tbl: [(ccxxh,
                       label: System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxxh: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_rcxhE_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.320511657 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_info;
         const 0;
 },
 sat_scxvq_entry() //  [R1]
         { info_tbl: [(ccxxQ,
                       label: sat_scxvq_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxxQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxy2; else goto ccxy3;
       ccxy2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxy3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccxxO_info;
           R2 = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxxO() //  [R1]
         { info_tbl: [(ccxxO,
                       label: block_ccxxO_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxxO: // global
           I64[Sp] = block_ccxxT_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxxT() //  [R1]
         { info_tbl: [(ccxxT,
                       label: block_ccxxT_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxxT: // global
           I64[Sp] = block_ccxxX_info;
           R2 = I64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxxX() //  [R1]
         { info_tbl: [(ccxxX,
                       label: block_ccxxX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxxX: // global
           I64[Sp] = block_ccxy1_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxy1() //  [R1]
         { info_tbl: [(ccxy1,
                       label: block_ccxy1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxy1: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_entry() //  []
         { info_tbl: [(ccxyb,
                       label: System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxyb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxyc; else goto ccxyd;
       ccxyc: // global
           R1 = System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccxyd: // global
           I64[Sp - 8] = block_ccxxs_info;
           R1 = 16;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccxxs() //  [R1]
         { info_tbl: [(ccxxs,
                       label: block_ccxxs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxxs: // global
           _scxv8::I64 = R1 + 16;
           (_scxvc::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint]  result hints:  [‘signed’] ghczuwrapperZC1ZCbaseZCSystemziCPUTimeziPosixziClockGetTimeZCclockzugetres(2, _scxv8::I64);
           _scxvd::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scxvc::I64));
           if (_scxvd::I64 == (-1)) goto ccxym; else goto ucxyr;
       ccxym: // global
           (_scxvu::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scxvu::I64;
           Sp = Sp + 8;
           call System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_entry(R2) args: 8, res: 0, upd: 8;
       ucxyr: // global
           I64[Sp - 16] = _scxv8::I64;
           I64[Sp - 8] = _scxvd::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _ccxxE() args: 0, res: 0, upd: 0;
     }
 },
 _ccxxE() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxxE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccxyj; else goto ccxyi;
       ccxyj: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_ccxxD_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccxyi: // global
           _scxv8::I64 = I64[Sp];
           _scxvg::I64 = I64[_scxv8::I64];
           _scxvk::I64 = I64[_scxv8::I64 + 8];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 24] = sat_scxvq_info;
           I64[Hp - 8] = _scxvg::I64;
           I64[Hp] = _scxvk::I64;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccxxD() //  [R1]
         { info_tbl: [(ccxxD,
                       label: block_ccxxD_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxxD: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccxxE() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.33908827 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_closure" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_closure:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_entry() //  []
         { info_tbl: [(ccxzc,
                       label: System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxzc: // global
           call System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.342564105 UTC

[section ""cstring" . lvl2_rcxhF_bytes" {
     lvl2_rcxhF_bytes:
         I8[] [99,108,111,99,107,95,103,101,116,116,105,109,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.344486523 UTC

[section ""data" . lvl3_rcxhG_closure" {
     lvl3_rcxhG_closure:
         const lvl3_rcxhG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rcxhG_entry() //  [R1]
         { info_tbl: [(ccxzq,
                       label: lvl3_rcxhG_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxzq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxzr; else goto ccxzs;
       ccxzr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxzs: // global
           (_ccxzn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxzn::I64 == 0) goto ccxzp; else goto ccxzo;
       ccxzp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxzo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxzn::I64;
           R2 = lvl2_rcxhF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.350017437 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime2_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime2_entry() //  [R2]
         { info_tbl: [(ccxzH,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxzH: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl3_rcxhG_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.357960403 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime1_info;
         const 0;
 },
 sat_scxvY_entry() //  [R1]
         { info_tbl: [(ccxAg,
                       label: sat_scxvY_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxAg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxAs; else goto ccxAt;
       ccxAs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxAt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccxAe_info;
           R2 = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxAe() //  [R1]
         { info_tbl: [(ccxAe,
                       label: block_ccxAe_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxAe: // global
           I64[Sp] = block_ccxAj_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxAj() //  [R1]
         { info_tbl: [(ccxAj,
                       label: block_ccxAj_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxAj: // global
           I64[Sp] = block_ccxAn_info;
           R2 = I64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxAn() //  [R1]
         { info_tbl: [(ccxAn,
                       label: block_ccxAn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxAn: // global
           I64[Sp] = block_ccxAr_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccxAr() //  [R1]
         { info_tbl: [(ccxAr,
                       label: block_ccxAr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxAr: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime1_entry() //  []
         { info_tbl: [(ccxAB,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxAB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxAC; else goto ccxAD;
       ccxAC: // global
           R1 = System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccxAD: // global
           I64[Sp - 8] = block_ccxzS_info;
           R1 = 16;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccxzS() //  [R1]
         { info_tbl: [(ccxzS,
                       label: block_ccxzS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxzS: // global
           _scxvG::I64 = R1 + 16;
           (_scxvK::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint]  result hints:  [‘signed’] ghczuwrapperZC0ZCbaseZCSystemziCPUTimeziPosixziClockGetTimeZCclockzugettime(2, _scxvG::I64);
           _scxvL::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scxvK::I64));
           if (_scxvL::I64 == (-1)) goto ccxAM; else goto ucxAR;
       ccxAM: // global
           (_scxw2::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scxw2::I64;
           Sp = Sp + 8;
           call System.CPUTime.Posix.ClockGetTime.getCPUTime2_entry(R2) args: 8, res: 0, upd: 8;
       ucxAR: // global
           I64[Sp - 16] = _scxvG::I64;
           I64[Sp - 8] = _scxvL::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _ccxA4() args: 0, res: 0, upd: 0;
     }
 },
 _ccxA4() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxA4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccxAJ; else goto ccxAI;
       ccxAJ: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_ccxA3_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccxAI: // global
           _scxvG::I64 = I64[Sp];
           _scxvO::I64 = I64[_scxvG::I64];
           _scxvS::I64 = I64[_scxvG::I64 + 8];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 24] = sat_scxvY_info;
           I64[Hp - 8] = _scxvO::I64;
           I64[Hp] = _scxvS::I64;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccxA3() //  [R1]
         { info_tbl: [(ccxA3,
                       label: block_ccxA3_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxA3: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccxA4() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.386625127 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime_entry() //  []
         { info_tbl: [(ccxBC,
                       label: System.CPUTime.Posix.ClockGetTime.getCPUTime_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccxBC: // global
           call System.CPUTime.Posix.ClockGetTime.getCPUTime1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:26.391373822 UTC

[section ""relreadonly" . Scxwh_srt" {
     Scxwh_srt:
         const sat_scxuV_closure;
         const sat_scxuX_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_rcxhE_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure;
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure;
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_closure;
         const lvl3_rcxhG_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure;
 }]

