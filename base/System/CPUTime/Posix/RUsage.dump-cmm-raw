
==================== Raw Cmm ====================
2018-03-16 16:07:31.680618046 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:31.682351141 UTC

[section ""cstring" . System.CPUTime.Posix.RUsage.$trModule4_bytes" {
     System.CPUTime.Posix.RUsage.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.684313959 UTC

[section ""data" . System.CPUTime.Posix.RUsage.$trModule3_closure" {
     System.CPUTime.Posix.RUsage.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.RUsage.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.68615564 UTC

[section ""cstring" . System.CPUTime.Posix.RUsage.$trModule2_bytes" {
     System.CPUTime.Posix.RUsage.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,80,85,84,105,109,101,46,80,111,115,105,120,46,82,85,115,97,103,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.687916249 UTC

[section ""data" . System.CPUTime.Posix.RUsage.$trModule1_closure" {
     System.CPUTime.Posix.RUsage.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.RUsage.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.689766017 UTC

[section ""data" . System.CPUTime.Posix.RUsage.$trModule_closure" {
     System.CPUTime.Posix.RUsage.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.CPUTime.Posix.RUsage.$trModule3_closure+1;
         const System.CPUTime.Posix.RUsage.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.691646428 UTC

[section ""data" . sat_scCRx_closure" {
     sat_scCRx_closure:
         const GHC.Types.I#_con_info;
         const 465;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.693562682 UTC

[section ""data" . sat_scCRy_closure" {
     sat_scCRy_closure:
         const :_con_info;
         const sat_scCRx_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.695365402 UTC

[section ""data" . sat_scCRw_closure" {
     sat_scCRw_closure:
         const GHC.Types.I#_con_info;
         const 1420103680;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.69718132 UTC

[section ""data" . sat_scCRz_closure" {
     sat_scCRz_closure:
         const :_con_info;
         const sat_scCRw_closure+1;
         const sat_scCRy_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.700072107 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision3_entry() //  [R1]
         { []
         }
     {offset
       ccCYX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccCYY; else goto ccCYZ;
       ccCYY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCYZ: // global
           (_ccCYU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCYU::I64 == 0) goto ccCYW; else goto ccCYV;
       ccCYW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCYV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCYU::I64;
           R3 = sat_scCRz_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.RUsage.getCpuTimePrecision3_info" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision3_info:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision3_entry;
         const 0;
         const 4294967317;
         const ScCSI_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.706467027 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision2_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision2_entry() //  [R1]
         { []
         }
     {offset
       ccCZg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccCZw; else goto ccCZx;
       ccCZw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCZx: // global
           (_ccCZa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCZa::I64 == 0) goto ccCZc; else goto ccCZb;
       ccCZc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCZb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCZa::I64;
           (_scCRD::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] clk_tck();
           I64[Sp - 24] = block_ccCZe_info;
           R2 = _scCRD::I64;
           Sp = Sp - 24;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.RUsage.getCpuTimePrecision2_info" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision2_info:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision2_entry;
         const 0;
         const 133143986197;
         const ScCSI_srt+8;
 },
 _ccCZe() //  [R1]
         { []
         }
     {offset
       ccCZe: // global
           I64[Sp - 8] = block_ccCZj_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccCZe_info" {
     block_ccCZe_info:
         const _ccCZe;
         const 0;
         const 133143986206;
         const ScCSI_srt+8;
 },
 _ccCZj() //  [R1]
         { []
         }
     {offset
       ccCZj: // global
           I64[Sp] = block_ccCZn_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccCZj_info" {
     block_ccCZj_info:
         const _ccCZj;
         const 1;
         const 133143986206;
         const ScCSI_srt+8;
 },
 _ccCZn() //  [R1]
         { []
         }
     {offset
       ccCZn: // global
           I64[Sp] = block_ccCZr_info;
           R3 = R1;
           R2 = System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccCZn_info" {
     block_ccCZn_info:
         const _ccCZn;
         const 1;
         const 133143986206;
         const ScCSI_srt+8;
 },
 _ccCZr() //  [R1]
         { []
         }
     {offset
       ccCZr: // global
           _scCRH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccCZv_info;
           R3 = _scCRH::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccCZr_info" {
     block_ccCZr_info:
         const _ccCZr;
         const 1;
         const 30064771102;
         const ScCSI_srt+16;
 },
 _ccCZv() //  [R1, R2]
         { []
         }
     {offset
       ccCZv: // global
           R4 = R2;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInteger_closure;
           Sp = Sp + 8;
           call GHC.Real.$w$s$cround_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccCZv_info" {
     block_ccCZv_info:
         const _ccCZv;
         const 0;
         const 21474836510;
         const ScCSI_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.71857705 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision1_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision1_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision1_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision1_entry() //  []
         { []
         }
     {offset
       ccD04: // global
           R1 = System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.RUsage.getCpuTimePrecision1_info" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision1_info:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision1_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScCSI_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.722048329 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision_entry() //  []
         { []
         }
     {offset
       ccD0g: // global
           call System.CPUTime.Posix.RUsage.getCpuTimePrecision1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.RUsage.getCpuTimePrecision_info" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision_info:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScCSI_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.725234563 UTC

[section ""cstring" . lvl_rcCRt_bytes" {
     lvl_rcCRt_bytes:
         I8[] [103,101,116,114,117,115,97,103,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.728037103 UTC

[section ""data" . lvl1_rcCRu_closure" {
     lvl1_rcCRu_closure:
         const lvl1_rcCRu_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rcCRu_entry() //  [R1]
         { []
         }
     {offset
       ccD0u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccD0v; else goto ccD0w;
       ccD0v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccD0w: // global
           (_ccD0r::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccD0r::I64 == 0) goto ccD0t; else goto ccD0s;
       ccD0t: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccD0s: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccD0r::I64;
           R2 = lvl_rcCRt_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_rcCRu_info" {
     lvl1_rcCRu_info:
         const lvl1_rcCRu_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.732073506 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime2_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime2_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime2_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCPUTime2_entry() //  [R2]
         { []
         }
     {offset
       ccD0K: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_rcCRu_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.RUsage.getCPUTime2_info" {
     System.CPUTime.Posix.RUsage.getCPUTime2_info:
         const System.CPUTime.Posix.RUsage.getCPUTime2_entry;
         const 0;
         const 12884901902;
         const 8589934596;
         const ScCSI_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.735495483 UTC

[section ""data" . sat_scCRP_closure" {
     sat_scCRP_closure:
         const GHC.Types.I#_con_info;
         const 1000000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.737281764 UTC

[section ""data" . sat_scCRQ_closure" {
     sat_scCRQ_closure:
         const :_con_info;
         const sat_scCRP_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.740293839 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime3_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime3_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCPUTime3_entry() //  [R1]
         { []
         }
     {offset
       ccD0Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccD10; else goto ccD11;
       ccD10: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccD11: // global
           (_ccD0W::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccD0W::I64 == 0) goto ccD0Y; else goto ccD0X;
       ccD0Y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccD0X: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccD0W::I64;
           R3 = sat_scCRQ_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.RUsage.getCPUTime3_info" {
     System.CPUTime.Posix.RUsage.getCPUTime3_info:
         const System.CPUTime.Posix.RUsage.getCPUTime3_entry;
         const 0;
         const 4294967317;
         const ScCSI_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.748264579 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime1_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime1_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime1_info;
         const 0;
 },
 sat_scCSt_entry() //  [R1]
         { []
         }
     {offset
       ccD1H: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccD2d; else goto ccD2e;
       ccD2d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccD2e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccD1F_info;
           R2 = I64[R1 + 40];
           I64[Sp - 40] = I64[R1 + 16];
           I64[Sp - 32] = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scCSt_info" {
     sat_scCSt_info:
         const sat_scCSt_entry;
         const 17179869184;
         const 13198434500623;
         const ScCSI_srt+8;
 },
 _ccD1F() //  [R1]
         { []
         }
     {offset
       ccD1F: // global
           I64[Sp] = block_ccD1K_info;
           R2 = I64[Sp + 24];
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD1F_info" {
     block_ccD1F_info:
         const _ccD1F;
         const 451;
         const 13198434500638;
         const ScCSI_srt+8;
 },
 _ccD1K() //  [R1]
         { []
         }
     {offset
       ccD1K: // global
           I64[Sp] = block_ccD1O_info;
           R3 = System.CPUTime.Posix.RUsage.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD1K_info" {
     block_ccD1K_info:
         const _ccD1K;
         const 195;
         const 13198434500638;
         const ScCSI_srt+8;
 },
 _ccD1O() //  [R1]
         { []
         }
     {offset
       ccD1O: // global
           I64[Sp] = block_ccD1S_info;
           R2 = I64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD1O_info" {
     block_ccD1O_info:
         const _ccD1O;
         const 195;
         const 13198434500638;
         const ScCSI_srt+8;
 },
 _ccD1S() //  [R1]
         { []
         }
     {offset
       ccD1S: // global
           I64[Sp] = block_ccD1W_info;
           R2 = I64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD1S_info" {
     block_ccD1S_info:
         const _ccD1S;
         const 67;
         const 13198434500638;
         const ScCSI_srt+8;
 },
 _ccD1W() //  [R1]
         { []
         }
     {offset
       ccD1W: // global
           I64[Sp] = block_ccD20_info;
           R3 = System.CPUTime.Posix.RUsage.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD1W_info" {
     block_ccD1W_info:
         const _ccD1W;
         const 3;
         const 13198434500638;
         const ScCSI_srt+8;
 },
 _ccD20() //  [R1]
         { []
         }
     {offset
       ccD20: // global
           _scCSm::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccD24_info;
           R3 = _scCSm::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD20_info" {
     block_ccD20_info:
         const _ccD20;
         const 3;
         const 13198434500638;
         const ScCSI_srt+8;
 },
 _ccD24() //  [R1]
         { []
         }
     {offset
       ccD24: // global
           _scCSp::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccD28_info;
           R3 = _scCSp::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD24_info" {
     block_ccD24_info:
         const _ccD24;
         const 2;
         const 13198434500638;
         const ScCSI_srt+8;
 },
 _ccD28() //  [R1]
         { []
         }
     {offset
       ccD28: // global
           _scCSr::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccD2c_info;
           R3 = _scCSr::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD28_info" {
     block_ccD28_info:
         const _ccD28;
         const 1;
         const 13198434500638;
         const ScCSI_srt+8;
 },
 _ccD2c() //  [R1]
         { []
         }
     {offset
       ccD2c: // global
           R3 = System.CPUTime.Posix.RUsage.getCPUTime3_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD2c_info" {
     block_ccD2c_info:
         const _ccD2c;
         const 0;
         const 8800387989534;
         const ScCSI_srt+8;
 },
 System.CPUTime.Posix.RUsage.getCPUTime1_entry() //  []
         { []
         }
     {offset
       ccD2r: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccD2s; else goto ccD2t;
       ccD2s: // global
           R1 = System.CPUTime.Posix.RUsage.getCPUTime1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccD2t: // global
           I64[Sp - 8] = block_ccD1d_info;
           R1 = 272;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.RUsage.getCPUTime1_info" {
     System.CPUTime.Posix.RUsage.getCPUTime1_info:
         const System.CPUTime.Posix.RUsage.getCPUTime1_entry;
         const 0;
         const 65974992633870;
         const 4294967299;
         const ScCSI_srt+8;
 },
 _ccD1d() //  [R1]
         { []
         }
     {offset
       ccD1d: // global
           _scCRY::I64 = R1 + 16;
           (_scCS2::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint]  result hints:  [‘signed’] ghczuwrapperZC0ZCbaseZCSystemziCPUTimeziPosixziRUsageZCgetrusage(0, _scCRY::I64);
           _scCS3::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scCS2::I64));
           if (_scCS3::I64 == (-1)) goto ccD2C; else goto ucD2H;
       ccD2C: // global
           (_scCSx::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scCSx::I64;
           Sp = Sp + 8;
           call System.CPUTime.Posix.RUsage.getCPUTime2_entry(R2) args: 8, res: 0, upd: 8;
       ucD2H: // global
           I64[Sp - 16] = _scCRY::I64;
           I64[Sp - 8] = _scCS3::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _ccD1p() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccD1d_info" {
     block_ccD1d_info:
         const _ccD1d;
         const 0;
         const 48382806589470;
         const ScCSI_srt+8;
 },
 _ccD1p() //  []
         { []
         }
     {offset
       ccD1p: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccD2z; else goto ccD2y;
       ccD2z: // global
           HpAlloc = 48;
           I64[Sp - 8] = block_ccD1o_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccD2y: // global
           _scCRY::I64 = I64[Sp];
           _scCS6::I64 = I64[_scCRY::I64];
           _scCSa::I64 = I64[_scCRY::I64 + 8];
           _scCSb::I64 = _scCRY::I64 + 16;
           _scCSe::I64 = I64[_scCSb::I64];
           _scCSi::I64 = I64[_scCSb::I64 + 8];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 40] = sat_scCSt_info;
           I64[Hp - 24] = _scCS6::I64;
           I64[Hp - 16] = _scCSa::I64;
           I64[Hp - 8] = _scCSe::I64;
           I64[Hp] = _scCSi::I64;
           R1 = Hp - 40;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccD1o() //  [R1]
         { []
         }
     {offset
       ccD1o: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccD1p() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccD1o_info" {
     block_ccD1o_info:
         const _ccD1o;
         const 195;
         const 13198434500638;
         const ScCSI_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.780145526 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCPUTime_entry() //  []
         { []
         }
     {offset
       ccD3B: // global
           call System.CPUTime.Posix.RUsage.getCPUTime1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.RUsage.getCPUTime_info" {
     System.CPUTime.Posix.RUsage.getCPUTime_info:
         const System.CPUTime.Posix.RUsage.getCPUTime_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScCSI_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.784372101 UTC

[section ""relreadonly" . ScCSI_srt" {
     ScCSI_srt:
         const sat_scCRz_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Real.$fIntegralInteger_closure;
         const GHC.Real.$w$sreduce_closure;
         const GHC.Real.$w$s$cround_closure;
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure;
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure;
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_rcCRu_closure;
         const sat_scCRQ_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const System.CPUTime.Posix.RUsage.getCPUTime3_closure;
         const System.CPUTime.Posix.RUsage.getCPUTime1_closure;
         const System.CPUTime.Posix.RUsage.getCPUTime2_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.98355005 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:31.984759761 UTC

[section ""cstring" . System.CPUTime.Posix.RUsage.$trModule4_bytes" {
     System.CPUTime.Posix.RUsage.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.986912829 UTC

[section ""data" . System.CPUTime.Posix.RUsage.$trModule3_closure" {
     System.CPUTime.Posix.RUsage.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.RUsage.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.988813162 UTC

[section ""cstring" . System.CPUTime.Posix.RUsage.$trModule2_bytes" {
     System.CPUTime.Posix.RUsage.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,80,85,84,105,109,101,46,80,111,115,105,120,46,82,85,115,97,103,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.990921925 UTC

[section ""data" . System.CPUTime.Posix.RUsage.$trModule1_closure" {
     System.CPUTime.Posix.RUsage.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.RUsage.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.992911375 UTC

[section ""data" . System.CPUTime.Posix.RUsage.$trModule_closure" {
     System.CPUTime.Posix.RUsage.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.CPUTime.Posix.RUsage.$trModule3_closure+1;
         const System.CPUTime.Posix.RUsage.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.995573558 UTC

[section ""data" . sat_scD3K_closure" {
     sat_scD3K_closure:
         const GHC.Types.I#_con_info;
         const 465;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.997462858 UTC

[section ""data" . sat_scD3L_closure" {
     sat_scD3L_closure:
         const :_con_info;
         const sat_scD3K_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.9993964 UTC

[section ""data" . sat_scD3J_closure" {
     sat_scD3J_closure:
         const GHC.Types.I#_con_info;
         const 1420103680;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:32.001141222 UTC

[section ""data" . sat_scD3M_closure" {
     sat_scD3M_closure:
         const :_con_info;
         const sat_scD3J_closure+1;
         const sat_scD3L_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:32.003886885 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision3_entry() //  [R1]
         { []
         }
     {offset
       ccD51: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccD52; else goto ccD53;
       ccD52: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccD53: // global
           (_ccD4Y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccD4Y::I64 == 0) goto ccD50; else goto ccD4Z;
       ccD50: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccD4Z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccD4Y::I64;
           R3 = sat_scD3M_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.RUsage.getCpuTimePrecision3_info" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision3_info:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision3_entry;
         const 0;
         const 4294967317;
         const ScD54_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:32.00974566 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision2_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision2_entry() //  [R1]
         { []
         }
     {offset
       ccD5n: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccD5D; else goto ccD5E;
       ccD5D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccD5E: // global
           (_ccD5h::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccD5h::I64 == 0) goto ccD5j; else goto ccD5i;
       ccD5j: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccD5i: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccD5h::I64;
           (_scD3Q::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] clk_tck();
           I64[Sp - 24] = block_ccD5l_info;
           R2 = _scD3Q::I64;
           Sp = Sp - 24;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.RUsage.getCpuTimePrecision2_info" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision2_info:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision2_entry;
         const 0;
         const 133143986197;
         const ScD54_srt+8;
 },
 _ccD5l() //  [R1]
         { []
         }
     {offset
       ccD5l: // global
           I64[Sp - 8] = block_ccD5q_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD5l_info" {
     block_ccD5l_info:
         const _ccD5l;
         const 0;
         const 133143986206;
         const ScD54_srt+8;
 },
 _ccD5q() //  [R1]
         { []
         }
     {offset
       ccD5q: // global
           I64[Sp] = block_ccD5u_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD5q_info" {
     block_ccD5q_info:
         const _ccD5q;
         const 1;
         const 133143986206;
         const ScD54_srt+8;
 },
 _ccD5u() //  [R1]
         { []
         }
     {offset
       ccD5u: // global
           I64[Sp] = block_ccD5y_info;
           R3 = R1;
           R2 = System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD5u_info" {
     block_ccD5u_info:
         const _ccD5u;
         const 1;
         const 133143986206;
         const ScD54_srt+8;
 },
 _ccD5y() //  [R1]
         { []
         }
     {offset
       ccD5y: // global
           _scD3U::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccD5C_info;
           R3 = _scD3U::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD5y_info" {
     block_ccD5y_info:
         const _ccD5y;
         const 1;
         const 30064771102;
         const ScD54_srt+16;
 },
 _ccD5C() //  [R1, R2]
         { []
         }
     {offset
       ccD5C: // global
           R4 = R2;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInteger_closure;
           Sp = Sp + 8;
           call GHC.Real.$w$s$cround_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD5C_info" {
     block_ccD5C_info:
         const _ccD5C;
         const 0;
         const 21474836510;
         const ScD54_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:32.021055219 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision1_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision1_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision1_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision1_entry() //  []
         { []
         }
     {offset
       ccD6h: // global
           R1 = System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.RUsage.getCpuTimePrecision1_info" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision1_info:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision1_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScD54_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:32.02501031 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision_entry() //  []
         { []
         }
     {offset
       ccD6t: // global
           call System.CPUTime.Posix.RUsage.getCpuTimePrecision1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.RUsage.getCpuTimePrecision_info" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision_info:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScD54_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:32.028708256 UTC

[section ""cstring" . lvl_rcCRt_bytes" {
     lvl_rcCRt_bytes:
         I8[] [103,101,116,114,117,115,97,103,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:32.031037675 UTC

[section ""data" . lvl1_rcCRu_closure" {
     lvl1_rcCRu_closure:
         const lvl1_rcCRu_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rcCRu_entry() //  [R1]
         { []
         }
     {offset
       ccD6H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccD6I; else goto ccD6J;
       ccD6I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccD6J: // global
           (_ccD6E::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccD6E::I64 == 0) goto ccD6G; else goto ccD6F;
       ccD6G: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccD6F: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccD6E::I64;
           R2 = lvl_rcCRt_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_rcCRu_info" {
     lvl1_rcCRu_info:
         const lvl1_rcCRu_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:32.035032781 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime2_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime2_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime2_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCPUTime2_entry() //  [R2]
         { []
         }
     {offset
       ccD6Y: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_rcCRu_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.RUsage.getCPUTime2_info" {
     System.CPUTime.Posix.RUsage.getCPUTime2_info:
         const System.CPUTime.Posix.RUsage.getCPUTime2_entry;
         const 0;
         const 12884901902;
         const 8589934596;
         const ScD54_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:32.038269841 UTC

[section ""data" . sat_scD42_closure" {
     sat_scD42_closure:
         const GHC.Types.I#_con_info;
         const 1000000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:32.03999898 UTC

[section ""data" . sat_scD43_closure" {
     sat_scD43_closure:
         const :_con_info;
         const sat_scD42_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:32.042341212 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime3_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime3_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCPUTime3_entry() //  [R1]
         { []
         }
     {offset
       ccD7d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccD7e; else goto ccD7f;
       ccD7e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccD7f: // global
           (_ccD7a::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccD7a::I64 == 0) goto ccD7c; else goto ccD7b;
       ccD7c: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccD7b: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccD7a::I64;
           R3 = sat_scD43_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.RUsage.getCPUTime3_info" {
     System.CPUTime.Posix.RUsage.getCPUTime3_info:
         const System.CPUTime.Posix.RUsage.getCPUTime3_entry;
         const 0;
         const 4294967317;
         const ScD54_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:32.050370637 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime1_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime1_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime1_info;
         const 0;
 },
 sat_scD4G_entry() //  [R1]
         { []
         }
     {offset
       ccD7X: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccD8t; else goto ccD8u;
       ccD8t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccD8u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccD7V_info;
           R2 = I64[R1 + 40];
           I64[Sp - 40] = I64[R1 + 16];
           I64[Sp - 32] = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scD4G_info" {
     sat_scD4G_info:
         const sat_scD4G_entry;
         const 17179869184;
         const 13198434500623;
         const ScD54_srt+8;
 },
 _ccD7V() //  [R1]
         { []
         }
     {offset
       ccD7V: // global
           I64[Sp] = block_ccD80_info;
           R2 = I64[Sp + 24];
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD7V_info" {
     block_ccD7V_info:
         const _ccD7V;
         const 451;
         const 13198434500638;
         const ScD54_srt+8;
 },
 _ccD80() //  [R1]
         { []
         }
     {offset
       ccD80: // global
           I64[Sp] = block_ccD84_info;
           R3 = System.CPUTime.Posix.RUsage.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD80_info" {
     block_ccD80_info:
         const _ccD80;
         const 195;
         const 13198434500638;
         const ScD54_srt+8;
 },
 _ccD84() //  [R1]
         { []
         }
     {offset
       ccD84: // global
           I64[Sp] = block_ccD88_info;
           R2 = I64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD84_info" {
     block_ccD84_info:
         const _ccD84;
         const 195;
         const 13198434500638;
         const ScD54_srt+8;
 },
 _ccD88() //  [R1]
         { []
         }
     {offset
       ccD88: // global
           I64[Sp] = block_ccD8c_info;
           R2 = I64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD88_info" {
     block_ccD88_info:
         const _ccD88;
         const 67;
         const 13198434500638;
         const ScD54_srt+8;
 },
 _ccD8c() //  [R1]
         { []
         }
     {offset
       ccD8c: // global
           I64[Sp] = block_ccD8g_info;
           R3 = System.CPUTime.Posix.RUsage.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD8c_info" {
     block_ccD8c_info:
         const _ccD8c;
         const 3;
         const 13198434500638;
         const ScD54_srt+8;
 },
 _ccD8g() //  [R1]
         { []
         }
     {offset
       ccD8g: // global
           _scD4z::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccD8k_info;
           R3 = _scD4z::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD8g_info" {
     block_ccD8g_info:
         const _ccD8g;
         const 3;
         const 13198434500638;
         const ScD54_srt+8;
 },
 _ccD8k() //  [R1]
         { []
         }
     {offset
       ccD8k: // global
           _scD4C::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccD8o_info;
           R3 = _scD4C::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD8k_info" {
     block_ccD8k_info:
         const _ccD8k;
         const 2;
         const 13198434500638;
         const ScD54_srt+8;
 },
 _ccD8o() //  [R1]
         { []
         }
     {offset
       ccD8o: // global
           _scD4E::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccD8s_info;
           R3 = _scD4E::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD8o_info" {
     block_ccD8o_info:
         const _ccD8o;
         const 1;
         const 13198434500638;
         const ScD54_srt+8;
 },
 _ccD8s() //  [R1]
         { []
         }
     {offset
       ccD8s: // global
           R3 = System.CPUTime.Posix.RUsage.getCPUTime3_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccD8s_info" {
     block_ccD8s_info:
         const _ccD8s;
         const 0;
         const 8800387989534;
         const ScD54_srt+8;
 },
 System.CPUTime.Posix.RUsage.getCPUTime1_entry() //  []
         { []
         }
     {offset
       ccD8H: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccD8I; else goto ccD8J;
       ccD8I: // global
           R1 = System.CPUTime.Posix.RUsage.getCPUTime1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccD8J: // global
           I64[Sp - 8] = block_ccD7t_info;
           R1 = 272;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.RUsage.getCPUTime1_info" {
     System.CPUTime.Posix.RUsage.getCPUTime1_info:
         const System.CPUTime.Posix.RUsage.getCPUTime1_entry;
         const 0;
         const 65974992633870;
         const 4294967299;
         const ScD54_srt+8;
 },
 _ccD7t() //  [R1]
         { []
         }
     {offset
       ccD7t: // global
           _scD4b::I64 = R1 + 16;
           (_scD4f::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint]  result hints:  [‘signed’] ghczuwrapperZC0ZCbaseZCSystemziCPUTimeziPosixziRUsageZCgetrusage(0, _scD4b::I64);
           _scD4g::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scD4f::I64));
           if (_scD4g::I64 == (-1)) goto ccD8S; else goto ucD8X;
       ccD8S: // global
           (_scD4K::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scD4K::I64;
           Sp = Sp + 8;
           call System.CPUTime.Posix.RUsage.getCPUTime2_entry(R2) args: 8, res: 0, upd: 8;
       ucD8X: // global
           I64[Sp - 16] = _scD4b::I64;
           I64[Sp - 8] = _scD4g::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _ccD7F() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccD7t_info" {
     block_ccD7t_info:
         const _ccD7t;
         const 0;
         const 48382806589470;
         const ScD54_srt+8;
 },
 _ccD7F() //  []
         { []
         }
     {offset
       ccD7F: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccD8P; else goto ccD8O;
       ccD8P: // global
           HpAlloc = 48;
           I64[Sp - 8] = block_ccD7E_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccD8O: // global
           _scD4b::I64 = I64[Sp];
           _scD4j::I64 = I64[_scD4b::I64];
           _scD4n::I64 = I64[_scD4b::I64 + 8];
           _scD4o::I64 = _scD4b::I64 + 16;
           _scD4r::I64 = I64[_scD4o::I64];
           _scD4v::I64 = I64[_scD4o::I64 + 8];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 40] = sat_scD4G_info;
           I64[Hp - 24] = _scD4j::I64;
           I64[Hp - 16] = _scD4n::I64;
           I64[Hp - 8] = _scD4r::I64;
           I64[Hp] = _scD4v::I64;
           R1 = Hp - 40;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccD7E() //  [R1]
         { []
         }
     {offset
       ccD7E: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccD7F() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccD7E_info" {
     block_ccD7E_info:
         const _ccD7E;
         const 195;
         const 13198434500638;
         const ScD54_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:32.074672646 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCPUTime_entry() //  []
         { []
         }
     {offset
       ccDa4: // global
           call System.CPUTime.Posix.RUsage.getCPUTime1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.RUsage.getCPUTime_info" {
     System.CPUTime.Posix.RUsage.getCPUTime_info:
         const System.CPUTime.Posix.RUsage.getCPUTime_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScD54_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:32.077937126 UTC

[section ""relreadonly" . ScD54_srt" {
     ScD54_srt:
         const sat_scD3M_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Real.$fIntegralInteger_closure;
         const GHC.Real.$w$sreduce_closure;
         const GHC.Real.$w$s$cround_closure;
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure;
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure;
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_rcCRu_closure;
         const sat_scD43_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const System.CPUTime.Posix.RUsage.getCPUTime3_closure;
         const System.CPUTime.Posix.RUsage.getCPUTime1_closure;
         const System.CPUTime.Posix.RUsage.getCPUTime2_closure;
 }]

