
==================== Raw Cmm ====================
2018-03-16 16:07:31.329876008 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:31.331082996 UTC

[section ""cstring" . System.CPUTime.Posix.Times.$trModule4_bytes" {
     System.CPUTime.Posix.Times.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.332902908 UTC

[section ""data" . System.CPUTime.Posix.Times.$trModule3_closure" {
     System.CPUTime.Posix.Times.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.Times.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.334623039 UTC

[section ""cstring" . System.CPUTime.Posix.Times.$trModule2_bytes" {
     System.CPUTime.Posix.Times.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,80,85,84,105,109,101,46,80,111,115,105,120,46,84,105,109,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.336309669 UTC

[section ""data" . System.CPUTime.Posix.Times.$trModule1_closure" {
     System.CPUTime.Posix.Times.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.Times.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.338167108 UTC

[section ""data" . System.CPUTime.Posix.Times.$trModule_closure" {
     System.CPUTime.Posix.Times.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.CPUTime.Posix.Times.$trModule3_closure+1;
         const System.CPUTime.Posix.Times.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.340748556 UTC

[section ""data" . System.CPUTime.Posix.Times.clockTicks_closure" {
     System.CPUTime.Posix.Times.clockTicks_closure:
         const System.CPUTime.Posix.Times.clockTicks_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.Times.clockTicks_entry() //  [R1]
         { []
         }
     {offset
       ccCAH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccCAI; else goto ccCAJ;
       ccCAI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCAJ: // global
           (_ccCAD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCAD::I64 == 0) goto ccCAF; else goto ccCAE;
       ccCAF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCAE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCAD::I64;
           (_scCw3::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] clk_tck();
           R2 = _scCw3::I64;
           Sp = Sp - 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.Times.clockTicks_info" {
     System.CPUTime.Posix.Times.clockTicks_info:
         const System.CPUTime.Posix.Times.clockTicks_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.344859875 UTC

[section ""data" . sat_scCw5_closure" {
     sat_scCw5_closure:
         const GHC.Types.I#_con_info;
         const 465;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.346630131 UTC

[section ""data" . sat_scCw6_closure" {
     sat_scCw6_closure:
         const :_con_info;
         const sat_scCw5_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.348480722 UTC

[section ""data" . sat_scCw4_closure" {
     sat_scCw4_closure:
         const GHC.Types.I#_con_info;
         const 1420103680;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.35030742 UTC

[section ""data" . sat_scCw7_closure" {
     sat_scCw7_closure:
         const :_con_info;
         const sat_scCw4_closure+1;
         const sat_scCw6_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.352841416 UTC

[section ""data" . System.CPUTime.Posix.Times.getCPUTime2_closure" {
     System.CPUTime.Posix.Times.getCPUTime2_closure:
         const System.CPUTime.Posix.Times.getCPUTime2_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.Times.getCPUTime2_entry() //  [R1]
         { []
         }
     {offset
       ccCB1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccCB2; else goto ccCB3;
       ccCB2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCB3: // global
           (_ccCAY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCAY::I64 == 0) goto ccCB0; else goto ccCAZ;
       ccCB0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCAZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCAY::I64;
           R3 = sat_scCw7_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.Times.getCPUTime2_info" {
     System.CPUTime.Posix.Times.getCPUTime2_info:
         const System.CPUTime.Posix.Times.getCPUTime2_entry;
         const 0;
         const 4294967317;
         const ScCwV_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.357984766 UTC

[section ""data" . System.CPUTime.Posix.Times.getCpuTimePrecision2_closure" {
     System.CPUTime.Posix.Times.getCpuTimePrecision2_closure:
         const System.CPUTime.Posix.Times.getCpuTimePrecision2_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.Times.getCpuTimePrecision2_entry() //  [R1]
         { []
         }
     {offset
       ccCBj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccCBk; else goto ccCBl;
       ccCBk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCBl: // global
           (_ccCBe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCBe::I64 == 0) goto ccCBg; else goto ccCBf;
       ccCBg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCBf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCBe::I64;
           I64[Sp - 24] = block_ccCBh_info;
           R3 = System.CPUTime.Posix.Times.clockTicks_closure;
           R2 = System.CPUTime.Posix.Times.getCPUTime2_closure;
           Sp = Sp - 24;
           call GHC.Real.$w$s$cfromRational_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.Times.getCpuTimePrecision2_info" {
     System.CPUTime.Posix.Times.getCpuTimePrecision2_info:
         const System.CPUTime.Posix.Times.getCpuTimePrecision2_entry;
         const 0;
         const 133143986197;
         const ScCwV_srt+8;
 },
 _ccCBh() //  [R1, R2]
         { []
         }
     {offset
       ccCBh: // global
           R4 = R2;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInteger_closure;
           Sp = Sp + 8;
           call GHC.Real.$w$s$cround_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccCBh_info" {
     block_ccCBh_info:
         const _ccCBh;
         const 0;
         const 21474836510;
         const ScCwV_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.366664147 UTC

[section ""data" . System.CPUTime.Posix.Times.getCpuTimePrecision1_closure" {
     System.CPUTime.Posix.Times.getCpuTimePrecision1_closure:
         const System.CPUTime.Posix.Times.getCpuTimePrecision1_info;
         const 0;
 },
 System.CPUTime.Posix.Times.getCpuTimePrecision1_entry() //  []
         { []
         }
     {offset
       ccCBB: // global
           R1 = System.CPUTime.Posix.Times.getCpuTimePrecision2_closure;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.Times.getCpuTimePrecision1_info" {
     System.CPUTime.Posix.Times.getCpuTimePrecision1_info:
         const System.CPUTime.Posix.Times.getCpuTimePrecision1_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScCwV_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.37082296 UTC

[section ""data" . System.CPUTime.Posix.Times.getCpuTimePrecision_closure" {
     System.CPUTime.Posix.Times.getCpuTimePrecision_closure:
         const System.CPUTime.Posix.Times.getCpuTimePrecision_info;
         const 0;
 },
 System.CPUTime.Posix.Times.getCpuTimePrecision_entry() //  []
         { []
         }
     {offset
       ccCBN: // global
           call System.CPUTime.Posix.Times.getCpuTimePrecision1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.Times.getCpuTimePrecision_info" {
     System.CPUTime.Posix.Times.getCpuTimePrecision_info:
         const System.CPUTime.Posix.Times.getCpuTimePrecision_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScCwV_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.375369908 UTC

[section ""data" . System.CPUTime.Posix.Times.getCPUTime3_closure" {
     System.CPUTime.Posix.Times.getCPUTime3_closure:
         const System.CPUTime.Posix.Times.getCPUTime3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.Times.getCPUTime3_entry() //  [R1]
         { []
         }
     {offset
       ccCC0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccCC1; else goto ccCC2;
       ccCC1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCC2: // global
           (_ccCBX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCBX::I64 == 0) goto ccCBZ; else goto ccCBY;
       ccCBZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCBY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCBX::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.Times.getCPUTime3_info" {
     System.CPUTime.Posix.Times.getCPUTime3_info:
         const System.CPUTime.Posix.Times.getCPUTime3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.383212196 UTC

[section ""data" . System.CPUTime.Posix.Times.getCPUTime1_closure" {
     System.CPUTime.Posix.Times.getCPUTime1_closure:
         const System.CPUTime.Posix.Times.getCPUTime1_info;
         const 0;
 },
 sat_scCwB_entry() //  [R1]
         { []
         }
     {offset
       ccCCy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccCCz; else goto ccCCA;
       ccCCz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCCA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_ccCCt_info;
           R3 = System.CPUTime.Posix.Times.getCPUTime3_closure;
           R2 = System.CPUTime.Posix.Times.clockTicks_closure;
           I64[Sp - 32] = I64[R1 + 16];
           I64[Sp - 24] = I64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scCwB_info" {
     sat_scCwB_info:
         const sat_scCwB_entry;
         const 8589934592;
         const 2143188680724;
         const ScCwV_srt+32;
 },
 _ccCCt() //  [R1]
         { []
         }
     {offset
       ccCCt: // global
           if (R1 == 1) goto ccCCx; else goto ccCCw;
       ccCCx: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       ccCCw: // global
           I64[Sp] = block_ccCCD_info;
           R2 = I64[Sp + 16];
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccCCt_info" {
     block_ccCCt_info:
         const _ccCCt;
         const 194;
         const 1043677052958;
         const ScCwV_srt+32;
 },
 _ccCCD() //  [R1]
         { []
         }
     {offset
       ccCCD: // global
           _scCwq::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_ccCCH_info;
           R2 = _scCwq::I64;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccCCD_info" {
     block_ccCCD_info:
         const _ccCCD;
         const 194;
         const 493921239070;
         const ScCwV_srt+32;
 },
 _ccCCH() //  [R1]
         { []
         }
     {offset
       ccCCH: // global
           _scCwy::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccCCL_info;
           R3 = _scCwy::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccCCH_info" {
     block_ccCCH_info:
         const _ccCCH;
         const 1;
         const 493921239070;
         const ScCwV_srt+32;
 },
 _ccCCL() //  [R1]
         { []
         }
     {offset
       ccCCL: // global
           I64[Sp] = block_ccCCP_info;
           R3 = System.CPUTime.Posix.Times.getCPUTime2_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccCCL_info" {
     block_ccCCL_info:
         const _ccCCL;
         const 0;
         const 425201762334;
         const ScCwV_srt+32;
 },
 _ccCCP() //  [R1]
         { []
         }
     {offset
       ccCCP: // global
           R3 = System.CPUTime.Posix.Times.clockTicks_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.divInteger_entry(R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccCCP_info" {
     block_ccCCP_info:
         const _ccCCP;
         const 0;
         const 279172874270;
         const ScCwV_srt+32;
 },
 System.CPUTime.Posix.Times.getCPUTime1_entry() //  []
         { []
         }
     {offset
       ccCD1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccCD2; else goto ccCD3;
       ccCD2: // global
           R1 = System.CPUTime.Posix.Times.getCPUTime1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccCD3: // global
           I64[Sp - 8] = block_ccCCe_info;
           R1 = 32;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.Times.getCPUTime1_info" {
     System.CPUTime.Posix.Times.getCPUTime1_info:
         const System.CPUTime.Posix.Times.getCPUTime1_entry;
         const 0;
         const 4342211936270;
         const 4294967299;
         const ScCwV_srt+32;
 },
 _ccCCe() //  [R1]
         { []
         }
     {offset
       ccCCe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccCD6; else goto ccCD5;
       ccCD6: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccCD5: // global
           _scCwj::I64 = R1 + 16;
           (_scCwn::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [‘signed’] times(_scCwj::I64);
           _scCwq::I64 = I64[_scCwj::I64];
           _scCwu::I64 = I64[_scCwj::I64 + 8];
           call MO_Touch(R1);
           I64[Hp - 24] = sat_scCwB_info;
           I64[Hp - 8] = _scCwq::I64;
           I64[Hp] = _scCwu::I64;
           R1 = Hp - 24;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccCCe_info" {
     block_ccCCe_info:
         const _ccCCe;
         const 0;
         const 2143188680734;
         const ScCwV_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.401540072 UTC

[section ""data" . System.CPUTime.Posix.Times.getCPUTime_closure" {
     System.CPUTime.Posix.Times.getCPUTime_closure:
         const System.CPUTime.Posix.Times.getCPUTime_info;
         const 0;
 },
 System.CPUTime.Posix.Times.getCPUTime_entry() //  []
         { []
         }
     {offset
       ccCDF: // global
           call System.CPUTime.Posix.Times.getCPUTime1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.Times.getCPUTime_info" {
     System.CPUTime.Posix.Times.getCPUTime_info:
         const System.CPUTime.Posix.Times.getCPUTime_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScCwV_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.405895405 UTC

[section ""relreadonly" . ScCwV_srt" {
     ScCwV_srt:
         const sat_scCw7_closure;
         const GHC.Real.$fIntegralInteger_closure;
         const GHC.Real.$w$s$cfromRational_closure;
         const GHC.Real.$w$s$cround_closure;
         const System.CPUTime.Posix.Times.clockTicks_closure;
         const System.CPUTime.Posix.Times.getCPUTime2_closure;
         const System.CPUTime.Posix.Times.getCpuTimePrecision2_closure;
         const System.CPUTime.Posix.Times.getCpuTimePrecision1_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Integer.Type.divInteger_closure;
         const GHC.Real.divZeroError_closure;
         const System.CPUTime.Posix.Times.getCPUTime3_closure;
         const System.CPUTime.Posix.Times.getCPUTime1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.495011459 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:31.496156145 UTC

[section ""cstring" . System.CPUTime.Posix.Times.$trModule4_bytes" {
     System.CPUTime.Posix.Times.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.498114001 UTC

[section ""data" . System.CPUTime.Posix.Times.$trModule3_closure" {
     System.CPUTime.Posix.Times.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.Times.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.499993518 UTC

[section ""cstring" . System.CPUTime.Posix.Times.$trModule2_bytes" {
     System.CPUTime.Posix.Times.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,80,85,84,105,109,101,46,80,111,115,105,120,46,84,105,109,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.501811607 UTC

[section ""data" . System.CPUTime.Posix.Times.$trModule1_closure" {
     System.CPUTime.Posix.Times.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.Times.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.503706594 UTC

[section ""data" . System.CPUTime.Posix.Times.$trModule_closure" {
     System.CPUTime.Posix.Times.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.CPUTime.Posix.Times.$trModule3_closure+1;
         const System.CPUTime.Posix.Times.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.50667653 UTC

[section ""data" . System.CPUTime.Posix.Times.clockTicks_closure" {
     System.CPUTime.Posix.Times.clockTicks_closure:
         const System.CPUTime.Posix.Times.clockTicks_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.Times.clockTicks_entry() //  [R1]
         { []
         }
     {offset
       ccCEB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccCEC; else goto ccCED;
       ccCEC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCED: // global
           (_ccCEx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCEx::I64 == 0) goto ccCEz; else goto ccCEy;
       ccCEz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCEy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCEx::I64;
           (_scCDQ::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] clk_tck();
           R2 = _scCDQ::I64;
           Sp = Sp - 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.Times.clockTicks_info" {
     System.CPUTime.Posix.Times.clockTicks_info:
         const System.CPUTime.Posix.Times.clockTicks_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.51097118 UTC

[section ""data" . sat_scCDS_closure" {
     sat_scCDS_closure:
         const GHC.Types.I#_con_info;
         const 465;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.512892991 UTC

[section ""data" . sat_scCDT_closure" {
     sat_scCDT_closure:
         const :_con_info;
         const sat_scCDS_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.514989455 UTC

[section ""data" . sat_scCDR_closure" {
     sat_scCDR_closure:
         const GHC.Types.I#_con_info;
         const 1420103680;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.516889018 UTC

[section ""data" . sat_scCDU_closure" {
     sat_scCDU_closure:
         const :_con_info;
         const sat_scCDR_closure+1;
         const sat_scCDT_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.520702969 UTC

[section ""data" . System.CPUTime.Posix.Times.getCPUTime2_closure" {
     System.CPUTime.Posix.Times.getCPUTime2_closure:
         const System.CPUTime.Posix.Times.getCPUTime2_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.Times.getCPUTime2_entry() //  [R1]
         { []
         }
     {offset
       ccCEW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccCEX; else goto ccCEY;
       ccCEX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCEY: // global
           (_ccCET::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCET::I64 == 0) goto ccCEV; else goto ccCEU;
       ccCEV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCEU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCET::I64;
           R3 = sat_scCDU_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.Times.getCPUTime2_info" {
     System.CPUTime.Posix.Times.getCPUTime2_info:
         const System.CPUTime.Posix.Times.getCPUTime2_entry;
         const 0;
         const 4294967317;
         const ScCEZ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.525841218 UTC

[section ""data" . System.CPUTime.Posix.Times.getCpuTimePrecision2_closure" {
     System.CPUTime.Posix.Times.getCpuTimePrecision2_closure:
         const System.CPUTime.Posix.Times.getCpuTimePrecision2_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.Times.getCpuTimePrecision2_entry() //  [R1]
         { []
         }
     {offset
       ccCFh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccCFi; else goto ccCFj;
       ccCFi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCFj: // global
           (_ccCFc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCFc::I64 == 0) goto ccCFe; else goto ccCFd;
       ccCFe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCFd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCFc::I64;
           I64[Sp - 24] = block_ccCFf_info;
           R3 = System.CPUTime.Posix.Times.clockTicks_closure;
           R2 = System.CPUTime.Posix.Times.getCPUTime2_closure;
           Sp = Sp - 24;
           call GHC.Real.$w$s$cfromRational_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.Times.getCpuTimePrecision2_info" {
     System.CPUTime.Posix.Times.getCpuTimePrecision2_info:
         const System.CPUTime.Posix.Times.getCpuTimePrecision2_entry;
         const 0;
         const 133143986197;
         const ScCEZ_srt+8;
 },
 _ccCFf() //  [R1, R2]
         { []
         }
     {offset
       ccCFf: // global
           R4 = R2;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInteger_closure;
           Sp = Sp + 8;
           call GHC.Real.$w$s$cround_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccCFf_info" {
     block_ccCFf_info:
         const _ccCFf;
         const 0;
         const 21474836510;
         const ScCEZ_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.532919207 UTC

[section ""data" . System.CPUTime.Posix.Times.getCpuTimePrecision1_closure" {
     System.CPUTime.Posix.Times.getCpuTimePrecision1_closure:
         const System.CPUTime.Posix.Times.getCpuTimePrecision1_info;
         const 0;
 },
 System.CPUTime.Posix.Times.getCpuTimePrecision1_entry() //  []
         { []
         }
     {offset
       ccCFB: // global
           R1 = System.CPUTime.Posix.Times.getCpuTimePrecision2_closure;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.Times.getCpuTimePrecision1_info" {
     System.CPUTime.Posix.Times.getCpuTimePrecision1_info:
         const System.CPUTime.Posix.Times.getCpuTimePrecision1_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScCEZ_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.536708196 UTC

[section ""data" . System.CPUTime.Posix.Times.getCpuTimePrecision_closure" {
     System.CPUTime.Posix.Times.getCpuTimePrecision_closure:
         const System.CPUTime.Posix.Times.getCpuTimePrecision_info;
         const 0;
 },
 System.CPUTime.Posix.Times.getCpuTimePrecision_entry() //  []
         { []
         }
     {offset
       ccCFN: // global
           call System.CPUTime.Posix.Times.getCpuTimePrecision1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.Times.getCpuTimePrecision_info" {
     System.CPUTime.Posix.Times.getCpuTimePrecision_info:
         const System.CPUTime.Posix.Times.getCpuTimePrecision_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScCEZ_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.540694317 UTC

[section ""data" . System.CPUTime.Posix.Times.getCPUTime3_closure" {
     System.CPUTime.Posix.Times.getCPUTime3_closure:
         const System.CPUTime.Posix.Times.getCPUTime3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.Times.getCPUTime3_entry() //  [R1]
         { []
         }
     {offset
       ccCG0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccCG1; else goto ccCG2;
       ccCG1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCG2: // global
           (_ccCFX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCFX::I64 == 0) goto ccCFZ; else goto ccCFY;
       ccCFZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCFY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCFX::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.Times.getCPUTime3_info" {
     System.CPUTime.Posix.Times.getCPUTime3_info:
         const System.CPUTime.Posix.Times.getCPUTime3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.547453809 UTC

[section ""data" . System.CPUTime.Posix.Times.getCPUTime1_closure" {
     System.CPUTime.Posix.Times.getCPUTime1_closure:
         const System.CPUTime.Posix.Times.getCPUTime1_info;
         const 0;
 },
 sat_scCEo_entry() //  [R1]
         { []
         }
     {offset
       ccCGB: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccCGC; else goto ccCGD;
       ccCGC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCGD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_ccCGw_info;
           R3 = System.CPUTime.Posix.Times.getCPUTime3_closure;
           R2 = System.CPUTime.Posix.Times.clockTicks_closure;
           I64[Sp - 32] = I64[R1 + 16];
           I64[Sp - 24] = I64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scCEo_info" {
     sat_scCEo_info:
         const sat_scCEo_entry;
         const 8589934592;
         const 2143188680724;
         const ScCEZ_srt+32;
 },
 _ccCGw() //  [R1]
         { []
         }
     {offset
       ccCGw: // global
           if (R1 == 1) goto ccCGA; else goto ccCGz;
       ccCGA: // global
           R1 = GHC.Real.divZeroError_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       ccCGz: // global
           I64[Sp] = block_ccCGG_info;
           R2 = I64[Sp + 16];
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccCGw_info" {
     block_ccCGw_info:
         const _ccCGw;
         const 194;
         const 1043677052958;
         const ScCEZ_srt+32;
 },
 _ccCGG() //  [R1]
         { []
         }
     {offset
       ccCGG: // global
           _scCEd::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_ccCGK_info;
           R2 = _scCEd::I64;
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccCGG_info" {
     block_ccCGG_info:
         const _ccCGG;
         const 194;
         const 493921239070;
         const ScCEZ_srt+32;
 },
 _ccCGK() //  [R1]
         { []
         }
     {offset
       ccCGK: // global
           _scCEl::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccCGO_info;
           R3 = _scCEl::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccCGK_info" {
     block_ccCGK_info:
         const _ccCGK;
         const 1;
         const 493921239070;
         const ScCEZ_srt+32;
 },
 _ccCGO() //  [R1]
         { []
         }
     {offset
       ccCGO: // global
           I64[Sp] = block_ccCGS_info;
           R3 = System.CPUTime.Posix.Times.getCPUTime2_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccCGO_info" {
     block_ccCGO_info:
         const _ccCGO;
         const 0;
         const 425201762334;
         const ScCEZ_srt+32;
 },
 _ccCGS() //  [R1]
         { []
         }
     {offset
       ccCGS: // global
           R3 = System.CPUTime.Posix.Times.clockTicks_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.divInteger_entry(R3,
                                                  R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccCGS_info" {
     block_ccCGS_info:
         const _ccCGS;
         const 0;
         const 279172874270;
         const ScCEZ_srt+32;
 },
 System.CPUTime.Posix.Times.getCPUTime1_entry() //  []
         { []
         }
     {offset
       ccCH4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccCH5; else goto ccCH6;
       ccCH5: // global
           R1 = System.CPUTime.Posix.Times.getCPUTime1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccCH6: // global
           I64[Sp - 8] = block_ccCGh_info;
           R1 = 32;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.Times.getCPUTime1_info" {
     System.CPUTime.Posix.Times.getCPUTime1_info:
         const System.CPUTime.Posix.Times.getCPUTime1_entry;
         const 0;
         const 4342211936270;
         const 4294967299;
         const ScCEZ_srt+32;
 },
 _ccCGh() //  [R1]
         { []
         }
     {offset
       ccCGh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccCH9; else goto ccCH8;
       ccCH9: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccCH8: // global
           _scCE6::I64 = R1 + 16;
           (_scCEa::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [‘signed’] times(_scCE6::I64);
           _scCEd::I64 = I64[_scCE6::I64];
           _scCEh::I64 = I64[_scCE6::I64 + 8];
           call MO_Touch(R1);
           I64[Hp - 24] = sat_scCEo_info;
           I64[Hp - 8] = _scCEd::I64;
           I64[Hp] = _scCEh::I64;
           R1 = Hp - 24;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccCGh_info" {
     block_ccCGh_info:
         const _ccCGh;
         const 0;
         const 2143188680734;
         const ScCEZ_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.567798917 UTC

[section ""data" . System.CPUTime.Posix.Times.getCPUTime_closure" {
     System.CPUTime.Posix.Times.getCPUTime_closure:
         const System.CPUTime.Posix.Times.getCPUTime_info;
         const 0;
 },
 System.CPUTime.Posix.Times.getCPUTime_entry() //  []
         { []
         }
     {offset
       ccCHQ: // global
           call System.CPUTime.Posix.Times.getCPUTime1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.Times.getCPUTime_info" {
     System.CPUTime.Posix.Times.getCPUTime_info:
         const System.CPUTime.Posix.Times.getCPUTime_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScCEZ_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:31.572805734 UTC

[section ""relreadonly" . ScCEZ_srt" {
     ScCEZ_srt:
         const sat_scCDU_closure;
         const GHC.Real.$fIntegralInteger_closure;
         const GHC.Real.$w$s$cfromRational_closure;
         const GHC.Real.$w$s$cround_closure;
         const System.CPUTime.Posix.Times.clockTicks_closure;
         const System.CPUTime.Posix.Times.getCPUTime2_closure;
         const System.CPUTime.Posix.Times.getCpuTimePrecision2_closure;
         const System.CPUTime.Posix.Times.getCpuTimePrecision1_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Integer.Type.divInteger_closure;
         const GHC.Real.divZeroError_closure;
         const System.CPUTime.Posix.Times.getCPUTime3_closure;
         const System.CPUTime.Posix.Times.getCPUTime1_closure;
 }]

