
==================== Raw Cmm ====================
2018-03-16 16:07:25.967998253 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:25.969162371 UTC

[section ""data" . sat_scxhJ_closure" {
     sat_scxhJ_closure:
         const GHC.Types.I#_con_info;
         const 465;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.971105901 UTC

[section ""data" . sat_scxhK_closure" {
     sat_scxhK_closure:
         const :_con_info;
         const sat_scxhJ_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.972963442 UTC

[section ""data" . sat_scxhI_closure" {
     sat_scxhI_closure:
         const GHC.Types.I#_con_info;
         const 1420103680;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.974857259 UTC

[section ""data" . sat_scxhL_closure" {
     sat_scxhL_closure:
         const :_con_info;
         const sat_scxhI_closure+1;
         const sat_scxhK_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.980339187 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime4_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime4_entry() //  [R1]
         { []
         }
     {offset
       ccxpJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxpK; else goto ccxpL;
       ccxpK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxpL: // global
           (_ccxpG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxpG::I64 == 0) goto ccxpI; else goto ccxpH;
       ccxpI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxpH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxpG::I64;
           R3 = sat_scxhL_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.ClockGetTime.getCPUTime4_info" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime4_info:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime4_entry;
         const 0;
         const 4294967317;
         const Scxj3_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.984761246 UTC

[section ""data" . sat_scxhM_closure" {
     sat_scxhM_closure:
         const GHC.Types.I#_con_info;
         const 1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.986874583 UTC

[section ""data" . sat_scxhN_closure" {
     sat_scxhN_closure:
         const :_con_info;
         const sat_scxhM_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.990121507 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime3_entry() //  [R1]
         { []
         }
     {offset
       ccxq1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxq2; else goto ccxq3;
       ccxq2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxq3: // global
           (_ccxpY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxpY::I64 == 0) goto ccxq0; else goto ccxpZ;
       ccxq0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxpZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxpY::I64;
           R3 = sat_scxhN_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.ClockGetTime.getCPUTime3_info" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime3_info:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime3_entry;
         const 0;
         const 4294967317;
         const Scxj3_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.994539939 UTC

[section ""cstring" . System.CPUTime.Posix.ClockGetTime.$trModule4_bytes" {
     System.CPUTime.Posix.ClockGetTime.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.996505178 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$trModule3_closure" {
     System.CPUTime.Posix.ClockGetTime.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:25.998558688 UTC

[section ""cstring" . System.CPUTime.Posix.ClockGetTime.$trModule2_bytes" {
     System.CPUTime.Posix.ClockGetTime.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,80,85,84,105,109,101,46,80,111,115,105,120,46,67,108,111,99,107,71,101,116,84,105,109,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.000390936 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$trModule1_closure" {
     System.CPUTime.Posix.ClockGetTime.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.002409267 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$trModule_closure" {
     System.CPUTime.Posix.ClockGetTime.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule3_closure+1;
         const System.CPUTime.Posix.ClockGetTime.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.004452695 UTC

[section ""cstring" . System.CPUTime.Posix.ClockGetTime.$tcTimespec2_bytes" {
     System.CPUTime.Posix.ClockGetTime.$tcTimespec2_bytes:
         I8[] [84,105,109,101,115,112,101,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.006764208 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$tcTimespec1_closure" {
     System.CPUTime.Posix.ClockGetTime.$tcTimespec1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.ClockGetTime.$tcTimespec2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.008781411 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$tcTimespec_closure" {
     System.CPUTime.Posix.ClockGetTime.$tcTimespec_closure:
         const GHC.Types.TyCon_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule_closure+1;
         const System.CPUTime.Posix.ClockGetTime.$tcTimespec1_closure+1;
         const GHC.Types.krep$*_closure;
         const 13346594173291483587;
         const 3590994262607885225;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.010993499 UTC

[section ""cstring" . lvl_rcxhD_bytes" {
     lvl_rcxhD_bytes:
         I8[] [99,108,111,99,107,95,103,101,116,114,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.014335672 UTC

[section ""data" . lvl1_rcxhE_closure" {
     lvl1_rcxhE_closure:
         const lvl1_rcxhE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rcxhE_entry() //  [R1]
         { []
         }
     {offset
       ccxqq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxqr; else goto ccxqs;
       ccxqr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxqs: // global
           (_ccxqn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxqn::I64 == 0) goto ccxqp; else goto ccxqo;
       ccxqp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxqo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxqn::I64;
           R2 = lvl_rcxhD_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_rcxhE_info" {
     lvl1_rcxhE_info:
         const lvl1_rcxhE_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.018763339 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_closure" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_closure:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_entry() //  [R2]
         { []
         }
     {offset
       ccxqG: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_rcxhE_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_info" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_info:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_entry;
         const 0;
         const 12884901902;
         const 8589934596;
         const Scxj3_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.024634991 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_info;
         const 0;
 },
 sat_scxig_entry() //  [R1]
         { []
         }
     {offset
       ccxrf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxrr; else goto ccxrs;
       ccxrr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxrs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccxrd_info;
           R2 = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scxig_info" {
     sat_scxig_info:
         const sat_scxig_entry;
         const 8589934592;
         const 64424509460;
         const Scxj3_srt+32;
 },
 _ccxrd() //  [R1]
         { []
         }
     {offset
       ccxrd: // global
           I64[Sp] = block_ccxri_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccxrd_info" {
     block_ccxrd_info:
         const _ccxrd;
         const 65;
         const 64424509470;
         const Scxj3_srt+32;
 },
 _ccxri() //  [R1]
         { []
         }
     {offset
       ccxri: // global
           I64[Sp] = block_ccxrm_info;
           R2 = I64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccxri_info" {
     block_ccxri_info:
         const _ccxri;
         const 65;
         const 47244640286;
         const Scxj3_srt+32;
 },
 _ccxrm() //  [R1]
         { []
         }
     {offset
       ccxrm: // global
           I64[Sp] = block_ccxrq_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccxrm_info" {
     block_ccxrm_info:
         const _ccxrm;
         const 1;
         const 47244640286;
         const Scxj3_srt+32;
 },
 _ccxrq() //  [R1]
         { []
         }
     {offset
       ccxrq: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccxrq_info" {
     block_ccxrq_info:
         const _ccxrq;
         const 1;
         const 4294967326;
         const Scxj3_srt+32;
 },
 System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_entry() //  []
         { []
         }
     {offset
       ccxrA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxrB; else goto ccxrC;
       ccxrB: // global
           R1 = System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccxrC: // global
           I64[Sp - 8] = block_ccxqR_info;
           R1 = 16;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_info" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_info:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_entry;
         const 0;
         const 270582939662;
         const 4294967299;
         const Scxj3_srt+32;
 },
 _ccxqR() //  [R1]
         { []
         }
     {offset
       ccxqR: // global
           _scxhY::I64 = R1 + 16;
           (_scxi2::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint]  result hints:  [‘signed’] ghczuwrapperZC1ZCbaseZCSystemziCPUTimeziPosixziClockGetTimeZCclockzugetres(2, _scxhY::I64);
           _scxi3::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scxi2::I64));
           if (_scxi3::I64 == (-1)) goto ccxrL; else goto ucxrQ;
       ccxrL: // global
           (_scxik::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scxik::I64;
           Sp = Sp + 8;
           call System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_entry(R2) args: 8, res: 0, upd: 8;
       ucxrQ: // global
           I64[Sp - 16] = _scxhY::I64;
           I64[Sp - 8] = _scxi3::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _ccxr3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccxqR_info" {
     block_ccxqR_info:
         const _ccxqR;
         const 0;
         const 201863462942;
         const Scxj3_srt+32;
 },
 _ccxr3() //  []
         { []
         }
     {offset
       ccxr3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccxrI; else goto ccxrH;
       ccxrI: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_ccxr2_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccxrH: // global
           _scxhY::I64 = I64[Sp];
           _scxi6::I64 = I64[_scxhY::I64];
           _scxia::I64 = I64[_scxhY::I64 + 8];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 24] = sat_scxig_info;
           I64[Hp - 8] = _scxi6::I64;
           I64[Hp] = _scxia::I64;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccxr2() //  [R1]
         { []
         }
     {offset
       ccxr2: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccxr3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccxr2_info" {
     block_ccxr2_info:
         const _ccxr2;
         const 195;
         const 64424509470;
         const Scxj3_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.040411945 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_closure" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_closure:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_entry() //  []
         { []
         }
     {offset
       ccxst: // global
           call System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_info" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_info:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Scxj3_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.04370488 UTC

[section ""cstring" . lvl2_rcxhF_bytes" {
     lvl2_rcxhF_bytes:
         I8[] [99,108,111,99,107,95,103,101,116,116,105,109,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.04668377 UTC

[section ""data" . lvl3_rcxhG_closure" {
     lvl3_rcxhG_closure:
         const lvl3_rcxhG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rcxhG_entry() //  [R1]
         { []
         }
     {offset
       ccxsH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxsI; else goto ccxsJ;
       ccxsI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxsJ: // global
           (_ccxsE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxsE::I64 == 0) goto ccxsG; else goto ccxsF;
       ccxsG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxsF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxsE::I64;
           R2 = lvl2_rcxhF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_rcxhG_info" {
     lvl3_rcxhG_info:
         const lvl3_rcxhG_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.051453313 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime2_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime2_entry() //  [R2]
         { []
         }
     {offset
       ccxsX: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl3_rcxhG_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.ClockGetTime.getCPUTime2_info" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime2_info:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime2_entry;
         const 0;
         const 1103806595086;
         const 8589934596;
         const Scxj3_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.057264402 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime1_info;
         const 0;
 },
 sat_scxiO_entry() //  [R1]
         { []
         }
     {offset
       ccxtw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxtI; else goto ccxtJ;
       ccxtI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxtJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccxtu_info;
           R2 = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scxiO_info" {
     sat_scxiO_info:
         const sat_scxiO_entry;
         const 8589934592;
         const 64424509460;
         const Scxj3_srt+32;
 },
 _ccxtu() //  [R1]
         { []
         }
     {offset
       ccxtu: // global
           I64[Sp] = block_ccxtz_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccxtu_info" {
     block_ccxtu_info:
         const _ccxtu;
         const 65;
         const 64424509470;
         const Scxj3_srt+32;
 },
 _ccxtz() //  [R1]
         { []
         }
     {offset
       ccxtz: // global
           I64[Sp] = block_ccxtD_info;
           R2 = I64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccxtz_info" {
     block_ccxtz_info:
         const _ccxtz;
         const 65;
         const 47244640286;
         const Scxj3_srt+32;
 },
 _ccxtD() //  [R1]
         { []
         }
     {offset
       ccxtD: // global
           I64[Sp] = block_ccxtH_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccxtD_info" {
     block_ccxtD_info:
         const _ccxtD;
         const 1;
         const 47244640286;
         const Scxj3_srt+32;
 },
 _ccxtH() //  [R1]
         { []
         }
     {offset
       ccxtH: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccxtH_info" {
     block_ccxtH_info:
         const _ccxtH;
         const 1;
         const 4294967326;
         const Scxj3_srt+32;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime1_entry() //  []
         { []
         }
     {offset
       ccxtR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxtS; else goto ccxtT;
       ccxtS: // global
           R1 = System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccxtT: // global
           I64[Sp - 8] = block_ccxt8_info;
           R1 = 16;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.ClockGetTime.getCPUTime1_info" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime1_info:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime1_entry;
         const 0;
         const 1713691951118;
         const 4294967299;
         const Scxj3_srt+32;
 },
 _ccxt8() //  [R1]
         { []
         }
     {offset
       ccxt8: // global
           _scxiw::I64 = R1 + 16;
           (_scxiA::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint]  result hints:  [‘signed’] ghczuwrapperZC0ZCbaseZCSystemziCPUTimeziPosixziClockGetTimeZCclockzugettime(2, _scxiw::I64);
           _scxiB::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scxiA::I64));
           if (_scxiB::I64 == (-1)) goto ccxu2; else goto ucxu7;
       ccxu2: // global
           (_scxiS::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scxiS::I64;
           Sp = Sp + 8;
           call System.CPUTime.Posix.ClockGetTime.getCPUTime2_entry(R2) args: 8, res: 0, upd: 8;
       ucxu7: // global
           I64[Sp - 16] = _scxiw::I64;
           I64[Sp - 8] = _scxiB::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _ccxtk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccxt8_info" {
     block_ccxt8_info:
         const _ccxt8;
         const 0;
         const 1163936137246;
         const Scxj3_srt+32;
 },
 _ccxtk() //  []
         { []
         }
     {offset
       ccxtk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccxtZ; else goto ccxtY;
       ccxtZ: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_ccxtj_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccxtY: // global
           _scxiw::I64 = I64[Sp];
           _scxiE::I64 = I64[_scxiw::I64];
           _scxiI::I64 = I64[_scxiw::I64 + 8];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 24] = sat_scxiO_info;
           I64[Hp - 8] = _scxiE::I64;
           I64[Hp] = _scxiI::I64;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccxtj() //  [R1]
         { []
         }
     {offset
       ccxtj: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccxtk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccxtj_info" {
     block_ccxtj_info:
         const _ccxtj;
         const 195;
         const 64424509470;
         const Scxj3_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.073136916 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime_entry() //  []
         { []
         }
     {offset
       ccxuK: // global
           call System.CPUTime.Posix.ClockGetTime.getCPUTime1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.ClockGetTime.getCPUTime_info" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime_info:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Scxj3_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.076709296 UTC

[section ""relreadonly" . Scxj3_srt" {
     Scxj3_srt:
         const sat_scxhL_closure;
         const sat_scxhN_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_rcxhE_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure;
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure;
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_closure;
         const lvl3_rcxhG_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.273082659 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:26.274293629 UTC

[section ""data" . sat_scxuT_closure" {
     sat_scxuT_closure:
         const GHC.Types.I#_con_info;
         const 465;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.276114778 UTC

[section ""data" . sat_scxuU_closure" {
     sat_scxuU_closure:
         const :_con_info;
         const sat_scxuT_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.277911293 UTC

[section ""data" . sat_scxuS_closure" {
     sat_scxuS_closure:
         const GHC.Types.I#_con_info;
         const 1420103680;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.279621479 UTC

[section ""data" . sat_scxuV_closure" {
     sat_scxuV_closure:
         const :_con_info;
         const sat_scxuS_closure+1;
         const sat_scxuU_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.282282688 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime4_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime4_entry() //  [R1]
         { []
         }
     {offset
       ccxwe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxwf; else goto ccxwg;
       ccxwf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxwg: // global
           (_ccxwb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxwb::I64 == 0) goto ccxwd; else goto ccxwc;
       ccxwd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxwc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxwb::I64;
           R3 = sat_scxuV_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.ClockGetTime.getCPUTime4_info" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime4_info:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime4_entry;
         const 0;
         const 4294967317;
         const Scxwh_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.286170867 UTC

[section ""data" . sat_scxuW_closure" {
     sat_scxuW_closure:
         const GHC.Types.I#_con_info;
         const 1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.28802276 UTC

[section ""data" . sat_scxuX_closure" {
     sat_scxuX_closure:
         const :_con_info;
         const sat_scxuW_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.290379576 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime3_entry() //  [R1]
         { []
         }
     {offset
       ccxwz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxwA; else goto ccxwB;
       ccxwA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxwB: // global
           (_ccxww::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxww::I64 == 0) goto ccxwy; else goto ccxwx;
       ccxwy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxwx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxww::I64;
           R3 = sat_scxuX_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.ClockGetTime.getCPUTime3_info" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime3_info:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime3_entry;
         const 0;
         const 4294967317;
         const Scxwh_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.294507904 UTC

[section ""cstring" . System.CPUTime.Posix.ClockGetTime.$trModule4_bytes" {
     System.CPUTime.Posix.ClockGetTime.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.296280297 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$trModule3_closure" {
     System.CPUTime.Posix.ClockGetTime.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.298257852 UTC

[section ""cstring" . System.CPUTime.Posix.ClockGetTime.$trModule2_bytes" {
     System.CPUTime.Posix.ClockGetTime.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,80,85,84,105,109,101,46,80,111,115,105,120,46,67,108,111,99,107,71,101,116,84,105,109,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.300197681 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$trModule1_closure" {
     System.CPUTime.Posix.ClockGetTime.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.302604936 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$trModule_closure" {
     System.CPUTime.Posix.ClockGetTime.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule3_closure+1;
         const System.CPUTime.Posix.ClockGetTime.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.304385059 UTC

[section ""cstring" . System.CPUTime.Posix.ClockGetTime.$tcTimespec2_bytes" {
     System.CPUTime.Posix.ClockGetTime.$tcTimespec2_bytes:
         I8[] [84,105,109,101,115,112,101,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.306224656 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$tcTimespec1_closure" {
     System.CPUTime.Posix.ClockGetTime.$tcTimespec1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.ClockGetTime.$tcTimespec2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.308069805 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.$tcTimespec_closure" {
     System.CPUTime.Posix.ClockGetTime.$tcTimespec_closure:
         const GHC.Types.TyCon_con_info;
         const System.CPUTime.Posix.ClockGetTime.$trModule_closure+1;
         const System.CPUTime.Posix.ClockGetTime.$tcTimespec1_closure+1;
         const GHC.Types.krep$*_closure;
         const 13346594173291483587;
         const 3590994262607885225;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.309956778 UTC

[section ""cstring" . lvl_rcxhD_bytes" {
     lvl_rcxhD_bytes:
         I8[] [99,108,111,99,107,95,103,101,116,114,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.31237225 UTC

[section ""data" . lvl1_rcxhE_closure" {
     lvl1_rcxhE_closure:
         const lvl1_rcxhE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rcxhE_entry() //  [R1]
         { []
         }
     {offset
       ccxx0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxx1; else goto ccxx2;
       ccxx1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxx2: // global
           (_ccxwX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxwX::I64 == 0) goto ccxwZ; else goto ccxwY;
       ccxwZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxwY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxwX::I64;
           R2 = lvl_rcxhD_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_rcxhE_info" {
     lvl1_rcxhE_info:
         const lvl1_rcxhE_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.316421697 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_closure" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_closure:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_entry() //  [R2]
         { []
         }
     {offset
       ccxxh: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_rcxhE_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_info" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_info:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_entry;
         const 0;
         const 12884901902;
         const 8589934596;
         const Scxwh_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.322874861 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_info;
         const 0;
 },
 sat_scxvq_entry() //  [R1]
         { []
         }
     {offset
       ccxxQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxy2; else goto ccxy3;
       ccxy2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxy3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccxxO_info;
           R2 = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scxvq_info" {
     sat_scxvq_info:
         const sat_scxvq_entry;
         const 8589934592;
         const 64424509460;
         const Scxwh_srt+32;
 },
 _ccxxO() //  [R1]
         { []
         }
     {offset
       ccxxO: // global
           I64[Sp] = block_ccxxT_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccxxO_info" {
     block_ccxxO_info:
         const _ccxxO;
         const 65;
         const 64424509470;
         const Scxwh_srt+32;
 },
 _ccxxT() //  [R1]
         { []
         }
     {offset
       ccxxT: // global
           I64[Sp] = block_ccxxX_info;
           R2 = I64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccxxT_info" {
     block_ccxxT_info:
         const _ccxxT;
         const 65;
         const 47244640286;
         const Scxwh_srt+32;
 },
 _ccxxX() //  [R1]
         { []
         }
     {offset
       ccxxX: // global
           I64[Sp] = block_ccxy1_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccxxX_info" {
     block_ccxxX_info:
         const _ccxxX;
         const 1;
         const 47244640286;
         const Scxwh_srt+32;
 },
 _ccxy1() //  [R1]
         { []
         }
     {offset
       ccxy1: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccxy1_info" {
     block_ccxy1_info:
         const _ccxy1;
         const 1;
         const 4294967326;
         const Scxwh_srt+32;
 },
 System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_entry() //  []
         { []
         }
     {offset
       ccxyb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxyc; else goto ccxyd;
       ccxyc: // global
           R1 = System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccxyd: // global
           I64[Sp - 8] = block_ccxxs_info;
           R1 = 16;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_info" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_info:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_entry;
         const 0;
         const 270582939662;
         const 4294967299;
         const Scxwh_srt+32;
 },
 _ccxxs() //  [R1]
         { []
         }
     {offset
       ccxxs: // global
           _scxv8::I64 = R1 + 16;
           (_scxvc::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint]  result hints:  [‘signed’] ghczuwrapperZC1ZCbaseZCSystemziCPUTimeziPosixziClockGetTimeZCclockzugetres(2, _scxv8::I64);
           _scxvd::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scxvc::I64));
           if (_scxvd::I64 == (-1)) goto ccxym; else goto ucxyr;
       ccxym: // global
           (_scxvu::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scxvu::I64;
           Sp = Sp + 8;
           call System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_entry(R2) args: 8, res: 0, upd: 8;
       ucxyr: // global
           I64[Sp - 16] = _scxv8::I64;
           I64[Sp - 8] = _scxvd::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _ccxxE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccxxs_info" {
     block_ccxxs_info:
         const _ccxxs;
         const 0;
         const 201863462942;
         const Scxwh_srt+32;
 },
 _ccxxE() //  []
         { []
         }
     {offset
       ccxxE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccxyj; else goto ccxyi;
       ccxyj: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_ccxxD_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccxyi: // global
           _scxv8::I64 = I64[Sp];
           _scxvg::I64 = I64[_scxv8::I64];
           _scxvk::I64 = I64[_scxv8::I64 + 8];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 24] = sat_scxvq_info;
           I64[Hp - 8] = _scxvg::I64;
           I64[Hp] = _scxvk::I64;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccxxD() //  [R1]
         { []
         }
     {offset
       ccxxD: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccxxE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccxxD_info" {
     block_ccxxD_info:
         const _ccxxD;
         const 195;
         const 64424509470;
         const Scxwh_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.339866385 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_closure" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_closure:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_entry() //  []
         { []
         }
     {offset
       ccxzc: // global
           call System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_info" {
     System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_info:
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Scxwh_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.34313877 UTC

[section ""cstring" . lvl2_rcxhF_bytes" {
     lvl2_rcxhF_bytes:
         I8[] [99,108,111,99,107,95,103,101,116,116,105,109,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.34543535 UTC

[section ""data" . lvl3_rcxhG_closure" {
     lvl3_rcxhG_closure:
         const lvl3_rcxhG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rcxhG_entry() //  [R1]
         { []
         }
     {offset
       ccxzq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccxzr; else goto ccxzs;
       ccxzr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxzs: // global
           (_ccxzn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccxzn::I64 == 0) goto ccxzp; else goto ccxzo;
       ccxzp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccxzo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccxzn::I64;
           R2 = lvl2_rcxhF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_rcxhG_info" {
     lvl3_rcxhG_info:
         const lvl3_rcxhG_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.351247963 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime2_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime2_entry() //  [R2]
         { []
         }
     {offset
       ccxzH: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl3_rcxhG_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.ClockGetTime.getCPUTime2_info" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime2_info:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime2_entry;
         const 0;
         const 1103806595086;
         const 8589934596;
         const Scxwh_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.36166204 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime1_info;
         const 0;
 },
 sat_scxvY_entry() //  [R1]
         { []
         }
     {offset
       ccxAg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxAs; else goto ccxAt;
       ccxAs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccxAt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccxAe_info;
           R2 = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scxvY_info" {
     sat_scxvY_info:
         const sat_scxvY_entry;
         const 8589934592;
         const 64424509460;
         const Scxwh_srt+32;
 },
 _ccxAe() //  [R1]
         { []
         }
     {offset
       ccxAe: // global
           I64[Sp] = block_ccxAj_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccxAe_info" {
     block_ccxAe_info:
         const _ccxAe;
         const 65;
         const 64424509470;
         const Scxwh_srt+32;
 },
 _ccxAj() //  [R1]
         { []
         }
     {offset
       ccxAj: // global
           I64[Sp] = block_ccxAn_info;
           R2 = I64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccxAj_info" {
     block_ccxAj_info:
         const _ccxAj;
         const 65;
         const 47244640286;
         const Scxwh_srt+32;
 },
 _ccxAn() //  [R1]
         { []
         }
     {offset
       ccxAn: // global
           I64[Sp] = block_ccxAr_info;
           R3 = System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccxAn_info" {
     block_ccxAn_info:
         const _ccxAn;
         const 1;
         const 47244640286;
         const Scxwh_srt+32;
 },
 _ccxAr() //  [R1]
         { []
         }
     {offset
       ccxAr: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccxAr_info" {
     block_ccxAr_info:
         const _ccxAr;
         const 1;
         const 4294967326;
         const Scxwh_srt+32;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime1_entry() //  []
         { []
         }
     {offset
       ccxAB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccxAC; else goto ccxAD;
       ccxAC: // global
           R1 = System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccxAD: // global
           I64[Sp - 8] = block_ccxzS_info;
           R1 = 16;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.ClockGetTime.getCPUTime1_info" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime1_info:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime1_entry;
         const 0;
         const 1713691951118;
         const 4294967299;
         const Scxwh_srt+32;
 },
 _ccxzS() //  [R1]
         { []
         }
     {offset
       ccxzS: // global
           _scxvG::I64 = R1 + 16;
           (_scxvK::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint]  result hints:  [‘signed’] ghczuwrapperZC0ZCbaseZCSystemziCPUTimeziPosixziClockGetTimeZCclockzugettime(2, _scxvG::I64);
           _scxvL::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scxvK::I64));
           if (_scxvL::I64 == (-1)) goto ccxAM; else goto ucxAR;
       ccxAM: // global
           (_scxw2::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scxw2::I64;
           Sp = Sp + 8;
           call System.CPUTime.Posix.ClockGetTime.getCPUTime2_entry(R2) args: 8, res: 0, upd: 8;
       ucxAR: // global
           I64[Sp - 16] = _scxvG::I64;
           I64[Sp - 8] = _scxvL::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _ccxA4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccxzS_info" {
     block_ccxzS_info:
         const _ccxzS;
         const 0;
         const 1163936137246;
         const Scxwh_srt+32;
 },
 _ccxA4() //  []
         { []
         }
     {offset
       ccxA4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccxAJ; else goto ccxAI;
       ccxAJ: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_ccxA3_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccxAI: // global
           _scxvG::I64 = I64[Sp];
           _scxvO::I64 = I64[_scxvG::I64];
           _scxvS::I64 = I64[_scxvG::I64 + 8];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 24] = sat_scxvY_info;
           I64[Hp - 8] = _scxvO::I64;
           I64[Hp] = _scxvS::I64;
           R1 = Hp - 24;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccxA3() //  [R1]
         { []
         }
     {offset
       ccxA3: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccxA4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_ccxA3_info" {
     block_ccxA3_info:
         const _ccxA3;
         const 195;
         const 64424509470;
         const Scxwh_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.387875523 UTC

[section ""data" . System.CPUTime.Posix.ClockGetTime.getCPUTime_closure" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime_closure:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime_info;
         const 0;
 },
 System.CPUTime.Posix.ClockGetTime.getCPUTime_entry() //  []
         { []
         }
     {offset
       ccxBC: // global
           call System.CPUTime.Posix.ClockGetTime.getCPUTime1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . System.CPUTime.Posix.ClockGetTime.getCPUTime_info" {
     System.CPUTime.Posix.ClockGetTime.getCPUTime_info:
         const System.CPUTime.Posix.ClockGetTime.getCPUTime_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Scxwh_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:26.392085257 UTC

[section ""relreadonly" . Scxwh_srt" {
     Scxwh_srt:
         const sat_scxuV_closure;
         const sat_scxuX_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_rcxhE_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime3_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime4_closure;
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision1_closure;
         const System.CPUTime.Posix.ClockGetTime.getCpuTimePrecision2_closure;
         const lvl3_rcxhG_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime1_closure;
         const System.CPUTime.Posix.ClockGetTime.getCPUTime2_closure;
 }]

