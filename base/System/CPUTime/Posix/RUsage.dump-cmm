
==================== Output Cmm ====================
2018-03-16 16:07:31.633930445 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:31.634547085 UTC

[section ""cstring" . System.CPUTime.Posix.RUsage.$trModule4_bytes" {
     System.CPUTime.Posix.RUsage.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.635153345 UTC

[section ""data" . System.CPUTime.Posix.RUsage.$trModule3_closure" {
     System.CPUTime.Posix.RUsage.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.RUsage.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.635743122 UTC

[section ""cstring" . System.CPUTime.Posix.RUsage.$trModule2_bytes" {
     System.CPUTime.Posix.RUsage.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,80,85,84,105,109,101,46,80,111,115,105,120,46,82,85,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.636341609 UTC

[section ""data" . System.CPUTime.Posix.RUsage.$trModule1_closure" {
     System.CPUTime.Posix.RUsage.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.RUsage.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.636913429 UTC

[section ""data" . System.CPUTime.Posix.RUsage.$trModule_closure" {
     System.CPUTime.Posix.RUsage.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.CPUTime.Posix.RUsage.$trModule3_closure+1;
         const System.CPUTime.Posix.RUsage.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.63758392 UTC

[section ""data" . sat_scCRx_closure" {
     sat_scCRx_closure:
         const GHC.Types.I#_con_info;
         const 465;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.638137233 UTC

[section ""data" . sat_scCRy_closure" {
     sat_scCRy_closure:
         const :_con_info;
         const sat_scCRx_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.638802803 UTC

[section ""data" . sat_scCRw_closure" {
     sat_scCRw_closure:
         const GHC.Types.I#_con_info;
         const 1420103680;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.639409866 UTC

[section ""data" . sat_scCRz_closure" {
     sat_scCRz_closure:
         const :_con_info;
         const sat_scCRw_closure+1;
         const sat_scCRy_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.640359435 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision3_entry() //  [R1]
         { info_tbl: [(ccCSF,
                       label: System.CPUTime.Posix.RUsage.getCpuTimePrecision3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCSF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccCSG; else goto ccCSH;
       ccCSG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCSH: // global
           (_ccCSC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCSC::I64 == 0) goto ccCSE; else goto ccCSD;
       ccCSE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCSD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCSC::I64;
           R3 = sat_scCRz_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.641848336 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision2_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision2_entry() //  [R1]
         { info_tbl: [(ccCSS,
                       label: System.CPUTime.Posix.RUsage.getCpuTimePrecision2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCSS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccCT8; else goto ccCT9;
       ccCT8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCT9: // global
           (_ccCSM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCSM::I64 == 0) goto ccCSO; else goto ccCSN;
       ccCSO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCSN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCSM::I64;
           (_scCRD::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] clk_tck();
           I64[Sp - 24] = block_ccCSQ_info;
           R2 = _scCRD::I64;
           Sp = Sp - 24;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCSQ() //  [R1]
         { info_tbl: [(ccCSQ,
                       label: block_ccCSQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCSQ: // global
           I64[Sp - 8] = block_ccCSV_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCSV() //  [R1]
         { info_tbl: [(ccCSV,
                       label: block_ccCSV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCSV: // global
           I64[Sp] = block_ccCSZ_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCSZ() //  [R1]
         { info_tbl: [(ccCSZ,
                       label: block_ccCSZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCSZ: // global
           I64[Sp] = block_ccCT3_info;
           R3 = R1;
           R2 = System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCT3() //  [R1]
         { info_tbl: [(ccCT3,
                       label: block_ccCT3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCT3: // global
           _scCRH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccCT7_info;
           R3 = _scCRH::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCT7() //  [R1, R2]
         { info_tbl: [(ccCT7,
                       label: block_ccCT7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCT7: // global
           R4 = R2;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInteger_closure;
           Sp = Sp + 8;
           call GHC.Real.$w$s$cround_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.643633387 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision1_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision1_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision1_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision1_entry() //  []
         { info_tbl: [(ccCTk,
                       label: System.CPUTime.Posix.RUsage.getCpuTimePrecision1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCTk: // global
           R1 = System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.64452811 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision_entry() //  []
         { info_tbl: [(ccCTr,
                       label: System.CPUTime.Posix.RUsage.getCpuTimePrecision_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCTr: // global
           call System.CPUTime.Posix.RUsage.getCpuTimePrecision1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.645422226 UTC

[section ""cstring" . lvl_rcCRt_bytes" {
     lvl_rcCRt_bytes:
         I8[] [103,101,116,114,117,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.646231361 UTC

[section ""data" . lvl1_rcCRu_closure" {
     lvl1_rcCRu_closure:
         const lvl1_rcCRu_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rcCRu_entry() //  [R1]
         { info_tbl: [(ccCTA,
                       label: lvl1_rcCRu_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCTA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccCTB; else goto ccCTC;
       ccCTB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCTC: // global
           (_ccCTx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCTx::I64 == 0) goto ccCTz; else goto ccCTy;
       ccCTz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCTy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCTx::I64;
           R2 = lvl_rcCRt_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.647335732 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime2_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime2_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime2_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCPUTime2_entry() //  [R2]
         { info_tbl: [(ccCTJ,
                       label: System.CPUTime.Posix.RUsage.getCPUTime2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCTJ: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_rcCRu_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.648162432 UTC

[section ""data" . sat_scCRP_closure" {
     sat_scCRP_closure:
         const GHC.Types.I#_con_info;
         const 1000000;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.648754402 UTC

[section ""data" . sat_scCRQ_closure" {
     sat_scCRQ_closure:
         const :_con_info;
         const sat_scCRP_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.649577421 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime3_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime3_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCPUTime3_entry() //  [R1]
         { info_tbl: [(ccCTS,
                       label: System.CPUTime.Posix.RUsage.getCPUTime3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCTS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccCTT; else goto ccCTU;
       ccCTT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCTU: // global
           (_ccCTP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCTP::I64 == 0) goto ccCTR; else goto ccCTQ;
       ccCTR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCTQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCTP::I64;
           R3 = sat_scCRQ_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.651628007 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime1_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime1_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime1_info;
         const 0;
 },
 sat_scCSt_entry() //  [R1]
         { info_tbl: [(ccCUt,
                       label: sat_scCSt_info
                       rep:HeapRep 4 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCUt: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccCUZ; else goto ccCV0;
       ccCUZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCV0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccCUr_info;
           R2 = I64[R1 + 40];
           I64[Sp - 40] = I64[R1 + 16];
           I64[Sp - 32] = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCUr() //  [R1]
         { info_tbl: [(ccCUr,
                       label: block_ccCUr_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCUr: // global
           I64[Sp] = block_ccCUw_info;
           R2 = I64[Sp + 24];
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCUw() //  [R1]
         { info_tbl: [(ccCUw,
                       label: block_ccCUw_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCUw: // global
           I64[Sp] = block_ccCUA_info;
           R3 = System.CPUTime.Posix.RUsage.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCUA() //  [R1]
         { info_tbl: [(ccCUA,
                       label: block_ccCUA_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCUA: // global
           I64[Sp] = block_ccCUE_info;
           R2 = I64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCUE() //  [R1]
         { info_tbl: [(ccCUE,
                       label: block_ccCUE_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCUE: // global
           I64[Sp] = block_ccCUI_info;
           R2 = I64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCUI() //  [R1]
         { info_tbl: [(ccCUI,
                       label: block_ccCUI_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCUI: // global
           I64[Sp] = block_ccCUM_info;
           R3 = System.CPUTime.Posix.RUsage.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCUM() //  [R1]
         { info_tbl: [(ccCUM,
                       label: block_ccCUM_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCUM: // global
           _scCSm::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccCUQ_info;
           R3 = _scCSm::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCUQ() //  [R1]
         { info_tbl: [(ccCUQ,
                       label: block_ccCUQ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCUQ: // global
           _scCSp::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccCUU_info;
           R3 = _scCSp::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCUU() //  [R1]
         { info_tbl: [(ccCUU,
                       label: block_ccCUU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCUU: // global
           _scCSr::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccCUY_info;
           R3 = _scCSr::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCUY() //  [R1]
         { info_tbl: [(ccCUY,
                       label: block_ccCUY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCUY: // global
           R3 = System.CPUTime.Posix.RUsage.getCPUTime3_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 System.CPUTime.Posix.RUsage.getCPUTime1_entry() //  []
         { info_tbl: [(ccCVd,
                       label: System.CPUTime.Posix.RUsage.getCPUTime1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCVd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccCVe; else goto ccCVf;
       ccCVe: // global
           R1 = System.CPUTime.Posix.RUsage.getCPUTime1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccCVf: // global
           I64[Sp - 8] = block_ccCTZ_info;
           R1 = 272;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccCTZ() //  [R1]
         { info_tbl: [(ccCTZ,
                       label: block_ccCTZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCTZ: // global
           _scCRY::I64 = R1 + 16;
           (_scCS2::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint]  result hints:  [‘signed’] ghczuwrapperZC0ZCbaseZCSystemziCPUTimeziPosixziRUsageZCgetrusage(0, _scCRY::I64);
           _scCS3::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scCS2::I64));
           if (_scCS3::I64 == (-1)) goto ccCVo; else goto ucCVt;
       ccCVo: // global
           (_scCSx::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scCSx::I64;
           Sp = Sp + 8;
           call System.CPUTime.Posix.RUsage.getCPUTime2_entry(R2) args: 8, res: 0, upd: 8;
       ucCVt: // global
           I64[Sp - 16] = _scCRY::I64;
           I64[Sp - 8] = _scCS3::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _ccCUb() args: 0, res: 0, upd: 0;
     }
 },
 _ccCUb() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCUb: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccCVl; else goto ccCVk;
       ccCVl: // global
           HpAlloc = 48;
           I64[Sp - 8] = block_ccCUa_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccCVk: // global
           _scCRY::I64 = I64[Sp];
           _scCS6::I64 = I64[_scCRY::I64];
           _scCSa::I64 = I64[_scCRY::I64 + 8];
           _scCSb::I64 = _scCRY::I64 + 16;
           _scCSe::I64 = I64[_scCSb::I64];
           _scCSi::I64 = I64[_scCSb::I64 + 8];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 40] = sat_scCSt_info;
           I64[Hp - 24] = _scCS6::I64;
           I64[Hp - 16] = _scCSa::I64;
           I64[Hp - 8] = _scCSe::I64;
           I64[Hp] = _scCSi::I64;
           R1 = Hp - 40;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccCUa() //  [R1]
         { info_tbl: [(ccCUa,
                       label: block_ccCUa_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCUa: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccCUb() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.654971929 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCPUTime_entry() //  []
         { info_tbl: [(ccCVB,
                       label: System.CPUTime.Posix.RUsage.getCPUTime_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCVB: // global
           call System.CPUTime.Posix.RUsage.getCPUTime1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.655694751 UTC

[section ""relreadonly" . ScCSI_srt" {
     ScCSI_srt:
         const sat_scCRz_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Real.$fIntegralInteger_closure;
         const GHC.Real.$w$sreduce_closure;
         const GHC.Real.$w$s$cround_closure;
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure;
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure;
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_rcCRu_closure;
         const sat_scCRQ_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const System.CPUTime.Posix.RUsage.getCPUTime3_closure;
         const System.CPUTime.Posix.RUsage.getCPUTime1_closure;
         const System.CPUTime.Posix.RUsage.getCPUTime2_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.656403011 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:31.65694709 UTC

[section ""cstring" . System.CPUTime.Posix.RUsage.$trModule4_bytes" {
     System.CPUTime.Posix.RUsage.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.65759949 UTC

[section ""data" . System.CPUTime.Posix.RUsage.$trModule3_closure" {
     System.CPUTime.Posix.RUsage.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.RUsage.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.658214304 UTC

[section ""cstring" . System.CPUTime.Posix.RUsage.$trModule2_bytes" {
     System.CPUTime.Posix.RUsage.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,80,85,84,105,109,101,46,80,111,115,105,120,46,82,85,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.658786196 UTC

[section ""data" . System.CPUTime.Posix.RUsage.$trModule1_closure" {
     System.CPUTime.Posix.RUsage.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.RUsage.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.659387985 UTC

[section ""data" . System.CPUTime.Posix.RUsage.$trModule_closure" {
     System.CPUTime.Posix.RUsage.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.CPUTime.Posix.RUsage.$trModule3_closure+1;
         const System.CPUTime.Posix.RUsage.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.659984058 UTC

[section ""data" . sat_scCRx_closure" {
     sat_scCRx_closure:
         const GHC.Types.I#_con_info;
         const 465;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.660573356 UTC

[section ""data" . sat_scCRy_closure" {
     sat_scCRy_closure:
         const :_con_info;
         const sat_scCRx_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.661169471 UTC

[section ""data" . sat_scCRw_closure" {
     sat_scCRw_closure:
         const GHC.Types.I#_con_info;
         const 1420103680;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.661817399 UTC

[section ""data" . sat_scCRz_closure" {
     sat_scCRz_closure:
         const :_con_info;
         const sat_scCRw_closure+1;
         const sat_scCRy_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.66267171 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision3_entry() //  [R1]
         { info_tbl: [(ccCVK,
                       label: System.CPUTime.Posix.RUsage.getCpuTimePrecision3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCVK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccCVL; else goto ccCVM;
       ccCVL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCVM: // global
           (_ccCVH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCVH::I64 == 0) goto ccCVJ; else goto ccCVI;
       ccCVJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCVI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCVH::I64;
           R3 = sat_scCRz_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.664134297 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision2_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision2_entry() //  [R1]
         { info_tbl: [(ccCVW,
                       label: System.CPUTime.Posix.RUsage.getCpuTimePrecision2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCVW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccCWc; else goto ccCWd;
       ccCWc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCWd: // global
           (_ccCVQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCVQ::I64 == 0) goto ccCVS; else goto ccCVR;
       ccCVS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCVR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCVQ::I64;
           (_scCRD::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] clk_tck();
           I64[Sp - 24] = block_ccCVU_info;
           R2 = _scCRD::I64;
           Sp = Sp - 24;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCVU() //  [R1]
         { info_tbl: [(ccCVU,
                       label: block_ccCVU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCVU: // global
           I64[Sp - 8] = block_ccCVZ_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCVZ() //  [R1]
         { info_tbl: [(ccCVZ,
                       label: block_ccCVZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCVZ: // global
           I64[Sp] = block_ccCW3_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCW3() //  [R1]
         { info_tbl: [(ccCW3,
                       label: block_ccCW3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCW3: // global
           I64[Sp] = block_ccCW7_info;
           R3 = R1;
           R2 = System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCW7() //  [R1]
         { info_tbl: [(ccCW7,
                       label: block_ccCW7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCW7: // global
           _scCRH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccCWb_info;
           R3 = _scCRH::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCWb() //  [R1, R2]
         { info_tbl: [(ccCWb,
                       label: block_ccCWb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCWb: // global
           R4 = R2;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInteger_closure;
           Sp = Sp + 8;
           call GHC.Real.$w$s$cround_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.666266236 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision1_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision1_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision1_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision1_entry() //  []
         { info_tbl: [(ccCWo,
                       label: System.CPUTime.Posix.RUsage.getCpuTimePrecision1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCWo: // global
           R1 = System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.667058764 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision_entry() //  []
         { info_tbl: [(ccCWv,
                       label: System.CPUTime.Posix.RUsage.getCpuTimePrecision_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCWv: // global
           call System.CPUTime.Posix.RUsage.getCpuTimePrecision1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.667768622 UTC

[section ""cstring" . lvl_rcCRt_bytes" {
     lvl_rcCRt_bytes:
         I8[] [103,101,116,114,117,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.668530243 UTC

[section ""data" . lvl1_rcCRu_closure" {
     lvl1_rcCRu_closure:
         const lvl1_rcCRu_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rcCRu_entry() //  [R1]
         { info_tbl: [(ccCWE,
                       label: lvl1_rcCRu_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCWE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccCWF; else goto ccCWG;
       ccCWF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCWG: // global
           (_ccCWB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCWB::I64 == 0) goto ccCWD; else goto ccCWC;
       ccCWD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCWC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCWB::I64;
           R2 = lvl_rcCRt_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.669639255 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime2_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime2_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime2_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCPUTime2_entry() //  [R2]
         { info_tbl: [(ccCWN,
                       label: System.CPUTime.Posix.RUsage.getCPUTime2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCWN: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_rcCRu_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.671460104 UTC

[section ""data" . sat_scCRP_closure" {
     sat_scCRP_closure:
         const GHC.Types.I#_con_info;
         const 1000000;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.672036305 UTC

[section ""data" . sat_scCRQ_closure" {
     sat_scCRQ_closure:
         const :_con_info;
         const sat_scCRP_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.672817168 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime3_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime3_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCPUTime3_entry() //  [R1]
         { info_tbl: [(ccCWW,
                       label: System.CPUTime.Posix.RUsage.getCPUTime3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCWW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccCWX; else goto ccCWY;
       ccCWX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCWY: // global
           (_ccCWT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCWT::I64 == 0) goto ccCWV; else goto ccCWU;
       ccCWV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCWU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCWT::I64;
           R3 = sat_scCRQ_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.674865717 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime1_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime1_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime1_info;
         const 0;
 },
 sat_scCSt_entry() //  [R1]
         { info_tbl: [(ccCXx,
                       label: sat_scCSt_info
                       rep:HeapRep 4 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCXx: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccCY3; else goto ccCY4;
       ccCY3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCY4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccCXv_info;
           R2 = I64[R1 + 40];
           I64[Sp - 40] = I64[R1 + 16];
           I64[Sp - 32] = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCXv() //  [R1]
         { info_tbl: [(ccCXv,
                       label: block_ccCXv_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCXv: // global
           I64[Sp] = block_ccCXA_info;
           R2 = I64[Sp + 24];
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCXA() //  [R1]
         { info_tbl: [(ccCXA,
                       label: block_ccCXA_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCXA: // global
           I64[Sp] = block_ccCXE_info;
           R3 = System.CPUTime.Posix.RUsage.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCXE() //  [R1]
         { info_tbl: [(ccCXE,
                       label: block_ccCXE_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCXE: // global
           I64[Sp] = block_ccCXI_info;
           R2 = I64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCXI() //  [R1]
         { info_tbl: [(ccCXI,
                       label: block_ccCXI_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCXI: // global
           I64[Sp] = block_ccCXM_info;
           R2 = I64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCXM() //  [R1]
         { info_tbl: [(ccCXM,
                       label: block_ccCXM_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCXM: // global
           I64[Sp] = block_ccCXQ_info;
           R3 = System.CPUTime.Posix.RUsage.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCXQ() //  [R1]
         { info_tbl: [(ccCXQ,
                       label: block_ccCXQ_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCXQ: // global
           _scCSm::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccCXU_info;
           R3 = _scCSm::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCXU() //  [R1]
         { info_tbl: [(ccCXU,
                       label: block_ccCXU_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCXU: // global
           _scCSp::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccCXY_info;
           R3 = _scCSp::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCXY() //  [R1]
         { info_tbl: [(ccCXY,
                       label: block_ccCXY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCXY: // global
           _scCSr::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccCY2_info;
           R3 = _scCSr::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCY2() //  [R1]
         { info_tbl: [(ccCY2,
                       label: block_ccCY2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCY2: // global
           R3 = System.CPUTime.Posix.RUsage.getCPUTime3_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 System.CPUTime.Posix.RUsage.getCPUTime1_entry() //  []
         { info_tbl: [(ccCYh,
                       label: System.CPUTime.Posix.RUsage.getCPUTime1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCYh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccCYi; else goto ccCYj;
       ccCYi: // global
           R1 = System.CPUTime.Posix.RUsage.getCPUTime1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccCYj: // global
           I64[Sp - 8] = block_ccCX3_info;
           R1 = 272;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccCX3() //  [R1]
         { info_tbl: [(ccCX3,
                       label: block_ccCX3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCX3: // global
           _scCRY::I64 = R1 + 16;
           (_scCS2::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint]  result hints:  [‘signed’] ghczuwrapperZC0ZCbaseZCSystemziCPUTimeziPosixziRUsageZCgetrusage(0, _scCRY::I64);
           _scCS3::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scCS2::I64));
           if (_scCS3::I64 == (-1)) goto ccCYs; else goto ucCYx;
       ccCYs: // global
           (_scCSx::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scCSx::I64;
           Sp = Sp + 8;
           call System.CPUTime.Posix.RUsage.getCPUTime2_entry(R2) args: 8, res: 0, upd: 8;
       ucCYx: // global
           I64[Sp - 16] = _scCRY::I64;
           I64[Sp - 8] = _scCS3::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _ccCXf() args: 0, res: 0, upd: 0;
     }
 },
 _ccCXf() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCXf: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccCYp; else goto ccCYo;
       ccCYp: // global
           HpAlloc = 48;
           I64[Sp - 8] = block_ccCXe_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccCYo: // global
           _scCRY::I64 = I64[Sp];
           _scCS6::I64 = I64[_scCRY::I64];
           _scCSa::I64 = I64[_scCRY::I64 + 8];
           _scCSb::I64 = _scCRY::I64 + 16;
           _scCSe::I64 = I64[_scCSb::I64];
           _scCSi::I64 = I64[_scCSb::I64 + 8];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 40] = sat_scCSt_info;
           I64[Hp - 24] = _scCS6::I64;
           I64[Hp - 16] = _scCSa::I64;
           I64[Hp - 8] = _scCSe::I64;
           I64[Hp] = _scCSi::I64;
           R1 = Hp - 40;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccCXe() //  [R1]
         { info_tbl: [(ccCXe,
                       label: block_ccCXe_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCXe: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccCXf() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.678124314 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCPUTime_entry() //  []
         { info_tbl: [(ccCYF,
                       label: System.CPUTime.Posix.RUsage.getCPUTime_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCYF: // global
           call System.CPUTime.Posix.RUsage.getCPUTime1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.678888457 UTC

[section ""relreadonly" . ScCSI_srt" {
     ScCSI_srt:
         const sat_scCRz_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Real.$fIntegralInteger_closure;
         const GHC.Real.$w$sreduce_closure;
         const GHC.Real.$w$s$cround_closure;
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure;
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure;
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_rcCRu_closure;
         const sat_scCRQ_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const System.CPUTime.Posix.RUsage.getCPUTime3_closure;
         const System.CPUTime.Posix.RUsage.getCPUTime1_closure;
         const System.CPUTime.Posix.RUsage.getCPUTime2_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.680024746 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:31.681221017 UTC

[section ""cstring" . System.CPUTime.Posix.RUsage.$trModule4_bytes" {
     System.CPUTime.Posix.RUsage.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.683731031 UTC

[section ""data" . System.CPUTime.Posix.RUsage.$trModule3_closure" {
     System.CPUTime.Posix.RUsage.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.RUsage.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.685574719 UTC

[section ""cstring" . System.CPUTime.Posix.RUsage.$trModule2_bytes" {
     System.CPUTime.Posix.RUsage.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,80,85,84,105,109,101,46,80,111,115,105,120,46,82,85,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.687304131 UTC

[section ""data" . System.CPUTime.Posix.RUsage.$trModule1_closure" {
     System.CPUTime.Posix.RUsage.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.RUsage.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.689153168 UTC

[section ""data" . System.CPUTime.Posix.RUsage.$trModule_closure" {
     System.CPUTime.Posix.RUsage.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.CPUTime.Posix.RUsage.$trModule3_closure+1;
         const System.CPUTime.Posix.RUsage.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.691046913 UTC

[section ""data" . sat_scCRx_closure" {
     sat_scCRx_closure:
         const GHC.Types.I#_con_info;
         const 465;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.692878173 UTC

[section ""data" . sat_scCRy_closure" {
     sat_scCRy_closure:
         const :_con_info;
         const sat_scCRx_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.694795312 UTC

[section ""data" . sat_scCRw_closure" {
     sat_scCRw_closure:
         const GHC.Types.I#_con_info;
         const 1420103680;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.696567839 UTC

[section ""data" . sat_scCRz_closure" {
     sat_scCRz_closure:
         const :_con_info;
         const sat_scCRw_closure+1;
         const sat_scCRy_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.699093632 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision3_entry() //  [R1]
         { info_tbl: [(ccCYX,
                       label: System.CPUTime.Posix.RUsage.getCpuTimePrecision3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCYX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccCYY; else goto ccCYZ;
       ccCYY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCYZ: // global
           (_ccCYU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCYU::I64 == 0) goto ccCYW; else goto ccCYV;
       ccCYW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCYV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCYU::I64;
           R3 = sat_scCRz_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.703848734 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision2_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision2_entry() //  [R1]
         { info_tbl: [(ccCZg,
                       label: System.CPUTime.Posix.RUsage.getCpuTimePrecision2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCZg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccCZw; else goto ccCZx;
       ccCZw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccCZx: // global
           (_ccCZa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccCZa::I64 == 0) goto ccCZc; else goto ccCZb;
       ccCZc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccCZb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccCZa::I64;
           (_scCRD::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] clk_tck();
           I64[Sp - 24] = block_ccCZe_info;
           R2 = _scCRD::I64;
           Sp = Sp - 24;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCZe() //  [R1]
         { info_tbl: [(ccCZe,
                       label: block_ccCZe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCZe: // global
           I64[Sp - 8] = block_ccCZj_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCZj() //  [R1]
         { info_tbl: [(ccCZj,
                       label: block_ccCZj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCZj: // global
           I64[Sp] = block_ccCZn_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCZn() //  [R1]
         { info_tbl: [(ccCZn,
                       label: block_ccCZn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCZn: // global
           I64[Sp] = block_ccCZr_info;
           R3 = R1;
           R2 = System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCZr() //  [R1]
         { info_tbl: [(ccCZr,
                       label: block_ccCZr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCZr: // global
           _scCRH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccCZv_info;
           R3 = _scCRH::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccCZv() //  [R1, R2]
         { info_tbl: [(ccCZv,
                       label: block_ccCZv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccCZv: // global
           R4 = R2;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInteger_closure;
           Sp = Sp + 8;
           call GHC.Real.$w$s$cround_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.717778617 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision1_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision1_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision1_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision1_entry() //  []
         { info_tbl: [(ccD04,
                       label: System.CPUTime.Posix.RUsage.getCpuTimePrecision1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD04: // global
           R1 = System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.721327755 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision_entry() //  []
         { info_tbl: [(ccD0g,
                       label: System.CPUTime.Posix.RUsage.getCpuTimePrecision_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD0g: // global
           call System.CPUTime.Posix.RUsage.getCpuTimePrecision1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.724665284 UTC

[section ""cstring" . lvl_rcCRt_bytes" {
     lvl_rcCRt_bytes:
         I8[] [103,101,116,114,117,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.727081173 UTC

[section ""data" . lvl1_rcCRu_closure" {
     lvl1_rcCRu_closure:
         const lvl1_rcCRu_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rcCRu_entry() //  [R1]
         { info_tbl: [(ccD0u,
                       label: lvl1_rcCRu_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD0u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccD0v; else goto ccD0w;
       ccD0v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccD0w: // global
           (_ccD0r::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccD0r::I64 == 0) goto ccD0t; else goto ccD0s;
       ccD0t: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccD0s: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccD0r::I64;
           R2 = lvl_rcCRt_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.731296445 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime2_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime2_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime2_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCPUTime2_entry() //  [R2]
         { info_tbl: [(ccD0K,
                       label: System.CPUTime.Posix.RUsage.getCPUTime2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD0K: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_rcCRu_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.7349093 UTC

[section ""data" . sat_scCRP_closure" {
     sat_scCRP_closure:
         const GHC.Types.I#_con_info;
         const 1000000;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.736672005 UTC

[section ""data" . sat_scCRQ_closure" {
     sat_scCRQ_closure:
         const :_con_info;
         const sat_scCRP_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.73936092 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime3_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime3_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCPUTime3_entry() //  [R1]
         { info_tbl: [(ccD0Z,
                       label: System.CPUTime.Posix.RUsage.getCPUTime3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD0Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccD10; else goto ccD11;
       ccD10: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccD11: // global
           (_ccD0W::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccD0W::I64 == 0) goto ccD0Y; else goto ccD0X;
       ccD0Y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccD0X: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccD0W::I64;
           R3 = sat_scCRQ_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.74508935 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime1_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime1_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime1_info;
         const 0;
 },
 sat_scCSt_entry() //  [R1]
         { info_tbl: [(ccD1H,
                       label: sat_scCSt_info
                       rep:HeapRep 4 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD1H: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccD2d; else goto ccD2e;
       ccD2d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccD2e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccD1F_info;
           R2 = I64[R1 + 40];
           I64[Sp - 40] = I64[R1 + 16];
           I64[Sp - 32] = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD1F() //  [R1]
         { info_tbl: [(ccD1F,
                       label: block_ccD1F_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD1F: // global
           I64[Sp] = block_ccD1K_info;
           R2 = I64[Sp + 24];
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD1K() //  [R1]
         { info_tbl: [(ccD1K,
                       label: block_ccD1K_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD1K: // global
           I64[Sp] = block_ccD1O_info;
           R3 = System.CPUTime.Posix.RUsage.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD1O() //  [R1]
         { info_tbl: [(ccD1O,
                       label: block_ccD1O_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD1O: // global
           I64[Sp] = block_ccD1S_info;
           R2 = I64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD1S() //  [R1]
         { info_tbl: [(ccD1S,
                       label: block_ccD1S_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD1S: // global
           I64[Sp] = block_ccD1W_info;
           R2 = I64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD1W() //  [R1]
         { info_tbl: [(ccD1W,
                       label: block_ccD1W_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD1W: // global
           I64[Sp] = block_ccD20_info;
           R3 = System.CPUTime.Posix.RUsage.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD20() //  [R1]
         { info_tbl: [(ccD20,
                       label: block_ccD20_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD20: // global
           _scCSm::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccD24_info;
           R3 = _scCSm::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD24() //  [R1]
         { info_tbl: [(ccD24,
                       label: block_ccD24_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD24: // global
           _scCSp::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccD28_info;
           R3 = _scCSp::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD28() //  [R1]
         { info_tbl: [(ccD28,
                       label: block_ccD28_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD28: // global
           _scCSr::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccD2c_info;
           R3 = _scCSr::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD2c() //  [R1]
         { info_tbl: [(ccD2c,
                       label: block_ccD2c_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD2c: // global
           R3 = System.CPUTime.Posix.RUsage.getCPUTime3_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 System.CPUTime.Posix.RUsage.getCPUTime1_entry() //  []
         { info_tbl: [(ccD2r,
                       label: System.CPUTime.Posix.RUsage.getCPUTime1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD2r: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccD2s; else goto ccD2t;
       ccD2s: // global
           R1 = System.CPUTime.Posix.RUsage.getCPUTime1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccD2t: // global
           I64[Sp - 8] = block_ccD1d_info;
           R1 = 272;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccD1d() //  [R1]
         { info_tbl: [(ccD1d,
                       label: block_ccD1d_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD1d: // global
           _scCRY::I64 = R1 + 16;
           (_scCS2::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint]  result hints:  [‘signed’] ghczuwrapperZC0ZCbaseZCSystemziCPUTimeziPosixziRUsageZCgetrusage(0, _scCRY::I64);
           _scCS3::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scCS2::I64));
           if (_scCS3::I64 == (-1)) goto ccD2C; else goto ucD2H;
       ccD2C: // global
           (_scCSx::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scCSx::I64;
           Sp = Sp + 8;
           call System.CPUTime.Posix.RUsage.getCPUTime2_entry(R2) args: 8, res: 0, upd: 8;
       ucD2H: // global
           I64[Sp - 16] = _scCRY::I64;
           I64[Sp - 8] = _scCS3::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _ccD1p() args: 0, res: 0, upd: 0;
     }
 },
 _ccD1p() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD1p: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccD2z; else goto ccD2y;
       ccD2z: // global
           HpAlloc = 48;
           I64[Sp - 8] = block_ccD1o_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccD2y: // global
           _scCRY::I64 = I64[Sp];
           _scCS6::I64 = I64[_scCRY::I64];
           _scCSa::I64 = I64[_scCRY::I64 + 8];
           _scCSb::I64 = _scCRY::I64 + 16;
           _scCSe::I64 = I64[_scCSb::I64];
           _scCSi::I64 = I64[_scCSb::I64 + 8];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 40] = sat_scCSt_info;
           I64[Hp - 24] = _scCS6::I64;
           I64[Hp - 16] = _scCSa::I64;
           I64[Hp - 8] = _scCSe::I64;
           I64[Hp] = _scCSi::I64;
           R1 = Hp - 40;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccD1o() //  [R1]
         { info_tbl: [(ccD1o,
                       label: block_ccD1o_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD1o: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccD1p() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.779001927 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCPUTime_entry() //  []
         { info_tbl: [(ccD3B,
                       label: System.CPUTime.Posix.RUsage.getCPUTime_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD3B: // global
           call System.CPUTime.Posix.RUsage.getCPUTime1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.783653288 UTC

[section ""relreadonly" . ScCSI_srt" {
     ScCSI_srt:
         const sat_scCRz_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Real.$fIntegralInteger_closure;
         const GHC.Real.$w$sreduce_closure;
         const GHC.Real.$w$s$cround_closure;
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure;
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure;
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_rcCRu_closure;
         const sat_scCRQ_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const System.CPUTime.Posix.RUsage.getCPUTime3_closure;
         const System.CPUTime.Posix.RUsage.getCPUTime1_closure;
         const System.CPUTime.Posix.RUsage.getCPUTime2_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.982924711 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:07:31.984144319 UTC

[section ""cstring" . System.CPUTime.Posix.RUsage.$trModule4_bytes" {
     System.CPUTime.Posix.RUsage.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.986201057 UTC

[section ""data" . System.CPUTime.Posix.RUsage.$trModule3_closure" {
     System.CPUTime.Posix.RUsage.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.RUsage.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.98821765 UTC

[section ""cstring" . System.CPUTime.Posix.RUsage.$trModule2_bytes" {
     System.CPUTime.Posix.RUsage.$trModule2_bytes:
         I8[] [83,121,115,116,101,109,46,67,80,85,84,105,109,101,46,80,111,115,105,120,46,82,85,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.990292305 UTC

[section ""data" . System.CPUTime.Posix.RUsage.$trModule1_closure" {
     System.CPUTime.Posix.RUsage.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const System.CPUTime.Posix.RUsage.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.992180014 UTC

[section ""data" . System.CPUTime.Posix.RUsage.$trModule_closure" {
     System.CPUTime.Posix.RUsage.$trModule_closure:
         const GHC.Types.Module_con_info;
         const System.CPUTime.Posix.RUsage.$trModule3_closure+1;
         const System.CPUTime.Posix.RUsage.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.994961658 UTC

[section ""data" . sat_scD3K_closure" {
     sat_scD3K_closure:
         const GHC.Types.I#_con_info;
         const 465;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.996789286 UTC

[section ""data" . sat_scD3L_closure" {
     sat_scD3L_closure:
         const :_con_info;
         const sat_scD3K_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:31.998755949 UTC

[section ""data" . sat_scD3J_closure" {
     sat_scD3J_closure:
         const GHC.Types.I#_con_info;
         const 1420103680;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:32.000520371 UTC

[section ""data" . sat_scD3M_closure" {
     sat_scD3M_closure:
         const :_con_info;
         const sat_scD3J_closure+1;
         const sat_scD3L_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:32.002772816 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision3_entry() //  [R1]
         { info_tbl: [(ccD51,
                       label: System.CPUTime.Posix.RUsage.getCpuTimePrecision3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD51: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccD52; else goto ccD53;
       ccD52: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccD53: // global
           (_ccD4Y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccD4Y::I64 == 0) goto ccD50; else goto ccD4Z;
       ccD50: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccD4Z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccD4Y::I64;
           R3 = sat_scD3M_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:32.007865975 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision2_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision2_entry() //  [R1]
         { info_tbl: [(ccD5n,
                       label: System.CPUTime.Posix.RUsage.getCpuTimePrecision2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD5n: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccD5D; else goto ccD5E;
       ccD5D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccD5E: // global
           (_ccD5h::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccD5h::I64 == 0) goto ccD5j; else goto ccD5i;
       ccD5j: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccD5i: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccD5h::I64;
           (_scD3Q::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] clk_tck();
           I64[Sp - 24] = block_ccD5l_info;
           R2 = _scD3Q::I64;
           Sp = Sp - 24;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD5l() //  [R1]
         { info_tbl: [(ccD5l,
                       label: block_ccD5l_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD5l: // global
           I64[Sp - 8] = block_ccD5q_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.absInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD5q() //  [R1]
         { info_tbl: [(ccD5q,
                       label: block_ccD5q_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD5q: // global
           I64[Sp] = block_ccD5u_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.signumInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD5u() //  [R1]
         { info_tbl: [(ccD5u,
                       label: block_ccD5u_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD5u: // global
           I64[Sp] = block_ccD5y_info;
           R3 = R1;
           R2 = System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD5y() //  [R1]
         { info_tbl: [(ccD5y,
                       label: block_ccD5y_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD5y: // global
           _scD3U::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccD5C_info;
           R3 = _scD3U::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Real.$w$sreduce_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD5C() //  [R1, R2]
         { info_tbl: [(ccD5C,
                       label: block_ccD5C_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD5C: // global
           R4 = R2;
           R3 = R1;
           R2 = GHC.Real.$fIntegralInteger_closure;
           Sp = Sp + 8;
           call GHC.Real.$w$s$cround_entry(R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:32.020292275 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision1_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision1_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision1_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision1_entry() //  []
         { info_tbl: [(ccD6h,
                       label: System.CPUTime.Posix.RUsage.getCpuTimePrecision1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD6h: // global
           R1 = System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:32.024315003 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCpuTimePrecision_closure" {
     System.CPUTime.Posix.RUsage.getCpuTimePrecision_closure:
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCpuTimePrecision_entry() //  []
         { info_tbl: [(ccD6t,
                       label: System.CPUTime.Posix.RUsage.getCpuTimePrecision_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD6t: // global
           call System.CPUTime.Posix.RUsage.getCpuTimePrecision1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:32.028131199 UTC

[section ""cstring" . lvl_rcCRt_bytes" {
     lvl_rcCRt_bytes:
         I8[] [103,101,116,114,117,115,97,103,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:07:32.030108715 UTC

[section ""data" . lvl1_rcCRu_closure" {
     lvl1_rcCRu_closure:
         const lvl1_rcCRu_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rcCRu_entry() //  [R1]
         { info_tbl: [(ccD6H,
                       label: lvl1_rcCRu_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD6H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccD6I; else goto ccD6J;
       ccD6I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccD6J: // global
           (_ccD6E::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccD6E::I64 == 0) goto ccD6G; else goto ccD6F;
       ccD6G: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccD6F: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccD6E::I64;
           R2 = lvl_rcCRt_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:32.034228058 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime2_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime2_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime2_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCPUTime2_entry() //  [R2]
         { info_tbl: [(ccD6Y,
                       label: System.CPUTime.Posix.RUsage.getCPUTime2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD6Y: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_rcCRu_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:32.037686459 UTC

[section ""data" . sat_scD42_closure" {
     sat_scD42_closure:
         const GHC.Types.I#_con_info;
         const 1000000;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:32.03941559 UTC

[section ""data" . sat_scD43_closure" {
     sat_scD43_closure:
         const :_con_info;
         const sat_scD42_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:07:32.041385394 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime3_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime3_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime3_info;
         const 0;
         const 0;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCPUTime3_entry() //  [R1]
         { info_tbl: [(ccD7d,
                       label: System.CPUTime.Posix.RUsage.getCPUTime3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD7d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccD7e; else goto ccD7f;
       ccD7e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccD7f: // global
           (_ccD7a::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccD7a::I64 == 0) goto ccD7c; else goto ccD7b;
       ccD7c: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccD7b: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccD7a::I64;
           R3 = sat_scD43_closure+2;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:32.046531136 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime1_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime1_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime1_info;
         const 0;
 },
 sat_scD4G_entry() //  [R1]
         { info_tbl: [(ccD7X,
                       label: sat_scD4G_info
                       rep:HeapRep 4 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD7X: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccD8t; else goto ccD8u;
       ccD8t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccD8u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccD7V_info;
           R2 = I64[R1 + 40];
           I64[Sp - 40] = I64[R1 + 16];
           I64[Sp - 32] = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 32];
           Sp = Sp - 48;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD7V() //  [R1]
         { info_tbl: [(ccD7V,
                       label: block_ccD7V_info
                       rep:StackRep [True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD7V: // global
           I64[Sp] = block_ccD80_info;
           R2 = I64[Sp + 24];
           P64[Sp + 24] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD80() //  [R1]
         { info_tbl: [(ccD80,
                       label: block_ccD80_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD80: // global
           I64[Sp] = block_ccD84_info;
           R3 = System.CPUTime.Posix.RUsage.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD84() //  [R1]
         { info_tbl: [(ccD84,
                       label: block_ccD84_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD84: // global
           I64[Sp] = block_ccD88_info;
           R2 = I64[Sp + 16];
           P64[Sp + 16] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD88() //  [R1]
         { info_tbl: [(ccD88,
                       label: block_ccD88_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD88: // global
           I64[Sp] = block_ccD8c_info;
           R2 = I64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD8c() //  [R1]
         { info_tbl: [(ccD8c,
                       label: block_ccD8c_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD8c: // global
           I64[Sp] = block_ccD8g_info;
           R3 = System.CPUTime.Posix.RUsage.getCPUTime3_closure;
           R2 = R1;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD8g() //  [R1]
         { info_tbl: [(ccD8g,
                       label: block_ccD8g_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD8g: // global
           _scD4z::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccD8k_info;
           R3 = _scD4z::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD8k() //  [R1]
         { info_tbl: [(ccD8k,
                       label: block_ccD8k_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD8k: // global
           _scD4C::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccD8o_info;
           R3 = _scD4C::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD8o() //  [R1]
         { info_tbl: [(ccD8o,
                       label: block_ccD8o_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD8o: // global
           _scD4E::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_ccD8s_info;
           R3 = _scD4E::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 8, res: 8, upd: 24;
     }
 },
 _ccD8s() //  [R1]
         { info_tbl: [(ccD8s,
                       label: block_ccD8s_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD8s: // global
           R3 = System.CPUTime.Posix.RUsage.getCPUTime3_closure;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 System.CPUTime.Posix.RUsage.getCPUTime1_entry() //  []
         { info_tbl: [(ccD8H,
                       label: System.CPUTime.Posix.RUsage.getCPUTime1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD8H: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccD8I; else goto ccD8J;
       ccD8I: // global
           R1 = System.CPUTime.Posix.RUsage.getCPUTime1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccD8J: // global
           I64[Sp - 8] = block_ccD7t_info;
           R1 = 272;
           Sp = Sp - 8;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _ccD7t() //  [R1]
         { info_tbl: [(ccD7t,
                       label: block_ccD7t_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD7t: // global
           _scD4b::I64 = R1 + 16;
           (_scD4f::I64) = call "capi" arg hints:  [‘signed’,
                                                    PtrHint]  result hints:  [‘signed’] ghczuwrapperZC0ZCbaseZCSystemziCPUTimeziPosixziRUsageZCgetrusage(0, _scD4b::I64);
           _scD4g::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_scD4f::I64));
           if (_scD4g::I64 == (-1)) goto ccD8S; else goto ucD8X;
       ccD8S: // global
           (_scD4K::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _scD4K::I64;
           Sp = Sp + 8;
           call System.CPUTime.Posix.RUsage.getCPUTime2_entry(R2) args: 8, res: 0, upd: 8;
       ucD8X: // global
           I64[Sp - 16] = _scD4b::I64;
           I64[Sp - 8] = _scD4g::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call _ccD7F() args: 0, res: 0, upd: 0;
     }
 },
 _ccD7F() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD7F: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccD8P; else goto ccD8O;
       ccD8P: // global
           HpAlloc = 48;
           I64[Sp - 8] = block_ccD7E_info;
           R1 = I64[Sp + 8];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccD8O: // global
           _scD4b::I64 = I64[Sp];
           _scD4j::I64 = I64[_scD4b::I64];
           _scD4n::I64 = I64[_scD4b::I64 + 8];
           _scD4o::I64 = _scD4b::I64 + 16;
           _scD4r::I64 = I64[_scD4o::I64];
           _scD4v::I64 = I64[_scD4o::I64 + 8];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 40] = sat_scD4G_info;
           I64[Hp - 24] = _scD4j::I64;
           I64[Hp - 16] = _scD4n::I64;
           I64[Hp - 8] = _scD4r::I64;
           I64[Hp] = _scD4v::I64;
           R1 = Hp - 40;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _ccD7E() //  [R1]
         { info_tbl: [(ccD7E,
                       label: block_ccD7E_info
                       rep:StackRep [True, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccD7E: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _ccD7F() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:32.073867291 UTC

[section ""data" . System.CPUTime.Posix.RUsage.getCPUTime_closure" {
     System.CPUTime.Posix.RUsage.getCPUTime_closure:
         const System.CPUTime.Posix.RUsage.getCPUTime_info;
         const 0;
 },
 System.CPUTime.Posix.RUsage.getCPUTime_entry() //  []
         { info_tbl: [(ccDa4,
                       label: System.CPUTime.Posix.RUsage.getCPUTime_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       ccDa4: // global
           call System.CPUTime.Posix.RUsage.getCPUTime1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:07:32.077280855 UTC

[section ""relreadonly" . ScD54_srt" {
     ScD54_srt:
         const sat_scD3M_closure;
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Real.$fIntegralInteger_closure;
         const GHC.Real.$w$sreduce_closure;
         const GHC.Real.$w$s$cround_closure;
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision3_closure;
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision2_closure;
         const System.CPUTime.Posix.RUsage.getCpuTimePrecision1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_rcCRu_closure;
         const sat_scD43_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const System.CPUTime.Posix.RUsage.getCPUTime3_closure;
         const System.CPUTime.Posix.RUsage.getCPUTime1_closure;
         const System.CPUTime.Posix.RUsage.getCPUTime2_closure;
 }]

