
==================== Tidy Core ====================
2018-03-16 16:04:59.190394692 UTC

Result size of Tidy Core
  = {terms: 192, types: 269, coercions: 36, joins: 2/2}

-- RHS size: {terms: 20, types: 40, coercions: 7, joins: 0/0}
Control.Exception.$fFunctorHandler_$cfmap
  :: forall a b. (a -> b) -> Handler a -> Handler b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a9TQn)
                 (@ b_a9TQo)
                 (f_a9TO6 [Occ=OnceL!] :: a_a9TQn -> b_a9TQo)
                 (ds_d9TRq [Occ=Once!] :: Handler a_a9TQn) ->
                 case ds_d9TRq of
                 { Handler @ e_a9TQq $dException_a9TQr [Occ=Once]
                           h_a9TO7 [Occ=OnceL!] ->
                 Control.Exception.Handler
                   @ b_a9TQo
                   @ e_a9TQq
                   $dException_a9TQr
                   ((\ (x_i7Rxi [Occ=Once] :: e_a9TQq)
                       (s_i7Vb0 [Occ=Once] :: State# RealWorld) ->
                       case ((h_a9TO7 x_i7Rxi)
                             `cast` (GHC.Types.N:IO[0] <a_a9TQn>_R
                                     :: (IO a_a9TQn :: *)
                                        ~R# (State# RealWorld
                                             -> (# State# RealWorld, a_a9TQn #) :: *)))
                              s_i7Vb0
                       of
                       { (# ipv_i7Vb3 [Occ=Once], ipv1_i7Vb4 [Occ=Once] #) ->
                       (# ipv_i7Vb3, f_a9TO6 ipv1_i7Vb4 #)
                       })
                    `cast` (<e_a9TQq>_R ->_R Sym (GHC.Types.N:IO[0] <b_a9TQo>_R)
                            :: (e_a9TQq
                                -> State# RealWorld -> (# State# RealWorld, b_a9TQo #) :: *)
                               ~R# (e_a9TQq -> IO b_a9TQo :: *)))
                 }}]
Control.Exception.$fFunctorHandler_$cfmap
  = \ (@ a_a9TQn)
      (@ b_a9TQo)
      (f_a9TO6 :: a_a9TQn -> b_a9TQo)
      (ds_d9TRq :: Handler a_a9TQn) ->
      case ds_d9TRq of { Handler @ e_a9TQq $dException_a9TQr h_a9TO7 ->
      Control.Exception.Handler
        @ b_a9TQo
        @ e_a9TQq
        $dException_a9TQr
        ((\ (x_i7Rxi :: e_a9TQq) (s_i7Vb0 :: State# RealWorld) ->
            case ((h_a9TO7 x_i7Rxi)
                  `cast` (GHC.Types.N:IO[0] <a_a9TQn>_R
                          :: (IO a_a9TQn :: *)
                             ~R# (State# RealWorld -> (# State# RealWorld, a_a9TQn #) :: *)))
                   s_i7Vb0
            of
            { (# ipv_i7Vb3, ipv1_i7Vb4 #) ->
            (# ipv_i7Vb3, f_a9TO6 ipv1_i7Vb4 #)
            })
         `cast` (<e_a9TQq>_R ->_R Sym (GHC.Types.N:IO[0] <b_a9TQo>_R)
                 :: (e_a9TQq
                     -> State# RealWorld -> (# State# RealWorld, b_a9TQo #) :: *)
                    ~R# (e_a9TQq -> IO b_a9TQo :: *)))
      }

-- RHS size: {terms: 19, types: 39, coercions: 7, joins: 0/0}
Control.Exception.$fFunctorHandler_$c<$
  :: forall a b. a -> Handler b -> Handler a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_a9TQH)
                 (@ b_a9TQI)
                 (x_i9DkS [Occ=OnceL] :: a_a9TQH)
                 (ds_d9TRq [Occ=Once!] :: Handler b_a9TQI) ->
                 case ds_d9TRq of
                 { Handler @ e_a9TQq $dException_a9TQr [Occ=Once]
                           h_a9TO7 [Occ=OnceL!] ->
                 Control.Exception.Handler
                   @ a_a9TQH
                   @ e_a9TQq
                   $dException_a9TQr
                   ((\ (x1_i7Rxi [Occ=Once] :: e_a9TQq)
                       (s_i7Vb0 [Occ=Once] :: State# RealWorld) ->
                       case ((h_a9TO7 x1_i7Rxi)
                             `cast` (GHC.Types.N:IO[0] <b_a9TQI>_R
                                     :: (IO b_a9TQI :: *)
                                        ~R# (State# RealWorld
                                             -> (# State# RealWorld, b_a9TQI #) :: *)))
                              s_i7Vb0
                       of
                       { (# ipv_i7Vb3 [Occ=Once], _ [Occ=Dead] #) ->
                       (# ipv_i7Vb3, x_i9DkS #)
                       })
                    `cast` (<e_a9TQq>_R ->_R Sym (GHC.Types.N:IO[0] <a_a9TQH>_R)
                            :: (e_a9TQq
                                -> State# RealWorld -> (# State# RealWorld, a_a9TQH #) :: *)
                               ~R# (e_a9TQq -> IO a_a9TQH :: *)))
                 }}]
Control.Exception.$fFunctorHandler_$c<$
  = \ (@ a_a9TQH)
      (@ b_a9TQI)
      (x_i9DkS :: a_a9TQH)
      (ds_d9TRq :: Handler b_a9TQI) ->
      case ds_d9TRq of { Handler @ e_a9TQq $dException_a9TQr h_a9TO7 ->
      Control.Exception.Handler
        @ a_a9TQH
        @ e_a9TQq
        $dException_a9TQr
        ((\ (x1_i7Rxi :: e_a9TQq) (s_i7Vb0 :: State# RealWorld) ->
            case ((h_a9TO7 x1_i7Rxi)
                  `cast` (GHC.Types.N:IO[0] <b_a9TQI>_R
                          :: (IO b_a9TQI :: *)
                             ~R# (State# RealWorld -> (# State# RealWorld, b_a9TQI #) :: *)))
                   s_i7Vb0
            of
            { (# ipv_i7Vb3, ipv1_i7Vb4 #) ->
            (# ipv_i7Vb3, x_i9DkS #)
            })
         `cast` (<e_a9TQq>_R ->_R Sym (GHC.Types.N:IO[0] <a_a9TQH>_R)
                 :: (e_a9TQq
                     -> State# RealWorld -> (# State# RealWorld, a_a9TQH #) :: *)
                    ~R# (e_a9TQq -> IO a_a9TQH :: *)))
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Control.Exception.$fFunctorHandler [InlPrag=NOUSERINLINE CONLIKE]
  :: Functor Handler
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Base.C:Functor TYPE: Handler
                          Control.Exception.$fFunctorHandler_$cfmap
                          Control.Exception.$fFunctorHandler_$c<$]
Control.Exception.$fFunctorHandler
  = GHC.Base.C:Functor
      @ Handler
      Control.Exception.$fFunctorHandler_$cfmap
      Control.Exception.$fFunctorHandler_$c<$

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
Control.Exception.catches2 :: forall a. SomeException -> IO a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
Control.Exception.catches2
  = \ (@ a_a9TQd) (e1_i8SfX :: SomeException) ->
      throw
        @ SomeException
        @ (IO a_a9TQd)
        GHC.Exception.$fExceptionSomeException
        e1_i8SfX

-- RHS size: {terms: 33, types: 44, coercions: 6, joins: 2/2}
Control.Exception.catches1
  :: forall a.
     IO a
     -> [Handler a] -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=3,
 Str=<L,1*C1(U)><L,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 144 0}]
Control.Exception.catches1
  = \ (@ a_a9TQd)
      (io_a9TOa :: IO a_a9TQd)
      (handlers_a9TOb :: [Handler a_a9TQd])
      (eta_i8SfW :: State# RealWorld) ->
      catch#
        @ a_a9TQd
        @ SomeException
        (io_a9TOa
         `cast` (GHC.Types.N:IO[0] <a_a9TQd>_R
                 :: (IO a_a9TQd :: *)
                    ~R# (State# RealWorld -> (# State# RealWorld, a_a9TQd #) :: *)))
        ((\ (e1_i8SfX [OS=OneShot] :: SomeException) ->
            join {
              z_i7Jci [Dmd=<L,C(U)>] :: IO a_a9TQd
              [LclId[JoinId(0)], Str=x]
              z_i7Jci = Control.Exception.catches2 @ a_a9TQd e1_i8SfX } in
            joinrec {
              go_i7Jcj [Occ=LoopBreaker] :: [Handler a_a9TQd] -> IO a_a9TQd
              [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []]
              go_i7Jcj (ds_i7Jck :: [Handler a_a9TQd])
                = case ds_i7Jck of {
                    [] -> jump z_i7Jci;
                    : y_i7Jcp ys_i7Jcq ->
                      case y_i7Jcp of
                      { Handler @ e_a9TPF $dException_a9TPG handler_a9TOf ->
                      case fromException @ e_a9TPF $dException_a9TPG e1_i8SfX of {
                        Nothing -> jump go_i7Jcj ys_i7Jcq;
                        Just e'_a9TOh -> handler_a9TOf e'_a9TOh
                      }
                      }
                  }; } in
            jump go_i7Jcj handlers_a9TOb)
         `cast` (<SomeException>_R ->_R GHC.Types.N:IO[0] <a_a9TQd>_R
                 :: (SomeException -> IO a_a9TQd :: *)
                    ~R# (SomeException
                         -> State# RealWorld -> (# State# RealWorld, a_a9TQd #) :: *)))
        eta_i8SfW

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
catches :: forall a. IO a -> [Handler a] -> IO a
[GblId,
 Arity=3,
 Str=<L,1*C1(U)><L,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Control.Exception.catches1
               `cast` (forall (a :: <*>_N).
                       <IO a>_R ->_R <[Handler a]>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           IO a
                           -> [Handler a]
                           -> State# RealWorld
                           -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. IO a -> [Handler a] -> IO a :: *))}]
catches
  = Control.Exception.catches1
    `cast` (forall (a :: <*>_N).
            <IO a>_R ->_R <[Handler a]>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                IO a
                -> [Handler a]
                -> State# RealWorld
                -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. IO a -> [Handler a] -> IO a :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Control.Exception.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Control.Exception.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Control.Exception.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Control.Exception.$trModule3
  = GHC.Types.TrNameS Control.Exception.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Control.Exception.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
Control.Exception.$trModule2 = "Control.Exception"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Control.Exception.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Control.Exception.$trModule1
  = GHC.Types.TrNameS Control.Exception.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Control.Exception.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Control.Exception.$trModule
  = GHC.Types.Module
      Control.Exception.$trModule3 Control.Exception.$trModule1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_r9TUJ :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep_r9TUJ = GHC.Types.KindRepVar 1#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep1_r9TUK :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep1_r9TUK
  = GHC.Types.: @ KindRep $krep_r9TUJ (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2_r9TUL :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_r9TUL
  = GHC.Types.KindRepTyConApp GHC.Exception.$tcException $krep1_r9TUK

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep3_r9TUM :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep3_r9TUM = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep4_r9TUN :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep4_r9TUN
  = GHC.Types.: @ KindRep $krep3_r9TUM (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5_r9TUO :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep5_r9TUO
  = GHC.Types.KindRepTyConApp GHC.Types.$tcIO $krep4_r9TUN

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6_r9TUP :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep6_r9TUP = GHC.Types.KindRepFun $krep_r9TUJ $krep5_r9TUO

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Control.Exception.$tcHandler2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Control.Exception.$tcHandler2 = "Handler"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Control.Exception.$tcHandler1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Control.Exception.$tcHandler1
  = GHC.Types.TrNameS Control.Exception.$tcHandler2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Control.Exception.$tcHandler :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Control.Exception.$tcHandler
  = GHC.Types.TyCon
      6426835558342087658##
      14166740461602238008##
      Control.Exception.$trModule
      Control.Exception.$tcHandler1
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_r9TUQ :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep7_r9TUQ
  = GHC.Types.KindRepTyConApp
      Control.Exception.$tcHandler $krep4_r9TUN

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_r9TUR :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep8_r9TUR = GHC.Types.KindRepFun $krep6_r9TUP $krep7_r9TUQ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Control.Exception.$tc'Handler1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Control.Exception.$tc'Handler1
  = GHC.Types.KindRepFun $krep2_r9TUL $krep8_r9TUR

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Control.Exception.$tc'Handler3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Control.Exception.$tc'Handler3 = "'Handler"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Control.Exception.$tc'Handler2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Control.Exception.$tc'Handler2
  = GHC.Types.TrNameS Control.Exception.$tc'Handler3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Control.Exception.$tc'Handler :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Control.Exception.$tc'Handler
  = GHC.Types.TyCon
      23626058257872273##
      1528997583294198943##
      Control.Exception.$trModule
      Control.Exception.$tc'Handler2
      2#
      Control.Exception.$tc'Handler1

-- RHS size: {terms: 4, types: 9, coercions: 0, joins: 0/0}
lvl_r9TUS :: State# RealWorld -> (# State# RealWorld, () #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []]
lvl_r9TUS
  = \ (s_i7IAV [OS=OneShot] :: State# RealWorld) ->
      (# s_i7IAV, GHC.Tuple.() #)

-- RHS size: {terms: 19, types: 29, coercions: 0, joins: 0/0}
Control.Exception.allowInterrupt1
  :: State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_i9TRX [Occ=Once] :: State# RealWorld) ->
                 case getMaskingState# s_i9TRX of
                 { (# ipv_i9TS0 [Occ=Once*], ipv1_i9TS1 [Occ=Once!] #) ->
                 case ipv1_i9TS1 of {
                   __DEFAULT ->
                     unmaskAsyncExceptions#
                       @ ()
                       (\ (s1_i7IAV [Occ=Once, OS=OneShot] :: State# RealWorld) ->
                          (# s1_i7IAV, GHC.Tuple.() #))
                       ipv_i9TS0;
                   0# -> (# ipv_i9TS0, GHC.Tuple.() #);
                   1# -> (# ipv_i9TS0, GHC.Tuple.() #)
                 }
                 }}]
Control.Exception.allowInterrupt1
  = \ (s_i9TRX :: State# RealWorld) ->
      case getMaskingState# s_i9TRX of { (# ipv_i9TS0, ipv1_i9TS1 #) ->
      case ipv1_i9TS1 of {
        __DEFAULT -> unmaskAsyncExceptions# @ () lvl_r9TUS ipv_i9TS0;
        0# -> (# ipv_i9TS0, GHC.Tuple.() #);
        1# -> (# ipv_i9TS0, GHC.Tuple.() #)
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
allowInterrupt :: IO ()
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Control.Exception.allowInterrupt1
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (IO () :: *))}]
allowInterrupt
  = Control.Exception.allowInterrupt1
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: (State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (IO () :: *))


