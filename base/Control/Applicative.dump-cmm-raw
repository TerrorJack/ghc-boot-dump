
==================== Raw Cmm ====================
2018-03-16 16:06:45.728246144 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:45.730775301 UTC

[section ""data" . Control.Applicative.$fFunctorWrappedMonad1_closure" {
     Control.Applicative.$fFunctorWrappedMonad1_closure:
         const Control.Applicative.$fFunctorWrappedMonad1_info;
 },
 lvl_sbSvM_entry() //  [R1]
         { []
         }
     {offset
       cbTys: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbTyt; else goto cbTyu;
       cbTyt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTyu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_sbSvM_info" {
     lvl_sbSvM_info:
         const lvl_sbSvM_entry;
         const 2;
         const 18;
 },
 sat_sbSvO_entry() //  [R1]
         { []
         }
     {offset
       cbTyA: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSvO_info" {
     sat_sbSvO_info:
         const sat_sbSvO_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Control.Applicative.$fFunctorWrappedMonad1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbTyD: // global
           _sbSvL::P64 = R4;
           _sbSvK::P64 = R3;
           _sbSvJ::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbTyE; else goto cbTyF;
       cbTyF: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbTyH; else goto cbTyG;
       cbTyH: // global
           HpAlloc = 48;
           goto cbTyE;
       cbTyE: // global
           R4 = _sbSvL::P64;
           R3 = _sbSvK::P64;
           R2 = _sbSvJ::P64;
           R1 = Control.Applicative.$fFunctorWrappedMonad1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTyG: // global
           I64[Hp - 40] = lvl_sbSvM_info;
           P64[Hp - 24] = _sbSvJ::P64;
           P64[Hp - 16] = _sbSvK::P64;
           I64[Hp - 8] = sat_sbSvO_info;
           P64[Hp] = Hp - 40;
           R2 = _sbSvJ::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sbSvL::P64;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fFunctorWrappedMonad1_info" {
     Control.Applicative.$fFunctorWrappedMonad1_info:
         const Control.Applicative.$fFunctorWrappedMonad1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.738521242 UTC

[section ""data" . Control.Applicative.$fFunctorWrappedMonad_closure" {
     Control.Applicative.$fFunctorWrappedMonad_closure:
         const Control.Applicative.$fFunctorWrappedMonad_info;
 },
 sat_sbSvT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbTz6: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fFunctorWrappedMonad1_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSvT_info" {
     sat_sbSvT_info:
         const sat_sbSvT_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSvS_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbTze: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.liftM_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSvS_info" {
     sat_sbSvS_info:
         const sat_sbSvS_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Control.Applicative.$fFunctorWrappedMonad_entry() //  [R2]
         { []
         }
     {offset
       cbTzi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbTzm; else goto cbTzl;
       cbTzm: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Control.Applicative.$fFunctorWrappedMonad_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbTzl: // global
           I64[Hp - 48] = sat_sbSvT_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sbSvS_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Base.C:Functor_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fFunctorWrappedMonad_info" {
     Control.Applicative.$fFunctorWrappedMonad_info:
         const Control.Applicative.$fFunctorWrappedMonad_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.745666485 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedMonad3_closure" {
     Control.Applicative.$fApplicativeWrappedMonad3_closure:
         const Control.Applicative.$fApplicativeWrappedMonad3_info;
 },
 Control.Applicative.$fApplicativeWrappedMonad3_entry() //  [R2, R3]
         { []
         }
     {offset
       cbTzG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbTzH; else goto cbTzI;
       cbTzH: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fApplicativeWrappedMonad3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTzI: // global
           I64[Sp - 16] = block_cbTzE_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedMonad3_info" {
     Control.Applicative.$fApplicativeWrappedMonad3_info:
         const Control.Applicative.$fApplicativeWrappedMonad3_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbTzE() //  [R1]
         { []
         }
     {offset
       cbTzE: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbTzE_info" {
     block_cbTzE_info:
         const _cbTzE;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.751929573 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedMonad2_closure" {
     Control.Applicative.$fApplicativeWrappedMonad2_closure:
         const Control.Applicative.$fApplicativeWrappedMonad2_info;
 },
 lvl_sbSw0_entry() //  [R1]
         { []
         }
     {offset
       cbTA6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbTA7; else goto cbTA8;
       cbTA7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTA8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Base.breakpoint_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_sbSw0_info" {
     lvl_sbSw0_info:
         const lvl_sbSw0_entry;
         const 1;
         const 16;
 },
 sat_sbSw2_entry() //  [R1]
         { []
         }
     {offset
       cbTAe: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSw2_info" {
     sat_sbSw2_info:
         const sat_sbSw2_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbSw3_entry() //  [R1]
         { []
         }
     {offset
       cbTAh: // global
           _sbSw3::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbTAi; else goto cbTAj;
       cbTAj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbTAl; else goto cbTAk;
       cbTAl: // global
           HpAlloc = 40;
           goto cbTAi;
       cbTAi: // global
           R1 = _sbSw3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTAk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSw3::P64;
           _sbSvX::P64 = P64[_sbSw3::P64 + 16];
           _sbSvY::P64 = P64[_sbSw3::P64 + 24];
           I64[Hp - 32] = lvl_sbSw0_info;
           P64[Hp - 16] = _sbSvX::P64;
           I64[Hp - 8] = sat_sbSw2_info;
           P64[Hp] = Hp - 32;
           R2 = _sbSvX::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sbSvY::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSw3_info" {
     sat_sbSw3_info:
         const sat_sbSw3_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fApplicativeWrappedMonad2_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbTAm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbTAq; else goto cbTAp;
       cbTAq: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fApplicativeWrappedMonad2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTAp: // global
           I64[Hp - 24] = sat_sbSw3_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R4 = R4;
           R3 = Hp - 24;
           R2 = R2;
           call GHC.Base.ap_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedMonad2_info" {
     Control.Applicative.$fApplicativeWrappedMonad2_info:
         const Control.Applicative.$fApplicativeWrappedMonad2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.762764471 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedMonad1_closure" {
     Control.Applicative.$fApplicativeWrappedMonad1_closure:
         const Control.Applicative.$fApplicativeWrappedMonad1_info;
 },
 lvl_sbSw8_entry() //  [R1]
         { []
         }
     {offset
       cbTAV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbTAW; else goto cbTAX;
       cbTAW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTAX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_sbSw8_info" {
     lvl_sbSw8_info:
         const lvl_sbSw8_entry;
         const 2;
         const 18;
 },
 sat_sbSwa_entry() //  [R1]
         { []
         }
     {offset
       cbTB3: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSwa_info" {
     sat_sbSwa_info:
         const sat_sbSwa_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbSwb_entry() //  [R1, R2]
         { []
         }
     {offset
       cbTB6: // global
           _sbSw7::P64 = R2;
           _sbSwb::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cbTB7; else goto cbTB8;
       cbTB8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbTBa; else goto cbTB9;
       cbTBa: // global
           HpAlloc = 48;
           goto cbTB7;
       cbTB7: // global
           R2 = _sbSw7::P64;
           R1 = _sbSwb::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbTB9: // global
           _sbSw4::P64 = P64[_sbSwb::P64 + 7];
           _sbSw6::P64 = P64[_sbSwb::P64 + 15];
           I64[Hp - 40] = lvl_sbSw8_info;
           P64[Hp - 24] = _sbSw4::P64;
           P64[Hp - 16] = _sbSw7::P64;
           I64[Hp - 8] = sat_sbSwa_info;
           P64[Hp] = Hp - 40;
           R2 = _sbSw4::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sbSw6::P64;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSwb_info" {
     sat_sbSwb_info:
         const sat_sbSwb_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Control.Applicative.$fApplicativeWrappedMonad1_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbTBb: // global
           _sbSw6::P64 = R4;
           _sbSw5::P64 = R3;
           _sbSw4::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbTBc; else goto cbTBd;
       cbTBd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbTBf; else goto cbTBe;
       cbTBf: // global
           HpAlloc = 24;
           goto cbTBc;
       cbTBc: // global
           R4 = _sbSw6::P64;
           R3 = _sbSw5::P64;
           R2 = _sbSw4::P64;
           R1 = Control.Applicative.$fApplicativeWrappedMonad1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTBe: // global
           I64[Hp - 16] = sat_sbSwb_info;
           P64[Hp - 8] = _sbSw4::P64;
           P64[Hp] = _sbSw6::P64;
           R2 = _sbSw4::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sbSw5::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedMonad1_info" {
     Control.Applicative.$fApplicativeWrappedMonad1_info:
         const Control.Applicative.$fApplicativeWrappedMonad1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.773829965 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedMonad_closure" {
     Control.Applicative.$fApplicativeWrappedMonad_closure:
         const Control.Applicative.$fApplicativeWrappedMonad_info;
 },
 sat_sbSwn_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbTBJ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fApplicativeWrappedMonad1_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSwn_info" {
     sat_sbSwn_info:
         const sat_sbSwn_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSwm_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbTBR: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fApplicativeWrappedMonad2_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSwm_info" {
     sat_sbSwm_info:
         const sat_sbSwm_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSwl_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cbTBZ: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.Base.liftM2_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSwl_info" {
     sat_sbSwl_info:
         const sat_sbSwl_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sbSwh_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbTC7: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.ap_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSwh_info" {
     sat_sbSwh_info:
         const sat_sbSwh_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSwe_entry() //  [R1, R2]
         { []
         }
     {offset
       cbTCf: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Control.Applicative.$fApplicativeWrappedMonad3_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSwe_info" {
     sat_sbSwe_info:
         const sat_sbSwe_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbSwd_entry() //  [R1]
         { []
         }
     {offset
       cbTCm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbTCn; else goto cbTCo;
       cbTCn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTCo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fFunctorWrappedMonad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSwd_info" {
     sat_sbSwd_info:
         const sat_sbSwd_entry;
         const 1;
         const 16;
 },
 Control.Applicative.$fApplicativeWrappedMonad_entry() //  [R2]
         { []
         }
     {offset
       cbTCq: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto cbTCu; else goto cbTCt;
       cbTCu: // global
           HpAlloc = 160;
           R2 = R2;
           R1 = Control.Applicative.$fApplicativeWrappedMonad_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbTCt: // global
           I64[Hp - 152] = sat_sbSwn_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sbSwm_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sbSwl_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbSwh_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sbSwe_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sbSwd_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = GHC.Base.C:Applicative_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = Hp - 87;
           P64[Hp - 24] = Hp - 102;
           P64[Hp - 16] = Hp - 117;
           P64[Hp - 8] = Hp - 134;
           P64[Hp] = Hp - 150;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedMonad_info" {
     Control.Applicative.$fApplicativeWrappedMonad_info:
         const Control.Applicative.$fApplicativeWrappedMonad_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.786971728 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedMonad_$cp1Alternative_closure" {
     Control.Applicative.$fAlternativeWrappedMonad_$cp1Alternative_closure:
         const Control.Applicative.$fAlternativeWrappedMonad_$cp1Alternative_info;
 },
 sat_sbSwp_entry() //  [R1]
         { []
         }
     {offset
       cbTD7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbTD8; else goto cbTD9;
       cbTD8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTD9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSwp_info" {
     sat_sbSwp_info:
         const sat_sbSwp_entry;
         const 1;
         const 16;
 },
 Control.Applicative.$fAlternativeWrappedMonad_$cp1Alternative_entry() //  [R2]
         { []
         }
     {offset
       cbTDa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbTDe; else goto cbTDd;
       cbTDe: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeWrappedMonad_$cp1Alternative_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbTDd: // global
           I64[Hp - 16] = sat_sbSwp_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Control.Applicative.$fApplicativeWrappedMonad_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedMonad_$cp1Alternative_info" {
     Control.Applicative.$fAlternativeWrappedMonad_$cp1Alternative_info:
         const Control.Applicative.$fAlternativeWrappedMonad_$cp1Alternative_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.79564738 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedMonad_$csome_closure" {
     Control.Applicative.$fAlternativeWrappedMonad_$csome_closure:
         const Control.Applicative.$fAlternativeWrappedMonad_$csome_info;
 },
 sat_sbSww_entry() //  [R1]
         { []
         }
     {offset
       cbTDG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbTDH; else goto cbTDI;
       cbTDH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTDI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbTDE_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSww_info" {
     sat_sbSww_info:
         const sat_sbSww_entry;
         const 1;
         const 16;
 },
 _cbTDE() //  [R1]
         { []
         }
     {offset
       cbTDE: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbTDE_info" {
     block_cbTDE_info:
         const _cbTDE;
         const 0;
         const 30;
 },
 m2_sbSwt_entry() //  [R1]
         { []
         }
     {offset
       cbTDM: // global
           _sbSwt::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbTDN; else goto cbTDO;
       cbTDO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbTDQ; else goto cbTDP;
       cbTDQ: // global
           HpAlloc = 24;
           goto cbTDN;
       cbTDN: // global
           R1 = _sbSwt::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTDP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSwt::P64;
           _sbSwq::P64 = P64[_sbSwt::P64 + 16];
           _sbSws::P64 = P64[_sbSwt::P64 + 24];
           _sbSwu::P64 = P64[_sbSwt::P64 + 32];
           I64[Hp - 16] = sat_sbSww_info;
           P64[Hp] = _sbSws::P64;
           R2 = _sbSwq::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sbSwu::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Base.mplus_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m2_sbSwt_info" {
     m2_sbSwt_info:
         const m2_sbSwt_entry;
         const 3;
         const 15;
 },
 sat_sbSwA_entry() //  [R1, R2]
         { []
         }
     {offset
       cbTE5: // global
           _sbSwy::P64 = R2;
           _sbSwA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbTE6; else goto cbTE7;
       cbTE7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbTE9; else goto cbTE8;
       cbTE9: // global
           HpAlloc = 24;
           goto cbTE6;
       cbTE6: // global
           R2 = _sbSwy::P64;
           R1 = _sbSwA::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbTE8: // global
           _sbSws::P64 = P64[_sbSwA::P64 + 7];
           _sbSwx::P64 = P64[_sbSwA::P64 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sbSwx::P64;
           P64[Hp] = _sbSwy::P64;
           R2 = _sbSws::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSwA_info" {
     sat_sbSwA_info:
         const sat_sbSwA_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sbSwB_entry() //  [R1, R2]
         { []
         }
     {offset
       cbTEa: // global
           _sbSwx::P64 = R2;
           _sbSwB::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cbTEb; else goto cbTEc;
       cbTEc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbTEe; else goto cbTEd;
       cbTEe: // global
           HpAlloc = 24;
           goto cbTEb;
       cbTEb: // global
           R2 = _sbSwx::P64;
           R1 = _sbSwB::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbTEd: // global
           _sbSws::P64 = P64[_sbSwB::P64 + 7];
           _sbSwt::P64 = P64[_sbSwB::P64 + 15];
           I64[Hp - 16] = sat_sbSwA_info;
           P64[Hp - 8] = _sbSws::P64;
           P64[Hp] = _sbSwx::P64;
           R2 = _sbSws::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sbSwt::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSwB_info" {
     sat_sbSwB_info:
         const sat_sbSwB_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 some_v_sbSwu_entry() //  [R1]
         { []
         }
     {offset
       cbTEf: // global
           _sbSwu::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbTEg; else goto cbTEh;
       cbTEh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbTEj; else goto cbTEi;
       cbTEj: // global
           HpAlloc = 24;
           goto cbTEg;
       cbTEg: // global
           R1 = _sbSwu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTEi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSwu::P64;
           _sbSwr::P64 = P64[_sbSwu::P64 + 16];
           _sbSws::P64 = P64[_sbSwu::P64 + 24];
           _sbSwt::P64 = P64[_sbSwu::P64 + 32];
           I64[Hp - 16] = sat_sbSwB_info;
           P64[Hp - 8] = _sbSws::P64;
           P64[Hp] = _sbSwt::P64;
           R2 = _sbSws::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sbSwr::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . some_v_sbSwu_info" {
     some_v_sbSwu_info:
         const some_v_sbSwu_entry;
         const 3;
         const 15;
 },
 Control.Applicative.$fAlternativeWrappedMonad_$csome_entry() //  [R2,
                                                                   R3]
         { []
         }
     {offset
       cbTEk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbTEl; else goto cbTEm;
       cbTEl: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeWrappedMonad_$csome_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTEm: // global
           I64[Sp - 24] = block_cbTDr_info;
           _sbSwq::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _sbSwq::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedMonad_$csome_info" {
     Control.Applicative.$fAlternativeWrappedMonad_$csome_info:
         const Control.Applicative.$fAlternativeWrappedMonad_$csome_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbTDr() //  [R1]
         { []
         }
     {offset
       cbTDr: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbTEp; else goto cbTEo;
       cbTEp: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbTEo: // global
           I64[Hp - 72] = m2_sbSwt_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           _cbTDw::P64 = Hp - 32;
           P64[Hp - 40] = _cbTDw::P64;
           I64[Hp - 32] = some_v_sbSwu_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 72;
           R1 = _cbTDw::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbTDr_info" {
     block_cbTDr_info:
         const _cbTDr;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.815282941 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedMonad_$cmany_closure" {
     Control.Applicative.$fAlternativeWrappedMonad_$cmany_closure:
         const Control.Applicative.$fAlternativeWrappedMonad_$cmany_info;
 },
 $dApplicative_sbSwF_entry() //  [R1]
         { []
         }
     {offset
       cbTFe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbTFf; else goto cbTFg;
       cbTFf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTFg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dApplicative_sbSwF_info" {
     $dApplicative_sbSwF_info:
         const $dApplicative_sbSwF_entry;
         const 1;
         const 16;
 },
 sat_sbSwN_entry() //  [R1]
         { []
         }
     {offset
       cbTFn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbTFo; else goto cbTFp;
       cbTFo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTFp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbTFl_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSwN_info" {
     sat_sbSwN_info:
         const sat_sbSwN_entry;
         const 1;
         const 16;
 },
 _cbTFl() //  [R1]
         { []
         }
     {offset
       cbTFl: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbTFl_info" {
     block_cbTFl_info:
         const _cbTFl;
         const 0;
         const 30;
 },
 sat_sbSwJ_entry() //  [R1, R2]
         { []
         }
     {offset
       cbTFI: // global
           _sbSwH::P64 = R2;
           _sbSwJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbTFJ; else goto cbTFK;
       cbTFK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbTFM; else goto cbTFL;
       cbTFM: // global
           HpAlloc = 24;
           goto cbTFJ;
       cbTFJ: // global
           R2 = _sbSwH::P64;
           R1 = _sbSwJ::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbTFL: // global
           _sbSwF::P64 = P64[_sbSwJ::P64 + 7];
           _sbSwG::P64 = P64[_sbSwJ::P64 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sbSwG::P64;
           P64[Hp] = _sbSwH::P64;
           R2 = _sbSwF::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSwJ_info" {
     sat_sbSwJ_info:
         const sat_sbSwJ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sbSwK_entry() //  [R1, R2]
         { []
         }
     {offset
       cbTFN: // global
           _sbSwG::P64 = R2;
           _sbSwK::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cbTFO; else goto cbTFP;
       cbTFP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbTFR; else goto cbTFQ;
       cbTFR: // global
           HpAlloc = 24;
           goto cbTFO;
       cbTFO: // global
           R2 = _sbSwG::P64;
           R1 = _sbSwK::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbTFQ: // global
           _sbSwE::P64 = P64[_sbSwK::P64 + 7];
           _sbSwF::P64 = P64[_sbSwK::P64 + 15];
           I64[Hp - 16] = sat_sbSwJ_info;
           P64[Hp - 8] = _sbSwF::P64;
           P64[Hp] = _sbSwG::P64;
           R2 = _sbSwF::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sbSwE::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSwK_info" {
     sat_sbSwK_info:
         const sat_sbSwK_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sbSwL_entry() //  [R1]
         { []
         }
     {offset
       cbTFS: // global
           _sbSwL::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbTFT; else goto cbTFU;
       cbTFU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbTFW; else goto cbTFV;
       cbTFW: // global
           HpAlloc = 24;
           goto cbTFT;
       cbTFT: // global
           R1 = _sbSwL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTFV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSwL::P64;
           _sbSwD::P64 = P64[_sbSwL::P64 + 16];
           _sbSwE::P64 = P64[_sbSwL::P64 + 24];
           _sbSwF::P64 = P64[_sbSwL::P64 + 32];
           I64[Hp - 16] = sat_sbSwK_info;
           P64[Hp - 8] = _sbSwE::P64;
           P64[Hp] = _sbSwF::P64;
           R2 = _sbSwF::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sbSwD::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSwL_info" {
     sat_sbSwL_info:
         const sat_sbSwL_entry;
         const 3;
         const 15;
 },
 many_v_sbSwE_entry() //  [R1]
         { []
         }
     {offset
       cbTFX: // global
           _sbSwE::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbTFY; else goto cbTFZ;
       cbTFZ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cbTG1; else goto cbTG0;
       cbTG1: // global
           HpAlloc = 88;
           goto cbTFY;
       cbTFY: // global
           R1 = _sbSwE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTG0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSwE::P64;
           _sbSwC::P64 = P64[_sbSwE::P64 + 16];
           _sbSwD::P64 = P64[_sbSwE::P64 + 24];
           I64[Hp - 80] = $dApplicative_sbSwF_info;
           P64[Hp - 64] = _sbSwC::P64;
           I64[Hp - 56] = sat_sbSwN_info;
           _cbTFa::P64 = Hp - 80;
           P64[Hp - 40] = _cbTFa::P64;
           I64[Hp - 32] = sat_sbSwL_info;
           P64[Hp - 16] = _sbSwD::P64;
           P64[Hp - 8] = _sbSwE::P64;
           P64[Hp] = _cbTFa::P64;
           R2 = _sbSwC::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Base.mplus_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . many_v_sbSwE_info" {
     many_v_sbSwE_info:
         const many_v_sbSwE_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fAlternativeWrappedMonad_$cmany_entry() //  [R2,
                                                                   R3]
         { []
         }
     {offset
       cbTG2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbTG6; else goto cbTG5;
       cbTG6: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeWrappedMonad_$cmany_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTG5: // global
           I64[Hp - 24] = many_v_sbSwE_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedMonad_$cmany_info" {
     Control.Applicative.$fAlternativeWrappedMonad_$cmany_info:
         const Control.Applicative.$fAlternativeWrappedMonad_$cmany_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.832917028 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedMonad_closure" {
     Control.Applicative.$fAlternativeWrappedMonad_closure:
         const Control.Applicative.$fAlternativeWrappedMonad_info;
 },
 sat_sbSwV_entry() //  [R1, R2]
         { []
         }
     {offset
       cbTGQ: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Control.Applicative.$fAlternativeWrappedMonad_$cmany_entry(R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSwV_info" {
     sat_sbSwV_info:
         const sat_sbSwV_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbSwU_entry() //  [R1, R2]
         { []
         }
     {offset
       cbTGY: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Control.Applicative.$fAlternativeWrappedMonad_$csome_entry(R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSwU_info" {
     sat_sbSwU_info:
         const sat_sbSwU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbSwT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbTH6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbTH7; else goto cbTH8;
       cbTH7: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTH8: // global
           _sbSwR::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sbSwR::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSwT_info" {
     sat_sbSwT_info:
         const sat_sbSwT_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSwQ_entry() //  [R1]
         { []
         }
     {offset
       cbTHd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbTHe; else goto cbTHf;
       cbTHe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTHf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSwQ_info" {
     sat_sbSwQ_info:
         const sat_sbSwQ_entry;
         const 1;
         const 16;
 },
 sat_sbSwP_entry() //  [R1]
         { []
         }
     {offset
       cbTHk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbTHl; else goto cbTHm;
       cbTHl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTHm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fAlternativeWrappedMonad_$cp1Alternative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSwP_info" {
     sat_sbSwP_info:
         const sat_sbSwP_entry;
         const 1;
         const 16;
 },
 Control.Applicative.$fAlternativeWrappedMonad_entry() //  [R2]
         { []
         }
     {offset
       cbTHo: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cbTHs; else goto cbTHr;
       cbTHs: // global
           HpAlloc = 144;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeWrappedMonad_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbTHr: // global
           I64[Hp - 136] = sat_sbSwV_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sbSwU_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbSwT_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sbSwQ_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_sbSwP_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = GHC.Base.C:Alternative_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 102;
           P64[Hp - 8] = Hp - 119;
           P64[Hp] = Hp - 135;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedMonad_info" {
     Control.Applicative.$fAlternativeWrappedMonad_info:
         const Control.Applicative.$fAlternativeWrappedMonad_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.845744607 UTC

[section ""data" . Control.Applicative.$fFunctorWrappedArrow2_closure" {
     Control.Applicative.$fFunctorWrappedArrow2_closure:
         const Control.Applicative.$fFunctorWrappedArrow2_info;
 },
 sat_sbSx0_entry() //  [R1]
         { []
         }
     {offset
       cbTI3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbTI4; else goto cbTI5;
       cbTI4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTI5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Control.Arrow.arr_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSx0_info" {
     sat_sbSx0_info:
         const sat_sbSx0_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fFunctorWrappedArrow2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbTI8: // global
           _sbSwY::P64 = R4;
           _sbSwX::P64 = R3;
           _sbSwW::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbTI9; else goto cbTIa;
       cbTIa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbTIc; else goto cbTIb;
       cbTIc: // global
           HpAlloc = 32;
           goto cbTI9;
       cbTI9: // global
           R4 = _sbSwY::P64;
           R3 = _sbSwX::P64;
           R2 = _sbSwW::P64;
           R1 = Control.Applicative.$fFunctorWrappedArrow2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTIb: // global
           I64[Hp - 24] = sat_sbSx0_info;
           P64[Hp - 8] = _sbSwW::P64;
           P64[Hp] = _sbSwX::P64;
           I64[Sp - 24] = block_cbTI6_info;
           R2 = _sbSwW::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _sbSwY::P64;
           Sp = Sp - 24;
           call Control.Arrow.$p1Arrow_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fFunctorWrappedArrow2_info" {
     Control.Applicative.$fFunctorWrappedArrow2_info:
         const Control.Applicative.$fFunctorWrappedArrow2_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbTI6() //  [R1]
         { []
         }
     {offset
       cbTI6: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call Control.Category.._entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbTI6_info" {
     block_cbTI6_info:
         const _cbTI6;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.853804696 UTC

[section ""data" . Control.Applicative.$fFunctorWrappedArrow1_closure" {
     Control.Applicative.$fFunctorWrappedArrow1_closure:
         const Control.Applicative.$fFunctorWrappedArrow1_info;
 },
 sat_sbSx6_entry() //  [R1]
         { []
         }
     {offset
       cbTIH: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSx6_info" {
     sat_sbSx6_info:
         const sat_sbSx6_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbSx7_entry() //  [R1]
         { []
         }
     {offset
       cbTIK: // global
           _sbSx7::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cbTIL; else goto cbTIM;
       cbTIM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbTIO; else goto cbTIN;
       cbTIO: // global
           HpAlloc = 16;
           goto cbTIL;
       cbTIL: // global
           R1 = _sbSx7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTIN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSx7::P64;
           _sbSx1::P64 = P64[_sbSx7::P64 + 16];
           _sbSx2::P64 = P64[_sbSx7::P64 + 24];
           I64[Hp - 8] = sat_sbSx6_info;
           P64[Hp] = _sbSx2::P64;
           R2 = _sbSx1::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Control.Arrow.arr_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSx7_info" {
     sat_sbSx7_info:
         const sat_sbSx7_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fFunctorWrappedArrow1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbTIR: // global
           _sbSx3::P64 = R4;
           _sbSx2::P64 = R3;
           _sbSx1::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbTIS; else goto cbTIT;
       cbTIT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbTIV; else goto cbTIU;
       cbTIV: // global
           HpAlloc = 32;
           goto cbTIS;
       cbTIS: // global
           R4 = _sbSx3::P64;
           R3 = _sbSx2::P64;
           R2 = _sbSx1::P64;
           R1 = Control.Applicative.$fFunctorWrappedArrow1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTIU: // global
           I64[Hp - 24] = sat_sbSx7_info;
           P64[Hp - 8] = _sbSx1::P64;
           P64[Hp] = _sbSx2::P64;
           I64[Sp - 24] = block_cbTIP_info;
           R2 = _sbSx1::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _sbSx3::P64;
           Sp = Sp - 24;
           call Control.Arrow.$p1Arrow_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fFunctorWrappedArrow1_info" {
     Control.Applicative.$fFunctorWrappedArrow1_info:
         const Control.Applicative.$fFunctorWrappedArrow1_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbTIP() //  [R1]
         { []
         }
     {offset
       cbTIP: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call Control.Category.._entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbTIP_info" {
     block_cbTIP_info:
         const _cbTIP;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.862512028 UTC

[section ""data" . Control.Applicative.$fFunctorWrappedArrow_closure" {
     Control.Applicative.$fFunctorWrappedArrow_closure:
         const Control.Applicative.$fFunctorWrappedArrow_info;
 },
 sat_sbSxa_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbTJp: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fFunctorWrappedArrow1_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSxa_info" {
     sat_sbSxa_info:
         const sat_sbSxa_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSx9_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbTJx: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fFunctorWrappedArrow2_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSx9_info" {
     sat_sbSx9_info:
         const sat_sbSx9_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Control.Applicative.$fFunctorWrappedArrow_entry() //  [R2]
         { []
         }
     {offset
       cbTJB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbTJF; else goto cbTJE;
       cbTJF: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Control.Applicative.$fFunctorWrappedArrow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbTJE: // global
           I64[Hp - 48] = sat_sbSxa_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sbSx9_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Base.C:Functor_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fFunctorWrappedArrow_info" {
     Control.Applicative.$fFunctorWrappedArrow_info:
         const Control.Applicative.$fFunctorWrappedArrow_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.870620963 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedArrow2_closure" {
     Control.Applicative.$fAlternativeWrappedArrow2_closure:
         const Control.Applicative.$fAlternativeWrappedArrow2_info;
 },
 sat_sbSxi_entry() //  [R1]
         { []
         }
     {offset
       cbTK1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbTK2; else goto cbTK3;
       cbTK2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTK3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Control.Arrow.&&&_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSxi_info" {
     sat_sbSxi_info:
         const sat_sbSxi_entry;
         const 3;
         const 15;
 },
 sat_sbSxg_entry() //  [R1, R2]
         { []
         }
     {offset
       cbTKd: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Tuple.uncurry_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSxg_info" {
     sat_sbSxg_info:
         const sat_sbSxg_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbSxh_entry() //  [R1]
         { []
         }
     {offset
       cbTKg: // global
           _sbSxh::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cbTKh; else goto cbTKi;
       cbTKi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbTKk; else goto cbTKj;
       cbTKk: // global
           HpAlloc = 16;
           goto cbTKh;
       cbTKh: // global
           R1 = _sbSxh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTKj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSxh::P64;
           _sbSxb::P64 = P64[_sbSxh::P64 + 16];
           _sbSxc::P64 = P64[_sbSxh::P64 + 24];
           I64[Hp - 8] = sat_sbSxg_info;
           P64[Hp] = _sbSxc::P64;
           R2 = _sbSxb::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Control.Arrow.arr_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSxh_info" {
     sat_sbSxh_info:
         const sat_sbSxh_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fAlternativeWrappedArrow2_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cbTKn: // global
           _sbSxe::P64 = R5;
           _sbSxd::P64 = R4;
           _sbSxc::P64 = R3;
           _sbSxb::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbTKo; else goto cbTKp;
       cbTKp: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbTKr; else goto cbTKq;
       cbTKr: // global
           HpAlloc = 72;
           goto cbTKo;
       cbTKo: // global
           R5 = _sbSxe::P64;
           R4 = _sbSxd::P64;
           R3 = _sbSxc::P64;
           R2 = _sbSxb::P64;
           R1 = Control.Applicative.$fAlternativeWrappedArrow2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTKq: // global
           I64[Hp - 64] = sat_sbSxi_info;
           P64[Hp - 48] = _sbSxb::P64;
           P64[Hp - 40] = _sbSxd::P64;
           P64[Hp - 32] = _sbSxe::P64;
           I64[Hp - 24] = sat_sbSxh_info;
           P64[Hp - 8] = _sbSxb::P64;
           P64[Hp] = _sbSxc::P64;
           I64[Sp - 24] = block_cbTKl_info;
           R2 = _sbSxb::P64;
           P64[Sp - 16] = Hp - 64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call Control.Arrow.$p1Arrow_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedArrow2_info" {
     Control.Applicative.$fAlternativeWrappedArrow2_info:
         const Control.Applicative.$fAlternativeWrappedArrow2_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cbTKl() //  [R1]
         { []
         }
     {offset
       cbTKl: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _cbTJX::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _cbTJX::P64;
           call Control.Category.._entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbTKl_info" {
     block_cbTKl_info:
         const _cbTKl;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.882050844 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedArrow5_closure" {
     Control.Applicative.$fApplicativeWrappedArrow5_closure:
         const Control.Applicative.$fApplicativeWrappedArrow5_info;
 },
 sat_sbSxm_entry() //  [R1]
         { []
         }
     {offset
       cbTL3: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSxm_info" {
     sat_sbSxm_info:
         const sat_sbSxm_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Control.Applicative.$fApplicativeWrappedArrow5_entry() //  [R2, R3]
         { []
         }
     {offset
       cbTL6: // global
           _sbSxk::P64 = R3;
           _sbSxj::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cbTL7; else goto cbTL8;
       cbTL8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbTLa; else goto cbTL9;
       cbTLa: // global
           HpAlloc = 16;
           goto cbTL7;
       cbTL7: // global
           R3 = _sbSxk::P64;
           R2 = _sbSxj::P64;
           R1 = Control.Applicative.$fApplicativeWrappedArrow5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTL9: // global
           I64[Hp - 8] = sat_sbSxm_info;
           P64[Hp] = _sbSxk::P64;
           R2 = _sbSxj::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 16;
           call Control.Arrow.arr_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedArrow5_info" {
     Control.Applicative.$fApplicativeWrappedArrow5_info:
         const Control.Applicative.$fApplicativeWrappedArrow5_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.887045211 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedArrow4_closure" {
     Control.Applicative.$fApplicativeWrappedArrow4_closure:
         const Control.Applicative.$fApplicativeWrappedArrow4_info;
 },
 Control.Applicative.$fApplicativeWrappedArrow4_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbTLo: // global
           R5 = R4;
           R4 = R3;
           R3 = GHC.Base.breakpoint_closure+1;
           R2 = R2;
           call Control.Applicative.$fAlternativeWrappedArrow2_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedArrow4_info" {
     Control.Applicative.$fApplicativeWrappedArrow4_info:
         const Control.Applicative.$fApplicativeWrappedArrow4_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.890260372 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedArrow3_closure" {
     Control.Applicative.$fApplicativeWrappedArrow3_closure:
         const Control.Applicative.$fApplicativeWrappedArrow3_info;
 },
 Control.Applicative.$fApplicativeWrappedArrow3_entry() //  [R3]
         { []
         }
     {offset
       cbTLz: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedArrow3_info" {
     Control.Applicative.$fApplicativeWrappedArrow3_info:
         const Control.Applicative.$fApplicativeWrappedArrow3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.895052256 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedArrow2_closure" {
     Control.Applicative.$fApplicativeWrappedArrow2_closure:
         const Control.Applicative.$fApplicativeWrappedArrow2_info;
 },
 sat_sbSxu_entry() //  [R1]
         { []
         }
     {offset
       cbTLS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbTLT; else goto cbTLU;
       cbTLT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTLU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Control.Applicative.$fApplicativeWrappedArrow3_closure+2;
           Sp = Sp - 32;
           call Control.Arrow.arr_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSxu_info" {
     sat_sbSxu_info:
         const sat_sbSxu_entry;
         const 1;
         const 16;
 },
 sat_sbSxv_entry() //  [R1]
         { []
         }
     {offset
       cbTLX: // global
           _sbSxv::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbTLY; else goto cbTLZ;
       cbTLZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbTM1; else goto cbTM0;
       cbTM1: // global
           HpAlloc = 24;
           goto cbTLY;
       cbTLY: // global
           R1 = _sbSxv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTM0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSxv::P64;
           _sbSxq::P64 = P64[_sbSxv::P64 + 16];
           _sbSxr::P64 = P64[_sbSxv::P64 + 24];
           I64[Hp - 16] = sat_sbSxu_info;
           P64[Hp] = _sbSxq::P64;
           I64[Sp - 40] = block_cbTLV_info;
           R2 = _sbSxq::P64;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sbSxr::P64;
           Sp = Sp - 40;
           call Control.Arrow.$p1Arrow_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSxv_info" {
     sat_sbSxv_info:
         const sat_sbSxv_entry;
         const 2;
         const 18;
 },
 _cbTLV() //  [R1]
         { []
         }
     {offset
       cbTLV: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call Control.Category.._entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbTLV_info" {
     block_cbTLV_info:
         const _cbTLV;
         const 2;
         const 30;
 },
 Control.Applicative.$fApplicativeWrappedArrow2_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbTM5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbTM9; else goto cbTM8;
       cbTM9: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fApplicativeWrappedArrow2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTM8: // global
           I64[Hp - 24] = sat_sbSxv_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R5 = R4;
           R4 = Hp - 24;
           R3 = GHC.Base.breakpoint_closure+1;
           R2 = R2;
           call Control.Applicative.$fAlternativeWrappedArrow2_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedArrow2_info" {
     Control.Applicative.$fApplicativeWrappedArrow2_info:
         const Control.Applicative.$fApplicativeWrappedArrow2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.903313008 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedArrow1_closure" {
     Control.Applicative.$fApplicativeWrappedArrow1_closure:
         const Control.Applicative.$fApplicativeWrappedArrow1_info;
 },
 Control.Applicative.$fApplicativeWrappedArrow1_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbTMu: // global
           R5 = R4;
           R4 = R3;
           R3 = GHC.Base.const_closure+2;
           R2 = R2;
           call Control.Applicative.$fAlternativeWrappedArrow2_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedArrow1_info" {
     Control.Applicative.$fApplicativeWrappedArrow1_info:
         const Control.Applicative.$fApplicativeWrappedArrow1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.908892058 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedArrow_closure" {
     Control.Applicative.$fApplicativeWrappedArrow_closure:
         const Control.Applicative.$fApplicativeWrappedArrow_info;
 },
 sat_sbSxD_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbTMK: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fApplicativeWrappedArrow1_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSxD_info" {
     sat_sbSxD_info:
         const sat_sbSxD_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSxC_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbTMS: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fApplicativeWrappedArrow2_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSxC_info" {
     sat_sbSxC_info:
         const sat_sbSxC_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSxB_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cbTN0: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Control.Applicative.$fAlternativeWrappedArrow2_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSxB_info" {
     sat_sbSxB_info:
         const sat_sbSxB_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sbSxA_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbTN8: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fApplicativeWrappedArrow4_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSxA_info" {
     sat_sbSxA_info:
         const sat_sbSxA_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSxz_entry() //  [R1, R2]
         { []
         }
     {offset
       cbTNg: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Control.Applicative.$fApplicativeWrappedArrow5_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSxz_info" {
     sat_sbSxz_info:
         const sat_sbSxz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbSxy_entry() //  [R1]
         { []
         }
     {offset
       cbTNn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbTNo; else goto cbTNp;
       cbTNo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTNp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fFunctorWrappedArrow_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSxy_info" {
     sat_sbSxy_info:
         const sat_sbSxy_entry;
         const 1;
         const 16;
 },
 Control.Applicative.$fApplicativeWrappedArrow_entry() //  [R2]
         { []
         }
     {offset
       cbTNr: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto cbTNv; else goto cbTNu;
       cbTNv: // global
           HpAlloc = 160;
           R2 = R2;
           R1 = Control.Applicative.$fApplicativeWrappedArrow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbTNu: // global
           I64[Hp - 152] = sat_sbSxD_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sbSxC_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sbSxB_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbSxA_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sbSxz_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sbSxy_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = GHC.Base.C:Applicative_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = Hp - 87;
           P64[Hp - 24] = Hp - 102;
           P64[Hp - 16] = Hp - 117;
           P64[Hp - 8] = Hp - 134;
           P64[Hp] = Hp - 150;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedArrow_info" {
     Control.Applicative.$fApplicativeWrappedArrow_info:
         const Control.Applicative.$fApplicativeWrappedArrow_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.92261267 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedArrow_$cp1Alternative_closure" {
     Control.Applicative.$fAlternativeWrappedArrow_$cp1Alternative_closure:
         const Control.Applicative.$fAlternativeWrappedArrow_$cp1Alternative_info;
 },
 sat_sbSxG_entry() //  [R1]
         { []
         }
     {offset
       cbTO8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbTO9; else goto cbTOa;
       cbTO9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTOa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Arrow.$p1ArrowZero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSxG_info" {
     sat_sbSxG_info:
         const sat_sbSxG_entry;
         const 1;
         const 16;
 },
 Control.Applicative.$fAlternativeWrappedArrow_$cp1Alternative_entry() //  [R2,
                                                                            R3]
         { []
         }
     {offset
       cbTOb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbTOf; else goto cbTOe;
       cbTOf: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeWrappedArrow_$cp1Alternative_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTOe: // global
           I64[Hp - 16] = sat_sbSxG_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Control.Applicative.$fApplicativeWrappedArrow_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedArrow_$cp1Alternative_info" {
     Control.Applicative.$fAlternativeWrappedArrow_$cp1Alternative_info:
         const Control.Applicative.$fAlternativeWrappedArrow_$cp1Alternative_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.927596783 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedArrow1_closure" {
     Control.Applicative.$fAlternativeWrappedArrow1_closure:
         const Control.Applicative.$fAlternativeWrappedArrow1_info;
 },
 Control.Applicative.$fAlternativeWrappedArrow1_entry() //  []
         { []
         }
     {offset
       cbTOs: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedArrow1_info" {
     Control.Applicative.$fAlternativeWrappedArrow1_info:
         const Control.Applicative.$fAlternativeWrappedArrow1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.932869582 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedArrow_$csome_closure" {
     Control.Applicative.$fAlternativeWrappedArrow_$csome_closure:
         const Control.Applicative.$fAlternativeWrappedArrow_$csome_info;
 },
 sat_sbSxN_entry() //  [R1]
         { []
         }
     {offset
       cbTOU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbTOV; else goto cbTOW;
       cbTOV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTOW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Control.Applicative.$fAlternativeWrappedArrow1_closure+1;
           Sp = Sp - 32;
           call Control.Arrow.arr_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSxN_info" {
     sat_sbSxN_info:
         const sat_sbSxN_entry;
         const 1;
         const 16;
 },
 sat_sbSxO_entry() //  [R1]
         { []
         }
     {offset
       cbTOX: // global
           _sbSxO::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbTOY; else goto cbTOZ;
       cbTOZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbTP1; else goto cbTP0;
       cbTP1: // global
           HpAlloc = 24;
           goto cbTOY;
       cbTOY: // global
           R1 = _sbSxO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTP0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSxO::P64;
           _sbSxJ::P64 = P64[_sbSxO::P64 + 16];
           _sbSxL::P64 = P64[_sbSxO::P64 + 24];
           _sbSxM::P64 = P64[_sbSxO::P64 + 32];
           I64[Hp - 16] = sat_sbSxN_info;
           P64[Hp] = _sbSxM::P64;
           R2 = _sbSxJ::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sbSxL::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call Control.Arrow.<+>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSxO_info" {
     sat_sbSxO_info:
         const sat_sbSxO_entry;
         const 3;
         const 15;
 },
 some_v_sbSxL_entry() //  [R1]
         { []
         }
     {offset
       cbTP2: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbTP3; else goto cbTP4;
       cbTP3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTP4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cbTOI_info;
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = R1;
           Sp = Sp - 48;
           call Control.Arrow.$p1ArrowZero_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . some_v_sbSxL_info" {
     some_v_sbSxL_info:
         const some_v_sbSxL_entry;
         const 3;
         const 15;
 },
 _cbTOI() //  [R1]
         { []
         }
     {offset
       cbTOI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbTP7; else goto cbTP6;
       cbTP7: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbTP6: // global
           I64[Hp - 32] = sat_sbSxO_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R5 = Hp - 32;
           R4 = P64[Sp + 16];
           R3 = GHC.Types.:_closure+2;
           R2 = R1;
           Sp = Sp + 32;
           call Control.Applicative.$fAlternativeWrappedArrow2_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbTOI_info" {
     block_cbTOI_info:
         const _cbTOI;
         const 3;
         const 30;
 },
 Control.Applicative.$fAlternativeWrappedArrow_$csome_entry() //  [R2,
                                                                   R3, R4]
         { []
         }
     {offset
       cbTP8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbTPc; else goto cbTPb;
       cbTPc: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeWrappedArrow_$csome_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTPb: // global
           I64[Hp - 32] = some_v_sbSxL_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedArrow_$csome_info" {
     Control.Applicative.$fAlternativeWrappedArrow_$csome_info:
         const Control.Applicative.$fAlternativeWrappedArrow_$csome_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.945366431 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedArrow_$cmany_closure" {
     Control.Applicative.$fAlternativeWrappedArrow_$cmany_closure:
         const Control.Applicative.$fAlternativeWrappedArrow_$cmany_info;
 },
 $dApplicative_sbSxT_entry() //  [R1]
         { []
         }
     {offset
       cbTPN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbTPO; else goto cbTPP;
       cbTPO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTPP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Arrow.$p1ArrowZero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dApplicative_sbSxT_info" {
     $dApplicative_sbSxT_info:
         const $dApplicative_sbSxT_entry;
         const 1;
         const 16;
 },
 sat_sbSxV_entry() //  [R1]
         { []
         }
     {offset
       cbTPU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbTPV; else goto cbTPW;
       cbTPV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTPW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Control.Applicative.$fAlternativeWrappedArrow1_closure+1;
           Sp = Sp - 32;
           call Control.Arrow.arr_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSxV_info" {
     sat_sbSxV_info:
         const sat_sbSxV_entry;
         const 1;
         const 16;
 },
 sat_sbSxU_entry() //  [R1]
         { []
         }
     {offset
       cbTQ1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbTQ2; else goto cbTQ3;
       cbTQ2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTQ3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 24];
           R4 = P64[R1 + 16];
           R3 = GHC.Types.:_closure+2;
           R2 = P64[R1 + 32];
           Sp = Sp - 16;
           call Control.Applicative.$fAlternativeWrappedArrow2_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSxU_info" {
     sat_sbSxU_info:
         const sat_sbSxU_entry;
         const 3;
         const 15;
 },
 many_v_sbSxS_entry() //  [R1]
         { []
         }
     {offset
       cbTQ4: // global
           _sbSxS::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbTQ5; else goto cbTQ6;
       cbTQ6: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cbTQ8; else goto cbTQ7;
       cbTQ8: // global
           HpAlloc = 88;
           goto cbTQ5;
       cbTQ5: // global
           R1 = _sbSxS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTQ7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSxS::P64;
           _sbSxP::P64 = P64[_sbSxS::P64 + 16];
           _sbSxQ::P64 = P64[_sbSxS::P64 + 24];
           _sbSxR::P64 = P64[_sbSxS::P64 + 32];
           I64[Hp - 80] = $dApplicative_sbSxT_info;
           P64[Hp - 64] = _sbSxP::P64;
           I64[Hp - 56] = sat_sbSxV_info;
           _cbTPJ::P64 = Hp - 80;
           P64[Hp - 40] = _cbTPJ::P64;
           I64[Hp - 32] = sat_sbSxU_info;
           P64[Hp - 16] = _sbSxR::P64;
           P64[Hp - 8] = _sbSxS::P64;
           P64[Hp] = _cbTPJ::P64;
           R2 = _sbSxQ::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call Control.Arrow.<+>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . many_v_sbSxS_info" {
     many_v_sbSxS_info:
         const many_v_sbSxS_entry;
         const 3;
         const 15;
 },
 Control.Applicative.$fAlternativeWrappedArrow_$cmany_entry() //  [R2,
                                                                   R3, R4]
         { []
         }
     {offset
       cbTQ9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbTQd; else goto cbTQc;
       cbTQd: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeWrappedArrow_$cmany_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTQc: // global
           I64[Hp - 32] = many_v_sbSxS_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedArrow_$cmany_info" {
     Control.Applicative.$fAlternativeWrappedArrow_$cmany_info:
         const Control.Applicative.$fAlternativeWrappedArrow_$cmany_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.958407712 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedArrow_closure" {
     Control.Applicative.$fAlternativeWrappedArrow_closure:
         const Control.Applicative.$fAlternativeWrappedArrow_info;
 },
 sat_sbSy4_entry() //  [R1, R2]
         { []
         }
     {offset
       cbTQJ: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Control.Applicative.$fAlternativeWrappedArrow_$cmany_entry(R4,
                                                                           R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSy4_info" {
     sat_sbSy4_info:
         const sat_sbSy4_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sbSy3_entry() //  [R1, R2]
         { []
         }
     {offset
       cbTQR: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Control.Applicative.$fAlternativeWrappedArrow_$csome_entry(R4,
                                                                           R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSy3_info" {
     sat_sbSy3_info:
         const sat_sbSy3_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sbSy2_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbTQZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbTR0; else goto cbTR1;
       cbTR0: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTR1: // global
           _sbSy0::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sbSy0::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call Control.Arrow.<+>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSy2_info" {
     sat_sbSy2_info:
         const sat_sbSy2_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSxZ_entry() //  [R1]
         { []
         }
     {offset
       cbTR6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbTR7; else goto cbTR8;
       cbTR7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTR8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Arrow.zeroArrow_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSxZ_info" {
     sat_sbSxZ_info:
         const sat_sbSxZ_entry;
         const 1;
         const 16;
 },
 sat_sbSxY_entry() //  [R1]
         { []
         }
     {offset
       cbTRd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbTRe; else goto cbTRf;
       cbTRe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTRf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fAlternativeWrappedArrow_$cp1Alternative_entry(R3,
                                                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSxY_info" {
     sat_sbSxY_info:
         const sat_sbSxY_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fAlternativeWrappedArrow_entry() //  [R2, R3]
         { []
         }
     {offset
       cbTRh: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cbTRl; else goto cbTRk;
       cbTRl: // global
           HpAlloc = 168;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeWrappedArrow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTRk: // global
           I64[Hp - 160] = sat_sbSy4_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_sbSy3_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sbSy2_info;
           P64[Hp - 104] = R3;
           I64[Hp - 96] = sat_sbSxZ_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sbSxY_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = GHC.Base.C:Alternative_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = Hp - 96;
           P64[Hp - 16] = Hp - 110;
           P64[Hp - 8] = Hp - 135;
           P64[Hp] = Hp - 159;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedArrow_info" {
     Control.Applicative.$fAlternativeWrappedArrow_info:
         const Control.Applicative.$fAlternativeWrappedArrow_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.970823197 UTC

[section ""data" . Control.Applicative.$wunsafeDrop_closure" {
     Control.Applicative.$wunsafeDrop_closure:
         const Control.Applicative.$wunsafeDrop_info;
 },
 Control.Applicative.$wunsafeDrop_entry() //  [R2, R3]
         { []
         }
     {offset
       cbTRZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbTS0; else goto ubTSe;
       cbTS0: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$wunsafeDrop_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ubTSe: // global
           I64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cbTRP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Control.Applicative.$wunsafeDrop_info" {
     Control.Applicative.$wunsafeDrop_info:
         const Control.Applicative.$wunsafeDrop_entry;
         const 0;
         const 14;
         const 8589934605;
 },
 _cbTRP() //  []
         { []
         }
     {offset
       cbTRP: // global
           I64[Sp - 8] = block_cbTRS_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubTSg; else goto cbTRT;
       ubTSg: // global
           call _cbTRS(R1) args: 0, res: 0, upd: 0;
       cbTRT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbTRS() //  [R1]
         { []
         }
     {offset
       cbTRS: // global
           if (R1 & 7 == 1) goto cbTRW; else goto cbTRX;
       cbTRW: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbTRX: // global
           _sbSy9::P64 = P64[R1 + 14];
           _sbSya::I64 = I64[Sp + 8];
           if (_sbSya::I64 != 1) goto cbTSa; else goto cbTSb;
       cbTSa: // global
           I64[Sp + 8] = _sbSya::I64 - 1;
           P64[Sp + 16] = _sbSy9::P64;
           Sp = Sp + 8;
           call _cbTRP() args: 0, res: 0, upd: 0;
       cbTSb: // global
           R1 = _sbSy9::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbTRS_info" {
     block_cbTRS_info:
         const _cbTRS;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.977912527 UTC

[section ""data" . Control.Applicative.$fAlternativeZipList2_closure" {
     Control.Applicative.$fAlternativeZipList2_closure:
         const Control.Applicative.$fAlternativeZipList2_info;
 },
 sat_sbSyg_entry() //  [R1]
         { []
         }
     {offset
       cbTSK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbTSL; else goto cbTSM;
       cbTSL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTSM: // global
           I64[Sp - 16] = block_cbTSI_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           P64[Sp - 8] = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSyg_info" {
     sat_sbSyg_info:
         const sat_sbSyg_entry;
         const 2;
         const 18;
 },
 _cbTSI() //  [R1]
         { []
         }
     {offset
       cbTSI: // global
           _sbSyd::P64 = P64[Sp + 8];
           if (%MO_S_Gt_W64(R1, 0)) goto cbTST; else goto cbTSU;
       cbTST: // global
           R3 = _sbSyd::P64;
           R2 = R1;
           Sp = Sp + 16;
           call Control.Applicative.$wunsafeDrop_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cbTSU: // global
           R1 = _sbSyd::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbTSI_info" {
     block_cbTSI_info:
         const _cbTSI;
         const 1;
         const 30;
 },
 Control.Applicative.$fAlternativeZipList2_entry() //  [R2, R3]
         { []
         }
     {offset
       cbTSV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbTSZ; else goto cbTSY;
       cbTSZ: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeZipList2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTSY: // global
           I64[Hp - 24] = sat_sbSyg_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = R2;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeZipList2_info" {
     Control.Applicative.$fAlternativeZipList2_info:
         const Control.Applicative.$fAlternativeZipList2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.984617146 UTC

[section ""data" . Control.Applicative.$fGeneric1ZipList1_closure" {
     Control.Applicative.$fGeneric1ZipList1_closure:
         const Control.Applicative.$fGeneric1ZipList1_info;
 },
 Control.Applicative.$fGeneric1ZipList1_entry() //  [R2]
         { []
         }
     {offset
       cbTTi: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGeneric1ZipList1_info" {
     Control.Applicative.$fGeneric1ZipList1_info:
         const Control.Applicative.$fGeneric1ZipList1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.988693685 UTC

[section ""data" . Control.Applicative.$fGeneric1ZipList2_closure" {
     Control.Applicative.$fGeneric1ZipList2_closure:
         const Control.Applicative.$fGeneric1ZipList2_info;
 },
 Control.Applicative.$fGeneric1ZipList2_entry() //  [R2]
         { []
         }
     {offset
       cbTTt: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGeneric1ZipList2_info" {
     Control.Applicative.$fGeneric1ZipList2_info:
         const Control.Applicative.$fGeneric1ZipList2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.991638093 UTC

[section ""data" . Control.Applicative.$fGeneric1ZipList_closure" {
     Control.Applicative.$fGeneric1ZipList_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Control.Applicative.$fGeneric1ZipList2_closure+1;
         const Control.Applicative.$fGeneric1ZipList1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.993549582 UTC

[section ""data" . Control.Applicative.$fGenericZipList1_closure" {
     Control.Applicative.$fGenericZipList1_closure:
         const Control.Applicative.$fGenericZipList1_info;
 },
 Control.Applicative.$fGenericZipList1_entry() //  [R2]
         { []
         }
     {offset
       cbTTH: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGenericZipList1_info" {
     Control.Applicative.$fGenericZipList1_info:
         const Control.Applicative.$fGenericZipList1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.99665052 UTC

[section ""data" . Control.Applicative.$fGenericZipList2_closure" {
     Control.Applicative.$fGenericZipList2_closure:
         const Control.Applicative.$fGenericZipList2_info;
 },
 Control.Applicative.$fGenericZipList2_entry() //  [R2]
         { []
         }
     {offset
       cbTTS: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGenericZipList2_info" {
     Control.Applicative.$fGenericZipList2_info:
         const Control.Applicative.$fGenericZipList2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:45.999779286 UTC

[section ""data" . Control.Applicative.$fGenericZipList_closure" {
     Control.Applicative.$fGenericZipList_closure:
         const GHC.Generics.C:Generic_con_info;
         const Control.Applicative.$fGenericZipList2_closure+1;
         const Control.Applicative.$fGenericZipList1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.001521125 UTC

[section ""data" . Control.Applicative.$fFoldableZipList_closure" {
     Control.Applicative.$fFoldableZipList_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableNonEmpty_$cfold1_closure+2;
         const Data.Foldable.$fFoldable[]_$cfoldMap_closure+3;
         const GHC.Base.foldr_closure+3;
         const Data.Foldable.$fFoldable[]_$cfoldr'_closure+3;
         const GHC.List.foldl_closure+3;
         const GHC.List.foldl'_closure+3;
         const GHC.List.foldr1_closure+2;
         const GHC.List.foldl1_closure+2;
         const GHC.Base.id_closure+1;
         const GHC.List.null_closure+1;
         const GHC.List.length_closure+1;
         const GHC.List.elem_closure+3;
         const GHC.List.maximum_closure+2;
         const GHC.List.minimum_closure+2;
         const GHC.List.sum_closure+1;
         const GHC.List.product_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.003324735 UTC

[section ""data" . Control.Applicative.$fFunctorZipList_closure" {
     Control.Applicative.$fFunctorZipList_closure:
         const GHC.Base.C:Functor_con_info;
         const GHC.Base.map_closure+2;
         const GHC.Base.$fFunctor[]_$c<$_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.007069962 UTC

[section ""data" . Control.Applicative.$fApplicativeZipList6_closure" {
     Control.Applicative.$fApplicativeZipList6_closure:
         const Control.Applicative.$fApplicativeZipList6_info;
 },
 sat_sbSyu_entry() //  [R1]
         { []
         }
     {offset
       cbTUo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbTUp; else goto cbTUq;
       cbTUp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTUq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fApplicativeZipList6_entry(R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSyu_info" {
     sat_sbSyu_info:
         const sat_sbSyu_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fApplicativeZipList6_entry() //  [R2, R3]
         { []
         }
     {offset
       cbTUv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbTUw; else goto cbTUx;
       cbTUw: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fApplicativeZipList6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTUx: // global
           I64[Sp - 16] = block_cbTU8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubTUR; else goto cbTU9;
       ubTUR: // global
           call _cbTU8(R1) args: 0, res: 0, upd: 0;
       cbTU9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeZipList6_info" {
     Control.Applicative.$fApplicativeZipList6_info:
         const Control.Applicative.$fApplicativeZipList6_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbTU8() //  [R1]
         { []
         }
     {offset
       cbTU8: // global
           if (R1 & 7 == 1) goto ubTUM; else goto cbTUt;
       ubTUM: // global
           Sp = Sp + 16;
           call _cbTUE() args: 0, res: 0, upd: 0;
       cbTUt: // global
           I64[Sp - 8] = block_cbTUe_info;
           _sbSyo::P64 = P64[R1 + 6];
           _sbSyp::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sbSyp::P64;
           P64[Sp + 8] = _sbSyo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubTUO; else goto cbTUf;
       ubTUO: // global
           call _cbTUe(R1) args: 0, res: 0, upd: 0;
       cbTUf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbTU8_info" {
     block_cbTU8_info:
         const _cbTU8;
         const 1;
         const 30;
 },
 _cbTUe() //  [R1]
         { []
         }
     {offset
       cbTUe: // global
           if (R1 & 7 == 1) goto ubTUN; else goto cbTUH;
       ubTUN: // global
           Sp = Sp + 24;
           call _cbTUE() args: 0, res: 0, upd: 0;
       cbTUH: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cbTUK; else goto cbTUJ;
       cbTUK: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbTUJ: // global
           _sbSyr::P64 = P64[R1 + 6];
           _sbSys::P64 = P64[R1 + 14];
           I64[Hp - 80] = sat_sbSyu_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = _sbSys::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _sbSyr::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbTUe_info" {
     block_cbTUe_info:
         const _cbTUe;
         const 2;
         const 30;
 },
 _cbTUE() //  []
         { []
         }
     {offset
       cbTUE: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.016515045 UTC

[section ""data" . Control.Applicative.$fApplicativeZipList5_closure" {
     Control.Applicative.$fApplicativeZipList5_closure:
         const Control.Applicative.$fApplicativeZipList5_info;
 },
 Control.Applicative.$fApplicativeZipList5_entry() //  [R2, R3]
         { []
         }
     {offset
       cbTVp: // global
           R3 = R3;
           R2 = R2;
           call Control.Applicative.$fApplicativeZipList6_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeZipList5_info" {
     Control.Applicative.$fApplicativeZipList5_info:
         const Control.Applicative.$fApplicativeZipList5_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.023347769 UTC

[section ""data" . Control.Applicative.$fApplicativeZipList4_closure" {
     Control.Applicative.$fApplicativeZipList4_closure:
         const Control.Applicative.$fApplicativeZipList4_info;
 },
 sat_sbSyF_entry() //  [R1]
         { []
         }
     {offset
       cbTVQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbTVR; else goto cbTVS;
       cbTVR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTVS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fApplicativeZipList4_entry(R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSyF_info" {
     sat_sbSyF_info:
         const sat_sbSyF_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fApplicativeZipList4_entry() //  [R2, R3]
         { []
         }
     {offset
       cbTVX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbTVY; else goto cbTVZ;
       cbTVY: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fApplicativeZipList4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTVZ: // global
           I64[Sp - 16] = block_cbTVA_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubTWi; else goto cbTVB;
       ubTWi: // global
           call _cbTVA(R1) args: 0, res: 0, upd: 0;
       cbTVB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeZipList4_info" {
     Control.Applicative.$fApplicativeZipList4_info:
         const Control.Applicative.$fApplicativeZipList4_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbTVA() //  [R1]
         { []
         }
     {offset
       cbTVA: // global
           if (R1 & 7 == 1) goto ubTWd; else goto cbTVV;
       ubTWd: // global
           Sp = Sp + 16;
           call _cbTW6() args: 0, res: 0, upd: 0;
       cbTVV: // global
           I64[Sp] = block_cbTVG_info;
           _sbSyB::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbSyB::P64;
           if (R1 & 7 != 0) goto ubTWf; else goto cbTVH;
       ubTWf: // global
           call _cbTVG(R1) args: 0, res: 0, upd: 0;
       cbTVH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbTVA_info" {
     block_cbTVA_info:
         const _cbTVA;
         const 1;
         const 30;
 },
 _cbTVG() //  [R1]
         { []
         }
     {offset
       cbTVG: // global
           if (R1 & 7 == 1) goto ubTWe; else goto cbTW8;
       ubTWe: // global
           Sp = Sp + 16;
           call _cbTW6() args: 0, res: 0, upd: 0;
       cbTW8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbTWb; else goto cbTWa;
       cbTWb: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbTWa: // global
           _sbSyD::P64 = P64[R1 + 6];
           _sbSyE::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_sbSyF_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sbSyE::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sbSyD::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbTVG_info" {
     block_cbTVG_info:
         const _cbTVG;
         const 1;
         const 30;
 },
 _cbTW6() //  []
         { []
         }
     {offset
       cbTW6: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.034779104 UTC

[section ""data" . Control.Applicative.$fApplicativeZipList3_closure" {
     Control.Applicative.$fApplicativeZipList3_closure:
         const Control.Applicative.$fApplicativeZipList3_info;
 },
 Control.Applicative.$fApplicativeZipList3_entry() //  [R2, R3]
         { []
         }
     {offset
       cbTWO: // global
           R3 = R3;
           R2 = R2;
           call Control.Applicative.$fApplicativeZipList4_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeZipList3_info" {
     Control.Applicative.$fApplicativeZipList3_info:
         const Control.Applicative.$fApplicativeZipList3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.040884427 UTC

[section ""data" . Control.Applicative.$fApplicativeZipList2_closure" {
     Control.Applicative.$fApplicativeZipList2_closure:
         const Control.Applicative.$fApplicativeZipList2_info;
 },
 sat_sbSyQ_entry() //  [R1]
         { []
         }
     {offset
       cbTXf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbTXg; else goto cbTXh;
       cbTXg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTXh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fApplicativeZipList2_entry(R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSyQ_info" {
     sat_sbSyQ_info:
         const sat_sbSyQ_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fApplicativeZipList2_entry() //  [R2, R3]
         { []
         }
     {offset
       cbTXm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbTXn; else goto cbTXo;
       cbTXn: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fApplicativeZipList2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTXo: // global
           I64[Sp - 16] = block_cbTWZ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubTXH; else goto cbTX0;
       ubTXH: // global
           call _cbTWZ(R1) args: 0, res: 0, upd: 0;
       cbTX0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeZipList2_info" {
     Control.Applicative.$fApplicativeZipList2_info:
         const Control.Applicative.$fApplicativeZipList2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbTWZ() //  [R1]
         { []
         }
     {offset
       cbTWZ: // global
           if (R1 & 7 == 1) goto ubTXC; else goto cbTXk;
       ubTXC: // global
           Sp = Sp + 16;
           call _cbTXv() args: 0, res: 0, upd: 0;
       cbTXk: // global
           I64[Sp - 8] = block_cbTX5_info;
           _sbSyL::P64 = P64[R1 + 6];
           _sbSyM::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sbSyM::P64;
           P64[Sp + 8] = _sbSyL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubTXE; else goto cbTX6;
       ubTXE: // global
           call _cbTX5(R1) args: 0, res: 0, upd: 0;
       cbTX6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbTWZ_info" {
     block_cbTWZ_info:
         const _cbTWZ;
         const 1;
         const 30;
 },
 _cbTX5() //  [R1]
         { []
         }
     {offset
       cbTX5: // global
           if (R1 & 7 == 1) goto ubTXD; else goto cbTXx;
       ubTXD: // global
           Sp = Sp + 24;
           call _cbTXv() args: 0, res: 0, upd: 0;
       cbTXx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbTXA; else goto cbTXz;
       cbTXA: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbTXz: // global
           _sbSyP::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_sbSyQ_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sbSyP::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbTX5_info" {
     block_cbTX5_info:
         const _cbTX5;
         const 2;
         const 30;
 },
 _cbTXv() //  []
         { []
         }
     {offset
       cbTXv: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.052292896 UTC

[section ""data" . Control.Applicative.$fApplicativeZipList1_closure" {
     Control.Applicative.$fApplicativeZipList1_closure:
         const Control.Applicative.$fApplicativeZipList1_info;
 },
 Control.Applicative.$fApplicativeZipList1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbTYe: // global
           R3 = R3;
           R2 = R2;
           call Control.Applicative.$fApplicativeZipList2_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeZipList1_info" {
     Control.Applicative.$fApplicativeZipList1_info:
         const Control.Applicative.$fApplicativeZipList1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.055946354 UTC

[section ""data" . Control.Applicative.$fApplicativeZipList_closure" {
     Control.Applicative.$fApplicativeZipList_closure:
         const GHC.Base.C:Applicative_con_info;
         const Control.Applicative.$fFunctorZipList_closure+1;
         const GHC.List.repeat_closure+1;
         const Control.Applicative.$fApplicativeZipList5_closure+2;
         const GHC.List.zipWith_closure+3;
         const Control.Applicative.$fApplicativeZipList3_closure+2;
         const Control.Applicative.$fApplicativeZipList1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.058126889 UTC

[section ""data" . Control.Applicative.$fAlternativeZipList_xs_closure" {
     Control.Applicative.$fAlternativeZipList_xs_closure:
         const :_con_info;
         const GHC.Types.[]_closure+1;
         const Control.Applicative.$fAlternativeZipList_xs_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.062735528 UTC

[section ""data" . Control.Applicative.$fAlternativeZipList1_closure" {
     Control.Applicative.$fAlternativeZipList1_closure:
         const Control.Applicative.$fAlternativeZipList1_info;
 },
 sat_sbSz2_entry() //  [R1]
         { []
         }
     {offset
       cbTYH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbTYI; else goto cbTYJ;
       cbTYI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTYJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fAlternativeZipList1_entry(R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSz2_info" {
     sat_sbSz2_info:
         const sat_sbSz2_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fAlternativeZipList1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbTYO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbTYP; else goto cbTYQ;
       cbTYP: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeZipList1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbTYQ: // global
           I64[Sp - 16] = block_cbTYr_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubTZa; else goto cbTYs;
       ubTZa: // global
           call _cbTYr(R1) args: 0, res: 0, upd: 0;
       cbTYs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeZipList1_info" {
     Control.Applicative.$fAlternativeZipList1_info:
         const Control.Applicative.$fAlternativeZipList1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbTYr() //  [R1]
         { []
         }
     {offset
       cbTYr: // global
           if (R1 & 7 == 1) goto ubTZ5; else goto cbTYM;
       ubTZ5: // global
           Sp = Sp + 16;
           call _cbTYX() args: 0, res: 0, upd: 0;
       cbTYM: // global
           I64[Sp - 8] = block_cbTYx_info;
           _sbSyW::P64 = P64[R1 + 6];
           _sbSyX::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sbSyX::P64;
           P64[Sp + 8] = _sbSyW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubTZ7; else goto cbTYy;
       ubTZ7: // global
           call _cbTYx(R1) args: 0, res: 0, upd: 0;
       cbTYy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbTYr_info" {
     block_cbTYr_info:
         const _cbTYr;
         const 1;
         const 30;
 },
 _cbTYx() //  [R1]
         { []
         }
     {offset
       cbTYx: // global
           if (R1 & 7 == 1) goto ubTZ6; else goto cbTZ0;
       ubTZ6: // global
           Sp = Sp + 24;
           call _cbTYX() args: 0, res: 0, upd: 0;
       cbTZ0: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbTZ3; else goto cbTZ2;
       cbTZ3: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbTZ2: // global
           _sbSyZ::P64 = P64[R1 + 6];
           _sbSz0::P64 = P64[R1 + 14];
           I64[Hp - 72] = sat_sbSz2_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = _sbSz0::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _sbSyZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbTYx_info" {
     block_cbTYx_info:
         const _cbTYx;
         const 2;
         const 30;
 },
 _cbTYX() //  []
         { []
         }
     {offset
       cbTYX: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.07421435 UTC

[section ""data" . Control.Applicative.$fAlternativeZipList_$csome_closure" {
     Control.Applicative.$fAlternativeZipList_$csome_closure:
         const Control.Applicative.$fAlternativeZipList_$csome_info;
 },
 sat_sbSz5_entry() //  [R1]
         { []
         }
     {offset
       cbTZQ: // global
           R3 = Control.Applicative.$fAlternativeZipList_xs_closure+2;
           R2 = P64[R1 + 16];
           call Control.Applicative.$fAlternativeZipList2_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSz5_info" {
     sat_sbSz5_info:
         const sat_sbSz5_entry;
         const 1;
         const 16;
 },
 some_v_sbSz4_entry() //  [R1]
         { []
         }
     {offset
       cbTZT: // global
           _sbSz4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbTZU; else goto cbTZV;
       cbTZV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbTZX; else goto cbTZW;
       cbTZX: // global
           HpAlloc = 24;
           goto cbTZU;
       cbTZU: // global
           R1 = _sbSz4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbTZW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSz4::P64;
           _sbSz3::P64 = P64[_sbSz4::P64 + 16];
           I64[Hp - 16] = sat_sbSz5_info;
           P64[Hp] = _sbSz4::P64;
           R3 = Hp - 16;
           R2 = _sbSz3::P64;
           Sp = Sp - 16;
           call Control.Applicative.$fAlternativeZipList1_entry(R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . some_v_sbSz4_info" {
     some_v_sbSz4_info:
         const some_v_sbSz4_entry;
         const 1;
         const 16;
 },
 Control.Applicative.$fAlternativeZipList_$csome_entry() //  [R2]
         { []
         }
     {offset
       cbTZY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbU02; else goto cbU01;
       cbU02: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeZipList_$csome_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbU01: // global
           I64[Hp - 16] = some_v_sbSz4_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeZipList_$csome_info" {
     Control.Applicative.$fAlternativeZipList_$csome_info:
         const Control.Applicative.$fAlternativeZipList_$csome_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.081668466 UTC

[section ""data" . Control.Applicative.$fAlternativeZipList_$cmany_closure" {
     Control.Applicative.$fAlternativeZipList_$cmany_closure:
         const Control.Applicative.$fAlternativeZipList_$cmany_info;
 },
 many_v_sbSz7_entry() //  [R1]
         { []
         }
     {offset
       cbU0q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbU0r; else goto cbU0s;
       cbU0r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbU0s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbU0o_info;
           R3 = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Control.Applicative.$fAlternativeZipList1_entry(R3,
                                                                R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . many_v_sbSz7_info" {
     many_v_sbSz7_info:
         const many_v_sbSz7_entry;
         const 1;
         const 16;
 },
 _cbU0o() //  [R1]
         { []
         }
     {offset
       cbU0o: // global
           R3 = Control.Applicative.$fAlternativeZipList_xs_closure+2;
           R2 = R1;
           Sp = Sp + 8;
           call Control.Applicative.$fAlternativeZipList2_entry(R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbU0o_info" {
     block_cbU0o_info:
         const _cbU0o;
         const 0;
         const 30;
 },
 Control.Applicative.$fAlternativeZipList_$cmany_entry() //  [R2]
         { []
         }
     {offset
       cbU0w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbU0A; else goto cbU0z;
       cbU0A: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeZipList_$cmany_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbU0z: // global
           I64[Hp - 16] = many_v_sbSz7_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeZipList_$cmany_info" {
     Control.Applicative.$fAlternativeZipList_$cmany_info:
         const Control.Applicative.$fAlternativeZipList_$cmany_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.087835766 UTC

[section ""data" . Control.Applicative.$fAlternativeZipList_closure" {
     Control.Applicative.$fAlternativeZipList_closure:
         const GHC.Base.C:Alternative_con_info;
         const Control.Applicative.$fApplicativeZipList_closure+1;
         const GHC.Types.[]_closure+1;
         const Control.Applicative.$fAlternativeZipList2_closure+2;
         const Control.Applicative.$fAlternativeZipList_$csome_closure+1;
         const Control.Applicative.$fAlternativeZipList_$cmany_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.089557564 UTC

[section ""cstring" . Control.Applicative.$fReadZipList11_bytes" {
     Control.Applicative.$fReadZipList11_bytes:
         I8[] [90,105,112,76,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.091680802 UTC

[section ""data" . Control.Applicative.$fReadZipList10_closure" {
     Control.Applicative.$fReadZipList10_closure:
         const Control.Applicative.$fReadZipList10_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Applicative.$fReadZipList10_entry() //  [R1]
         { []
         }
     {offset
       cbU0W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbU0X; else goto cbU0Y;
       cbU0X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbU0Y: // global
           (_cbU0T::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbU0T::I64 == 0) goto cbU0V; else goto cbU0U;
       cbU0V: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbU0U: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbU0T::I64;
           R2 = Control.Applicative.$fReadZipList11_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Control.Applicative.$fReadZipList10_info" {
     Control.Applicative.$fReadZipList10_info:
         const Control.Applicative.$fReadZipList10_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.095207969 UTC

[section ""data" . Control.Applicative.$fReadZipList_lexeme1_closure" {
     Control.Applicative.$fReadZipList_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const Control.Applicative.$fReadZipList10_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.097814501 UTC

[section ""cstring" . Control.Applicative.$fReadZipList9_bytes" {
     Control.Applicative.$fReadZipList9_bytes:
         I8[] [123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.099892475 UTC

[section ""data" . Control.Applicative.$fReadZipList8_closure" {
     Control.Applicative.$fReadZipList8_closure:
         const Control.Applicative.$fReadZipList8_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Applicative.$fReadZipList8_entry() //  [R1]
         { []
         }
     {offset
       cbU1e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbU1f; else goto cbU1g;
       cbU1f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbU1g: // global
           (_cbU1b::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbU1b::I64 == 0) goto cbU1d; else goto cbU1c;
       cbU1d: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbU1c: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbU1b::I64;
           R2 = Control.Applicative.$fReadZipList9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Control.Applicative.$fReadZipList8_info" {
     Control.Applicative.$fReadZipList8_info:
         const Control.Applicative.$fReadZipList8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.103273762 UTC

[section ""data" . Control.Applicative.$fReadZipList_lexeme_closure" {
     Control.Applicative.$fReadZipList_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const Control.Applicative.$fReadZipList8_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.10492392 UTC

[section ""cstring" . Control.Applicative.$fReadZipList7_bytes" {
     Control.Applicative.$fReadZipList7_bytes:
         I8[] [103,101,116,90,105,112,76,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.107046487 UTC

[section ""data" . Control.Applicative.$fReadZipList6_closure" {
     Control.Applicative.$fReadZipList6_closure:
         const Control.Applicative.$fReadZipList6_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Applicative.$fReadZipList6_entry() //  [R1]
         { []
         }
     {offset
       cbU1w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbU1x; else goto cbU1y;
       cbU1x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbU1y: // global
           (_cbU1t::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbU1t::I64 == 0) goto cbU1v; else goto cbU1u;
       cbU1v: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbU1u: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbU1t::I64;
           R2 = Control.Applicative.$fReadZipList7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Control.Applicative.$fReadZipList6_info" {
     Control.Applicative.$fReadZipList6_info:
         const Control.Applicative.$fReadZipList6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.110691536 UTC

[section ""data" . Control.Applicative.$fReadZipList5_closure" {
     Control.Applicative.$fReadZipList5_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.112274774 UTC

[section ""cstring" . Control.Applicative.$fReadZipList4_bytes" {
     Control.Applicative.$fReadZipList4_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.114395881 UTC

[section ""data" . Control.Applicative.$fReadZipList3_closure" {
     Control.Applicative.$fReadZipList3_closure:
         const Control.Applicative.$fReadZipList3_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Applicative.$fReadZipList3_entry() //  [R1]
         { []
         }
     {offset
       cbU1O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbU1P; else goto cbU1Q;
       cbU1P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbU1Q: // global
           (_cbU1L::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbU1L::I64 == 0) goto cbU1N; else goto cbU1M;
       cbU1N: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbU1M: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbU1L::I64;
           R2 = Control.Applicative.$fReadZipList4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Control.Applicative.$fReadZipList3_info" {
     Control.Applicative.$fReadZipList3_info:
         const Control.Applicative.$fReadZipList3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.117890715 UTC

[section ""data" . Control.Applicative.$fReadZipList2_closure" {
     Control.Applicative.$fReadZipList2_closure:
         const Text.Read.Lex.Punc_con_info;
         const Control.Applicative.$fReadZipList3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.124521068 UTC

[section ""data" . Control.Applicative.$fReadZipList1_closure" {
     Control.Applicative.$fReadZipList1_closure:
         const Control.Applicative.$fReadZipList1_info;
         const 0;
 },
 lvl_sbSza_entry() //  [R1]
         { []
         }
     {offset
       cbU27: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbU28; else goto cbU29;
       cbU28: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbU29: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readListPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_sbSza_info" {
     lvl_sbSza_info:
         const lvl_sbSza_entry;
         const 1;
         const 16;
 },
 ds_sbSzb_entry() //  [R1]
         { []
         }
     {offset
       cbU2f: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_sbSzb_info" {
     ds_sbSzb_info:
         const ds_sbSzb_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbSzm_entry() //  [R1]
         { []
         }
     {offset
       cbU2Q: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSzm_info" {
     sat_sbSzm_info:
         const sat_sbSzm_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sbSzp_entry() //  [R1, R2]
         { []
         }
     {offset
       cbU2W: // global
           _sbSzk::P64 = R2;
           _sbSzp::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cbU2X; else goto cbU2Y;
       cbU2Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbU30; else goto cbU2Z;
       cbU30: // global
           HpAlloc = 24;
           goto cbU2X;
       cbU2X: // global
           R2 = _sbSzk::P64;
           R1 = _sbSzp::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbU2Z: // global
           _sbSze::P64 = P64[_sbSzp::P64 + 7];
           I64[Hp - 16] = sat_sbSzm_info;
           P64[Hp - 8] = _sbSze::P64;
           P64[Hp] = _sbSzk::P64;
           I64[Sp - 8] = block_cbU2T_info;
           R3 = Hp - 15;
           R2 = Control.Applicative.$fReadZipList2_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSzp_info" {
     sat_sbSzp_info:
         const sat_sbSzp_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SbSVf_srt;
 },
 _cbU2T() //  [R1]
         { []
         }
     {offset
       cbU2T: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbU33; else goto cbU32;
       cbU33: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbU32: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbU2T_info" {
     block_cbU2T_info:
         const _cbU2T;
         const 0;
         const 30;
 },
 sat_sbSzq_entry() //  [R1, R2]
         { []
         }
     {offset
       cbU34: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbU38; else goto cbU37;
       cbU38: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbU37: // global
           _sbSzb::P64 = P64[R1 + 7];
           _sbSze::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sbSzp_info;
           P64[Hp] = _sbSze::P64;
           R5 = Hp - 7;
           R4 = Control.Applicative.$fReadZipList5_closure+1;
           R3 = _sbSzb::P64;
           R2 = Control.Applicative.$fReadZipList6_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSzq_info" {
     sat_sbSzq_info:
         const sat_sbSzq_entry;
         const 2;
         const 64424509451;
         const 4294967301;
         const SbSVf_srt;
 },
 sat_sbSzt_entry() //  [R1, R2]
         { []
         }
     {offset
       cbU3c: // global
           _sbSzi::P64 = R2;
           _sbSzt::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cbU3d; else goto cbU3e;
       cbU3e: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbU3g; else goto cbU3f;
       cbU3g: // global
           HpAlloc = 24;
           goto cbU3d;
       cbU3d: // global
           R2 = _sbSzi::P64;
           R1 = _sbSzt::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbU3f: // global
           _sbSzb::P64 = P64[_sbSzt::P64 + 7];
           _sbSze::P64 = P64[_sbSzt::P64 + 15];
           I64[Hp - 16] = sat_sbSzq_info;
           P64[Hp - 8] = _sbSzb::P64;
           P64[Hp] = _sbSze::P64;
           I64[Sp - 8] = block_cbU39_info;
           R3 = Hp - 15;
           R2 = Control.Applicative.$fReadZipList_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSzt_info" {
     sat_sbSzt_info:
         const sat_sbSzt_entry;
         const 2;
         const 133143986187;
         const 4294967301;
         const SbSVf_srt;
 },
 _cbU39() //  [R1]
         { []
         }
     {offset
       cbU39: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbU3j; else goto cbU3i;
       cbU3j: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbU3i: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbU39_info" {
     block_cbU39_info:
         const _cbU39;
         const 0;
         const 30;
 },
 sat_sbSzw_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbU3k: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbU3l; else goto cbU3m;
       cbU3l: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbU3m: // global
           I64[Sp - 24] = block_cbU2n_info;
           _sbSzb::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sbSzb::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubU3z; else goto cbU2o;
       ubU3z: // global
           call _cbU2n(R1) args: 0, res: 0, upd: 0;
       cbU2o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSzw_info" {
     sat_sbSzw_info:
         const sat_sbSzw_entry;
         const 1;
         const 270582939657;
         const 8589934607;
         const SbSVf_srt;
 },
 _cbU2n() //  [R1]
         { []
         }
     {offset
       cbU2n: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbU3p; else goto cbU3o;
       cbU3p: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbU3o: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto cbU3r; else goto cbU3v;
       cbU3r: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbU3v: // global
           I64[Hp - 16] = sat_sbSzt_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cbU3s_info;
           R3 = Hp - 15;
           R2 = Control.Applicative.$fReadZipList_lexeme1_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbU2n_info" {
     block_cbU2n_info:
         const _cbU2n;
         const 2;
         const 270582939678;
         const SbSVf_srt;
 },
 _cbU3s() //  [R1]
         { []
         }
     {offset
       cbU3s: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbU3y; else goto cbU3x;
       cbU3y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbU3x: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbU3s_info" {
     block_cbU3s_info:
         const _cbU3s;
         const 0;
         const 30;
 },
 Control.Applicative.$fReadZipList1_entry() //  [R2]
         { []
         }
     {offset
       cbU3A: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbU3E; else goto cbU3D;
       cbU3E: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Control.Applicative.$fReadZipList1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbU3D: // global
           I64[Hp - 48] = lvl_sbSza_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_sbSzb_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sbSzw_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fReadZipList1_info" {
     Control.Applicative.$fReadZipList1_info:
         const Control.Applicative.$fReadZipList1_entry;
         const 0;
         const 1095216660494;
         const 4294967301;
         const SbSVf_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.148011373 UTC

[section ""data" . Control.Applicative.$fReadZipList_$creadsPrec_closure" {
     Control.Applicative.$fReadZipList_$creadsPrec_closure:
         const Control.Applicative.$fReadZipList_$creadsPrec_info;
         const 0;
 },
 ds_sbSzy_entry() //  [R1]
         { []
         }
     {offset
       cbU4B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbU4C; else goto cbU4D;
       cbU4C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbU4D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fReadZipList1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sbSzy_info" {
     ds_sbSzy_info:
         const ds_sbSzy_entry;
         const 1;
         const 4294967312;
         const SbSVf_srt+56;
 },
 sat_sbSzA_entry() //  [R1]
         { []
         }
     {offset
       cbU4N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbU4O; else goto cbU4P;
       cbU4O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbU4P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSzA_info" {
     sat_sbSzA_info:
         const sat_sbSzA_entry;
         const 2;
         const 18;
 },
 sat_sbSzB_entry() //  [R1, R2]
         { []
         }
     {offset
       cbU4Q: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbU4U; else goto cbU4T;
       cbU4U: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbU4T: // global
           _sbSzy::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sbSzA_info;
           P64[Hp - 8] = _sbSzy::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSzB_info" {
     sat_sbSzB_info:
         const sat_sbSzB_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Control.Applicative.$fReadZipList_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       cbU4V: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbU4Z; else goto cbU4Y;
       cbU4Z: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Control.Applicative.$fReadZipList_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbU4Y: // global
           I64[Hp - 32] = ds_sbSzy_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sbSzB_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fReadZipList_$creadsPrec_info" {
     Control.Applicative.$fReadZipList_$creadsPrec_info:
         const Control.Applicative.$fReadZipList_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbSVf_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.15686888 UTC

[section ""data" . Control.Applicative.$fReadZipList_$creadListPrec_closure" {
     Control.Applicative.$fReadZipList_$creadListPrec_closure:
         const Control.Applicative.$fReadZipList_$creadListPrec_info;
         const 0;
 },
 sat_sbSzD_entry() //  [R1]
         { []
         }
     {offset
       cbU5p: // global
           R2 = P64[R1 + 16];
           call Control.Applicative.$fReadZipList1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSzD_info" {
     sat_sbSzD_info:
         const sat_sbSzD_entry;
         const 1;
         const 4294967312;
         const SbSVf_srt+56;
 },
 Control.Applicative.$fReadZipList_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cbU5s: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbU5w; else goto cbU5v;
       cbU5w: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Applicative.$fReadZipList_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbU5v: // global
           I64[Hp - 16] = sat_sbSzD_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fReadZipList_$creadListPrec_info" {
     Control.Applicative.$fReadZipList_$creadListPrec_info:
         const Control.Applicative.$fReadZipList_$creadListPrec_entry;
         const 0;
         const 55834574862;
         const 4294967301;
         const SbSVf_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.162744059 UTC

[section ""data" . Control.Applicative.$fReadZipList_$creadList_closure" {
     Control.Applicative.$fReadZipList_$creadList_closure:
         const Control.Applicative.$fReadZipList_$creadList_info;
         const 0;
 },
 sat_sbSzF_entry() //  [R1]
         { []
         }
     {offset
       cbU5Q: // global
           R2 = P64[R1 + 16];
           call Control.Applicative.$fReadZipList1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSzF_info" {
     sat_sbSzF_info:
         const sat_sbSzF_entry;
         const 1;
         const 4294967312;
         const SbSVf_srt+56;
 },
 sat_sbSzG_entry() //  [R1]
         { []
         }
     {offset
       cbU5T: // global
           _sbSzG::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbU5U; else goto cbU5V;
       cbU5V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbU5X; else goto cbU5W;
       cbU5X: // global
           HpAlloc = 24;
           goto cbU5U;
       cbU5U: // global
           R1 = _sbSzG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbU5W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSzG::P64;
           _sbSzE::P64 = P64[_sbSzG::P64 + 16];
           I64[Hp - 16] = sat_sbSzF_info;
           P64[Hp] = _sbSzE::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSzG_info" {
     sat_sbSzG_info:
         const sat_sbSzG_entry;
         const 1;
         const 21474836496;
         const SbSVf_srt+56;
 },
 Control.Applicative.$fReadZipList_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cbU5Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbU62; else goto cbU61;
       cbU62: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Applicative.$fReadZipList_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbU61: // global
           I64[Hp - 16] = sat_sbSzG_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fReadZipList_$creadList_info" {
     Control.Applicative.$fReadZipList_$creadList_info:
         const Control.Applicative.$fReadZipList_$creadList_entry;
         const 0;
         const 90194313230;
         const 4294967301;
         const SbSVf_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.171223195 UTC

[section ""data" . Control.Applicative.$fReadZipList_closure" {
     Control.Applicative.$fReadZipList_closure:
         const Control.Applicative.$fReadZipList_info;
         const 0;
 },
 sat_sbSzL_entry() //  [R1]
         { []
         }
     {offset
       cbU6m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbU6n; else goto cbU6o;
       cbU6n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbU6o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fReadZipList_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSzL_info" {
     sat_sbSzL_info:
         const sat_sbSzL_entry;
         const 1;
         const 4294967312;
         const SbSVf_srt+80;
 },
 sat_sbSzK_entry() //  [R1]
         { []
         }
     {offset
       cbU6t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbU6u; else goto cbU6v;
       cbU6u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbU6v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fReadZipList1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSzK_info" {
     sat_sbSzK_info:
         const sat_sbSzK_entry;
         const 1;
         const 4294967312;
         const SbSVf_srt+56;
 },
 sat_sbSzJ_entry() //  [R1]
         { []
         }
     {offset
       cbU6A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbU6B; else goto cbU6C;
       cbU6B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbU6C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fReadZipList_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSzJ_info" {
     sat_sbSzJ_info:
         const sat_sbSzJ_entry;
         const 1;
         const 4294967312;
         const SbSVf_srt+88;
 },
 sat_sbSzI_entry() //  [R1]
         { []
         }
     {offset
       cbU6H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbU6I; else goto cbU6J;
       cbU6I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbU6J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fReadZipList_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSzI_info" {
     sat_sbSzI_info:
         const sat_sbSzI_entry;
         const 1;
         const 4294967312;
         const SbSVf_srt+64;
 },
 Control.Applicative.$fReadZipList_entry() //  [R2]
         { []
         }
     {offset
       cbU6L: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbU6P; else goto cbU6O;
       cbU6P: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Control.Applicative.$fReadZipList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbU6O: // global
           I64[Hp - 128] = sat_sbSzL_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbSzK_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sbSzJ_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sbSzI_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fReadZipList_info" {
     Control.Applicative.$fReadZipList_info:
         const Control.Applicative.$fReadZipList_entry;
         const 0;
         const 253403070478;
         const 4294967301;
         const SbSVf_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.182088385 UTC

[section ""data" . Control.Applicative.$fEqZipList_closure" {
     Control.Applicative.$fEqZipList_closure:
         const Control.Applicative.$fEqZipList_info;
 },
 sat_sbSzO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbU7o: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Classes.$fEq[]_$c/=_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSzO_info" {
     sat_sbSzO_info:
         const sat_sbSzO_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSzN_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbU7w: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Classes.$fEq[]_$c==_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSzN_info" {
     sat_sbSzN_info:
         const sat_sbSzN_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Control.Applicative.$fEqZipList_entry() //  [R2]
         { []
         }
     {offset
       cbU7A: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbU7E; else goto cbU7D;
       cbU7E: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Control.Applicative.$fEqZipList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbU7D: // global
           I64[Hp - 48] = sat_sbSzO_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sbSzN_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fEqZipList_info" {
     Control.Applicative.$fEqZipList_info:
         const Control.Applicative.$fEqZipList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.188964315 UTC

[section ""data" . Control.Applicative.$fOrdZipList_$cp1Ord_closure" {
     Control.Applicative.$fOrdZipList_$cp1Ord_closure:
         const Control.Applicative.$fOrdZipList_$cp1Ord_info;
 },
 sat_sbSzQ_entry() //  [R1]
         { []
         }
     {offset
       cbU80: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbU81; else goto cbU82;
       cbU81: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbU82: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSzQ_info" {
     sat_sbSzQ_info:
         const sat_sbSzQ_entry;
         const 1;
         const 16;
 },
 Control.Applicative.$fOrdZipList_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       cbU83: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbU87; else goto cbU86;
       cbU87: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Applicative.$fOrdZipList_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbU86: // global
           I64[Hp - 16] = sat_sbSzQ_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Control.Applicative.$fEqZipList_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fOrdZipList_$cp1Ord_info" {
     Control.Applicative.$fOrdZipList_$cp1Ord_info:
         const Control.Applicative.$fOrdZipList_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.196783652 UTC

[section ""data" . Control.Applicative.$fOrdZipList_closure" {
     Control.Applicative.$fOrdZipList_closure:
         const Control.Applicative.$fOrdZipList_info;
 },
 sat_sbSzZ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbU8p: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Classes.$fOrd[]_$cmin_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSzZ_info" {
     sat_sbSzZ_info:
         const sat_sbSzZ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSzY_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbU8x: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Classes.$fOrd[]_$cmax_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSzY_info" {
     sat_sbSzY_info:
         const sat_sbSzY_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSzX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbU8F: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Classes.$fOrd[]_$c>=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSzX_info" {
     sat_sbSzX_info:
         const sat_sbSzX_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSzW_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbU8N: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Classes.$fOrd[]_$c>_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSzW_info" {
     sat_sbSzW_info:
         const sat_sbSzW_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSzV_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbU8V: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Classes.$fOrd[]_$c<=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSzV_info" {
     sat_sbSzV_info:
         const sat_sbSzV_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSzU_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbU93: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Classes.$fOrd[]_$c<_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSzU_info" {
     sat_sbSzU_info:
         const sat_sbSzU_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSzT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbU9b: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Classes.$fOrd[]_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSzT_info" {
     sat_sbSzT_info:
         const sat_sbSzT_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSzS_entry() //  [R1]
         { []
         }
     {offset
       cbU9i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbU9j; else goto cbU9k;
       cbU9j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbU9k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fOrdZipList_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSzS_info" {
     sat_sbSzS_info:
         const sat_sbSzS_entry;
         const 1;
         const 16;
 },
 Control.Applicative.$fOrdZipList_entry() //  [R2]
         { []
         }
     {offset
       cbU9m: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cbU9q; else goto cbU9p;
       cbU9q: // global
           HpAlloc = 208;
           R2 = R2;
           R1 = Control.Applicative.$fOrdZipList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbU9p: // global
           I64[Hp - 200] = sat_sbSzZ_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sbSzY_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_sbSzX_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sbSzW_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sbSzV_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sbSzU_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbSzT_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sbSzS_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 102;
           P64[Hp - 40] = Hp - 118;
           P64[Hp - 32] = Hp - 134;
           P64[Hp - 24] = Hp - 150;
           P64[Hp - 16] = Hp - 166;
           P64[Hp - 8] = Hp - 182;
           P64[Hp] = Hp - 198;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fOrdZipList_info" {
     Control.Applicative.$fOrdZipList_info:
         const Control.Applicative.$fOrdZipList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.212465178 UTC

[section ""cstring" . Control.Applicative.$fShowZipList3_bytes" {
     Control.Applicative.$fShowZipList3_bytes:
         I8[] [90,105,112,76,105,115,116,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.21411971 UTC

[section ""cstring" . Control.Applicative.$fShowZipList2_bytes" {
     Control.Applicative.$fShowZipList2_bytes:
         I8[] [103,101,116,90,105,112,76,105,115,116,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.221340544 UTC

[section ""data" . Control.Applicative.$w$cshowsPrec_closure" {
     Control.Applicative.$w$cshowsPrec_closure:
         const Control.Applicative.$w$cshowsPrec_info;
 },
 f_sbSA3_entry() //  [R1]
         { []
         }
     {offset
       cbUad: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbUae; else goto cbUaf;
       cbUae: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUaf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Show.showList_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sbSA3_info" {
     f_sbSA3_info:
         const f_sbSA3_entry;
         const 2;
         const 18;
 },
 sat_sbSA6_entry() //  [R1]
         { []
         }
     {offset
       cbUaA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUaB; else goto cbUaC;
       cbUaB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUaC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Control.Applicative.$fReadZipList4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSA6_info" {
     sat_sbSA6_info:
         const sat_sbSA6_entry;
         const 1;
         const 16;
 },
 sat_sbSA7_entry() //  [R1]
         { []
         }
     {offset
       cbUaD: // global
           _sbSA7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbUaE; else goto cbUaF;
       cbUaF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUaH; else goto cbUaG;
       cbUaH: // global
           HpAlloc = 24;
           goto cbUaE;
       cbUaE: // global
           R1 = _sbSA7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUaG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSA7::P64;
           _sbSA3::P64 = P64[_sbSA7::P64 + 16];
           _sbSA5::P64 = P64[_sbSA7::P64 + 24];
           I64[Hp - 16] = sat_sbSA6_info;
           P64[Hp] = _sbSA5::P64;
           R2 = Hp - 16;
           R1 = _sbSA3::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSA7_info" {
     sat_sbSA7_info:
         const sat_sbSA7_entry;
         const 2;
         const 18;
 },
 sat_sbSA8_entry() //  [R1]
         { []
         }
     {offset
       cbUaI: // global
           _sbSA8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbUaJ; else goto cbUaK;
       cbUaK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbUaM; else goto cbUaL;
       cbUaM: // global
           HpAlloc = 32;
           goto cbUaJ;
       cbUaJ: // global
           R1 = _sbSA8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUaL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSA8::P64;
           _sbSA3::P64 = P64[_sbSA8::P64 + 16];
           _sbSA5::P64 = P64[_sbSA8::P64 + 24];
           I64[Hp - 24] = sat_sbSA7_info;
           P64[Hp - 8] = _sbSA3::P64;
           P64[Hp] = _sbSA5::P64;
           R3 = Hp - 24;
           R2 = Control.Applicative.$fShowZipList2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSA8_info" {
     sat_sbSA8_info:
         const sat_sbSA8_entry;
         const 2;
         const 18;
 },
 sat_sbSA9_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUaN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbUaR; else goto cbUaQ;
       cbUaR: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUaQ: // global
           _sbSA3::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sbSA8_info;
           P64[Hp - 8] = _sbSA3::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Control.Applicative.$fShowZipList3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSA9_info" {
     sat_sbSA9_info:
         const sat_sbSA9_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbSAc_entry() //  [R1]
         { []
         }
     {offset
       cbUbf: // global
           _sbSAc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbUbg; else goto cbUbh;
       cbUbh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUbj; else goto cbUbi;
       cbUbj: // global
           HpAlloc = 24;
           goto cbUbg;
       cbUbg: // global
           R1 = _sbSAc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUbi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSAc::P64;
           _sbSAa::P64 = P64[_sbSAc::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sbSAa::P64;
           R3 = Hp - 14;
           R2 = Control.Applicative.$fReadZipList4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSAc_info" {
     sat_sbSAc_info:
         const sat_sbSAc_entry;
         const 1;
         const 16;
 },
 sat_sbSAd_entry() //  [R1]
         { []
         }
     {offset
       cbUbk: // global
           _sbSAd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbUbl; else goto cbUbm;
       cbUbm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUbo; else goto cbUbn;
       cbUbo: // global
           HpAlloc = 24;
           goto cbUbl;
       cbUbl: // global
           R1 = _sbSAd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUbn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSAd::P64;
           _sbSA3::P64 = P64[_sbSAd::P64 + 16];
           _sbSAa::P64 = P64[_sbSAd::P64 + 24];
           I64[Hp - 16] = sat_sbSAc_info;
           P64[Hp] = _sbSAa::P64;
           R2 = Hp - 16;
           R1 = _sbSA3::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSAd_info" {
     sat_sbSAd_info:
         const sat_sbSAd_entry;
         const 2;
         const 18;
 },
 sat_sbSAe_entry() //  [R1]
         { []
         }
     {offset
       cbUbp: // global
           _sbSAe::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbUbq; else goto cbUbr;
       cbUbr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbUbt; else goto cbUbs;
       cbUbt: // global
           HpAlloc = 32;
           goto cbUbq;
       cbUbq: // global
           R1 = _sbSAe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUbs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSAe::P64;
           _sbSA3::P64 = P64[_sbSAe::P64 + 16];
           _sbSAa::P64 = P64[_sbSAe::P64 + 24];
           I64[Hp - 24] = sat_sbSAd_info;
           P64[Hp - 8] = _sbSA3::P64;
           P64[Hp] = _sbSAa::P64;
           R3 = Hp - 24;
           R2 = Control.Applicative.$fShowZipList2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSAe_info" {
     sat_sbSAe_info:
         const sat_sbSAe_entry;
         const 2;
         const 18;
 },
 sat_sbSAf_entry() //  [R1]
         { []
         }
     {offset
       cbUbu: // global
           _sbSAf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbUbv; else goto cbUbw;
       cbUbw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbUby; else goto cbUbx;
       cbUby: // global
           HpAlloc = 32;
           goto cbUbv;
       cbUbv: // global
           R1 = _sbSAf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUbx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSAf::P64;
           _sbSA3::P64 = P64[_sbSAf::P64 + 16];
           _sbSAa::P64 = P64[_sbSAf::P64 + 24];
           I64[Hp - 24] = sat_sbSAe_info;
           P64[Hp - 8] = _sbSA3::P64;
           P64[Hp] = _sbSAa::P64;
           R3 = Hp - 24;
           R2 = Control.Applicative.$fShowZipList3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSAf_info" {
     sat_sbSAf_info:
         const sat_sbSAf_entry;
         const 2;
         const 18;
 },
 sat_sbSAg_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUbA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbUbE; else goto cbUbD;
       cbUbE: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUbD: // global
           _sbSA3::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sbSAf_info;
           P64[Hp - 32] = _sbSA3::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSAg_info" {
     sat_sbSAg_info:
         const sat_sbSAg_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Control.Applicative.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbUbI: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbUbM; else goto cbUbL;
       cbUbM: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUbL: // global
           I64[Hp - 40] = f_sbSA3_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _cbUa9::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto cbUbG; else goto cbUbH;
       cbUbG: // global
           I64[Hp - 8] = sat_sbSA9_info;
           P64[Hp] = _cbUa9::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbUbH: // global
           I64[Hp - 8] = sat_sbSAg_info;
           P64[Hp] = _cbUa9::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$w$cshowsPrec_info" {
     Control.Applicative.$w$cshowsPrec_info:
         const Control.Applicative.$w$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.243066364 UTC

[section ""data" . Control.Applicative.$fShowZipList_$cshowsPrec_closure" {
     Control.Applicative.$fShowZipList_$cshowsPrec_closure:
         const Control.Applicative.$fShowZipList_$cshowsPrec_info;
 },
 Control.Applicative.$fShowZipList_$cshowsPrec_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cbUcF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbUcG; else goto cbUcH;
       cbUcG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fShowZipList_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUcH: // global
           I64[Sp - 24] = block_cbUcC_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubUcL; else goto cbUcD;
       ubUcL: // global
           call _cbUcC(R1) args: 0, res: 0, upd: 0;
       cbUcD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fShowZipList_$cshowsPrec_info" {
     Control.Applicative.$fShowZipList_$cshowsPrec_info:
         const Control.Applicative.$fShowZipList_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbUcC() //  [R1]
         { []
         }
     {offset
       cbUcC: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Control.Applicative.$w$cshowsPrec_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbUcC_info" {
     block_cbUcC_info:
         const _cbUcC;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.250282746 UTC

[section ""data" . Control.Applicative.$fShowZipList_$cshow_closure" {
     Control.Applicative.$fShowZipList_$cshow_closure:
         const Control.Applicative.$fShowZipList_$cshow_info;
         const 0;
 },
 sat_sbSAo_entry() //  [R1]
         { []
         }
     {offset
       cbUd7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbUd8; else goto cbUd9;
       cbUd8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUd9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Control.Applicative.$fReadZipList3_closure;
           Sp = Sp - 40;
           call GHC.Show.showList_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSAo_info" {
     sat_sbSAo_info:
         const sat_sbSAo_entry;
         const 2;
         const 4294967314;
         const SbSVf_srt+104;
 },
 sat_sbSAp_entry() //  [R1]
         { []
         }
     {offset
       cbUda: // global
           _sbSAp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbUdb; else goto cbUdc;
       cbUdc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbUde; else goto cbUdd;
       cbUde: // global
           HpAlloc = 32;
           goto cbUdb;
       cbUdb: // global
           R1 = _sbSAp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUdd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbSAp::P64;
           _sbSAm::P64 = P64[_sbSAp::P64 + 16];
           _sbSAn::P64 = P64[_sbSAp::P64 + 24];
           I64[Hp - 24] = sat_sbSAo_info;
           P64[Hp - 8] = _sbSAm::P64;
           P64[Hp] = _sbSAn::P64;
           R3 = Hp - 24;
           R2 = Control.Applicative.$fShowZipList2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSAp_info" {
     sat_sbSAp_info:
         const sat_sbSAp_entry;
         const 2;
         const 4294967314;
         const SbSVf_srt+104;
 },
 Control.Applicative.$fShowZipList_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cbUdf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbUdj; else goto cbUdi;
       cbUdj: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fShowZipList_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUdi: // global
           I64[Hp - 24] = sat_sbSAp_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Control.Applicative.$fShowZipList3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fShowZipList_$cshow_info" {
     Control.Applicative.$fShowZipList_$cshow_info:
         const Control.Applicative.$fShowZipList_$cshow_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SbSVf_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.256852326 UTC

[section ""data" . Control.Applicative.$fShowZipList1_closure" {
     Control.Applicative.$fShowZipList1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.259429899 UTC

[section ""data" . Control.Applicative.$fShowZipList_$cshowList_closure" {
     Control.Applicative.$fShowZipList_$cshowList_closure:
         const Control.Applicative.$fShowZipList_$cshowList_info;
 },
 sat_sbSAu_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUdH: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Control.Applicative.$w$cshowsPrec_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSAu_info" {
     sat_sbSAu_info:
         const sat_sbSAu_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Control.Applicative.$fShowZipList_$cshowList_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cbUdK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbUdO; else goto cbUdN;
       cbUdO: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fShowZipList_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUdN: // global
           I64[Hp - 8] = sat_sbSAu_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fShowZipList_$cshowList_info" {
     Control.Applicative.$fShowZipList_$cshowList_info:
         const Control.Applicative.$fShowZipList_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.265883728 UTC

[section ""data" . Control.Applicative.$fShowZipList_closure" {
     Control.Applicative.$fShowZipList_closure:
         const Control.Applicative.$fShowZipList_info;
         const 0;
 },
 sat_sbSAy_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbUe5: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fShowZipList_$cshowList_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSAy_info" {
     sat_sbSAy_info:
         const sat_sbSAy_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbSAx_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUed: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Control.Applicative.$fShowZipList_$cshow_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSAx_info" {
     sat_sbSAx_info:
         const sat_sbSAx_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SbSVf_srt+112;
 },
 sat_sbSAw_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbUel: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fShowZipList_$cshowsPrec_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbSAw_info" {
     sat_sbSAw_info:
         const sat_sbSAw_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Control.Applicative.$fShowZipList_entry() //  [R2]
         { []
         }
     {offset
       cbUep: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbUet; else goto cbUes;
       cbUet: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Control.Applicative.$fShowZipList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUes: // global
           I64[Hp - 72] = sat_sbSAy_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sbSAx_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sbSAw_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fShowZipList_info" {
     Control.Applicative.$fShowZipList_info:
         const Control.Applicative.$fShowZipList_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbSVf_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.273718974 UTC

[section ""data" . Control.Applicative.$fGeneric1WrappedArrow1_closure" {
     Control.Applicative.$fGeneric1WrappedArrow1_closure:
         const Control.Applicative.$fGeneric1WrappedArrow1_info;
 },
 Control.Applicative.$fGeneric1WrappedArrow1_entry() //  [R2]
         { []
         }
     {offset
       cbUeP: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGeneric1WrappedArrow1_info" {
     Control.Applicative.$fGeneric1WrappedArrow1_info:
         const Control.Applicative.$fGeneric1WrappedArrow1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.27700508 UTC

[section ""data" . Control.Applicative.$fGeneric1WrappedArrow2_closure" {
     Control.Applicative.$fGeneric1WrappedArrow2_closure:
         const Control.Applicative.$fGeneric1WrappedArrow2_info;
 },
 Control.Applicative.$fGeneric1WrappedArrow2_entry() //  [R2]
         { []
         }
     {offset
       cbUf0: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGeneric1WrappedArrow2_info" {
     Control.Applicative.$fGeneric1WrappedArrow2_info:
         const Control.Applicative.$fGeneric1WrappedArrow2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.280918429 UTC

[section ""data" . Control.Applicative.$fGeneric1WrappedArrow_closure" {
     Control.Applicative.$fGeneric1WrappedArrow_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Control.Applicative.$fGeneric1WrappedArrow2_closure+1;
         const Control.Applicative.$fGeneric1WrappedArrow1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.282896351 UTC

[section ""data" . Control.Applicative.$fGenericWrappedArrow1_closure" {
     Control.Applicative.$fGenericWrappedArrow1_closure:
         const Control.Applicative.$fGenericWrappedArrow1_info;
 },
 Control.Applicative.$fGenericWrappedArrow1_entry() //  [R2]
         { []
         }
     {offset
       cbUfc: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGenericWrappedArrow1_info" {
     Control.Applicative.$fGenericWrappedArrow1_info:
         const Control.Applicative.$fGenericWrappedArrow1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.286099327 UTC

[section ""data" . Control.Applicative.$fGenericWrappedArrow2_closure" {
     Control.Applicative.$fGenericWrappedArrow2_closure:
         const Control.Applicative.$fGenericWrappedArrow2_info;
 },
 Control.Applicative.$fGenericWrappedArrow2_entry() //  [R2]
         { []
         }
     {offset
       cbUfn: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGenericWrappedArrow2_info" {
     Control.Applicative.$fGenericWrappedArrow2_info:
         const Control.Applicative.$fGenericWrappedArrow2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.289044649 UTC

[section ""data" . Control.Applicative.$fGenericWrappedArrow_closure" {
     Control.Applicative.$fGenericWrappedArrow_closure:
         const GHC.Generics.C:Generic_con_info;
         const Control.Applicative.$fGenericWrappedArrow2_closure+1;
         const Control.Applicative.$fGenericWrappedArrow1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.293170342 UTC

[section ""data" . Control.Applicative.$fMonadWrappedMonad_closure" {
     Control.Applicative.$fMonadWrappedMonad_closure:
         const Control.Applicative.$fMonadWrappedMonad_info;
 },
 sat_sbSAI_entry() //  [R1]
         { []
         }
     {offset
       cbUfD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUfE; else goto cbUfF;
       cbUfE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUfF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.fail_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSAI_info" {
     sat_sbSAI_info:
         const sat_sbSAI_entry;
         const 1;
         const 16;
 },
 sat_sbSAH_entry() //  [R1]
         { []
         }
     {offset
       cbUfK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUfL; else goto cbUfM;
       cbUfL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUfM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSAH_info" {
     sat_sbSAH_info:
         const sat_sbSAH_entry;
         const 1;
         const 16;
 },
 sat_sbSAG_entry() //  [R1]
         { []
         }
     {offset
       cbUfR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUfS; else goto cbUfT;
       cbUfS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUfT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.>>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSAG_info" {
     sat_sbSAG_info:
         const sat_sbSAG_entry;
         const 1;
         const 16;
 },
 sat_sbSAF_entry() //  [R1]
         { []
         }
     {offset
       cbUfY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUfZ; else goto cbUg0;
       cbUfZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUg0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.>>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSAF_info" {
     sat_sbSAF_info:
         const sat_sbSAF_entry;
         const 1;
         const 16;
 },
 sat_sbSAE_entry() //  [R1]
         { []
         }
     {offset
       cbUg5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUg6; else goto cbUg7;
       cbUg6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUg7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fApplicativeWrappedMonad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSAE_info" {
     sat_sbSAE_info:
         const sat_sbSAE_entry;
         const 1;
         const 16;
 },
 Control.Applicative.$fMonadWrappedMonad_entry() //  [R2]
         { []
         }
     {offset
       cbUg9: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cbUgd; else goto cbUgc;
       cbUgd: // global
           HpAlloc = 168;
           R2 = R2;
           R1 = Control.Applicative.$fMonadWrappedMonad_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUgc: // global
           I64[Hp - 160] = sat_sbSAI_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sbSAH_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sbSAG_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sbSAF_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_sbSAE_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = GHC.Base.C:Monad_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 112;
           P64[Hp - 8] = Hp - 136;
           P64[Hp] = Hp - 160;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fMonadWrappedMonad_info" {
     Control.Applicative.$fMonadWrappedMonad_info:
         const Control.Applicative.$fMonadWrappedMonad_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.304488855 UTC

[section ""data" . Control.Applicative.$fGeneric1WrappedMonad1_closure" {
     Control.Applicative.$fGeneric1WrappedMonad1_closure:
         const Control.Applicative.$fGeneric1WrappedMonad1_info;
 },
 Control.Applicative.$fGeneric1WrappedMonad1_entry() //  [R2]
         { []
         }
     {offset
       cbUgM: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGeneric1WrappedMonad1_info" {
     Control.Applicative.$fGeneric1WrappedMonad1_info:
         const Control.Applicative.$fGeneric1WrappedMonad1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.308201485 UTC

[section ""data" . Control.Applicative.$fGeneric1WrappedMonad2_closure" {
     Control.Applicative.$fGeneric1WrappedMonad2_closure:
         const Control.Applicative.$fGeneric1WrappedMonad2_info;
 },
 Control.Applicative.$fGeneric1WrappedMonad2_entry() //  [R2]
         { []
         }
     {offset
       cbUgX: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGeneric1WrappedMonad2_info" {
     Control.Applicative.$fGeneric1WrappedMonad2_info:
         const Control.Applicative.$fGeneric1WrappedMonad2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.311818761 UTC

[section ""data" . Control.Applicative.$fGeneric1WrappedMonad_closure" {
     Control.Applicative.$fGeneric1WrappedMonad_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Control.Applicative.$fGeneric1WrappedMonad2_closure+1;
         const Control.Applicative.$fGeneric1WrappedMonad1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.31380979 UTC

[section ""data" . Control.Applicative.$fGenericWrappedMonad1_closure" {
     Control.Applicative.$fGenericWrappedMonad1_closure:
         const Control.Applicative.$fGenericWrappedMonad1_info;
 },
 Control.Applicative.$fGenericWrappedMonad1_entry() //  [R2]
         { []
         }
     {offset
       cbUh9: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGenericWrappedMonad1_info" {
     Control.Applicative.$fGenericWrappedMonad1_info:
         const Control.Applicative.$fGenericWrappedMonad1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.316992942 UTC

[section ""data" . Control.Applicative.$fGenericWrappedMonad2_closure" {
     Control.Applicative.$fGenericWrappedMonad2_closure:
         const Control.Applicative.$fGenericWrappedMonad2_info;
 },
 Control.Applicative.$fGenericWrappedMonad2_entry() //  [R2]
         { []
         }
     {offset
       cbUhk: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGenericWrappedMonad2_info" {
     Control.Applicative.$fGenericWrappedMonad2_info:
         const Control.Applicative.$fGenericWrappedMonad2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.320012405 UTC

[section ""data" . Control.Applicative.$fGenericWrappedMonad_closure" {
     Control.Applicative.$fGenericWrappedMonad_closure:
         const GHC.Generics.C:Generic_con_info;
         const Control.Applicative.$fGenericWrappedMonad2_closure+1;
         const Control.Applicative.$fGenericWrappedMonad1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.322321847 UTC

[section ""data" . Control.Applicative.unwrapMonad_closure" {
     Control.Applicative.unwrapMonad_closure:
         const Control.Applicative.unwrapMonad_info;
 },
 Control.Applicative.unwrapMonad_entry() //  [R2]
         { []
         }
     {offset
       cbUhw: // global
           R2 = R2;
           call Control.Applicative.$fGeneric1WrappedMonad2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.unwrapMonad_info" {
     Control.Applicative.unwrapMonad_info:
         const Control.Applicative.unwrapMonad_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.32558219 UTC

[section ""data" . Control.Applicative.unwrapArrow_closure" {
     Control.Applicative.unwrapArrow_closure:
         const Control.Applicative.unwrapArrow_info;
 },
 Control.Applicative.unwrapArrow_entry() //  [R2]
         { []
         }
     {offset
       cbUhH: // global
           R2 = R2;
           call Control.Applicative.$fGeneric1WrappedArrow2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.unwrapArrow_info" {
     Control.Applicative.unwrapArrow_info:
         const Control.Applicative.unwrapArrow_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.328748284 UTC

[section ""data" . Control.Applicative.getZipList_closure" {
     Control.Applicative.getZipList_closure:
         const Control.Applicative.getZipList_info;
 },
 Control.Applicative.getZipList_entry() //  [R2]
         { []
         }
     {offset
       cbUhS: // global
           R2 = R2;
           call Control.Applicative.$fGeneric1ZipList2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.getZipList_info" {
     Control.Applicative.getZipList_info:
         const Control.Applicative.getZipList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.333969121 UTC

[section ""data" . Control.Applicative.optional_closure" {
     Control.Applicative.optional_closure:
         const Control.Applicative.optional_info;
 },
 $dApplicative_sbSAP_entry() //  [R1]
         { []
         }
     {offset
       cbUi7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUi8; else goto cbUi9;
       cbUi8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUi9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Alternative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dApplicative_sbSAP_info" {
     $dApplicative_sbSAP_info:
         const $dApplicative_sbSAP_entry;
         const 1;
         const 16;
 },
 sat_sbSAS_entry() //  [R1]
         { []
         }
     {offset
       cbUie: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbUif; else goto cbUig;
       cbUif: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUig: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSAS_info" {
     sat_sbSAS_info:
         const sat_sbSAS_entry;
         const 1;
         const 16;
 },
 sat_sbSAR_entry() //  [R1]
         { []
         }
     {offset
       cbUin: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbUio; else goto cbUip;
       cbUio: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUip: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbUil_info;
           R2 = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbSAR_info" {
     sat_sbSAR_info:
         const sat_sbSAR_entry;
         const 2;
         const 18;
 },
 _cbUil() //  [R1]
         { []
         }
     {offset
       cbUil: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbUil_info" {
     block_cbUil_info:
         const _cbUil;
         const 1;
         const 30;
 },
 Control.Applicative.optional_entry() //  [R2, R3]
         { []
         }
     {offset
       cbUit: // global
           _sbSAO::P64 = R3;
           _sbSAN::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbUiu; else goto cbUiv;
       cbUiv: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbUix; else goto cbUiw;
       cbUix: // global
           HpAlloc = 80;
           goto cbUiu;
       cbUiu: // global
           R3 = _sbSAO::P64;
           R2 = _sbSAN::P64;
           R1 = Control.Applicative.optional_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUiw: // global
           I64[Hp - 72] = $dApplicative_sbSAP_info;
           P64[Hp - 56] = _sbSAN::P64;
           I64[Hp - 48] = sat_sbSAS_info;
           _cbUi3::P64 = Hp - 72;
           P64[Hp - 32] = _cbUi3::P64;
           I64[Hp - 24] = sat_sbSAR_info;
           P64[Hp - 8] = _sbSAO::P64;
           P64[Hp] = _cbUi3::P64;
           R2 = _sbSAN::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 24;
           call GHC.Base.<|>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.optional_info" {
     Control.Applicative.optional_info:
         const Control.Applicative.optional_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.344210904 UTC

[section ""cstring" . Control.Applicative.$trModule4_bytes" {
     Control.Applicative.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.345888191 UTC

[section ""data" . Control.Applicative.$trModule3_closure" {
     Control.Applicative.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Applicative.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.347512589 UTC

[section ""cstring" . Control.Applicative.$trModule2_bytes" {
     Control.Applicative.$trModule2_bytes:
         I8[] [67,111,110,116,114,111,108,46,65,112,112,108,105,99,97,116,105,118,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.34913592 UTC

[section ""data" . Control.Applicative.$trModule1_closure" {
     Control.Applicative.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Applicative.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.350850456 UTC

[section ""data" . Control.Applicative.$trModule_closure" {
     Control.Applicative.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Control.Applicative.$trModule3_closure+1;
         const Control.Applicative.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.352520715 UTC

[section ""data" . Control.Applicative.$tcWrappedMonad1_closure" {
     Control.Applicative.$tcWrappedMonad1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*Arr*_closure;
         const GHC.Types.krep$*Arr*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.354512325 UTC

[section ""data" . Control.Applicative.$tcWrappedArrow1_closure" {
     Control.Applicative.$tcWrappedArrow1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*->*->*_closure;
         const GHC.Types.krep$*->*->*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.356206355 UTC

[section ""data" . $krep_rbSvt_closure" {
     $krep_rbSvt_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.357853719 UTC

[section ""data" . $krep1_rbSvu_closure" {
     $krep1_rbSvu_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.359497825 UTC

[section ""data" . $krep2_rbSvv_closure" {
     $krep2_rbSvv_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.361165144 UTC

[section ""data" . $krep3_rbSvw_closure" {
     $krep3_rbSvw_closure:
         const :_con_info;
         const $krep2_rbSvv_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.362866323 UTC

[section ""data" . $krep4_rbSvx_closure" {
     $krep4_rbSvx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep3_rbSvw_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.364564586 UTC

[section ""data" . $krep5_rbSvy_closure" {
     $krep5_rbSvy_closure:
         const GHC.Types.KindRepApp_con_info;
         const $krep2_rbSvv_closure+2;
         const $krep1_rbSvu_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.366246111 UTC

[section ""data" . $krep6_rbSvz_closure" {
     $krep6_rbSvz_closure:
         const GHC.Types.KindRepApp_con_info;
         const $krep5_rbSvy_closure+3;
         const $krep_rbSvt_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.368471891 UTC

[section ""cstring" . Control.Applicative.$tcWrappedMonad3_bytes" {
     Control.Applicative.$tcWrappedMonad3_bytes:
         I8[] [87,114,97,112,112,101,100,77,111,110,97,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.370673336 UTC

[section ""data" . Control.Applicative.$tcWrappedMonad2_closure" {
     Control.Applicative.$tcWrappedMonad2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Applicative.$tcWrappedMonad3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.372402632 UTC

[section ""data" . Control.Applicative.$tcWrappedMonad_closure" {
     Control.Applicative.$tcWrappedMonad_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Applicative.$trModule_closure+1;
         const Control.Applicative.$tcWrappedMonad2_closure+1;
         const Control.Applicative.$tcWrappedMonad1_closure+4;
         const 12971590878300233698;
         const 12447260690856494251;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.37420138 UTC

[section ""data" . $krep7_rbSvA_closure" {
     $krep7_rbSvA_closure:
         const :_con_info;
         const $krep1_rbSvu_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.375801754 UTC

[section ""data" . $krep8_rbSvB_closure" {
     $krep8_rbSvB_closure:
         const :_con_info;
         const $krep2_rbSvv_closure+2;
         const $krep7_rbSvA_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.377501247 UTC

[section ""data" . $krep9_rbSvC_closure" {
     $krep9_rbSvC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Applicative.$tcWrappedMonad_closure+1;
         const $krep8_rbSvB_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.379235948 UTC

[section ""data" . Control.Applicative.$tc'WrapMonad1_closure" {
     Control.Applicative.$tc'WrapMonad1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rbSvy_closure+3;
         const $krep9_rbSvC_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.380924952 UTC

[section ""cstring" . Control.Applicative.$tc'WrapMonad3_bytes" {
     Control.Applicative.$tc'WrapMonad3_bytes:
         I8[] [39,87,114,97,112,77,111,110,97,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.382616312 UTC

[section ""data" . Control.Applicative.$tc'WrapMonad2_closure" {
     Control.Applicative.$tc'WrapMonad2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Applicative.$tc'WrapMonad3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.384321407 UTC

[section ""data" . Control.Applicative.$tc'WrapMonad_closure" {
     Control.Applicative.$tc'WrapMonad_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Applicative.$trModule_closure+1;
         const Control.Applicative.$tc'WrapMonad2_closure+1;
         const Control.Applicative.$tc'WrapMonad1_closure+4;
         const 10363415327661881286;
         const 6845751270384138997;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.386550069 UTC

[section ""cstring" . Control.Applicative.$tcWrappedArrow3_bytes" {
     Control.Applicative.$tcWrappedArrow3_bytes:
         I8[] [87,114,97,112,112,101,100,65,114,114,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.38810273 UTC

[section ""data" . Control.Applicative.$tcWrappedArrow2_closure" {
     Control.Applicative.$tcWrappedArrow2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Applicative.$tcWrappedArrow3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.390903047 UTC

[section ""data" . Control.Applicative.$tcWrappedArrow_closure" {
     Control.Applicative.$tcWrappedArrow_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Applicative.$trModule_closure+1;
         const Control.Applicative.$tcWrappedArrow2_closure+1;
         const Control.Applicative.$tcWrappedArrow1_closure+4;
         const 17995829375472255965;
         const 6668242383287740398;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.392847348 UTC

[section ""data" . $krep10_rbSvD_closure" {
     $krep10_rbSvD_closure:
         const :_con_info;
         const $krep_rbSvt_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.395528776 UTC

[section ""data" . $krep11_rbSvE_closure" {
     $krep11_rbSvE_closure:
         const :_con_info;
         const $krep1_rbSvu_closure+2;
         const $krep10_rbSvD_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.397387848 UTC

[section ""data" . $krep12_rbSvF_closure" {
     $krep12_rbSvF_closure:
         const :_con_info;
         const $krep2_rbSvv_closure+2;
         const $krep11_rbSvE_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.399202874 UTC

[section ""data" . $krep13_rbSvG_closure" {
     $krep13_rbSvG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Applicative.$tcWrappedArrow_closure+1;
         const $krep12_rbSvF_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.400879161 UTC

[section ""data" . Control.Applicative.$tc'WrapArrow1_closure" {
     Control.Applicative.$tc'WrapArrow1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rbSvz_closure+3;
         const $krep13_rbSvG_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.402806501 UTC

[section ""cstring" . Control.Applicative.$tc'WrapArrow3_bytes" {
     Control.Applicative.$tc'WrapArrow3_bytes:
         I8[] [39,87,114,97,112,65,114,114,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.404733418 UTC

[section ""data" . Control.Applicative.$tc'WrapArrow2_closure" {
     Control.Applicative.$tc'WrapArrow2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Applicative.$tc'WrapArrow3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.407270762 UTC

[section ""data" . Control.Applicative.$tc'WrapArrow_closure" {
     Control.Applicative.$tc'WrapArrow_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Applicative.$trModule_closure+1;
         const Control.Applicative.$tc'WrapArrow2_closure+1;
         const Control.Applicative.$tc'WrapArrow1_closure+4;
         const 4796259816778499037;
         const 13482613273239263357;
         const 3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.409207017 UTC

[section ""data" . Control.Applicative.$tcZipList1_closure" {
     Control.Applicative.$tcZipList1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Applicative.$fReadZipList11_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.411244479 UTC

[section ""data" . Control.Applicative.$tcZipList_closure" {
     Control.Applicative.$tcZipList_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Applicative.$trModule_closure+1;
         const Control.Applicative.$tcZipList1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 11311650752326360483;
         const 5534599578149162946;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.41317457 UTC

[section ""data" . $krep14_rbSvH_closure" {
     $krep14_rbSvH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Applicative.$tcZipList_closure+1;
         const $krep3_rbSvw_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.415066219 UTC

[section ""data" . Control.Applicative.$tc'ZipList1_closure" {
     Control.Applicative.$tc'ZipList1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rbSvx_closure+1;
         const $krep14_rbSvH_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.416908921 UTC

[section ""cstring" . Control.Applicative.$tc'ZipList3_bytes" {
     Control.Applicative.$tc'ZipList3_bytes:
         I8[] [39,90,105,112,76,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.419324721 UTC

[section ""data" . Control.Applicative.$tc'ZipList2_closure" {
     Control.Applicative.$tc'ZipList2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Applicative.$tc'ZipList3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.421058483 UTC

[section ""data" . Control.Applicative.$tc'ZipList_closure" {
     Control.Applicative.$tc'ZipList_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Applicative.$trModule_closure+1;
         const Control.Applicative.$tc'ZipList2_closure+1;
         const Control.Applicative.$tc'ZipList1_closure+4;
         const 15353069281551614305;
         const 7665927634319452478;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:46.423418717 UTC

[section ""relreadonly" . SbSVf_srt" {
     SbSVf_srt:
         const Text.Read.Lex.$wexpect_closure;
         const Control.Applicative.$fReadZipList2_closure;
         const GHC.Read.readField_closure;
         const Control.Applicative.$fReadZipList6_closure;
         const Control.Applicative.$fReadZipList_lexeme_closure;
         const Control.Applicative.$fReadZipList_lexeme1_closure;
         const GHC.Read.list3_closure;
         const Control.Applicative.$fReadZipList1_closure;
         const Control.Applicative.$fReadZipList_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Control.Applicative.$fReadZipList_$creadListPrec_closure;
         const Control.Applicative.$fReadZipList_$creadList_closure;
         const Control.Applicative.$fReadZipList_closure;
         const Control.Applicative.$fReadZipList3_closure;
         const Control.Applicative.$fShowZipList_$cshow_closure;
         const Control.Applicative.$fShowZipList_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.324401427 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:48.32762295 UTC

[section ""data" . Control.Applicative.$fFunctorWrappedMonad1_closure" {
     Control.Applicative.$fFunctorWrappedMonad1_closure:
         const Control.Applicative.$fFunctorWrappedMonad1_info;
 },
 lvl_sbUjF_entry() //  [R1]
         { []
         }
     {offset
       cbUoU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbUoV; else goto cbUoW;
       cbUoV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUoW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_sbUjF_info" {
     lvl_sbUjF_info:
         const lvl_sbUjF_entry;
         const 2;
         const 18;
 },
 sat_sbUjH_entry() //  [R1]
         { []
         }
     {offset
       cbUp2: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUjH_info" {
     sat_sbUjH_info:
         const sat_sbUjH_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Control.Applicative.$fFunctorWrappedMonad1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbUp5: // global
           _sbUjE::P64 = R4;
           _sbUjD::P64 = R3;
           _sbUjC::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbUp6; else goto cbUp7;
       cbUp7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbUp9; else goto cbUp8;
       cbUp9: // global
           HpAlloc = 48;
           goto cbUp6;
       cbUp6: // global
           R4 = _sbUjE::P64;
           R3 = _sbUjD::P64;
           R2 = _sbUjC::P64;
           R1 = Control.Applicative.$fFunctorWrappedMonad1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUp8: // global
           I64[Hp - 40] = lvl_sbUjF_info;
           P64[Hp - 24] = _sbUjC::P64;
           P64[Hp - 16] = _sbUjD::P64;
           I64[Hp - 8] = sat_sbUjH_info;
           P64[Hp] = Hp - 40;
           R2 = _sbUjC::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sbUjE::P64;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fFunctorWrappedMonad1_info" {
     Control.Applicative.$fFunctorWrappedMonad1_info:
         const Control.Applicative.$fFunctorWrappedMonad1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.337769686 UTC

[section ""data" . Control.Applicative.$fFunctorWrappedMonad_closure" {
     Control.Applicative.$fFunctorWrappedMonad_closure:
         const Control.Applicative.$fFunctorWrappedMonad_info;
 },
 sat_sbUjM_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbUpD: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fFunctorWrappedMonad1_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUjM_info" {
     sat_sbUjM_info:
         const sat_sbUjM_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUjL_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbUpL: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.liftM_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUjL_info" {
     sat_sbUjL_info:
         const sat_sbUjL_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Control.Applicative.$fFunctorWrappedMonad_entry() //  [R2]
         { []
         }
     {offset
       cbUpP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbUpT; else goto cbUpS;
       cbUpT: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Control.Applicative.$fFunctorWrappedMonad_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUpS: // global
           I64[Hp - 48] = sat_sbUjM_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sbUjL_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Base.C:Functor_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fFunctorWrappedMonad_info" {
     Control.Applicative.$fFunctorWrappedMonad_info:
         const Control.Applicative.$fFunctorWrappedMonad_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.355297527 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedMonad3_closure" {
     Control.Applicative.$fApplicativeWrappedMonad3_closure:
         const Control.Applicative.$fApplicativeWrappedMonad3_info;
 },
 Control.Applicative.$fApplicativeWrappedMonad3_entry() //  [R2, R3]
         { []
         }
     {offset
       cbUqg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUqh; else goto cbUqi;
       cbUqh: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fApplicativeWrappedMonad3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUqi: // global
           I64[Sp - 16] = block_cbUqe_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedMonad3_info" {
     Control.Applicative.$fApplicativeWrappedMonad3_info:
         const Control.Applicative.$fApplicativeWrappedMonad3_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbUqe() //  [R1]
         { []
         }
     {offset
       cbUqe: // global
           R2 = R1;
           I64[Sp] = stg_ap_p_info;
           call GHC.Base.pure_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbUqe_info" {
     block_cbUqe_info:
         const _cbUqe;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.361697478 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedMonad2_closure" {
     Control.Applicative.$fApplicativeWrappedMonad2_closure:
         const Control.Applicative.$fApplicativeWrappedMonad2_info;
 },
 lvl_sbUjT_entry() //  [R1]
         { []
         }
     {offset
       cbUqI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbUqJ; else goto cbUqK;
       cbUqJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUqK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Base.breakpoint_closure+1;
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_sbUjT_info" {
     lvl_sbUjT_info:
         const lvl_sbUjT_entry;
         const 1;
         const 16;
 },
 sat_sbUjV_entry() //  [R1]
         { []
         }
     {offset
       cbUqQ: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUjV_info" {
     sat_sbUjV_info:
         const sat_sbUjV_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbUjW_entry() //  [R1]
         { []
         }
     {offset
       cbUqT: // global
           _sbUjW::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbUqU; else goto cbUqV;
       cbUqV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbUqX; else goto cbUqW;
       cbUqX: // global
           HpAlloc = 40;
           goto cbUqU;
       cbUqU: // global
           R1 = _sbUjW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUqW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUjW::P64;
           _sbUjQ::P64 = P64[_sbUjW::P64 + 16];
           _sbUjR::P64 = P64[_sbUjW::P64 + 24];
           I64[Hp - 32] = lvl_sbUjT_info;
           P64[Hp - 16] = _sbUjQ::P64;
           I64[Hp - 8] = sat_sbUjV_info;
           P64[Hp] = Hp - 32;
           R2 = _sbUjQ::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sbUjR::P64;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUjW_info" {
     sat_sbUjW_info:
         const sat_sbUjW_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fApplicativeWrappedMonad2_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbUqY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbUr2; else goto cbUr1;
       cbUr2: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fApplicativeWrappedMonad2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUr1: // global
           I64[Hp - 24] = sat_sbUjW_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R4 = R4;
           R3 = Hp - 24;
           R2 = R2;
           call GHC.Base.ap_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedMonad2_info" {
     Control.Applicative.$fApplicativeWrappedMonad2_info:
         const Control.Applicative.$fApplicativeWrappedMonad2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.372548931 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedMonad1_closure" {
     Control.Applicative.$fApplicativeWrappedMonad1_closure:
         const Control.Applicative.$fApplicativeWrappedMonad1_info;
 },
 lvl_sbUk1_entry() //  [R1]
         { []
         }
     {offset
       cbUrG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbUrH; else goto cbUrI;
       cbUrH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUrI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.return_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_sbUk1_info" {
     lvl_sbUk1_info:
         const lvl_sbUk1_entry;
         const 2;
         const 18;
 },
 sat_sbUk3_entry() //  [R1]
         { []
         }
     {offset
       cbUrO: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUk3_info" {
     sat_sbUk3_info:
         const sat_sbUk3_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbUk4_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUrR: // global
           _sbUk0::P64 = R2;
           _sbUk4::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cbUrS; else goto cbUrT;
       cbUrT: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbUrV; else goto cbUrU;
       cbUrV: // global
           HpAlloc = 48;
           goto cbUrS;
       cbUrS: // global
           R2 = _sbUk0::P64;
           R1 = _sbUk4::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUrU: // global
           _sbUjX::P64 = P64[_sbUk4::P64 + 7];
           _sbUjZ::P64 = P64[_sbUk4::P64 + 15];
           I64[Hp - 40] = lvl_sbUk1_info;
           P64[Hp - 24] = _sbUjX::P64;
           P64[Hp - 16] = _sbUk0::P64;
           I64[Hp - 8] = sat_sbUk3_info;
           P64[Hp] = Hp - 40;
           R2 = _sbUjX::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sbUjZ::P64;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUk4_info" {
     sat_sbUk4_info:
         const sat_sbUk4_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 Control.Applicative.$fApplicativeWrappedMonad1_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbUrW: // global
           _sbUjZ::P64 = R4;
           _sbUjY::P64 = R3;
           _sbUjX::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbUrX; else goto cbUrY;
       cbUrY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUs0; else goto cbUrZ;
       cbUs0: // global
           HpAlloc = 24;
           goto cbUrX;
       cbUrX: // global
           R4 = _sbUjZ::P64;
           R3 = _sbUjY::P64;
           R2 = _sbUjX::P64;
           R1 = Control.Applicative.$fApplicativeWrappedMonad1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUrZ: // global
           I64[Hp - 16] = sat_sbUk4_info;
           P64[Hp - 8] = _sbUjX::P64;
           P64[Hp] = _sbUjZ::P64;
           R2 = _sbUjX::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sbUjY::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedMonad1_info" {
     Control.Applicative.$fApplicativeWrappedMonad1_info:
         const Control.Applicative.$fApplicativeWrappedMonad1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.383857545 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedMonad_closure" {
     Control.Applicative.$fApplicativeWrappedMonad_closure:
         const Control.Applicative.$fApplicativeWrappedMonad_info;
 },
 sat_sbUkg_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbUsB: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fApplicativeWrappedMonad1_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUkg_info" {
     sat_sbUkg_info:
         const sat_sbUkg_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUkf_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbUsJ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fApplicativeWrappedMonad2_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUkf_info" {
     sat_sbUkf_info:
         const sat_sbUkf_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUke_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cbUsR: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.Base.liftM2_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUke_info" {
     sat_sbUke_info:
         const sat_sbUke_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sbUka_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbUsZ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Base.ap_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUka_info" {
     sat_sbUka_info:
         const sat_sbUka_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUk7_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUt7: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Control.Applicative.$fApplicativeWrappedMonad3_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUk7_info" {
     sat_sbUk7_info:
         const sat_sbUk7_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbUk6_entry() //  [R1]
         { []
         }
     {offset
       cbUte: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUtf; else goto cbUtg;
       cbUtf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUtg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fFunctorWrappedMonad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUk6_info" {
     sat_sbUk6_info:
         const sat_sbUk6_entry;
         const 1;
         const 16;
 },
 Control.Applicative.$fApplicativeWrappedMonad_entry() //  [R2]
         { []
         }
     {offset
       cbUti: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto cbUtm; else goto cbUtl;
       cbUtm: // global
           HpAlloc = 160;
           R2 = R2;
           R1 = Control.Applicative.$fApplicativeWrappedMonad_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUtl: // global
           I64[Hp - 152] = sat_sbUkg_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sbUkf_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sbUke_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbUka_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sbUk7_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sbUk6_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = GHC.Base.C:Applicative_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = Hp - 87;
           P64[Hp - 24] = Hp - 102;
           P64[Hp - 16] = Hp - 117;
           P64[Hp - 8] = Hp - 134;
           P64[Hp] = Hp - 150;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedMonad_info" {
     Control.Applicative.$fApplicativeWrappedMonad_info:
         const Control.Applicative.$fApplicativeWrappedMonad_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.399188027 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedMonad_$cp1Alternative_closure" {
     Control.Applicative.$fAlternativeWrappedMonad_$cp1Alternative_closure:
         const Control.Applicative.$fAlternativeWrappedMonad_$cp1Alternative_info;
 },
 sat_sbUki_entry() //  [R1]
         { []
         }
     {offset
       cbUu7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUu8; else goto cbUu9;
       cbUu8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUu9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUki_info" {
     sat_sbUki_info:
         const sat_sbUki_entry;
         const 1;
         const 16;
 },
 Control.Applicative.$fAlternativeWrappedMonad_$cp1Alternative_entry() //  [R2]
         { []
         }
     {offset
       cbUua: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUue; else goto cbUud;
       cbUue: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeWrappedMonad_$cp1Alternative_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUud: // global
           I64[Hp - 16] = sat_sbUki_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Control.Applicative.$fApplicativeWrappedMonad_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedMonad_$cp1Alternative_info" {
     Control.Applicative.$fAlternativeWrappedMonad_$cp1Alternative_info:
         const Control.Applicative.$fAlternativeWrappedMonad_$cp1Alternative_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.407349372 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedMonad_$csome_closure" {
     Control.Applicative.$fAlternativeWrappedMonad_$csome_closure:
         const Control.Applicative.$fAlternativeWrappedMonad_$csome_info;
 },
 sat_sbUkp_entry() //  [R1]
         { []
         }
     {offset
       cbUuI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbUuJ; else goto cbUuK;
       cbUuJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUuK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbUuG_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUkp_info" {
     sat_sbUkp_info:
         const sat_sbUkp_entry;
         const 1;
         const 16;
 },
 _cbUuG() //  [R1]
         { []
         }
     {offset
       cbUuG: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbUuG_info" {
     block_cbUuG_info:
         const _cbUuG;
         const 0;
         const 30;
 },
 m2_sbUkm_entry() //  [R1]
         { []
         }
     {offset
       cbUuO: // global
           _sbUkm::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbUuP; else goto cbUuQ;
       cbUuQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUuS; else goto cbUuR;
       cbUuS: // global
           HpAlloc = 24;
           goto cbUuP;
       cbUuP: // global
           R1 = _sbUkm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUuR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUkm::P64;
           _sbUkj::P64 = P64[_sbUkm::P64 + 16];
           _sbUkl::P64 = P64[_sbUkm::P64 + 24];
           _sbUkn::P64 = P64[_sbUkm::P64 + 32];
           I64[Hp - 16] = sat_sbUkp_info;
           P64[Hp] = _sbUkl::P64;
           R2 = _sbUkj::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sbUkn::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call GHC.Base.mplus_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . m2_sbUkm_info" {
     m2_sbUkm_info:
         const m2_sbUkm_entry;
         const 3;
         const 15;
 },
 sat_sbUkt_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUv7: // global
           _sbUkr::P64 = R2;
           _sbUkt::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbUv8; else goto cbUv9;
       cbUv9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUvb; else goto cbUva;
       cbUvb: // global
           HpAlloc = 24;
           goto cbUv8;
       cbUv8: // global
           R2 = _sbUkr::P64;
           R1 = _sbUkt::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUva: // global
           _sbUkl::P64 = P64[_sbUkt::P64 + 7];
           _sbUkq::P64 = P64[_sbUkt::P64 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sbUkq::P64;
           P64[Hp] = _sbUkr::P64;
           R2 = _sbUkl::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUkt_info" {
     sat_sbUkt_info:
         const sat_sbUkt_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sbUku_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUvc: // global
           _sbUkq::P64 = R2;
           _sbUku::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cbUvd; else goto cbUve;
       cbUve: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUvg; else goto cbUvf;
       cbUvg: // global
           HpAlloc = 24;
           goto cbUvd;
       cbUvd: // global
           R2 = _sbUkq::P64;
           R1 = _sbUku::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUvf: // global
           _sbUkl::P64 = P64[_sbUku::P64 + 7];
           _sbUkm::P64 = P64[_sbUku::P64 + 15];
           I64[Hp - 16] = sat_sbUkt_info;
           P64[Hp - 8] = _sbUkl::P64;
           P64[Hp] = _sbUkq::P64;
           R2 = _sbUkl::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sbUkm::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUku_info" {
     sat_sbUku_info:
         const sat_sbUku_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 some_v_sbUkn_entry() //  [R1]
         { []
         }
     {offset
       cbUvh: // global
           _sbUkn::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbUvi; else goto cbUvj;
       cbUvj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUvl; else goto cbUvk;
       cbUvl: // global
           HpAlloc = 24;
           goto cbUvi;
       cbUvi: // global
           R1 = _sbUkn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUvk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUkn::P64;
           _sbUkk::P64 = P64[_sbUkn::P64 + 16];
           _sbUkl::P64 = P64[_sbUkn::P64 + 24];
           _sbUkm::P64 = P64[_sbUkn::P64 + 32];
           I64[Hp - 16] = sat_sbUku_info;
           P64[Hp - 8] = _sbUkl::P64;
           P64[Hp] = _sbUkm::P64;
           R2 = _sbUkl::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sbUkk::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . some_v_sbUkn_info" {
     some_v_sbUkn_info:
         const some_v_sbUkn_entry;
         const 3;
         const 15;
 },
 Control.Applicative.$fAlternativeWrappedMonad_$csome_entry() //  [R2,
                                                                   R3]
         { []
         }
     {offset
       cbUvm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbUvn; else goto cbUvo;
       cbUvn: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeWrappedMonad_$csome_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUvo: // global
           I64[Sp - 24] = block_cbUut_info;
           _sbUkj::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _sbUkj::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedMonad_$csome_info" {
     Control.Applicative.$fAlternativeWrappedMonad_$csome_info:
         const Control.Applicative.$fAlternativeWrappedMonad_$csome_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbUut() //  [R1]
         { []
         }
     {offset
       cbUut: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbUvr; else goto cbUvq;
       cbUvr: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbUvq: // global
           I64[Hp - 72] = m2_sbUkm_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           _cbUuy::P64 = Hp - 32;
           P64[Hp - 40] = _cbUuy::P64;
           I64[Hp - 32] = some_v_sbUkn_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 72;
           R1 = _cbUuy::P64;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbUut_info" {
     block_cbUut_info:
         const _cbUut;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.426853576 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedMonad_$cmany_closure" {
     Control.Applicative.$fAlternativeWrappedMonad_$cmany_closure:
         const Control.Applicative.$fAlternativeWrappedMonad_$cmany_info;
 },
 $dApplicative_sbUky_entry() //  [R1]
         { []
         }
     {offset
       cbUwy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUwz; else goto cbUwA;
       cbUwz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUwA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p2MonadPlus_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dApplicative_sbUky_info" {
     $dApplicative_sbUky_info:
         const $dApplicative_sbUky_entry;
         const 1;
         const 16;
 },
 sat_sbUkG_entry() //  [R1]
         { []
         }
     {offset
       cbUwH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbUwI; else goto cbUwJ;
       cbUwI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUwJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbUwF_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Base.$p1Monad_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUkG_info" {
     sat_sbUkG_info:
         const sat_sbUkG_entry;
         const 1;
         const 16;
 },
 _cbUwF() //  [R1]
         { []
         }
     {offset
       cbUwF: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbUwF_info" {
     block_cbUwF_info:
         const _cbUwF;
         const 0;
         const 30;
 },
 sat_sbUkC_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUx2: // global
           _sbUkA::P64 = R2;
           _sbUkC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbUx3; else goto cbUx4;
       cbUx4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUx6; else goto cbUx5;
       cbUx6: // global
           HpAlloc = 24;
           goto cbUx3;
       cbUx3: // global
           R2 = _sbUkA::P64;
           R1 = _sbUkC::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUx5: // global
           _sbUky::P64 = P64[_sbUkC::P64 + 7];
           _sbUkz::P64 = P64[_sbUkC::P64 + 15];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sbUkz::P64;
           P64[Hp] = _sbUkA::P64;
           R2 = _sbUky::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUkC_info" {
     sat_sbUkC_info:
         const sat_sbUkC_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sbUkD_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUx7: // global
           _sbUkz::P64 = R2;
           _sbUkD::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cbUx8; else goto cbUx9;
       cbUx9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUxb; else goto cbUxa;
       cbUxb: // global
           HpAlloc = 24;
           goto cbUx8;
       cbUx8: // global
           R2 = _sbUkz::P64;
           R1 = _sbUkD::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUxa: // global
           _sbUkx::P64 = P64[_sbUkD::P64 + 7];
           _sbUky::P64 = P64[_sbUkD::P64 + 15];
           I64[Hp - 16] = sat_sbUkC_info;
           P64[Hp - 8] = _sbUky::P64;
           P64[Hp] = _sbUkz::P64;
           R2 = _sbUky::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sbUkx::P64;
           P64[Sp - 8] = Hp - 15;
           Sp = Sp - 24;
           call GHC.Base.>>=_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUkD_info" {
     sat_sbUkD_info:
         const sat_sbUkD_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sbUkE_entry() //  [R1]
         { []
         }
     {offset
       cbUxc: // global
           _sbUkE::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbUxd; else goto cbUxe;
       cbUxe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUxg; else goto cbUxf;
       cbUxg: // global
           HpAlloc = 24;
           goto cbUxd;
       cbUxd: // global
           R1 = _sbUkE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUxf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUkE::P64;
           _sbUkw::P64 = P64[_sbUkE::P64 + 16];
           _sbUkx::P64 = P64[_sbUkE::P64 + 24];
           _sbUky::P64 = P64[_sbUkE::P64 + 32];
           I64[Hp - 16] = sat_sbUkD_info;
           P64[Hp - 8] = _sbUkx::P64;
           P64[Hp] = _sbUky::P64;
           R2 = _sbUky::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sbUkw::P64;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 40;
           call GHC.Base.>>=_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUkE_info" {
     sat_sbUkE_info:
         const sat_sbUkE_entry;
         const 3;
         const 15;
 },
 many_v_sbUkx_entry() //  [R1]
         { []
         }
     {offset
       cbUxh: // global
           _sbUkx::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbUxi; else goto cbUxj;
       cbUxj: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cbUxl; else goto cbUxk;
       cbUxl: // global
           HpAlloc = 88;
           goto cbUxi;
       cbUxi: // global
           R1 = _sbUkx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUxk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUkx::P64;
           _sbUkv::P64 = P64[_sbUkx::P64 + 16];
           _sbUkw::P64 = P64[_sbUkx::P64 + 24];
           I64[Hp - 80] = $dApplicative_sbUky_info;
           P64[Hp - 64] = _sbUkv::P64;
           I64[Hp - 56] = sat_sbUkG_info;
           _cbUwu::P64 = Hp - 80;
           P64[Hp - 40] = _cbUwu::P64;
           I64[Hp - 32] = sat_sbUkE_info;
           P64[Hp - 16] = _sbUkw::P64;
           P64[Hp - 8] = _sbUkx::P64;
           P64[Hp] = _cbUwu::P64;
           R2 = _sbUkv::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call GHC.Base.mplus_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . many_v_sbUkx_info" {
     many_v_sbUkx_info:
         const many_v_sbUkx_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fAlternativeWrappedMonad_$cmany_entry() //  [R2,
                                                                   R3]
         { []
         }
     {offset
       cbUxm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbUxq; else goto cbUxp;
       cbUxq: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeWrappedMonad_$cmany_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUxp: // global
           I64[Hp - 24] = many_v_sbUkx_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedMonad_$cmany_info" {
     Control.Applicative.$fAlternativeWrappedMonad_$cmany_info:
         const Control.Applicative.$fAlternativeWrappedMonad_$cmany_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.445758042 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedMonad_closure" {
     Control.Applicative.$fAlternativeWrappedMonad_closure:
         const Control.Applicative.$fAlternativeWrappedMonad_info;
 },
 sat_sbUkO_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUyt: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Control.Applicative.$fAlternativeWrappedMonad_$cmany_entry(R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUkO_info" {
     sat_sbUkO_info:
         const sat_sbUkO_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbUkN_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUyB: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Control.Applicative.$fAlternativeWrappedMonad_$csome_entry(R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUkN_info" {
     sat_sbUkN_info:
         const sat_sbUkN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbUkM_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbUyJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbUyK; else goto cbUyL;
       cbUyK: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUyL: // global
           _sbUkK::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sbUkK::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Base.mplus_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUkM_info" {
     sat_sbUkM_info:
         const sat_sbUkM_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUkJ_entry() //  [R1]
         { []
         }
     {offset
       cbUyQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUyR; else goto cbUyS;
       cbUyR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUyS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mzero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUkJ_info" {
     sat_sbUkJ_info:
         const sat_sbUkJ_entry;
         const 1;
         const 16;
 },
 sat_sbUkI_entry() //  [R1]
         { []
         }
     {offset
       cbUyX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUyY; else goto cbUyZ;
       cbUyY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUyZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fAlternativeWrappedMonad_$cp1Alternative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUkI_info" {
     sat_sbUkI_info:
         const sat_sbUkI_entry;
         const 1;
         const 16;
 },
 Control.Applicative.$fAlternativeWrappedMonad_entry() //  [R2]
         { []
         }
     {offset
       cbUz1: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cbUz5; else goto cbUz4;
       cbUz5: // global
           HpAlloc = 144;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeWrappedMonad_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUz4: // global
           I64[Hp - 136] = sat_sbUkO_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sbUkN_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbUkM_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sbUkJ_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_sbUkI_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = GHC.Base.C:Alternative_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 102;
           P64[Hp - 8] = Hp - 119;
           P64[Hp] = Hp - 135;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedMonad_info" {
     Control.Applicative.$fAlternativeWrappedMonad_info:
         const Control.Applicative.$fAlternativeWrappedMonad_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.457878742 UTC

[section ""data" . Control.Applicative.$fFunctorWrappedArrow2_closure" {
     Control.Applicative.$fFunctorWrappedArrow2_closure:
         const Control.Applicative.$fFunctorWrappedArrow2_info;
 },
 sat_sbUkT_entry() //  [R1]
         { []
         }
     {offset
       cbUzP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbUzQ; else goto cbUzR;
       cbUzQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUzR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Control.Arrow.arr_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUkT_info" {
     sat_sbUkT_info:
         const sat_sbUkT_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fFunctorWrappedArrow2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbUzU: // global
           _sbUkR::P64 = R4;
           _sbUkQ::P64 = R3;
           _sbUkP::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbUzV; else goto cbUzW;
       cbUzW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbUzY; else goto cbUzX;
       cbUzY: // global
           HpAlloc = 32;
           goto cbUzV;
       cbUzV: // global
           R4 = _sbUkR::P64;
           R3 = _sbUkQ::P64;
           R2 = _sbUkP::P64;
           R1 = Control.Applicative.$fFunctorWrappedArrow2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUzX: // global
           I64[Hp - 24] = sat_sbUkT_info;
           P64[Hp - 8] = _sbUkP::P64;
           P64[Hp] = _sbUkQ::P64;
           I64[Sp - 24] = block_cbUzS_info;
           R2 = _sbUkP::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _sbUkR::P64;
           Sp = Sp - 24;
           call Control.Arrow.$p1Arrow_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fFunctorWrappedArrow2_info" {
     Control.Applicative.$fFunctorWrappedArrow2_info:
         const Control.Applicative.$fFunctorWrappedArrow2_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbUzS() //  [R1]
         { []
         }
     {offset
       cbUzS: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call Control.Category.._entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbUzS_info" {
     block_cbUzS_info:
         const _cbUzS;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.465725536 UTC

[section ""data" . Control.Applicative.$fFunctorWrappedArrow1_closure" {
     Control.Applicative.$fFunctorWrappedArrow1_closure:
         const Control.Applicative.$fFunctorWrappedArrow1_info;
 },
 sat_sbUkZ_entry() //  [R1]
         { []
         }
     {offset
       cbUAy: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUkZ_info" {
     sat_sbUkZ_info:
         const sat_sbUkZ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbUl0_entry() //  [R1]
         { []
         }
     {offset
       cbUAB: // global
           _sbUl0::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cbUAC; else goto cbUAD;
       cbUAD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbUAF; else goto cbUAE;
       cbUAF: // global
           HpAlloc = 16;
           goto cbUAC;
       cbUAC: // global
           R1 = _sbUl0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUAE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUl0::P64;
           _sbUkU::P64 = P64[_sbUl0::P64 + 16];
           _sbUkV::P64 = P64[_sbUl0::P64 + 24];
           I64[Hp - 8] = sat_sbUkZ_info;
           P64[Hp] = _sbUkV::P64;
           R2 = _sbUkU::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Control.Arrow.arr_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUl0_info" {
     sat_sbUl0_info:
         const sat_sbUl0_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fFunctorWrappedArrow1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbUAI: // global
           _sbUkW::P64 = R4;
           _sbUkV::P64 = R3;
           _sbUkU::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbUAJ; else goto cbUAK;
       cbUAK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbUAM; else goto cbUAL;
       cbUAM: // global
           HpAlloc = 32;
           goto cbUAJ;
       cbUAJ: // global
           R4 = _sbUkW::P64;
           R3 = _sbUkV::P64;
           R2 = _sbUkU::P64;
           R1 = Control.Applicative.$fFunctorWrappedArrow1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUAL: // global
           I64[Hp - 24] = sat_sbUl0_info;
           P64[Hp - 8] = _sbUkU::P64;
           P64[Hp] = _sbUkV::P64;
           I64[Sp - 24] = block_cbUAG_info;
           R2 = _sbUkU::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _sbUkW::P64;
           Sp = Sp - 24;
           call Control.Arrow.$p1Arrow_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fFunctorWrappedArrow1_info" {
     Control.Applicative.$fFunctorWrappedArrow1_info:
         const Control.Applicative.$fFunctorWrappedArrow1_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbUAG() //  [R1]
         { []
         }
     {offset
       cbUAG: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call Control.Category.._entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbUAG_info" {
     block_cbUAG_info:
         const _cbUAG;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.475595084 UTC

[section ""data" . Control.Applicative.$fFunctorWrappedArrow_closure" {
     Control.Applicative.$fFunctorWrappedArrow_closure:
         const Control.Applicative.$fFunctorWrappedArrow_info;
 },
 sat_sbUl3_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbUBm: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fFunctorWrappedArrow1_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUl3_info" {
     sat_sbUl3_info:
         const sat_sbUl3_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUl2_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbUBu: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fFunctorWrappedArrow2_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUl2_info" {
     sat_sbUl2_info:
         const sat_sbUl2_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Control.Applicative.$fFunctorWrappedArrow_entry() //  [R2]
         { []
         }
     {offset
       cbUBy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbUBC; else goto cbUBB;
       cbUBC: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Control.Applicative.$fFunctorWrappedArrow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUBB: // global
           I64[Hp - 48] = sat_sbUl3_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sbUl2_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Base.C:Functor_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fFunctorWrappedArrow_info" {
     Control.Applicative.$fFunctorWrappedArrow_info:
         const Control.Applicative.$fFunctorWrappedArrow_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.483769277 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedArrow2_closure" {
     Control.Applicative.$fAlternativeWrappedArrow2_closure:
         const Control.Applicative.$fAlternativeWrappedArrow2_info;
 },
 sat_sbUlb_entry() //  [R1]
         { []
         }
     {offset
       cbUC1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbUC2; else goto cbUC3;
       cbUC2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUC3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call Control.Arrow.&&&_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUlb_info" {
     sat_sbUlb_info:
         const sat_sbUlb_entry;
         const 3;
         const 15;
 },
 sat_sbUl9_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUCd: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Tuple.uncurry_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUl9_info" {
     sat_sbUl9_info:
         const sat_sbUl9_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbUla_entry() //  [R1]
         { []
         }
     {offset
       cbUCg: // global
           _sbUla::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cbUCh; else goto cbUCi;
       cbUCi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbUCk; else goto cbUCj;
       cbUCk: // global
           HpAlloc = 16;
           goto cbUCh;
       cbUCh: // global
           R1 = _sbUla::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUCj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUla::P64;
           _sbUl4::P64 = P64[_sbUla::P64 + 16];
           _sbUl5::P64 = P64[_sbUla::P64 + 24];
           I64[Hp - 8] = sat_sbUl9_info;
           P64[Hp] = _sbUl5::P64;
           R2 = _sbUl4::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Control.Arrow.arr_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUla_info" {
     sat_sbUla_info:
         const sat_sbUla_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fAlternativeWrappedArrow2_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       cbUCn: // global
           _sbUl7::P64 = R5;
           _sbUl6::P64 = R4;
           _sbUl5::P64 = R3;
           _sbUl4::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbUCo; else goto cbUCp;
       cbUCp: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbUCr; else goto cbUCq;
       cbUCr: // global
           HpAlloc = 72;
           goto cbUCo;
       cbUCo: // global
           R5 = _sbUl7::P64;
           R4 = _sbUl6::P64;
           R3 = _sbUl5::P64;
           R2 = _sbUl4::P64;
           R1 = Control.Applicative.$fAlternativeWrappedArrow2_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUCq: // global
           I64[Hp - 64] = sat_sbUlb_info;
           P64[Hp - 48] = _sbUl4::P64;
           P64[Hp - 40] = _sbUl6::P64;
           P64[Hp - 32] = _sbUl7::P64;
           I64[Hp - 24] = sat_sbUla_info;
           P64[Hp - 8] = _sbUl4::P64;
           P64[Hp] = _sbUl5::P64;
           I64[Sp - 24] = block_cbUCl_info;
           R2 = _sbUl4::P64;
           P64[Sp - 16] = Hp - 64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call Control.Arrow.$p1Arrow_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedArrow2_info" {
     Control.Applicative.$fAlternativeWrappedArrow2_info:
         const Control.Applicative.$fAlternativeWrappedArrow2_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cbUCl() //  [R1]
         { []
         }
     {offset
       cbUCl: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           _cbUBX::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _cbUBX::P64;
           call Control.Category.._entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbUCl_info" {
     block_cbUCl_info:
         const _cbUCl;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.495885766 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedArrow5_closure" {
     Control.Applicative.$fApplicativeWrappedArrow5_closure:
         const Control.Applicative.$fApplicativeWrappedArrow5_info;
 },
 sat_sbUlf_entry() //  [R1]
         { []
         }
     {offset
       cbUDc: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUlf_info" {
     sat_sbUlf_info:
         const sat_sbUlf_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Control.Applicative.$fApplicativeWrappedArrow5_entry() //  [R2, R3]
         { []
         }
     {offset
       cbUDf: // global
           _sbUld::P64 = R3;
           _sbUlc::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cbUDg; else goto cbUDh;
       cbUDh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbUDj; else goto cbUDi;
       cbUDj: // global
           HpAlloc = 16;
           goto cbUDg;
       cbUDg: // global
           R3 = _sbUld::P64;
           R2 = _sbUlc::P64;
           R1 = Control.Applicative.$fApplicativeWrappedArrow5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUDi: // global
           I64[Hp - 8] = sat_sbUlf_info;
           P64[Hp] = _sbUld::P64;
           R2 = _sbUlc::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 16;
           call Control.Arrow.arr_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedArrow5_info" {
     Control.Applicative.$fApplicativeWrappedArrow5_info:
         const Control.Applicative.$fApplicativeWrappedArrow5_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.501037798 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedArrow4_closure" {
     Control.Applicative.$fApplicativeWrappedArrow4_closure:
         const Control.Applicative.$fApplicativeWrappedArrow4_info;
 },
 Control.Applicative.$fApplicativeWrappedArrow4_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbUDz: // global
           R5 = R4;
           R4 = R3;
           R3 = GHC.Base.breakpoint_closure+1;
           R2 = R2;
           call Control.Applicative.$fAlternativeWrappedArrow2_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedArrow4_info" {
     Control.Applicative.$fApplicativeWrappedArrow4_info:
         const Control.Applicative.$fApplicativeWrappedArrow4_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.504303819 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedArrow3_closure" {
     Control.Applicative.$fApplicativeWrappedArrow3_closure:
         const Control.Applicative.$fApplicativeWrappedArrow3_info;
 },
 Control.Applicative.$fApplicativeWrappedArrow3_entry() //  [R3]
         { []
         }
     {offset
       cbUDL: // global
           R1 = R3;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedArrow3_info" {
     Control.Applicative.$fApplicativeWrappedArrow3_info:
         const Control.Applicative.$fApplicativeWrappedArrow3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.509871957 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedArrow2_closure" {
     Control.Applicative.$fApplicativeWrappedArrow2_closure:
         const Control.Applicative.$fApplicativeWrappedArrow2_info;
 },
 sat_sbUln_entry() //  [R1]
         { []
         }
     {offset
       cbUE4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbUE5; else goto cbUE6;
       cbUE5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUE6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Control.Applicative.$fApplicativeWrappedArrow3_closure+2;
           Sp = Sp - 32;
           call Control.Arrow.arr_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUln_info" {
     sat_sbUln_info:
         const sat_sbUln_entry;
         const 1;
         const 16;
 },
 sat_sbUlo_entry() //  [R1]
         { []
         }
     {offset
       cbUE9: // global
           _sbUlo::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbUEa; else goto cbUEb;
       cbUEb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUEd; else goto cbUEc;
       cbUEd: // global
           HpAlloc = 24;
           goto cbUEa;
       cbUEa: // global
           R1 = _sbUlo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUEc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUlo::P64;
           _sbUlj::P64 = P64[_sbUlo::P64 + 16];
           _sbUlk::P64 = P64[_sbUlo::P64 + 24];
           I64[Hp - 16] = sat_sbUln_info;
           P64[Hp] = _sbUlj::P64;
           I64[Sp - 40] = block_cbUE7_info;
           R2 = _sbUlj::P64;
           P64[Sp - 32] = Hp - 16;
           P64[Sp - 24] = _sbUlk::P64;
           Sp = Sp - 40;
           call Control.Arrow.$p1Arrow_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUlo_info" {
     sat_sbUlo_info:
         const sat_sbUlo_entry;
         const 2;
         const 18;
 },
 _cbUE7() //  [R1]
         { []
         }
     {offset
       cbUE7: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call Control.Category.._entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbUE7_info" {
     block_cbUE7_info:
         const _cbUE7;
         const 2;
         const 30;
 },
 Control.Applicative.$fApplicativeWrappedArrow2_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbUEh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbUEl; else goto cbUEk;
       cbUEl: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fApplicativeWrappedArrow2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUEk: // global
           I64[Hp - 24] = sat_sbUlo_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R5 = R4;
           R4 = Hp - 24;
           R3 = GHC.Base.breakpoint_closure+1;
           R2 = R2;
           call Control.Applicative.$fAlternativeWrappedArrow2_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedArrow2_info" {
     Control.Applicative.$fApplicativeWrappedArrow2_info:
         const Control.Applicative.$fApplicativeWrappedArrow2_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.518969049 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedArrow1_closure" {
     Control.Applicative.$fApplicativeWrappedArrow1_closure:
         const Control.Applicative.$fApplicativeWrappedArrow1_info;
 },
 Control.Applicative.$fApplicativeWrappedArrow1_entry() //  [R2, R3,
                                                             R4]
         { []
         }
     {offset
       cbUEP: // global
           R5 = R4;
           R4 = R3;
           R3 = GHC.Base.const_closure+2;
           R2 = R2;
           call Control.Applicative.$fAlternativeWrappedArrow2_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedArrow1_info" {
     Control.Applicative.$fApplicativeWrappedArrow1_info:
         const Control.Applicative.$fApplicativeWrappedArrow1_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.524282107 UTC

[section ""data" . Control.Applicative.$fApplicativeWrappedArrow_closure" {
     Control.Applicative.$fApplicativeWrappedArrow_closure:
         const Control.Applicative.$fApplicativeWrappedArrow_info;
 },
 sat_sbUlw_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbUF6: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fApplicativeWrappedArrow1_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUlw_info" {
     sat_sbUlw_info:
         const sat_sbUlw_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUlv_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbUFe: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fApplicativeWrappedArrow2_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUlv_info" {
     sat_sbUlv_info:
         const sat_sbUlv_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUlu_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       cbUFm: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Control.Applicative.$fAlternativeWrappedArrow2_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUlu_info" {
     sat_sbUlu_info:
         const sat_sbUlu_entry;
         const 1;
         const 9;
         const 12884901911;
 },
 sat_sbUlt_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbUFu: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fApplicativeWrappedArrow4_entry(R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUlt_info" {
     sat_sbUlt_info:
         const sat_sbUlt_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUls_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUFC: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Control.Applicative.$fApplicativeWrappedArrow5_entry(R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUls_info" {
     sat_sbUls_info:
         const sat_sbUls_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbUlr_entry() //  [R1]
         { []
         }
     {offset
       cbUFJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUFK; else goto cbUFL;
       cbUFK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUFL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fFunctorWrappedArrow_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUlr_info" {
     sat_sbUlr_info:
         const sat_sbUlr_entry;
         const 1;
         const 16;
 },
 Control.Applicative.$fApplicativeWrappedArrow_entry() //  [R2]
         { []
         }
     {offset
       cbUFN: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto cbUFR; else goto cbUFQ;
       cbUFR: // global
           HpAlloc = 160;
           R2 = R2;
           R1 = Control.Applicative.$fApplicativeWrappedArrow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUFQ: // global
           I64[Hp - 152] = sat_sbUlw_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sbUlv_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sbUlu_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbUlt_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sbUls_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sbUlr_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = GHC.Base.C:Applicative_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = Hp - 87;
           P64[Hp - 24] = Hp - 102;
           P64[Hp - 16] = Hp - 117;
           P64[Hp - 8] = Hp - 134;
           P64[Hp] = Hp - 150;
           R1 = Hp - 47;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeWrappedArrow_info" {
     Control.Applicative.$fApplicativeWrappedArrow_info:
         const Control.Applicative.$fApplicativeWrappedArrow_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.537158436 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedArrow_$cp1Alternative_closure" {
     Control.Applicative.$fAlternativeWrappedArrow_$cp1Alternative_closure:
         const Control.Applicative.$fAlternativeWrappedArrow_$cp1Alternative_info;
 },
 sat_sbUlz_entry() //  [R1]
         { []
         }
     {offset
       cbUGC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUGD; else goto cbUGE;
       cbUGD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUGE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Arrow.$p1ArrowZero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUlz_info" {
     sat_sbUlz_info:
         const sat_sbUlz_entry;
         const 1;
         const 16;
 },
 Control.Applicative.$fAlternativeWrappedArrow_$cp1Alternative_entry() //  [R2,
                                                                            R3]
         { []
         }
     {offset
       cbUGF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUGJ; else goto cbUGI;
       cbUGJ: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeWrappedArrow_$cp1Alternative_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUGI: // global
           I64[Hp - 16] = sat_sbUlz_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Control.Applicative.$fApplicativeWrappedArrow_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedArrow_$cp1Alternative_info" {
     Control.Applicative.$fAlternativeWrappedArrow_$cp1Alternative_info:
         const Control.Applicative.$fAlternativeWrappedArrow_$cp1Alternative_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.542138098 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedArrow1_closure" {
     Control.Applicative.$fAlternativeWrappedArrow1_closure:
         const Control.Applicative.$fAlternativeWrappedArrow1_info;
 },
 Control.Applicative.$fAlternativeWrappedArrow1_entry() //  []
         { []
         }
     {offset
       cbUGY: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedArrow1_info" {
     Control.Applicative.$fAlternativeWrappedArrow1_info:
         const Control.Applicative.$fAlternativeWrappedArrow1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.548098706 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedArrow_$csome_closure" {
     Control.Applicative.$fAlternativeWrappedArrow_$csome_closure:
         const Control.Applicative.$fAlternativeWrappedArrow_$csome_info;
 },
 sat_sbUlG_entry() //  [R1]
         { []
         }
     {offset
       cbUHr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbUHs; else goto cbUHt;
       cbUHs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUHt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Control.Applicative.$fAlternativeWrappedArrow1_closure+1;
           Sp = Sp - 32;
           call Control.Arrow.arr_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUlG_info" {
     sat_sbUlG_info:
         const sat_sbUlG_entry;
         const 1;
         const 16;
 },
 sat_sbUlH_entry() //  [R1]
         { []
         }
     {offset
       cbUHu: // global
           _sbUlH::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbUHv; else goto cbUHw;
       cbUHw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUHy; else goto cbUHx;
       cbUHy: // global
           HpAlloc = 24;
           goto cbUHv;
       cbUHv: // global
           R1 = _sbUlH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUHx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUlH::P64;
           _sbUlC::P64 = P64[_sbUlH::P64 + 16];
           _sbUlE::P64 = P64[_sbUlH::P64 + 24];
           _sbUlF::P64 = P64[_sbUlH::P64 + 32];
           I64[Hp - 16] = sat_sbUlG_info;
           P64[Hp] = _sbUlF::P64;
           R2 = _sbUlC::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = _sbUlE::P64;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 40;
           call Control.Arrow.<+>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUlH_info" {
     sat_sbUlH_info:
         const sat_sbUlH_entry;
         const 3;
         const 15;
 },
 some_v_sbUlE_entry() //  [R1]
         { []
         }
     {offset
       cbUHz: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbUHA; else goto cbUHB;
       cbUHA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUHB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_cbUHf_info;
           R2 = P64[R1 + 16];
           P64[Sp - 40] = P64[R1 + 24];
           P64[Sp - 32] = P64[R1 + 32];
           P64[Sp - 24] = R1;
           Sp = Sp - 48;
           call Control.Arrow.$p1ArrowZero_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . some_v_sbUlE_info" {
     some_v_sbUlE_info:
         const some_v_sbUlE_entry;
         const 3;
         const 15;
 },
 _cbUHf() //  [R1]
         { []
         }
     {offset
       cbUHf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbUHE; else goto cbUHD;
       cbUHE: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbUHD: // global
           I64[Hp - 32] = sat_sbUlH_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R5 = Hp - 32;
           R4 = P64[Sp + 16];
           R3 = GHC.Types.:_closure+2;
           R2 = R1;
           Sp = Sp + 32;
           call Control.Applicative.$fAlternativeWrappedArrow2_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbUHf_info" {
     block_cbUHf_info:
         const _cbUHf;
         const 3;
         const 30;
 },
 Control.Applicative.$fAlternativeWrappedArrow_$csome_entry() //  [R2,
                                                                   R3, R4]
         { []
         }
     {offset
       cbUHF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbUHJ; else goto cbUHI;
       cbUHJ: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeWrappedArrow_$csome_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUHI: // global
           I64[Hp - 32] = some_v_sbUlE_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedArrow_$csome_info" {
     Control.Applicative.$fAlternativeWrappedArrow_$csome_info:
         const Control.Applicative.$fAlternativeWrappedArrow_$csome_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.560266649 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedArrow_$cmany_closure" {
     Control.Applicative.$fAlternativeWrappedArrow_$cmany_closure:
         const Control.Applicative.$fAlternativeWrappedArrow_$cmany_info;
 },
 $dApplicative_sbUlM_entry() //  [R1]
         { []
         }
     {offset
       cbUIv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUIw; else goto cbUIx;
       cbUIw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUIx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Arrow.$p1ArrowZero_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dApplicative_sbUlM_info" {
     $dApplicative_sbUlM_info:
         const $dApplicative_sbUlM_entry;
         const 1;
         const 16;
 },
 sat_sbUlO_entry() //  [R1]
         { []
         }
     {offset
       cbUIC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbUID; else goto cbUIE;
       cbUID: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUIE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Control.Applicative.$fAlternativeWrappedArrow1_closure+1;
           Sp = Sp - 32;
           call Control.Arrow.arr_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUlO_info" {
     sat_sbUlO_info:
         const sat_sbUlO_entry;
         const 1;
         const 16;
 },
 sat_sbUlN_entry() //  [R1]
         { []
         }
     {offset
       cbUIJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUIK; else goto cbUIL;
       cbUIK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUIL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 24];
           R4 = P64[R1 + 16];
           R3 = GHC.Types.:_closure+2;
           R2 = P64[R1 + 32];
           Sp = Sp - 16;
           call Control.Applicative.$fAlternativeWrappedArrow2_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUlN_info" {
     sat_sbUlN_info:
         const sat_sbUlN_entry;
         const 3;
         const 15;
 },
 many_v_sbUlL_entry() //  [R1]
         { []
         }
     {offset
       cbUIM: // global
           _sbUlL::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbUIN; else goto cbUIO;
       cbUIO: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cbUIQ; else goto cbUIP;
       cbUIQ: // global
           HpAlloc = 88;
           goto cbUIN;
       cbUIN: // global
           R1 = _sbUlL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUIP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUlL::P64;
           _sbUlI::P64 = P64[_sbUlL::P64 + 16];
           _sbUlJ::P64 = P64[_sbUlL::P64 + 24];
           _sbUlK::P64 = P64[_sbUlL::P64 + 32];
           I64[Hp - 80] = $dApplicative_sbUlM_info;
           P64[Hp - 64] = _sbUlI::P64;
           I64[Hp - 56] = sat_sbUlO_info;
           _cbUIr::P64 = Hp - 80;
           P64[Hp - 40] = _cbUIr::P64;
           I64[Hp - 32] = sat_sbUlN_info;
           P64[Hp - 16] = _sbUlK::P64;
           P64[Hp - 8] = _sbUlL::P64;
           P64[Hp] = _cbUIr::P64;
           R2 = _sbUlJ::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 32;
           P64[Sp - 24] = Hp - 56;
           Sp = Sp - 40;
           call Control.Arrow.<+>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . many_v_sbUlL_info" {
     many_v_sbUlL_info:
         const many_v_sbUlL_entry;
         const 3;
         const 15;
 },
 Control.Applicative.$fAlternativeWrappedArrow_$cmany_entry() //  [R2,
                                                                   R3, R4]
         { []
         }
     {offset
       cbUIR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbUIV; else goto cbUIU;
       cbUIV: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeWrappedArrow_$cmany_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUIU: // global
           I64[Hp - 32] = many_v_sbUlL_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedArrow_$cmany_info" {
     Control.Applicative.$fAlternativeWrappedArrow_$cmany_info:
         const Control.Applicative.$fAlternativeWrappedArrow_$cmany_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.573347424 UTC

[section ""data" . Control.Applicative.$fAlternativeWrappedArrow_closure" {
     Control.Applicative.$fAlternativeWrappedArrow_closure:
         const Control.Applicative.$fAlternativeWrappedArrow_info;
 },
 sat_sbUlX_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUJD: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Control.Applicative.$fAlternativeWrappedArrow_$cmany_entry(R4,
                                                                           R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUlX_info" {
     sat_sbUlX_info:
         const sat_sbUlX_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sbUlW_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUJL: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Control.Applicative.$fAlternativeWrappedArrow_$csome_entry(R4,
                                                                           R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUlW_info" {
     sat_sbUlW_info:
         const sat_sbUlW_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sbUlV_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbUJT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbUJU; else goto cbUJV;
       cbUJU: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUJV: // global
           _sbUlT::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _sbUlT::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call Control.Arrow.<+>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUlV_info" {
     sat_sbUlV_info:
         const sat_sbUlV_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUlS_entry() //  [R1]
         { []
         }
     {offset
       cbUK0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUK1; else goto cbUK2;
       cbUK1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUK2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Arrow.zeroArrow_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUlS_info" {
     sat_sbUlS_info:
         const sat_sbUlS_entry;
         const 1;
         const 16;
 },
 sat_sbUlR_entry() //  [R1]
         { []
         }
     {offset
       cbUK7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUK8; else goto cbUK9;
       cbUK8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUK9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fAlternativeWrappedArrow_$cp1Alternative_entry(R3,
                                                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUlR_info" {
     sat_sbUlR_info:
         const sat_sbUlR_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fAlternativeWrappedArrow_entry() //  [R2, R3]
         { []
         }
     {offset
       cbUKb: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cbUKf; else goto cbUKe;
       cbUKf: // global
           HpAlloc = 168;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeWrappedArrow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUKe: // global
           I64[Hp - 160] = sat_sbUlX_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_sbUlW_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_sbUlV_info;
           P64[Hp - 104] = R3;
           I64[Hp - 96] = sat_sbUlS_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_sbUlR_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = GHC.Base.C:Alternative_con_info;
           P64[Hp - 32] = Hp - 72;
           P64[Hp - 24] = Hp - 96;
           P64[Hp - 16] = Hp - 110;
           P64[Hp - 8] = Hp - 135;
           P64[Hp] = Hp - 159;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeWrappedArrow_info" {
     Control.Applicative.$fAlternativeWrappedArrow_info:
         const Control.Applicative.$fAlternativeWrappedArrow_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.586513754 UTC

[section ""data" . Control.Applicative.$wunsafeDrop_closure" {
     Control.Applicative.$wunsafeDrop_closure:
         const Control.Applicative.$wunsafeDrop_info;
 },
 Control.Applicative.$wunsafeDrop_entry() //  [R2, R3]
         { []
         }
     {offset
       cbUL2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbUL3; else goto ubULh;
       cbUL3: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$wunsafeDrop_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ubULh: // global
           I64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cbUKS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Control.Applicative.$wunsafeDrop_info" {
     Control.Applicative.$wunsafeDrop_info:
         const Control.Applicative.$wunsafeDrop_entry;
         const 0;
         const 14;
         const 8589934605;
 },
 _cbUKS() //  []
         { []
         }
     {offset
       cbUKS: // global
           I64[Sp - 8] = block_cbUKV_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubULj; else goto cbUKW;
       ubULj: // global
           call _cbUKV(R1) args: 0, res: 0, upd: 0;
       cbUKW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbUKV() //  [R1]
         { []
         }
     {offset
       cbUKV: // global
           if (R1 & 7 == 1) goto cbUKZ; else goto cbUL0;
       cbUKZ: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbUL0: // global
           _sbUm2::P64 = P64[R1 + 14];
           _sbUm3::I64 = I64[Sp + 8];
           if (_sbUm3::I64 != 1) goto cbULd; else goto cbULe;
       cbULd: // global
           I64[Sp + 8] = _sbUm3::I64 - 1;
           P64[Sp + 16] = _sbUm2::P64;
           Sp = Sp + 8;
           call _cbUKS() args: 0, res: 0, upd: 0;
       cbULe: // global
           R1 = _sbUm2::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbUKV_info" {
     block_cbUKV_info:
         const _cbUKV;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.594089024 UTC

[section ""data" . Control.Applicative.$fAlternativeZipList2_closure" {
     Control.Applicative.$fAlternativeZipList2_closure:
         const Control.Applicative.$fAlternativeZipList2_info;
 },
 sat_sbUm9_entry() //  [R1]
         { []
         }
     {offset
       cbULP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbULQ; else goto cbULR;
       cbULQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbULR: // global
           I64[Sp - 16] = block_cbULN_info;
           R3 = 0;
           R2 = P64[R1 + 16];
           P64[Sp - 8] = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUm9_info" {
     sat_sbUm9_info:
         const sat_sbUm9_entry;
         const 2;
         const 18;
 },
 _cbULN() //  [R1]
         { []
         }
     {offset
       cbULN: // global
           _sbUm6::P64 = P64[Sp + 8];
           if (%MO_S_Gt_W64(R1, 0)) goto cbULY; else goto cbULZ;
       cbULY: // global
           R3 = _sbUm6::P64;
           R2 = R1;
           Sp = Sp + 16;
           call Control.Applicative.$wunsafeDrop_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cbULZ: // global
           R1 = _sbUm6::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbULN_info" {
     block_cbULN_info:
         const _cbULN;
         const 1;
         const 30;
 },
 Control.Applicative.$fAlternativeZipList2_entry() //  [R2, R3]
         { []
         }
     {offset
       cbUM0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbUM4; else goto cbUM3;
       cbUM4: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeZipList2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUM3: // global
           I64[Hp - 24] = sat_sbUm9_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = R2;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeZipList2_info" {
     Control.Applicative.$fAlternativeZipList2_info:
         const Control.Applicative.$fAlternativeZipList2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.600955704 UTC

[section ""data" . Control.Applicative.$fGeneric1ZipList1_closure" {
     Control.Applicative.$fGeneric1ZipList1_closure:
         const Control.Applicative.$fGeneric1ZipList1_info;
 },
 Control.Applicative.$fGeneric1ZipList1_entry() //  [R2]
         { []
         }
     {offset
       cbUMp: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGeneric1ZipList1_info" {
     Control.Applicative.$fGeneric1ZipList1_info:
         const Control.Applicative.$fGeneric1ZipList1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.604266103 UTC

[section ""data" . Control.Applicative.$fGeneric1ZipList2_closure" {
     Control.Applicative.$fGeneric1ZipList2_closure:
         const Control.Applicative.$fGeneric1ZipList2_info;
 },
 Control.Applicative.$fGeneric1ZipList2_entry() //  [R2]
         { []
         }
     {offset
       cbUMA: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGeneric1ZipList2_info" {
     Control.Applicative.$fGeneric1ZipList2_info:
         const Control.Applicative.$fGeneric1ZipList2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.607444776 UTC

[section ""data" . Control.Applicative.$fGeneric1ZipList_closure" {
     Control.Applicative.$fGeneric1ZipList_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Control.Applicative.$fGeneric1ZipList2_closure+1;
         const Control.Applicative.$fGeneric1ZipList1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.610083881 UTC

[section ""data" . Control.Applicative.$fGenericZipList1_closure" {
     Control.Applicative.$fGenericZipList1_closure:
         const Control.Applicative.$fGenericZipList1_info;
 },
 Control.Applicative.$fGenericZipList1_entry() //  [R2]
         { []
         }
     {offset
       cbUMO: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGenericZipList1_info" {
     Control.Applicative.$fGenericZipList1_info:
         const Control.Applicative.$fGenericZipList1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.61354108 UTC

[section ""data" . Control.Applicative.$fGenericZipList2_closure" {
     Control.Applicative.$fGenericZipList2_closure:
         const Control.Applicative.$fGenericZipList2_info;
 },
 Control.Applicative.$fGenericZipList2_entry() //  [R2]
         { []
         }
     {offset
       cbUMZ: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGenericZipList2_info" {
     Control.Applicative.$fGenericZipList2_info:
         const Control.Applicative.$fGenericZipList2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.616672167 UTC

[section ""data" . Control.Applicative.$fGenericZipList_closure" {
     Control.Applicative.$fGenericZipList_closure:
         const GHC.Generics.C:Generic_con_info;
         const Control.Applicative.$fGenericZipList2_closure+1;
         const Control.Applicative.$fGenericZipList1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.61934229 UTC

[section ""data" . Control.Applicative.$fFoldableZipList_closure" {
     Control.Applicative.$fFoldableZipList_closure:
         const Data.Foldable.C:Foldable_con_info;
         const Data.Foldable.$fFoldableNonEmpty_$cfold1_closure+2;
         const Data.Foldable.$fFoldable[]_$cfoldMap_closure+3;
         const GHC.Base.foldr_closure+3;
         const Data.Foldable.$fFoldable[]_$cfoldr'_closure+3;
         const GHC.List.foldl_closure+3;
         const GHC.List.foldl'_closure+3;
         const GHC.List.foldr1_closure+2;
         const GHC.List.foldl1_closure+2;
         const GHC.Base.id_closure+1;
         const GHC.List.null_closure+1;
         const GHC.List.length_closure+1;
         const GHC.List.elem_closure+3;
         const GHC.List.maximum_closure+2;
         const GHC.List.minimum_closure+2;
         const GHC.List.sum_closure+1;
         const GHC.List.product_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.621283194 UTC

[section ""data" . Control.Applicative.$fFunctorZipList_closure" {
     Control.Applicative.$fFunctorZipList_closure:
         const GHC.Base.C:Functor_con_info;
         const GHC.Base.map_closure+2;
         const GHC.Base.$fFunctor[]_$c<$_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.625203631 UTC

[section ""data" . Control.Applicative.$fApplicativeZipList6_closure" {
     Control.Applicative.$fApplicativeZipList6_closure:
         const Control.Applicative.$fApplicativeZipList6_info;
 },
 sat_sbUmn_entry() //  [R1]
         { []
         }
     {offset
       cbUNv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUNw; else goto cbUNx;
       cbUNw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUNx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fApplicativeZipList6_entry(R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUmn_info" {
     sat_sbUmn_info:
         const sat_sbUmn_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fApplicativeZipList6_entry() //  [R2, R3]
         { []
         }
     {offset
       cbUNC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbUND; else goto cbUNE;
       cbUND: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fApplicativeZipList6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUNE: // global
           I64[Sp - 16] = block_cbUNf_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubUNY; else goto cbUNg;
       ubUNY: // global
           call _cbUNf(R1) args: 0, res: 0, upd: 0;
       cbUNg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeZipList6_info" {
     Control.Applicative.$fApplicativeZipList6_info:
         const Control.Applicative.$fApplicativeZipList6_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbUNf() //  [R1]
         { []
         }
     {offset
       cbUNf: // global
           if (R1 & 7 == 1) goto ubUNT; else goto cbUNA;
       ubUNT: // global
           Sp = Sp + 16;
           call _cbUNL() args: 0, res: 0, upd: 0;
       cbUNA: // global
           I64[Sp - 8] = block_cbUNl_info;
           _sbUmh::P64 = P64[R1 + 6];
           _sbUmi::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sbUmi::P64;
           P64[Sp + 8] = _sbUmh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubUNV; else goto cbUNm;
       ubUNV: // global
           call _cbUNl(R1) args: 0, res: 0, upd: 0;
       cbUNm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbUNf_info" {
     block_cbUNf_info:
         const _cbUNf;
         const 1;
         const 30;
 },
 _cbUNl() //  [R1]
         { []
         }
     {offset
       cbUNl: // global
           if (R1 & 7 == 1) goto ubUNU; else goto cbUNO;
       ubUNU: // global
           Sp = Sp + 24;
           call _cbUNL() args: 0, res: 0, upd: 0;
       cbUNO: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cbUNR; else goto cbUNQ;
       cbUNR: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbUNQ: // global
           _sbUmk::P64 = P64[R1 + 6];
           _sbUml::P64 = P64[R1 + 14];
           I64[Hp - 80] = sat_sbUmn_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = _sbUml::P64;
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _sbUmk::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbUNl_info" {
     block_cbUNl_info:
         const _cbUNl;
         const 2;
         const 30;
 },
 _cbUNL() //  []
         { []
         }
     {offset
       cbUNL: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.635812479 UTC

[section ""data" . Control.Applicative.$fApplicativeZipList5_closure" {
     Control.Applicative.$fApplicativeZipList5_closure:
         const Control.Applicative.$fApplicativeZipList5_info;
 },
 Control.Applicative.$fApplicativeZipList5_entry() //  [R2, R3]
         { []
         }
     {offset
       cbUOD: // global
           R3 = R3;
           R2 = R2;
           call Control.Applicative.$fApplicativeZipList6_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeZipList5_info" {
     Control.Applicative.$fApplicativeZipList5_info:
         const Control.Applicative.$fApplicativeZipList5_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.640776417 UTC

[section ""data" . Control.Applicative.$fApplicativeZipList4_closure" {
     Control.Applicative.$fApplicativeZipList4_closure:
         const Control.Applicative.$fApplicativeZipList4_info;
 },
 sat_sbUmy_entry() //  [R1]
         { []
         }
     {offset
       cbUP4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUP5; else goto cbUP6;
       cbUP5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUP6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fApplicativeZipList4_entry(R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUmy_info" {
     sat_sbUmy_info:
         const sat_sbUmy_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fApplicativeZipList4_entry() //  [R2, R3]
         { []
         }
     {offset
       cbUPb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUPc; else goto cbUPd;
       cbUPc: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fApplicativeZipList4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUPd: // global
           I64[Sp - 16] = block_cbUOO_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubUPw; else goto cbUOP;
       ubUPw: // global
           call _cbUOO(R1) args: 0, res: 0, upd: 0;
       cbUOP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeZipList4_info" {
     Control.Applicative.$fApplicativeZipList4_info:
         const Control.Applicative.$fApplicativeZipList4_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbUOO() //  [R1]
         { []
         }
     {offset
       cbUOO: // global
           if (R1 & 7 == 1) goto ubUPr; else goto cbUP9;
       ubUPr: // global
           Sp = Sp + 16;
           call _cbUPk() args: 0, res: 0, upd: 0;
       cbUP9: // global
           I64[Sp] = block_cbUOU_info;
           _sbUmu::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbUmu::P64;
           if (R1 & 7 != 0) goto ubUPt; else goto cbUOV;
       ubUPt: // global
           call _cbUOU(R1) args: 0, res: 0, upd: 0;
       cbUOV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbUOO_info" {
     block_cbUOO_info:
         const _cbUOO;
         const 1;
         const 30;
 },
 _cbUOU() //  [R1]
         { []
         }
     {offset
       cbUOU: // global
           if (R1 & 7 == 1) goto ubUPs; else goto cbUPm;
       ubUPs: // global
           Sp = Sp + 16;
           call _cbUPk() args: 0, res: 0, upd: 0;
       cbUPm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbUPp; else goto cbUPo;
       cbUPp: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbUPo: // global
           _sbUmw::P64 = P64[R1 + 6];
           _sbUmx::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_sbUmy_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sbUmx::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sbUmw::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbUOU_info" {
     block_cbUOU_info:
         const _cbUOU;
         const 1;
         const 30;
 },
 _cbUPk() //  []
         { []
         }
     {offset
       cbUPk: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.650739139 UTC

[section ""data" . Control.Applicative.$fApplicativeZipList3_closure" {
     Control.Applicative.$fApplicativeZipList3_closure:
         const Control.Applicative.$fApplicativeZipList3_info;
 },
 Control.Applicative.$fApplicativeZipList3_entry() //  [R2, R3]
         { []
         }
     {offset
       cbUQ8: // global
           R3 = R3;
           R2 = R2;
           call Control.Applicative.$fApplicativeZipList4_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeZipList3_info" {
     Control.Applicative.$fApplicativeZipList3_info:
         const Control.Applicative.$fApplicativeZipList3_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.655816983 UTC

[section ""data" . Control.Applicative.$fApplicativeZipList2_closure" {
     Control.Applicative.$fApplicativeZipList2_closure:
         const Control.Applicative.$fApplicativeZipList2_info;
 },
 sat_sbUmJ_entry() //  [R1]
         { []
         }
     {offset
       cbUQz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUQA; else goto cbUQB;
       cbUQA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUQB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fApplicativeZipList2_entry(R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUmJ_info" {
     sat_sbUmJ_info:
         const sat_sbUmJ_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fApplicativeZipList2_entry() //  [R2, R3]
         { []
         }
     {offset
       cbUQG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbUQH; else goto cbUQI;
       cbUQH: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fApplicativeZipList2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUQI: // global
           I64[Sp - 16] = block_cbUQj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubUR1; else goto cbUQk;
       ubUR1: // global
           call _cbUQj(R1) args: 0, res: 0, upd: 0;
       cbUQk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeZipList2_info" {
     Control.Applicative.$fApplicativeZipList2_info:
         const Control.Applicative.$fApplicativeZipList2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbUQj() //  [R1]
         { []
         }
     {offset
       cbUQj: // global
           if (R1 & 7 == 1) goto ubUQW; else goto cbUQE;
       ubUQW: // global
           Sp = Sp + 16;
           call _cbUQP() args: 0, res: 0, upd: 0;
       cbUQE: // global
           I64[Sp - 8] = block_cbUQp_info;
           _sbUmE::P64 = P64[R1 + 6];
           _sbUmF::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sbUmF::P64;
           P64[Sp + 8] = _sbUmE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubUQY; else goto cbUQq;
       ubUQY: // global
           call _cbUQp(R1) args: 0, res: 0, upd: 0;
       cbUQq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbUQj_info" {
     block_cbUQj_info:
         const _cbUQj;
         const 1;
         const 30;
 },
 _cbUQp() //  [R1]
         { []
         }
     {offset
       cbUQp: // global
           if (R1 & 7 == 1) goto ubUQX; else goto cbUQR;
       ubUQX: // global
           Sp = Sp + 24;
           call _cbUQP() args: 0, res: 0, upd: 0;
       cbUQR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbUQU; else goto cbUQT;
       cbUQU: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbUQT: // global
           _sbUmI::P64 = P64[R1 + 14];
           I64[Hp - 48] = sat_sbUmJ_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sbUmI::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbUQp_info" {
     block_cbUQp_info:
         const _cbUQp;
         const 2;
         const 30;
 },
 _cbUQP() //  []
         { []
         }
     {offset
       cbUQP: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.666028335 UTC

[section ""data" . Control.Applicative.$fApplicativeZipList1_closure" {
     Control.Applicative.$fApplicativeZipList1_closure:
         const Control.Applicative.$fApplicativeZipList1_info;
 },
 Control.Applicative.$fApplicativeZipList1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbURE: // global
           R3 = R3;
           R2 = R2;
           call Control.Applicative.$fApplicativeZipList2_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fApplicativeZipList1_info" {
     Control.Applicative.$fApplicativeZipList1_info:
         const Control.Applicative.$fApplicativeZipList1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.669061142 UTC

[section ""data" . Control.Applicative.$fApplicativeZipList_closure" {
     Control.Applicative.$fApplicativeZipList_closure:
         const GHC.Base.C:Applicative_con_info;
         const Control.Applicative.$fFunctorZipList_closure+1;
         const GHC.List.repeat_closure+1;
         const Control.Applicative.$fApplicativeZipList5_closure+2;
         const GHC.List.zipWith_closure+3;
         const Control.Applicative.$fApplicativeZipList3_closure+2;
         const Control.Applicative.$fApplicativeZipList1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.671094593 UTC

[section ""data" . Control.Applicative.$fAlternativeZipList_xs_closure" {
     Control.Applicative.$fAlternativeZipList_xs_closure:
         const :_con_info;
         const GHC.Types.[]_closure+1;
         const Control.Applicative.$fAlternativeZipList_xs_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.675051284 UTC

[section ""data" . Control.Applicative.$fAlternativeZipList1_closure" {
     Control.Applicative.$fAlternativeZipList1_closure:
         const Control.Applicative.$fAlternativeZipList1_info;
 },
 sat_sbUmV_entry() //  [R1]
         { []
         }
     {offset
       cbUS7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUS8; else goto cbUS9;
       cbUS8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUS9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fAlternativeZipList1_entry(R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUmV_info" {
     sat_sbUmV_info:
         const sat_sbUmV_entry;
         const 2;
         const 18;
 },
 Control.Applicative.$fAlternativeZipList1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbUSe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbUSf; else goto cbUSg;
       cbUSf: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeZipList1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUSg: // global
           I64[Sp - 16] = block_cbURR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubUSA; else goto cbURS;
       ubUSA: // global
           call _cbURR(R1) args: 0, res: 0, upd: 0;
       cbURS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeZipList1_info" {
     Control.Applicative.$fAlternativeZipList1_info:
         const Control.Applicative.$fAlternativeZipList1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbURR() //  [R1]
         { []
         }
     {offset
       cbURR: // global
           if (R1 & 7 == 1) goto ubUSv; else goto cbUSc;
       ubUSv: // global
           Sp = Sp + 16;
           call _cbUSn() args: 0, res: 0, upd: 0;
       cbUSc: // global
           I64[Sp - 8] = block_cbURX_info;
           _sbUmP::P64 = P64[R1 + 6];
           _sbUmQ::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sbUmQ::P64;
           P64[Sp + 8] = _sbUmP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubUSx; else goto cbURY;
       ubUSx: // global
           call _cbURX(R1) args: 0, res: 0, upd: 0;
       cbURY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbURR_info" {
     block_cbURR_info:
         const _cbURR;
         const 1;
         const 30;
 },
 _cbURX() //  [R1]
         { []
         }
     {offset
       cbURX: // global
           if (R1 & 7 == 1) goto ubUSw; else goto cbUSq;
       ubUSw: // global
           Sp = Sp + 24;
           call _cbUSn() args: 0, res: 0, upd: 0;
       cbUSq: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbUSt; else goto cbUSs;
       cbUSt: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbUSs: // global
           _sbUmS::P64 = P64[R1 + 6];
           _sbUmT::P64 = P64[R1 + 14];
           I64[Hp - 72] = sat_sbUmV_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = _sbUmT::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _sbUmS::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbURX_info" {
     block_cbURX_info:
         const _cbURX;
         const 2;
         const 30;
 },
 _cbUSn() //  []
         { []
         }
     {offset
       cbUSn: // global
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.686615836 UTC

[section ""data" . Control.Applicative.$fAlternativeZipList_$csome_closure" {
     Control.Applicative.$fAlternativeZipList_$csome_closure:
         const Control.Applicative.$fAlternativeZipList_$csome_info;
 },
 sat_sbUmY_entry() //  [R1]
         { []
         }
     {offset
       cbUTn: // global
           R3 = Control.Applicative.$fAlternativeZipList_xs_closure+2;
           R2 = P64[R1 + 16];
           call Control.Applicative.$fAlternativeZipList2_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUmY_info" {
     sat_sbUmY_info:
         const sat_sbUmY_entry;
         const 1;
         const 16;
 },
 some_v_sbUmX_entry() //  [R1]
         { []
         }
     {offset
       cbUTq: // global
           _sbUmX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbUTr; else goto cbUTs;
       cbUTs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUTu; else goto cbUTt;
       cbUTu: // global
           HpAlloc = 24;
           goto cbUTr;
       cbUTr: // global
           R1 = _sbUmX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUTt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUmX::P64;
           _sbUmW::P64 = P64[_sbUmX::P64 + 16];
           I64[Hp - 16] = sat_sbUmY_info;
           P64[Hp] = _sbUmX::P64;
           R3 = Hp - 16;
           R2 = _sbUmW::P64;
           Sp = Sp - 16;
           call Control.Applicative.$fAlternativeZipList1_entry(R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . some_v_sbUmX_info" {
     some_v_sbUmX_info:
         const some_v_sbUmX_entry;
         const 1;
         const 16;
 },
 Control.Applicative.$fAlternativeZipList_$csome_entry() //  [R2]
         { []
         }
     {offset
       cbUTv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUTz; else goto cbUTy;
       cbUTz: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeZipList_$csome_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUTy: // global
           I64[Hp - 16] = some_v_sbUmX_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeZipList_$csome_info" {
     Control.Applicative.$fAlternativeZipList_$csome_info:
         const Control.Applicative.$fAlternativeZipList_$csome_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.694781901 UTC

[section ""data" . Control.Applicative.$fAlternativeZipList_$cmany_closure" {
     Control.Applicative.$fAlternativeZipList_$cmany_closure:
         const Control.Applicative.$fAlternativeZipList_$cmany_info;
 },
 many_v_sbUn0_entry() //  [R1]
         { []
         }
     {offset
       cbUU0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbUU1; else goto cbUU2;
       cbUU1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUU2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbUTY_info;
           R3 = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Control.Applicative.$fAlternativeZipList1_entry(R3,
                                                                R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . many_v_sbUn0_info" {
     many_v_sbUn0_info:
         const many_v_sbUn0_entry;
         const 1;
         const 16;
 },
 _cbUTY() //  [R1]
         { []
         }
     {offset
       cbUTY: // global
           R3 = Control.Applicative.$fAlternativeZipList_xs_closure+2;
           R2 = R1;
           Sp = Sp + 8;
           call Control.Applicative.$fAlternativeZipList2_entry(R3,
                                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbUTY_info" {
     block_cbUTY_info:
         const _cbUTY;
         const 0;
         const 30;
 },
 Control.Applicative.$fAlternativeZipList_$cmany_entry() //  [R2]
         { []
         }
     {offset
       cbUU6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUUa; else goto cbUU9;
       cbUUa: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Applicative.$fAlternativeZipList_$cmany_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUU9: // global
           I64[Hp - 16] = many_v_sbUn0_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fAlternativeZipList_$cmany_info" {
     Control.Applicative.$fAlternativeZipList_$cmany_info:
         const Control.Applicative.$fAlternativeZipList_$cmany_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.702519102 UTC

[section ""data" . Control.Applicative.$fAlternativeZipList_closure" {
     Control.Applicative.$fAlternativeZipList_closure:
         const GHC.Base.C:Alternative_con_info;
         const Control.Applicative.$fApplicativeZipList_closure+1;
         const GHC.Types.[]_closure+1;
         const Control.Applicative.$fAlternativeZipList2_closure+2;
         const Control.Applicative.$fAlternativeZipList_$csome_closure+1;
         const Control.Applicative.$fAlternativeZipList_$cmany_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.704411279 UTC

[section ""cstring" . Control.Applicative.$fReadZipList11_bytes" {
     Control.Applicative.$fReadZipList11_bytes:
         I8[] [90,105,112,76,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.706894376 UTC

[section ""data" . Control.Applicative.$fReadZipList10_closure" {
     Control.Applicative.$fReadZipList10_closure:
         const Control.Applicative.$fReadZipList10_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Applicative.$fReadZipList10_entry() //  [R1]
         { []
         }
     {offset
       cbUUz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUUA; else goto cbUUB;
       cbUUA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUUB: // global
           (_cbUUw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbUUw::I64 == 0) goto cbUUy; else goto cbUUx;
       cbUUy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbUUx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbUUw::I64;
           R2 = Control.Applicative.$fReadZipList11_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Control.Applicative.$fReadZipList10_info" {
     Control.Applicative.$fReadZipList10_info:
         const Control.Applicative.$fReadZipList10_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.710712489 UTC

[section ""data" . Control.Applicative.$fReadZipList_lexeme1_closure" {
     Control.Applicative.$fReadZipList_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const Control.Applicative.$fReadZipList10_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.712497519 UTC

[section ""cstring" . Control.Applicative.$fReadZipList9_bytes" {
     Control.Applicative.$fReadZipList9_bytes:
         I8[] [123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.714790153 UTC

[section ""data" . Control.Applicative.$fReadZipList8_closure" {
     Control.Applicative.$fReadZipList8_closure:
         const Control.Applicative.$fReadZipList8_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Applicative.$fReadZipList8_entry() //  [R1]
         { []
         }
     {offset
       cbUUS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUUT; else goto cbUUU;
       cbUUT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUUU: // global
           (_cbUUP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbUUP::I64 == 0) goto cbUUR; else goto cbUUQ;
       cbUUR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbUUQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbUUP::I64;
           R2 = Control.Applicative.$fReadZipList9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Control.Applicative.$fReadZipList8_info" {
     Control.Applicative.$fReadZipList8_info:
         const Control.Applicative.$fReadZipList8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.71872631 UTC

[section ""data" . Control.Applicative.$fReadZipList_lexeme_closure" {
     Control.Applicative.$fReadZipList_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const Control.Applicative.$fReadZipList8_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.720495345 UTC

[section ""cstring" . Control.Applicative.$fReadZipList7_bytes" {
     Control.Applicative.$fReadZipList7_bytes:
         I8[] [103,101,116,90,105,112,76,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.72288146 UTC

[section ""data" . Control.Applicative.$fReadZipList6_closure" {
     Control.Applicative.$fReadZipList6_closure:
         const Control.Applicative.$fReadZipList6_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Applicative.$fReadZipList6_entry() //  [R1]
         { []
         }
     {offset
       cbUVb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUVc; else goto cbUVd;
       cbUVc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUVd: // global
           (_cbUV8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbUV8::I64 == 0) goto cbUVa; else goto cbUV9;
       cbUVa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbUV9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbUV8::I64;
           R2 = Control.Applicative.$fReadZipList7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Control.Applicative.$fReadZipList6_info" {
     Control.Applicative.$fReadZipList6_info:
         const Control.Applicative.$fReadZipList6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.726821078 UTC

[section ""data" . Control.Applicative.$fReadZipList5_closure" {
     Control.Applicative.$fReadZipList5_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.729785474 UTC

[section ""cstring" . Control.Applicative.$fReadZipList4_bytes" {
     Control.Applicative.$fReadZipList4_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.732103609 UTC

[section ""data" . Control.Applicative.$fReadZipList3_closure" {
     Control.Applicative.$fReadZipList3_closure:
         const Control.Applicative.$fReadZipList3_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Applicative.$fReadZipList3_entry() //  [R1]
         { []
         }
     {offset
       cbUVu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUVv; else goto cbUVw;
       cbUVv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUVw: // global
           (_cbUVr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbUVr::I64 == 0) goto cbUVt; else goto cbUVs;
       cbUVt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbUVs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbUVr::I64;
           R2 = Control.Applicative.$fReadZipList4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Control.Applicative.$fReadZipList3_info" {
     Control.Applicative.$fReadZipList3_info:
         const Control.Applicative.$fReadZipList3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.735802465 UTC

[section ""data" . Control.Applicative.$fReadZipList2_closure" {
     Control.Applicative.$fReadZipList2_closure:
         const Text.Read.Lex.Punc_con_info;
         const Control.Applicative.$fReadZipList3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.743323585 UTC

[section ""data" . Control.Applicative.$fReadZipList1_closure" {
     Control.Applicative.$fReadZipList1_closure:
         const Control.Applicative.$fReadZipList1_info;
         const 0;
 },
 lvl_sbUn3_entry() //  [R1]
         { []
         }
     {offset
       cbUVO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbUVP; else goto cbUVQ;
       cbUVP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUVQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Text.ParserCombinators.ReadPrec.minPrec_closure;
           Sp = Sp - 32;
           call GHC.Read.readListPrec_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_sbUn3_info" {
     lvl_sbUn3_info:
         const lvl_sbUn3_entry;
         const 1;
         const 16;
 },
 ds_sbUn4_entry() //  [R1]
         { []
         }
     {offset
       cbUVW: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ds_sbUn4_info" {
     ds_sbUn4_info:
         const ds_sbUn4_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbUnf_entry() //  [R1]
         { []
         }
     {offset
       cbUWx: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUnf_info" {
     sat_sbUnf_info:
         const sat_sbUnf_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sbUni_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUWD: // global
           _sbUnd::P64 = R2;
           _sbUni::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cbUWE; else goto cbUWF;
       cbUWF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUWH; else goto cbUWG;
       cbUWH: // global
           HpAlloc = 24;
           goto cbUWE;
       cbUWE: // global
           R2 = _sbUnd::P64;
           R1 = _sbUni::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUWG: // global
           _sbUn7::P64 = P64[_sbUni::P64 + 7];
           I64[Hp - 16] = sat_sbUnf_info;
           P64[Hp - 8] = _sbUn7::P64;
           P64[Hp] = _sbUnd::P64;
           I64[Sp - 8] = block_cbUWA_info;
           R3 = Hp - 15;
           R2 = Control.Applicative.$fReadZipList2_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUni_info" {
     sat_sbUni_info:
         const sat_sbUni_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const SbUXm_srt;
 },
 _cbUWA() //  [R1]
         { []
         }
     {offset
       cbUWA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbUWK; else goto cbUWJ;
       cbUWK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbUWJ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbUWA_info" {
     block_cbUWA_info:
         const _cbUWA;
         const 0;
         const 30;
 },
 sat_sbUnj_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUWL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbUWP; else goto cbUWO;
       cbUWP: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUWO: // global
           _sbUn4::P64 = P64[R1 + 7];
           _sbUn7::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_sbUni_info;
           P64[Hp] = _sbUn7::P64;
           R5 = Hp - 7;
           R4 = Control.Applicative.$fReadZipList5_closure+1;
           R3 = _sbUn4::P64;
           R2 = Control.Applicative.$fReadZipList6_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUnj_info" {
     sat_sbUnj_info:
         const sat_sbUnj_entry;
         const 2;
         const 64424509451;
         const 4294967301;
         const SbUXm_srt;
 },
 sat_sbUnm_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUWT: // global
           _sbUnb::P64 = R2;
           _sbUnm::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto cbUWU; else goto cbUWV;
       cbUWV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUWX; else goto cbUWW;
       cbUWX: // global
           HpAlloc = 24;
           goto cbUWU;
       cbUWU: // global
           R2 = _sbUnb::P64;
           R1 = _sbUnm::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUWW: // global
           _sbUn4::P64 = P64[_sbUnm::P64 + 7];
           _sbUn7::P64 = P64[_sbUnm::P64 + 15];
           I64[Hp - 16] = sat_sbUnj_info;
           P64[Hp - 8] = _sbUn4::P64;
           P64[Hp] = _sbUn7::P64;
           I64[Sp - 8] = block_cbUWQ_info;
           R3 = Hp - 15;
           R2 = Control.Applicative.$fReadZipList_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUnm_info" {
     sat_sbUnm_info:
         const sat_sbUnm_entry;
         const 2;
         const 133143986187;
         const 4294967301;
         const SbUXm_srt;
 },
 _cbUWQ() //  [R1]
         { []
         }
     {offset
       cbUWQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbUX0; else goto cbUWZ;
       cbUX0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbUWZ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbUWQ_info" {
     block_cbUWQ_info:
         const _cbUWQ;
         const 0;
         const 30;
 },
 sat_sbUnp_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbUX1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbUX2; else goto cbUX3;
       cbUX2: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbUX3: // global
           I64[Sp - 24] = block_cbUW4_info;
           _sbUn4::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _sbUn4::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubUXg; else goto cbUW5;
       ubUXg: // global
           call _cbUW4(R1) args: 0, res: 0, upd: 0;
       cbUW5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUnp_info" {
     sat_sbUnp_info:
         const sat_sbUnp_entry;
         const 1;
         const 270582939657;
         const 8589934607;
         const SbUXm_srt;
 },
 _cbUW4() //  [R1]
         { []
         }
     {offset
       cbUW4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUX6; else goto cbUX5;
       cbUX6: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbUX5: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 11)) goto cbUX8; else goto cbUXc;
       cbUX8: // global
           Hp = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbUXc: // global
           I64[Hp - 16] = sat_sbUnm_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cbUX9_info;
           R3 = Hp - 15;
           R2 = Control.Applicative.$fReadZipList_lexeme1_closure+4;
           Sp = Sp + 16;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbUW4_info" {
     block_cbUW4_info:
         const _cbUW4;
         const 2;
         const 270582939678;
         const SbUXm_srt;
 },
 _cbUX9() //  [R1]
         { []
         }
     {offset
       cbUX9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbUXf; else goto cbUXe;
       cbUXf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbUXe: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbUX9_info" {
     block_cbUX9_info:
         const _cbUX9;
         const 0;
         const 30;
 },
 Control.Applicative.$fReadZipList1_entry() //  [R2]
         { []
         }
     {offset
       cbUXh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbUXl; else goto cbUXk;
       cbUXl: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Control.Applicative.$fReadZipList1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUXk: // global
           I64[Hp - 48] = lvl_sbUn3_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = ds_sbUn4_info;
           P64[Hp - 16] = Hp - 48;
           I64[Hp - 8] = sat_sbUnp_info;
           P64[Hp] = Hp - 23;
           R2 = Hp - 6;
           R1 = GHC.Read.list3_closure+3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fReadZipList1_info" {
     Control.Applicative.$fReadZipList1_info:
         const Control.Applicative.$fReadZipList1_entry;
         const 0;
         const 1095216660494;
         const 4294967301;
         const SbUXm_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.770739613 UTC

[section ""data" . Control.Applicative.$fReadZipList_$creadsPrec_closure" {
     Control.Applicative.$fReadZipList_$creadsPrec_closure:
         const Control.Applicative.$fReadZipList_$creadsPrec_info;
         const 0;
 },
 ds_sbUnr_entry() //  [R1]
         { []
         }
     {offset
       cbUYC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUYD; else goto cbUYE;
       cbUYD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUYE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fReadZipList1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds_sbUnr_info" {
     ds_sbUnr_info:
         const ds_sbUnr_entry;
         const 1;
         const 4294967312;
         const SbUXm_srt+56;
 },
 sat_sbUnt_entry() //  [R1]
         { []
         }
     {offset
       cbUYO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbUYP; else goto cbUYQ;
       cbUYP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbUYQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUnt_info" {
     sat_sbUnt_info:
         const sat_sbUnt_entry;
         const 2;
         const 18;
 },
 sat_sbUnu_entry() //  [R1, R2]
         { []
         }
     {offset
       cbUYR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbUYV; else goto cbUYU;
       cbUYV: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUYU: // global
           _sbUnr::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sbUnt_info;
           P64[Hp - 8] = _sbUnr::P64;
           P64[Hp] = R2;
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUnu_info" {
     sat_sbUnu_info:
         const sat_sbUnu_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Control.Applicative.$fReadZipList_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       cbUYW: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbUZ0; else goto cbUYZ;
       cbUZ0: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = Control.Applicative.$fReadZipList_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUYZ: // global
           I64[Hp - 32] = ds_sbUnr_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_sbUnu_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fReadZipList_$creadsPrec_info" {
     Control.Applicative.$fReadZipList_$creadsPrec_info:
         const Control.Applicative.$fReadZipList_$creadsPrec_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbUXm_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.783676577 UTC

[section ""data" . Control.Applicative.$fReadZipList_$creadListPrec_closure" {
     Control.Applicative.$fReadZipList_$creadListPrec_closure:
         const Control.Applicative.$fReadZipList_$creadListPrec_info;
         const 0;
 },
 sat_sbUnw_entry() //  [R1]
         { []
         }
     {offset
       cbUZx: // global
           R2 = P64[R1 + 16];
           call Control.Applicative.$fReadZipList1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUnw_info" {
     sat_sbUnw_info:
         const sat_sbUnw_entry;
         const 1;
         const 4294967312;
         const SbUXm_srt+56;
 },
 Control.Applicative.$fReadZipList_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       cbUZA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbUZE; else goto cbUZD;
       cbUZE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Applicative.$fReadZipList_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbUZD: // global
           I64[Hp - 16] = sat_sbUnw_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fReadZipList_$creadListPrec_info" {
     Control.Applicative.$fReadZipList_$creadListPrec_info:
         const Control.Applicative.$fReadZipList_$creadListPrec_entry;
         const 0;
         const 55834574862;
         const 4294967301;
         const SbUXm_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.79143098 UTC

[section ""data" . Control.Applicative.$fReadZipList_$creadList_closure" {
     Control.Applicative.$fReadZipList_$creadList_closure:
         const Control.Applicative.$fReadZipList_$creadList_info;
         const 0;
 },
 sat_sbUny_entry() //  [R1]
         { []
         }
     {offset
       cbUZZ: // global
           R2 = P64[R1 + 16];
           call Control.Applicative.$fReadZipList1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUny_info" {
     sat_sbUny_info:
         const sat_sbUny_entry;
         const 1;
         const 4294967312;
         const SbUXm_srt+56;
 },
 sat_sbUnz_entry() //  [R1]
         { []
         }
     {offset
       cbV02: // global
           _sbUnz::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbV03; else goto cbV04;
       cbV04: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbV06; else goto cbV05;
       cbV06: // global
           HpAlloc = 24;
           goto cbV03;
       cbV03: // global
           R1 = _sbUnz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbV05: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUnz::P64;
           _sbUnx::P64 = P64[_sbUnz::P64 + 16];
           I64[Hp - 16] = sat_sbUny_info;
           P64[Hp] = _sbUnx::P64;
           R2 = Hp - 16;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Read.$fRead()7_closure;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUnz_info" {
     sat_sbUnz_info:
         const sat_sbUnz_entry;
         const 1;
         const 21474836496;
         const SbUXm_srt+56;
 },
 Control.Applicative.$fReadZipList_$creadList_entry() //  [R2]
         { []
         }
     {offset
       cbV07: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbV0b; else goto cbV0a;
       cbV0b: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Applicative.$fReadZipList_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbV0a: // global
           I64[Hp - 16] = sat_sbUnz_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fReadZipList_$creadList_info" {
     Control.Applicative.$fReadZipList_$creadList_info:
         const Control.Applicative.$fReadZipList_$creadList_entry;
         const 0;
         const 90194313230;
         const 4294967301;
         const SbUXm_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.802569367 UTC

[section ""data" . Control.Applicative.$fReadZipList_closure" {
     Control.Applicative.$fReadZipList_closure:
         const Control.Applicative.$fReadZipList_info;
         const 0;
 },
 sat_sbUnE_entry() //  [R1]
         { []
         }
     {offset
       cbV0D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbV0E; else goto cbV0F;
       cbV0E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbV0F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fReadZipList_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUnE_info" {
     sat_sbUnE_info:
         const sat_sbUnE_entry;
         const 1;
         const 4294967312;
         const SbUXm_srt+80;
 },
 sat_sbUnD_entry() //  [R1]
         { []
         }
     {offset
       cbV0K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbV0L; else goto cbV0M;
       cbV0L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbV0M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fReadZipList1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUnD_info" {
     sat_sbUnD_info:
         const sat_sbUnD_entry;
         const 1;
         const 4294967312;
         const SbUXm_srt+56;
 },
 sat_sbUnC_entry() //  [R1]
         { []
         }
     {offset
       cbV0R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbV0S; else goto cbV0T;
       cbV0S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbV0T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fReadZipList_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUnC_info" {
     sat_sbUnC_info:
         const sat_sbUnC_entry;
         const 1;
         const 4294967312;
         const SbUXm_srt+88;
 },
 sat_sbUnB_entry() //  [R1]
         { []
         }
     {offset
       cbV0Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbV0Z; else goto cbV10;
       cbV0Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbV10: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fReadZipList_$creadsPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUnB_info" {
     sat_sbUnB_info:
         const sat_sbUnB_entry;
         const 1;
         const 4294967312;
         const SbUXm_srt+64;
 },
 Control.Applicative.$fReadZipList_entry() //  [R2]
         { []
         }
     {offset
       cbV12: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbV16; else goto cbV15;
       cbV16: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = Control.Applicative.$fReadZipList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbV15: // global
           I64[Hp - 128] = sat_sbUnE_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbUnD_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_sbUnC_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sbUnB_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           P64[Hp - 8] = Hp - 104;
           P64[Hp] = Hp - 128;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fReadZipList_info" {
     Control.Applicative.$fReadZipList_info:
         const Control.Applicative.$fReadZipList_entry;
         const 0;
         const 253403070478;
         const 4294967301;
         const SbUXm_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.817452064 UTC

[section ""data" . Control.Applicative.$fEqZipList_closure" {
     Control.Applicative.$fEqZipList_closure:
         const Control.Applicative.$fEqZipList_info;
 },
 sat_sbUnH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbV1O: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Classes.$fEq[]_$c/=_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUnH_info" {
     sat_sbUnH_info:
         const sat_sbUnH_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUnG_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbV1W: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Classes.$fEq[]_$c==_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUnG_info" {
     sat_sbUnG_info:
         const sat_sbUnG_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Control.Applicative.$fEqZipList_entry() //  [R2]
         { []
         }
     {offset
       cbV20: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbV24; else goto cbV23;
       cbV24: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = Control.Applicative.$fEqZipList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbV23: // global
           I64[Hp - 48] = sat_sbUnH_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = sat_sbUnG_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 30;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fEqZipList_info" {
     Control.Applicative.$fEqZipList_info:
         const Control.Applicative.$fEqZipList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.826651486 UTC

[section ""data" . Control.Applicative.$fOrdZipList_$cp1Ord_closure" {
     Control.Applicative.$fOrdZipList_$cp1Ord_closure:
         const Control.Applicative.$fOrdZipList_$cp1Ord_info;
 },
 sat_sbUnJ_entry() //  [R1]
         { []
         }
     {offset
       cbV2t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbV2u; else goto cbV2v;
       cbV2u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbV2v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUnJ_info" {
     sat_sbUnJ_info:
         const sat_sbUnJ_entry;
         const 1;
         const 16;
 },
 Control.Applicative.$fOrdZipList_$cp1Ord_entry() //  [R2]
         { []
         }
     {offset
       cbV2w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbV2A; else goto cbV2z;
       cbV2A: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Applicative.$fOrdZipList_$cp1Ord_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbV2z: // global
           I64[Hp - 16] = sat_sbUnJ_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Control.Applicative.$fEqZipList_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fOrdZipList_$cp1Ord_info" {
     Control.Applicative.$fOrdZipList_$cp1Ord_info:
         const Control.Applicative.$fOrdZipList_$cp1Ord_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.834880599 UTC

[section ""data" . Control.Applicative.$fOrdZipList_closure" {
     Control.Applicative.$fOrdZipList_closure:
         const Control.Applicative.$fOrdZipList_info;
 },
 sat_sbUnS_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbV2U: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Classes.$fOrd[]_$cmin_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUnS_info" {
     sat_sbUnS_info:
         const sat_sbUnS_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUnR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbV32: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Classes.$fOrd[]_$cmax_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUnR_info" {
     sat_sbUnR_info:
         const sat_sbUnR_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUnQ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbV3a: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Classes.$fOrd[]_$c>=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUnQ_info" {
     sat_sbUnQ_info:
         const sat_sbUnQ_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUnP_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbV3i: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Classes.$fOrd[]_$c>_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUnP_info" {
     sat_sbUnP_info:
         const sat_sbUnP_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUnO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbV3q: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Classes.$fOrd[]_$c<=_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUnO_info" {
     sat_sbUnO_info:
         const sat_sbUnO_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUnN_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbV3y: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Classes.$fOrd[]_$c<_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUnN_info" {
     sat_sbUnN_info:
         const sat_sbUnN_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUnM_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbV3G: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.Classes.$fOrd[]_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUnM_info" {
     sat_sbUnM_info:
         const sat_sbUnM_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUnL_entry() //  [R1]
         { []
         }
     {offset
       cbV3N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbV3O; else goto cbV3P;
       cbV3O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbV3P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fOrdZipList_$cp1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUnL_info" {
     sat_sbUnL_info:
         const sat_sbUnL_entry;
         const 1;
         const 16;
 },
 Control.Applicative.$fOrdZipList_entry() //  [R2]
         { []
         }
     {offset
       cbV3R: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto cbV3V; else goto cbV3U;
       cbV3V: // global
           HpAlloc = 208;
           R2 = R2;
           R1 = Control.Applicative.$fOrdZipList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbV3U: // global
           I64[Hp - 200] = sat_sbUnS_info;
           P64[Hp - 192] = R2;
           I64[Hp - 184] = sat_sbUnR_info;
           P64[Hp - 176] = R2;
           I64[Hp - 168] = sat_sbUnQ_info;
           P64[Hp - 160] = R2;
           I64[Hp - 152] = sat_sbUnP_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sbUnO_info;
           P64[Hp - 128] = R2;
           I64[Hp - 120] = sat_sbUnN_info;
           P64[Hp - 112] = R2;
           I64[Hp - 104] = sat_sbUnM_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sbUnL_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 102;
           P64[Hp - 40] = Hp - 118;
           P64[Hp - 32] = Hp - 134;
           P64[Hp - 24] = Hp - 150;
           P64[Hp - 16] = Hp - 166;
           P64[Hp - 8] = Hp - 182;
           P64[Hp] = Hp - 198;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fOrdZipList_info" {
     Control.Applicative.$fOrdZipList_info:
         const Control.Applicative.$fOrdZipList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.850849345 UTC

[section ""cstring" . Control.Applicative.$fShowZipList3_bytes" {
     Control.Applicative.$fShowZipList3_bytes:
         I8[] [90,105,112,76,105,115,116,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.852604062 UTC

[section ""cstring" . Control.Applicative.$fShowZipList2_bytes" {
     Control.Applicative.$fShowZipList2_bytes:
         I8[] [103,101,116,90,105,112,76,105,115,116,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.859885812 UTC

[section ""data" . Control.Applicative.$w$cshowsPrec_closure" {
     Control.Applicative.$w$cshowsPrec_closure:
         const Control.Applicative.$w$cshowsPrec_info;
 },
 f_sbUnW_entry() //  [R1]
         { []
         }
     {offset
       cbV4S: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbV4T; else goto cbV4U;
       cbV4T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbV4U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Show.showList_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_sbUnW_info" {
     f_sbUnW_info:
         const f_sbUnW_entry;
         const 2;
         const 18;
 },
 sat_sbUnZ_entry() //  [R1]
         { []
         }
     {offset
       cbV5f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbV5g; else goto cbV5h;
       cbV5g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbV5h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = Control.Applicative.$fReadZipList4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUnZ_info" {
     sat_sbUnZ_info:
         const sat_sbUnZ_entry;
         const 1;
         const 16;
 },
 sat_sbUo0_entry() //  [R1]
         { []
         }
     {offset
       cbV5i: // global
           _sbUo0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbV5j; else goto cbV5k;
       cbV5k: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbV5m; else goto cbV5l;
       cbV5m: // global
           HpAlloc = 24;
           goto cbV5j;
       cbV5j: // global
           R1 = _sbUo0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbV5l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUo0::P64;
           _sbUnW::P64 = P64[_sbUo0::P64 + 16];
           _sbUnY::P64 = P64[_sbUo0::P64 + 24];
           I64[Hp - 16] = sat_sbUnZ_info;
           P64[Hp] = _sbUnY::P64;
           R2 = Hp - 16;
           R1 = _sbUnW::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUo0_info" {
     sat_sbUo0_info:
         const sat_sbUo0_entry;
         const 2;
         const 18;
 },
 sat_sbUo1_entry() //  [R1]
         { []
         }
     {offset
       cbV5n: // global
           _sbUo1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbV5o; else goto cbV5p;
       cbV5p: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbV5r; else goto cbV5q;
       cbV5r: // global
           HpAlloc = 32;
           goto cbV5o;
       cbV5o: // global
           R1 = _sbUo1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbV5q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUo1::P64;
           _sbUnW::P64 = P64[_sbUo1::P64 + 16];
           _sbUnY::P64 = P64[_sbUo1::P64 + 24];
           I64[Hp - 24] = sat_sbUo0_info;
           P64[Hp - 8] = _sbUnW::P64;
           P64[Hp] = _sbUnY::P64;
           R3 = Hp - 24;
           R2 = Control.Applicative.$fShowZipList2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUo1_info" {
     sat_sbUo1_info:
         const sat_sbUo1_entry;
         const 2;
         const 18;
 },
 sat_sbUo2_entry() //  [R1, R2]
         { []
         }
     {offset
       cbV5s: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbV5w; else goto cbV5v;
       cbV5w: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbV5v: // global
           _sbUnW::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sbUo1_info;
           P64[Hp - 8] = _sbUnW::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = Control.Applicative.$fShowZipList3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUo2_info" {
     sat_sbUo2_info:
         const sat_sbUo2_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbUo5_entry() //  [R1]
         { []
         }
     {offset
       cbV5U: // global
           _sbUo5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbV5V; else goto cbV5W;
       cbV5W: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbV5Y; else goto cbV5X;
       cbV5Y: // global
           HpAlloc = 24;
           goto cbV5V;
       cbV5V: // global
           R1 = _sbUo5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbV5X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUo5::P64;
           _sbUo3::P64 = P64[_sbUo5::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sbUo3::P64;
           R3 = Hp - 14;
           R2 = Control.Applicative.$fReadZipList4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUo5_info" {
     sat_sbUo5_info:
         const sat_sbUo5_entry;
         const 1;
         const 16;
 },
 sat_sbUo6_entry() //  [R1]
         { []
         }
     {offset
       cbV5Z: // global
           _sbUo6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbV60; else goto cbV61;
       cbV61: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbV63; else goto cbV62;
       cbV63: // global
           HpAlloc = 24;
           goto cbV60;
       cbV60: // global
           R1 = _sbUo6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbV62: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUo6::P64;
           _sbUnW::P64 = P64[_sbUo6::P64 + 16];
           _sbUo3::P64 = P64[_sbUo6::P64 + 24];
           I64[Hp - 16] = sat_sbUo5_info;
           P64[Hp] = _sbUo3::P64;
           R2 = Hp - 16;
           R1 = _sbUnW::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUo6_info" {
     sat_sbUo6_info:
         const sat_sbUo6_entry;
         const 2;
         const 18;
 },
 sat_sbUo7_entry() //  [R1]
         { []
         }
     {offset
       cbV64: // global
           _sbUo7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbV65; else goto cbV66;
       cbV66: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbV68; else goto cbV67;
       cbV68: // global
           HpAlloc = 32;
           goto cbV65;
       cbV65: // global
           R1 = _sbUo7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbV67: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUo7::P64;
           _sbUnW::P64 = P64[_sbUo7::P64 + 16];
           _sbUo3::P64 = P64[_sbUo7::P64 + 24];
           I64[Hp - 24] = sat_sbUo6_info;
           P64[Hp - 8] = _sbUnW::P64;
           P64[Hp] = _sbUo3::P64;
           R3 = Hp - 24;
           R2 = Control.Applicative.$fShowZipList2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUo7_info" {
     sat_sbUo7_info:
         const sat_sbUo7_entry;
         const 2;
         const 18;
 },
 sat_sbUo8_entry() //  [R1]
         { []
         }
     {offset
       cbV69: // global
           _sbUo8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbV6a; else goto cbV6b;
       cbV6b: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbV6d; else goto cbV6c;
       cbV6d: // global
           HpAlloc = 32;
           goto cbV6a;
       cbV6a: // global
           R1 = _sbUo8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbV6c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUo8::P64;
           _sbUnW::P64 = P64[_sbUo8::P64 + 16];
           _sbUo3::P64 = P64[_sbUo8::P64 + 24];
           I64[Hp - 24] = sat_sbUo7_info;
           P64[Hp - 8] = _sbUnW::P64;
           P64[Hp] = _sbUo3::P64;
           R3 = Hp - 24;
           R2 = Control.Applicative.$fShowZipList3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUo8_info" {
     sat_sbUo8_info:
         const sat_sbUo8_entry;
         const 2;
         const 18;
 },
 sat_sbUo9_entry() //  [R1, R2]
         { []
         }
     {offset
       cbV6f: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbV6j; else goto cbV6i;
       cbV6j: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbV6i: // global
           _sbUnW::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_sbUo8_info;
           P64[Hp - 32] = _sbUnW::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUo9_info" {
     sat_sbUo9_info:
         const sat_sbUo9_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Control.Applicative.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbV6n: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbV6r; else goto cbV6q;
       cbV6r: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbV6q: // global
           I64[Hp - 40] = f_sbUnW_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R4;
           _cbV4O::P64 = Hp - 40;
           if (%MO_S_Lt_W64(R3, 11)) goto cbV6l; else goto cbV6m;
       cbV6l: // global
           I64[Hp - 8] = sat_sbUo2_info;
           P64[Hp] = _cbV4O::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbV6m: // global
           I64[Hp - 8] = sat_sbUo9_info;
           P64[Hp] = _cbV4O::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$w$cshowsPrec_info" {
     Control.Applicative.$w$cshowsPrec_info:
         const Control.Applicative.$w$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901909;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.883819001 UTC

[section ""data" . Control.Applicative.$fShowZipList_$cshowsPrec_closure" {
     Control.Applicative.$fShowZipList_$cshowsPrec_closure:
         const Control.Applicative.$fShowZipList_$cshowsPrec_info;
 },
 Control.Applicative.$fShowZipList_$cshowsPrec_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cbV7H: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbV7I; else goto cbV7J;
       cbV7I: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fShowZipList_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbV7J: // global
           I64[Sp - 24] = block_cbV7E_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubV7N; else goto cbV7F;
       ubV7N: // global
           call _cbV7E(R1) args: 0, res: 0, upd: 0;
       cbV7F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fShowZipList_$cshowsPrec_info" {
     Control.Applicative.$fShowZipList_$cshowsPrec_info:
         const Control.Applicative.$fShowZipList_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cbV7E() //  [R1]
         { []
         }
     {offset
       cbV7E: // global
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Control.Applicative.$w$cshowsPrec_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbV7E_info" {
     block_cbV7E_info:
         const _cbV7E;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.889940771 UTC

[section ""data" . Control.Applicative.$fShowZipList_$cshow_closure" {
     Control.Applicative.$fShowZipList_$cshow_closure:
         const Control.Applicative.$fShowZipList_$cshow_info;
         const 0;
 },
 sat_sbUoh_entry() //  [R1]
         { []
         }
     {offset
       cbV8a: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbV8b; else goto cbV8c;
       cbV8b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbV8c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = Control.Applicative.$fReadZipList3_closure;
           Sp = Sp - 40;
           call GHC.Show.showList_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUoh_info" {
     sat_sbUoh_info:
         const sat_sbUoh_entry;
         const 2;
         const 4294967314;
         const SbUXm_srt+104;
 },
 sat_sbUoi_entry() //  [R1]
         { []
         }
     {offset
       cbV8d: // global
           _sbUoi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbV8e; else goto cbV8f;
       cbV8f: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbV8h; else goto cbV8g;
       cbV8h: // global
           HpAlloc = 32;
           goto cbV8e;
       cbV8e: // global
           R1 = _sbUoi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbV8g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbUoi::P64;
           _sbUof::P64 = P64[_sbUoi::P64 + 16];
           _sbUog::P64 = P64[_sbUoi::P64 + 24];
           I64[Hp - 24] = sat_sbUoh_info;
           P64[Hp - 8] = _sbUof::P64;
           P64[Hp] = _sbUog::P64;
           R3 = Hp - 24;
           R2 = Control.Applicative.$fShowZipList2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUoi_info" {
     sat_sbUoi_info:
         const sat_sbUoi_entry;
         const 2;
         const 4294967314;
         const SbUXm_srt+104;
 },
 Control.Applicative.$fShowZipList_$cshow_entry() //  [R2, R3]
         { []
         }
     {offset
       cbV8i: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbV8m; else goto cbV8l;
       cbV8m: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fShowZipList_$cshow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbV8l: // global
           I64[Hp - 24] = sat_sbUoi_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = Control.Applicative.$fShowZipList3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fShowZipList_$cshow_info" {
     Control.Applicative.$fShowZipList_$cshow_info:
         const Control.Applicative.$fShowZipList_$cshow_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SbUXm_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.896976078 UTC

[section ""data" . Control.Applicative.$fShowZipList1_closure" {
     Control.Applicative.$fShowZipList1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.899546563 UTC

[section ""data" . Control.Applicative.$fShowZipList_$cshowList_closure" {
     Control.Applicative.$fShowZipList_$cshowList_closure:
         const Control.Applicative.$fShowZipList_$cshowList_info;
 },
 sat_sbUon_entry() //  [R1, R2]
         { []
         }
     {offset
       cbV8Q: // global
           R4 = R2;
           R3 = 0;
           R2 = P64[R1 + 7];
           call Control.Applicative.$w$cshowsPrec_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUon_info" {
     sat_sbUon_info:
         const sat_sbUon_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Control.Applicative.$fShowZipList_$cshowList_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       cbV8T: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbV8X; else goto cbV8W;
       cbV8X: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Applicative.$fShowZipList_$cshowList_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbV8W: // global
           I64[Hp - 8] = sat_sbUon_info;
           P64[Hp] = R2;
           R4 = R4;
           R3 = R3;
           R2 = Hp - 7;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fShowZipList_$cshowList_info" {
     Control.Applicative.$fShowZipList_$cshowList_info:
         const Control.Applicative.$fShowZipList_$cshowList_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.906332919 UTC

[section ""data" . Control.Applicative.$fShowZipList_closure" {
     Control.Applicative.$fShowZipList_closure:
         const Control.Applicative.$fShowZipList_info;
         const 0;
 },
 sat_sbUor_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbV9f: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fShowZipList_$cshowList_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUor_info" {
     sat_sbUor_info:
         const sat_sbUor_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 sat_sbUoq_entry() //  [R1, R2]
         { []
         }
     {offset
       cbV9n: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Control.Applicative.$fShowZipList_$cshow_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUoq_info" {
     sat_sbUoq_info:
         const sat_sbUoq_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SbUXm_srt+112;
 },
 sat_sbUop_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cbV9v: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Control.Applicative.$fShowZipList_$cshowsPrec_entry(R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbUop_info" {
     sat_sbUop_info:
         const sat_sbUop_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 Control.Applicative.$fShowZipList_entry() //  [R2]
         { []
         }
     {offset
       cbV9z: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbV9D; else goto cbV9C;
       cbV9D: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = Control.Applicative.$fShowZipList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbV9C: // global
           I64[Hp - 72] = sat_sbUor_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_sbUoq_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sbUop_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 38;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 70;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fShowZipList_info" {
     Control.Applicative.$fShowZipList_info:
         const Control.Applicative.$fShowZipList_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbUXm_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.914047214 UTC

[section ""data" . Control.Applicative.$fGeneric1WrappedArrow1_closure" {
     Control.Applicative.$fGeneric1WrappedArrow1_closure:
         const Control.Applicative.$fGeneric1WrappedArrow1_info;
 },
 Control.Applicative.$fGeneric1WrappedArrow1_entry() //  [R2]
         { []
         }
     {offset
       cbVa3: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGeneric1WrappedArrow1_info" {
     Control.Applicative.$fGeneric1WrappedArrow1_info:
         const Control.Applicative.$fGeneric1WrappedArrow1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.917225346 UTC

[section ""data" . Control.Applicative.$fGeneric1WrappedArrow2_closure" {
     Control.Applicative.$fGeneric1WrappedArrow2_closure:
         const Control.Applicative.$fGeneric1WrappedArrow2_info;
 },
 Control.Applicative.$fGeneric1WrappedArrow2_entry() //  [R2]
         { []
         }
     {offset
       cbVae: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGeneric1WrappedArrow2_info" {
     Control.Applicative.$fGeneric1WrappedArrow2_info:
         const Control.Applicative.$fGeneric1WrappedArrow2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.920232357 UTC

[section ""data" . Control.Applicative.$fGeneric1WrappedArrow_closure" {
     Control.Applicative.$fGeneric1WrappedArrow_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Control.Applicative.$fGeneric1WrappedArrow2_closure+1;
         const Control.Applicative.$fGeneric1WrappedArrow1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.922524852 UTC

[section ""data" . Control.Applicative.$fGenericWrappedArrow1_closure" {
     Control.Applicative.$fGenericWrappedArrow1_closure:
         const Control.Applicative.$fGenericWrappedArrow1_info;
 },
 Control.Applicative.$fGenericWrappedArrow1_entry() //  [R2]
         { []
         }
     {offset
       cbVaq: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGenericWrappedArrow1_info" {
     Control.Applicative.$fGenericWrappedArrow1_info:
         const Control.Applicative.$fGenericWrappedArrow1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.925690961 UTC

[section ""data" . Control.Applicative.$fGenericWrappedArrow2_closure" {
     Control.Applicative.$fGenericWrappedArrow2_closure:
         const Control.Applicative.$fGenericWrappedArrow2_info;
 },
 Control.Applicative.$fGenericWrappedArrow2_entry() //  [R2]
         { []
         }
     {offset
       cbVaB: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGenericWrappedArrow2_info" {
     Control.Applicative.$fGenericWrappedArrow2_info:
         const Control.Applicative.$fGenericWrappedArrow2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.928768497 UTC

[section ""data" . Control.Applicative.$fGenericWrappedArrow_closure" {
     Control.Applicative.$fGenericWrappedArrow_closure:
         const GHC.Generics.C:Generic_con_info;
         const Control.Applicative.$fGenericWrappedArrow2_closure+1;
         const Control.Applicative.$fGenericWrappedArrow1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.932672014 UTC

[section ""data" . Control.Applicative.$fMonadWrappedMonad_closure" {
     Control.Applicative.$fMonadWrappedMonad_closure:
         const Control.Applicative.$fMonadWrappedMonad_info;
 },
 sat_sbUoB_entry() //  [R1]
         { []
         }
     {offset
       cbVaR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbVaS; else goto cbVaT;
       cbVaS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbVaT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.fail_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUoB_info" {
     sat_sbUoB_info:
         const sat_sbUoB_entry;
         const 1;
         const 16;
 },
 sat_sbUoA_entry() //  [R1]
         { []
         }
     {offset
       cbVaY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbVaZ; else goto cbVb0;
       cbVaZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbVb0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.return_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUoA_info" {
     sat_sbUoA_info:
         const sat_sbUoA_entry;
         const 1;
         const 16;
 },
 sat_sbUoz_entry() //  [R1]
         { []
         }
     {offset
       cbVb5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbVb6; else goto cbVb7;
       cbVb6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbVb7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.>>_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUoz_info" {
     sat_sbUoz_info:
         const sat_sbUoz_entry;
         const 1;
         const 16;
 },
 sat_sbUoy_entry() //  [R1]
         { []
         }
     {offset
       cbVbc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbVbd; else goto cbVbe;
       cbVbd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbVbe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.>>=_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUoy_info" {
     sat_sbUoy_info:
         const sat_sbUoy_entry;
         const 1;
         const 16;
 },
 sat_sbUox_entry() //  [R1]
         { []
         }
     {offset
       cbVbj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbVbk; else goto cbVbl;
       cbVbk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbVbl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Applicative.$fApplicativeWrappedMonad_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUox_info" {
     sat_sbUox_info:
         const sat_sbUox_entry;
         const 1;
         const 16;
 },
 Control.Applicative.$fMonadWrappedMonad_entry() //  [R2]
         { []
         }
     {offset
       cbVbn: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cbVbr; else goto cbVbq;
       cbVbr: // global
           HpAlloc = 168;
           R2 = R2;
           R1 = Control.Applicative.$fMonadWrappedMonad_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbVbq: // global
           I64[Hp - 160] = sat_sbUoB_info;
           P64[Hp - 144] = R2;
           I64[Hp - 136] = sat_sbUoA_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_sbUoz_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_sbUoy_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = sat_sbUox_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = GHC.Base.C:Monad_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           P64[Hp - 16] = Hp - 112;
           P64[Hp - 8] = Hp - 136;
           P64[Hp] = Hp - 160;
           R1 = Hp - 39;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fMonadWrappedMonad_info" {
     Control.Applicative.$fMonadWrappedMonad_info:
         const Control.Applicative.$fMonadWrappedMonad_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.945393301 UTC

[section ""data" . Control.Applicative.$fGeneric1WrappedMonad1_closure" {
     Control.Applicative.$fGeneric1WrappedMonad1_closure:
         const Control.Applicative.$fGeneric1WrappedMonad1_info;
 },
 Control.Applicative.$fGeneric1WrappedMonad1_entry() //  [R2]
         { []
         }
     {offset
       cbVcb: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGeneric1WrappedMonad1_info" {
     Control.Applicative.$fGeneric1WrappedMonad1_info:
         const Control.Applicative.$fGeneric1WrappedMonad1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.948465497 UTC

[section ""data" . Control.Applicative.$fGeneric1WrappedMonad2_closure" {
     Control.Applicative.$fGeneric1WrappedMonad2_closure:
         const Control.Applicative.$fGeneric1WrappedMonad2_info;
 },
 Control.Applicative.$fGeneric1WrappedMonad2_entry() //  [R2]
         { []
         }
     {offset
       cbVcm: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGeneric1WrappedMonad2_info" {
     Control.Applicative.$fGeneric1WrappedMonad2_info:
         const Control.Applicative.$fGeneric1WrappedMonad2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.951354735 UTC

[section ""data" . Control.Applicative.$fGeneric1WrappedMonad_closure" {
     Control.Applicative.$fGeneric1WrappedMonad_closure:
         const GHC.Generics.C:Generic1_con_info;
         const Control.Applicative.$fGeneric1WrappedMonad2_closure+1;
         const Control.Applicative.$fGeneric1WrappedMonad1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.953268941 UTC

[section ""data" . Control.Applicative.$fGenericWrappedMonad1_closure" {
     Control.Applicative.$fGenericWrappedMonad1_closure:
         const Control.Applicative.$fGenericWrappedMonad1_info;
 },
 Control.Applicative.$fGenericWrappedMonad1_entry() //  [R2]
         { []
         }
     {offset
       cbVcy: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGenericWrappedMonad1_info" {
     Control.Applicative.$fGenericWrappedMonad1_info:
         const Control.Applicative.$fGenericWrappedMonad1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.956397279 UTC

[section ""data" . Control.Applicative.$fGenericWrappedMonad2_closure" {
     Control.Applicative.$fGenericWrappedMonad2_closure:
         const Control.Applicative.$fGenericWrappedMonad2_info;
 },
 Control.Applicative.$fGenericWrappedMonad2_entry() //  [R2]
         { []
         }
     {offset
       cbVcJ: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.$fGenericWrappedMonad2_info" {
     Control.Applicative.$fGenericWrappedMonad2_info:
         const Control.Applicative.$fGenericWrappedMonad2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.959801498 UTC

[section ""data" . Control.Applicative.$fGenericWrappedMonad_closure" {
     Control.Applicative.$fGenericWrappedMonad_closure:
         const GHC.Generics.C:Generic_con_info;
         const Control.Applicative.$fGenericWrappedMonad2_closure+1;
         const Control.Applicative.$fGenericWrappedMonad1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.961746821 UTC

[section ""data" . Control.Applicative.unwrapMonad_closure" {
     Control.Applicative.unwrapMonad_closure:
         const Control.Applicative.unwrapMonad_info;
 },
 Control.Applicative.unwrapMonad_entry() //  [R2]
         { []
         }
     {offset
       cbVcV: // global
           R2 = R2;
           call Control.Applicative.$fGeneric1WrappedMonad2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.unwrapMonad_info" {
     Control.Applicative.unwrapMonad_info:
         const Control.Applicative.unwrapMonad_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.965403797 UTC

[section ""data" . Control.Applicative.unwrapArrow_closure" {
     Control.Applicative.unwrapArrow_closure:
         const Control.Applicative.unwrapArrow_info;
 },
 Control.Applicative.unwrapArrow_entry() //  [R2]
         { []
         }
     {offset
       cbVd6: // global
           R2 = R2;
           call Control.Applicative.$fGeneric1WrappedArrow2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.unwrapArrow_info" {
     Control.Applicative.unwrapArrow_info:
         const Control.Applicative.unwrapArrow_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.968438815 UTC

[section ""data" . Control.Applicative.getZipList_closure" {
     Control.Applicative.getZipList_closure:
         const Control.Applicative.getZipList_info;
 },
 Control.Applicative.getZipList_entry() //  [R2]
         { []
         }
     {offset
       cbVdh: // global
           R2 = R2;
           call Control.Applicative.$fGeneric1ZipList2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.getZipList_info" {
     Control.Applicative.getZipList_info:
         const Control.Applicative.getZipList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.973888481 UTC

[section ""data" . Control.Applicative.optional_closure" {
     Control.Applicative.optional_closure:
         const Control.Applicative.optional_info;
 },
 $dApplicative_sbUoI_entry() //  [R1]
         { []
         }
     {offset
       cbVdw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbVdx; else goto cbVdy;
       cbVdx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbVdy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Alternative_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dApplicative_sbUoI_info" {
     $dApplicative_sbUoI_info:
         const $dApplicative_sbUoI_entry;
         const 1;
         const 16;
 },
 sat_sbUoL_entry() //  [R1]
         { []
         }
     {offset
       cbVdD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbVdE; else goto cbVdF;
       cbVdE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbVdF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUoL_info" {
     sat_sbUoL_info:
         const sat_sbUoL_entry;
         const 1;
         const 16;
 },
 sat_sbUoK_entry() //  [R1]
         { []
         }
     {offset
       cbVdM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbVdN; else goto cbVdO;
       cbVdN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbVdO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbVdK_info;
           R2 = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Base.$p1Applicative_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbUoK_info" {
     sat_sbUoK_info:
         const sat_sbUoK_entry;
         const 2;
         const 18;
 },
 _cbVdK() //  [R1]
         { []
         }
     {offset
       cbVdK: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = GHC.Base.Just_closure+1;
           Sp = Sp - 8;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbVdK_info" {
     block_cbVdK_info:
         const _cbVdK;
         const 1;
         const 30;
 },
 Control.Applicative.optional_entry() //  [R2, R3]
         { []
         }
     {offset
       cbVdS: // global
           _sbUoH::P64 = R3;
           _sbUoG::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cbVdT; else goto cbVdU;
       cbVdU: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbVdW; else goto cbVdV;
       cbVdW: // global
           HpAlloc = 80;
           goto cbVdT;
       cbVdT: // global
           R3 = _sbUoH::P64;
           R2 = _sbUoG::P64;
           R1 = Control.Applicative.optional_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbVdV: // global
           I64[Hp - 72] = $dApplicative_sbUoI_info;
           P64[Hp - 56] = _sbUoG::P64;
           I64[Hp - 48] = sat_sbUoL_info;
           _cbVds::P64 = Hp - 72;
           P64[Hp - 32] = _cbVds::P64;
           I64[Hp - 24] = sat_sbUoK_info;
           P64[Hp - 8] = _sbUoH::P64;
           P64[Hp] = _cbVds::P64;
           R2 = _sbUoG::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 48;
           Sp = Sp - 24;
           call GHC.Base.<|>_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Applicative.optional_info" {
     Control.Applicative.optional_info:
         const Control.Applicative.optional_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.983681084 UTC

[section ""cstring" . Control.Applicative.$trModule4_bytes" {
     Control.Applicative.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.985326982 UTC

[section ""data" . Control.Applicative.$trModule3_closure" {
     Control.Applicative.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Applicative.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.986945652 UTC

[section ""cstring" . Control.Applicative.$trModule2_bytes" {
     Control.Applicative.$trModule2_bytes:
         I8[] [67,111,110,116,114,111,108,46,65,112,112,108,105,99,97,116,105,118,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.988625841 UTC

[section ""data" . Control.Applicative.$trModule1_closure" {
     Control.Applicative.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Applicative.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.990311166 UTC

[section ""data" . Control.Applicative.$trModule_closure" {
     Control.Applicative.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Control.Applicative.$trModule3_closure+1;
         const Control.Applicative.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.992019448 UTC

[section ""data" . Control.Applicative.$tcWrappedMonad1_closure" {
     Control.Applicative.$tcWrappedMonad1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*Arr*_closure;
         const GHC.Types.krep$*Arr*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.994053318 UTC

[section ""data" . Control.Applicative.$tcWrappedArrow1_closure" {
     Control.Applicative.$tcWrappedArrow1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*->*->*_closure;
         const GHC.Types.krep$*->*->*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.996215507 UTC

[section ""data" . $krep_rbSvt_closure" {
     $krep_rbSvt_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.997870119 UTC

[section ""data" . $krep1_rbSvu_closure" {
     $krep1_rbSvu_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:48.999416372 UTC

[section ""data" . $krep2_rbSvv_closure" {
     $krep2_rbSvv_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.000920113 UTC

[section ""data" . $krep3_rbSvw_closure" {
     $krep3_rbSvw_closure:
         const :_con_info;
         const $krep2_rbSvv_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.002470156 UTC

[section ""data" . $krep4_rbSvx_closure" {
     $krep4_rbSvx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep3_rbSvw_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.004090433 UTC

[section ""data" . $krep5_rbSvy_closure" {
     $krep5_rbSvy_closure:
         const GHC.Types.KindRepApp_con_info;
         const $krep2_rbSvv_closure+2;
         const $krep1_rbSvu_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.00570627 UTC

[section ""data" . $krep6_rbSvz_closure" {
     $krep6_rbSvz_closure:
         const GHC.Types.KindRepApp_con_info;
         const $krep5_rbSvy_closure+3;
         const $krep_rbSvt_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.007236121 UTC

[section ""cstring" . Control.Applicative.$tcWrappedMonad3_bytes" {
     Control.Applicative.$tcWrappedMonad3_bytes:
         I8[] [87,114,97,112,112,101,100,77,111,110,97,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.008793899 UTC

[section ""data" . Control.Applicative.$tcWrappedMonad2_closure" {
     Control.Applicative.$tcWrappedMonad2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Applicative.$tcWrappedMonad3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.010502488 UTC

[section ""data" . Control.Applicative.$tcWrappedMonad_closure" {
     Control.Applicative.$tcWrappedMonad_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Applicative.$trModule_closure+1;
         const Control.Applicative.$tcWrappedMonad2_closure+1;
         const Control.Applicative.$tcWrappedMonad1_closure+4;
         const 12971590878300233698;
         const 12447260690856494251;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.012241787 UTC

[section ""data" . $krep7_rbSvA_closure" {
     $krep7_rbSvA_closure:
         const :_con_info;
         const $krep1_rbSvu_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.014566888 UTC

[section ""data" . $krep8_rbSvB_closure" {
     $krep8_rbSvB_closure:
         const :_con_info;
         const $krep2_rbSvv_closure+2;
         const $krep7_rbSvA_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.016139027 UTC

[section ""data" . $krep9_rbSvC_closure" {
     $krep9_rbSvC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Applicative.$tcWrappedMonad_closure+1;
         const $krep8_rbSvB_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.017819666 UTC

[section ""data" . Control.Applicative.$tc'WrapMonad1_closure" {
     Control.Applicative.$tc'WrapMonad1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rbSvy_closure+3;
         const $krep9_rbSvC_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.019979137 UTC

[section ""cstring" . Control.Applicative.$tc'WrapMonad3_bytes" {
     Control.Applicative.$tc'WrapMonad3_bytes:
         I8[] [39,87,114,97,112,77,111,110,97,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.021619185 UTC

[section ""data" . Control.Applicative.$tc'WrapMonad2_closure" {
     Control.Applicative.$tc'WrapMonad2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Applicative.$tc'WrapMonad3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.02326306 UTC

[section ""data" . Control.Applicative.$tc'WrapMonad_closure" {
     Control.Applicative.$tc'WrapMonad_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Applicative.$trModule_closure+1;
         const Control.Applicative.$tc'WrapMonad2_closure+1;
         const Control.Applicative.$tc'WrapMonad1_closure+4;
         const 10363415327661881286;
         const 6845751270384138997;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.024893041 UTC

[section ""cstring" . Control.Applicative.$tcWrappedArrow3_bytes" {
     Control.Applicative.$tcWrappedArrow3_bytes:
         I8[] [87,114,97,112,112,101,100,65,114,114,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.026905863 UTC

[section ""data" . Control.Applicative.$tcWrappedArrow2_closure" {
     Control.Applicative.$tcWrappedArrow2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Applicative.$tcWrappedArrow3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.028519859 UTC

[section ""data" . Control.Applicative.$tcWrappedArrow_closure" {
     Control.Applicative.$tcWrappedArrow_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Applicative.$trModule_closure+1;
         const Control.Applicative.$tcWrappedArrow2_closure+1;
         const Control.Applicative.$tcWrappedArrow1_closure+4;
         const 17995829375472255965;
         const 6668242383287740398;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.030232766 UTC

[section ""data" . $krep10_rbSvD_closure" {
     $krep10_rbSvD_closure:
         const :_con_info;
         const $krep_rbSvt_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.03181101 UTC

[section ""data" . $krep11_rbSvE_closure" {
     $krep11_rbSvE_closure:
         const :_con_info;
         const $krep1_rbSvu_closure+2;
         const $krep10_rbSvD_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.033456805 UTC

[section ""data" . $krep12_rbSvF_closure" {
     $krep12_rbSvF_closure:
         const :_con_info;
         const $krep2_rbSvv_closure+2;
         const $krep11_rbSvE_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.035097809 UTC

[section ""data" . $krep13_rbSvG_closure" {
     $krep13_rbSvG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Applicative.$tcWrappedArrow_closure+1;
         const $krep12_rbSvF_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.036704573 UTC

[section ""data" . Control.Applicative.$tc'WrapArrow1_closure" {
     Control.Applicative.$tc'WrapArrow1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_rbSvz_closure+3;
         const $krep13_rbSvG_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.038717876 UTC

[section ""cstring" . Control.Applicative.$tc'WrapArrow3_bytes" {
     Control.Applicative.$tc'WrapArrow3_bytes:
         I8[] [39,87,114,97,112,65,114,114,111,119]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.040314442 UTC

[section ""data" . Control.Applicative.$tc'WrapArrow2_closure" {
     Control.Applicative.$tc'WrapArrow2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Applicative.$tc'WrapArrow3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.042018203 UTC

[section ""data" . Control.Applicative.$tc'WrapArrow_closure" {
     Control.Applicative.$tc'WrapArrow_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Applicative.$trModule_closure+1;
         const Control.Applicative.$tc'WrapArrow2_closure+1;
         const Control.Applicative.$tc'WrapArrow1_closure+4;
         const 4796259816778499037;
         const 13482613273239263357;
         const 3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.044293505 UTC

[section ""data" . Control.Applicative.$tcZipList1_closure" {
     Control.Applicative.$tcZipList1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Applicative.$fReadZipList11_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.045939269 UTC

[section ""data" . Control.Applicative.$tcZipList_closure" {
     Control.Applicative.$tcZipList_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Applicative.$trModule_closure+1;
         const Control.Applicative.$tcZipList1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 11311650752326360483;
         const 5534599578149162946;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.047661302 UTC

[section ""data" . $krep14_rbSvH_closure" {
     $krep14_rbSvH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Applicative.$tcZipList_closure+1;
         const $krep3_rbSvw_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.049739764 UTC

[section ""data" . Control.Applicative.$tc'ZipList1_closure" {
     Control.Applicative.$tc'ZipList1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rbSvx_closure+1;
         const $krep14_rbSvH_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.051328851 UTC

[section ""cstring" . Control.Applicative.$tc'ZipList3_bytes" {
     Control.Applicative.$tc'ZipList3_bytes:
         I8[] [39,90,105,112,76,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.052902919 UTC

[section ""data" . Control.Applicative.$tc'ZipList2_closure" {
     Control.Applicative.$tc'ZipList2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Applicative.$tc'ZipList3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.054590162 UTC

[section ""data" . Control.Applicative.$tc'ZipList_closure" {
     Control.Applicative.$tc'ZipList_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Applicative.$trModule_closure+1;
         const Control.Applicative.$tc'ZipList2_closure+1;
         const Control.Applicative.$tc'ZipList1_closure+4;
         const 15353069281551614305;
         const 7665927634319452478;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:49.056356629 UTC

[section ""relreadonly" . SbUXm_srt" {
     SbUXm_srt:
         const Text.Read.Lex.$wexpect_closure;
         const Control.Applicative.$fReadZipList2_closure;
         const GHC.Read.readField_closure;
         const Control.Applicative.$fReadZipList6_closure;
         const Control.Applicative.$fReadZipList_lexeme_closure;
         const Control.Applicative.$fReadZipList_lexeme1_closure;
         const GHC.Read.list3_closure;
         const Control.Applicative.$fReadZipList1_closure;
         const Control.Applicative.$fReadZipList_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Control.Applicative.$fReadZipList_$creadListPrec_closure;
         const Control.Applicative.$fReadZipList_$creadList_closure;
         const Control.Applicative.$fReadZipList_closure;
         const Control.Applicative.$fReadZipList3_closure;
         const Control.Applicative.$fShowZipList_$cshow_closure;
         const Control.Applicative.$fShowZipList_closure;
 }]

