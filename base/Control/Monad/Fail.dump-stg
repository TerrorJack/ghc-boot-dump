
==================== Pre unarise: ====================
2018-03-16 15:56:30.129105487 UTC

Control.Monad.Fail.$p1MonadFail
  :: forall (m :: * -> *).
     Control.Monad.Fail.MonadFail m =>
     GHC.Base.Monad m
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_s1J05]
        case v_s1J05 of {
          Control.Monad.Fail.C:MonadFail v_s1J07 [Occ=Once] _ [Occ=Dead] ->
              v_s1J07;
        };

Control.Monad.Fail.fail
  :: forall (m :: * -> *).
     Control.Monad.Fail.MonadFail m =>
     forall a. GHC.Base.String -> m a
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_s1J09]
        case v_s1J09 of {
          Control.Monad.Fail.C:MonadFail _ [Occ=Dead] v_s1J0c [Occ=Once] ->
              v_s1J0c;
        };

Control.Monad.Fail.$fMonadFailMaybe_$cfail
  :: forall a. GHC.Base.String -> GHC.Base.Maybe a
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s1J0d] GHC.Base.Nothing [];

Control.Monad.Fail.$fMonadFailMaybe [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Monad.Fail.MonadFail GHC.Base.Maybe
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Monad.Fail.C:MonadFail! [GHC.Base.$fMonadMaybe
                                                   Control.Monad.Fail.$fMonadFailMaybe_$cfail];

Control.Monad.Fail.$fMonadFail[]_$cfail [InlPrag=INLINE (sat-args=1)]
  :: forall a. GHC.Base.String -> [a]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s1J0e] [] [];

Control.Monad.Fail.$fMonadFail[] [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Monad.Fail.MonadFail []
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Monad.Fail.C:MonadFail! [GHC.Base.$fMonad[]
                                                   Control.Monad.Fail.$fMonadFail[]_$cfail];

Control.Monad.Fail.$fMonadFailIO [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Monad.Fail.MonadFail GHC.Types.IO
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Control.Monad.Fail.C:MonadFail! [GHC.Base.$fMonadIO
                                                   GHC.IO.failIO];

Control.Monad.Fail.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Monad.Fail.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.Fail.$trModule4];

Control.Monad.Fail.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Monad.Fail"#;

Control.Monad.Fail.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.Fail.$trModule2];

Control.Monad.Fail.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Monad.Fail.$trModule3
                                     Control.Monad.Fail.$trModule1];

$krep_r1J03 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

Control.Monad.Fail.$tcMonadFail1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*Arr*
                                         $krep_r1J03];

Control.Monad.Fail.$tcMonadFail3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MonadFail"#;

Control.Monad.Fail.$tcMonadFail2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.Fail.$tcMonadFail3];

Control.Monad.Fail.$tcMonadFail :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13075553528933503976##
                                    10446785369700436050##
                                    Control.Monad.Fail.$trModule
                                    Control.Monad.Fail.$tcMonadFail2
                                    0#
                                    Control.Monad.Fail.$tcMonadFail1];

Control.Monad.Fail.C:MonadFail
  :: forall (m :: * -> *).
     GHC.Base.Monad m =>
     (forall a. GHC.Base.String -> m a)
     -> Control.Monad.Fail.MonadFail m
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Monad.Fail.C:MonadFail [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 15:56:30.160485662 UTC

Control.Monad.Fail.$p1MonadFail
  :: forall (m :: * -> *).
     Control.Monad.Fail.MonadFail m =>
     GHC.Base.Monad m
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_s1J05]
        case v_s1J05 of {
          Control.Monad.Fail.C:MonadFail v_s1J07 [Occ=Once] _ [Occ=Dead] ->
              v_s1J07;
        };

Control.Monad.Fail.fail
  :: forall (m :: * -> *).
     Control.Monad.Fail.MonadFail m =>
     forall a. GHC.Base.String -> m a
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_s1J09]
        case v_s1J09 of {
          Control.Monad.Fail.C:MonadFail _ [Occ=Dead] v_s1J0c [Occ=Once] ->
              v_s1J0c;
        };

Control.Monad.Fail.$fMonadFailMaybe_$cfail
  :: forall a. GHC.Base.String -> GHC.Base.Maybe a
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s1J0d] GHC.Base.Nothing [];

Control.Monad.Fail.$fMonadFailMaybe [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Monad.Fail.MonadFail GHC.Base.Maybe
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Monad.Fail.C:MonadFail! [GHC.Base.$fMonadMaybe
                                                   Control.Monad.Fail.$fMonadFailMaybe_$cfail];

Control.Monad.Fail.$fMonadFail[]_$cfail [InlPrag=INLINE (sat-args=1)]
  :: forall a. GHC.Base.String -> [a]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s1J0e] [] [];

Control.Monad.Fail.$fMonadFail[] [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Monad.Fail.MonadFail []
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Monad.Fail.C:MonadFail! [GHC.Base.$fMonad[]
                                                   Control.Monad.Fail.$fMonadFail[]_$cfail];

Control.Monad.Fail.$fMonadFailIO [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Monad.Fail.MonadFail GHC.Types.IO
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Control.Monad.Fail.C:MonadFail! [GHC.Base.$fMonadIO
                                                   GHC.IO.failIO];

Control.Monad.Fail.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Monad.Fail.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.Fail.$trModule4];

Control.Monad.Fail.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Monad.Fail"#;

Control.Monad.Fail.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.Fail.$trModule2];

Control.Monad.Fail.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Monad.Fail.$trModule3
                                     Control.Monad.Fail.$trModule1];

$krep_r1J03 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

Control.Monad.Fail.$tcMonadFail1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*Arr*
                                         $krep_r1J03];

Control.Monad.Fail.$tcMonadFail3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MonadFail"#;

Control.Monad.Fail.$tcMonadFail2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.Fail.$tcMonadFail3];

Control.Monad.Fail.$tcMonadFail :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13075553528933503976##
                                    10446785369700436050##
                                    Control.Monad.Fail.$trModule
                                    Control.Monad.Fail.$tcMonadFail2
                                    0#
                                    Control.Monad.Fail.$tcMonadFail1];

Control.Monad.Fail.C:MonadFail
  :: forall (m :: * -> *).
     GHC.Base.Monad m =>
     (forall a. GHC.Base.String -> m a)
     -> Control.Monad.Fail.MonadFail m
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Monad.Fail.C:MonadFail [eta_B2 eta_B1];


==================== Pre unarise: ====================
2018-03-16 15:56:30.288685191 UTC

Control.Monad.Fail.$p1MonadFail
  :: forall (m :: * -> *).
     Control.Monad.Fail.MonadFail m =>
     GHC.Base.Monad m
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_s1J3I]
        case v_s1J3I of {
          Control.Monad.Fail.C:MonadFail v_s1J3K [Occ=Once] _ [Occ=Dead] ->
              v_s1J3K;
        };

Control.Monad.Fail.fail
  :: forall (m :: * -> *).
     Control.Monad.Fail.MonadFail m =>
     forall a. GHC.Base.String -> m a
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_s1J3M]
        case v_s1J3M of {
          Control.Monad.Fail.C:MonadFail _ [Occ=Dead] v_s1J3P [Occ=Once] ->
              v_s1J3P;
        };

Control.Monad.Fail.$fMonadFailMaybe_$cfail
  :: forall a. GHC.Base.String -> GHC.Base.Maybe a
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s1J3Q] GHC.Base.Nothing [];

Control.Monad.Fail.$fMonadFailMaybe [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Monad.Fail.MonadFail GHC.Base.Maybe
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Monad.Fail.C:MonadFail! [GHC.Base.$fMonadMaybe
                                                   Control.Monad.Fail.$fMonadFailMaybe_$cfail];

Control.Monad.Fail.$fMonadFail[]_$cfail [InlPrag=INLINE (sat-args=1)]
  :: forall a. GHC.Base.String -> [a]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s1J3R] [] [];

Control.Monad.Fail.$fMonadFail[] [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Monad.Fail.MonadFail []
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Monad.Fail.C:MonadFail! [GHC.Base.$fMonad[]
                                                   Control.Monad.Fail.$fMonadFail[]_$cfail];

Control.Monad.Fail.$fMonadFailIO [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Monad.Fail.MonadFail GHC.Types.IO
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Control.Monad.Fail.C:MonadFail! [GHC.Base.$fMonadIO
                                                   GHC.IO.failIO];

Control.Monad.Fail.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Monad.Fail.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.Fail.$trModule4];

Control.Monad.Fail.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Monad.Fail"#;

Control.Monad.Fail.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.Fail.$trModule2];

Control.Monad.Fail.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Monad.Fail.$trModule3
                                     Control.Monad.Fail.$trModule1];

$krep_r1J03 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

Control.Monad.Fail.$tcMonadFail1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*Arr*
                                         $krep_r1J03];

Control.Monad.Fail.$tcMonadFail3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MonadFail"#;

Control.Monad.Fail.$tcMonadFail2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.Fail.$tcMonadFail3];

Control.Monad.Fail.$tcMonadFail :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13075553528933503976##
                                    10446785369700436050##
                                    Control.Monad.Fail.$trModule
                                    Control.Monad.Fail.$tcMonadFail2
                                    0#
                                    Control.Monad.Fail.$tcMonadFail1];

Control.Monad.Fail.C:MonadFail
  :: forall (m :: * -> *).
     GHC.Base.Monad m =>
     (forall a. GHC.Base.String -> m a)
     -> Control.Monad.Fail.MonadFail m
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Monad.Fail.C:MonadFail [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 15:56:30.290907841 UTC

Control.Monad.Fail.$p1MonadFail
  :: forall (m :: * -> *).
     Control.Monad.Fail.MonadFail m =>
     GHC.Base.Monad m
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_s1J3I]
        case v_s1J3I of {
          Control.Monad.Fail.C:MonadFail v_s1J3K [Occ=Once] _ [Occ=Dead] ->
              v_s1J3K;
        };

Control.Monad.Fail.fail
  :: forall (m :: * -> *).
     Control.Monad.Fail.MonadFail m =>
     forall a. GHC.Base.String -> m a
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_s1J3M]
        case v_s1J3M of {
          Control.Monad.Fail.C:MonadFail _ [Occ=Dead] v_s1J3P [Occ=Once] ->
              v_s1J3P;
        };

Control.Monad.Fail.$fMonadFailMaybe_$cfail
  :: forall a. GHC.Base.String -> GHC.Base.Maybe a
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s1J3Q] GHC.Base.Nothing [];

Control.Monad.Fail.$fMonadFailMaybe [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Monad.Fail.MonadFail GHC.Base.Maybe
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Monad.Fail.C:MonadFail! [GHC.Base.$fMonadMaybe
                                                   Control.Monad.Fail.$fMonadFailMaybe_$cfail];

Control.Monad.Fail.$fMonadFail[]_$cfail [InlPrag=INLINE (sat-args=1)]
  :: forall a. GHC.Base.String -> [a]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s1J3R] [] [];

Control.Monad.Fail.$fMonadFail[] [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Monad.Fail.MonadFail []
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Monad.Fail.C:MonadFail! [GHC.Base.$fMonad[]
                                                   Control.Monad.Fail.$fMonadFail[]_$cfail];

Control.Monad.Fail.$fMonadFailIO [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Monad.Fail.MonadFail GHC.Types.IO
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Control.Monad.Fail.C:MonadFail! [GHC.Base.$fMonadIO
                                                   GHC.IO.failIO];

Control.Monad.Fail.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Monad.Fail.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.Fail.$trModule4];

Control.Monad.Fail.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Monad.Fail"#;

Control.Monad.Fail.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.Fail.$trModule2];

Control.Monad.Fail.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Monad.Fail.$trModule3
                                     Control.Monad.Fail.$trModule1];

$krep_r1J03 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

Control.Monad.Fail.$tcMonadFail1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*Arr*
                                         $krep_r1J03];

Control.Monad.Fail.$tcMonadFail3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MonadFail"#;

Control.Monad.Fail.$tcMonadFail2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.Fail.$tcMonadFail3];

Control.Monad.Fail.$tcMonadFail :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13075553528933503976##
                                    10446785369700436050##
                                    Control.Monad.Fail.$trModule
                                    Control.Monad.Fail.$tcMonadFail2
                                    0#
                                    Control.Monad.Fail.$tcMonadFail1];

Control.Monad.Fail.C:MonadFail
  :: forall (m :: * -> *).
     GHC.Base.Monad m =>
     (forall a. GHC.Base.String -> m a)
     -> Control.Monad.Fail.MonadFail m
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Monad.Fail.C:MonadFail [eta_B2 eta_B1];

