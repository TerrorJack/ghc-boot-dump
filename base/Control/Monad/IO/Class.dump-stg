
==================== Pre unarise: ====================
2018-03-16 16:07:34.446543439 UTC

Control.Monad.IO.Class.$p1MonadIO
  :: forall (m :: * -> *).
     Control.Monad.IO.Class.MonadIO m =>
     GHC.Base.Monad m
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_scEVc]
        case v_scEVc of {
          Control.Monad.IO.Class.C:MonadIO v_scEVe [Occ=Once] _ [Occ=Dead] ->
              v_scEVe;
        };

Control.Monad.IO.Class.liftIO
  :: forall (m :: * -> *).
     Control.Monad.IO.Class.MonadIO m =>
     forall a. GHC.Types.IO a -> m a
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_scEVg]
        case v_scEVg of {
          Control.Monad.IO.Class.C:MonadIO _ [Occ=Dead] v_scEVj [Occ=Once] ->
              v_scEVj;
        };

Control.Monad.IO.Class.$fMonadIOIO [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Monad.IO.Class.MonadIO GHC.Types.IO
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Control.Monad.IO.Class.C:MonadIO! [GHC.Base.$fMonadIO
                                                     GHC.Base.id];

Control.Monad.IO.Class.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Monad.IO.Class.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.IO.Class.$trModule4];

Control.Monad.IO.Class.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Monad.IO.Class"#;

Control.Monad.IO.Class.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.IO.Class.$trModule2];

Control.Monad.IO.Class.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Monad.IO.Class.$trModule3
                                     Control.Monad.IO.Class.$trModule1];

$krep_rcEVa :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

Control.Monad.IO.Class.$tcMonadIO1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*Arr*
                                         $krep_rcEVa];

Control.Monad.IO.Class.$tcMonadIO3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MonadIO"#;

Control.Monad.IO.Class.$tcMonadIO2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.IO.Class.$tcMonadIO3];

Control.Monad.IO.Class.$tcMonadIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6022017498382306114##
                                    7075110953231061561##
                                    Control.Monad.IO.Class.$trModule
                                    Control.Monad.IO.Class.$tcMonadIO2
                                    0#
                                    Control.Monad.IO.Class.$tcMonadIO1];

Control.Monad.IO.Class.C:MonadIO
  :: forall (m :: * -> *).
     GHC.Base.Monad m =>
     (forall a. GHC.Types.IO a -> m a)
     -> Control.Monad.IO.Class.MonadIO m
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Monad.IO.Class.C:MonadIO [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:07:34.448245041 UTC

Control.Monad.IO.Class.$p1MonadIO
  :: forall (m :: * -> *).
     Control.Monad.IO.Class.MonadIO m =>
     GHC.Base.Monad m
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_scEVc]
        case v_scEVc of {
          Control.Monad.IO.Class.C:MonadIO v_scEVe [Occ=Once] _ [Occ=Dead] ->
              v_scEVe;
        };

Control.Monad.IO.Class.liftIO
  :: forall (m :: * -> *).
     Control.Monad.IO.Class.MonadIO m =>
     forall a. GHC.Types.IO a -> m a
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_scEVg]
        case v_scEVg of {
          Control.Monad.IO.Class.C:MonadIO _ [Occ=Dead] v_scEVj [Occ=Once] ->
              v_scEVj;
        };

Control.Monad.IO.Class.$fMonadIOIO [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Monad.IO.Class.MonadIO GHC.Types.IO
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Control.Monad.IO.Class.C:MonadIO! [GHC.Base.$fMonadIO
                                                     GHC.Base.id];

Control.Monad.IO.Class.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Monad.IO.Class.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.IO.Class.$trModule4];

Control.Monad.IO.Class.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Monad.IO.Class"#;

Control.Monad.IO.Class.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.IO.Class.$trModule2];

Control.Monad.IO.Class.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Monad.IO.Class.$trModule3
                                     Control.Monad.IO.Class.$trModule1];

$krep_rcEVa :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

Control.Monad.IO.Class.$tcMonadIO1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*Arr*
                                         $krep_rcEVa];

Control.Monad.IO.Class.$tcMonadIO3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MonadIO"#;

Control.Monad.IO.Class.$tcMonadIO2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.IO.Class.$tcMonadIO3];

Control.Monad.IO.Class.$tcMonadIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6022017498382306114##
                                    7075110953231061561##
                                    Control.Monad.IO.Class.$trModule
                                    Control.Monad.IO.Class.$tcMonadIO2
                                    0#
                                    Control.Monad.IO.Class.$tcMonadIO1];

Control.Monad.IO.Class.C:MonadIO
  :: forall (m :: * -> *).
     GHC.Base.Monad m =>
     (forall a. GHC.Types.IO a -> m a)
     -> Control.Monad.IO.Class.MonadIO m
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Monad.IO.Class.C:MonadIO [eta_B2 eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:07:34.548308668 UTC

Control.Monad.IO.Class.$p1MonadIO
  :: forall (m :: * -> *).
     Control.Monad.IO.Class.MonadIO m =>
     GHC.Base.Monad m
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_scEXV]
        case v_scEXV of {
          Control.Monad.IO.Class.C:MonadIO v_scEXX [Occ=Once] _ [Occ=Dead] ->
              v_scEXX;
        };

Control.Monad.IO.Class.liftIO
  :: forall (m :: * -> *).
     Control.Monad.IO.Class.MonadIO m =>
     forall a. GHC.Types.IO a -> m a
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_scEXZ]
        case v_scEXZ of {
          Control.Monad.IO.Class.C:MonadIO _ [Occ=Dead] v_scEY2 [Occ=Once] ->
              v_scEY2;
        };

Control.Monad.IO.Class.$fMonadIOIO [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Monad.IO.Class.MonadIO GHC.Types.IO
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Control.Monad.IO.Class.C:MonadIO! [GHC.Base.$fMonadIO
                                                     GHC.Base.id];

Control.Monad.IO.Class.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Monad.IO.Class.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.IO.Class.$trModule4];

Control.Monad.IO.Class.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Monad.IO.Class"#;

Control.Monad.IO.Class.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.IO.Class.$trModule2];

Control.Monad.IO.Class.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Monad.IO.Class.$trModule3
                                     Control.Monad.IO.Class.$trModule1];

$krep_rcEVa :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

Control.Monad.IO.Class.$tcMonadIO1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*Arr*
                                         $krep_rcEVa];

Control.Monad.IO.Class.$tcMonadIO3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MonadIO"#;

Control.Monad.IO.Class.$tcMonadIO2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.IO.Class.$tcMonadIO3];

Control.Monad.IO.Class.$tcMonadIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6022017498382306114##
                                    7075110953231061561##
                                    Control.Monad.IO.Class.$trModule
                                    Control.Monad.IO.Class.$tcMonadIO2
                                    0#
                                    Control.Monad.IO.Class.$tcMonadIO1];

Control.Monad.IO.Class.C:MonadIO
  :: forall (m :: * -> *).
     GHC.Base.Monad m =>
     (forall a. GHC.Types.IO a -> m a)
     -> Control.Monad.IO.Class.MonadIO m
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Monad.IO.Class.C:MonadIO [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:07:34.550148183 UTC

Control.Monad.IO.Class.$p1MonadIO
  :: forall (m :: * -> *).
     Control.Monad.IO.Class.MonadIO m =>
     GHC.Base.Monad m
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_scEXV]
        case v_scEXV of {
          Control.Monad.IO.Class.C:MonadIO v_scEXX [Occ=Once] _ [Occ=Dead] ->
              v_scEXX;
        };

Control.Monad.IO.Class.liftIO
  :: forall (m :: * -> *).
     Control.Monad.IO.Class.MonadIO m =>
     forall a. GHC.Types.IO a -> m a
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_scEXZ]
        case v_scEXZ of {
          Control.Monad.IO.Class.C:MonadIO _ [Occ=Dead] v_scEY2 [Occ=Once] ->
              v_scEY2;
        };

Control.Monad.IO.Class.$fMonadIOIO [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Monad.IO.Class.MonadIO GHC.Types.IO
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Control.Monad.IO.Class.C:MonadIO! [GHC.Base.$fMonadIO
                                                     GHC.Base.id];

Control.Monad.IO.Class.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Monad.IO.Class.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.IO.Class.$trModule4];

Control.Monad.IO.Class.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Monad.IO.Class"#;

Control.Monad.IO.Class.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.IO.Class.$trModule2];

Control.Monad.IO.Class.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Monad.IO.Class.$trModule3
                                     Control.Monad.IO.Class.$trModule1];

$krep_rcEVa :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

Control.Monad.IO.Class.$tcMonadIO1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*Arr*
                                         $krep_rcEVa];

Control.Monad.IO.Class.$tcMonadIO3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MonadIO"#;

Control.Monad.IO.Class.$tcMonadIO2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Monad.IO.Class.$tcMonadIO3];

Control.Monad.IO.Class.$tcMonadIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6022017498382306114##
                                    7075110953231061561##
                                    Control.Monad.IO.Class.$trModule
                                    Control.Monad.IO.Class.$tcMonadIO2
                                    0#
                                    Control.Monad.IO.Class.$tcMonadIO1];

Control.Monad.IO.Class.C:MonadIO
  :: forall (m :: * -> *).
     GHC.Base.Monad m =>
     (forall a. GHC.Types.IO a -> m a)
     -> Control.Monad.IO.Class.MonadIO m
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Monad.IO.Class.C:MonadIO [eta_B2 eta_B1];

