
==================== Raw Cmm ====================
2018-03-16 16:06:34.311244407 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:34.313065508 UTC

[section ""data" . Control.Monad.Fix.$p1MonadFix_closure" {
     Control.Monad.Fix.$p1MonadFix_closure:
         const Control.Monad.Fix.$p1MonadFix_info;
 },
 Control.Monad.Fix.$p1MonadFix_entry() //  [R2]
         { []
         }
     {offset
       cbH1b: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbH1c; else goto cbH1d;
       cbH1c: // global
           R2 = R2;
           R1 = Control.Monad.Fix.$p1MonadFix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbH1d: // global
           I64[Sp - 8] = block_cbH18_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubH1h; else goto cbH19;
       ubH1h: // global
           call _cbH18(R1) args: 0, res: 0, upd: 0;
       cbH19: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$p1MonadFix_info" {
     Control.Monad.Fix.$p1MonadFix_info:
         const Control.Monad.Fix.$p1MonadFix_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbH18() //  [R1]
         { []
         }
     {offset
       cbH18: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbH18_info" {
     block_cbH18_info:
         const _cbH18;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.318700617 UTC

[section ""data" . Control.Monad.Fix.mfix_closure" {
     Control.Monad.Fix.mfix_closure:
         const Control.Monad.Fix.mfix_info;
 },
 Control.Monad.Fix.mfix_entry() //  [R2]
         { []
         }
     {offset
       cbH1A: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbH1B; else goto cbH1C;
       cbH1B: // global
           R2 = R2;
           R1 = Control.Monad.Fix.mfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbH1C: // global
           I64[Sp - 8] = block_cbH1x_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubH1G; else goto cbH1y;
       ubH1G: // global
           call _cbH1x(R1) args: 0, res: 0, upd: 0;
       cbH1y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.mfix_info" {
     Control.Monad.Fix.mfix_info:
         const Control.Monad.Fix.mfix_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbH1x() //  [R1]
         { []
         }
     {offset
       cbH1x: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbH1x_info" {
     block_cbH1x_info:
         const _cbH1x;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.324973754 UTC

[section ""cstring" . lvl_rbGDa_bytes" {
     lvl_rbGDa_bytes:
         I8[] [109,102,105,120,32,77,97,121,98,101,58,32,78,111,116,104,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.327364317 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixFirst1_closure" {
     Control.Monad.Fix.$fMonadFixFirst1_closure:
         const Control.Monad.Fix.$fMonadFixFirst1_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Monad.Fix.$fMonadFixFirst1_entry() //  [R1]
         { []
         }
     {offset
       cbH1Z: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbH20; else goto cbH21;
       cbH20: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbH21: // global
           (_cbH1U::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbH1U::I64 == 0) goto cbH1W; else goto cbH1V;
       cbH1W: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbH1V: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbH1U::I64;
           I64[Sp - 24] = block_cbH1X_info;
           R2 = lvl_rbGDa_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixFirst1_info" {
     Control.Monad.Fix.$fMonadFixFirst1_info:
         const Control.Monad.Fix.$fMonadFixFirst1_entry;
         const 0;
         const 4294967317;
         const SbGFQ_srt;
 },
 _cbH1X() //  [R1]
         { []
         }
     {offset
       cbH1X: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbH1X_info" {
     block_cbH1X_info:
         const _cbH1X;
         const 0;
         const 4294967326;
         const SbGFQ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.334254258 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixMaybe_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFixMaybe_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFixMaybe_$cmfix_info;
         const 0;
 },
 sat_sbGDr_entry() //  [R1]
         { []
         }
     {offset
       cbH2y: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbH2z; else goto cbH2A;
       cbH2z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbH2A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbH2r_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubH2H; else goto cbH2s;
       ubH2H: // global
           call _cbH2r(R1) args: 0, res: 0, upd: 0;
       cbH2s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGDr_info" {
     sat_sbGDr_info:
         const sat_sbGDr_entry;
         const 1;
         const 4294967312;
         const SbGFQ_srt+8;
 },
 _cbH2r() //  [R1]
         { []
         }
     {offset
       cbH2r: // global
           if (R1 & 7 == 1) goto cbH2v; else goto cbH2w;
       cbH2v: // global
           R1 = Control.Monad.Fix.$fMonadFixFirst1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cbH2w: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbH2r_info" {
     block_cbH2r_info:
         const _cbH2r;
         const 0;
         const 4294967326;
         const SbGFQ_srt+8;
 },
 a1_sbGDo_entry() //  [R1]
         { []
         }
     {offset
       cbH2I: // global
           _sbGDo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbH2J; else goto cbH2K;
       cbH2K: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbH2M; else goto cbH2L;
       cbH2M: // global
           HpAlloc = 24;
           goto cbH2J;
       cbH2J: // global
           R1 = _sbGDo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbH2L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbGDo::P64;
           _sbGDn::P64 = P64[_sbGDo::P64 + 16];
           I64[Hp - 16] = sat_sbGDr_info;
           P64[Hp] = _sbGDo::P64;
           R2 = Hp - 16;
           R1 = _sbGDn::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . a1_sbGDo_info" {
     a1_sbGDo_info:
         const a1_sbGDo_entry;
         const 1;
         const 4294967312;
         const SbGFQ_srt+8;
 },
 Control.Monad.Fix.$fMonadFixMaybe_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbH2N: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbH2R; else goto cbH2Q;
       cbH2R: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixMaybe_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbH2Q: // global
           I64[Hp - 16] = a1_sbGDo_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixMaybe_$cmfix_info" {
     Control.Monad.Fix.$fMonadFixMaybe_$cmfix_info:
         const Control.Monad.Fix.$fMonadFixMaybe_$cmfix_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbGFQ_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.342536988 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixMaybe_closure" {
     Control.Monad.Fix.$fMonadFixMaybe_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const GHC.Base.$fMonadMaybe_closure;
         const Control.Monad.Fix.$fMonadFixMaybe_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.347557044 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_closure" {
     Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_closure:
         const Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_info;
         const 0;
 },
 sat_sbGDu_entry() //  [R1]
         { []
         }
     {offset
       cbH3p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbH3q; else goto cbH3r;
       cbH3q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbH3r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.List.head_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGDu_info" {
     sat_sbGDu_info:
         const sat_sbGDu_entry;
         const 1;
         const 4294967312;
         const SbGFQ_srt+24;
 },
 x_sbGDt_entry() //  [R1]
         { []
         }
     {offset
       cbH3s: // global
           _sbGDt::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbH3t; else goto cbH3u;
       cbH3u: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbH3w; else goto cbH3v;
       cbH3w: // global
           HpAlloc = 24;
           goto cbH3t;
       cbH3t: // global
           R1 = _sbGDt::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbH3v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbGDt::P64;
           _sbGDs::P64 = P64[_sbGDt::P64 + 16];
           I64[Hp - 16] = sat_sbGDu_info;
           P64[Hp] = _sbGDt::P64;
           R2 = Hp - 16;
           R1 = _sbGDs::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . x_sbGDt_info" {
     x_sbGDt_info:
         const x_sbGDt_entry;
         const 1;
         const 4294967312;
         const SbGFQ_srt+24;
 },
 sat_sbGDC_entry() //  [R1, R2]
         { []
         }
     {offset
       cbH3S: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbH3T; else goto cbH3U;
       cbH3T: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbH3U: // global
           I64[Sp - 8] = block_cbH3M_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbGDC_info" {
     sat_sbGDC_info:
         const sat_sbGDC_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SbGFQ_srt+32;
 },
 _cbH3M() //  [R1]
         { []
         }
     {offset
       cbH3M: // global
           if (R1 & 7 == 1) goto cbH3P; else goto cbH3Q;
       cbH3P: // global
           R1 = GHC.List.scanl2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cbH3Q: // global
           R1 = P64[R1 + 14] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbH3M_info" {
     block_cbH3M_info:
         const _cbH3M;
         const 0;
         const 4294967326;
         const SbGFQ_srt+32;
 },
 sat_sbGDD_entry() //  [R1]
         { []
         }
     {offset
       cbH41: // global
           _sbGDD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbH42; else goto cbH43;
       cbH43: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbH45; else goto cbH44;
       cbH45: // global
           HpAlloc = 16;
           goto cbH42;
       cbH42: // global
           R1 = _sbGDD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbH44: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbGDD::P64;
           _sbGDs::P64 = P64[_sbGDD::P64 + 16];
           I64[Hp - 8] = sat_sbGDC_info;
           P64[Hp] = _sbGDs::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGDD_info" {
     sat_sbGDD_info:
         const sat_sbGDD_entry;
         const 1;
         const 12884901904;
         const SbGFQ_srt+32;
 },
 Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_entry() //  [R2]
         { []
         }
     {offset
       cbH4a: // global
           _sbGDs::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cbH4b; else goto cbH4c;
       cbH4c: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbH4e; else goto cbH4d;
       cbH4e: // global
           HpAlloc = 24;
           goto cbH4b;
       cbH4b: // global
           R2 = _sbGDs::P64;
           R1 = Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbH4d: // global
           I64[Hp - 16] = x_sbGDt_info;
           P64[Hp] = _sbGDs::P64;
           I64[Sp - 16] = block_cbH3x_info;
           R1 = Hp - 16;
           P64[Sp - 8] = _sbGDs::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubH4l; else goto cbH3y;
       ubH4l: // global
           call _cbH3x(R1) args: 0, res: 0, upd: 0;
       cbH3y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_info" {
     Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_info:
         const Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SbGFQ_srt+24;
 },
 _cbH3x() //  [R1]
         { []
         }
     {offset
       cbH3x: // global
           if (R1 & 7 == 1) goto cbH47; else goto cbH48;
       cbH47: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbH48: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbH4k; else goto cbH4j;
       cbH4k: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbH4j: // global
           _sbGDw::P64 = P64[R1 + 6];
           I64[Hp - 40] = sat_sbGDD_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sbGDw::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbH3x_info" {
     block_cbH3x_info:
         const _cbH3x;
         const 1;
         const 12884901918;
         const SbGFQ_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.362176426 UTC

[section ""data" . Control.Monad.Fix.$fMonadFix[]_closure" {
     Control.Monad.Fix.$fMonadFix[]_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const GHC.Base.$fMonad[]_closure;
         const Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.366763682 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_info;
         const 0;
 },
 sat_sbGDS_entry() //  [R1, R2]
         { []
         }
     {offset
       cbH5f: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbH5g; else goto cbH5h;
       cbH5g: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbH5h: // global
           I64[Sp - 8] = block_cbH5d_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbGDS_info" {
     sat_sbGDS_info:
         const sat_sbGDS_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cbH5d() //  [R1]
         { []
         }
     {offset
       cbH5d: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbH5d_info" {
     block_cbH5d_info:
         const _cbH5d;
         const 0;
         const 30;
 },
 sat_sbGDT_entry() //  [R1]
         { []
         }
     {offset
       cbH5l: // global
           _sbGDT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbH5m; else goto cbH5n;
       cbH5n: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbH5p; else goto cbH5o;
       cbH5p: // global
           HpAlloc = 16;
           goto cbH5m;
       cbH5m: // global
           R1 = _sbGDT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbH5o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbGDT::P64;
           _sbGDE::P64 = P64[_sbGDT::P64 + 16];
           I64[Hp - 8] = sat_sbGDS_info;
           P64[Hp] = _sbGDE::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGDT_info" {
     sat_sbGDT_info:
         const sat_sbGDT_entry;
         const 1;
         const 4294967312;
         const SbGFQ_srt+40;
 },
 x_sbGDF_entry() //  [R1]
         { []
         }
     {offset
       cbH5z: // global
           _sbGDF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbH5A; else goto cbH5B;
       cbH5B: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbH5D; else goto cbH5C;
       cbH5D: // global
           HpAlloc = 24;
           goto cbH5A;
       cbH5A: // global
           R1 = _sbGDF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbH5C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbGDF::P64;
           _sbGDE::P64 = P64[_sbGDF::P64 + 16];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sbGDF::P64;
           R2 = Hp - 16;
           R1 = _sbGDE::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . x_sbGDF_info" {
     x_sbGDF_info:
         const x_sbGDF_entry;
         const 1;
         const 16;
 },
 sat_sbGDN_entry() //  [R1]
         { []
         }
     {offset
       cbH5H: // global
           _sbGDN::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cbH5I; else goto cbH5J;
       cbH5J: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbH5L; else goto cbH5K;
       cbH5L: // global
           HpAlloc = 24;
           goto cbH5I;
       cbH5I: // global
           R1 = _sbGDN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbH5K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbGDN::P64;
           _sbGDE::P64 = P64[_sbGDN::P64 + 16];
           I64[Hp - 16] = x_sbGDF_info;
           P64[Hp] = _sbGDE::P64;
           I64[Sp - 24] = block_cbH5E_info;
           R1 = Hp - 16;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubH5P; else goto cbH5F;
       ubH5P: // global
           call _cbH5E(R1) args: 0, res: 0, upd: 0;
       cbH5F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGDN_info" {
     sat_sbGDN_info:
         const sat_sbGDN_entry;
         const 1;
         const 16;
 },
 _cbH5E() //  [R1]
         { []
         }
     {offset
       cbH5E: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbH5E_info" {
     block_cbH5E_info:
         const _cbH5E;
         const 0;
         const 30;
 },
 Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbH5R: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbH5V; else goto cbH5U;
       cbH5V: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbH5U: // global
           I64[Hp - 64] = sat_sbGDT_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sbGDN_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_info" {
     Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_info:
         const Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbGFQ_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.380232191 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixNonEmpty_closure" {
     Control.Monad.Fix.$fMonadFixNonEmpty_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const GHC.Base.$fMonadNonEmpty_closure;
         const Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.382095857 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixIO_closure" {
     Control.Monad.Fix.$fMonadFixIO_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const GHC.Base.$fMonadIO_closure;
         const System.IO.fixIO1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.384548938 UTC

[section ""data" . Control.Monad.Fix.$fMonadFix(->)_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFix(->)_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFix(->)_$cmfix_info;
 },
 Control.Monad.Fix.$fMonadFix(->)_$cmfix_entry() //  [R2, R3]
         { []
         }
     {offset
       cbH6z: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbH6D; else goto cbH6C;
       cbH6D: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFix(->)_$cmfix_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbH6C: // global
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R2;
           _cbH6y::P64 = Hp - 32;
           P64[Hp - 8] = _cbH6y::P64;
           P64[Hp] = R3;
           R1 = _cbH6y::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFix(->)_$cmfix_info" {
     Control.Monad.Fix.$fMonadFix(->)_$cmfix_info:
         const Control.Monad.Fix.$fMonadFix(->)_$cmfix_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.387912691 UTC

[section ""data" . Control.Monad.Fix.$fMonadFix(->)_closure" {
     Control.Monad.Fix.$fMonadFix(->)_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const GHC.Base.$fMonad(->)_closure;
         const Control.Monad.Fix.$fMonadFix(->)_$cmfix_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.389687151 UTC

[section ""cstring" . lvl1_rbGDb_bytes" {
     lvl1_rbGDb_bytes:
         I8[] [109,102,105,120,32,69,105,116,104,101,114,58,32,76,101,102,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.392160958 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixEither1_closure" {
     Control.Monad.Fix.$fMonadFixEither1_closure:
         const Control.Monad.Fix.$fMonadFixEither1_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Monad.Fix.$fMonadFixEither1_entry() //  [R1]
         { []
         }
     {offset
       cbH6S: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbH6T; else goto cbH6U;
       cbH6T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbH6U: // global
           (_cbH6N::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbH6N::I64 == 0) goto cbH6P; else goto cbH6O;
       cbH6P: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbH6O: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbH6N::I64;
           I64[Sp - 24] = block_cbH6Q_info;
           R2 = lvl1_rbGDb_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixEither1_info" {
     Control.Monad.Fix.$fMonadFixEither1_info:
         const Control.Monad.Fix.$fMonadFixEither1_entry;
         const 0;
         const 4294967317;
         const SbGFQ_srt;
 },
 _cbH6Q() //  [R1]
         { []
         }
     {offset
       cbH6Q: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbH6Q_info" {
     block_cbH6Q_info:
         const _cbH6Q;
         const 0;
         const 4294967326;
         const SbGFQ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.399437857 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixEither_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFixEither_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFixEither_$cmfix_info;
         const 0;
 },
 sat_sbGE3_entry() //  [R1]
         { []
         }
     {offset
       cbH7r: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbH7s; else goto cbH7t;
       cbH7s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbH7t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbH7k_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubH7A; else goto cbH7l;
       ubH7A: // global
           call _cbH7k(R1) args: 0, res: 0, upd: 0;
       cbH7l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGE3_info" {
     sat_sbGE3_info:
         const sat_sbGE3_entry;
         const 1;
         const 4294967312;
         const SbGFQ_srt+56;
 },
 _cbH7k() //  [R1]
         { []
         }
     {offset
       cbH7k: // global
           if (R1 & 7 == 1) goto cbH7o; else goto cbH7p;
       cbH7o: // global
           R1 = Control.Monad.Fix.$fMonadFixEither1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cbH7p: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbH7k_info" {
     block_cbH7k_info:
         const _cbH7k;
         const 0;
         const 4294967326;
         const SbGFQ_srt+56;
 },
 a1_sbGDZ_entry() //  [R1]
         { []
         }
     {offset
       cbH7B: // global
           _sbGDZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbH7C; else goto cbH7D;
       cbH7D: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbH7F; else goto cbH7E;
       cbH7F: // global
           HpAlloc = 24;
           goto cbH7C;
       cbH7C: // global
           R1 = _sbGDZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbH7E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbGDZ::P64;
           _sbGDY::P64 = P64[_sbGDZ::P64 + 16];
           I64[Hp - 16] = sat_sbGE3_info;
           P64[Hp] = _sbGDZ::P64;
           R2 = Hp - 16;
           R1 = _sbGDY::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . a1_sbGDZ_info" {
     a1_sbGDZ_info:
         const a1_sbGDZ_entry;
         const 1;
         const 4294967312;
         const SbGFQ_srt+56;
 },
 Control.Monad.Fix.$fMonadFixEither_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbH7G: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbH7K; else goto cbH7J;
       cbH7K: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixEither_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbH7J: // global
           I64[Hp - 16] = a1_sbGDZ_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixEither_$cmfix_info" {
     Control.Monad.Fix.$fMonadFixEither_$cmfix_info:
         const Control.Monad.Fix.$fMonadFixEither_$cmfix_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbGFQ_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.407946514 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixEither_closure" {
     Control.Monad.Fix.$fMonadFixEither_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Either.$fMonadEither_closure;
         const Control.Monad.Fix.$fMonadFixEither_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.409753417 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixST_closure" {
     Control.Monad.Fix.$fMonadFixST_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const GHC.ST.$fMonadST_closure;
         const GHC.ST.fixST1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.412006875 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixDual_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFixDual_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFixDual_$cmfix_info;
 },
 Control.Monad.Fix.$fMonadFixDual_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbH8c: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbH8g; else goto cbH8f;
       cbH8g: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixDual_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbH8f: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R2;
           _cbH8b::P64 = Hp - 24;
           P64[Hp] = _cbH8b::P64;
           R1 = _cbH8b::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixDual_$cmfix_info" {
     Control.Monad.Fix.$fMonadFixDual_$cmfix_info:
         const Control.Monad.Fix.$fMonadFixDual_$cmfix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.416457686 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixDual_closure" {
     Control.Monad.Fix.$fMonadFixDual_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Semigroup.Internal.$fMonadDual_closure;
         const Control.Monad.Fix.$fMonadFixDual_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.418700469 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixSum_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFixSum_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFixSum_$cmfix_info;
 },
 Control.Monad.Fix.$fMonadFixSum_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbH8r: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbH8v; else goto cbH8u;
       cbH8v: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixSum_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbH8u: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R2;
           _cbH8q::P64 = Hp - 24;
           P64[Hp] = _cbH8q::P64;
           R1 = _cbH8q::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixSum_$cmfix_info" {
     Control.Monad.Fix.$fMonadFixSum_$cmfix_info:
         const Control.Monad.Fix.$fMonadFixSum_$cmfix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.42205843 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixSum_closure" {
     Control.Monad.Fix.$fMonadFixSum_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Semigroup.Internal.$fMonadSum_closure;
         const Control.Monad.Fix.$fMonadFixSum_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.424293402 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixProduct_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFixProduct_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFixProduct_$cmfix_info;
 },
 Control.Monad.Fix.$fMonadFixProduct_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbH8G: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbH8K; else goto cbH8J;
       cbH8K: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixProduct_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbH8J: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R2;
           _cbH8F::P64 = Hp - 24;
           P64[Hp] = _cbH8F::P64;
           R1 = _cbH8F::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixProduct_$cmfix_info" {
     Control.Monad.Fix.$fMonadFixProduct_$cmfix_info:
         const Control.Monad.Fix.$fMonadFixProduct_$cmfix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.428112963 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixProduct_closure" {
     Control.Monad.Fix.$fMonadFixProduct_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Semigroup.Internal.$fMonadProduct_closure;
         const Control.Monad.Fix.$fMonadFixProduct_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.431851234 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixFirst_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFixFirst_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFixFirst_$cmfix_info;
         const 0;
 },
 sat_sbGEe_entry() //  [R1]
         { []
         }
     {offset
       cbH99: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbH9a; else goto cbH9b;
       cbH9a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbH9b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbH92_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubH9i; else goto cbH93;
       ubH9i: // global
           call _cbH92(R1) args: 0, res: 0, upd: 0;
       cbH93: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGEe_info" {
     sat_sbGEe_info:
         const sat_sbGEe_entry;
         const 1;
         const 4294967312;
         const SbGFQ_srt+8;
 },
 _cbH92() //  [R1]
         { []
         }
     {offset
       cbH92: // global
           if (R1 & 7 == 1) goto cbH96; else goto cbH97;
       cbH96: // global
           R1 = Control.Monad.Fix.$fMonadFixFirst1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cbH97: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbH92_info" {
     block_cbH92_info:
         const _cbH92;
         const 0;
         const 4294967326;
         const SbGFQ_srt+8;
 },
 a1_sbGEb_entry() //  [R1]
         { []
         }
     {offset
       cbH9j: // global
           _sbGEb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbH9k; else goto cbH9l;
       cbH9l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbH9n; else goto cbH9m;
       cbH9n: // global
           HpAlloc = 24;
           goto cbH9k;
       cbH9k: // global
           R1 = _sbGEb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbH9m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbGEb::P64;
           _sbGEa::P64 = P64[_sbGEb::P64 + 16];
           I64[Hp - 16] = sat_sbGEe_info;
           P64[Hp] = _sbGEb::P64;
           R2 = Hp - 16;
           R1 = _sbGEa::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . a1_sbGEb_info" {
     a1_sbGEb_info:
         const a1_sbGEb_entry;
         const 1;
         const 4294967312;
         const SbGFQ_srt+8;
 },
 Control.Monad.Fix.$fMonadFixFirst_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbH9o: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbH9s; else goto cbH9r;
       cbH9s: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixFirst_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbH9r: // global
           I64[Hp - 16] = a1_sbGEb_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixFirst_$cmfix_info" {
     Control.Monad.Fix.$fMonadFixFirst_$cmfix_info:
         const Control.Monad.Fix.$fMonadFixFirst_$cmfix_entry;
         const 0;
         const 1103806595086;
         const 4294967301;
         const SbGFQ_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.440415348 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixFirst_closure" {
     Control.Monad.Fix.$fMonadFixFirst_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Monoid.$fMonadFirst_closure;
         const Control.Monad.Fix.$fMonadFixFirst_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.444017398 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixLast_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFixLast_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFixLast_$cmfix_info;
         const 0;
 },
 sat_sbGEj_entry() //  [R1]
         { []
         }
     {offset
       cbHa7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbHa8; else goto cbHa9;
       cbHa8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHa9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbHa0_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubHag; else goto cbHa1;
       ubHag: // global
           call _cbHa0(R1) args: 0, res: 0, upd: 0;
       cbHa1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGEj_info" {
     sat_sbGEj_info:
         const sat_sbGEj_entry;
         const 1;
         const 4294967312;
         const SbGFQ_srt+8;
 },
 _cbHa0() //  [R1]
         { []
         }
     {offset
       cbHa0: // global
           if (R1 & 7 == 1) goto cbHa4; else goto cbHa5;
       cbHa4: // global
           R1 = Control.Monad.Fix.$fMonadFixFirst1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cbHa5: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbHa0_info" {
     block_cbHa0_info:
         const _cbHa0;
         const 0;
         const 4294967326;
         const SbGFQ_srt+8;
 },
 a1_sbGEg_entry() //  [R1]
         { []
         }
     {offset
       cbHah: // global
           _sbGEg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbHai; else goto cbHaj;
       cbHaj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHal; else goto cbHak;
       cbHal: // global
           HpAlloc = 24;
           goto cbHai;
       cbHai: // global
           R1 = _sbGEg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHak: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbGEg::P64;
           _sbGEf::P64 = P64[_sbGEg::P64 + 16];
           I64[Hp - 16] = sat_sbGEj_info;
           P64[Hp] = _sbGEg::P64;
           R2 = Hp - 16;
           R1 = _sbGEf::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . a1_sbGEg_info" {
     a1_sbGEg_info:
         const a1_sbGEg_entry;
         const 1;
         const 4294967312;
         const SbGFQ_srt+8;
 },
 Control.Monad.Fix.$fMonadFixLast_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbHam: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHaq; else goto cbHap;
       cbHaq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixLast_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHap: // global
           I64[Hp - 16] = a1_sbGEg_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixLast_$cmfix_info" {
     Control.Monad.Fix.$fMonadFixLast_$cmfix_info:
         const Control.Monad.Fix.$fMonadFixLast_$cmfix_entry;
         const 0;
         const 2203318222862;
         const 4294967301;
         const SbGFQ_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.452691769 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixLast_closure" {
     Control.Monad.Fix.$fMonadFixLast_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Monoid.$fMonadLast_closure;
         const Control.Monad.Fix.$fMonadFixLast_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.455393344 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixAlt1_closure" {
     Control.Monad.Fix.$fMonadFixAlt1_closure:
         const Control.Monad.Fix.$fMonadFixAlt1_info;
 },
 sat_sbGEn_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHaV: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbGEn_info" {
     sat_sbGEn_info:
         const sat_sbGEn_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Control.Monad.Fix.$fMonadFixAlt1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbHaY: // global
           _sbGEl::P64 = R3;
           _sbGEk::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cbHaZ; else goto cbHb0;
       cbHb0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbHb2; else goto cbHb1;
       cbHb2: // global
           HpAlloc = 16;
           goto cbHaZ;
       cbHaZ: // global
           R3 = _sbGEl::P64;
           R2 = _sbGEk::P64;
           R1 = Control.Monad.Fix.$fMonadFixAlt1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbHb1: // global
           I64[Hp - 8] = sat_sbGEn_info;
           P64[Hp] = _sbGEl::P64;
           R2 = _sbGEk::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 16;
           call Control.Monad.Fix.mfix_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixAlt1_info" {
     Control.Monad.Fix.$fMonadFixAlt1_info:
         const Control.Monad.Fix.$fMonadFixAlt1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.460975815 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixAlt_$cp1MonadFix_closure" {
     Control.Monad.Fix.$fMonadFixAlt_$cp1MonadFix_closure:
         const Control.Monad.Fix.$fMonadFixAlt_$cp1MonadFix_info;
 },
 sat_sbGEp_entry() //  [R1]
         { []
         }
     {offset
       cbHbk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHbl; else goto cbHbm;
       cbHbl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHbm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$p1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGEp_info" {
     sat_sbGEp_info:
         const sat_sbGEp_entry;
         const 1;
         const 16;
 },
 Control.Monad.Fix.$fMonadFixAlt_$cp1MonadFix_entry() //  [R2]
         { []
         }
     {offset
       cbHbn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHbr; else goto cbHbq;
       cbHbr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixAlt_$cp1MonadFix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHbq: // global
           I64[Hp - 16] = sat_sbGEp_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fMonadAlt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixAlt_$cp1MonadFix_info" {
     Control.Monad.Fix.$fMonadFixAlt_$cp1MonadFix_info:
         const Control.Monad.Fix.$fMonadFixAlt_$cp1MonadFix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.46737011 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixAlt_closure" {
     Control.Monad.Fix.$fMonadFixAlt_closure:
         const Control.Monad.Fix.$fMonadFixAlt_info;
 },
 sat_sbGEs_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHbJ: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Control.Monad.Fix.$fMonadFixAlt1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbGEs_info" {
     sat_sbGEs_info:
         const sat_sbGEs_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbGEr_entry() //  [R1]
         { []
         }
     {offset
       cbHbQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHbR; else goto cbHbS;
       cbHbR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHbS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$fMonadFixAlt_$cp1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGEr_info" {
     sat_sbGEr_info:
         const sat_sbGEr_entry;
         const 1;
         const 16;
 },
 Control.Monad.Fix.$fMonadFixAlt_entry() //  [R2]
         { []
         }
     {offset
       cbHbU: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbHbY; else goto cbHbX;
       cbHbY: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHbX: // global
           I64[Hp - 56] = sat_sbGEs_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sbGEr_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Control.Monad.Fix.C:MonadFix_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 55;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixAlt_info" {
     Control.Monad.Fix.$fMonadFixAlt_info:
         const Control.Monad.Fix.$fMonadFixAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.474450788 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixPar1_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFixPar1_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFixPar1_$cmfix_info;
 },
 Control.Monad.Fix.$fMonadFixPar1_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbHci: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbHcm; else goto cbHcl;
       cbHcm: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixPar1_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHcl: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R2;
           _cbHch::P64 = Hp - 24;
           P64[Hp] = _cbHch::P64;
           R1 = _cbHch::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixPar1_$cmfix_info" {
     Control.Monad.Fix.$fMonadFixPar1_$cmfix_info:
         const Control.Monad.Fix.$fMonadFixPar1_$cmfix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.477866553 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixPar1_closure" {
     Control.Monad.Fix.$fMonadFixPar1_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const GHC.Generics.$fMonadPar1_closure;
         const Control.Monad.Fix.$fMonadFixPar1_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.480424064 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixRec2_closure" {
     Control.Monad.Fix.$fMonadFixRec2_closure:
         const Control.Monad.Fix.$fMonadFixRec2_info;
 },
 sat_sbGEy_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHcB: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbGEy_info" {
     sat_sbGEy_info:
         const sat_sbGEy_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Control.Monad.Fix.$fMonadFixRec2_entry() //  [R2, R3]
         { []
         }
     {offset
       cbHcE: // global
           _sbGEw::P64 = R3;
           _sbGEv::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cbHcF; else goto cbHcG;
       cbHcG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbHcI; else goto cbHcH;
       cbHcI: // global
           HpAlloc = 16;
           goto cbHcF;
       cbHcF: // global
           R3 = _sbGEw::P64;
           R2 = _sbGEv::P64;
           R1 = Control.Monad.Fix.$fMonadFixRec2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbHcH: // global
           I64[Hp - 8] = sat_sbGEy_info;
           P64[Hp] = _sbGEw::P64;
           R2 = _sbGEv::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 16;
           call Control.Monad.Fix.mfix_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixRec2_info" {
     Control.Monad.Fix.$fMonadFixRec2_info:
         const Control.Monad.Fix.$fMonadFixRec2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.486258281 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_closure" {
     Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_closure:
         const Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_info;
         const 0;
 },
 sat_sbGEA_entry() //  [R1]
         { []
         }
     {offset
       cbHd0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHd1; else goto cbHd2;
       cbHd1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHd2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$p1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGEA_info" {
     sat_sbGEA_info:
         const sat_sbGEA_entry;
         const 1;
         const 16;
 },
 Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_entry() //  [R2]
         { []
         }
     {offset
       cbHd3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHd7; else goto cbHd6;
       cbHd7: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHd6: // global
           I64[Hp - 16] = sat_sbGEA_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Generics.$fMonadRec1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_info" {
     Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_info:
         const Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbGFQ_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.492084829 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixRec1_closure" {
     Control.Monad.Fix.$fMonadFixRec1_closure:
         const Control.Monad.Fix.$fMonadFixRec1_info;
         const 0;
 },
 sat_sbGED_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHdp: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Control.Monad.Fix.$fMonadFixRec2_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbGED_info" {
     sat_sbGED_info:
         const sat_sbGED_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbGEC_entry() //  [R1]
         { []
         }
     {offset
       cbHdw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHdx; else goto cbHdy;
       cbHdx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHdy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGEC_info" {
     sat_sbGEC_info:
         const sat_sbGEC_entry;
         const 1;
         const 4294967312;
         const SbGFQ_srt+96;
 },
 Control.Monad.Fix.$fMonadFixRec1_entry() //  [R2]
         { []
         }
     {offset
       cbHdA: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbHdE; else goto cbHdD;
       cbHdE: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixRec1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHdD: // global
           I64[Hp - 56] = sat_sbGED_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sbGEC_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Control.Monad.Fix.C:MonadFix_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 55;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixRec1_info" {
     Control.Monad.Fix.$fMonadFixRec1_info:
         const Control.Monad.Fix.$fMonadFixRec1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbGFQ_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.499414586 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixM2_closure" {
     Control.Monad.Fix.$fMonadFixM2_closure:
         const Control.Monad.Fix.$fMonadFixM2_info;
 },
 sat_sbGEH_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHe2: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbGEH_info" {
     sat_sbGEH_info:
         const sat_sbGEH_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Control.Monad.Fix.$fMonadFixM2_entry() //  [R2, R3]
         { []
         }
     {offset
       cbHe5: // global
           _sbGEF::P64 = R3;
           _sbGEE::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cbHe6; else goto cbHe7;
       cbHe7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbHe9; else goto cbHe8;
       cbHe9: // global
           HpAlloc = 16;
           goto cbHe6;
       cbHe6: // global
           R3 = _sbGEF::P64;
           R2 = _sbGEE::P64;
           R1 = Control.Monad.Fix.$fMonadFixM2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbHe8: // global
           I64[Hp - 8] = sat_sbGEH_info;
           P64[Hp] = _sbGEF::P64;
           R2 = _sbGEE::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 16;
           call Control.Monad.Fix.mfix_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixM2_info" {
     Control.Monad.Fix.$fMonadFixM2_info:
         const Control.Monad.Fix.$fMonadFixM2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.505836031 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixM1_$cp1MonadFix_closure" {
     Control.Monad.Fix.$fMonadFixM1_$cp1MonadFix_closure:
         const Control.Monad.Fix.$fMonadFixM1_$cp1MonadFix_info;
 },
 sat_sbGEJ_entry() //  [R1]
         { []
         }
     {offset
       cbHer: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHes; else goto cbHet;
       cbHes: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHet: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$p1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGEJ_info" {
     sat_sbGEJ_info:
         const sat_sbGEJ_entry;
         const 1;
         const 16;
 },
 Control.Monad.Fix.$fMonadFixM1_$cp1MonadFix_entry() //  [R2]
         { []
         }
     {offset
       cbHeu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHey; else goto cbHex;
       cbHey: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixM1_$cp1MonadFix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHex: // global
           I64[Hp - 16] = sat_sbGEJ_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Generics.$fMonadM1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixM1_$cp1MonadFix_info" {
     Control.Monad.Fix.$fMonadFixM1_$cp1MonadFix_info:
         const Control.Monad.Fix.$fMonadFixM1_$cp1MonadFix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.51180333 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixM1_closure" {
     Control.Monad.Fix.$fMonadFixM1_closure:
         const Control.Monad.Fix.$fMonadFixM1_info;
 },
 sat_sbGEM_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHeQ: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Control.Monad.Fix.$fMonadFixM2_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbGEM_info" {
     sat_sbGEM_info:
         const sat_sbGEM_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbGEL_entry() //  [R1]
         { []
         }
     {offset
       cbHeX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHeY; else goto cbHeZ;
       cbHeY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHeZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$fMonadFixM1_$cp1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGEL_info" {
     sat_sbGEL_info:
         const sat_sbGEL_entry;
         const 1;
         const 16;
 },
 Control.Monad.Fix.$fMonadFixM1_entry() //  [R2]
         { []
         }
     {offset
       cbHf1: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbHf5; else goto cbHf4;
       cbHf5: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixM1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHf4: // global
           I64[Hp - 56] = sat_sbGEM_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sbGEL_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Control.Monad.Fix.C:MonadFix_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 55;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixM1_info" {
     Control.Monad.Fix.$fMonadFixM1_info:
         const Control.Monad.Fix.$fMonadFixM1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.521072188 UTC

[section ""data" . Control.Monad.Fix.$fMonadFix:*:_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFix:*:_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFix:*:_$cmfix_info;
 },
 sat_sbGF0_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHfz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbHfA; else goto cbHfB;
       cbHfA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHfB: // global
           I64[Sp - 8] = block_cbHfx_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbGF0_info" {
     sat_sbGF0_info:
         const sat_sbGF0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cbHfx() //  [R1]
         { []
         }
     {offset
       cbHfx: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbHfx_info" {
     block_cbHfx_info:
         const _cbHfx;
         const 0;
         const 30;
 },
 sat_sbGF1_entry() //  [R1]
         { []
         }
     {offset
       cbHfF: // global
           _sbGF1::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cbHfG; else goto cbHfH;
       cbHfH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbHfJ; else goto cbHfI;
       cbHfJ: // global
           HpAlloc = 16;
           goto cbHfG;
       cbHfG: // global
           R1 = _sbGF1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHfI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbGF1::P64;
           _sbGEO::P64 = P64[_sbGF1::P64 + 16];
           _sbGEP::P64 = P64[_sbGF1::P64 + 24];
           I64[Hp - 8] = sat_sbGF0_info;
           P64[Hp] = _sbGEP::P64;
           R2 = _sbGEO::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Control.Monad.Fix.mfix_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGF1_info" {
     sat_sbGF1_info:
         const sat_sbGF1_entry;
         const 2;
         const 18;
 },
 sat_sbGEU_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHfV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbHfW; else goto cbHfX;
       cbHfW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHfX: // global
           I64[Sp - 8] = block_cbHfT_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbGEU_info" {
     sat_sbGEU_info:
         const sat_sbGEU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cbHfT() //  [R1]
         { []
         }
     {offset
       cbHfT: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbHfT_info" {
     block_cbHfT_info:
         const _cbHfT;
         const 0;
         const 30;
 },
 sat_sbGEV_entry() //  [R1]
         { []
         }
     {offset
       cbHg1: // global
           _sbGEV::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cbHg2; else goto cbHg3;
       cbHg3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbHg5; else goto cbHg4;
       cbHg5: // global
           HpAlloc = 16;
           goto cbHg2;
       cbHg2: // global
           R1 = _sbGEV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHg4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbGEV::P64;
           _sbGEN::P64 = P64[_sbGEV::P64 + 16];
           _sbGEP::P64 = P64[_sbGEV::P64 + 24];
           I64[Hp - 8] = sat_sbGEU_info;
           P64[Hp] = _sbGEP::P64;
           R2 = _sbGEN::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Control.Monad.Fix.mfix_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGEV_info" {
     sat_sbGEV_info:
         const sat_sbGEV_entry;
         const 2;
         const 18;
 },
 Control.Monad.Fix.$fMonadFix:*:_$cmfix_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbHg7: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cbHgb; else goto cbHga;
       cbHgb: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFix:*:_$cmfix_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbHga: // global
           I64[Hp - 80] = sat_sbGF1_info;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = sat_sbGEV_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = GHC.Generics.:*:_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFix:*:_$cmfix_info" {
     Control.Monad.Fix.$fMonadFix:*:_$cmfix_info:
         const Control.Monad.Fix.$fMonadFix:*:_$cmfix_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.535193378 UTC

[section ""data" . Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_closure" {
     Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_closure:
         const Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_info;
         const 0;
 },
 sat_sbGF5_entry() //  [R1]
         { []
         }
     {offset
       cbHgP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHgQ; else goto cbHgR;
       cbHgQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHgR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$p1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGF5_info" {
     sat_sbGF5_info:
         const sat_sbGF5_entry;
         const 1;
         const 16;
 },
 sat_sbGF4_entry() //  [R1]
         { []
         }
     {offset
       cbHgW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHgX; else goto cbHgY;
       cbHgX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHgY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$p1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGF4_info" {
     sat_sbGF4_info:
         const sat_sbGF4_entry;
         const 1;
         const 16;
 },
 Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_entry() //  [R2, R3]
         { []
         }
     {offset
       cbHgZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbHh3; else goto cbHh2;
       cbHh3: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbHh2: // global
           I64[Hp - 40] = sat_sbGF5_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sbGF4_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call GHC.Generics.$fMonad:*:_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_info" {
     Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_info:
         const Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SbGFQ_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.543649359 UTC

[section ""data" . Control.Monad.Fix.$fMonadFix:*:_closure" {
     Control.Monad.Fix.$fMonadFix:*:_closure:
         const Control.Monad.Fix.$fMonadFix:*:_info;
         const 0;
 },
 sat_sbGF9_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHhp: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Control.Monad.Fix.$fMonadFix:*:_$cmfix_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbGF9_info" {
     sat_sbGF9_info:
         const sat_sbGF9_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sbGF8_entry() //  [R1]
         { []
         }
     {offset
       cbHhw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHhx; else goto cbHhy;
       cbHhx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHhy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_entry(R3,
                                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbGF8_info" {
     sat_sbGF8_info:
         const sat_sbGF8_entry;
         const 2;
         const 4294967314;
         const SbGFQ_srt+120;
 },
 Control.Monad.Fix.$fMonadFix:*:_entry() //  [R2, R3]
         { []
         }
     {offset
       cbHhA: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbHhE; else goto cbHhD;
       cbHhE: // global
           HpAlloc = 80;
           R3 = R3;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFix:*:_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbHhD: // global
           I64[Hp - 72] = sat_sbGF9_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_sbGF8_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = Control.Monad.Fix.C:MonadFix_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 71;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFix:*:_info" {
     Control.Monad.Fix.$fMonadFix:*:_info:
         const Control.Monad.Fix.$fMonadFix:*:_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SbGFQ_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.550025683 UTC

[section ""cstring" . Control.Monad.Fix.$trModule4_bytes" {
     Control.Monad.Fix.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.55175192 UTC

[section ""data" . Control.Monad.Fix.$trModule3_closure" {
     Control.Monad.Fix.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Monad.Fix.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.553787877 UTC

[section ""cstring" . Control.Monad.Fix.$trModule2_bytes" {
     Control.Monad.Fix.$trModule2_bytes:
         I8[] [67,111,110,116,114,111,108,46,77,111,110,97,100,46,70,105,120]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.555442388 UTC

[section ""data" . Control.Monad.Fix.$trModule1_closure" {
     Control.Monad.Fix.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Monad.Fix.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.557158328 UTC

[section ""data" . Control.Monad.Fix.$trModule_closure" {
     Control.Monad.Fix.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Control.Monad.Fix.$trModule3_closure+1;
         const Control.Monad.Fix.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.55895243 UTC

[section ""data" . $krep_rbGDc_closure" {
     $krep_rbGDc_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.560666278 UTC

[section ""data" . Control.Monad.Fix.$tcMonadFix1_closure" {
     Control.Monad.Fix.$tcMonadFix1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*Arr*_closure;
         const $krep_rbGDc_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.562474585 UTC

[section ""cstring" . Control.Monad.Fix.$tcMonadFix3_bytes" {
     Control.Monad.Fix.$tcMonadFix3_bytes:
         I8[] [77,111,110,97,100,70,105,120]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.564134536 UTC

[section ""data" . Control.Monad.Fix.$tcMonadFix2_closure" {
     Control.Monad.Fix.$tcMonadFix2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Monad.Fix.$tcMonadFix3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.566325531 UTC

[section ""data" . Control.Monad.Fix.$tcMonadFix_closure" {
     Control.Monad.Fix.$tcMonadFix_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Monad.Fix.$trModule_closure+1;
         const Control.Monad.Fix.$tcMonadFix2_closure+1;
         const Control.Monad.Fix.$tcMonadFix1_closure+4;
         const 9994897379720692231;
         const 15179622530544898162;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.569308586 UTC

[section ""data" . Control.Monad.Fix.C:MonadFix_closure" {
     Control.Monad.Fix.C:MonadFix_closure:
         const Control.Monad.Fix.C:MonadFix_info;
 },
 Control.Monad.Fix.C:MonadFix_entry() //  [R2, R3]
         { []
         }
     {offset
       cbHi8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHic; else goto cbHib;
       cbHic: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Control.Monad.Fix.C:MonadFix_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbHib: // global
           I64[Hp - 16] = Control.Monad.Fix.C:MonadFix_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.C:MonadFix_info" {
     Control.Monad.Fix.C:MonadFix_info:
         const Control.Monad.Fix.C:MonadFix_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.572884441 UTC

[section ""cstring" . ibH13_str" {
     ibH13_str:
         I8[] [98,97,115,101,58,67,111,110,116,114,111,108,46,77,111,110,97,100,46,70,105,120,46,67,58,77,111,110,97,100,70,105,120]
 },
 Control.Monad.Fix.C:MonadFix_con_entry() //  [R1]
         { []
         }
     {offset
       cbHii: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.C:MonadFix_con_info" {
     Control.Monad.Fix.C:MonadFix_con_info:
         const Control.Monad.Fix.C:MonadFix_con_entry;
         const 2;
         const 4;
         const ibH13_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.576002602 UTC

[section ""relreadonly" . SbGFQ_srt" {
     SbGFQ_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Control.Monad.Fix.$fMonadFixFirst1_closure;
         const Control.Monad.Fix.$fMonadFixMaybe_$cmfix_closure;
         const GHC.List.head_closure;
         const GHC.List.scanl2_closure;
         const Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_closure;
         const Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_closure;
         const Control.Monad.Fix.$fMonadFixEither1_closure;
         const Control.Monad.Fix.$fMonadFixEither_$cmfix_closure;
         const Control.Monad.Fix.$fMonadFixFirst_$cmfix_closure;
         const Control.Monad.Fix.$fMonadFixLast_$cmfix_closure;
         const GHC.Generics.$fMonadRec1_closure;
         const Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_closure;
         const Control.Monad.Fix.$fMonadFixRec1_closure;
         const GHC.Generics.$fMonad:*:_closure;
         const Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_closure;
         const Control.Monad.Fix.$fMonadFix:*:_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.974767512 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:34.976663536 UTC

[section ""data" . Control.Monad.Fix.$p1MonadFix_closure" {
     Control.Monad.Fix.$p1MonadFix_closure:
         const Control.Monad.Fix.$p1MonadFix_info;
 },
 Control.Monad.Fix.$p1MonadFix_entry() //  [R2]
         { []
         }
     {offset
       cbHks: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbHkt; else goto cbHku;
       cbHkt: // global
           R2 = R2;
           R1 = Control.Monad.Fix.$p1MonadFix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHku: // global
           I64[Sp - 8] = block_cbHkp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubHky; else goto cbHkq;
       ubHky: // global
           call _cbHkp(R1) args: 0, res: 0, upd: 0;
       cbHkq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$p1MonadFix_info" {
     Control.Monad.Fix.$p1MonadFix_info:
         const Control.Monad.Fix.$p1MonadFix_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbHkp() //  [R1]
         { []
         }
     {offset
       cbHkp: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbHkp_info" {
     block_cbHkp_info:
         const _cbHkp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.982444361 UTC

[section ""data" . Control.Monad.Fix.mfix_closure" {
     Control.Monad.Fix.mfix_closure:
         const Control.Monad.Fix.mfix_info;
 },
 Control.Monad.Fix.mfix_entry() //  [R2]
         { []
         }
     {offset
       cbHkS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbHkT; else goto cbHkU;
       cbHkT: // global
           R2 = R2;
           R1 = Control.Monad.Fix.mfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHkU: // global
           I64[Sp - 8] = block_cbHkP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubHkY; else goto cbHkQ;
       ubHkY: // global
           call _cbHkP(R1) args: 0, res: 0, upd: 0;
       cbHkQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.mfix_info" {
     Control.Monad.Fix.mfix_info:
         const Control.Monad.Fix.mfix_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbHkP() //  [R1]
         { []
         }
     {offset
       cbHkP: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbHkP_info" {
     block_cbHkP_info:
         const _cbHkP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.987854127 UTC

[section ""cstring" . lvl_rbGDa_bytes" {
     lvl_rbGDa_bytes:
         I8[] [109,102,105,120,32,77,97,121,98,101,58,32,78,111,116,104,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.990227802 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixFirst1_closure" {
     Control.Monad.Fix.$fMonadFixFirst1_closure:
         const Control.Monad.Fix.$fMonadFixFirst1_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Monad.Fix.$fMonadFixFirst1_entry() //  [R1]
         { []
         }
     {offset
       cbHli: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbHlj; else goto cbHlk;
       cbHlj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHlk: // global
           (_cbHld::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbHld::I64 == 0) goto cbHlf; else goto cbHle;
       cbHlf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbHle: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbHld::I64;
           I64[Sp - 24] = block_cbHlg_info;
           R2 = lvl_rbGDa_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixFirst1_info" {
     Control.Monad.Fix.$fMonadFixFirst1_info:
         const Control.Monad.Fix.$fMonadFixFirst1_entry;
         const 0;
         const 4294967317;
         const SbHlo_srt;
 },
 _cbHlg() //  [R1]
         { []
         }
     {offset
       cbHlg: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbHlg_info" {
     block_cbHlg_info:
         const _cbHlg;
         const 0;
         const 4294967326;
         const SbHlo_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.996580107 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixMaybe_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFixMaybe_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFixMaybe_$cmfix_info;
         const 0;
 },
 sat_sbHiC_entry() //  [R1]
         { []
         }
     {offset
       cbHlU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbHlV; else goto cbHlW;
       cbHlV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHlW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbHlN_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubHm3; else goto cbHlO;
       ubHm3: // global
           call _cbHlN(R1) args: 0, res: 0, upd: 0;
       cbHlO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHiC_info" {
     sat_sbHiC_info:
         const sat_sbHiC_entry;
         const 1;
         const 4294967312;
         const SbHlo_srt+8;
 },
 _cbHlN() //  [R1]
         { []
         }
     {offset
       cbHlN: // global
           if (R1 & 7 == 1) goto cbHlR; else goto cbHlS;
       cbHlR: // global
           R1 = Control.Monad.Fix.$fMonadFixFirst1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cbHlS: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbHlN_info" {
     block_cbHlN_info:
         const _cbHlN;
         const 0;
         const 4294967326;
         const SbHlo_srt+8;
 },
 a1_sbHiz_entry() //  [R1]
         { []
         }
     {offset
       cbHm4: // global
           _sbHiz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbHm5; else goto cbHm6;
       cbHm6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHm8; else goto cbHm7;
       cbHm8: // global
           HpAlloc = 24;
           goto cbHm5;
       cbHm5: // global
           R1 = _sbHiz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHm7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbHiz::P64;
           _sbHiy::P64 = P64[_sbHiz::P64 + 16];
           I64[Hp - 16] = sat_sbHiC_info;
           P64[Hp] = _sbHiz::P64;
           R2 = Hp - 16;
           R1 = _sbHiy::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . a1_sbHiz_info" {
     a1_sbHiz_info:
         const a1_sbHiz_entry;
         const 1;
         const 4294967312;
         const SbHlo_srt+8;
 },
 Control.Monad.Fix.$fMonadFixMaybe_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbHm9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHmd; else goto cbHmc;
       cbHmd: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixMaybe_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHmc: // global
           I64[Hp - 16] = a1_sbHiz_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixMaybe_$cmfix_info" {
     Control.Monad.Fix.$fMonadFixMaybe_$cmfix_info:
         const Control.Monad.Fix.$fMonadFixMaybe_$cmfix_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbHlo_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.004944053 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixMaybe_closure" {
     Control.Monad.Fix.$fMonadFixMaybe_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const GHC.Base.$fMonadMaybe_closure;
         const Control.Monad.Fix.$fMonadFixMaybe_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.009721102 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_closure" {
     Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_closure:
         const Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_info;
         const 0;
 },
 sat_sbHiF_entry() //  [R1]
         { []
         }
     {offset
       cbHmQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHmR; else goto cbHmS;
       cbHmR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHmS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.List.head_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHiF_info" {
     sat_sbHiF_info:
         const sat_sbHiF_entry;
         const 1;
         const 4294967312;
         const SbHlo_srt+24;
 },
 x_sbHiE_entry() //  [R1]
         { []
         }
     {offset
       cbHmT: // global
           _sbHiE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbHmU; else goto cbHmV;
       cbHmV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHmX; else goto cbHmW;
       cbHmX: // global
           HpAlloc = 24;
           goto cbHmU;
       cbHmU: // global
           R1 = _sbHiE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHmW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbHiE::P64;
           _sbHiD::P64 = P64[_sbHiE::P64 + 16];
           I64[Hp - 16] = sat_sbHiF_info;
           P64[Hp] = _sbHiE::P64;
           R2 = Hp - 16;
           R1 = _sbHiD::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . x_sbHiE_info" {
     x_sbHiE_info:
         const x_sbHiE_entry;
         const 1;
         const 4294967312;
         const SbHlo_srt+24;
 },
 sat_sbHiN_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHnj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbHnk; else goto cbHnl;
       cbHnk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHnl: // global
           I64[Sp - 8] = block_cbHnd_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbHiN_info" {
     sat_sbHiN_info:
         const sat_sbHiN_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SbHlo_srt+32;
 },
 _cbHnd() //  [R1]
         { []
         }
     {offset
       cbHnd: // global
           if (R1 & 7 == 1) goto cbHng; else goto cbHnh;
       cbHng: // global
           R1 = GHC.List.scanl2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cbHnh: // global
           R1 = P64[R1 + 14] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbHnd_info" {
     block_cbHnd_info:
         const _cbHnd;
         const 0;
         const 4294967326;
         const SbHlo_srt+32;
 },
 sat_sbHiO_entry() //  [R1]
         { []
         }
     {offset
       cbHns: // global
           _sbHiO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbHnt; else goto cbHnu;
       cbHnu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbHnw; else goto cbHnv;
       cbHnw: // global
           HpAlloc = 16;
           goto cbHnt;
       cbHnt: // global
           R1 = _sbHiO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHnv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbHiO::P64;
           _sbHiD::P64 = P64[_sbHiO::P64 + 16];
           I64[Hp - 8] = sat_sbHiN_info;
           P64[Hp] = _sbHiD::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHiO_info" {
     sat_sbHiO_info:
         const sat_sbHiO_entry;
         const 1;
         const 12884901904;
         const SbHlo_srt+32;
 },
 Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_entry() //  [R2]
         { []
         }
     {offset
       cbHnB: // global
           _sbHiD::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cbHnC; else goto cbHnD;
       cbHnD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHnF; else goto cbHnE;
       cbHnF: // global
           HpAlloc = 24;
           goto cbHnC;
       cbHnC: // global
           R2 = _sbHiD::P64;
           R1 = Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHnE: // global
           I64[Hp - 16] = x_sbHiE_info;
           P64[Hp] = _sbHiD::P64;
           I64[Sp - 16] = block_cbHmY_info;
           R1 = Hp - 16;
           P64[Sp - 8] = _sbHiD::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubHnM; else goto cbHmZ;
       ubHnM: // global
           call _cbHmY(R1) args: 0, res: 0, upd: 0;
       cbHmZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_info" {
     Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_info:
         const Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const SbHlo_srt+24;
 },
 _cbHmY() //  [R1]
         { []
         }
     {offset
       cbHmY: // global
           if (R1 & 7 == 1) goto cbHny; else goto cbHnz;
       cbHny: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbHnz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbHnL; else goto cbHnK;
       cbHnL: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbHnK: // global
           _sbHiH::P64 = P64[R1 + 6];
           I64[Hp - 40] = sat_sbHiO_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sbHiH::P64;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbHmY_info" {
     block_cbHmY_info:
         const _cbHmY;
         const 1;
         const 12884901918;
         const SbHlo_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.023664422 UTC

[section ""data" . Control.Monad.Fix.$fMonadFix[]_closure" {
     Control.Monad.Fix.$fMonadFix[]_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const GHC.Base.$fMonad[]_closure;
         const Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.028759458 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_info;
         const 0;
 },
 sat_sbHj3_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHoR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbHoS; else goto cbHoT;
       cbHoS: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHoT: // global
           I64[Sp - 8] = block_cbHoP_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbHj3_info" {
     sat_sbHj3_info:
         const sat_sbHj3_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cbHoP() //  [R1]
         { []
         }
     {offset
       cbHoP: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbHoP_info" {
     block_cbHoP_info:
         const _cbHoP;
         const 0;
         const 30;
 },
 sat_sbHj4_entry() //  [R1]
         { []
         }
     {offset
       cbHoX: // global
           _sbHj4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbHoY; else goto cbHoZ;
       cbHoZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbHp1; else goto cbHp0;
       cbHp1: // global
           HpAlloc = 16;
           goto cbHoY;
       cbHoY: // global
           R1 = _sbHj4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHp0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbHj4::P64;
           _sbHiP::P64 = P64[_sbHj4::P64 + 16];
           I64[Hp - 8] = sat_sbHj3_info;
           P64[Hp] = _sbHiP::P64;
           R2 = Hp - 7;
           Sp = Sp - 16;
           call Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHj4_info" {
     sat_sbHj4_info:
         const sat_sbHj4_entry;
         const 1;
         const 4294967312;
         const SbHlo_srt+40;
 },
 x_sbHiQ_entry() //  [R1]
         { []
         }
     {offset
       cbHpb: // global
           _sbHiQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbHpc; else goto cbHpd;
       cbHpd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHpf; else goto cbHpe;
       cbHpf: // global
           HpAlloc = 24;
           goto cbHpc;
       cbHpc: // global
           R1 = _sbHiQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHpe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbHiQ::P64;
           _sbHiP::P64 = P64[_sbHiQ::P64 + 16];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sbHiQ::P64;
           R2 = Hp - 16;
           R1 = _sbHiP::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . x_sbHiQ_info" {
     x_sbHiQ_info:
         const x_sbHiQ_entry;
         const 1;
         const 16;
 },
 sat_sbHiY_entry() //  [R1]
         { []
         }
     {offset
       cbHpj: // global
           _sbHiY::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cbHpk; else goto cbHpl;
       cbHpl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHpn; else goto cbHpm;
       cbHpn: // global
           HpAlloc = 24;
           goto cbHpk;
       cbHpk: // global
           R1 = _sbHiY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHpm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbHiY::P64;
           _sbHiP::P64 = P64[_sbHiY::P64 + 16];
           I64[Hp - 16] = x_sbHiQ_info;
           P64[Hp] = _sbHiP::P64;
           I64[Sp - 24] = block_cbHpg_info;
           R1 = Hp - 16;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubHpr; else goto cbHph;
       ubHpr: // global
           call _cbHpg(R1) args: 0, res: 0, upd: 0;
       cbHph: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHiY_info" {
     sat_sbHiY_info:
         const sat_sbHiY_entry;
         const 1;
         const 16;
 },
 _cbHpg() //  [R1]
         { []
         }
     {offset
       cbHpg: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbHpg_info" {
     block_cbHpg_info:
         const _cbHpg;
         const 0;
         const 30;
 },
 Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbHpt: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbHpx; else goto cbHpw;
       cbHpx: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHpw: // global
           I64[Hp - 64] = sat_sbHj4_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sbHiY_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_info" {
     Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_info:
         const Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbHlo_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.042149306 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixNonEmpty_closure" {
     Control.Monad.Fix.$fMonadFixNonEmpty_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const GHC.Base.$fMonadNonEmpty_closure;
         const Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.043818724 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixIO_closure" {
     Control.Monad.Fix.$fMonadFixIO_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const GHC.Base.$fMonadIO_closure;
         const System.IO.fixIO1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.046167739 UTC

[section ""data" . Control.Monad.Fix.$fMonadFix(->)_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFix(->)_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFix(->)_$cmfix_info;
 },
 Control.Monad.Fix.$fMonadFix(->)_$cmfix_entry() //  [R2, R3]
         { []
         }
     {offset
       cbHqm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbHqq; else goto cbHqp;
       cbHqq: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFix(->)_$cmfix_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbHqp: // global
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = R2;
           _cbHql::P64 = Hp - 32;
           P64[Hp - 8] = _cbHql::P64;
           P64[Hp] = R3;
           R1 = _cbHql::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFix(->)_$cmfix_info" {
     Control.Monad.Fix.$fMonadFix(->)_$cmfix_info:
         const Control.Monad.Fix.$fMonadFix(->)_$cmfix_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.049833523 UTC

[section ""data" . Control.Monad.Fix.$fMonadFix(->)_closure" {
     Control.Monad.Fix.$fMonadFix(->)_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const GHC.Base.$fMonad(->)_closure;
         const Control.Monad.Fix.$fMonadFix(->)_$cmfix_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.051570081 UTC

[section ""cstring" . lvl1_rbGDb_bytes" {
     lvl1_rbGDb_bytes:
         I8[] [109,102,105,120,32,69,105,116,104,101,114,58,32,76,101,102,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.054004524 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixEither1_closure" {
     Control.Monad.Fix.$fMonadFixEither1_closure:
         const Control.Monad.Fix.$fMonadFixEither1_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Monad.Fix.$fMonadFixEither1_entry() //  [R1]
         { []
         }
     {offset
       cbHqG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbHqH; else goto cbHqI;
       cbHqH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHqI: // global
           (_cbHqB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbHqB::I64 == 0) goto cbHqD; else goto cbHqC;
       cbHqD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbHqC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbHqB::I64;
           I64[Sp - 24] = block_cbHqE_info;
           R2 = lvl1_rbGDb_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixEither1_info" {
     Control.Monad.Fix.$fMonadFixEither1_info:
         const Control.Monad.Fix.$fMonadFixEither1_entry;
         const 0;
         const 4294967317;
         const SbHlo_srt;
 },
 _cbHqE() //  [R1]
         { []
         }
     {offset
       cbHqE: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbHqE_info" {
     block_cbHqE_info:
         const _cbHqE;
         const 0;
         const 4294967326;
         const SbHlo_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.06093593 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixEither_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFixEither_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFixEither_$cmfix_info;
         const 0;
 },
 sat_sbHje_entry() //  [R1]
         { []
         }
     {offset
       cbHrh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbHri; else goto cbHrj;
       cbHri: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHrj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbHra_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubHrq; else goto cbHrb;
       ubHrq: // global
           call _cbHra(R1) args: 0, res: 0, upd: 0;
       cbHrb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHje_info" {
     sat_sbHje_info:
         const sat_sbHje_entry;
         const 1;
         const 4294967312;
         const SbHlo_srt+56;
 },
 _cbHra() //  [R1]
         { []
         }
     {offset
       cbHra: // global
           if (R1 & 7 == 1) goto cbHre; else goto cbHrf;
       cbHre: // global
           R1 = Control.Monad.Fix.$fMonadFixEither1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cbHrf: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbHra_info" {
     block_cbHra_info:
         const _cbHra;
         const 0;
         const 4294967326;
         const SbHlo_srt+56;
 },
 a1_sbHja_entry() //  [R1]
         { []
         }
     {offset
       cbHrr: // global
           _sbHja::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbHrs; else goto cbHrt;
       cbHrt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHrv; else goto cbHru;
       cbHrv: // global
           HpAlloc = 24;
           goto cbHrs;
       cbHrs: // global
           R1 = _sbHja::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHru: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbHja::P64;
           _sbHj9::P64 = P64[_sbHja::P64 + 16];
           I64[Hp - 16] = sat_sbHje_info;
           P64[Hp] = _sbHja::P64;
           R2 = Hp - 16;
           R1 = _sbHj9::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . a1_sbHja_info" {
     a1_sbHja_info:
         const a1_sbHja_entry;
         const 1;
         const 4294967312;
         const SbHlo_srt+56;
 },
 Control.Monad.Fix.$fMonadFixEither_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbHrw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHrA; else goto cbHrz;
       cbHrA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixEither_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHrz: // global
           I64[Hp - 16] = a1_sbHja_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixEither_$cmfix_info" {
     Control.Monad.Fix.$fMonadFixEither_$cmfix_info:
         const Control.Monad.Fix.$fMonadFixEither_$cmfix_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbHlo_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.069647645 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixEither_closure" {
     Control.Monad.Fix.$fMonadFixEither_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Either.$fMonadEither_closure;
         const Control.Monad.Fix.$fMonadFixEither_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.071441293 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixST_closure" {
     Control.Monad.Fix.$fMonadFixST_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const GHC.ST.$fMonadST_closure;
         const GHC.ST.fixST1_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.073805079 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixDual_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFixDual_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFixDual_$cmfix_info;
 },
 Control.Monad.Fix.$fMonadFixDual_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbHs7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbHsb; else goto cbHsa;
       cbHsb: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixDual_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHsa: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R2;
           _cbHs6::P64 = Hp - 24;
           P64[Hp] = _cbHs6::P64;
           R1 = _cbHs6::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixDual_$cmfix_info" {
     Control.Monad.Fix.$fMonadFixDual_$cmfix_info:
         const Control.Monad.Fix.$fMonadFixDual_$cmfix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.07717866 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixDual_closure" {
     Control.Monad.Fix.$fMonadFixDual_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Semigroup.Internal.$fMonadDual_closure;
         const Control.Monad.Fix.$fMonadFixDual_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.079688713 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixSum_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFixSum_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFixSum_$cmfix_info;
 },
 Control.Monad.Fix.$fMonadFixSum_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbHsn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbHsr; else goto cbHsq;
       cbHsr: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixSum_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHsq: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R2;
           _cbHsm::P64 = Hp - 24;
           P64[Hp] = _cbHsm::P64;
           R1 = _cbHsm::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixSum_$cmfix_info" {
     Control.Monad.Fix.$fMonadFixSum_$cmfix_info:
         const Control.Monad.Fix.$fMonadFixSum_$cmfix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.083092925 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixSum_closure" {
     Control.Monad.Fix.$fMonadFixSum_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Semigroup.Internal.$fMonadSum_closure;
         const Control.Monad.Fix.$fMonadFixSum_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.085219977 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixProduct_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFixProduct_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFixProduct_$cmfix_info;
 },
 Control.Monad.Fix.$fMonadFixProduct_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbHsD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbHsH; else goto cbHsG;
       cbHsH: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixProduct_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHsG: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R2;
           _cbHsC::P64 = Hp - 24;
           P64[Hp] = _cbHsC::P64;
           R1 = _cbHsC::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixProduct_$cmfix_info" {
     Control.Monad.Fix.$fMonadFixProduct_$cmfix_info:
         const Control.Monad.Fix.$fMonadFixProduct_$cmfix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.089053095 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixProduct_closure" {
     Control.Monad.Fix.$fMonadFixProduct_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Semigroup.Internal.$fMonadProduct_closure;
         const Control.Monad.Fix.$fMonadFixProduct_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.092940305 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixFirst_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFixFirst_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFixFirst_$cmfix_info;
         const 0;
 },
 sat_sbHjp_entry() //  [R1]
         { []
         }
     {offset
       cbHt7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbHt8; else goto cbHt9;
       cbHt8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHt9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbHt0_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubHtg; else goto cbHt1;
       ubHtg: // global
           call _cbHt0(R1) args: 0, res: 0, upd: 0;
       cbHt1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHjp_info" {
     sat_sbHjp_info:
         const sat_sbHjp_entry;
         const 1;
         const 4294967312;
         const SbHlo_srt+8;
 },
 _cbHt0() //  [R1]
         { []
         }
     {offset
       cbHt0: // global
           if (R1 & 7 == 1) goto cbHt4; else goto cbHt5;
       cbHt4: // global
           R1 = Control.Monad.Fix.$fMonadFixFirst1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cbHt5: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbHt0_info" {
     block_cbHt0_info:
         const _cbHt0;
         const 0;
         const 4294967326;
         const SbHlo_srt+8;
 },
 a1_sbHjm_entry() //  [R1]
         { []
         }
     {offset
       cbHth: // global
           _sbHjm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbHti; else goto cbHtj;
       cbHtj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHtl; else goto cbHtk;
       cbHtl: // global
           HpAlloc = 24;
           goto cbHti;
       cbHti: // global
           R1 = _sbHjm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHtk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbHjm::P64;
           _sbHjl::P64 = P64[_sbHjm::P64 + 16];
           I64[Hp - 16] = sat_sbHjp_info;
           P64[Hp] = _sbHjm::P64;
           R2 = Hp - 16;
           R1 = _sbHjl::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . a1_sbHjm_info" {
     a1_sbHjm_info:
         const a1_sbHjm_entry;
         const 1;
         const 4294967312;
         const SbHlo_srt+8;
 },
 Control.Monad.Fix.$fMonadFixFirst_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbHtm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHtq; else goto cbHtp;
       cbHtq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixFirst_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHtp: // global
           I64[Hp - 16] = a1_sbHjm_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixFirst_$cmfix_info" {
     Control.Monad.Fix.$fMonadFixFirst_$cmfix_info:
         const Control.Monad.Fix.$fMonadFixFirst_$cmfix_entry;
         const 0;
         const 1103806595086;
         const 4294967301;
         const SbHlo_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.101193707 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixFirst_closure" {
     Control.Monad.Fix.$fMonadFixFirst_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Monoid.$fMonadFirst_closure;
         const Control.Monad.Fix.$fMonadFixFirst_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.104603752 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixLast_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFixLast_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFixLast_$cmfix_info;
         const 0;
 },
 sat_sbHju_entry() //  [R1]
         { []
         }
     {offset
       cbHua: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbHub; else goto cbHuc;
       cbHub: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHuc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbHu3_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubHuj; else goto cbHu4;
       ubHuj: // global
           call _cbHu3(R1) args: 0, res: 0, upd: 0;
       cbHu4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHju_info" {
     sat_sbHju_info:
         const sat_sbHju_entry;
         const 1;
         const 4294967312;
         const SbHlo_srt+8;
 },
 _cbHu3() //  [R1]
         { []
         }
     {offset
       cbHu3: // global
           if (R1 & 7 == 1) goto cbHu7; else goto cbHu8;
       cbHu7: // global
           R1 = Control.Monad.Fix.$fMonadFixFirst1_closure;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
       cbHu8: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbHu3_info" {
     block_cbHu3_info:
         const _cbHu3;
         const 0;
         const 4294967326;
         const SbHlo_srt+8;
 },
 a1_sbHjr_entry() //  [R1]
         { []
         }
     {offset
       cbHuk: // global
           _sbHjr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbHul; else goto cbHum;
       cbHum: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHuo; else goto cbHun;
       cbHuo: // global
           HpAlloc = 24;
           goto cbHul;
       cbHul: // global
           R1 = _sbHjr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHun: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbHjr::P64;
           _sbHjq::P64 = P64[_sbHjr::P64 + 16];
           I64[Hp - 16] = sat_sbHju_info;
           P64[Hp] = _sbHjr::P64;
           R2 = Hp - 16;
           R1 = _sbHjq::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . a1_sbHjr_info" {
     a1_sbHjr_info:
         const a1_sbHjr_entry;
         const 1;
         const 4294967312;
         const SbHlo_srt+8;
 },
 Control.Monad.Fix.$fMonadFixLast_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbHup: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHut; else goto cbHus;
       cbHut: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixLast_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHus: // global
           I64[Hp - 16] = a1_sbHjr_info;
           P64[Hp] = R2;
           R1 = (Hp + -16) & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixLast_$cmfix_info" {
     Control.Monad.Fix.$fMonadFixLast_$cmfix_info:
         const Control.Monad.Fix.$fMonadFixLast_$cmfix_entry;
         const 0;
         const 2203318222862;
         const 4294967301;
         const SbHlo_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.113350097 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixLast_closure" {
     Control.Monad.Fix.$fMonadFixLast_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const Data.Monoid.$fMonadLast_closure;
         const Control.Monad.Fix.$fMonadFixLast_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.115908992 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixAlt1_closure" {
     Control.Monad.Fix.$fMonadFixAlt1_closure:
         const Control.Monad.Fix.$fMonadFixAlt1_info;
 },
 sat_sbHjy_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHv3: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbHjy_info" {
     sat_sbHjy_info:
         const sat_sbHjy_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Control.Monad.Fix.$fMonadFixAlt1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbHv6: // global
           _sbHjw::P64 = R3;
           _sbHjv::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cbHv7; else goto cbHv8;
       cbHv8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbHva; else goto cbHv9;
       cbHva: // global
           HpAlloc = 16;
           goto cbHv7;
       cbHv7: // global
           R3 = _sbHjw::P64;
           R2 = _sbHjv::P64;
           R1 = Control.Monad.Fix.$fMonadFixAlt1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbHv9: // global
           I64[Hp - 8] = sat_sbHjy_info;
           P64[Hp] = _sbHjw::P64;
           R2 = _sbHjv::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 16;
           call Control.Monad.Fix.mfix_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixAlt1_info" {
     Control.Monad.Fix.$fMonadFixAlt1_info:
         const Control.Monad.Fix.$fMonadFixAlt1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.121403213 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixAlt_$cp1MonadFix_closure" {
     Control.Monad.Fix.$fMonadFixAlt_$cp1MonadFix_closure:
         const Control.Monad.Fix.$fMonadFixAlt_$cp1MonadFix_info;
 },
 sat_sbHjA_entry() //  [R1]
         { []
         }
     {offset
       cbHvu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHvv; else goto cbHvw;
       cbHvv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHvw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$p1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHjA_info" {
     sat_sbHjA_info:
         const sat_sbHjA_entry;
         const 1;
         const 16;
 },
 Control.Monad.Fix.$fMonadFixAlt_$cp1MonadFix_entry() //  [R2]
         { []
         }
     {offset
       cbHvx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHvB; else goto cbHvA;
       cbHvB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixAlt_$cp1MonadFix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHvA: // global
           I64[Hp - 16] = sat_sbHjA_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call Data.Semigroup.Internal.$fMonadAlt_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixAlt_$cp1MonadFix_info" {
     Control.Monad.Fix.$fMonadFixAlt_$cp1MonadFix_info:
         const Control.Monad.Fix.$fMonadFixAlt_$cp1MonadFix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.128137257 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixAlt_closure" {
     Control.Monad.Fix.$fMonadFixAlt_closure:
         const Control.Monad.Fix.$fMonadFixAlt_info;
 },
 sat_sbHjD_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHvV: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Control.Monad.Fix.$fMonadFixAlt1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbHjD_info" {
     sat_sbHjD_info:
         const sat_sbHjD_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbHjC_entry() //  [R1]
         { []
         }
     {offset
       cbHw2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHw3; else goto cbHw4;
       cbHw3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHw4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$fMonadFixAlt_$cp1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHjC_info" {
     sat_sbHjC_info:
         const sat_sbHjC_entry;
         const 1;
         const 16;
 },
 Control.Monad.Fix.$fMonadFixAlt_entry() //  [R2]
         { []
         }
     {offset
       cbHw6: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbHwa; else goto cbHw9;
       cbHwa: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixAlt_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHw9: // global
           I64[Hp - 56] = sat_sbHjD_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sbHjC_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Control.Monad.Fix.C:MonadFix_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 55;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixAlt_info" {
     Control.Monad.Fix.$fMonadFixAlt_info:
         const Control.Monad.Fix.$fMonadFixAlt_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.135252072 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixPar1_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFixPar1_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFixPar1_$cmfix_info;
 },
 Control.Monad.Fix.$fMonadFixPar1_$cmfix_entry() //  [R2]
         { []
         }
     {offset
       cbHwy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbHwC; else goto cbHwB;
       cbHwC: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixPar1_$cmfix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHwB: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = R2;
           _cbHwx::P64 = Hp - 24;
           P64[Hp] = _cbHwx::P64;
           R1 = _cbHwx::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixPar1_$cmfix_info" {
     Control.Monad.Fix.$fMonadFixPar1_$cmfix_info:
         const Control.Monad.Fix.$fMonadFixPar1_$cmfix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.138627269 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixPar1_closure" {
     Control.Monad.Fix.$fMonadFixPar1_closure:
         const Control.Monad.Fix.C:MonadFix_con_info;
         const GHC.Generics.$fMonadPar1_closure;
         const Control.Monad.Fix.$fMonadFixPar1_$cmfix_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.141051321 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixRec2_closure" {
     Control.Monad.Fix.$fMonadFixRec2_closure:
         const Control.Monad.Fix.$fMonadFixRec2_info;
 },
 sat_sbHjJ_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHwS: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbHjJ_info" {
     sat_sbHjJ_info:
         const sat_sbHjJ_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Control.Monad.Fix.$fMonadFixRec2_entry() //  [R2, R3]
         { []
         }
     {offset
       cbHwV: // global
           _sbHjH::P64 = R3;
           _sbHjG::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cbHwW; else goto cbHwX;
       cbHwX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbHwZ; else goto cbHwY;
       cbHwZ: // global
           HpAlloc = 16;
           goto cbHwW;
       cbHwW: // global
           R3 = _sbHjH::P64;
           R2 = _sbHjG::P64;
           R1 = Control.Monad.Fix.$fMonadFixRec2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbHwY: // global
           I64[Hp - 8] = sat_sbHjJ_info;
           P64[Hp] = _sbHjH::P64;
           R2 = _sbHjG::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 16;
           call Control.Monad.Fix.mfix_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixRec2_info" {
     Control.Monad.Fix.$fMonadFixRec2_info:
         const Control.Monad.Fix.$fMonadFixRec2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.146730974 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_closure" {
     Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_closure:
         const Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_info;
         const 0;
 },
 sat_sbHjL_entry() //  [R1]
         { []
         }
     {offset
       cbHxj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHxk; else goto cbHxl;
       cbHxk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHxl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$p1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHjL_info" {
     sat_sbHjL_info:
         const sat_sbHjL_entry;
         const 1;
         const 16;
 },
 Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_entry() //  [R2]
         { []
         }
     {offset
       cbHxm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHxq; else goto cbHxp;
       cbHxq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHxp: // global
           I64[Hp - 16] = sat_sbHjL_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Generics.$fMonadRec1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_info" {
     Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_info:
         const Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbHlo_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.152645432 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixRec1_closure" {
     Control.Monad.Fix.$fMonadFixRec1_closure:
         const Control.Monad.Fix.$fMonadFixRec1_info;
         const 0;
 },
 sat_sbHjO_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHxK: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Control.Monad.Fix.$fMonadFixRec2_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbHjO_info" {
     sat_sbHjO_info:
         const sat_sbHjO_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbHjN_entry() //  [R1]
         { []
         }
     {offset
       cbHxR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHxS; else goto cbHxT;
       cbHxS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHxT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHjN_info" {
     sat_sbHjN_info:
         const sat_sbHjN_entry;
         const 1;
         const 4294967312;
         const SbHlo_srt+96;
 },
 Control.Monad.Fix.$fMonadFixRec1_entry() //  [R2]
         { []
         }
     {offset
       cbHxV: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbHxZ; else goto cbHxY;
       cbHxZ: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixRec1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHxY: // global
           I64[Hp - 56] = sat_sbHjO_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sbHjN_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Control.Monad.Fix.C:MonadFix_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 55;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixRec1_info" {
     Control.Monad.Fix.$fMonadFixRec1_info:
         const Control.Monad.Fix.$fMonadFixRec1_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SbHlo_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.160254261 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixM2_closure" {
     Control.Monad.Fix.$fMonadFixM2_closure:
         const Control.Monad.Fix.$fMonadFixM2_info;
 },
 sat_sbHjS_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHyr: // global
           R2 = R2;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbHjS_info" {
     sat_sbHjS_info:
         const sat_sbHjS_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Control.Monad.Fix.$fMonadFixM2_entry() //  [R2, R3]
         { []
         }
     {offset
       cbHyu: // global
           _sbHjQ::P64 = R3;
           _sbHjP::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cbHyv; else goto cbHyw;
       cbHyw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbHyy; else goto cbHyx;
       cbHyy: // global
           HpAlloc = 16;
           goto cbHyv;
       cbHyv: // global
           R3 = _sbHjQ::P64;
           R2 = _sbHjP::P64;
           R1 = Control.Monad.Fix.$fMonadFixM2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbHyx: // global
           I64[Hp - 8] = sat_sbHjS_info;
           P64[Hp] = _sbHjQ::P64;
           R2 = _sbHjP::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = Hp - 7;
           Sp = Sp - 16;
           call Control.Monad.Fix.mfix_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixM2_info" {
     Control.Monad.Fix.$fMonadFixM2_info:
         const Control.Monad.Fix.$fMonadFixM2_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.166164404 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixM1_$cp1MonadFix_closure" {
     Control.Monad.Fix.$fMonadFixM1_$cp1MonadFix_closure:
         const Control.Monad.Fix.$fMonadFixM1_$cp1MonadFix_info;
 },
 sat_sbHjU_entry() //  [R1]
         { []
         }
     {offset
       cbHyS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHyT; else goto cbHyU;
       cbHyT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHyU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$p1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHjU_info" {
     sat_sbHjU_info:
         const sat_sbHjU_entry;
         const 1;
         const 16;
 },
 Control.Monad.Fix.$fMonadFixM1_$cp1MonadFix_entry() //  [R2]
         { []
         }
     {offset
       cbHyV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHyZ; else goto cbHyY;
       cbHyZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixM1_$cp1MonadFix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHyY: // global
           I64[Hp - 16] = sat_sbHjU_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.Generics.$fMonadM1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixM1_$cp1MonadFix_info" {
     Control.Monad.Fix.$fMonadFixM1_$cp1MonadFix_info:
         const Control.Monad.Fix.$fMonadFixM1_$cp1MonadFix_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.172066647 UTC

[section ""data" . Control.Monad.Fix.$fMonadFixM1_closure" {
     Control.Monad.Fix.$fMonadFixM1_closure:
         const Control.Monad.Fix.$fMonadFixM1_info;
 },
 sat_sbHjX_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHzj: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Control.Monad.Fix.$fMonadFixM2_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbHjX_info" {
     sat_sbHjX_info:
         const sat_sbHjX_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_sbHjW_entry() //  [R1]
         { []
         }
     {offset
       cbHzq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHzr; else goto cbHzs;
       cbHzr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHzs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$fMonadFixM1_$cp1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHjW_info" {
     sat_sbHjW_info:
         const sat_sbHjW_entry;
         const 1;
         const 16;
 },
 Control.Monad.Fix.$fMonadFixM1_entry() //  [R2]
         { []
         }
     {offset
       cbHzu: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbHzy; else goto cbHzx;
       cbHzy: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFixM1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHzx: // global
           I64[Hp - 56] = sat_sbHjX_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sbHjW_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = Control.Monad.Fix.C:MonadFix_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 55;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFixM1_info" {
     Control.Monad.Fix.$fMonadFixM1_info:
         const Control.Monad.Fix.$fMonadFixM1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.18144493 UTC

[section ""data" . Control.Monad.Fix.$fMonadFix:*:_$cmfix_closure" {
     Control.Monad.Fix.$fMonadFix:*:_$cmfix_closure:
         const Control.Monad.Fix.$fMonadFix:*:_$cmfix_info;
 },
 sat_sbHkb_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHA6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbHA7; else goto cbHA8;
       cbHA7: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHA8: // global
           I64[Sp - 8] = block_cbHA4_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbHkb_info" {
     sat_sbHkb_info:
         const sat_sbHkb_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cbHA4() //  [R1]
         { []
         }
     {offset
       cbHA4: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbHA4_info" {
     block_cbHA4_info:
         const _cbHA4;
         const 0;
         const 30;
 },
 sat_sbHkc_entry() //  [R1]
         { []
         }
     {offset
       cbHAc: // global
           _sbHkc::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cbHAd; else goto cbHAe;
       cbHAe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbHAg; else goto cbHAf;
       cbHAg: // global
           HpAlloc = 16;
           goto cbHAd;
       cbHAd: // global
           R1 = _sbHkc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHAf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbHkc::P64;
           _sbHjZ::P64 = P64[_sbHkc::P64 + 16];
           _sbHk0::P64 = P64[_sbHkc::P64 + 24];
           I64[Hp - 8] = sat_sbHkb_info;
           P64[Hp] = _sbHk0::P64;
           R2 = _sbHjZ::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Control.Monad.Fix.mfix_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHkc_info" {
     sat_sbHkc_info:
         const sat_sbHkc_entry;
         const 2;
         const 18;
 },
 sat_sbHk5_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHAs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbHAt; else goto cbHAu;
       cbHAt: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbHAu: // global
           I64[Sp - 8] = block_cbHAq_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbHk5_info" {
     sat_sbHk5_info:
         const sat_sbHk5_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cbHAq() //  [R1]
         { []
         }
     {offset
       cbHAq: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbHAq_info" {
     block_cbHAq_info:
         const _cbHAq;
         const 0;
         const 30;
 },
 sat_sbHk6_entry() //  [R1]
         { []
         }
     {offset
       cbHAy: // global
           _sbHk6::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cbHAz; else goto cbHAA;
       cbHAA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbHAC; else goto cbHAB;
       cbHAC: // global
           HpAlloc = 16;
           goto cbHAz;
       cbHAz: // global
           R1 = _sbHk6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHAB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbHk6::P64;
           _sbHjY::P64 = P64[_sbHk6::P64 + 16];
           _sbHk0::P64 = P64[_sbHk6::P64 + 24];
           I64[Hp - 8] = sat_sbHk5_info;
           P64[Hp] = _sbHk0::P64;
           R2 = _sbHjY::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 7;
           Sp = Sp - 32;
           call Control.Monad.Fix.mfix_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHk6_info" {
     sat_sbHk6_info:
         const sat_sbHk6_entry;
         const 2;
         const 18;
 },
 Control.Monad.Fix.$fMonadFix:*:_$cmfix_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbHAE: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cbHAI; else goto cbHAH;
       cbHAI: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFix:*:_$cmfix_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbHAH: // global
           I64[Hp - 80] = sat_sbHkc_info;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           I64[Hp - 48] = sat_sbHk6_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = GHC.Generics.:*:_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFix:*:_$cmfix_info" {
     Control.Monad.Fix.$fMonadFix:*:_$cmfix_info:
         const Control.Monad.Fix.$fMonadFix:*:_$cmfix_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.196028132 UTC

[section ""data" . Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_closure" {
     Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_closure:
         const Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_info;
         const 0;
 },
 sat_sbHkg_entry() //  [R1]
         { []
         }
     {offset
       cbHBx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHBy; else goto cbHBz;
       cbHBy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHBz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$p1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHkg_info" {
     sat_sbHkg_info:
         const sat_sbHkg_entry;
         const 1;
         const 16;
 },
 sat_sbHkf_entry() //  [R1]
         { []
         }
     {offset
       cbHBE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHBF; else goto cbHBG;
       cbHBF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHBG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$p1MonadFix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHkf_info" {
     sat_sbHkf_info:
         const sat_sbHkf_entry;
         const 1;
         const 16;
 },
 Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_entry() //  [R2, R3]
         { []
         }
     {offset
       cbHBH: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbHBL; else goto cbHBK;
       cbHBL: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbHBK: // global
           I64[Hp - 40] = sat_sbHkg_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sbHkf_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call GHC.Generics.$fMonad:*:_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_info" {
     Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_info:
         const Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SbHlo_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.204464018 UTC

[section ""data" . Control.Monad.Fix.$fMonadFix:*:_closure" {
     Control.Monad.Fix.$fMonadFix:*:_closure:
         const Control.Monad.Fix.$fMonadFix:*:_info;
         const 0;
 },
 sat_sbHkk_entry() //  [R1, R2]
         { []
         }
     {offset
       cbHCb: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Control.Monad.Fix.$fMonadFix:*:_$cmfix_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbHkk_info" {
     sat_sbHkk_info:
         const sat_sbHkk_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_sbHkj_entry() //  [R1]
         { []
         }
     {offset
       cbHCi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbHCj; else goto cbHCk;
       cbHCj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbHCk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_entry(R3,
                                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbHkj_info" {
     sat_sbHkj_info:
         const sat_sbHkj_entry;
         const 2;
         const 4294967314;
         const SbHlo_srt+120;
 },
 Control.Monad.Fix.$fMonadFix:*:_entry() //  [R2, R3]
         { []
         }
     {offset
       cbHCm: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cbHCq; else goto cbHCp;
       cbHCq: // global
           HpAlloc = 80;
           R3 = R3;
           R2 = R2;
           R1 = Control.Monad.Fix.$fMonadFix:*:_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbHCp: // global
           I64[Hp - 72] = sat_sbHkk_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_sbHkj_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = Control.Monad.Fix.C:MonadFix_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 71;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.$fMonadFix:*:_info" {
     Control.Monad.Fix.$fMonadFix:*:_info:
         const Control.Monad.Fix.$fMonadFix:*:_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SbHlo_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.211019971 UTC

[section ""cstring" . Control.Monad.Fix.$trModule4_bytes" {
     Control.Monad.Fix.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.212682319 UTC

[section ""data" . Control.Monad.Fix.$trModule3_closure" {
     Control.Monad.Fix.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Monad.Fix.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.214358317 UTC

[section ""cstring" . Control.Monad.Fix.$trModule2_bytes" {
     Control.Monad.Fix.$trModule2_bytes:
         I8[] [67,111,110,116,114,111,108,46,77,111,110,97,100,46,70,105,120]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.216140496 UTC

[section ""data" . Control.Monad.Fix.$trModule1_closure" {
     Control.Monad.Fix.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Monad.Fix.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.218182312 UTC

[section ""data" . Control.Monad.Fix.$trModule_closure" {
     Control.Monad.Fix.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Control.Monad.Fix.$trModule3_closure+1;
         const Control.Monad.Fix.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.219927722 UTC

[section ""data" . $krep_rbGDc_closure" {
     $krep_rbGDc_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.221653459 UTC

[section ""data" . Control.Monad.Fix.$tcMonadFix1_closure" {
     Control.Monad.Fix.$tcMonadFix1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*Arr*_closure;
         const $krep_rbGDc_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.2233417 UTC

[section ""cstring" . Control.Monad.Fix.$tcMonadFix3_bytes" {
     Control.Monad.Fix.$tcMonadFix3_bytes:
         I8[] [77,111,110,97,100,70,105,120]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.225008552 UTC

[section ""data" . Control.Monad.Fix.$tcMonadFix2_closure" {
     Control.Monad.Fix.$tcMonadFix2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Monad.Fix.$tcMonadFix3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.227300905 UTC

[section ""data" . Control.Monad.Fix.$tcMonadFix_closure" {
     Control.Monad.Fix.$tcMonadFix_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Monad.Fix.$trModule_closure+1;
         const Control.Monad.Fix.$tcMonadFix2_closure+1;
         const Control.Monad.Fix.$tcMonadFix1_closure+4;
         const 9994897379720692231;
         const 15179622530544898162;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.229734331 UTC

[section ""data" . Control.Monad.Fix.C:MonadFix_closure" {
     Control.Monad.Fix.C:MonadFix_closure:
         const Control.Monad.Fix.C:MonadFix_info;
 },
 Control.Monad.Fix.C:MonadFix_entry() //  [R2, R3]
         { []
         }
     {offset
       cbHCY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbHD2; else goto cbHD1;
       cbHD2: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Control.Monad.Fix.C:MonadFix_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbHD1: // global
           I64[Hp - 16] = Control.Monad.Fix.C:MonadFix_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.C:MonadFix_info" {
     Control.Monad.Fix.C:MonadFix_info:
         const Control.Monad.Fix.C:MonadFix_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.233975265 UTC

[section ""cstring" . ibHDa_str" {
     ibHDa_str:
         I8[] [98,97,115,101,58,67,111,110,116,114,111,108,46,77,111,110,97,100,46,70,105,120,46,67,58,77,111,110,97,100,70,105,120]
 },
 Control.Monad.Fix.C:MonadFix_con_entry() //  [R1]
         { []
         }
     {offset
       cbHD9: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Monad.Fix.C:MonadFix_con_info" {
     Control.Monad.Fix.C:MonadFix_con_info:
         const Control.Monad.Fix.C:MonadFix_con_entry;
         const 2;
         const 4;
         const ibHDa_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:35.23701554 UTC

[section ""relreadonly" . SbHlo_srt" {
     SbHlo_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Control.Monad.Fix.$fMonadFixFirst1_closure;
         const Control.Monad.Fix.$fMonadFixMaybe_$cmfix_closure;
         const GHC.List.head_closure;
         const GHC.List.scanl2_closure;
         const Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix1_closure;
         const Control.Monad.Fix.$fMonadFixNonEmpty_$cmfix_closure;
         const Control.Monad.Fix.$fMonadFixEither1_closure;
         const Control.Monad.Fix.$fMonadFixEither_$cmfix_closure;
         const Control.Monad.Fix.$fMonadFixFirst_$cmfix_closure;
         const Control.Monad.Fix.$fMonadFixLast_$cmfix_closure;
         const GHC.Generics.$fMonadRec1_closure;
         const Control.Monad.Fix.$fMonadFixRec1_$cp1MonadFix_closure;
         const Control.Monad.Fix.$fMonadFixRec1_closure;
         const GHC.Generics.$fMonad:*:_closure;
         const Control.Monad.Fix.$fMonadFix:*:_$cp1MonadFix_closure;
         const Control.Monad.Fix.$fMonadFix:*:_closure;
 }]

