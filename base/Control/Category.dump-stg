
==================== Pre unarise: ====================
2018-03-16 16:00:08.312109178 UTC

Control.Category.id
  :: forall k (cat :: k -> k -> *).
     Control.Category.Category cat =>
     forall (a :: k). cat a a
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_s5bdv]
        case v_s5bdv of {
          Control.Category.C:Category v_s5bdx [Occ=Once] _ [Occ=Dead] ->
              v_s5bdx;
        };

Control.Category..
  :: forall k (cat :: k -> k -> *).
     Control.Category.Category cat =>
     forall (b :: k) (c :: k) (a :: k). cat b c -> cat a b -> cat a c
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_s5bdz]
        case v_s5bdz of {
          Control.Category.C:Category _ [Occ=Dead] v_s5bdC [Occ=Once] ->
              v_s5bdC;
        };

Control.Category.$fCategoryTYPE(->) [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Category.Category (->)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Category.C:Category! [GHC.Base.id
                                                GHC.Base..];

Control.Category.$fCategoryk:~:_$c.
  :: forall k (b :: k) (c :: k) (a :: k).
     (b Data.Type.Equality.:~: c)
     -> (a Data.Type.Equality.:~: b) -> a Data.Type.Equality.:~: c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s5bdD ds1_s5bdE]
        case ds_s5bdD of {
          Data.Type.Equality.Refl co_a5b8Z ->
              case ds1_s5bdE of {
                Data.Type.Equality.Refl co1_a5b90 -> Data.Type.Equality.$WRefl;
              };
        };

Control.Category.$fCategoryk:~: [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k. Control.Category.Category (Data.Type.Equality.:~:)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Category.C:Category! [Data.Type.Equality.$WRefl
                                                Control.Category.$fCategoryk:~:_$c.];

Control.Category.$fCategoryk:~~:_$c.
  :: forall k (b :: k) (c :: k) (a :: k).
     (b Data.Type.Equality.:~~: c)
     -> (a Data.Type.Equality.:~~: b) -> a Data.Type.Equality.:~~: c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(A,U)><S,1*U(A,U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s5bdH ds1_s5bdI]
        case ds_s5bdH of {
          Data.Type.Equality.HRefl _ [Occ=Dead, Dmd=<L,A>] co1_a5b8z ->
              case ds1_s5bdI of {
                Data.Type.Equality.HRefl _ [Occ=Dead, Dmd=<L,A>] co3_a5b8B ->
                    Data.Type.Equality.$WHRefl;
              };
        };

Control.Category.$fCategoryk:~~: [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k. Control.Category.Category (Data.Type.Equality.:~~:)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Category.C:Category! [Data.Type.Equality.$WHRefl
                                                Control.Category.$fCategoryk:~~:_$c.];

Control.Category.$fCategorykCoercion_$c.
  :: forall k (b :: k) (c :: k) (a :: k).
     Data.Type.Coercion.Coercion b c
     -> Data.Type.Coercion.Coercion a b
     -> Data.Type.Coercion.Coercion a c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)),1*U(1*U(1*U))><S,1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s5bdL eta_s5bdM]
        case ds_s5bdL of {
          Data.Type.Coercion.Coercion $dCoercible_s5bdO [Occ=Once] ->
              case GHC.Types.coercible_sel $dCoercible_s5bdO of {
                __DEFAULT -> eta_s5bdM;
              };
        };

Control.Category.$fCategorykCoercion1
  :: forall k (a :: k). GHC.Types.Coercible a a
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.MkCoercible! [GHC.Prim.coercionToken#];

Control.Category.$fCategorykCoercion_$cid
  :: forall k (a :: k). Data.Type.Coercion.Coercion a a
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE Data.Type.Coercion.Coercion! [Control.Category.$fCategorykCoercion1];

Control.Category.$fCategorykCoercion [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k. Control.Category.Category Data.Type.Coercion.Coercion
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Category.C:Category! [Control.Category.$fCategorykCoercion_$cid
                                                Control.Category.$fCategorykCoercion_$c.];

Control.Category.<<<
  :: forall k (cat :: k -> k -> *) (b :: k) (c :: k) (a :: k).
     Control.Category.Category cat =>
     cat b c -> cat a b -> cat a c
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)>,
 Unf=OtherCon []] =
    [] \r [$dCategory_s5bdP] Control.Category.. $dCategory_s5bdP;

Control.Category.>>>
  :: forall k (cat :: k -> k -> *) (a :: k) (b :: k) (c :: k).
     Control.Category.Category cat =>
     cat a b -> cat b c -> cat a c
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))),1*U(A,1*C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dCategory_s5bdQ f_s5bdR g_s5bdS]
        Control.Category.. $dCategory_s5bdQ g_s5bdS f_s5bdR;

Control.Category.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Category.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Category.$trModule4];

Control.Category.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Category"#;

Control.Category.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Category.$trModule2];

Control.Category.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Category.$trModule3
                                     Control.Category.$trModule1];

$krep_r5bdq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep1_r5bdr :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep2_r5bds :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r5bdr
                                         GHC.Types.krep$*];

$krep3_r5bdt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r5bdr $krep2_r5bds];

Control.Category.$tcCategory1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5bdt $krep_r5bdq];

Control.Category.$tcCategory3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Category"#;

Control.Category.$tcCategory2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Category.$tcCategory3];

Control.Category.$tcCategory :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2937510523604756154##
                                    3642248471217903215##
                                    Control.Category.$trModule
                                    Control.Category.$tcCategory2
                                    1#
                                    Control.Category.$tcCategory1];

Control.Category.C:Category
  :: forall k (cat :: k -> k -> *).
     (forall (a :: k). cat a a)
     -> (forall (b :: k) (c :: k) (a :: k).
         cat b c -> cat a b -> cat a c)
     -> Control.Category.Category cat
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Control.Category.C:Category [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:00:08.317449936 UTC

Control.Category.id
  :: forall k (cat :: k -> k -> *).
     Control.Category.Category cat =>
     forall (a :: k). cat a a
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_s5bdv]
        case v_s5bdv of {
          Control.Category.C:Category v_s5bdx [Occ=Once] _ [Occ=Dead] ->
              v_s5bdx;
        };

Control.Category..
  :: forall k (cat :: k -> k -> *).
     Control.Category.Category cat =>
     forall (b :: k) (c :: k) (a :: k). cat b c -> cat a b -> cat a c
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_s5bdz]
        case v_s5bdz of {
          Control.Category.C:Category _ [Occ=Dead] v_s5bdC [Occ=Once] ->
              v_s5bdC;
        };

Control.Category.$fCategoryTYPE(->) [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Category.Category (->)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Category.C:Category! [GHC.Base.id
                                                GHC.Base..];

Control.Category.$fCategoryk:~:_$c.
  :: forall k (b :: k) (c :: k) (a :: k).
     (b Data.Type.Equality.:~: c)
     -> (a Data.Type.Equality.:~: b) -> a Data.Type.Equality.:~: c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s5bdD ds1_s5bdE]
        case ds_s5bdD of {
          Data.Type.Equality.Refl ->
              case ds1_s5bdE of {
                Data.Type.Equality.Refl -> Data.Type.Equality.$WRefl;
              };
        };

Control.Category.$fCategoryk:~: [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k. Control.Category.Category (Data.Type.Equality.:~:)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Category.C:Category! [Data.Type.Equality.$WRefl
                                                Control.Category.$fCategoryk:~:_$c.];

Control.Category.$fCategoryk:~~:_$c.
  :: forall k (b :: k) (c :: k) (a :: k).
     (b Data.Type.Equality.:~~: c)
     -> (a Data.Type.Equality.:~~: b) -> a Data.Type.Equality.:~~: c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(A,U)><S,1*U(A,U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s5bdH ds1_s5bdI]
        case ds_s5bdH of {
          Data.Type.Equality.HRefl ->
              case ds1_s5bdI of {
                Data.Type.Equality.HRefl -> Data.Type.Equality.$WHRefl;
              };
        };

Control.Category.$fCategoryk:~~: [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k. Control.Category.Category (Data.Type.Equality.:~~:)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Category.C:Category! [Data.Type.Equality.$WHRefl
                                                Control.Category.$fCategoryk:~~:_$c.];

Control.Category.$fCategorykCoercion_$c.
  :: forall k (b :: k) (c :: k) (a :: k).
     Data.Type.Coercion.Coercion b c
     -> Data.Type.Coercion.Coercion a b
     -> Data.Type.Coercion.Coercion a c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)),1*U(1*U(1*U))><S,1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s5bdL eta_s5bdM]
        case ds_s5bdL of {
          Data.Type.Coercion.Coercion $dCoercible_s5bdO [Occ=Once] ->
              case GHC.Types.coercible_sel $dCoercible_s5bdO of {
                (##) -> eta_s5bdM;
              };
        };

Control.Category.$fCategorykCoercion1
  :: forall k (a :: k). GHC.Types.Coercible a a
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.MkCoercible! [];

Control.Category.$fCategorykCoercion_$cid
  :: forall k (a :: k). Data.Type.Coercion.Coercion a a
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE Data.Type.Coercion.Coercion! [Control.Category.$fCategorykCoercion1];

Control.Category.$fCategorykCoercion [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k. Control.Category.Category Data.Type.Coercion.Coercion
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Category.C:Category! [Control.Category.$fCategorykCoercion_$cid
                                                Control.Category.$fCategorykCoercion_$c.];

Control.Category.<<<
  :: forall k (cat :: k -> k -> *) (b :: k) (c :: k) (a :: k).
     Control.Category.Category cat =>
     cat b c -> cat a b -> cat a c
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)>,
 Unf=OtherCon []] =
    [] \r [$dCategory_s5bdP] Control.Category.. $dCategory_s5bdP;

Control.Category.>>>
  :: forall k (cat :: k -> k -> *) (a :: k) (b :: k) (c :: k).
     Control.Category.Category cat =>
     cat a b -> cat b c -> cat a c
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))),1*U(A,1*C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dCategory_s5bdQ f_s5bdR g_s5bdS]
        Control.Category.. $dCategory_s5bdQ g_s5bdS f_s5bdR;

Control.Category.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Category.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Category.$trModule4];

Control.Category.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Category"#;

Control.Category.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Category.$trModule2];

Control.Category.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Category.$trModule3
                                     Control.Category.$trModule1];

$krep_r5bdq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep1_r5bdr :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep2_r5bds :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r5bdr
                                         GHC.Types.krep$*];

$krep3_r5bdt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r5bdr $krep2_r5bds];

Control.Category.$tcCategory1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5bdt $krep_r5bdq];

Control.Category.$tcCategory3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Category"#;

Control.Category.$tcCategory2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Category.$tcCategory3];

Control.Category.$tcCategory :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2937510523604756154##
                                    3642248471217903215##
                                    Control.Category.$trModule
                                    Control.Category.$tcCategory2
                                    1#
                                    Control.Category.$tcCategory1];

Control.Category.C:Category
  :: forall k (cat :: k -> k -> *).
     (forall (a :: k). cat a a)
     -> (forall (b :: k) (c :: k) (a :: k).
         cat b c -> cat a b -> cat a c)
     -> Control.Category.Category cat
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Control.Category.C:Category [eta_B2 eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:00:08.576015845 UTC

Control.Category.id
  :: forall k (cat :: k -> k -> *).
     Control.Category.Category cat =>
     forall (a :: k). cat a a
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_s5bkW]
        case v_s5bkW of {
          Control.Category.C:Category v_s5bkY [Occ=Once] _ [Occ=Dead] ->
              v_s5bkY;
        };

Control.Category..
  :: forall k (cat :: k -> k -> *).
     Control.Category.Category cat =>
     forall (b :: k) (c :: k) (a :: k). cat b c -> cat a b -> cat a c
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_s5bl0]
        case v_s5bl0 of {
          Control.Category.C:Category _ [Occ=Dead] v_s5bl3 [Occ=Once] ->
              v_s5bl3;
        };

Control.Category.$fCategoryTYPE(->) [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Category.Category (->)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Category.C:Category! [GHC.Base.id
                                                GHC.Base..];

Control.Category.$fCategoryk:~:_$c.
  :: forall k (b :: k) (c :: k) (a :: k).
     (b Data.Type.Equality.:~: c)
     -> (a Data.Type.Equality.:~: b) -> a Data.Type.Equality.:~: c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s5bl4 ds1_s5bl5]
        case ds_s5bl4 of {
          Data.Type.Equality.Refl co_a5b8Z ->
              case ds1_s5bl5 of {
                Data.Type.Equality.Refl co1_a5b90 -> Data.Type.Equality.$WRefl;
              };
        };

Control.Category.$fCategoryk:~: [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k. Control.Category.Category (Data.Type.Equality.:~:)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Category.C:Category! [Data.Type.Equality.$WRefl
                                                Control.Category.$fCategoryk:~:_$c.];

Control.Category.$fCategoryk:~~:_$c.
  :: forall k (b :: k) (c :: k) (a :: k).
     (b Data.Type.Equality.:~~: c)
     -> (a Data.Type.Equality.:~~: b) -> a Data.Type.Equality.:~~: c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(A,U)><S,1*U(A,U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s5bl8 ds1_s5bl9]
        case ds_s5bl8 of {
          Data.Type.Equality.HRefl _ [Occ=Dead, Dmd=<L,A>] co1_a5b8z ->
              case ds1_s5bl9 of {
                Data.Type.Equality.HRefl _ [Occ=Dead, Dmd=<L,A>] co3_a5b8B ->
                    Data.Type.Equality.$WHRefl;
              };
        };

Control.Category.$fCategoryk:~~: [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k. Control.Category.Category (Data.Type.Equality.:~~:)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Category.C:Category! [Data.Type.Equality.$WHRefl
                                                Control.Category.$fCategoryk:~~:_$c.];

Control.Category.$fCategorykCoercion_$c.
  :: forall k (b :: k) (c :: k) (a :: k).
     Data.Type.Coercion.Coercion b c
     -> Data.Type.Coercion.Coercion a b
     -> Data.Type.Coercion.Coercion a c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)),1*U(1*U(1*U))><S,1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s5blc eta_s5bld]
        case ds_s5blc of {
          Data.Type.Coercion.Coercion $dCoercible_s5blf [Occ=Once] ->
              case GHC.Types.coercible_sel $dCoercible_s5blf of {
                __DEFAULT -> eta_s5bld;
              };
        };

Control.Category.$fCategorykCoercion1
  :: forall k (a :: k). GHC.Types.Coercible a a
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.MkCoercible! [GHC.Prim.coercionToken#];

Control.Category.$fCategorykCoercion_$cid
  :: forall k (a :: k). Data.Type.Coercion.Coercion a a
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE Data.Type.Coercion.Coercion! [Control.Category.$fCategorykCoercion1];

Control.Category.$fCategorykCoercion [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k. Control.Category.Category Data.Type.Coercion.Coercion
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Category.C:Category! [Control.Category.$fCategorykCoercion_$cid
                                                Control.Category.$fCategorykCoercion_$c.];

Control.Category.<<<
  :: forall k (cat :: k -> k -> *) (b :: k) (c :: k) (a :: k).
     Control.Category.Category cat =>
     cat b c -> cat a b -> cat a c
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)>,
 Unf=OtherCon []] =
    [] \r [$dCategory_s5blg] Control.Category.. $dCategory_s5blg;

Control.Category.>>>
  :: forall k (cat :: k -> k -> *) (a :: k) (b :: k) (c :: k).
     Control.Category.Category cat =>
     cat a b -> cat b c -> cat a c
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))),1*U(A,1*C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dCategory_s5blh f_s5bli g_s5blj]
        Control.Category.. $dCategory_s5blh g_s5blj f_s5bli;

Control.Category.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Category.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Category.$trModule4];

Control.Category.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Category"#;

Control.Category.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Category.$trModule2];

Control.Category.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Category.$trModule3
                                     Control.Category.$trModule1];

$krep_r5bdq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep1_r5bdr :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep2_r5bds :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r5bdr
                                         GHC.Types.krep$*];

$krep3_r5bdt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r5bdr $krep2_r5bds];

Control.Category.$tcCategory1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5bdt $krep_r5bdq];

Control.Category.$tcCategory3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Category"#;

Control.Category.$tcCategory2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Category.$tcCategory3];

Control.Category.$tcCategory :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2937510523604756154##
                                    3642248471217903215##
                                    Control.Category.$trModule
                                    Control.Category.$tcCategory2
                                    1#
                                    Control.Category.$tcCategory1];

Control.Category.C:Category
  :: forall k (cat :: k -> k -> *).
     (forall (a :: k). cat a a)
     -> (forall (b :: k) (c :: k) (a :: k).
         cat b c -> cat a b -> cat a c)
     -> Control.Category.Category cat
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Control.Category.C:Category [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:00:08.580035745 UTC

Control.Category.id
  :: forall k (cat :: k -> k -> *).
     Control.Category.Category cat =>
     forall (a :: k). cat a a
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_s5bkW]
        case v_s5bkW of {
          Control.Category.C:Category v_s5bkY [Occ=Once] _ [Occ=Dead] ->
              v_s5bkY;
        };

Control.Category..
  :: forall k (cat :: k -> k -> *).
     Control.Category.Category cat =>
     forall (b :: k) (c :: k) (a :: k). cat b c -> cat a b -> cat a c
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_s5bl0]
        case v_s5bl0 of {
          Control.Category.C:Category _ [Occ=Dead] v_s5bl3 [Occ=Once] ->
              v_s5bl3;
        };

Control.Category.$fCategoryTYPE(->) [InlPrag=NOUSERINLINE CONLIKE]
  :: Control.Category.Category (->)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Category.C:Category! [GHC.Base.id
                                                GHC.Base..];

Control.Category.$fCategoryk:~:_$c.
  :: forall k (b :: k) (c :: k) (a :: k).
     (b Data.Type.Equality.:~: c)
     -> (a Data.Type.Equality.:~: b) -> a Data.Type.Equality.:~: c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S,1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s5bl4 ds1_s5bl5]
        case ds_s5bl4 of {
          Data.Type.Equality.Refl ->
              case ds1_s5bl5 of {
                Data.Type.Equality.Refl -> Data.Type.Equality.$WRefl;
              };
        };

Control.Category.$fCategoryk:~: [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k. Control.Category.Category (Data.Type.Equality.:~:)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Category.C:Category! [Data.Type.Equality.$WRefl
                                                Control.Category.$fCategoryk:~:_$c.];

Control.Category.$fCategoryk:~~:_$c.
  :: forall k (b :: k) (c :: k) (a :: k).
     (b Data.Type.Equality.:~~: c)
     -> (a Data.Type.Equality.:~~: b) -> a Data.Type.Equality.:~~: c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(A,U)><S,1*U(A,U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s5bl8 ds1_s5bl9]
        case ds_s5bl8 of {
          Data.Type.Equality.HRefl ->
              case ds1_s5bl9 of {
                Data.Type.Equality.HRefl -> Data.Type.Equality.$WHRefl;
              };
        };

Control.Category.$fCategoryk:~~: [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k. Control.Category.Category (Data.Type.Equality.:~~:)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Category.C:Category! [Data.Type.Equality.$WHRefl
                                                Control.Category.$fCategoryk:~~:_$c.];

Control.Category.$fCategorykCoercion_$c.
  :: forall k (b :: k) (c :: k) (a :: k).
     Data.Type.Coercion.Coercion b c
     -> Data.Type.Coercion.Coercion a b
     -> Data.Type.Coercion.Coercion a c
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)),1*U(1*U(1*U))><S,1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s5blc eta_s5bld]
        case ds_s5blc of {
          Data.Type.Coercion.Coercion $dCoercible_s5blf [Occ=Once] ->
              case GHC.Types.coercible_sel $dCoercible_s5blf of {
                (##) -> eta_s5bld;
              };
        };

Control.Category.$fCategorykCoercion1
  :: forall k (a :: k). GHC.Types.Coercible a a
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.MkCoercible! [];

Control.Category.$fCategorykCoercion_$cid
  :: forall k (a :: k). Data.Type.Coercion.Coercion a a
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE Data.Type.Coercion.Coercion! [Control.Category.$fCategorykCoercion1];

Control.Category.$fCategorykCoercion [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k. Control.Category.Category Data.Type.Coercion.Coercion
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Control.Category.C:Category! [Control.Category.$fCategorykCoercion_$cid
                                                Control.Category.$fCategorykCoercion_$c.];

Control.Category.<<<
  :: forall k (cat :: k -> k -> *) (b :: k) (c :: k) (a :: k).
     Control.Category.Category cat =>
     cat b c -> cat a b -> cat a c
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U)>,
 Unf=OtherCon []] =
    [] \r [$dCategory_s5blg] Control.Category.. $dCategory_s5blg;

Control.Category.>>>
  :: forall k (cat :: k -> k -> *) (a :: k) (b :: k) (c :: k).
     Control.Category.Category cat =>
     cat a b -> cat b c -> cat a c
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))),1*U(A,1*C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dCategory_s5blh f_s5bli g_s5blj]
        Control.Category.. $dCategory_s5blh g_s5blj f_s5bli;

Control.Category.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Category.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Category.$trModule4];

Control.Category.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Category"#;

Control.Category.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Category.$trModule2];

Control.Category.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Category.$trModule3
                                     Control.Category.$trModule1];

$krep_r5bdq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep1_r5bdr :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep2_r5bds :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r5bdr
                                         GHC.Types.krep$*];

$krep3_r5bdt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r5bdr $krep2_r5bds];

Control.Category.$tcCategory1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5bdt $krep_r5bdq];

Control.Category.$tcCategory3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Category"#;

Control.Category.$tcCategory2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Category.$tcCategory3];

Control.Category.$tcCategory :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2937510523604756154##
                                    3642248471217903215##
                                    Control.Category.$trModule
                                    Control.Category.$tcCategory2
                                    1#
                                    Control.Category.$tcCategory1];

Control.Category.C:Category
  :: forall k (cat :: k -> k -> *).
     (forall (a :: k). cat a a)
     -> (forall (b :: k) (c :: k) (a :: k).
         cat b c -> cat a b -> cat a c)
     -> Control.Category.Category cat
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Control.Category.C:Category [eta_B2 eta_B1];

