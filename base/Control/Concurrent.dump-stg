
==================== Pre unarise: ====================
2018-03-16 16:09:12.132747832 UTC

Control.Concurrent.isCurrentThreadBound1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s#_sdWo4]
        case isCurrentThreadBound# [s#_sdWo4] of {
          (#,#) ipv_sdWo6 [Occ=Once] ipv1_sdWo7 [Occ=Once!] ->
              let {
                sat_sdWo9 [Occ=Once] :: GHC.Types.Bool
                [LclId] =
                    [ipv1_sdWo7] \u []
                        case ipv1_sdWo7 of {
                          __DEFAULT -> GHC.Types.True [];
                          0# -> GHC.Types.False [];
                        };
              } in  (#,#) [ipv_sdWo6 sat_sdWo9];
        };

Control.Concurrent.isCurrentThreadBound
  :: GHC.Types.IO GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] Control.Concurrent.isCurrentThreadBound1 eta_B1;

Control.Concurrent.threadWaitRead
  :: System.Posix.Types.Fd -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U(U)><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.IO.threadWaitRead1 eta_B2 eta_B1;

Control.Concurrent.threadWaitWrite
  :: System.Posix.Types.Fd -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U(U)><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.IO.threadWaitWrite1 eta_B2 eta_B1;

Control.Concurrent.threadWaitReadSTM
  :: System.Posix.Types.Fd
     -> GHC.Types.IO (GHC.Conc.Sync.STM (), GHC.Types.IO ())
[GblId, Arity=2, Str=<L,U(U)><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.IO.threadWaitReadSTM1 eta_B2 eta_B1;

Control.Concurrent.threadWaitWriteSTM
  :: System.Posix.Types.Fd
     -> GHC.Types.IO (GHC.Conc.Sync.STM (), GHC.Types.IO ())
[GblId, Arity=2, Str=<L,U(U)><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Conc.IO.threadWaitWriteSTM1 eta_B2 eta_B1;

Control.Concurrent.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Concurrent.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.$trModule4];

Control.Concurrent.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Concurrent"#;

Control.Concurrent.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.$trModule2];

Control.Concurrent.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Concurrent.$trModule3
                                     Control.Concurrent.$trModule1];

Control.Concurrent.rtsSupportsBoundThreads :: GHC.Types.Bool
[GblId] =
    [] \u []
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          (#,#) _ [Occ=Dead] ds1_sdWod [Occ=Once!] ->
              case ds1_sdWod of {
                __DEFAULT -> GHC.Types.True [];
                0# -> GHC.Types.False [];
              };
        };

Control.Concurrent.forkFinally2
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Data.Either.Either GHC.Exception.SomeException a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [e1_sdWof eta1_sdWog]
        let {
          sat_sdWoh [Occ=Once]
            :: Data.Either.Either GHC.Exception.SomeException a_adVT0
          [LclId] =
              CCCS Data.Either.Left! [e1_sdWof];
        } in  (#,#) [eta1_sdWog sat_sdWoh];

Control.Concurrent.runInUnboundThread1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,C(U(U,U))><S,U>, Unf=OtherCon []] =
    [] \r [action_sdWoi s_sdWoj]
        case isCurrentThreadBound# [s_sdWoj] of {
          (#,#) ipv_sdWol [Occ=Once*] ipv1_sdWom [Occ=Once!] ->
              case ipv1_sdWom of {
                __DEFAULT ->
                    case newMVar# [ipv_sdWol] of {
                      (#,#) ipv2_sdWop [Occ=Once] ipv3_sdWoq ->
                          case getMaskingState# [ipv2_sdWop] of {
                            (#,#) ipv4_sdWos [Occ=Once*] ipv5_sdWot [Occ=Once!] ->
                                let {
                                  lvl13_sdWou [Occ=Once*, Dmd=<L,C(U)>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             Data.Either.Either
                                               GHC.Exception.SomeException a_adVT0 #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [ipv3_sdWoq] \r [eta_sdWov] takeMVar# [ipv3_sdWoq eta_sdWov];
                                } in 
                                  case ipv5_sdWot of {
                                    __DEFAULT ->
                                        let {
                                          sat_sdWoK [Occ=Once] :: GHC.Types.IO ()
                                          [LclId] =
                                              [action_sdWoi ipv3_sdWoq] \r [eta_sdWox]
                                                  let {
                                                    sat_sdWoJ [Occ=Once]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               () #)
                                                    [LclId] =
                                                        [action_sdWoi ipv3_sdWoq] \r [s1_sdWoy]
                                                            let {
                                                              sat_sdWoE [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVT0 #)
                                                              [LclId] =
                                                                  [action_sdWoi] \r [s2_sdWoz]
                                                                      case
                                                                          maskAsyncExceptions# [action_sdWoi
                                                                                                s2_sdWoz]
                                                                      of
                                                                      { (#,#) ipv6_sdWoB [Occ=Once]
                                                                              ipv7_sdWoC [Occ=Once] ->
                                                                            let {
                                                                              sat_sdWoD [Occ=Once]
                                                                                :: Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVT0
                                                                              [LclId] =
                                                                                  CCCS Data.Either.Right! [ipv7_sdWoC];
                                                                            } in 
                                                                              (#,#) [ipv6_sdWoB
                                                                                     sat_sdWoD];
                                                                      };
                                                            } in 
                                                              case
                                                                  catch# [sat_sdWoE
                                                                          Control.Concurrent.forkFinally2
                                                                          s1_sdWoy]
                                                              of
                                                              { (#,#) ipv6_sdWoG [Occ=Once]
                                                                      ipv7_sdWoH [Occ=Once] ->
                                                                    case
                                                                        putMVar# [ipv3_sdWoq
                                                                                  ipv7_sdWoH
                                                                                  ipv6_sdWoG]
                                                                    of
                                                                    s2#_sdWoI
                                                                    { __DEFAULT ->
                                                                          (#,#) [s2#_sdWoI
                                                                                 GHC.Tuple.()];
                                                                    };
                                                              };
                                                  } in 
                                                    catch# [sat_sdWoJ
                                                            GHC.Conc.Sync.forkIO2
                                                            eta_sdWox];
                                        } in 
                                          case fork# [sat_sdWoK ipv4_sdWos] of {
                                            (#,#) ipv6_sdWoM [Occ=Once] ipv7_sdWoN [Occ=Once] ->
                                                let {
                                                  wait_sdWoO [Occ=LoopBreaker]
                                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             Data.Either.Either
                                                               GHC.Exception.SomeException
                                                               a_adVT0 #)
                                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                      sat-only [lvl13_sdWou
                                                                ipv7_sdWoN
                                                                wait_sdWoO] \r [eta_sdWoP]
                                                          let {
                                                            sat_sdWoT [Occ=Once]
                                                              :: GHC.Exception.SomeException
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVT0 #)
                                                            [LclId] =
                                                                [ipv7_sdWoN wait_sdWoO] \r [e1_sdWoQ
                                                                                            s1_sdWoR]
                                                                    case
                                                                        killThread# [ipv7_sdWoN
                                                                                     e1_sdWoQ
                                                                                     s1_sdWoR]
                                                                    of
                                                                    s2_sdWoS
                                                                    { __DEFAULT ->
                                                                          wait_sdWoO s2_sdWoS;
                                                                    };
                                                          } in 
                                                            catch# [lvl13_sdWou
                                                                    sat_sdWoT
                                                                    eta_sdWoP];
                                                } in 
                                                  case wait_sdWoO ipv6_sdWoM of {
                                                    (#,#) ipv8_sdWoV [Occ=Once*]
                                                          ipv9_sdWoW [Occ=Once!] ->
                                                        case ipv9_sdWoW of {
                                                          Data.Either.Left x_sdWoY [Occ=Once] ->
                                                              raiseIO# [x_sdWoY ipv8_sdWoV];
                                                          Data.Either.Right y_sdWoZ [Occ=Once] ->
                                                              (#,#) [ipv8_sdWoV y_sdWoZ];
                                                        };
                                                  };
                                          };
                                    0# ->
                                        let {
                                          sat_sdWpu [Occ=Once]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adVT0 #)
                                          [LclId] =
                                              [action_sdWoi ipv3_sdWoq lvl13_sdWou] \r [s1_sdWp0]
                                                  let {
                                                    sat_sdWpe [Occ=Once] :: GHC.Types.IO ()
                                                    [LclId] =
                                                        [action_sdWoi ipv3_sdWoq] \r [eta_sdWp1]
                                                            let {
                                                              sat_sdWpd [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         () #)
                                                              [LclId] =
                                                                  [action_sdWoi
                                                                   ipv3_sdWoq] \r [s2_sdWp2]
                                                                      let {
                                                                        sat_sdWp8 [Occ=Once]
                                                                          :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVT0 #)
                                                                        [LclId] =
                                                                            [action_sdWoi] \r [s3_sdWp3]
                                                                                case
                                                                                    unmaskAsyncExceptions# [action_sdWoi
                                                                                                            s3_sdWp3]
                                                                                of
                                                                                { (#,#) ipv6_sdWp5 [Occ=Once]
                                                                                        ipv7_sdWp6 [Occ=Once] ->
                                                                                      let {
                                                                                        sat_sdWp7 [Occ=Once]
                                                                                          :: Data.Either.Either
                                                                                               GHC.Exception.SomeException
                                                                                               a_adVT0
                                                                                        [LclId] =
                                                                                            CCCS Data.Either.Right! [ipv7_sdWp6];
                                                                                      } in 
                                                                                        (#,#) [ipv6_sdWp5
                                                                                               sat_sdWp7];
                                                                                };
                                                                      } in 
                                                                        case
                                                                            catch# [sat_sdWp8
                                                                                    Control.Concurrent.forkFinally2
                                                                                    s2_sdWp2]
                                                                        of
                                                                        { (#,#) ipv6_sdWpa [Occ=Once]
                                                                                ipv7_sdWpb [Occ=Once] ->
                                                                              case
                                                                                  putMVar# [ipv3_sdWoq
                                                                                            ipv7_sdWpb
                                                                                            ipv6_sdWpa]
                                                                              of
                                                                              s2#_sdWpc
                                                                              { __DEFAULT ->
                                                                                    (#,#) [s2#_sdWpc
                                                                                           GHC.Tuple.()];
                                                                              };
                                                                        };
                                                            } in 
                                                              catch# [sat_sdWpd
                                                                      GHC.Conc.Sync.forkIO2
                                                                      eta_sdWp1];
                                                  } in 
                                                    case fork# [sat_sdWpe s1_sdWp0] of {
                                                      (#,#) ipv6_sdWpg [Occ=Once]
                                                            ipv7_sdWph [Occ=Once] ->
                                                          let {
                                                            wait_sdWpi [Occ=LoopBreaker]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVT0 #)
                                                            [LclId,
                                                             Arity=1,
                                                             Str=<S,U>,
                                                             Unf=OtherCon []] =
                                                                sat-only [lvl13_sdWou
                                                                          ipv7_sdWph
                                                                          wait_sdWpi] \r [eta_sdWpj]
                                                                    let {
                                                                      sat_sdWpn [Occ=Once]
                                                                        :: GHC.Exception.SomeException
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 Data.Either.Either
                                                                                   GHC.Exception.SomeException
                                                                                   a_adVT0 #)
                                                                      [LclId] =
                                                                          [ipv7_sdWph
                                                                           wait_sdWpi] \r [e1_sdWpk
                                                                                           s2_sdWpl]
                                                                              case
                                                                                  killThread# [ipv7_sdWph
                                                                                               e1_sdWpk
                                                                                               s2_sdWpl]
                                                                              of
                                                                              s3_sdWpm
                                                                              { __DEFAULT ->
                                                                                    wait_sdWpi
                                                                                        s3_sdWpm;
                                                                              };
                                                                    } in 
                                                                      catch# [lvl13_sdWou
                                                                              sat_sdWpn
                                                                              eta_sdWpj];
                                                          } in 
                                                            case wait_sdWpi ipv6_sdWpg of {
                                                              (#,#) ipv8_sdWpp [Occ=Once*]
                                                                    ipv9_sdWpq [Occ=Once!] ->
                                                                  case ipv9_sdWpq of {
                                                                    Data.Either.Left x_sdWps [Occ=Once] ->
                                                                        raiseIO# [x_sdWps
                                                                                  ipv8_sdWpp];
                                                                    Data.Either.Right y_sdWpt [Occ=Once] ->
                                                                        (#,#) [ipv8_sdWpp y_sdWpt];
                                                                  };
                                                            };
                                                    };
                                        } in  maskAsyncExceptions# [sat_sdWpu ipv4_sdWos];
                                    1# ->
                                        let {
                                          sat_sdWpI [Occ=Once] :: GHC.Types.IO ()
                                          [LclId] =
                                              [action_sdWoi ipv3_sdWoq] \r [eta_sdWpv]
                                                  let {
                                                    sat_sdWpH [Occ=Once]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               () #)
                                                    [LclId] =
                                                        [action_sdWoi ipv3_sdWoq] \r [s1_sdWpw]
                                                            let {
                                                              sat_sdWpC [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVT0 #)
                                                              [LclId] =
                                                                  [action_sdWoi] \r [s2_sdWpx]
                                                                      case
                                                                          maskUninterruptible# [action_sdWoi
                                                                                                s2_sdWpx]
                                                                      of
                                                                      { (#,#) ipv6_sdWpz [Occ=Once]
                                                                              ipv7_sdWpA [Occ=Once] ->
                                                                            let {
                                                                              sat_sdWpB [Occ=Once]
                                                                                :: Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVT0
                                                                              [LclId] =
                                                                                  CCCS Data.Either.Right! [ipv7_sdWpA];
                                                                            } in 
                                                                              (#,#) [ipv6_sdWpz
                                                                                     sat_sdWpB];
                                                                      };
                                                            } in 
                                                              case
                                                                  catch# [sat_sdWpC
                                                                          Control.Concurrent.forkFinally2
                                                                          s1_sdWpw]
                                                              of
                                                              { (#,#) ipv6_sdWpE [Occ=Once]
                                                                      ipv7_sdWpF [Occ=Once] ->
                                                                    case
                                                                        putMVar# [ipv3_sdWoq
                                                                                  ipv7_sdWpF
                                                                                  ipv6_sdWpE]
                                                                    of
                                                                    s2#_sdWpG
                                                                    { __DEFAULT ->
                                                                          (#,#) [s2#_sdWpG
                                                                                 GHC.Tuple.()];
                                                                    };
                                                              };
                                                  } in 
                                                    catch# [sat_sdWpH
                                                            GHC.Conc.Sync.forkIO2
                                                            eta_sdWpv];
                                        } in 
                                          case fork# [sat_sdWpI ipv4_sdWos] of {
                                            (#,#) ipv6_sdWpK [Occ=Once] ipv7_sdWpL [Occ=Once] ->
                                                let {
                                                  wait_sdWpM [Occ=LoopBreaker]
                                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             Data.Either.Either
                                                               GHC.Exception.SomeException
                                                               a_adVT0 #)
                                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                      sat-only [lvl13_sdWou
                                                                ipv7_sdWpL
                                                                wait_sdWpM] \r [eta_sdWpN]
                                                          let {
                                                            sat_sdWpR [Occ=Once]
                                                              :: GHC.Exception.SomeException
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVT0 #)
                                                            [LclId] =
                                                                [ipv7_sdWpL wait_sdWpM] \r [e1_sdWpO
                                                                                            s1_sdWpP]
                                                                    case
                                                                        killThread# [ipv7_sdWpL
                                                                                     e1_sdWpO
                                                                                     s1_sdWpP]
                                                                    of
                                                                    s2_sdWpQ
                                                                    { __DEFAULT ->
                                                                          wait_sdWpM s2_sdWpQ;
                                                                    };
                                                          } in 
                                                            catch# [lvl13_sdWou
                                                                    sat_sdWpR
                                                                    eta_sdWpN];
                                                } in 
                                                  case wait_sdWpM ipv6_sdWpK of {
                                                    (#,#) ipv8_sdWpT [Occ=Once*]
                                                          ipv9_sdWpU [Occ=Once!] ->
                                                        case ipv9_sdWpU of {
                                                          Data.Either.Left x_sdWpW [Occ=Once] ->
                                                              raiseIO# [x_sdWpW ipv8_sdWpT];
                                                          Data.Either.Right y_sdWpX [Occ=Once] ->
                                                              (#,#) [ipv8_sdWpT y_sdWpX];
                                                        };
                                                  };
                                          };
                                  };
                          };
                    };
                0# -> action_sdWoi ipv_sdWol;
              };
        };

Control.Concurrent.runInUnboundThread
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,C(U(U,U))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Concurrent.runInUnboundThread1 eta_B2 eta_B1;

lvl_rdWnQ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RTS doesn't support multiple OS threads (use ghc -threaded when linking)"#;

Control.Concurrent.forkOS2
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sdWpY]
        case GHC.CString.unpackCString# lvl_rdWnQ of sat_sdWpZ {
          __DEFAULT -> GHC.IO.failIO1 sat_sdWpZ eta_sdWpY;
        };

lvl1_rdWnR :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "undefined"#;

lvl2_rdWnS :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl1_rdWnR;

lvl3_rdWnT :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Control.Concurrent.$trModule4;

lvl4_rdWnU :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Control.Concurrent.$trModule2;

lvl5_rdWnV :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./Control/Concurrent.hs"#;

lvl6_rdWnW :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_rdWnV;

lvl7_rdWnX :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [353#];

lvl8_rdWnY :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [33#];

lvl9_rdWnZ :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [42#];

lvl10_rdWo0 :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_rdWnT
                                           lvl4_rdWnU
                                           lvl6_rdWnW
                                           lvl7_rdWnX
                                           lvl8_rdWnY
                                           lvl7_rdWnX
                                           lvl9_rdWnZ];

lvl11_rdWo1 :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_rdWnS
                                                  lvl10_rdWo0
                                                  GHC.Stack.Types.EmptyCallStack];

Control.Concurrent.runInBoundThread2
  :: forall a. Data.Either.Either GHC.Exception.SomeException a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl11_rdWo1;

Control.Concurrent.runInBoundThread1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,C(U(U,U))><L,U>, Unf=OtherCon []] =
    [] \r [action_sdWq0 eta_sdWq1]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          (#,#) _ [Occ=Dead] ds1_sdWq5 [Occ=Once!] ->
              case ds1_sdWq5 of {
                __DEFAULT ->
                    case isCurrentThreadBound# [eta_sdWq1] of {
                      (#,#) ipv_sdWq8 [Occ=Once*] ipv1_sdWq9 [Occ=Once!] ->
                          case ipv1_sdWq9 of {
                            __DEFAULT -> action_sdWq0 ipv_sdWq8;
                            0# ->
                                case
                                    newMutVar# [Control.Concurrent.runInBoundThread2 ipv_sdWq8]
                                of
                                { (#,#) ipv2_sdWqc [Occ=Once] ipv3_sdWqd ->
                                      case getMaskingState# [ipv2_sdWqc] of {
                                        (#,#) ipv4_sdWqf [Occ=Once*] ipv5_sdWqg [Occ=Once!] ->
                                            case ipv5_sdWqg of {
                                              __DEFAULT ->
                                                  let {
                                                    sat_sdWqt [Occ=Once] :: GHC.Types.IO ()
                                                    [LclId] =
                                                        [action_sdWq0 ipv3_sdWqd] \r [s_sdWqi]
                                                            let {
                                                              sat_sdWqo [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVVB #)
                                                              [LclId] =
                                                                  [action_sdWq0] \r [s1_sdWqj]
                                                                      case
                                                                          action_sdWq0 s1_sdWqj
                                                                      of
                                                                      { (#,#) ipv6_sdWql [Occ=Once]
                                                                              ipv7_sdWqm [Occ=Once] ->
                                                                            let {
                                                                              sat_sdWqn [Occ=Once]
                                                                                :: Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVVB
                                                                              [LclId] =
                                                                                  CCCS Data.Either.Right! [ipv7_sdWqm];
                                                                            } in 
                                                                              (#,#) [ipv6_sdWql
                                                                                     sat_sdWqn];
                                                                      };
                                                            } in 
                                                              case
                                                                  catch# [sat_sdWqo
                                                                          Control.Concurrent.forkFinally2
                                                                          s_sdWqi]
                                                              of
                                                              { (#,#) ipv6_sdWqq [Occ=Once]
                                                                      ipv7_sdWqr [Occ=Once] ->
                                                                    case
                                                                        writeMutVar# [ipv3_sdWqd
                                                                                      ipv7_sdWqr
                                                                                      ipv6_sdWqq]
                                                                    of
                                                                    s2#_sdWqs
                                                                    { __DEFAULT ->
                                                                          (#,#) [s2#_sdWqs
                                                                                 GHC.Tuple.()];
                                                                    };
                                                              };
                                                  } in 
                                                    case makeStablePtr# [sat_sdWqt ipv4_sdWqf] of {
                                                      (#,#) ipv6_sdWqv [Occ=Once] ipv7_sdWqw ->
                                                          let {
                                                            sat_sdWqI [Occ=Once]
                                                              :: GHC.Exception.SomeException
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [ipv7_sdWqw] \r [e1_sdWqD s_sdWqE]
                                                                    case
                                                                        __pkg_ccall base-4.11.0.0 [ipv7_sdWqw
                                                                                                   s_sdWqE]
                                                                    of
                                                                    { Unit# ds7_sdWqH [Occ=Once] ->
                                                                          raiseIO# [e1_sdWqD
                                                                                    ds7_sdWqH];
                                                                    }; } in
                                                          let {
                                                            sat_sdWqB [Occ=Once]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [ipv3_sdWqd ipv7_sdWqw] \r [s_sdWqx]
                                                                    case
                                                                        __pkg_ccall_GC base-4.11.0.0 [ipv7_sdWqw
                                                                                                      s_sdWqx]
                                                                    of
                                                                    { Unit# ds7_sdWqA [Occ=Once] ->
                                                                          readMutVar# [ipv3_sdWqd
                                                                                       ds7_sdWqA];
                                                                    }; } in
                                                          let {
                                                            sat_sdWqC [Occ=Once]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [sat_sdWqB] \r [eta_B1]
                                                                    maskAsyncExceptions# [sat_sdWqB
                                                                                          eta_B1];
                                                          } in 
                                                            case
                                                                catch# [sat_sdWqC
                                                                        sat_sdWqI
                                                                        ipv6_sdWqv]
                                                            of
                                                            { (#,#) ipv8_sdWqK [Occ=Once]
                                                                    ipv9_sdWqL [Occ=Once!] ->
                                                                  case
                                                                      __pkg_ccall base-4.11.0.0 [ipv7_sdWqw
                                                                                                 ipv8_sdWqK]
                                                                  of
                                                                  { Unit# ds8_sdWqO [Occ=Once*] ->
                                                                        case ipv9_sdWqL of {
                                                                          Data.Either.Left x_sdWqQ [Occ=Once] ->
                                                                              raiseIO# [x_sdWqQ
                                                                                        ds8_sdWqO];
                                                                          Data.Either.Right y_sdWqR [Occ=Once] ->
                                                                              (#,#) [ds8_sdWqO
                                                                                     y_sdWqR];
                                                                        };
                                                                  };
                                                            };
                                                    };
                                              0# ->
                                                  let {
                                                    sat_sdWrq [Occ=Once]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               Data.Either.Either
                                                                 GHC.Exception.SomeException
                                                                 a_adVVB #)
                                                    [LclId] =
                                                        [action_sdWq0 ipv3_sdWqd] \r [s_sdWqS]
                                                            let {
                                                              sat_sdWr4 [Occ=Once]
                                                                :: GHC.Types.IO ()
                                                              [LclId] =
                                                                  [action_sdWq0
                                                                   ipv3_sdWqd] \r [s1_sdWqT]
                                                                      let {
                                                                        sat_sdWqZ [Occ=Once]
                                                                          :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVVB #)
                                                                        [LclId] =
                                                                            [action_sdWq0] \r [s2_sdWqU]
                                                                                case
                                                                                    action_sdWq0
                                                                                        s2_sdWqU
                                                                                of
                                                                                { (#,#) ipv6_sdWqW [Occ=Once]
                                                                                        ipv7_sdWqX [Occ=Once] ->
                                                                                      let {
                                                                                        sat_sdWqY [Occ=Once]
                                                                                          :: Data.Either.Either
                                                                                               GHC.Exception.SomeException
                                                                                               a_adVVB
                                                                                        [LclId] =
                                                                                            CCCS Data.Either.Right! [ipv7_sdWqX];
                                                                                      } in 
                                                                                        (#,#) [ipv6_sdWqW
                                                                                               sat_sdWqY];
                                                                                };
                                                                      } in 
                                                                        case
                                                                            catch# [sat_sdWqZ
                                                                                    Control.Concurrent.forkFinally2
                                                                                    s1_sdWqT]
                                                                        of
                                                                        { (#,#) ipv6_sdWr1 [Occ=Once]
                                                                                ipv7_sdWr2 [Occ=Once] ->
                                                                              case
                                                                                  writeMutVar# [ipv3_sdWqd
                                                                                                ipv7_sdWr2
                                                                                                ipv6_sdWr1]
                                                                              of
                                                                              s2#_sdWr3
                                                                              { __DEFAULT ->
                                                                                    (#,#) [s2#_sdWr3
                                                                                           GHC.Tuple.()];
                                                                              };
                                                                        };
                                                            } in 
                                                              case
                                                                  makeStablePtr# [sat_sdWr4 s_sdWqS]
                                                              of
                                                              { (#,#) ipv6_sdWr6 [Occ=Once]
                                                                      ipv7_sdWr7 ->
                                                                    let {
                                                                      sat_sdWrj [Occ=Once]
                                                                        :: GHC.Exception.SomeException
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 Data.Either.Either
                                                                                   GHC.Exception.SomeException
                                                                                   a_adVVB #)
                                                                      [LclId] =
                                                                          [ipv7_sdWr7] \r [e1_sdWre
                                                                                           s1_sdWrf]
                                                                              case
                                                                                  __pkg_ccall base-4.11.0.0 [ipv7_sdWr7
                                                                                                             s1_sdWrf]
                                                                              of
                                                                              { Unit# ds7_sdWri [Occ=Once] ->
                                                                                    raiseIO# [e1_sdWre
                                                                                              ds7_sdWri];
                                                                              }; } in
                                                                    let {
                                                                      sat_sdWrc [Occ=Once]
                                                                        :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 Data.Either.Either
                                                                                   GHC.Exception.SomeException
                                                                                   a_adVVB #)
                                                                      [LclId] =
                                                                          [ipv3_sdWqd
                                                                           ipv7_sdWr7] \r [s1_sdWr8]
                                                                              case
                                                                                  __pkg_ccall_GC base-4.11.0.0 [ipv7_sdWr7
                                                                                                                s1_sdWr8]
                                                                              of
                                                                              { Unit# ds7_sdWrb [Occ=Once] ->
                                                                                    readMutVar# [ipv3_sdWqd
                                                                                                 ds7_sdWrb];
                                                                              }; } in
                                                                    let {
                                                                      sat_sdWrd [Occ=Once]
                                                                        :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 Data.Either.Either
                                                                                   GHC.Exception.SomeException
                                                                                   a_adVVB #)
                                                                      [LclId] =
                                                                          [sat_sdWrc] \r [eta_B1]
                                                                              unmaskAsyncExceptions# [sat_sdWrc
                                                                                                      eta_B1];
                                                                    } in 
                                                                      case
                                                                          catch# [sat_sdWrd
                                                                                  sat_sdWrj
                                                                                  ipv6_sdWr6]
                                                                      of
                                                                      { (#,#) ipv8_sdWrl [Occ=Once]
                                                                              ipv9_sdWrm [Occ=Once] ->
                                                                            case
                                                                                __pkg_ccall base-4.11.0.0 [ipv7_sdWr7
                                                                                                           ipv8_sdWrl]
                                                                            of
                                                                            { Unit# ds8_sdWrp [Occ=Once] ->
                                                                                  (#,#) [ds8_sdWrp
                                                                                         ipv9_sdWrm];
                                                                            };
                                                                      };
                                                              };
                                                  } in 
                                                    case
                                                        maskAsyncExceptions# [sat_sdWrq ipv4_sdWqf]
                                                    of
                                                    { (#,#) ipv6_sdWrs [Occ=Once*]
                                                            ipv7_sdWrt [Occ=Once!] ->
                                                          case ipv7_sdWrt of {
                                                            Data.Either.Left x_sdWrv [Occ=Once] ->
                                                                raiseIO# [x_sdWrv ipv6_sdWrs];
                                                            Data.Either.Right y_sdWrw [Occ=Once] ->
                                                                (#,#) [ipv6_sdWrs y_sdWrw];
                                                          };
                                                    };
                                              1# ->
                                                  let {
                                                    sat_sdWrI [Occ=Once] :: GHC.Types.IO ()
                                                    [LclId] =
                                                        [action_sdWq0 ipv3_sdWqd] \r [s_sdWrx]
                                                            let {
                                                              sat_sdWrD [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVVB #)
                                                              [LclId] =
                                                                  [action_sdWq0] \r [s1_sdWry]
                                                                      case
                                                                          action_sdWq0 s1_sdWry
                                                                      of
                                                                      { (#,#) ipv6_sdWrA [Occ=Once]
                                                                              ipv7_sdWrB [Occ=Once] ->
                                                                            let {
                                                                              sat_sdWrC [Occ=Once]
                                                                                :: Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVVB
                                                                              [LclId] =
                                                                                  CCCS Data.Either.Right! [ipv7_sdWrB];
                                                                            } in 
                                                                              (#,#) [ipv6_sdWrA
                                                                                     sat_sdWrC];
                                                                      };
                                                            } in 
                                                              case
                                                                  catch# [sat_sdWrD
                                                                          Control.Concurrent.forkFinally2
                                                                          s_sdWrx]
                                                              of
                                                              { (#,#) ipv6_sdWrF [Occ=Once]
                                                                      ipv7_sdWrG [Occ=Once] ->
                                                                    case
                                                                        writeMutVar# [ipv3_sdWqd
                                                                                      ipv7_sdWrG
                                                                                      ipv6_sdWrF]
                                                                    of
                                                                    s2#_sdWrH
                                                                    { __DEFAULT ->
                                                                          (#,#) [s2#_sdWrH
                                                                                 GHC.Tuple.()];
                                                                    };
                                                              };
                                                  } in 
                                                    case makeStablePtr# [sat_sdWrI ipv4_sdWqf] of {
                                                      (#,#) ipv6_sdWrK [Occ=Once] ipv7_sdWrL ->
                                                          let {
                                                            sat_sdWrX [Occ=Once]
                                                              :: GHC.Exception.SomeException
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [ipv7_sdWrL] \r [e1_sdWrS s_sdWrT]
                                                                    case
                                                                        __pkg_ccall base-4.11.0.0 [ipv7_sdWrL
                                                                                                   s_sdWrT]
                                                                    of
                                                                    { Unit# ds7_sdWrW [Occ=Once] ->
                                                                          raiseIO# [e1_sdWrS
                                                                                    ds7_sdWrW];
                                                                    }; } in
                                                          let {
                                                            sat_sdWrQ [Occ=Once]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [ipv3_sdWqd ipv7_sdWrL] \r [s_sdWrM]
                                                                    case
                                                                        __pkg_ccall_GC base-4.11.0.0 [ipv7_sdWrL
                                                                                                      s_sdWrM]
                                                                    of
                                                                    { Unit# ds7_sdWrP [Occ=Once] ->
                                                                          readMutVar# [ipv3_sdWqd
                                                                                       ds7_sdWrP];
                                                                    }; } in
                                                          let {
                                                            sat_sdWrR [Occ=Once]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [sat_sdWrQ] \r [eta_B1]
                                                                    maskUninterruptible# [sat_sdWrQ
                                                                                          eta_B1];
                                                          } in 
                                                            case
                                                                catch# [sat_sdWrR
                                                                        sat_sdWrX
                                                                        ipv6_sdWrK]
                                                            of
                                                            { (#,#) ipv8_sdWrZ [Occ=Once]
                                                                    ipv9_sdWs0 [Occ=Once!] ->
                                                                  case
                                                                      __pkg_ccall base-4.11.0.0 [ipv7_sdWrL
                                                                                                 ipv8_sdWrZ]
                                                                  of
                                                                  { Unit# ds8_sdWs3 [Occ=Once*] ->
                                                                        case ipv9_sdWs0 of {
                                                                          Data.Either.Left x_sdWs5 [Occ=Once] ->
                                                                              raiseIO# [x_sdWs5
                                                                                        ds8_sdWs3];
                                                                          Data.Either.Right y_sdWs6 [Occ=Once] ->
                                                                              (#,#) [ds8_sdWs3
                                                                                     y_sdWs6];
                                                                        };
                                                                  };
                                                            };
                                                    };
                                            };
                                      };
                                };
                          };
                    };
                0# -> Control.Concurrent.forkOS2 eta_sdWq1;
              };
        };

Control.Concurrent.runInBoundThread
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,C(U(U,U))><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Concurrent.runInBoundThread1 eta_B2 eta_B1;

Control.Concurrent.forkFinally1
  :: forall a.
     GHC.Types.IO a
     -> (Data.Either.Either GHC.Exception.SomeException a
         -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=3, Str=<L,C(U)><L,C(C1(U))><S,U>, Unf=OtherCon []] =
    [] \r [action_sdWs7 and_then_sdWs8 eta_sdWs9]
        case getMaskingState# [eta_sdWs9] of {
          (#,#) ipv_sdWsb [Occ=Once*] ipv1_sdWsc [Occ=Once!] ->
              case ipv1_sdWsc of {
                __DEFAULT ->
                    let {
                      sat_sdWsq [Occ=Once] :: GHC.Types.IO ()
                      [LclId] =
                          [action_sdWs7 and_then_sdWs8] \r [eta1_sdWse]
                              let {
                                sat_sdWsp [Occ=Once]
                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                [LclId] =
                                    [action_sdWs7 and_then_sdWs8] \r [s_sdWsf]
                                        let {
                                          sat_sdWsl [Occ=Once]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Either.Either
                                                       GHC.Exception.SomeException a_adVWY #)
                                          [LclId] =
                                              [action_sdWs7] \r [s1_sdWsg]
                                                  case
                                                      maskAsyncExceptions# [action_sdWs7 s1_sdWsg]
                                                  of
                                                  { (#,#) ipv2_sdWsi [Occ=Once]
                                                          ipv3_sdWsj [Occ=Once] ->
                                                        let {
                                                          sat_sdWsk [Occ=Once]
                                                            :: Data.Either.Either
                                                                 GHC.Exception.SomeException a_adVWY
                                                          [LclId] =
                                                              CCCS Data.Either.Right! [ipv3_sdWsj];
                                                        } in  (#,#) [ipv2_sdWsi sat_sdWsk];
                                                  };
                                        } in 
                                          case
                                              catch# [sat_sdWsl
                                                      Control.Concurrent.forkFinally2
                                                      s_sdWsf]
                                          of
                                          { (#,#) ipv2_sdWsn [Occ=Once] ipv3_sdWso [Occ=Once] ->
                                                and_then_sdWs8 ipv3_sdWso ipv2_sdWsn;
                                          };
                              } in  catch# [sat_sdWsp GHC.Conc.Sync.forkIO2 eta1_sdWse];
                    } in 
                      case fork# [sat_sdWsq ipv_sdWsb] of {
                        (#,#) ipv2_sdWss [Occ=Once] ipv3_sdWst [Occ=Once] ->
                            let {
                              sat_sdWsu [Occ=Once] :: GHC.Conc.Sync.ThreadId
                              [LclId] =
                                  CCCS GHC.Conc.Sync.ThreadId! [ipv3_sdWst];
                            } in  (#,#) [ipv2_sdWss sat_sdWsu];
                      };
                0# ->
                    let {
                      sat_sdWsN [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
                      [LclId] =
                          [action_sdWs7 and_then_sdWs8] \r [s_sdWsv]
                              let {
                                sat_sdWsI [Occ=Once] :: GHC.Types.IO ()
                                [LclId] =
                                    [action_sdWs7 and_then_sdWs8] \r [eta1_sdWsw]
                                        let {
                                          sat_sdWsH [Occ=Once]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                          [LclId] =
                                              [action_sdWs7 and_then_sdWs8] \r [s1_sdWsx]
                                                  let {
                                                    sat_sdWsD [Occ=Once]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               Data.Either.Either
                                                                 GHC.Exception.SomeException
                                                                 a_adVWY #)
                                                    [LclId] =
                                                        [action_sdWs7] \r [s2_sdWsy]
                                                            case
                                                                unmaskAsyncExceptions# [action_sdWs7
                                                                                        s2_sdWsy]
                                                            of
                                                            { (#,#) ipv2_sdWsA [Occ=Once]
                                                                    ipv3_sdWsB [Occ=Once] ->
                                                                  let {
                                                                    sat_sdWsC [Occ=Once]
                                                                      :: Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVWY
                                                                    [LclId] =
                                                                        CCCS Data.Either.Right! [ipv3_sdWsB];
                                                                  } in 
                                                                    (#,#) [ipv2_sdWsA sat_sdWsC];
                                                            };
                                                  } in 
                                                    case
                                                        catch# [sat_sdWsD
                                                                Control.Concurrent.forkFinally2
                                                                s1_sdWsx]
                                                    of
                                                    { (#,#) ipv2_sdWsF [Occ=Once]
                                                            ipv3_sdWsG [Occ=Once] ->
                                                          and_then_sdWs8 ipv3_sdWsG ipv2_sdWsF;
                                                    };
                                        } in  catch# [sat_sdWsH GHC.Conc.Sync.forkIO2 eta1_sdWsw];
                              } in 
                                case fork# [sat_sdWsI s_sdWsv] of {
                                  (#,#) ipv2_sdWsK [Occ=Once] ipv3_sdWsL [Occ=Once] ->
                                      let {
                                        sat_sdWsM [Occ=Once] :: GHC.Conc.Sync.ThreadId
                                        [LclId] =
                                            CCCS GHC.Conc.Sync.ThreadId! [ipv3_sdWsL];
                                      } in  (#,#) [ipv2_sdWsK sat_sdWsM];
                                };
                    } in  maskAsyncExceptions# [sat_sdWsN ipv_sdWsb];
                1# ->
                    let {
                      sat_sdWt0 [Occ=Once] :: GHC.Types.IO ()
                      [LclId] =
                          [action_sdWs7 and_then_sdWs8] \r [eta1_sdWsO]
                              let {
                                sat_sdWsZ [Occ=Once]
                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                [LclId] =
                                    [action_sdWs7 and_then_sdWs8] \r [s_sdWsP]
                                        let {
                                          sat_sdWsV [Occ=Once]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Either.Either
                                                       GHC.Exception.SomeException a_adVWY #)
                                          [LclId] =
                                              [action_sdWs7] \r [s1_sdWsQ]
                                                  case
                                                      maskUninterruptible# [action_sdWs7 s1_sdWsQ]
                                                  of
                                                  { (#,#) ipv2_sdWsS [Occ=Once]
                                                          ipv3_sdWsT [Occ=Once] ->
                                                        let {
                                                          sat_sdWsU [Occ=Once]
                                                            :: Data.Either.Either
                                                                 GHC.Exception.SomeException a_adVWY
                                                          [LclId] =
                                                              CCCS Data.Either.Right! [ipv3_sdWsT];
                                                        } in  (#,#) [ipv2_sdWsS sat_sdWsU];
                                                  };
                                        } in 
                                          case
                                              catch# [sat_sdWsV
                                                      Control.Concurrent.forkFinally2
                                                      s_sdWsP]
                                          of
                                          { (#,#) ipv2_sdWsX [Occ=Once] ipv3_sdWsY [Occ=Once] ->
                                                and_then_sdWs8 ipv3_sdWsY ipv2_sdWsX;
                                          };
                              } in  catch# [sat_sdWsZ GHC.Conc.Sync.forkIO2 eta1_sdWsO];
                    } in 
                      case fork# [sat_sdWt0 ipv_sdWsb] of {
                        (#,#) ipv2_sdWt2 [Occ=Once] ipv3_sdWt3 [Occ=Once] ->
                            let {
                              sat_sdWt4 [Occ=Once] :: GHC.Conc.Sync.ThreadId
                              [LclId] =
                                  CCCS GHC.Conc.Sync.ThreadId! [ipv3_sdWt3];
                            } in  (#,#) [ipv2_sdWt2 sat_sdWt4];
                      };
              };
        };

Control.Concurrent.forkFinally
  :: forall a.
     GHC.Types.IO a
     -> (Data.Either.Either GHC.Exception.SomeException a
         -> GHC.Types.IO ())
     -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=3, Str=<L,C(U)><L,C(C1(U))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Control.Concurrent.forkFinally1 eta_B3 eta_B2 eta_B1;

lvl12_rdWo2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Cannot create OS thread."#;

Control.Concurrent.forkOS3
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sdWt5]
        case GHC.CString.unpackCString# lvl12_rdWo2 of sat_sdWt6 {
          __DEFAULT -> GHC.IO.failIO1 sat_sdWt6 eta_sdWt5;
        };

Control.Concurrent.forkOS1
  :: GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=2, Str=<L,C(U(U,U))><L,U>, Unf=OtherCon []] =
    [] \r [action0_sdWt7 eta_sdWt8]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          (#,#) _ [Occ=Dead] ds1_sdWtc [Occ=Once!] ->
              case ds1_sdWtc of {
                __DEFAULT ->
                    case newMVar# [eta_sdWt8] of {
                      (#,#) ipv_sdWtf [Occ=Once] ipv1_sdWtg ->
                          case getMaskingState# [ipv_sdWtf] of {
                            (#,#) ipv2_sdWti [Occ=Once] ipv3_sdWtj [Occ=Once!] ->
                                let {
                                  sat_sdWtt [Occ=Once] :: GHC.Types.IO ()
                                  [LclId] =
                                      [action0_sdWt7 ipv1_sdWtg ipv3_sdWtj] \r [s_sdWtk]
                                          case myThreadId# [s_sdWtk] of {
                                            (#,#) ipv4_sdWtm [Occ=Once] ipv5_sdWtn [Occ=Once] ->
                                                let {
                                                  sat_sdWto [Occ=Once] :: GHC.Conc.Sync.ThreadId
                                                  [LclId] =
                                                      CCCS GHC.Conc.Sync.ThreadId! [ipv5_sdWtn];
                                                } in 
                                                  case
                                                      putMVar# [ipv1_sdWtg sat_sdWto ipv4_sdWtm]
                                                  of
                                                  s2#_sdWtp
                                                  { __DEFAULT ->
                                                        let {
                                                          sat_sdWts [Occ=Once, Dmd=<L,1*C1(U)>]
                                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     () #)
                                                          [LclId] =
                                                              [action0_sdWt7 ipv3_sdWtj] \s []
                                                                  case ipv3_sdWtj of {
                                                                    __DEFAULT -> action0_sdWt7;
                                                                    0# ->
                                                                        let {
                                                                          sat_sdWtr [Occ=OnceT[0]]
                                                                            :: GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld
                                                                               -> (# GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld,
                                                                                     () #)
                                                                          [LclId] =
                                                                              [action0_sdWt7] \r [eta_B1]
                                                                                  unmaskAsyncExceptions# [action0_sdWt7
                                                                                                          eta_B1];
                                                                        } in  sat_sdWtr;
                                                                    1# ->
                                                                        GHC.IO.uninterruptibleMask_1
                                                                            action0_sdWt7;
                                                                  };
                                                        } in 
                                                          catch# [sat_sdWts
                                                                  GHC.Conc.Sync.childHandler1
                                                                  s2#_sdWtp];
                                                  };
                                          };
                                } in 
                                  case makeStablePtr# [sat_sdWtt ipv2_sdWti] of {
                                    (#,#) ipv4_sdWtv [Occ=Once] ipv5_sdWtw ->
                                        case
                                            __pkg_ccall_GC base-4.11.0.0 [ipv5_sdWtw ipv4_sdWtv]
                                        of
                                        { (#,#) ds5_sdWtz [Occ=Once*] ds6_sdWtA [Occ=Once] ->
                                              case narrow32Int# [ds6_sdWtA] of {
                                                __DEFAULT -> Control.Concurrent.forkOS3 ds5_sdWtz;
                                                0# ->
                                                    case takeMVar# [ipv1_sdWtg ds5_sdWtz] of {
                                                      (#,#) ipv6_sdWtE [Occ=Once]
                                                            ipv7_sdWtF [Occ=Once] ->
                                                          case
                                                              __pkg_ccall base-4.11.0.0 [ipv5_sdWtw
                                                                                         ipv6_sdWtE]
                                                          of
                                                          { Unit# ds8_sdWtI [Occ=Once] ->
                                                                (#,#) [ds8_sdWtI ipv7_sdWtF];
                                                          };
                                                    };
                                              };
                                        };
                                  };
                          };
                    };
                0# -> Control.Concurrent.forkOS2 eta_sdWt8;
              };
        };

Control.Concurrent.forkOS
  :: GHC.Types.IO () -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=2, Str=<L,C(U(U,U))><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Control.Concurrent.forkOS1 eta_B2 eta_B1;

Control.Concurrent.forkOSWithUnmask1
  :: ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
      -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=2, Str=<L,1*C1(C(U(U,U)))><S,U>, Unf=OtherCon []] =
    [] \r [io_sdWtJ eta_sdWtK]
        let {
          sat_sdWtM [Occ=Once, Dmd=<L,C(U(U,U))>] :: GHC.Types.IO ()
          [LclId] =
              [io_sdWtJ] \u []
                  let {
                    sat_sdWtL [Occ=Once] :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                    [LclId] =
                        [] \r [eta_B2 eta_B1] unmaskAsyncExceptions# [eta_B2 eta_B1];
                  } in  io_sdWtJ sat_sdWtL;
        } in  Control.Concurrent.forkOS1 sat_sdWtM eta_sdWtK;

Control.Concurrent.forkOSWithUnmask
  :: ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
      -> GHC.Types.IO ())
     -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=2, Str=<L,1*C1(C(U(U,U)))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Concurrent.forkOSWithUnmask1 eta_B2 eta_B1;

Control.Concurrent.$fstableZC0ZCbaseZCControlziConcurrentZCforkOSzuentry1
  :: GHC.Stable.StablePtr (GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [stableAction_sdWtN s_sdWtO]
        case stableAction_sdWtN of {
          GHC.Stable.StablePtr sp_sdWtQ [Occ=Once] ->
              case deRefStablePtr# [sp_sdWtQ s_sdWtO] of {
                (#,#) ipv_sdWtS [Occ=Once] ipv1_sdWtT [Occ=Once] ->
                    ipv1_sdWtT ipv_sdWtS;
              };
        };

Control.Concurrent.$fstableZC0ZCbaseZCControlziConcurrentZCforkOSzuentry
  :: GHC.Stable.StablePtr (GHC.Types.IO ()) -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Concurrent.$fstableZC0ZCbaseZCControlziConcurrentZCforkOSzuentry1
            eta_B2 eta_B1;


==================== STG syntax: ====================
2018-03-16 16:09:12.17275124 UTC

Control.Concurrent.isCurrentThreadBound1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case isCurrentThreadBound# [GHC.Prim.void#] of {
          Unit# ipv1_sdWo7 [Occ=Once!] ->
              let {
                sat_sdWo9 [Occ=Once] :: GHC.Types.Bool
                [LclId] =
                    [ipv1_sdWo7] \u []
                        case ipv1_sdWo7 of {
                          __DEFAULT -> GHC.Types.True [];
                          0# -> GHC.Types.False [];
                        };
              } in  Unit# [sat_sdWo9];
        };

Control.Concurrent.isCurrentThreadBound
  :: GHC.Types.IO GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        Control.Concurrent.isCurrentThreadBound1 GHC.Prim.void#;

Control.Concurrent.threadWaitRead
  :: System.Posix.Types.Fd -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U(U)><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.IO.threadWaitRead1 eta_B2 GHC.Prim.void#;

Control.Concurrent.threadWaitWrite
  :: System.Posix.Types.Fd -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U(U)><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.IO.threadWaitWrite1 eta_B2 GHC.Prim.void#;

Control.Concurrent.threadWaitReadSTM
  :: System.Posix.Types.Fd
     -> GHC.Types.IO (GHC.Conc.Sync.STM (), GHC.Types.IO ())
[GblId, Arity=2, Str=<L,U(U)><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.IO.threadWaitReadSTM1 eta_B2 GHC.Prim.void#;

Control.Concurrent.threadWaitWriteSTM
  :: System.Posix.Types.Fd
     -> GHC.Types.IO (GHC.Conc.Sync.STM (), GHC.Types.IO ())
[GblId, Arity=2, Str=<L,U(U)><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.IO.threadWaitWriteSTM1 eta_B2 GHC.Prim.void#;

Control.Concurrent.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Concurrent.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.$trModule4];

Control.Concurrent.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Concurrent"#;

Control.Concurrent.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.$trModule2];

Control.Concurrent.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Concurrent.$trModule3
                                     Control.Concurrent.$trModule1];

Control.Concurrent.rtsSupportsBoundThreads :: GHC.Types.Bool
[GblId] =
    [] \u []
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          Unit# ds1_sdWod [Occ=Once!] ->
              case ds1_sdWod of {
                __DEFAULT -> GHC.Types.True [];
                0# -> GHC.Types.False [];
              };
        };

Control.Concurrent.forkFinally2
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Data.Either.Either GHC.Exception.SomeException a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [e1_sdWof void_0E]
        let {
          sat_sdWoh [Occ=Once]
            :: Data.Either.Either GHC.Exception.SomeException a_adVT0
          [LclId] =
              CCCS Data.Either.Left! [e1_sdWof];
        } in  Unit# [sat_sdWoh];

Control.Concurrent.runInUnboundThread1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,C(U(U,U))><S,U>, Unf=OtherCon []] =
    [] \r [action_sdWoi void_0E]
        case isCurrentThreadBound# [GHC.Prim.void#] of {
          Unit# ipv1_sdWom [Occ=Once!] ->
              case ipv1_sdWom of {
                __DEFAULT ->
                    case newMVar# [GHC.Prim.void#] of {
                      Unit# ipv3_sdWoq ->
                          case getMaskingState# [GHC.Prim.void#] of {
                            Unit# ipv5_sdWot [Occ=Once!] ->
                                let {
                                  lvl13_sdWou [Occ=Once*, Dmd=<L,C(U)>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             Data.Either.Either
                                               GHC.Exception.SomeException a_adVT0 #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [ipv3_sdWoq] \r [void_0E]
                                          takeMVar# [ipv3_sdWoq GHC.Prim.void#];
                                } in 
                                  case ipv5_sdWot of {
                                    __DEFAULT ->
                                        let {
                                          sat_sdWoK [Occ=Once] :: GHC.Types.IO ()
                                          [LclId] =
                                              [action_sdWoi ipv3_sdWoq] \r [void_0E]
                                                  let {
                                                    sat_sdWoJ [Occ=Once]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               () #)
                                                    [LclId] =
                                                        [action_sdWoi ipv3_sdWoq] \r [void_0E]
                                                            let {
                                                              sat_sdWoE [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVT0 #)
                                                              [LclId] =
                                                                  [action_sdWoi] \r [void_0E]
                                                                      case
                                                                          maskAsyncExceptions# [action_sdWoi
                                                                                                GHC.Prim.void#]
                                                                      of
                                                                      { Unit# ipv7_sdWoC [Occ=Once] ->
                                                                            let {
                                                                              sat_sdWoD [Occ=Once]
                                                                                :: Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVT0
                                                                              [LclId] =
                                                                                  CCCS Data.Either.Right! [ipv7_sdWoC];
                                                                            } in  Unit# [sat_sdWoD];
                                                                      };
                                                            } in 
                                                              case
                                                                  catch# [sat_sdWoE
                                                                          Control.Concurrent.forkFinally2
                                                                          GHC.Prim.void#]
                                                              of
                                                              { Unit# ipv7_sdWoH [Occ=Once] ->
                                                                    case
                                                                        putMVar# [ipv3_sdWoq
                                                                                  ipv7_sdWoH
                                                                                  GHC.Prim.void#]
                                                                    of
                                                                    s2#_sdWoI
                                                                    { (##) -> Unit# [GHC.Tuple.()];
                                                                    };
                                                              };
                                                  } in 
                                                    catch# [sat_sdWoJ
                                                            GHC.Conc.Sync.forkIO2
                                                            GHC.Prim.void#];
                                        } in 
                                          case fork# [sat_sdWoK GHC.Prim.void#] of {
                                            Unit# ipv7_sdWoN [Occ=Once] ->
                                                let {
                                                  wait_sdWoO [Occ=LoopBreaker]
                                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             Data.Either.Either
                                                               GHC.Exception.SomeException
                                                               a_adVT0 #)
                                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                      sat-only [lvl13_sdWou
                                                                ipv7_sdWoN
                                                                wait_sdWoO] \r [void_0E]
                                                          let {
                                                            sat_sdWoT [Occ=Once]
                                                              :: GHC.Exception.SomeException
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVT0 #)
                                                            [LclId] =
                                                                [ipv7_sdWoN wait_sdWoO] \r [e1_sdWoQ
                                                                                            void_0E]
                                                                    case
                                                                        killThread# [ipv7_sdWoN
                                                                                     e1_sdWoQ
                                                                                     GHC.Prim.void#]
                                                                    of
                                                                    s2_sdWoS
                                                                    { (##) ->
                                                                          wait_sdWoO GHC.Prim.void#;
                                                                    };
                                                          } in 
                                                            catch# [lvl13_sdWou
                                                                    sat_sdWoT
                                                                    GHC.Prim.void#];
                                                } in 
                                                  case wait_sdWoO GHC.Prim.void# of {
                                                    Unit# ipv9_sdWoW [Occ=Once!] ->
                                                        case ipv9_sdWoW of {
                                                          Data.Either.Left x_sdWoY [Occ=Once] ->
                                                              raiseIO# [x_sdWoY GHC.Prim.void#];
                                                          Data.Either.Right y_sdWoZ [Occ=Once] ->
                                                              Unit# [y_sdWoZ];
                                                        };
                                                  };
                                          };
                                    0# ->
                                        let {
                                          sat_sdWpu [Occ=Once]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adVT0 #)
                                          [LclId] =
                                              [action_sdWoi ipv3_sdWoq lvl13_sdWou] \r [void_0E]
                                                  let {
                                                    sat_sdWpe [Occ=Once] :: GHC.Types.IO ()
                                                    [LclId] =
                                                        [action_sdWoi ipv3_sdWoq] \r [void_0E]
                                                            let {
                                                              sat_sdWpd [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         () #)
                                                              [LclId] =
                                                                  [action_sdWoi
                                                                   ipv3_sdWoq] \r [void_0E]
                                                                      let {
                                                                        sat_sdWp8 [Occ=Once]
                                                                          :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVT0 #)
                                                                        [LclId] =
                                                                            [action_sdWoi] \r [void_0E]
                                                                                case
                                                                                    unmaskAsyncExceptions# [action_sdWoi
                                                                                                            GHC.Prim.void#]
                                                                                of
                                                                                { Unit# ipv7_sdWp6 [Occ=Once] ->
                                                                                      let {
                                                                                        sat_sdWp7 [Occ=Once]
                                                                                          :: Data.Either.Either
                                                                                               GHC.Exception.SomeException
                                                                                               a_adVT0
                                                                                        [LclId] =
                                                                                            CCCS Data.Either.Right! [ipv7_sdWp6];
                                                                                      } in 
                                                                                        Unit# [sat_sdWp7];
                                                                                };
                                                                      } in 
                                                                        case
                                                                            catch# [sat_sdWp8
                                                                                    Control.Concurrent.forkFinally2
                                                                                    GHC.Prim.void#]
                                                                        of
                                                                        { Unit# ipv7_sdWpb [Occ=Once] ->
                                                                              case
                                                                                  putMVar# [ipv3_sdWoq
                                                                                            ipv7_sdWpb
                                                                                            GHC.Prim.void#]
                                                                              of
                                                                              s2#_sdWpc
                                                                              { (##) ->
                                                                                    Unit# [GHC.Tuple.()];
                                                                              };
                                                                        };
                                                            } in 
                                                              catch# [sat_sdWpd
                                                                      GHC.Conc.Sync.forkIO2
                                                                      GHC.Prim.void#];
                                                  } in 
                                                    case fork# [sat_sdWpe GHC.Prim.void#] of {
                                                      Unit# ipv7_sdWph [Occ=Once] ->
                                                          let {
                                                            wait_sdWpi [Occ=LoopBreaker]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVT0 #)
                                                            [LclId,
                                                             Arity=1,
                                                             Str=<S,U>,
                                                             Unf=OtherCon []] =
                                                                sat-only [lvl13_sdWou
                                                                          ipv7_sdWph
                                                                          wait_sdWpi] \r [void_0E]
                                                                    let {
                                                                      sat_sdWpn [Occ=Once]
                                                                        :: GHC.Exception.SomeException
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 Data.Either.Either
                                                                                   GHC.Exception.SomeException
                                                                                   a_adVT0 #)
                                                                      [LclId] =
                                                                          [ipv7_sdWph
                                                                           wait_sdWpi] \r [e1_sdWpk
                                                                                           void_0E]
                                                                              case
                                                                                  killThread# [ipv7_sdWph
                                                                                               e1_sdWpk
                                                                                               GHC.Prim.void#]
                                                                              of
                                                                              s3_sdWpm
                                                                              { (##) ->
                                                                                    wait_sdWpi
                                                                                        GHC.Prim.void#;
                                                                              };
                                                                    } in 
                                                                      catch# [lvl13_sdWou
                                                                              sat_sdWpn
                                                                              GHC.Prim.void#];
                                                          } in 
                                                            case wait_sdWpi GHC.Prim.void# of {
                                                              Unit# ipv9_sdWpq [Occ=Once!] ->
                                                                  case ipv9_sdWpq of {
                                                                    Data.Either.Left x_sdWps [Occ=Once] ->
                                                                        raiseIO# [x_sdWps
                                                                                  GHC.Prim.void#];
                                                                    Data.Either.Right y_sdWpt [Occ=Once] ->
                                                                        Unit# [y_sdWpt];
                                                                  };
                                                            };
                                                    };
                                        } in  maskAsyncExceptions# [sat_sdWpu GHC.Prim.void#];
                                    1# ->
                                        let {
                                          sat_sdWpI [Occ=Once] :: GHC.Types.IO ()
                                          [LclId] =
                                              [action_sdWoi ipv3_sdWoq] \r [void_0E]
                                                  let {
                                                    sat_sdWpH [Occ=Once]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               () #)
                                                    [LclId] =
                                                        [action_sdWoi ipv3_sdWoq] \r [void_0E]
                                                            let {
                                                              sat_sdWpC [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVT0 #)
                                                              [LclId] =
                                                                  [action_sdWoi] \r [void_0E]
                                                                      case
                                                                          maskUninterruptible# [action_sdWoi
                                                                                                GHC.Prim.void#]
                                                                      of
                                                                      { Unit# ipv7_sdWpA [Occ=Once] ->
                                                                            let {
                                                                              sat_sdWpB [Occ=Once]
                                                                                :: Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVT0
                                                                              [LclId] =
                                                                                  CCCS Data.Either.Right! [ipv7_sdWpA];
                                                                            } in  Unit# [sat_sdWpB];
                                                                      };
                                                            } in 
                                                              case
                                                                  catch# [sat_sdWpC
                                                                          Control.Concurrent.forkFinally2
                                                                          GHC.Prim.void#]
                                                              of
                                                              { Unit# ipv7_sdWpF [Occ=Once] ->
                                                                    case
                                                                        putMVar# [ipv3_sdWoq
                                                                                  ipv7_sdWpF
                                                                                  GHC.Prim.void#]
                                                                    of
                                                                    s2#_sdWpG
                                                                    { (##) -> Unit# [GHC.Tuple.()];
                                                                    };
                                                              };
                                                  } in 
                                                    catch# [sat_sdWpH
                                                            GHC.Conc.Sync.forkIO2
                                                            GHC.Prim.void#];
                                        } in 
                                          case fork# [sat_sdWpI GHC.Prim.void#] of {
                                            Unit# ipv7_sdWpL [Occ=Once] ->
                                                let {
                                                  wait_sdWpM [Occ=LoopBreaker]
                                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             Data.Either.Either
                                                               GHC.Exception.SomeException
                                                               a_adVT0 #)
                                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                      sat-only [lvl13_sdWou
                                                                ipv7_sdWpL
                                                                wait_sdWpM] \r [void_0E]
                                                          let {
                                                            sat_sdWpR [Occ=Once]
                                                              :: GHC.Exception.SomeException
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVT0 #)
                                                            [LclId] =
                                                                [ipv7_sdWpL wait_sdWpM] \r [e1_sdWpO
                                                                                            void_0E]
                                                                    case
                                                                        killThread# [ipv7_sdWpL
                                                                                     e1_sdWpO
                                                                                     GHC.Prim.void#]
                                                                    of
                                                                    s2_sdWpQ
                                                                    { (##) ->
                                                                          wait_sdWpM GHC.Prim.void#;
                                                                    };
                                                          } in 
                                                            catch# [lvl13_sdWou
                                                                    sat_sdWpR
                                                                    GHC.Prim.void#];
                                                } in 
                                                  case wait_sdWpM GHC.Prim.void# of {
                                                    Unit# ipv9_sdWpU [Occ=Once!] ->
                                                        case ipv9_sdWpU of {
                                                          Data.Either.Left x_sdWpW [Occ=Once] ->
                                                              raiseIO# [x_sdWpW GHC.Prim.void#];
                                                          Data.Either.Right y_sdWpX [Occ=Once] ->
                                                              Unit# [y_sdWpX];
                                                        };
                                                  };
                                          };
                                  };
                          };
                    };
                0# -> action_sdWoi GHC.Prim.void#;
              };
        };

Control.Concurrent.runInUnboundThread
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,C(U(U,U))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Control.Concurrent.runInUnboundThread1 eta_B2 GHC.Prim.void#;

lvl_rdWnQ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RTS doesn't support multiple OS threads (use ghc -threaded when linking)"#;

Control.Concurrent.forkOS2
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        case GHC.CString.unpackCString# lvl_rdWnQ of sat_sdWpZ {
          __DEFAULT -> GHC.IO.failIO1 sat_sdWpZ GHC.Prim.void#;
        };

lvl1_rdWnR :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "undefined"#;

lvl2_rdWnS :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl1_rdWnR;

lvl3_rdWnT :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Control.Concurrent.$trModule4;

lvl4_rdWnU :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Control.Concurrent.$trModule2;

lvl5_rdWnV :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./Control/Concurrent.hs"#;

lvl6_rdWnW :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_rdWnV;

lvl7_rdWnX :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [353#];

lvl8_rdWnY :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [33#];

lvl9_rdWnZ :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [42#];

lvl10_rdWo0 :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_rdWnT
                                           lvl4_rdWnU
                                           lvl6_rdWnW
                                           lvl7_rdWnX
                                           lvl8_rdWnY
                                           lvl7_rdWnX
                                           lvl9_rdWnZ];

lvl11_rdWo1 :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_rdWnS
                                                  lvl10_rdWo0
                                                  GHC.Stack.Types.EmptyCallStack];

Control.Concurrent.runInBoundThread2
  :: forall a. Data.Either.Either GHC.Exception.SomeException a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl11_rdWo1;

Control.Concurrent.runInBoundThread1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,C(U(U,U))><L,U>, Unf=OtherCon []] =
    [] \r [action_sdWq0 void_0E]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          Unit# ds1_sdWq5 [Occ=Once!] ->
              case ds1_sdWq5 of {
                __DEFAULT ->
                    case isCurrentThreadBound# [GHC.Prim.void#] of {
                      Unit# ipv1_sdWq9 [Occ=Once!] ->
                          case ipv1_sdWq9 of {
                            __DEFAULT -> action_sdWq0 GHC.Prim.void#;
                            0# ->
                                case
                                    newMutVar# [Control.Concurrent.runInBoundThread2 GHC.Prim.void#]
                                of
                                { Unit# ipv3_sdWqd ->
                                      case getMaskingState# [GHC.Prim.void#] of {
                                        Unit# ipv5_sdWqg [Occ=Once!] ->
                                            case ipv5_sdWqg of {
                                              __DEFAULT ->
                                                  let {
                                                    sat_sdWqt [Occ=Once] :: GHC.Types.IO ()
                                                    [LclId] =
                                                        [action_sdWq0 ipv3_sdWqd] \r [void_0E]
                                                            let {
                                                              sat_sdWqo [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVVB #)
                                                              [LclId] =
                                                                  [action_sdWq0] \r [void_0E]
                                                                      case
                                                                          action_sdWq0
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# ipv7_sdWqm [Occ=Once] ->
                                                                            let {
                                                                              sat_sdWqn [Occ=Once]
                                                                                :: Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVVB
                                                                              [LclId] =
                                                                                  CCCS Data.Either.Right! [ipv7_sdWqm];
                                                                            } in  Unit# [sat_sdWqn];
                                                                      };
                                                            } in 
                                                              case
                                                                  catch# [sat_sdWqo
                                                                          Control.Concurrent.forkFinally2
                                                                          GHC.Prim.void#]
                                                              of
                                                              { Unit# ipv7_sdWqr [Occ=Once] ->
                                                                    case
                                                                        writeMutVar# [ipv3_sdWqd
                                                                                      ipv7_sdWqr
                                                                                      GHC.Prim.void#]
                                                                    of
                                                                    s2#_sdWqs
                                                                    { (##) -> Unit# [GHC.Tuple.()];
                                                                    };
                                                              };
                                                  } in 
                                                    case
                                                        makeStablePtr# [sat_sdWqt GHC.Prim.void#]
                                                    of
                                                    { Unit# ipv7_sdWqw ->
                                                          let {
                                                            sat_sdWqI [Occ=Once]
                                                              :: GHC.Exception.SomeException
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [ipv7_sdWqw] \r [e1_sdWqD void_0E]
                                                                    case
                                                                        __pkg_ccall base-4.11.0.0 [ipv7_sdWqw
                                                                                                   GHC.Prim.void#]
                                                                    of
                                                                    { (##) ->
                                                                          raiseIO# [e1_sdWqD
                                                                                    GHC.Prim.void#];
                                                                    }; } in
                                                          let {
                                                            sat_sdWqB [Occ=Once]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [ipv3_sdWqd ipv7_sdWqw] \r [void_0E]
                                                                    case
                                                                        __pkg_ccall_GC base-4.11.0.0 [ipv7_sdWqw
                                                                                                      GHC.Prim.void#]
                                                                    of
                                                                    { (##) ->
                                                                          readMutVar# [ipv3_sdWqd
                                                                                       GHC.Prim.void#];
                                                                    }; } in
                                                          let {
                                                            sat_sdWqC [Occ=Once]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [sat_sdWqB] \r [void_0E]
                                                                    maskAsyncExceptions# [sat_sdWqB
                                                                                          GHC.Prim.void#];
                                                          } in 
                                                            case
                                                                catch# [sat_sdWqC
                                                                        sat_sdWqI
                                                                        GHC.Prim.void#]
                                                            of
                                                            { Unit# ipv9_sdWqL [Occ=Once!] ->
                                                                  case
                                                                      __pkg_ccall base-4.11.0.0 [ipv7_sdWqw
                                                                                                 GHC.Prim.void#]
                                                                  of
                                                                  { (##) ->
                                                                        case ipv9_sdWqL of {
                                                                          Data.Either.Left x_sdWqQ [Occ=Once] ->
                                                                              raiseIO# [x_sdWqQ
                                                                                        GHC.Prim.void#];
                                                                          Data.Either.Right y_sdWqR [Occ=Once] ->
                                                                              Unit# [y_sdWqR];
                                                                        };
                                                                  };
                                                            };
                                                    };
                                              0# ->
                                                  let {
                                                    sat_sdWrq [Occ=Once]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               Data.Either.Either
                                                                 GHC.Exception.SomeException
                                                                 a_adVVB #)
                                                    [LclId] =
                                                        [action_sdWq0 ipv3_sdWqd] \r [void_0E]
                                                            let {
                                                              sat_sdWr4 [Occ=Once]
                                                                :: GHC.Types.IO ()
                                                              [LclId] =
                                                                  [action_sdWq0
                                                                   ipv3_sdWqd] \r [void_0E]
                                                                      let {
                                                                        sat_sdWqZ [Occ=Once]
                                                                          :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVVB #)
                                                                        [LclId] =
                                                                            [action_sdWq0] \r [void_0E]
                                                                                case
                                                                                    action_sdWq0
                                                                                        GHC.Prim.void#
                                                                                of
                                                                                { Unit# ipv7_sdWqX [Occ=Once] ->
                                                                                      let {
                                                                                        sat_sdWqY [Occ=Once]
                                                                                          :: Data.Either.Either
                                                                                               GHC.Exception.SomeException
                                                                                               a_adVVB
                                                                                        [LclId] =
                                                                                            CCCS Data.Either.Right! [ipv7_sdWqX];
                                                                                      } in 
                                                                                        Unit# [sat_sdWqY];
                                                                                };
                                                                      } in 
                                                                        case
                                                                            catch# [sat_sdWqZ
                                                                                    Control.Concurrent.forkFinally2
                                                                                    GHC.Prim.void#]
                                                                        of
                                                                        { Unit# ipv7_sdWr2 [Occ=Once] ->
                                                                              case
                                                                                  writeMutVar# [ipv3_sdWqd
                                                                                                ipv7_sdWr2
                                                                                                GHC.Prim.void#]
                                                                              of
                                                                              s2#_sdWr3
                                                                              { (##) ->
                                                                                    Unit# [GHC.Tuple.()];
                                                                              };
                                                                        };
                                                            } in 
                                                              case
                                                                  makeStablePtr# [sat_sdWr4
                                                                                  GHC.Prim.void#]
                                                              of
                                                              { Unit# ipv7_sdWr7 ->
                                                                    let {
                                                                      sat_sdWrj [Occ=Once]
                                                                        :: GHC.Exception.SomeException
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 Data.Either.Either
                                                                                   GHC.Exception.SomeException
                                                                                   a_adVVB #)
                                                                      [LclId] =
                                                                          [ipv7_sdWr7] \r [e1_sdWre
                                                                                           void_0E]
                                                                              case
                                                                                  __pkg_ccall base-4.11.0.0 [ipv7_sdWr7
                                                                                                             GHC.Prim.void#]
                                                                              of
                                                                              { (##) ->
                                                                                    raiseIO# [e1_sdWre
                                                                                              GHC.Prim.void#];
                                                                              }; } in
                                                                    let {
                                                                      sat_sdWrc [Occ=Once]
                                                                        :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 Data.Either.Either
                                                                                   GHC.Exception.SomeException
                                                                                   a_adVVB #)
                                                                      [LclId] =
                                                                          [ipv3_sdWqd
                                                                           ipv7_sdWr7] \r [void_0E]
                                                                              case
                                                                                  __pkg_ccall_GC base-4.11.0.0 [ipv7_sdWr7
                                                                                                                GHC.Prim.void#]
                                                                              of
                                                                              { (##) ->
                                                                                    readMutVar# [ipv3_sdWqd
                                                                                                 GHC.Prim.void#];
                                                                              }; } in
                                                                    let {
                                                                      sat_sdWrd [Occ=Once]
                                                                        :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 Data.Either.Either
                                                                                   GHC.Exception.SomeException
                                                                                   a_adVVB #)
                                                                      [LclId] =
                                                                          [sat_sdWrc] \r [void_0E]
                                                                              unmaskAsyncExceptions# [sat_sdWrc
                                                                                                      GHC.Prim.void#];
                                                                    } in 
                                                                      case
                                                                          catch# [sat_sdWrd
                                                                                  sat_sdWrj
                                                                                  GHC.Prim.void#]
                                                                      of
                                                                      { Unit# ipv9_sdWrm [Occ=Once] ->
                                                                            case
                                                                                __pkg_ccall base-4.11.0.0 [ipv7_sdWr7
                                                                                                           GHC.Prim.void#]
                                                                            of
                                                                            { (##) ->
                                                                                  Unit# [ipv9_sdWrm];
                                                                            };
                                                                      };
                                                              };
                                                  } in 
                                                    case
                                                        maskAsyncExceptions# [sat_sdWrq
                                                                              GHC.Prim.void#]
                                                    of
                                                    { Unit# ipv7_sdWrt [Occ=Once!] ->
                                                          case ipv7_sdWrt of {
                                                            Data.Either.Left x_sdWrv [Occ=Once] ->
                                                                raiseIO# [x_sdWrv GHC.Prim.void#];
                                                            Data.Either.Right y_sdWrw [Occ=Once] ->
                                                                Unit# [y_sdWrw];
                                                          };
                                                    };
                                              1# ->
                                                  let {
                                                    sat_sdWrI [Occ=Once] :: GHC.Types.IO ()
                                                    [LclId] =
                                                        [action_sdWq0 ipv3_sdWqd] \r [void_0E]
                                                            let {
                                                              sat_sdWrD [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVVB #)
                                                              [LclId] =
                                                                  [action_sdWq0] \r [void_0E]
                                                                      case
                                                                          action_sdWq0
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# ipv7_sdWrB [Occ=Once] ->
                                                                            let {
                                                                              sat_sdWrC [Occ=Once]
                                                                                :: Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVVB
                                                                              [LclId] =
                                                                                  CCCS Data.Either.Right! [ipv7_sdWrB];
                                                                            } in  Unit# [sat_sdWrC];
                                                                      };
                                                            } in 
                                                              case
                                                                  catch# [sat_sdWrD
                                                                          Control.Concurrent.forkFinally2
                                                                          GHC.Prim.void#]
                                                              of
                                                              { Unit# ipv7_sdWrG [Occ=Once] ->
                                                                    case
                                                                        writeMutVar# [ipv3_sdWqd
                                                                                      ipv7_sdWrG
                                                                                      GHC.Prim.void#]
                                                                    of
                                                                    s2#_sdWrH
                                                                    { (##) -> Unit# [GHC.Tuple.()];
                                                                    };
                                                              };
                                                  } in 
                                                    case
                                                        makeStablePtr# [sat_sdWrI GHC.Prim.void#]
                                                    of
                                                    { Unit# ipv7_sdWrL ->
                                                          let {
                                                            sat_sdWrX [Occ=Once]
                                                              :: GHC.Exception.SomeException
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [ipv7_sdWrL] \r [e1_sdWrS void_0E]
                                                                    case
                                                                        __pkg_ccall base-4.11.0.0 [ipv7_sdWrL
                                                                                                   GHC.Prim.void#]
                                                                    of
                                                                    { (##) ->
                                                                          raiseIO# [e1_sdWrS
                                                                                    GHC.Prim.void#];
                                                                    }; } in
                                                          let {
                                                            sat_sdWrQ [Occ=Once]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [ipv3_sdWqd ipv7_sdWrL] \r [void_0E]
                                                                    case
                                                                        __pkg_ccall_GC base-4.11.0.0 [ipv7_sdWrL
                                                                                                      GHC.Prim.void#]
                                                                    of
                                                                    { (##) ->
                                                                          readMutVar# [ipv3_sdWqd
                                                                                       GHC.Prim.void#];
                                                                    }; } in
                                                          let {
                                                            sat_sdWrR [Occ=Once]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [sat_sdWrQ] \r [void_0E]
                                                                    maskUninterruptible# [sat_sdWrQ
                                                                                          GHC.Prim.void#];
                                                          } in 
                                                            case
                                                                catch# [sat_sdWrR
                                                                        sat_sdWrX
                                                                        GHC.Prim.void#]
                                                            of
                                                            { Unit# ipv9_sdWs0 [Occ=Once!] ->
                                                                  case
                                                                      __pkg_ccall base-4.11.0.0 [ipv7_sdWrL
                                                                                                 GHC.Prim.void#]
                                                                  of
                                                                  { (##) ->
                                                                        case ipv9_sdWs0 of {
                                                                          Data.Either.Left x_sdWs5 [Occ=Once] ->
                                                                              raiseIO# [x_sdWs5
                                                                                        GHC.Prim.void#];
                                                                          Data.Either.Right y_sdWs6 [Occ=Once] ->
                                                                              Unit# [y_sdWs6];
                                                                        };
                                                                  };
                                                            };
                                                    };
                                            };
                                      };
                                };
                          };
                    };
                0# -> Control.Concurrent.forkOS2 GHC.Prim.void#;
              };
        };

Control.Concurrent.runInBoundThread
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,C(U(U,U))><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Control.Concurrent.runInBoundThread1 eta_B2 GHC.Prim.void#;

Control.Concurrent.forkFinally1
  :: forall a.
     GHC.Types.IO a
     -> (Data.Either.Either GHC.Exception.SomeException a
         -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=3, Str=<L,C(U)><L,C(C1(U))><S,U>, Unf=OtherCon []] =
    [] \r [action_sdWs7 and_then_sdWs8 void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sdWsc [Occ=Once!] ->
              case ipv1_sdWsc of {
                __DEFAULT ->
                    let {
                      sat_sdWsq [Occ=Once] :: GHC.Types.IO ()
                      [LclId] =
                          [action_sdWs7 and_then_sdWs8] \r [void_0E]
                              let {
                                sat_sdWsp [Occ=Once]
                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                [LclId] =
                                    [action_sdWs7 and_then_sdWs8] \r [void_0E]
                                        let {
                                          sat_sdWsl [Occ=Once]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Either.Either
                                                       GHC.Exception.SomeException a_adVWY #)
                                          [LclId] =
                                              [action_sdWs7] \r [void_0E]
                                                  case
                                                      maskAsyncExceptions# [action_sdWs7
                                                                            GHC.Prim.void#]
                                                  of
                                                  { Unit# ipv3_sdWsj [Occ=Once] ->
                                                        let {
                                                          sat_sdWsk [Occ=Once]
                                                            :: Data.Either.Either
                                                                 GHC.Exception.SomeException a_adVWY
                                                          [LclId] =
                                                              CCCS Data.Either.Right! [ipv3_sdWsj];
                                                        } in  Unit# [sat_sdWsk];
                                                  };
                                        } in 
                                          case
                                              catch# [sat_sdWsl
                                                      Control.Concurrent.forkFinally2
                                                      GHC.Prim.void#]
                                          of
                                          { Unit# ipv3_sdWso [Occ=Once] ->
                                                and_then_sdWs8 ipv3_sdWso GHC.Prim.void#;
                                          };
                              } in  catch# [sat_sdWsp GHC.Conc.Sync.forkIO2 GHC.Prim.void#];
                    } in 
                      case fork# [sat_sdWsq GHC.Prim.void#] of {
                        Unit# ipv3_sdWst [Occ=Once] ->
                            let {
                              sat_sdWsu [Occ=Once] :: GHC.Conc.Sync.ThreadId
                              [LclId] =
                                  CCCS GHC.Conc.Sync.ThreadId! [ipv3_sdWst];
                            } in  Unit# [sat_sdWsu];
                      };
                0# ->
                    let {
                      sat_sdWsN [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
                      [LclId] =
                          [action_sdWs7 and_then_sdWs8] \r [void_0E]
                              let {
                                sat_sdWsI [Occ=Once] :: GHC.Types.IO ()
                                [LclId] =
                                    [action_sdWs7 and_then_sdWs8] \r [void_0E]
                                        let {
                                          sat_sdWsH [Occ=Once]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                          [LclId] =
                                              [action_sdWs7 and_then_sdWs8] \r [void_0E]
                                                  let {
                                                    sat_sdWsD [Occ=Once]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               Data.Either.Either
                                                                 GHC.Exception.SomeException
                                                                 a_adVWY #)
                                                    [LclId] =
                                                        [action_sdWs7] \r [void_0E]
                                                            case
                                                                unmaskAsyncExceptions# [action_sdWs7
                                                                                        GHC.Prim.void#]
                                                            of
                                                            { Unit# ipv3_sdWsB [Occ=Once] ->
                                                                  let {
                                                                    sat_sdWsC [Occ=Once]
                                                                      :: Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVWY
                                                                    [LclId] =
                                                                        CCCS Data.Either.Right! [ipv3_sdWsB];
                                                                  } in  Unit# [sat_sdWsC];
                                                            };
                                                  } in 
                                                    case
                                                        catch# [sat_sdWsD
                                                                Control.Concurrent.forkFinally2
                                                                GHC.Prim.void#]
                                                    of
                                                    { Unit# ipv3_sdWsG [Occ=Once] ->
                                                          and_then_sdWs8 ipv3_sdWsG GHC.Prim.void#;
                                                    };
                                        } in 
                                          catch# [sat_sdWsH GHC.Conc.Sync.forkIO2 GHC.Prim.void#];
                              } in 
                                case fork# [sat_sdWsI GHC.Prim.void#] of {
                                  Unit# ipv3_sdWsL [Occ=Once] ->
                                      let {
                                        sat_sdWsM [Occ=Once] :: GHC.Conc.Sync.ThreadId
                                        [LclId] =
                                            CCCS GHC.Conc.Sync.ThreadId! [ipv3_sdWsL];
                                      } in  Unit# [sat_sdWsM];
                                };
                    } in  maskAsyncExceptions# [sat_sdWsN GHC.Prim.void#];
                1# ->
                    let {
                      sat_sdWt0 [Occ=Once] :: GHC.Types.IO ()
                      [LclId] =
                          [action_sdWs7 and_then_sdWs8] \r [void_0E]
                              let {
                                sat_sdWsZ [Occ=Once]
                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                [LclId] =
                                    [action_sdWs7 and_then_sdWs8] \r [void_0E]
                                        let {
                                          sat_sdWsV [Occ=Once]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Either.Either
                                                       GHC.Exception.SomeException a_adVWY #)
                                          [LclId] =
                                              [action_sdWs7] \r [void_0E]
                                                  case
                                                      maskUninterruptible# [action_sdWs7
                                                                            GHC.Prim.void#]
                                                  of
                                                  { Unit# ipv3_sdWsT [Occ=Once] ->
                                                        let {
                                                          sat_sdWsU [Occ=Once]
                                                            :: Data.Either.Either
                                                                 GHC.Exception.SomeException a_adVWY
                                                          [LclId] =
                                                              CCCS Data.Either.Right! [ipv3_sdWsT];
                                                        } in  Unit# [sat_sdWsU];
                                                  };
                                        } in 
                                          case
                                              catch# [sat_sdWsV
                                                      Control.Concurrent.forkFinally2
                                                      GHC.Prim.void#]
                                          of
                                          { Unit# ipv3_sdWsY [Occ=Once] ->
                                                and_then_sdWs8 ipv3_sdWsY GHC.Prim.void#;
                                          };
                              } in  catch# [sat_sdWsZ GHC.Conc.Sync.forkIO2 GHC.Prim.void#];
                    } in 
                      case fork# [sat_sdWt0 GHC.Prim.void#] of {
                        Unit# ipv3_sdWt3 [Occ=Once] ->
                            let {
                              sat_sdWt4 [Occ=Once] :: GHC.Conc.Sync.ThreadId
                              [LclId] =
                                  CCCS GHC.Conc.Sync.ThreadId! [ipv3_sdWt3];
                            } in  Unit# [sat_sdWt4];
                      };
              };
        };

Control.Concurrent.forkFinally
  :: forall a.
     GHC.Types.IO a
     -> (Data.Either.Either GHC.Exception.SomeException a
         -> GHC.Types.IO ())
     -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=3, Str=<L,C(U)><L,C(C1(U))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        Control.Concurrent.forkFinally1 eta_B3 eta_B2 GHC.Prim.void#;

lvl12_rdWo2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Cannot create OS thread."#;

Control.Concurrent.forkOS3
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        case GHC.CString.unpackCString# lvl12_rdWo2 of sat_sdWt6 {
          __DEFAULT -> GHC.IO.failIO1 sat_sdWt6 GHC.Prim.void#;
        };

Control.Concurrent.forkOS1
  :: GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=2, Str=<L,C(U(U,U))><L,U>, Unf=OtherCon []] =
    [] \r [action0_sdWt7 void_0E]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          Unit# ds1_sdWtc [Occ=Once!] ->
              case ds1_sdWtc of {
                __DEFAULT ->
                    case newMVar# [GHC.Prim.void#] of {
                      Unit# ipv1_sdWtg ->
                          case getMaskingState# [GHC.Prim.void#] of {
                            Unit# ipv3_sdWtj [Occ=Once!] ->
                                let {
                                  sat_sdWtt [Occ=Once] :: GHC.Types.IO ()
                                  [LclId] =
                                      [action0_sdWt7 ipv1_sdWtg ipv3_sdWtj] \r [void_0E]
                                          case myThreadId# [GHC.Prim.void#] of {
                                            Unit# ipv5_sdWtn [Occ=Once] ->
                                                let {
                                                  sat_sdWto [Occ=Once] :: GHC.Conc.Sync.ThreadId
                                                  [LclId] =
                                                      CCCS GHC.Conc.Sync.ThreadId! [ipv5_sdWtn];
                                                } in 
                                                  case
                                                      putMVar# [ipv1_sdWtg sat_sdWto GHC.Prim.void#]
                                                  of
                                                  s2#_sdWtp
                                                  { (##) ->
                                                        let {
                                                          sat_sdWts [Occ=Once, Dmd=<L,1*C1(U)>]
                                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     () #)
                                                          [LclId] =
                                                              [action0_sdWt7 ipv3_sdWtj] \s []
                                                                  case ipv3_sdWtj of {
                                                                    __DEFAULT -> action0_sdWt7;
                                                                    0# ->
                                                                        let {
                                                                          sat_sdWtr [Occ=OnceT[0]]
                                                                            :: GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld
                                                                               -> (# GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld,
                                                                                     () #)
                                                                          [LclId] =
                                                                              [action0_sdWt7] \r [void_0E]
                                                                                  unmaskAsyncExceptions# [action0_sdWt7
                                                                                                          GHC.Prim.void#];
                                                                        } in  sat_sdWtr;
                                                                    1# ->
                                                                        GHC.IO.uninterruptibleMask_1
                                                                            action0_sdWt7;
                                                                  };
                                                        } in 
                                                          catch# [sat_sdWts
                                                                  GHC.Conc.Sync.childHandler1
                                                                  GHC.Prim.void#];
                                                  };
                                          };
                                } in 
                                  case makeStablePtr# [sat_sdWtt GHC.Prim.void#] of {
                                    Unit# ipv5_sdWtw ->
                                        case
                                            __pkg_ccall_GC base-4.11.0.0 [ipv5_sdWtw GHC.Prim.void#]
                                        of
                                        { Unit# ds6_sdWtA [Occ=Once] ->
                                              case narrow32Int# [ds6_sdWtA] of {
                                                __DEFAULT ->
                                                    Control.Concurrent.forkOS3 GHC.Prim.void#;
                                                0# ->
                                                    case takeMVar# [ipv1_sdWtg GHC.Prim.void#] of {
                                                      Unit# ipv7_sdWtF [Occ=Once] ->
                                                          case
                                                              __pkg_ccall base-4.11.0.0 [ipv5_sdWtw
                                                                                         GHC.Prim.void#]
                                                          of
                                                          { (##) -> Unit# [ipv7_sdWtF];
                                                          };
                                                    };
                                              };
                                        };
                                  };
                          };
                    };
                0# -> Control.Concurrent.forkOS2 GHC.Prim.void#;
              };
        };

Control.Concurrent.forkOS
  :: GHC.Types.IO () -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=2, Str=<L,C(U(U,U))><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Control.Concurrent.forkOS1 eta_B2 GHC.Prim.void#;

Control.Concurrent.forkOSWithUnmask1
  :: ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
      -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=2, Str=<L,1*C1(C(U(U,U)))><S,U>, Unf=OtherCon []] =
    [] \r [io_sdWtJ void_0E]
        let {
          sat_sdWtM [Occ=Once, Dmd=<L,C(U(U,U))>] :: GHC.Types.IO ()
          [LclId] =
              [io_sdWtJ] \u []
                  let {
                    sat_sdWtL [Occ=Once] :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                    [LclId] =
                        [] \r [eta_B2 void_0E]
                            unmaskAsyncExceptions# [eta_B2 GHC.Prim.void#];
                  } in  io_sdWtJ sat_sdWtL;
        } in  Control.Concurrent.forkOS1 sat_sdWtM GHC.Prim.void#;

Control.Concurrent.forkOSWithUnmask
  :: ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
      -> GHC.Types.IO ())
     -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=2, Str=<L,1*C1(C(U(U,U)))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Control.Concurrent.forkOSWithUnmask1 eta_B2 GHC.Prim.void#;

Control.Concurrent.$fstableZC0ZCbaseZCControlziConcurrentZCforkOSzuentry1
  :: GHC.Stable.StablePtr (GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [stableAction_sdWtN void_0E]
        case stableAction_sdWtN of {
          GHC.Stable.StablePtr sp_sdWtQ [Occ=Once] ->
              case deRefStablePtr# [sp_sdWtQ GHC.Prim.void#] of {
                Unit# ipv1_sdWtT [Occ=Once] -> ipv1_sdWtT GHC.Prim.void#;
              };
        };

Control.Concurrent.$fstableZC0ZCbaseZCControlziConcurrentZCforkOSzuentry
  :: GHC.Stable.StablePtr (GHC.Types.IO ()) -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Control.Concurrent.$fstableZC0ZCbaseZCControlziConcurrentZCforkOSzuentry1
            eta_B2 GHC.Prim.void#;


==================== Pre unarise: ====================
2018-03-16 16:09:14.816702053 UTC

Control.Concurrent.isCurrentThreadBound1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s#_sdXxz]
        case isCurrentThreadBound# [s#_sdXxz] of {
          (#,#) ipv_sdXxB [Occ=Once] ipv1_sdXxC [Occ=Once!] ->
              let {
                sat_sdXxE [Occ=Once] :: GHC.Types.Bool
                [LclId] =
                    [ipv1_sdXxC] \u []
                        case ipv1_sdXxC of {
                          __DEFAULT -> GHC.Types.True [];
                          0# -> GHC.Types.False [];
                        };
              } in  (#,#) [ipv_sdXxB sat_sdXxE];
        };

Control.Concurrent.isCurrentThreadBound
  :: GHC.Types.IO GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] Control.Concurrent.isCurrentThreadBound1 eta_B1;

Control.Concurrent.threadWaitRead
  :: System.Posix.Types.Fd -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U(U)><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.IO.threadWaitRead1 eta_B2 eta_B1;

Control.Concurrent.threadWaitWrite
  :: System.Posix.Types.Fd -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U(U)><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.IO.threadWaitWrite1 eta_B2 eta_B1;

Control.Concurrent.threadWaitReadSTM
  :: System.Posix.Types.Fd
     -> GHC.Types.IO (GHC.Conc.Sync.STM (), GHC.Types.IO ())
[GblId, Arity=2, Str=<L,U(U)><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Conc.IO.threadWaitReadSTM1 eta_B2 eta_B1;

Control.Concurrent.threadWaitWriteSTM
  :: System.Posix.Types.Fd
     -> GHC.Types.IO (GHC.Conc.Sync.STM (), GHC.Types.IO ())
[GblId, Arity=2, Str=<L,U(U)><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Conc.IO.threadWaitWriteSTM1 eta_B2 eta_B1;

Control.Concurrent.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Concurrent.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.$trModule4];

Control.Concurrent.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Concurrent"#;

Control.Concurrent.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.$trModule2];

Control.Concurrent.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Concurrent.$trModule3
                                     Control.Concurrent.$trModule1];

Control.Concurrent.rtsSupportsBoundThreads :: GHC.Types.Bool
[GblId] =
    [] \u []
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          (#,#) _ [Occ=Dead] ds1_sdXxI [Occ=Once!] ->
              case ds1_sdXxI of {
                __DEFAULT -> GHC.Types.True [];
                0# -> GHC.Types.False [];
              };
        };

Control.Concurrent.forkFinally2
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Data.Either.Either GHC.Exception.SomeException a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [e1_sdXxK eta1_sdXxL]
        let {
          sat_sdXxM [Occ=Once]
            :: Data.Either.Either GHC.Exception.SomeException a_adVT0
          [LclId] =
              CCCS Data.Either.Left! [e1_sdXxK];
        } in  (#,#) [eta1_sdXxL sat_sdXxM];

Control.Concurrent.runInUnboundThread1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,C(U(U,U))><S,U>, Unf=OtherCon []] =
    [] \r [action_sdXxN s_sdXxO]
        case isCurrentThreadBound# [s_sdXxO] of {
          (#,#) ipv_sdXxQ [Occ=Once*] ipv1_sdXxR [Occ=Once!] ->
              case ipv1_sdXxR of {
                __DEFAULT ->
                    case newMVar# [ipv_sdXxQ] of {
                      (#,#) ipv2_sdXxU [Occ=Once] ipv3_sdXxV ->
                          case getMaskingState# [ipv2_sdXxU] of {
                            (#,#) ipv4_sdXxX [Occ=Once*] ipv5_sdXxY [Occ=Once!] ->
                                let {
                                  lvl13_sdXxZ [Occ=Once*, Dmd=<L,C(U)>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             Data.Either.Either
                                               GHC.Exception.SomeException a_adVT0 #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [ipv3_sdXxV] \r [eta_sdXy0] takeMVar# [ipv3_sdXxV eta_sdXy0];
                                } in 
                                  case ipv5_sdXxY of {
                                    __DEFAULT ->
                                        let {
                                          sat_sdXyf [Occ=Once] :: GHC.Types.IO ()
                                          [LclId] =
                                              [action_sdXxN ipv3_sdXxV] \r [eta_sdXy2]
                                                  let {
                                                    sat_sdXye [Occ=Once]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               () #)
                                                    [LclId] =
                                                        [action_sdXxN ipv3_sdXxV] \r [s1_sdXy3]
                                                            let {
                                                              sat_sdXy9 [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVT0 #)
                                                              [LclId] =
                                                                  [action_sdXxN] \r [s2_sdXy4]
                                                                      case
                                                                          maskAsyncExceptions# [action_sdXxN
                                                                                                s2_sdXy4]
                                                                      of
                                                                      { (#,#) ipv6_sdXy6 [Occ=Once]
                                                                              ipv7_sdXy7 [Occ=Once] ->
                                                                            let {
                                                                              sat_sdXy8 [Occ=Once]
                                                                                :: Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVT0
                                                                              [LclId] =
                                                                                  CCCS Data.Either.Right! [ipv7_sdXy7];
                                                                            } in 
                                                                              (#,#) [ipv6_sdXy6
                                                                                     sat_sdXy8];
                                                                      };
                                                            } in 
                                                              case
                                                                  catch# [sat_sdXy9
                                                                          Control.Concurrent.forkFinally2
                                                                          s1_sdXy3]
                                                              of
                                                              { (#,#) ipv6_sdXyb [Occ=Once]
                                                                      ipv7_sdXyc [Occ=Once] ->
                                                                    case
                                                                        putMVar# [ipv3_sdXxV
                                                                                  ipv7_sdXyc
                                                                                  ipv6_sdXyb]
                                                                    of
                                                                    s2#_sdXyd
                                                                    { __DEFAULT ->
                                                                          (#,#) [s2#_sdXyd
                                                                                 GHC.Tuple.()];
                                                                    };
                                                              };
                                                  } in 
                                                    catch# [sat_sdXye
                                                            GHC.Conc.Sync.forkIO2
                                                            eta_sdXy2];
                                        } in 
                                          case fork# [sat_sdXyf ipv4_sdXxX] of {
                                            (#,#) ipv6_sdXyh [Occ=Once] ipv7_sdXyi [Occ=Once] ->
                                                let {
                                                  wait_sdXyj [Occ=LoopBreaker]
                                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             Data.Either.Either
                                                               GHC.Exception.SomeException
                                                               a_adVT0 #)
                                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                      sat-only [lvl13_sdXxZ
                                                                ipv7_sdXyi
                                                                wait_sdXyj] \r [eta_sdXyk]
                                                          let {
                                                            sat_sdXyo [Occ=Once]
                                                              :: GHC.Exception.SomeException
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVT0 #)
                                                            [LclId] =
                                                                [ipv7_sdXyi wait_sdXyj] \r [e1_sdXyl
                                                                                            s1_sdXym]
                                                                    case
                                                                        killThread# [ipv7_sdXyi
                                                                                     e1_sdXyl
                                                                                     s1_sdXym]
                                                                    of
                                                                    s2_sdXyn
                                                                    { __DEFAULT ->
                                                                          wait_sdXyj s2_sdXyn;
                                                                    };
                                                          } in 
                                                            catch# [lvl13_sdXxZ
                                                                    sat_sdXyo
                                                                    eta_sdXyk];
                                                } in 
                                                  case wait_sdXyj ipv6_sdXyh of {
                                                    (#,#) ipv8_sdXyq [Occ=Once*]
                                                          ipv9_sdXyr [Occ=Once!] ->
                                                        case ipv9_sdXyr of {
                                                          Data.Either.Left x_sdXyt [Occ=Once] ->
                                                              raiseIO# [x_sdXyt ipv8_sdXyq];
                                                          Data.Either.Right y_sdXyu [Occ=Once] ->
                                                              (#,#) [ipv8_sdXyq y_sdXyu];
                                                        };
                                                  };
                                          };
                                    0# ->
                                        let {
                                          sat_sdXyZ [Occ=Once]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adVT0 #)
                                          [LclId] =
                                              [action_sdXxN ipv3_sdXxV lvl13_sdXxZ] \r [s1_sdXyv]
                                                  let {
                                                    sat_sdXyJ [Occ=Once] :: GHC.Types.IO ()
                                                    [LclId] =
                                                        [action_sdXxN ipv3_sdXxV] \r [eta_sdXyw]
                                                            let {
                                                              sat_sdXyI [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         () #)
                                                              [LclId] =
                                                                  [action_sdXxN
                                                                   ipv3_sdXxV] \r [s2_sdXyx]
                                                                      let {
                                                                        sat_sdXyD [Occ=Once]
                                                                          :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVT0 #)
                                                                        [LclId] =
                                                                            [action_sdXxN] \r [s3_sdXyy]
                                                                                case
                                                                                    unmaskAsyncExceptions# [action_sdXxN
                                                                                                            s3_sdXyy]
                                                                                of
                                                                                { (#,#) ipv6_sdXyA [Occ=Once]
                                                                                        ipv7_sdXyB [Occ=Once] ->
                                                                                      let {
                                                                                        sat_sdXyC [Occ=Once]
                                                                                          :: Data.Either.Either
                                                                                               GHC.Exception.SomeException
                                                                                               a_adVT0
                                                                                        [LclId] =
                                                                                            CCCS Data.Either.Right! [ipv7_sdXyB];
                                                                                      } in 
                                                                                        (#,#) [ipv6_sdXyA
                                                                                               sat_sdXyC];
                                                                                };
                                                                      } in 
                                                                        case
                                                                            catch# [sat_sdXyD
                                                                                    Control.Concurrent.forkFinally2
                                                                                    s2_sdXyx]
                                                                        of
                                                                        { (#,#) ipv6_sdXyF [Occ=Once]
                                                                                ipv7_sdXyG [Occ=Once] ->
                                                                              case
                                                                                  putMVar# [ipv3_sdXxV
                                                                                            ipv7_sdXyG
                                                                                            ipv6_sdXyF]
                                                                              of
                                                                              s2#_sdXyH
                                                                              { __DEFAULT ->
                                                                                    (#,#) [s2#_sdXyH
                                                                                           GHC.Tuple.()];
                                                                              };
                                                                        };
                                                            } in 
                                                              catch# [sat_sdXyI
                                                                      GHC.Conc.Sync.forkIO2
                                                                      eta_sdXyw];
                                                  } in 
                                                    case fork# [sat_sdXyJ s1_sdXyv] of {
                                                      (#,#) ipv6_sdXyL [Occ=Once]
                                                            ipv7_sdXyM [Occ=Once] ->
                                                          let {
                                                            wait_sdXyN [Occ=LoopBreaker]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVT0 #)
                                                            [LclId,
                                                             Arity=1,
                                                             Str=<S,U>,
                                                             Unf=OtherCon []] =
                                                                sat-only [lvl13_sdXxZ
                                                                          ipv7_sdXyM
                                                                          wait_sdXyN] \r [eta_sdXyO]
                                                                    let {
                                                                      sat_sdXyS [Occ=Once]
                                                                        :: GHC.Exception.SomeException
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 Data.Either.Either
                                                                                   GHC.Exception.SomeException
                                                                                   a_adVT0 #)
                                                                      [LclId] =
                                                                          [ipv7_sdXyM
                                                                           wait_sdXyN] \r [e1_sdXyP
                                                                                           s2_sdXyQ]
                                                                              case
                                                                                  killThread# [ipv7_sdXyM
                                                                                               e1_sdXyP
                                                                                               s2_sdXyQ]
                                                                              of
                                                                              s3_sdXyR
                                                                              { __DEFAULT ->
                                                                                    wait_sdXyN
                                                                                        s3_sdXyR;
                                                                              };
                                                                    } in 
                                                                      catch# [lvl13_sdXxZ
                                                                              sat_sdXyS
                                                                              eta_sdXyO];
                                                          } in 
                                                            case wait_sdXyN ipv6_sdXyL of {
                                                              (#,#) ipv8_sdXyU [Occ=Once*]
                                                                    ipv9_sdXyV [Occ=Once!] ->
                                                                  case ipv9_sdXyV of {
                                                                    Data.Either.Left x_sdXyX [Occ=Once] ->
                                                                        raiseIO# [x_sdXyX
                                                                                  ipv8_sdXyU];
                                                                    Data.Either.Right y_sdXyY [Occ=Once] ->
                                                                        (#,#) [ipv8_sdXyU y_sdXyY];
                                                                  };
                                                            };
                                                    };
                                        } in  maskAsyncExceptions# [sat_sdXyZ ipv4_sdXxX];
                                    1# ->
                                        let {
                                          sat_sdXzd [Occ=Once] :: GHC.Types.IO ()
                                          [LclId] =
                                              [action_sdXxN ipv3_sdXxV] \r [eta_sdXz0]
                                                  let {
                                                    sat_sdXzc [Occ=Once]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               () #)
                                                    [LclId] =
                                                        [action_sdXxN ipv3_sdXxV] \r [s1_sdXz1]
                                                            let {
                                                              sat_sdXz7 [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVT0 #)
                                                              [LclId] =
                                                                  [action_sdXxN] \r [s2_sdXz2]
                                                                      case
                                                                          maskUninterruptible# [action_sdXxN
                                                                                                s2_sdXz2]
                                                                      of
                                                                      { (#,#) ipv6_sdXz4 [Occ=Once]
                                                                              ipv7_sdXz5 [Occ=Once] ->
                                                                            let {
                                                                              sat_sdXz6 [Occ=Once]
                                                                                :: Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVT0
                                                                              [LclId] =
                                                                                  CCCS Data.Either.Right! [ipv7_sdXz5];
                                                                            } in 
                                                                              (#,#) [ipv6_sdXz4
                                                                                     sat_sdXz6];
                                                                      };
                                                            } in 
                                                              case
                                                                  catch# [sat_sdXz7
                                                                          Control.Concurrent.forkFinally2
                                                                          s1_sdXz1]
                                                              of
                                                              { (#,#) ipv6_sdXz9 [Occ=Once]
                                                                      ipv7_sdXza [Occ=Once] ->
                                                                    case
                                                                        putMVar# [ipv3_sdXxV
                                                                                  ipv7_sdXza
                                                                                  ipv6_sdXz9]
                                                                    of
                                                                    s2#_sdXzb
                                                                    { __DEFAULT ->
                                                                          (#,#) [s2#_sdXzb
                                                                                 GHC.Tuple.()];
                                                                    };
                                                              };
                                                  } in 
                                                    catch# [sat_sdXzc
                                                            GHC.Conc.Sync.forkIO2
                                                            eta_sdXz0];
                                        } in 
                                          case fork# [sat_sdXzd ipv4_sdXxX] of {
                                            (#,#) ipv6_sdXzf [Occ=Once] ipv7_sdXzg [Occ=Once] ->
                                                let {
                                                  wait_sdXzh [Occ=LoopBreaker]
                                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             Data.Either.Either
                                                               GHC.Exception.SomeException
                                                               a_adVT0 #)
                                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                      sat-only [lvl13_sdXxZ
                                                                ipv7_sdXzg
                                                                wait_sdXzh] \r [eta_sdXzi]
                                                          let {
                                                            sat_sdXzm [Occ=Once]
                                                              :: GHC.Exception.SomeException
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVT0 #)
                                                            [LclId] =
                                                                [ipv7_sdXzg wait_sdXzh] \r [e1_sdXzj
                                                                                            s1_sdXzk]
                                                                    case
                                                                        killThread# [ipv7_sdXzg
                                                                                     e1_sdXzj
                                                                                     s1_sdXzk]
                                                                    of
                                                                    s2_sdXzl
                                                                    { __DEFAULT ->
                                                                          wait_sdXzh s2_sdXzl;
                                                                    };
                                                          } in 
                                                            catch# [lvl13_sdXxZ
                                                                    sat_sdXzm
                                                                    eta_sdXzi];
                                                } in 
                                                  case wait_sdXzh ipv6_sdXzf of {
                                                    (#,#) ipv8_sdXzo [Occ=Once*]
                                                          ipv9_sdXzp [Occ=Once!] ->
                                                        case ipv9_sdXzp of {
                                                          Data.Either.Left x_sdXzr [Occ=Once] ->
                                                              raiseIO# [x_sdXzr ipv8_sdXzo];
                                                          Data.Either.Right y_sdXzs [Occ=Once] ->
                                                              (#,#) [ipv8_sdXzo y_sdXzs];
                                                        };
                                                  };
                                          };
                                  };
                          };
                    };
                0# -> action_sdXxN ipv_sdXxQ;
              };
        };

Control.Concurrent.runInUnboundThread
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,C(U(U,U))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Concurrent.runInUnboundThread1 eta_B2 eta_B1;

lvl_rdWnQ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RTS doesn't support multiple OS threads (use ghc -threaded when linking)"#;

Control.Concurrent.forkOS2
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sdXzt]
        case GHC.CString.unpackCString# lvl_rdWnQ of sat_sdXzu {
          __DEFAULT -> GHC.IO.failIO1 sat_sdXzu eta_sdXzt;
        };

lvl1_rdWnR :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "undefined"#;

lvl2_rdWnS :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl1_rdWnR;

lvl3_rdWnT :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Control.Concurrent.$trModule4;

lvl4_rdWnU :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Control.Concurrent.$trModule2;

lvl5_rdWnV :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./Control/Concurrent.hs"#;

lvl6_rdWnW :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_rdWnV;

lvl7_rdWnX :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [353#];

lvl8_rdWnY :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [33#];

lvl9_rdWnZ :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [42#];

lvl10_rdWo0 :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_rdWnT
                                           lvl4_rdWnU
                                           lvl6_rdWnW
                                           lvl7_rdWnX
                                           lvl8_rdWnY
                                           lvl7_rdWnX
                                           lvl9_rdWnZ];

lvl11_rdWo1 :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_rdWnS
                                                  lvl10_rdWo0
                                                  GHC.Stack.Types.EmptyCallStack];

Control.Concurrent.runInBoundThread2
  :: forall a. Data.Either.Either GHC.Exception.SomeException a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl11_rdWo1;

Control.Concurrent.runInBoundThread1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,C(U(U,U))><L,U>, Unf=OtherCon []] =
    [] \r [action_sdXzv eta_sdXzw]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          (#,#) _ [Occ=Dead] ds1_sdXzA [Occ=Once!] ->
              case ds1_sdXzA of {
                __DEFAULT ->
                    case isCurrentThreadBound# [eta_sdXzw] of {
                      (#,#) ipv_sdXzD [Occ=Once*] ipv1_sdXzE [Occ=Once!] ->
                          case ipv1_sdXzE of {
                            __DEFAULT -> action_sdXzv ipv_sdXzD;
                            0# ->
                                case
                                    newMutVar# [Control.Concurrent.runInBoundThread2 ipv_sdXzD]
                                of
                                { (#,#) ipv2_sdXzH [Occ=Once] ipv3_sdXzI ->
                                      case getMaskingState# [ipv2_sdXzH] of {
                                        (#,#) ipv4_sdXzK [Occ=Once*] ipv5_sdXzL [Occ=Once!] ->
                                            case ipv5_sdXzL of {
                                              __DEFAULT ->
                                                  let {
                                                    sat_sdXzY [Occ=Once] :: GHC.Types.IO ()
                                                    [LclId] =
                                                        [action_sdXzv ipv3_sdXzI] \r [s_sdXzN]
                                                            let {
                                                              sat_sdXzT [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVVB #)
                                                              [LclId] =
                                                                  [action_sdXzv] \r [s1_sdXzO]
                                                                      case
                                                                          action_sdXzv s1_sdXzO
                                                                      of
                                                                      { (#,#) ipv6_sdXzQ [Occ=Once]
                                                                              ipv7_sdXzR [Occ=Once] ->
                                                                            let {
                                                                              sat_sdXzS [Occ=Once]
                                                                                :: Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVVB
                                                                              [LclId] =
                                                                                  CCCS Data.Either.Right! [ipv7_sdXzR];
                                                                            } in 
                                                                              (#,#) [ipv6_sdXzQ
                                                                                     sat_sdXzS];
                                                                      };
                                                            } in 
                                                              case
                                                                  catch# [sat_sdXzT
                                                                          Control.Concurrent.forkFinally2
                                                                          s_sdXzN]
                                                              of
                                                              { (#,#) ipv6_sdXzV [Occ=Once]
                                                                      ipv7_sdXzW [Occ=Once] ->
                                                                    case
                                                                        writeMutVar# [ipv3_sdXzI
                                                                                      ipv7_sdXzW
                                                                                      ipv6_sdXzV]
                                                                    of
                                                                    s2#_sdXzX
                                                                    { __DEFAULT ->
                                                                          (#,#) [s2#_sdXzX
                                                                                 GHC.Tuple.()];
                                                                    };
                                                              };
                                                  } in 
                                                    case makeStablePtr# [sat_sdXzY ipv4_sdXzK] of {
                                                      (#,#) ipv6_sdXA0 [Occ=Once] ipv7_sdXA1 ->
                                                          let {
                                                            sat_sdXAd [Occ=Once]
                                                              :: GHC.Exception.SomeException
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [ipv7_sdXA1] \r [e1_sdXA8 s_sdXA9]
                                                                    case
                                                                        __pkg_ccall base-4.11.0.0 [ipv7_sdXA1
                                                                                                   s_sdXA9]
                                                                    of
                                                                    { Unit# ds7_sdXAc [Occ=Once] ->
                                                                          raiseIO# [e1_sdXA8
                                                                                    ds7_sdXAc];
                                                                    }; } in
                                                          let {
                                                            sat_sdXA6 [Occ=Once]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [ipv3_sdXzI ipv7_sdXA1] \r [s_sdXA2]
                                                                    case
                                                                        __pkg_ccall_GC base-4.11.0.0 [ipv7_sdXA1
                                                                                                      s_sdXA2]
                                                                    of
                                                                    { Unit# ds7_sdXA5 [Occ=Once] ->
                                                                          readMutVar# [ipv3_sdXzI
                                                                                       ds7_sdXA5];
                                                                    }; } in
                                                          let {
                                                            sat_sdXA7 [Occ=Once]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [sat_sdXA6] \r [eta_B1]
                                                                    maskAsyncExceptions# [sat_sdXA6
                                                                                          eta_B1];
                                                          } in 
                                                            case
                                                                catch# [sat_sdXA7
                                                                        sat_sdXAd
                                                                        ipv6_sdXA0]
                                                            of
                                                            { (#,#) ipv8_sdXAf [Occ=Once]
                                                                    ipv9_sdXAg [Occ=Once!] ->
                                                                  case
                                                                      __pkg_ccall base-4.11.0.0 [ipv7_sdXA1
                                                                                                 ipv8_sdXAf]
                                                                  of
                                                                  { Unit# ds8_sdXAj [Occ=Once*] ->
                                                                        case ipv9_sdXAg of {
                                                                          Data.Either.Left x_sdXAl [Occ=Once] ->
                                                                              raiseIO# [x_sdXAl
                                                                                        ds8_sdXAj];
                                                                          Data.Either.Right y_sdXAm [Occ=Once] ->
                                                                              (#,#) [ds8_sdXAj
                                                                                     y_sdXAm];
                                                                        };
                                                                  };
                                                            };
                                                    };
                                              0# ->
                                                  let {
                                                    sat_sdXAV [Occ=Once]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               Data.Either.Either
                                                                 GHC.Exception.SomeException
                                                                 a_adVVB #)
                                                    [LclId] =
                                                        [action_sdXzv ipv3_sdXzI] \r [s_sdXAn]
                                                            let {
                                                              sat_sdXAz [Occ=Once]
                                                                :: GHC.Types.IO ()
                                                              [LclId] =
                                                                  [action_sdXzv
                                                                   ipv3_sdXzI] \r [s1_sdXAo]
                                                                      let {
                                                                        sat_sdXAu [Occ=Once]
                                                                          :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVVB #)
                                                                        [LclId] =
                                                                            [action_sdXzv] \r [s2_sdXAp]
                                                                                case
                                                                                    action_sdXzv
                                                                                        s2_sdXAp
                                                                                of
                                                                                { (#,#) ipv6_sdXAr [Occ=Once]
                                                                                        ipv7_sdXAs [Occ=Once] ->
                                                                                      let {
                                                                                        sat_sdXAt [Occ=Once]
                                                                                          :: Data.Either.Either
                                                                                               GHC.Exception.SomeException
                                                                                               a_adVVB
                                                                                        [LclId] =
                                                                                            CCCS Data.Either.Right! [ipv7_sdXAs];
                                                                                      } in 
                                                                                        (#,#) [ipv6_sdXAr
                                                                                               sat_sdXAt];
                                                                                };
                                                                      } in 
                                                                        case
                                                                            catch# [sat_sdXAu
                                                                                    Control.Concurrent.forkFinally2
                                                                                    s1_sdXAo]
                                                                        of
                                                                        { (#,#) ipv6_sdXAw [Occ=Once]
                                                                                ipv7_sdXAx [Occ=Once] ->
                                                                              case
                                                                                  writeMutVar# [ipv3_sdXzI
                                                                                                ipv7_sdXAx
                                                                                                ipv6_sdXAw]
                                                                              of
                                                                              s2#_sdXAy
                                                                              { __DEFAULT ->
                                                                                    (#,#) [s2#_sdXAy
                                                                                           GHC.Tuple.()];
                                                                              };
                                                                        };
                                                            } in 
                                                              case
                                                                  makeStablePtr# [sat_sdXAz s_sdXAn]
                                                              of
                                                              { (#,#) ipv6_sdXAB [Occ=Once]
                                                                      ipv7_sdXAC ->
                                                                    let {
                                                                      sat_sdXAO [Occ=Once]
                                                                        :: GHC.Exception.SomeException
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 Data.Either.Either
                                                                                   GHC.Exception.SomeException
                                                                                   a_adVVB #)
                                                                      [LclId] =
                                                                          [ipv7_sdXAC] \r [e1_sdXAJ
                                                                                           s1_sdXAK]
                                                                              case
                                                                                  __pkg_ccall base-4.11.0.0 [ipv7_sdXAC
                                                                                                             s1_sdXAK]
                                                                              of
                                                                              { Unit# ds7_sdXAN [Occ=Once] ->
                                                                                    raiseIO# [e1_sdXAJ
                                                                                              ds7_sdXAN];
                                                                              }; } in
                                                                    let {
                                                                      sat_sdXAH [Occ=Once]
                                                                        :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 Data.Either.Either
                                                                                   GHC.Exception.SomeException
                                                                                   a_adVVB #)
                                                                      [LclId] =
                                                                          [ipv3_sdXzI
                                                                           ipv7_sdXAC] \r [s1_sdXAD]
                                                                              case
                                                                                  __pkg_ccall_GC base-4.11.0.0 [ipv7_sdXAC
                                                                                                                s1_sdXAD]
                                                                              of
                                                                              { Unit# ds7_sdXAG [Occ=Once] ->
                                                                                    readMutVar# [ipv3_sdXzI
                                                                                                 ds7_sdXAG];
                                                                              }; } in
                                                                    let {
                                                                      sat_sdXAI [Occ=Once]
                                                                        :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 Data.Either.Either
                                                                                   GHC.Exception.SomeException
                                                                                   a_adVVB #)
                                                                      [LclId] =
                                                                          [sat_sdXAH] \r [eta_B1]
                                                                              unmaskAsyncExceptions# [sat_sdXAH
                                                                                                      eta_B1];
                                                                    } in 
                                                                      case
                                                                          catch# [sat_sdXAI
                                                                                  sat_sdXAO
                                                                                  ipv6_sdXAB]
                                                                      of
                                                                      { (#,#) ipv8_sdXAQ [Occ=Once]
                                                                              ipv9_sdXAR [Occ=Once] ->
                                                                            case
                                                                                __pkg_ccall base-4.11.0.0 [ipv7_sdXAC
                                                                                                           ipv8_sdXAQ]
                                                                            of
                                                                            { Unit# ds8_sdXAU [Occ=Once] ->
                                                                                  (#,#) [ds8_sdXAU
                                                                                         ipv9_sdXAR];
                                                                            };
                                                                      };
                                                              };
                                                  } in 
                                                    case
                                                        maskAsyncExceptions# [sat_sdXAV ipv4_sdXzK]
                                                    of
                                                    { (#,#) ipv6_sdXAX [Occ=Once*]
                                                            ipv7_sdXAY [Occ=Once!] ->
                                                          case ipv7_sdXAY of {
                                                            Data.Either.Left x_sdXB0 [Occ=Once] ->
                                                                raiseIO# [x_sdXB0 ipv6_sdXAX];
                                                            Data.Either.Right y_sdXB1 [Occ=Once] ->
                                                                (#,#) [ipv6_sdXAX y_sdXB1];
                                                          };
                                                    };
                                              1# ->
                                                  let {
                                                    sat_sdXBd [Occ=Once] :: GHC.Types.IO ()
                                                    [LclId] =
                                                        [action_sdXzv ipv3_sdXzI] \r [s_sdXB2]
                                                            let {
                                                              sat_sdXB8 [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVVB #)
                                                              [LclId] =
                                                                  [action_sdXzv] \r [s1_sdXB3]
                                                                      case
                                                                          action_sdXzv s1_sdXB3
                                                                      of
                                                                      { (#,#) ipv6_sdXB5 [Occ=Once]
                                                                              ipv7_sdXB6 [Occ=Once] ->
                                                                            let {
                                                                              sat_sdXB7 [Occ=Once]
                                                                                :: Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVVB
                                                                              [LclId] =
                                                                                  CCCS Data.Either.Right! [ipv7_sdXB6];
                                                                            } in 
                                                                              (#,#) [ipv6_sdXB5
                                                                                     sat_sdXB7];
                                                                      };
                                                            } in 
                                                              case
                                                                  catch# [sat_sdXB8
                                                                          Control.Concurrent.forkFinally2
                                                                          s_sdXB2]
                                                              of
                                                              { (#,#) ipv6_sdXBa [Occ=Once]
                                                                      ipv7_sdXBb [Occ=Once] ->
                                                                    case
                                                                        writeMutVar# [ipv3_sdXzI
                                                                                      ipv7_sdXBb
                                                                                      ipv6_sdXBa]
                                                                    of
                                                                    s2#_sdXBc
                                                                    { __DEFAULT ->
                                                                          (#,#) [s2#_sdXBc
                                                                                 GHC.Tuple.()];
                                                                    };
                                                              };
                                                  } in 
                                                    case makeStablePtr# [sat_sdXBd ipv4_sdXzK] of {
                                                      (#,#) ipv6_sdXBf [Occ=Once] ipv7_sdXBg ->
                                                          let {
                                                            sat_sdXBs [Occ=Once]
                                                              :: GHC.Exception.SomeException
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [ipv7_sdXBg] \r [e1_sdXBn s_sdXBo]
                                                                    case
                                                                        __pkg_ccall base-4.11.0.0 [ipv7_sdXBg
                                                                                                   s_sdXBo]
                                                                    of
                                                                    { Unit# ds7_sdXBr [Occ=Once] ->
                                                                          raiseIO# [e1_sdXBn
                                                                                    ds7_sdXBr];
                                                                    }; } in
                                                          let {
                                                            sat_sdXBl [Occ=Once]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [ipv3_sdXzI ipv7_sdXBg] \r [s_sdXBh]
                                                                    case
                                                                        __pkg_ccall_GC base-4.11.0.0 [ipv7_sdXBg
                                                                                                      s_sdXBh]
                                                                    of
                                                                    { Unit# ds7_sdXBk [Occ=Once] ->
                                                                          readMutVar# [ipv3_sdXzI
                                                                                       ds7_sdXBk];
                                                                    }; } in
                                                          let {
                                                            sat_sdXBm [Occ=Once]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [sat_sdXBl] \r [eta_B1]
                                                                    maskUninterruptible# [sat_sdXBl
                                                                                          eta_B1];
                                                          } in 
                                                            case
                                                                catch# [sat_sdXBm
                                                                        sat_sdXBs
                                                                        ipv6_sdXBf]
                                                            of
                                                            { (#,#) ipv8_sdXBu [Occ=Once]
                                                                    ipv9_sdXBv [Occ=Once!] ->
                                                                  case
                                                                      __pkg_ccall base-4.11.0.0 [ipv7_sdXBg
                                                                                                 ipv8_sdXBu]
                                                                  of
                                                                  { Unit# ds8_sdXBy [Occ=Once*] ->
                                                                        case ipv9_sdXBv of {
                                                                          Data.Either.Left x_sdXBA [Occ=Once] ->
                                                                              raiseIO# [x_sdXBA
                                                                                        ds8_sdXBy];
                                                                          Data.Either.Right y_sdXBB [Occ=Once] ->
                                                                              (#,#) [ds8_sdXBy
                                                                                     y_sdXBB];
                                                                        };
                                                                  };
                                                            };
                                                    };
                                            };
                                      };
                                };
                          };
                    };
                0# -> Control.Concurrent.forkOS2 eta_sdXzw;
              };
        };

Control.Concurrent.runInBoundThread
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,C(U(U,U))><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Concurrent.runInBoundThread1 eta_B2 eta_B1;

Control.Concurrent.forkFinally1
  :: forall a.
     GHC.Types.IO a
     -> (Data.Either.Either GHC.Exception.SomeException a
         -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=3, Str=<L,C(U)><L,C(C1(U))><S,U>, Unf=OtherCon []] =
    [] \r [action_sdXBC and_then_sdXBD eta_sdXBE]
        case getMaskingState# [eta_sdXBE] of {
          (#,#) ipv_sdXBG [Occ=Once*] ipv1_sdXBH [Occ=Once!] ->
              case ipv1_sdXBH of {
                __DEFAULT ->
                    let {
                      sat_sdXBV [Occ=Once] :: GHC.Types.IO ()
                      [LclId] =
                          [action_sdXBC and_then_sdXBD] \r [eta1_sdXBJ]
                              let {
                                sat_sdXBU [Occ=Once]
                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                [LclId] =
                                    [action_sdXBC and_then_sdXBD] \r [s_sdXBK]
                                        let {
                                          sat_sdXBQ [Occ=Once]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Either.Either
                                                       GHC.Exception.SomeException a_adVWY #)
                                          [LclId] =
                                              [action_sdXBC] \r [s1_sdXBL]
                                                  case
                                                      maskAsyncExceptions# [action_sdXBC s1_sdXBL]
                                                  of
                                                  { (#,#) ipv2_sdXBN [Occ=Once]
                                                          ipv3_sdXBO [Occ=Once] ->
                                                        let {
                                                          sat_sdXBP [Occ=Once]
                                                            :: Data.Either.Either
                                                                 GHC.Exception.SomeException a_adVWY
                                                          [LclId] =
                                                              CCCS Data.Either.Right! [ipv3_sdXBO];
                                                        } in  (#,#) [ipv2_sdXBN sat_sdXBP];
                                                  };
                                        } in 
                                          case
                                              catch# [sat_sdXBQ
                                                      Control.Concurrent.forkFinally2
                                                      s_sdXBK]
                                          of
                                          { (#,#) ipv2_sdXBS [Occ=Once] ipv3_sdXBT [Occ=Once] ->
                                                and_then_sdXBD ipv3_sdXBT ipv2_sdXBS;
                                          };
                              } in  catch# [sat_sdXBU GHC.Conc.Sync.forkIO2 eta1_sdXBJ];
                    } in 
                      case fork# [sat_sdXBV ipv_sdXBG] of {
                        (#,#) ipv2_sdXBX [Occ=Once] ipv3_sdXBY [Occ=Once] ->
                            let {
                              sat_sdXBZ [Occ=Once] :: GHC.Conc.Sync.ThreadId
                              [LclId] =
                                  CCCS GHC.Conc.Sync.ThreadId! [ipv3_sdXBY];
                            } in  (#,#) [ipv2_sdXBX sat_sdXBZ];
                      };
                0# ->
                    let {
                      sat_sdXCi [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
                      [LclId] =
                          [action_sdXBC and_then_sdXBD] \r [s_sdXC0]
                              let {
                                sat_sdXCd [Occ=Once] :: GHC.Types.IO ()
                                [LclId] =
                                    [action_sdXBC and_then_sdXBD] \r [eta1_sdXC1]
                                        let {
                                          sat_sdXCc [Occ=Once]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                          [LclId] =
                                              [action_sdXBC and_then_sdXBD] \r [s1_sdXC2]
                                                  let {
                                                    sat_sdXC8 [Occ=Once]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               Data.Either.Either
                                                                 GHC.Exception.SomeException
                                                                 a_adVWY #)
                                                    [LclId] =
                                                        [action_sdXBC] \r [s2_sdXC3]
                                                            case
                                                                unmaskAsyncExceptions# [action_sdXBC
                                                                                        s2_sdXC3]
                                                            of
                                                            { (#,#) ipv2_sdXC5 [Occ=Once]
                                                                    ipv3_sdXC6 [Occ=Once] ->
                                                                  let {
                                                                    sat_sdXC7 [Occ=Once]
                                                                      :: Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVWY
                                                                    [LclId] =
                                                                        CCCS Data.Either.Right! [ipv3_sdXC6];
                                                                  } in 
                                                                    (#,#) [ipv2_sdXC5 sat_sdXC7];
                                                            };
                                                  } in 
                                                    case
                                                        catch# [sat_sdXC8
                                                                Control.Concurrent.forkFinally2
                                                                s1_sdXC2]
                                                    of
                                                    { (#,#) ipv2_sdXCa [Occ=Once]
                                                            ipv3_sdXCb [Occ=Once] ->
                                                          and_then_sdXBD ipv3_sdXCb ipv2_sdXCa;
                                                    };
                                        } in  catch# [sat_sdXCc GHC.Conc.Sync.forkIO2 eta1_sdXC1];
                              } in 
                                case fork# [sat_sdXCd s_sdXC0] of {
                                  (#,#) ipv2_sdXCf [Occ=Once] ipv3_sdXCg [Occ=Once] ->
                                      let {
                                        sat_sdXCh [Occ=Once] :: GHC.Conc.Sync.ThreadId
                                        [LclId] =
                                            CCCS GHC.Conc.Sync.ThreadId! [ipv3_sdXCg];
                                      } in  (#,#) [ipv2_sdXCf sat_sdXCh];
                                };
                    } in  maskAsyncExceptions# [sat_sdXCi ipv_sdXBG];
                1# ->
                    let {
                      sat_sdXCv [Occ=Once] :: GHC.Types.IO ()
                      [LclId] =
                          [action_sdXBC and_then_sdXBD] \r [eta1_sdXCj]
                              let {
                                sat_sdXCu [Occ=Once]
                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                [LclId] =
                                    [action_sdXBC and_then_sdXBD] \r [s_sdXCk]
                                        let {
                                          sat_sdXCq [Occ=Once]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Either.Either
                                                       GHC.Exception.SomeException a_adVWY #)
                                          [LclId] =
                                              [action_sdXBC] \r [s1_sdXCl]
                                                  case
                                                      maskUninterruptible# [action_sdXBC s1_sdXCl]
                                                  of
                                                  { (#,#) ipv2_sdXCn [Occ=Once]
                                                          ipv3_sdXCo [Occ=Once] ->
                                                        let {
                                                          sat_sdXCp [Occ=Once]
                                                            :: Data.Either.Either
                                                                 GHC.Exception.SomeException a_adVWY
                                                          [LclId] =
                                                              CCCS Data.Either.Right! [ipv3_sdXCo];
                                                        } in  (#,#) [ipv2_sdXCn sat_sdXCp];
                                                  };
                                        } in 
                                          case
                                              catch# [sat_sdXCq
                                                      Control.Concurrent.forkFinally2
                                                      s_sdXCk]
                                          of
                                          { (#,#) ipv2_sdXCs [Occ=Once] ipv3_sdXCt [Occ=Once] ->
                                                and_then_sdXBD ipv3_sdXCt ipv2_sdXCs;
                                          };
                              } in  catch# [sat_sdXCu GHC.Conc.Sync.forkIO2 eta1_sdXCj];
                    } in 
                      case fork# [sat_sdXCv ipv_sdXBG] of {
                        (#,#) ipv2_sdXCx [Occ=Once] ipv3_sdXCy [Occ=Once] ->
                            let {
                              sat_sdXCz [Occ=Once] :: GHC.Conc.Sync.ThreadId
                              [LclId] =
                                  CCCS GHC.Conc.Sync.ThreadId! [ipv3_sdXCy];
                            } in  (#,#) [ipv2_sdXCx sat_sdXCz];
                      };
              };
        };

Control.Concurrent.forkFinally
  :: forall a.
     GHC.Types.IO a
     -> (Data.Either.Either GHC.Exception.SomeException a
         -> GHC.Types.IO ())
     -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=3, Str=<L,C(U)><L,C(C1(U))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Control.Concurrent.forkFinally1 eta_B3 eta_B2 eta_B1;

lvl12_rdWo2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Cannot create OS thread."#;

Control.Concurrent.forkOS3
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sdXCA]
        case GHC.CString.unpackCString# lvl12_rdWo2 of sat_sdXCB {
          __DEFAULT -> GHC.IO.failIO1 sat_sdXCB eta_sdXCA;
        };

Control.Concurrent.forkOS1
  :: GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=2, Str=<L,C(U(U,U))><L,U>, Unf=OtherCon []] =
    [] \r [action0_sdXCC eta_sdXCD]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          (#,#) _ [Occ=Dead] ds1_sdXCH [Occ=Once!] ->
              case ds1_sdXCH of {
                __DEFAULT ->
                    case newMVar# [eta_sdXCD] of {
                      (#,#) ipv_sdXCK [Occ=Once] ipv1_sdXCL ->
                          case getMaskingState# [ipv_sdXCK] of {
                            (#,#) ipv2_sdXCN [Occ=Once] ipv3_sdXCO [Occ=Once!] ->
                                let {
                                  sat_sdXCY [Occ=Once] :: GHC.Types.IO ()
                                  [LclId] =
                                      [action0_sdXCC ipv1_sdXCL ipv3_sdXCO] \r [s_sdXCP]
                                          case myThreadId# [s_sdXCP] of {
                                            (#,#) ipv4_sdXCR [Occ=Once] ipv5_sdXCS [Occ=Once] ->
                                                let {
                                                  sat_sdXCT [Occ=Once] :: GHC.Conc.Sync.ThreadId
                                                  [LclId] =
                                                      CCCS GHC.Conc.Sync.ThreadId! [ipv5_sdXCS];
                                                } in 
                                                  case
                                                      putMVar# [ipv1_sdXCL sat_sdXCT ipv4_sdXCR]
                                                  of
                                                  s2#_sdXCU
                                                  { __DEFAULT ->
                                                        let {
                                                          sat_sdXCX [Occ=Once, Dmd=<L,1*C1(U)>]
                                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     () #)
                                                          [LclId] =
                                                              [action0_sdXCC ipv3_sdXCO] \s []
                                                                  case ipv3_sdXCO of {
                                                                    __DEFAULT -> action0_sdXCC;
                                                                    0# ->
                                                                        let {
                                                                          sat_sdXCW [Occ=OnceT[0]]
                                                                            :: GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld
                                                                               -> (# GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld,
                                                                                     () #)
                                                                          [LclId] =
                                                                              [action0_sdXCC] \r [eta_B1]
                                                                                  unmaskAsyncExceptions# [action0_sdXCC
                                                                                                          eta_B1];
                                                                        } in  sat_sdXCW;
                                                                    1# ->
                                                                        GHC.IO.uninterruptibleMask_1
                                                                            action0_sdXCC;
                                                                  };
                                                        } in 
                                                          catch# [sat_sdXCX
                                                                  GHC.Conc.Sync.childHandler1
                                                                  s2#_sdXCU];
                                                  };
                                          };
                                } in 
                                  case makeStablePtr# [sat_sdXCY ipv2_sdXCN] of {
                                    (#,#) ipv4_sdXD0 [Occ=Once] ipv5_sdXD1 ->
                                        case
                                            __pkg_ccall_GC base-4.11.0.0 [ipv5_sdXD1 ipv4_sdXD0]
                                        of
                                        { (#,#) ds5_sdXD4 [Occ=Once*] ds6_sdXD5 [Occ=Once] ->
                                              case narrow32Int# [ds6_sdXD5] of {
                                                __DEFAULT -> Control.Concurrent.forkOS3 ds5_sdXD4;
                                                0# ->
                                                    case takeMVar# [ipv1_sdXCL ds5_sdXD4] of {
                                                      (#,#) ipv6_sdXD9 [Occ=Once]
                                                            ipv7_sdXDa [Occ=Once] ->
                                                          case
                                                              __pkg_ccall base-4.11.0.0 [ipv5_sdXD1
                                                                                         ipv6_sdXD9]
                                                          of
                                                          { Unit# ds8_sdXDd [Occ=Once] ->
                                                                (#,#) [ds8_sdXDd ipv7_sdXDa];
                                                          };
                                                    };
                                              };
                                        };
                                  };
                          };
                    };
                0# -> Control.Concurrent.forkOS2 eta_sdXCD;
              };
        };

Control.Concurrent.forkOS
  :: GHC.Types.IO () -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=2, Str=<L,C(U(U,U))><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Control.Concurrent.forkOS1 eta_B2 eta_B1;

Control.Concurrent.forkOSWithUnmask1
  :: ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
      -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=2, Str=<L,1*C1(C(U(U,U)))><S,U>, Unf=OtherCon []] =
    [] \r [io_sdXDe eta_sdXDf]
        let {
          sat_sdXDh [Occ=Once, Dmd=<L,C(U(U,U))>] :: GHC.Types.IO ()
          [LclId] =
              [io_sdXDe] \u []
                  let {
                    sat_sdXDg [Occ=Once] :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                    [LclId] =
                        [] \r [eta_B2 eta_B1] unmaskAsyncExceptions# [eta_B2 eta_B1];
                  } in  io_sdXDe sat_sdXDg;
        } in  Control.Concurrent.forkOS1 sat_sdXDh eta_sdXDf;

Control.Concurrent.forkOSWithUnmask
  :: ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
      -> GHC.Types.IO ())
     -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=2, Str=<L,1*C1(C(U(U,U)))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Concurrent.forkOSWithUnmask1 eta_B2 eta_B1;

Control.Concurrent.$fstableZC0ZCbaseZCControlziConcurrentZCforkOSzuentry1
  :: GHC.Stable.StablePtr (GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [stableAction_sdXDi s_sdXDj]
        case stableAction_sdXDi of {
          GHC.Stable.StablePtr sp_sdXDl [Occ=Once] ->
              case deRefStablePtr# [sp_sdXDl s_sdXDj] of {
                (#,#) ipv_sdXDn [Occ=Once] ipv1_sdXDo [Occ=Once] ->
                    ipv1_sdXDo ipv_sdXDn;
              };
        };

Control.Concurrent.$fstableZC0ZCbaseZCControlziConcurrentZCforkOSzuentry
  :: GHC.Stable.StablePtr (GHC.Types.IO ()) -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Concurrent.$fstableZC0ZCbaseZCControlziConcurrentZCforkOSzuentry1
            eta_B2 eta_B1;


==================== STG syntax: ====================
2018-03-16 16:09:14.879548324 UTC

Control.Concurrent.isCurrentThreadBound1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case isCurrentThreadBound# [GHC.Prim.void#] of {
          Unit# ipv1_sdXxC [Occ=Once!] ->
              let {
                sat_sdXxE [Occ=Once] :: GHC.Types.Bool
                [LclId] =
                    [ipv1_sdXxC] \u []
                        case ipv1_sdXxC of {
                          __DEFAULT -> GHC.Types.True [];
                          0# -> GHC.Types.False [];
                        };
              } in  Unit# [sat_sdXxE];
        };

Control.Concurrent.isCurrentThreadBound
  :: GHC.Types.IO GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        Control.Concurrent.isCurrentThreadBound1 GHC.Prim.void#;

Control.Concurrent.threadWaitRead
  :: System.Posix.Types.Fd -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U(U)><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.IO.threadWaitRead1 eta_B2 GHC.Prim.void#;

Control.Concurrent.threadWaitWrite
  :: System.Posix.Types.Fd -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U(U)><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.IO.threadWaitWrite1 eta_B2 GHC.Prim.void#;

Control.Concurrent.threadWaitReadSTM
  :: System.Posix.Types.Fd
     -> GHC.Types.IO (GHC.Conc.Sync.STM (), GHC.Types.IO ())
[GblId, Arity=2, Str=<L,U(U)><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.IO.threadWaitReadSTM1 eta_B2 GHC.Prim.void#;

Control.Concurrent.threadWaitWriteSTM
  :: System.Posix.Types.Fd
     -> GHC.Types.IO (GHC.Conc.Sync.STM (), GHC.Types.IO ())
[GblId, Arity=2, Str=<L,U(U)><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Conc.IO.threadWaitWriteSTM1 eta_B2 GHC.Prim.void#;

Control.Concurrent.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Concurrent.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.$trModule4];

Control.Concurrent.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Concurrent"#;

Control.Concurrent.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.$trModule2];

Control.Concurrent.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Concurrent.$trModule3
                                     Control.Concurrent.$trModule1];

Control.Concurrent.rtsSupportsBoundThreads :: GHC.Types.Bool
[GblId] =
    [] \u []
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          Unit# ds1_sdXxI [Occ=Once!] ->
              case ds1_sdXxI of {
                __DEFAULT -> GHC.Types.True [];
                0# -> GHC.Types.False [];
              };
        };

Control.Concurrent.forkFinally2
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Data.Either.Either GHC.Exception.SomeException a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [e1_sdXxK void_0E]
        let {
          sat_sdXxM [Occ=Once]
            :: Data.Either.Either GHC.Exception.SomeException a_adVT0
          [LclId] =
              CCCS Data.Either.Left! [e1_sdXxK];
        } in  Unit# [sat_sdXxM];

Control.Concurrent.runInUnboundThread1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,C(U(U,U))><S,U>, Unf=OtherCon []] =
    [] \r [action_sdXxN void_0E]
        case isCurrentThreadBound# [GHC.Prim.void#] of {
          Unit# ipv1_sdXxR [Occ=Once!] ->
              case ipv1_sdXxR of {
                __DEFAULT ->
                    case newMVar# [GHC.Prim.void#] of {
                      Unit# ipv3_sdXxV ->
                          case getMaskingState# [GHC.Prim.void#] of {
                            Unit# ipv5_sdXxY [Occ=Once!] ->
                                let {
                                  lvl13_sdXxZ [Occ=Once*, Dmd=<L,C(U)>]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             Data.Either.Either
                                               GHC.Exception.SomeException a_adVT0 #)
                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                      [ipv3_sdXxV] \r [void_0E]
                                          takeMVar# [ipv3_sdXxV GHC.Prim.void#];
                                } in 
                                  case ipv5_sdXxY of {
                                    __DEFAULT ->
                                        let {
                                          sat_sdXyf [Occ=Once] :: GHC.Types.IO ()
                                          [LclId] =
                                              [action_sdXxN ipv3_sdXxV] \r [void_0E]
                                                  let {
                                                    sat_sdXye [Occ=Once]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               () #)
                                                    [LclId] =
                                                        [action_sdXxN ipv3_sdXxV] \r [void_0E]
                                                            let {
                                                              sat_sdXy9 [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVT0 #)
                                                              [LclId] =
                                                                  [action_sdXxN] \r [void_0E]
                                                                      case
                                                                          maskAsyncExceptions# [action_sdXxN
                                                                                                GHC.Prim.void#]
                                                                      of
                                                                      { Unit# ipv7_sdXy7 [Occ=Once] ->
                                                                            let {
                                                                              sat_sdXy8 [Occ=Once]
                                                                                :: Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVT0
                                                                              [LclId] =
                                                                                  CCCS Data.Either.Right! [ipv7_sdXy7];
                                                                            } in  Unit# [sat_sdXy8];
                                                                      };
                                                            } in 
                                                              case
                                                                  catch# [sat_sdXy9
                                                                          Control.Concurrent.forkFinally2
                                                                          GHC.Prim.void#]
                                                              of
                                                              { Unit# ipv7_sdXyc [Occ=Once] ->
                                                                    case
                                                                        putMVar# [ipv3_sdXxV
                                                                                  ipv7_sdXyc
                                                                                  GHC.Prim.void#]
                                                                    of
                                                                    s2#_sdXyd
                                                                    { (##) -> Unit# [GHC.Tuple.()];
                                                                    };
                                                              };
                                                  } in 
                                                    catch# [sat_sdXye
                                                            GHC.Conc.Sync.forkIO2
                                                            GHC.Prim.void#];
                                        } in 
                                          case fork# [sat_sdXyf GHC.Prim.void#] of {
                                            Unit# ipv7_sdXyi [Occ=Once] ->
                                                let {
                                                  wait_sdXyj [Occ=LoopBreaker]
                                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             Data.Either.Either
                                                               GHC.Exception.SomeException
                                                               a_adVT0 #)
                                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                      sat-only [lvl13_sdXxZ
                                                                ipv7_sdXyi
                                                                wait_sdXyj] \r [void_0E]
                                                          let {
                                                            sat_sdXyo [Occ=Once]
                                                              :: GHC.Exception.SomeException
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVT0 #)
                                                            [LclId] =
                                                                [ipv7_sdXyi wait_sdXyj] \r [e1_sdXyl
                                                                                            void_0E]
                                                                    case
                                                                        killThread# [ipv7_sdXyi
                                                                                     e1_sdXyl
                                                                                     GHC.Prim.void#]
                                                                    of
                                                                    s2_sdXyn
                                                                    { (##) ->
                                                                          wait_sdXyj GHC.Prim.void#;
                                                                    };
                                                          } in 
                                                            catch# [lvl13_sdXxZ
                                                                    sat_sdXyo
                                                                    GHC.Prim.void#];
                                                } in 
                                                  case wait_sdXyj GHC.Prim.void# of {
                                                    Unit# ipv9_sdXyr [Occ=Once!] ->
                                                        case ipv9_sdXyr of {
                                                          Data.Either.Left x_sdXyt [Occ=Once] ->
                                                              raiseIO# [x_sdXyt GHC.Prim.void#];
                                                          Data.Either.Right y_sdXyu [Occ=Once] ->
                                                              Unit# [y_sdXyu];
                                                        };
                                                  };
                                          };
                                    0# ->
                                        let {
                                          sat_sdXyZ [Occ=Once]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adVT0 #)
                                          [LclId] =
                                              [action_sdXxN ipv3_sdXxV lvl13_sdXxZ] \r [void_0E]
                                                  let {
                                                    sat_sdXyJ [Occ=Once] :: GHC.Types.IO ()
                                                    [LclId] =
                                                        [action_sdXxN ipv3_sdXxV] \r [void_0E]
                                                            let {
                                                              sat_sdXyI [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         () #)
                                                              [LclId] =
                                                                  [action_sdXxN
                                                                   ipv3_sdXxV] \r [void_0E]
                                                                      let {
                                                                        sat_sdXyD [Occ=Once]
                                                                          :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVT0 #)
                                                                        [LclId] =
                                                                            [action_sdXxN] \r [void_0E]
                                                                                case
                                                                                    unmaskAsyncExceptions# [action_sdXxN
                                                                                                            GHC.Prim.void#]
                                                                                of
                                                                                { Unit# ipv7_sdXyB [Occ=Once] ->
                                                                                      let {
                                                                                        sat_sdXyC [Occ=Once]
                                                                                          :: Data.Either.Either
                                                                                               GHC.Exception.SomeException
                                                                                               a_adVT0
                                                                                        [LclId] =
                                                                                            CCCS Data.Either.Right! [ipv7_sdXyB];
                                                                                      } in 
                                                                                        Unit# [sat_sdXyC];
                                                                                };
                                                                      } in 
                                                                        case
                                                                            catch# [sat_sdXyD
                                                                                    Control.Concurrent.forkFinally2
                                                                                    GHC.Prim.void#]
                                                                        of
                                                                        { Unit# ipv7_sdXyG [Occ=Once] ->
                                                                              case
                                                                                  putMVar# [ipv3_sdXxV
                                                                                            ipv7_sdXyG
                                                                                            GHC.Prim.void#]
                                                                              of
                                                                              s2#_sdXyH
                                                                              { (##) ->
                                                                                    Unit# [GHC.Tuple.()];
                                                                              };
                                                                        };
                                                            } in 
                                                              catch# [sat_sdXyI
                                                                      GHC.Conc.Sync.forkIO2
                                                                      GHC.Prim.void#];
                                                  } in 
                                                    case fork# [sat_sdXyJ GHC.Prim.void#] of {
                                                      Unit# ipv7_sdXyM [Occ=Once] ->
                                                          let {
                                                            wait_sdXyN [Occ=LoopBreaker]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVT0 #)
                                                            [LclId,
                                                             Arity=1,
                                                             Str=<S,U>,
                                                             Unf=OtherCon []] =
                                                                sat-only [lvl13_sdXxZ
                                                                          ipv7_sdXyM
                                                                          wait_sdXyN] \r [void_0E]
                                                                    let {
                                                                      sat_sdXyS [Occ=Once]
                                                                        :: GHC.Exception.SomeException
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 Data.Either.Either
                                                                                   GHC.Exception.SomeException
                                                                                   a_adVT0 #)
                                                                      [LclId] =
                                                                          [ipv7_sdXyM
                                                                           wait_sdXyN] \r [e1_sdXyP
                                                                                           void_0E]
                                                                              case
                                                                                  killThread# [ipv7_sdXyM
                                                                                               e1_sdXyP
                                                                                               GHC.Prim.void#]
                                                                              of
                                                                              s3_sdXyR
                                                                              { (##) ->
                                                                                    wait_sdXyN
                                                                                        GHC.Prim.void#;
                                                                              };
                                                                    } in 
                                                                      catch# [lvl13_sdXxZ
                                                                              sat_sdXyS
                                                                              GHC.Prim.void#];
                                                          } in 
                                                            case wait_sdXyN GHC.Prim.void# of {
                                                              Unit# ipv9_sdXyV [Occ=Once!] ->
                                                                  case ipv9_sdXyV of {
                                                                    Data.Either.Left x_sdXyX [Occ=Once] ->
                                                                        raiseIO# [x_sdXyX
                                                                                  GHC.Prim.void#];
                                                                    Data.Either.Right y_sdXyY [Occ=Once] ->
                                                                        Unit# [y_sdXyY];
                                                                  };
                                                            };
                                                    };
                                        } in  maskAsyncExceptions# [sat_sdXyZ GHC.Prim.void#];
                                    1# ->
                                        let {
                                          sat_sdXzd [Occ=Once] :: GHC.Types.IO ()
                                          [LclId] =
                                              [action_sdXxN ipv3_sdXxV] \r [void_0E]
                                                  let {
                                                    sat_sdXzc [Occ=Once]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               () #)
                                                    [LclId] =
                                                        [action_sdXxN ipv3_sdXxV] \r [void_0E]
                                                            let {
                                                              sat_sdXz7 [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVT0 #)
                                                              [LclId] =
                                                                  [action_sdXxN] \r [void_0E]
                                                                      case
                                                                          maskUninterruptible# [action_sdXxN
                                                                                                GHC.Prim.void#]
                                                                      of
                                                                      { Unit# ipv7_sdXz5 [Occ=Once] ->
                                                                            let {
                                                                              sat_sdXz6 [Occ=Once]
                                                                                :: Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVT0
                                                                              [LclId] =
                                                                                  CCCS Data.Either.Right! [ipv7_sdXz5];
                                                                            } in  Unit# [sat_sdXz6];
                                                                      };
                                                            } in 
                                                              case
                                                                  catch# [sat_sdXz7
                                                                          Control.Concurrent.forkFinally2
                                                                          GHC.Prim.void#]
                                                              of
                                                              { Unit# ipv7_sdXza [Occ=Once] ->
                                                                    case
                                                                        putMVar# [ipv3_sdXxV
                                                                                  ipv7_sdXza
                                                                                  GHC.Prim.void#]
                                                                    of
                                                                    s2#_sdXzb
                                                                    { (##) -> Unit# [GHC.Tuple.()];
                                                                    };
                                                              };
                                                  } in 
                                                    catch# [sat_sdXzc
                                                            GHC.Conc.Sync.forkIO2
                                                            GHC.Prim.void#];
                                        } in 
                                          case fork# [sat_sdXzd GHC.Prim.void#] of {
                                            Unit# ipv7_sdXzg [Occ=Once] ->
                                                let {
                                                  wait_sdXzh [Occ=LoopBreaker]
                                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             Data.Either.Either
                                                               GHC.Exception.SomeException
                                                               a_adVT0 #)
                                                  [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                                                      sat-only [lvl13_sdXxZ
                                                                ipv7_sdXzg
                                                                wait_sdXzh] \r [void_0E]
                                                          let {
                                                            sat_sdXzm [Occ=Once]
                                                              :: GHC.Exception.SomeException
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVT0 #)
                                                            [LclId] =
                                                                [ipv7_sdXzg wait_sdXzh] \r [e1_sdXzj
                                                                                            void_0E]
                                                                    case
                                                                        killThread# [ipv7_sdXzg
                                                                                     e1_sdXzj
                                                                                     GHC.Prim.void#]
                                                                    of
                                                                    s2_sdXzl
                                                                    { (##) ->
                                                                          wait_sdXzh GHC.Prim.void#;
                                                                    };
                                                          } in 
                                                            catch# [lvl13_sdXxZ
                                                                    sat_sdXzm
                                                                    GHC.Prim.void#];
                                                } in 
                                                  case wait_sdXzh GHC.Prim.void# of {
                                                    Unit# ipv9_sdXzp [Occ=Once!] ->
                                                        case ipv9_sdXzp of {
                                                          Data.Either.Left x_sdXzr [Occ=Once] ->
                                                              raiseIO# [x_sdXzr GHC.Prim.void#];
                                                          Data.Either.Right y_sdXzs [Occ=Once] ->
                                                              Unit# [y_sdXzs];
                                                        };
                                                  };
                                          };
                                  };
                          };
                    };
                0# -> action_sdXxN GHC.Prim.void#;
              };
        };

Control.Concurrent.runInUnboundThread
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,C(U(U,U))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Control.Concurrent.runInUnboundThread1 eta_B2 GHC.Prim.void#;

lvl_rdWnQ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RTS doesn't support multiple OS threads (use ghc -threaded when linking)"#;

Control.Concurrent.forkOS2
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        case GHC.CString.unpackCString# lvl_rdWnQ of sat_sdXzu {
          __DEFAULT -> GHC.IO.failIO1 sat_sdXzu GHC.Prim.void#;
        };

lvl1_rdWnR :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "undefined"#;

lvl2_rdWnS :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl1_rdWnR;

lvl3_rdWnT :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Control.Concurrent.$trModule4;

lvl4_rdWnU :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Control.Concurrent.$trModule2;

lvl5_rdWnV :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./Control/Concurrent.hs"#;

lvl6_rdWnW :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl5_rdWnV;

lvl7_rdWnX :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [353#];

lvl8_rdWnY :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [33#];

lvl9_rdWnZ :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [42#];

lvl10_rdWo0 :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl3_rdWnT
                                           lvl4_rdWnU
                                           lvl6_rdWnW
                                           lvl7_rdWnX
                                           lvl8_rdWnY
                                           lvl7_rdWnX
                                           lvl9_rdWnZ];

lvl11_rdWo1 :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl2_rdWnS
                                                  lvl10_rdWo0
                                                  GHC.Stack.Types.EmptyCallStack];

Control.Concurrent.runInBoundThread2
  :: forall a. Data.Either.Either GHC.Exception.SomeException a
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl11_rdWo1;

Control.Concurrent.runInBoundThread1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,C(U(U,U))><L,U>, Unf=OtherCon []] =
    [] \r [action_sdXzv void_0E]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          Unit# ds1_sdXzA [Occ=Once!] ->
              case ds1_sdXzA of {
                __DEFAULT ->
                    case isCurrentThreadBound# [GHC.Prim.void#] of {
                      Unit# ipv1_sdXzE [Occ=Once!] ->
                          case ipv1_sdXzE of {
                            __DEFAULT -> action_sdXzv GHC.Prim.void#;
                            0# ->
                                case
                                    newMutVar# [Control.Concurrent.runInBoundThread2 GHC.Prim.void#]
                                of
                                { Unit# ipv3_sdXzI ->
                                      case getMaskingState# [GHC.Prim.void#] of {
                                        Unit# ipv5_sdXzL [Occ=Once!] ->
                                            case ipv5_sdXzL of {
                                              __DEFAULT ->
                                                  let {
                                                    sat_sdXzY [Occ=Once] :: GHC.Types.IO ()
                                                    [LclId] =
                                                        [action_sdXzv ipv3_sdXzI] \r [void_0E]
                                                            let {
                                                              sat_sdXzT [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVVB #)
                                                              [LclId] =
                                                                  [action_sdXzv] \r [void_0E]
                                                                      case
                                                                          action_sdXzv
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# ipv7_sdXzR [Occ=Once] ->
                                                                            let {
                                                                              sat_sdXzS [Occ=Once]
                                                                                :: Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVVB
                                                                              [LclId] =
                                                                                  CCCS Data.Either.Right! [ipv7_sdXzR];
                                                                            } in  Unit# [sat_sdXzS];
                                                                      };
                                                            } in 
                                                              case
                                                                  catch# [sat_sdXzT
                                                                          Control.Concurrent.forkFinally2
                                                                          GHC.Prim.void#]
                                                              of
                                                              { Unit# ipv7_sdXzW [Occ=Once] ->
                                                                    case
                                                                        writeMutVar# [ipv3_sdXzI
                                                                                      ipv7_sdXzW
                                                                                      GHC.Prim.void#]
                                                                    of
                                                                    s2#_sdXzX
                                                                    { (##) -> Unit# [GHC.Tuple.()];
                                                                    };
                                                              };
                                                  } in 
                                                    case
                                                        makeStablePtr# [sat_sdXzY GHC.Prim.void#]
                                                    of
                                                    { Unit# ipv7_sdXA1 ->
                                                          let {
                                                            sat_sdXAd [Occ=Once]
                                                              :: GHC.Exception.SomeException
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [ipv7_sdXA1] \r [e1_sdXA8 void_0E]
                                                                    case
                                                                        __pkg_ccall base-4.11.0.0 [ipv7_sdXA1
                                                                                                   GHC.Prim.void#]
                                                                    of
                                                                    { (##) ->
                                                                          raiseIO# [e1_sdXA8
                                                                                    GHC.Prim.void#];
                                                                    }; } in
                                                          let {
                                                            sat_sdXA6 [Occ=Once]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [ipv3_sdXzI ipv7_sdXA1] \r [void_0E]
                                                                    case
                                                                        __pkg_ccall_GC base-4.11.0.0 [ipv7_sdXA1
                                                                                                      GHC.Prim.void#]
                                                                    of
                                                                    { (##) ->
                                                                          readMutVar# [ipv3_sdXzI
                                                                                       GHC.Prim.void#];
                                                                    }; } in
                                                          let {
                                                            sat_sdXA7 [Occ=Once]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [sat_sdXA6] \r [void_0E]
                                                                    maskAsyncExceptions# [sat_sdXA6
                                                                                          GHC.Prim.void#];
                                                          } in 
                                                            case
                                                                catch# [sat_sdXA7
                                                                        sat_sdXAd
                                                                        GHC.Prim.void#]
                                                            of
                                                            { Unit# ipv9_sdXAg [Occ=Once!] ->
                                                                  case
                                                                      __pkg_ccall base-4.11.0.0 [ipv7_sdXA1
                                                                                                 GHC.Prim.void#]
                                                                  of
                                                                  { (##) ->
                                                                        case ipv9_sdXAg of {
                                                                          Data.Either.Left x_sdXAl [Occ=Once] ->
                                                                              raiseIO# [x_sdXAl
                                                                                        GHC.Prim.void#];
                                                                          Data.Either.Right y_sdXAm [Occ=Once] ->
                                                                              Unit# [y_sdXAm];
                                                                        };
                                                                  };
                                                            };
                                                    };
                                              0# ->
                                                  let {
                                                    sat_sdXAV [Occ=Once]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               Data.Either.Either
                                                                 GHC.Exception.SomeException
                                                                 a_adVVB #)
                                                    [LclId] =
                                                        [action_sdXzv ipv3_sdXzI] \r [void_0E]
                                                            let {
                                                              sat_sdXAz [Occ=Once]
                                                                :: GHC.Types.IO ()
                                                              [LclId] =
                                                                  [action_sdXzv
                                                                   ipv3_sdXzI] \r [void_0E]
                                                                      let {
                                                                        sat_sdXAu [Occ=Once]
                                                                          :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVVB #)
                                                                        [LclId] =
                                                                            [action_sdXzv] \r [void_0E]
                                                                                case
                                                                                    action_sdXzv
                                                                                        GHC.Prim.void#
                                                                                of
                                                                                { Unit# ipv7_sdXAs [Occ=Once] ->
                                                                                      let {
                                                                                        sat_sdXAt [Occ=Once]
                                                                                          :: Data.Either.Either
                                                                                               GHC.Exception.SomeException
                                                                                               a_adVVB
                                                                                        [LclId] =
                                                                                            CCCS Data.Either.Right! [ipv7_sdXAs];
                                                                                      } in 
                                                                                        Unit# [sat_sdXAt];
                                                                                };
                                                                      } in 
                                                                        case
                                                                            catch# [sat_sdXAu
                                                                                    Control.Concurrent.forkFinally2
                                                                                    GHC.Prim.void#]
                                                                        of
                                                                        { Unit# ipv7_sdXAx [Occ=Once] ->
                                                                              case
                                                                                  writeMutVar# [ipv3_sdXzI
                                                                                                ipv7_sdXAx
                                                                                                GHC.Prim.void#]
                                                                              of
                                                                              s2#_sdXAy
                                                                              { (##) ->
                                                                                    Unit# [GHC.Tuple.()];
                                                                              };
                                                                        };
                                                            } in 
                                                              case
                                                                  makeStablePtr# [sat_sdXAz
                                                                                  GHC.Prim.void#]
                                                              of
                                                              { Unit# ipv7_sdXAC ->
                                                                    let {
                                                                      sat_sdXAO [Occ=Once]
                                                                        :: GHC.Exception.SomeException
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 Data.Either.Either
                                                                                   GHC.Exception.SomeException
                                                                                   a_adVVB #)
                                                                      [LclId] =
                                                                          [ipv7_sdXAC] \r [e1_sdXAJ
                                                                                           void_0E]
                                                                              case
                                                                                  __pkg_ccall base-4.11.0.0 [ipv7_sdXAC
                                                                                                             GHC.Prim.void#]
                                                                              of
                                                                              { (##) ->
                                                                                    raiseIO# [e1_sdXAJ
                                                                                              GHC.Prim.void#];
                                                                              }; } in
                                                                    let {
                                                                      sat_sdXAH [Occ=Once]
                                                                        :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 Data.Either.Either
                                                                                   GHC.Exception.SomeException
                                                                                   a_adVVB #)
                                                                      [LclId] =
                                                                          [ipv3_sdXzI
                                                                           ipv7_sdXAC] \r [void_0E]
                                                                              case
                                                                                  __pkg_ccall_GC base-4.11.0.0 [ipv7_sdXAC
                                                                                                                GHC.Prim.void#]
                                                                              of
                                                                              { (##) ->
                                                                                    readMutVar# [ipv3_sdXzI
                                                                                                 GHC.Prim.void#];
                                                                              }; } in
                                                                    let {
                                                                      sat_sdXAI [Occ=Once]
                                                                        :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 Data.Either.Either
                                                                                   GHC.Exception.SomeException
                                                                                   a_adVVB #)
                                                                      [LclId] =
                                                                          [sat_sdXAH] \r [void_0E]
                                                                              unmaskAsyncExceptions# [sat_sdXAH
                                                                                                      GHC.Prim.void#];
                                                                    } in 
                                                                      case
                                                                          catch# [sat_sdXAI
                                                                                  sat_sdXAO
                                                                                  GHC.Prim.void#]
                                                                      of
                                                                      { Unit# ipv9_sdXAR [Occ=Once] ->
                                                                            case
                                                                                __pkg_ccall base-4.11.0.0 [ipv7_sdXAC
                                                                                                           GHC.Prim.void#]
                                                                            of
                                                                            { (##) ->
                                                                                  Unit# [ipv9_sdXAR];
                                                                            };
                                                                      };
                                                              };
                                                  } in 
                                                    case
                                                        maskAsyncExceptions# [sat_sdXAV
                                                                              GHC.Prim.void#]
                                                    of
                                                    { Unit# ipv7_sdXAY [Occ=Once!] ->
                                                          case ipv7_sdXAY of {
                                                            Data.Either.Left x_sdXB0 [Occ=Once] ->
                                                                raiseIO# [x_sdXB0 GHC.Prim.void#];
                                                            Data.Either.Right y_sdXB1 [Occ=Once] ->
                                                                Unit# [y_sdXB1];
                                                          };
                                                    };
                                              1# ->
                                                  let {
                                                    sat_sdXBd [Occ=Once] :: GHC.Types.IO ()
                                                    [LclId] =
                                                        [action_sdXzv ipv3_sdXzI] \r [void_0E]
                                                            let {
                                                              sat_sdXB8 [Occ=Once]
                                                                :: GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVVB #)
                                                              [LclId] =
                                                                  [action_sdXzv] \r [void_0E]
                                                                      case
                                                                          action_sdXzv
                                                                              GHC.Prim.void#
                                                                      of
                                                                      { Unit# ipv7_sdXB6 [Occ=Once] ->
                                                                            let {
                                                                              sat_sdXB7 [Occ=Once]
                                                                                :: Data.Either.Either
                                                                                     GHC.Exception.SomeException
                                                                                     a_adVVB
                                                                              [LclId] =
                                                                                  CCCS Data.Either.Right! [ipv7_sdXB6];
                                                                            } in  Unit# [sat_sdXB7];
                                                                      };
                                                            } in 
                                                              case
                                                                  catch# [sat_sdXB8
                                                                          Control.Concurrent.forkFinally2
                                                                          GHC.Prim.void#]
                                                              of
                                                              { Unit# ipv7_sdXBb [Occ=Once] ->
                                                                    case
                                                                        writeMutVar# [ipv3_sdXzI
                                                                                      ipv7_sdXBb
                                                                                      GHC.Prim.void#]
                                                                    of
                                                                    s2#_sdXBc
                                                                    { (##) -> Unit# [GHC.Tuple.()];
                                                                    };
                                                              };
                                                  } in 
                                                    case
                                                        makeStablePtr# [sat_sdXBd GHC.Prim.void#]
                                                    of
                                                    { Unit# ipv7_sdXBg ->
                                                          let {
                                                            sat_sdXBs [Occ=Once]
                                                              :: GHC.Exception.SomeException
                                                                 -> GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [ipv7_sdXBg] \r [e1_sdXBn void_0E]
                                                                    case
                                                                        __pkg_ccall base-4.11.0.0 [ipv7_sdXBg
                                                                                                   GHC.Prim.void#]
                                                                    of
                                                                    { (##) ->
                                                                          raiseIO# [e1_sdXBn
                                                                                    GHC.Prim.void#];
                                                                    }; } in
                                                          let {
                                                            sat_sdXBl [Occ=Once]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [ipv3_sdXzI ipv7_sdXBg] \r [void_0E]
                                                                    case
                                                                        __pkg_ccall_GC base-4.11.0.0 [ipv7_sdXBg
                                                                                                      GHC.Prim.void#]
                                                                    of
                                                                    { (##) ->
                                                                          readMutVar# [ipv3_sdXzI
                                                                                       GHC.Prim.void#];
                                                                    }; } in
                                                          let {
                                                            sat_sdXBm [Occ=Once]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       Data.Either.Either
                                                                         GHC.Exception.SomeException
                                                                         a_adVVB #)
                                                            [LclId] =
                                                                [sat_sdXBl] \r [void_0E]
                                                                    maskUninterruptible# [sat_sdXBl
                                                                                          GHC.Prim.void#];
                                                          } in 
                                                            case
                                                                catch# [sat_sdXBm
                                                                        sat_sdXBs
                                                                        GHC.Prim.void#]
                                                            of
                                                            { Unit# ipv9_sdXBv [Occ=Once!] ->
                                                                  case
                                                                      __pkg_ccall base-4.11.0.0 [ipv7_sdXBg
                                                                                                 GHC.Prim.void#]
                                                                  of
                                                                  { (##) ->
                                                                        case ipv9_sdXBv of {
                                                                          Data.Either.Left x_sdXBA [Occ=Once] ->
                                                                              raiseIO# [x_sdXBA
                                                                                        GHC.Prim.void#];
                                                                          Data.Either.Right y_sdXBB [Occ=Once] ->
                                                                              Unit# [y_sdXBB];
                                                                        };
                                                                  };
                                                            };
                                                    };
                                            };
                                      };
                                };
                          };
                    };
                0# -> Control.Concurrent.forkOS2 GHC.Prim.void#;
              };
        };

Control.Concurrent.runInBoundThread
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,C(U(U,U))><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Control.Concurrent.runInBoundThread1 eta_B2 GHC.Prim.void#;

Control.Concurrent.forkFinally1
  :: forall a.
     GHC.Types.IO a
     -> (Data.Either.Either GHC.Exception.SomeException a
         -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=3, Str=<L,C(U)><L,C(C1(U))><S,U>, Unf=OtherCon []] =
    [] \r [action_sdXBC and_then_sdXBD void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sdXBH [Occ=Once!] ->
              case ipv1_sdXBH of {
                __DEFAULT ->
                    let {
                      sat_sdXBV [Occ=Once] :: GHC.Types.IO ()
                      [LclId] =
                          [action_sdXBC and_then_sdXBD] \r [void_0E]
                              let {
                                sat_sdXBU [Occ=Once]
                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                [LclId] =
                                    [action_sdXBC and_then_sdXBD] \r [void_0E]
                                        let {
                                          sat_sdXBQ [Occ=Once]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Either.Either
                                                       GHC.Exception.SomeException a_adVWY #)
                                          [LclId] =
                                              [action_sdXBC] \r [void_0E]
                                                  case
                                                      maskAsyncExceptions# [action_sdXBC
                                                                            GHC.Prim.void#]
                                                  of
                                                  { Unit# ipv3_sdXBO [Occ=Once] ->
                                                        let {
                                                          sat_sdXBP [Occ=Once]
                                                            :: Data.Either.Either
                                                                 GHC.Exception.SomeException a_adVWY
                                                          [LclId] =
                                                              CCCS Data.Either.Right! [ipv3_sdXBO];
                                                        } in  Unit# [sat_sdXBP];
                                                  };
                                        } in 
                                          case
                                              catch# [sat_sdXBQ
                                                      Control.Concurrent.forkFinally2
                                                      GHC.Prim.void#]
                                          of
                                          { Unit# ipv3_sdXBT [Occ=Once] ->
                                                and_then_sdXBD ipv3_sdXBT GHC.Prim.void#;
                                          };
                              } in  catch# [sat_sdXBU GHC.Conc.Sync.forkIO2 GHC.Prim.void#];
                    } in 
                      case fork# [sat_sdXBV GHC.Prim.void#] of {
                        Unit# ipv3_sdXBY [Occ=Once] ->
                            let {
                              sat_sdXBZ [Occ=Once] :: GHC.Conc.Sync.ThreadId
                              [LclId] =
                                  CCCS GHC.Conc.Sync.ThreadId! [ipv3_sdXBY];
                            } in  Unit# [sat_sdXBZ];
                      };
                0# ->
                    let {
                      sat_sdXCi [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
                      [LclId] =
                          [action_sdXBC and_then_sdXBD] \r [void_0E]
                              let {
                                sat_sdXCd [Occ=Once] :: GHC.Types.IO ()
                                [LclId] =
                                    [action_sdXBC and_then_sdXBD] \r [void_0E]
                                        let {
                                          sat_sdXCc [Occ=Once]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                          [LclId] =
                                              [action_sdXBC and_then_sdXBD] \r [void_0E]
                                                  let {
                                                    sat_sdXC8 [Occ=Once]
                                                      :: GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               Data.Either.Either
                                                                 GHC.Exception.SomeException
                                                                 a_adVWY #)
                                                    [LclId] =
                                                        [action_sdXBC] \r [void_0E]
                                                            case
                                                                unmaskAsyncExceptions# [action_sdXBC
                                                                                        GHC.Prim.void#]
                                                            of
                                                            { Unit# ipv3_sdXC6 [Occ=Once] ->
                                                                  let {
                                                                    sat_sdXC7 [Occ=Once]
                                                                      :: Data.Either.Either
                                                                           GHC.Exception.SomeException
                                                                           a_adVWY
                                                                    [LclId] =
                                                                        CCCS Data.Either.Right! [ipv3_sdXC6];
                                                                  } in  Unit# [sat_sdXC7];
                                                            };
                                                  } in 
                                                    case
                                                        catch# [sat_sdXC8
                                                                Control.Concurrent.forkFinally2
                                                                GHC.Prim.void#]
                                                    of
                                                    { Unit# ipv3_sdXCb [Occ=Once] ->
                                                          and_then_sdXBD ipv3_sdXCb GHC.Prim.void#;
                                                    };
                                        } in 
                                          catch# [sat_sdXCc GHC.Conc.Sync.forkIO2 GHC.Prim.void#];
                              } in 
                                case fork# [sat_sdXCd GHC.Prim.void#] of {
                                  Unit# ipv3_sdXCg [Occ=Once] ->
                                      let {
                                        sat_sdXCh [Occ=Once] :: GHC.Conc.Sync.ThreadId
                                        [LclId] =
                                            CCCS GHC.Conc.Sync.ThreadId! [ipv3_sdXCg];
                                      } in  Unit# [sat_sdXCh];
                                };
                    } in  maskAsyncExceptions# [sat_sdXCi GHC.Prim.void#];
                1# ->
                    let {
                      sat_sdXCv [Occ=Once] :: GHC.Types.IO ()
                      [LclId] =
                          [action_sdXBC and_then_sdXBD] \r [void_0E]
                              let {
                                sat_sdXCu [Occ=Once]
                                  :: GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                [LclId] =
                                    [action_sdXBC and_then_sdXBD] \r [void_0E]
                                        let {
                                          sat_sdXCq [Occ=Once]
                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                     Data.Either.Either
                                                       GHC.Exception.SomeException a_adVWY #)
                                          [LclId] =
                                              [action_sdXBC] \r [void_0E]
                                                  case
                                                      maskUninterruptible# [action_sdXBC
                                                                            GHC.Prim.void#]
                                                  of
                                                  { Unit# ipv3_sdXCo [Occ=Once] ->
                                                        let {
                                                          sat_sdXCp [Occ=Once]
                                                            :: Data.Either.Either
                                                                 GHC.Exception.SomeException a_adVWY
                                                          [LclId] =
                                                              CCCS Data.Either.Right! [ipv3_sdXCo];
                                                        } in  Unit# [sat_sdXCp];
                                                  };
                                        } in 
                                          case
                                              catch# [sat_sdXCq
                                                      Control.Concurrent.forkFinally2
                                                      GHC.Prim.void#]
                                          of
                                          { Unit# ipv3_sdXCt [Occ=Once] ->
                                                and_then_sdXBD ipv3_sdXCt GHC.Prim.void#;
                                          };
                              } in  catch# [sat_sdXCu GHC.Conc.Sync.forkIO2 GHC.Prim.void#];
                    } in 
                      case fork# [sat_sdXCv GHC.Prim.void#] of {
                        Unit# ipv3_sdXCy [Occ=Once] ->
                            let {
                              sat_sdXCz [Occ=Once] :: GHC.Conc.Sync.ThreadId
                              [LclId] =
                                  CCCS GHC.Conc.Sync.ThreadId! [ipv3_sdXCy];
                            } in  Unit# [sat_sdXCz];
                      };
              };
        };

Control.Concurrent.forkFinally
  :: forall a.
     GHC.Types.IO a
     -> (Data.Either.Either GHC.Exception.SomeException a
         -> GHC.Types.IO ())
     -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=3, Str=<L,C(U)><L,C(C1(U))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        Control.Concurrent.forkFinally1 eta_B3 eta_B2 GHC.Prim.void#;

lvl12_rdWo2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Cannot create OS thread."#;

Control.Concurrent.forkOS3
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        case GHC.CString.unpackCString# lvl12_rdWo2 of sat_sdXCB {
          __DEFAULT -> GHC.IO.failIO1 sat_sdXCB GHC.Prim.void#;
        };

Control.Concurrent.forkOS1
  :: GHC.Types.IO ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=2, Str=<L,C(U(U,U))><L,U>, Unf=OtherCon []] =
    [] \r [action0_sdXCC void_0E]
        case __pkg_ccall base-4.11.0.0 [GHC.Prim.realWorld#] of {
          Unit# ds1_sdXCH [Occ=Once!] ->
              case ds1_sdXCH of {
                __DEFAULT ->
                    case newMVar# [GHC.Prim.void#] of {
                      Unit# ipv1_sdXCL ->
                          case getMaskingState# [GHC.Prim.void#] of {
                            Unit# ipv3_sdXCO [Occ=Once!] ->
                                let {
                                  sat_sdXCY [Occ=Once] :: GHC.Types.IO ()
                                  [LclId] =
                                      [action0_sdXCC ipv1_sdXCL ipv3_sdXCO] \r [void_0E]
                                          case myThreadId# [GHC.Prim.void#] of {
                                            Unit# ipv5_sdXCS [Occ=Once] ->
                                                let {
                                                  sat_sdXCT [Occ=Once] :: GHC.Conc.Sync.ThreadId
                                                  [LclId] =
                                                      CCCS GHC.Conc.Sync.ThreadId! [ipv5_sdXCS];
                                                } in 
                                                  case
                                                      putMVar# [ipv1_sdXCL sat_sdXCT GHC.Prim.void#]
                                                  of
                                                  s2#_sdXCU
                                                  { (##) ->
                                                        let {
                                                          sat_sdXCX [Occ=Once, Dmd=<L,1*C1(U)>]
                                                            :: GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     () #)
                                                          [LclId] =
                                                              [action0_sdXCC ipv3_sdXCO] \s []
                                                                  case ipv3_sdXCO of {
                                                                    __DEFAULT -> action0_sdXCC;
                                                                    0# ->
                                                                        let {
                                                                          sat_sdXCW [Occ=OnceT[0]]
                                                                            :: GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld
                                                                               -> (# GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld,
                                                                                     () #)
                                                                          [LclId] =
                                                                              [action0_sdXCC] \r [void_0E]
                                                                                  unmaskAsyncExceptions# [action0_sdXCC
                                                                                                          GHC.Prim.void#];
                                                                        } in  sat_sdXCW;
                                                                    1# ->
                                                                        GHC.IO.uninterruptibleMask_1
                                                                            action0_sdXCC;
                                                                  };
                                                        } in 
                                                          catch# [sat_sdXCX
                                                                  GHC.Conc.Sync.childHandler1
                                                                  GHC.Prim.void#];
                                                  };
                                          };
                                } in 
                                  case makeStablePtr# [sat_sdXCY GHC.Prim.void#] of {
                                    Unit# ipv5_sdXD1 ->
                                        case
                                            __pkg_ccall_GC base-4.11.0.0 [ipv5_sdXD1 GHC.Prim.void#]
                                        of
                                        { Unit# ds6_sdXD5 [Occ=Once] ->
                                              case narrow32Int# [ds6_sdXD5] of {
                                                __DEFAULT ->
                                                    Control.Concurrent.forkOS3 GHC.Prim.void#;
                                                0# ->
                                                    case takeMVar# [ipv1_sdXCL GHC.Prim.void#] of {
                                                      Unit# ipv7_sdXDa [Occ=Once] ->
                                                          case
                                                              __pkg_ccall base-4.11.0.0 [ipv5_sdXD1
                                                                                         GHC.Prim.void#]
                                                          of
                                                          { (##) -> Unit# [ipv7_sdXDa];
                                                          };
                                                    };
                                              };
                                        };
                                  };
                          };
                    };
                0# -> Control.Concurrent.forkOS2 GHC.Prim.void#;
              };
        };

Control.Concurrent.forkOS
  :: GHC.Types.IO () -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=2, Str=<L,C(U(U,U))><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Control.Concurrent.forkOS1 eta_B2 GHC.Prim.void#;

Control.Concurrent.forkOSWithUnmask1
  :: ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
      -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
[GblId, Arity=2, Str=<L,1*C1(C(U(U,U)))><S,U>, Unf=OtherCon []] =
    [] \r [io_sdXDe void_0E]
        let {
          sat_sdXDh [Occ=Once, Dmd=<L,C(U(U,U))>] :: GHC.Types.IO ()
          [LclId] =
              [io_sdXDe] \u []
                  let {
                    sat_sdXDg [Occ=Once] :: forall a. GHC.Types.IO a -> GHC.Types.IO a
                    [LclId] =
                        [] \r [eta_B2 void_0E]
                            unmaskAsyncExceptions# [eta_B2 GHC.Prim.void#];
                  } in  io_sdXDe sat_sdXDg;
        } in  Control.Concurrent.forkOS1 sat_sdXDh GHC.Prim.void#;

Control.Concurrent.forkOSWithUnmask
  :: ((forall a. GHC.Types.IO a -> GHC.Types.IO a)
      -> GHC.Types.IO ())
     -> GHC.Types.IO GHC.Conc.Sync.ThreadId
[GblId, Arity=2, Str=<L,1*C1(C(U(U,U)))><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Control.Concurrent.forkOSWithUnmask1 eta_B2 GHC.Prim.void#;

Control.Concurrent.$fstableZC0ZCbaseZCControlziConcurrentZCforkOSzuentry1
  :: GHC.Stable.StablePtr (GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [stableAction_sdXDi void_0E]
        case stableAction_sdXDi of {
          GHC.Stable.StablePtr sp_sdXDl [Occ=Once] ->
              case deRefStablePtr# [sp_sdXDl GHC.Prim.void#] of {
                Unit# ipv1_sdXDo [Occ=Once] -> ipv1_sdXDo GHC.Prim.void#;
              };
        };

Control.Concurrent.$fstableZC0ZCbaseZCControlziConcurrentZCforkOSzuentry
  :: GHC.Stable.StablePtr (GHC.Types.IO ()) -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Control.Concurrent.$fstableZC0ZCbaseZCControlziConcurrentZCforkOSzuentry1
            eta_B2 GHC.Prim.void#;

