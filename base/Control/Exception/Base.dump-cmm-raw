
==================== Raw Cmm ====================
2018-03-16 16:04:55.002077084 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:04:55.003391613 UTC

[section ""data" . Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_entry() //  [R3,
                                                                        R4]
         { []
         }
     {offset
       c9QBB: // global
           _s9PFO::P64 = R3;
           R3 = R4;
           R2 = _s9PFO::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_info" {
     Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_info:
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.00667607 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail1_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail1_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail1_info;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail1_entry() //  [R2]
         { []
         }
     {offset
       c9QBM: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionPatternMatchFail1_info" {
     Control.Exception.Base.$fExceptionPatternMatchFail1_info:
         const Control.Exception.Base.$fExceptionPatternMatchFail1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.010214027 UTC

[section ""data" . Control.Exception.Base.$fShowPatternMatchFail_$cshowList_closure" {
     Control.Exception.Base.$fShowPatternMatchFail_$cshowList_closure:
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowList_info;
 },
 Control.Exception.Base.$fShowPatternMatchFail_$cshowList_entry() //  [R2,
                                                                       R3]
         { []
         }
     {offset
       c9QBZ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowPatternMatchFail_$cshowList_info" {
     Control.Exception.Base.$fShowPatternMatchFail_$cshowList_info:
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.014155496 UTC

[section ""data" . Control.Exception.Base.$fShowPatternMatchFail_closure" {
     Control.Exception.Base.$fShowPatternMatchFail_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionPatternMatchFail1_closure+1;
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.01612614 UTC

[section ""data" . Control.Exception.Base.$fShowRecSelError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowRecSelError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowRecSelError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowRecSelError_$cshowsPrec_entry() //  [R3,
                                                                   R4]
         { []
         }
     {offset
       c9QCb: // global
           _s9PFT::P64 = R3;
           R3 = R4;
           R2 = _s9PFT::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowRecSelError_$cshowsPrec_info" {
     Control.Exception.Base.$fShowRecSelError_$cshowsPrec_info:
         const Control.Exception.Base.$fShowRecSelError_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.019316753 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError1_closure" {
     Control.Exception.Base.$fExceptionRecSelError1_closure:
         const Control.Exception.Base.$fExceptionRecSelError1_info;
 },
 Control.Exception.Base.$fExceptionRecSelError1_entry() //  [R2]
         { []
         }
     {offset
       c9QCm: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecSelError1_info" {
     Control.Exception.Base.$fExceptionRecSelError1_info:
         const Control.Exception.Base.$fExceptionRecSelError1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.022747598 UTC

[section ""data" . Control.Exception.Base.$fShowRecSelError_$cshowList_closure" {
     Control.Exception.Base.$fShowRecSelError_$cshowList_closure:
         const Control.Exception.Base.$fShowRecSelError_$cshowList_info;
 },
 Control.Exception.Base.$fShowRecSelError_$cshowList_entry() //  [R2,
                                                                  R3]
         { []
         }
     {offset
       c9QCz: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowRecSelError_$cshowList_info" {
     Control.Exception.Base.$fShowRecSelError_$cshowList_info:
         const Control.Exception.Base.$fShowRecSelError_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.025804877 UTC

[section ""data" . Control.Exception.Base.$fShowRecSelError_closure" {
     Control.Exception.Base.$fShowRecSelError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowRecSelError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionRecSelError1_closure+1;
         const Control.Exception.Base.$fShowRecSelError_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.027677125 UTC

[section ""data" . Control.Exception.Base.$fShowRecConError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowRecConError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowRecConError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowRecConError_$cshowsPrec_entry() //  [R3,
                                                                   R4]
         { []
         }
     {offset
       c9QCL: // global
           _s9PFY::P64 = R3;
           R3 = R4;
           R2 = _s9PFY::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowRecConError_$cshowsPrec_info" {
     Control.Exception.Base.$fShowRecConError_$cshowsPrec_info:
         const Control.Exception.Base.$fShowRecConError_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.030988126 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError1_closure" {
     Control.Exception.Base.$fExceptionRecConError1_closure:
         const Control.Exception.Base.$fExceptionRecConError1_info;
 },
 Control.Exception.Base.$fExceptionRecConError1_entry() //  [R2]
         { []
         }
     {offset
       c9QCW: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecConError1_info" {
     Control.Exception.Base.$fExceptionRecConError1_info:
         const Control.Exception.Base.$fExceptionRecConError1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.034340099 UTC

[section ""data" . Control.Exception.Base.$fShowRecConError_$cshowList_closure" {
     Control.Exception.Base.$fShowRecConError_$cshowList_closure:
         const Control.Exception.Base.$fShowRecConError_$cshowList_info;
 },
 Control.Exception.Base.$fShowRecConError_$cshowList_entry() //  [R2,
                                                                  R3]
         { []
         }
     {offset
       c9QD9: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowRecConError_$cshowList_info" {
     Control.Exception.Base.$fShowRecConError_$cshowList_info:
         const Control.Exception.Base.$fShowRecConError_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.037381087 UTC

[section ""data" . Control.Exception.Base.$fShowRecConError_closure" {
     Control.Exception.Base.$fShowRecConError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowRecConError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionRecConError1_closure+1;
         const Control.Exception.Base.$fShowRecConError_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.039328987 UTC

[section ""data" . Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_entry() //  [R3,
                                                                   R4]
         { []
         }
     {offset
       c9QDl: // global
           _s9PG3::P64 = R3;
           R3 = R4;
           R2 = _s9PG3::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_info" {
     Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_info:
         const Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.043225126 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError1_closure" {
     Control.Exception.Base.$fExceptionRecUpdError1_closure:
         const Control.Exception.Base.$fExceptionRecUpdError1_info;
 },
 Control.Exception.Base.$fExceptionRecUpdError1_entry() //  [R2]
         { []
         }
     {offset
       c9QDw: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecUpdError1_info" {
     Control.Exception.Base.$fExceptionRecUpdError1_info:
         const Control.Exception.Base.$fExceptionRecUpdError1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.046958039 UTC

[section ""data" . Control.Exception.Base.$fShowRecUpdError_$cshowList_closure" {
     Control.Exception.Base.$fShowRecUpdError_$cshowList_closure:
         const Control.Exception.Base.$fShowRecUpdError_$cshowList_info;
 },
 Control.Exception.Base.$fShowRecUpdError_$cshowList_entry() //  [R2,
                                                                  R3]
         { []
         }
     {offset
       c9QDJ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowRecUpdError_$cshowList_info" {
     Control.Exception.Base.$fShowRecUpdError_$cshowList_info:
         const Control.Exception.Base.$fShowRecUpdError_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.051833781 UTC

[section ""data" . Control.Exception.Base.$fShowRecUpdError_closure" {
     Control.Exception.Base.$fShowRecUpdError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionRecUpdError1_closure+1;
         const Control.Exception.Base.$fShowRecUpdError_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.054195813 UTC

[section ""data" . Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_entry() //  [R3,
                                                                     R4]
         { []
         }
     {offset
       c9QDV: // global
           _s9PG8::P64 = R3;
           R3 = R4;
           R2 = _s9PG8::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_info" {
     Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_info:
         const Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.057850063 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError1_closure" {
     Control.Exception.Base.$fExceptionNoMethodError1_closure:
         const Control.Exception.Base.$fExceptionNoMethodError1_info;
 },
 Control.Exception.Base.$fExceptionNoMethodError1_entry() //  [R2]
         { []
         }
     {offset
       c9QE6: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNoMethodError1_info" {
     Control.Exception.Base.$fExceptionNoMethodError1_info:
         const Control.Exception.Base.$fExceptionNoMethodError1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.062317033 UTC

[section ""data" . Control.Exception.Base.$fShowNoMethodError_$cshowList_closure" {
     Control.Exception.Base.$fShowNoMethodError_$cshowList_closure:
         const Control.Exception.Base.$fShowNoMethodError_$cshowList_info;
 },
 Control.Exception.Base.$fShowNoMethodError_$cshowList_entry() //  [R2,
                                                                    R3]
         { []
         }
     {offset
       c9QEj: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowNoMethodError_$cshowList_info" {
     Control.Exception.Base.$fShowNoMethodError_$cshowList_info:
         const Control.Exception.Base.$fShowNoMethodError_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.065996266 UTC

[section ""data" . Control.Exception.Base.$fShowNoMethodError_closure" {
     Control.Exception.Base.$fShowNoMethodError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionNoMethodError1_closure+1;
         const Control.Exception.Base.$fShowNoMethodError_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.068474174 UTC

[section ""data" . Control.Exception.Base.$fShowTypeError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowTypeError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowTypeError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowTypeError_$cshowsPrec_entry() //  [R3,
                                                                 R4]
         { []
         }
     {offset
       c9QEv: // global
           _s9PGd::P64 = R3;
           R3 = R4;
           R2 = _s9PGd::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowTypeError_$cshowsPrec_info" {
     Control.Exception.Base.$fShowTypeError_$cshowsPrec_info:
         const Control.Exception.Base.$fShowTypeError_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.072591428 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError1_closure" {
     Control.Exception.Base.$fExceptionTypeError1_closure:
         const Control.Exception.Base.$fExceptionTypeError1_info;
 },
 Control.Exception.Base.$fExceptionTypeError1_entry() //  [R2]
         { []
         }
     {offset
       c9QEG: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionTypeError1_info" {
     Control.Exception.Base.$fExceptionTypeError1_info:
         const Control.Exception.Base.$fExceptionTypeError1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.077121225 UTC

[section ""data" . Control.Exception.Base.$fShowTypeError_$cshowList_closure" {
     Control.Exception.Base.$fShowTypeError_$cshowList_closure:
         const Control.Exception.Base.$fShowTypeError_$cshowList_info;
 },
 Control.Exception.Base.$fShowTypeError_$cshowList_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       c9QET: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowTypeError_$cshowList_info" {
     Control.Exception.Base.$fShowTypeError_$cshowList_info:
         const Control.Exception.Base.$fShowTypeError_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.08097405 UTC

[section ""data" . Control.Exception.Base.$fShowTypeError_closure" {
     Control.Exception.Base.$fShowTypeError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowTypeError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionTypeError1_closure+1;
         const Control.Exception.Base.$fShowTypeError_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.083450549 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNonTermination2_bytes" {
     Control.Exception.Base.$fExceptionNonTermination2_bytes:
         I8[] [60,60,108,111,111,112,62,62]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.085813189 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination1_closure" {
     Control.Exception.Base.$fExceptionNonTermination1_closure:
         const Control.Exception.Base.$fExceptionNonTermination1_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination1_entry() //  [R1]
         { []
         }
     {offset
       c9QF8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QF9; else goto c9QFa;
       c9QF9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9QFa: // global
           (_c9QF5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9QF5::I64 == 0) goto c9QF7; else goto c9QF6;
       c9QF7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9QF6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9QF5::I64;
           R2 = Control.Exception.Base.$fExceptionNonTermination2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNonTermination1_info" {
     Control.Exception.Base.$fExceptionNonTermination1_info:
         const Control.Exception.Base.$fExceptionNonTermination1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.090115623 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_info;
         const 0;
 },
 Control.Exception.Base.$fShowNonTermination_$cshowsPrec_entry() //  [R2,
                                                                      R3, R4]
         { []
         }
     {offset
       c9QFp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QFq; else goto c9QFr;
       c9QFq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QFr: // global
           I64[Sp - 16] = block_c9QFm_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9QFv; else goto c9QFn;
       u9QFv: // global
           call _c9QFm() args: 0, res: 0, upd: 0;
       c9QFn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowNonTermination_$cshowsPrec_info" {
     Control.Exception.Base.$fShowNonTermination_$cshowsPrec_info:
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S9POL_srt;
 },
 _c9QFm() //  []
         { []
         }
     {offset
       c9QFm: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNonTermination1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QFm_info" {
     block_c9QFm_info:
         const _c9QFm;
         const 1;
         const 4294967326;
         const S9POL_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.095803167 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination_$cshow_closure" {
     Control.Exception.Base.$fExceptionNonTermination_$cshow_closure:
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c9QFM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9QFN; else goto c9QFO;
       c9QFN: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNonTermination_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QFO: // global
           I64[Sp - 8] = block_c9QFJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9QFS; else goto c9QFK;
       u9QFS: // global
           call _c9QFJ() args: 0, res: 0, upd: 0;
       c9QFK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNonTermination_$cshow_info" {
     Control.Exception.Base.$fExceptionNonTermination_$cshow_info:
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S9POL_srt;
 },
 _c9QFJ() //  []
         { []
         }
     {offset
       c9QFJ: // global
           R1 = Control.Exception.Base.$fExceptionNonTermination1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QFJ_info" {
     block_c9QFJ_info:
         const _c9QFJ;
         const 0;
         const 4294967326;
         const S9POL_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.101058509 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination1_closure" {
     Control.Exception.Base.$fShowNonTermination1_closure:
         const Control.Exception.Base.$fShowNonTermination1_info;
         const 0;
 },
 Control.Exception.Base.$fShowNonTermination1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9QGa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QGb; else goto c9QGc;
       c9QGb: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNonTermination1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QGc: // global
           I64[Sp - 16] = block_c9QG7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9QGg; else goto c9QG8;
       u9QGg: // global
           call _c9QG7() args: 0, res: 0, upd: 0;
       c9QG8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowNonTermination1_info" {
     Control.Exception.Base.$fShowNonTermination1_info:
         const Control.Exception.Base.$fShowNonTermination1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S9POL_srt;
 },
 _c9QG7() //  []
         { []
         }
     {offset
       c9QG7: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNonTermination1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QG7_info" {
     block_c9QG7_info:
         const _c9QG7;
         const 1;
         const 4294967326;
         const S9POL_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.106393829 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination_$cshowList_closure" {
     Control.Exception.Base.$fShowNonTermination_$cshowList_closure:
         const Control.Exception.Base.$fShowNonTermination_$cshowList_info;
         const 0;
 },
 Control.Exception.Base.$fShowNonTermination_$cshowList_entry() //  [R2,
                                                                     R3]
         { []
         }
     {offset
       c9QGu: // global
           R4 = R3;
           R3 = R2;
           R2 = Control.Exception.Base.$fShowNonTermination1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowNonTermination_$cshowList_info" {
     Control.Exception.Base.$fShowNonTermination_$cshowList_info:
         const Control.Exception.Base.$fShowNonTermination_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S9POL_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.110454823 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination_closure" {
     Control.Exception.Base.$fShowNonTermination_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_closure+1;
         const Control.Exception.Base.$fShowNonTermination_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.112183625 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNestedAtomically2_bytes" {
     Control.Exception.Base.$fExceptionNestedAtomically2_bytes:
         I8[] [67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,83,84,77,46,97,116,111,109,105,99,97,108,108,121,32,119,97,115,32,110,101,115,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.114750728 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically1_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically1_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically1_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically1_entry() //  [R1]
         { []
         }
     {offset
       c9QGJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QGK; else goto c9QGL;
       c9QGK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9QGL: // global
           (_c9QGG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9QGG::I64 == 0) goto c9QGI; else goto c9QGH;
       c9QGI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9QGH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9QGG::I64;
           R2 = Control.Exception.Base.$fExceptionNestedAtomically2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNestedAtomically1_info" {
     Control.Exception.Base.$fExceptionNestedAtomically1_info:
         const Control.Exception.Base.$fExceptionNestedAtomically1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.118950754 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_info;
         const 0;
 },
 Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_entry() //  [R2,
                                                                        R3, R4]
         { []
         }
     {offset
       c9QH0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QH1; else goto c9QH2;
       c9QH1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QH2: // global
           I64[Sp - 16] = block_c9QGX_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9QH6; else goto c9QGY;
       u9QH6: // global
           call _c9QGX() args: 0, res: 0, upd: 0;
       c9QGY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_info" {
     Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_info:
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S9POL_srt+32;
 },
 _c9QGX() //  []
         { []
         }
     {offset
       c9QGX: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNestedAtomically1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QGX_info" {
     block_c9QGX_info:
         const _c9QGX;
         const 1;
         const 4294967326;
         const S9POL_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.124201548 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c9QHn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9QHo; else goto c9QHp;
       c9QHo: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QHp: // global
           I64[Sp - 8] = block_c9QHk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9QHt; else goto c9QHl;
       u9QHt: // global
           call _c9QHk() args: 0, res: 0, upd: 0;
       c9QHl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNestedAtomically_$cshow_info" {
     Control.Exception.Base.$fExceptionNestedAtomically_$cshow_info:
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S9POL_srt+32;
 },
 _c9QHk() //  []
         { []
         }
     {offset
       c9QHk: // global
           R1 = Control.Exception.Base.$fExceptionNestedAtomically1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QHk_info" {
     block_c9QHk_info:
         const _c9QHk;
         const 0;
         const 4294967326;
         const S9POL_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.129654866 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically1_closure" {
     Control.Exception.Base.$fShowNestedAtomically1_closure:
         const Control.Exception.Base.$fShowNestedAtomically1_info;
         const 0;
 },
 Control.Exception.Base.$fShowNestedAtomically1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9QHL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QHM; else goto c9QHN;
       c9QHM: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNestedAtomically1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QHN: // global
           I64[Sp - 16] = block_c9QHI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9QHR; else goto c9QHJ;
       u9QHR: // global
           call _c9QHI() args: 0, res: 0, upd: 0;
       c9QHJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowNestedAtomically1_info" {
     Control.Exception.Base.$fShowNestedAtomically1_info:
         const Control.Exception.Base.$fShowNestedAtomically1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S9POL_srt+32;
 },
 _c9QHI() //  []
         { []
         }
     {offset
       c9QHI: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNestedAtomically1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QHI_info" {
     block_c9QHI_info:
         const _c9QHI;
         const 1;
         const 4294967326;
         const S9POL_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.134738974 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically_$cshowList_closure" {
     Control.Exception.Base.$fShowNestedAtomically_$cshowList_closure:
         const Control.Exception.Base.$fShowNestedAtomically_$cshowList_info;
         const 0;
 },
 Control.Exception.Base.$fShowNestedAtomically_$cshowList_entry() //  [R2,
                                                                       R3]
         { []
         }
     {offset
       c9QI5: // global
           R4 = R3;
           R3 = R2;
           R2 = Control.Exception.Base.$fShowNestedAtomically1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowNestedAtomically_$cshowList_info" {
     Control.Exception.Base.$fShowNestedAtomically_$cshowList_info:
         const Control.Exception.Base.$fShowNestedAtomically_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S9POL_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.137914679 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically_closure" {
     Control.Exception.Base.$fShowNestedAtomically_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure+1;
         const Control.Exception.Base.$fShowNestedAtomically_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.142008063 UTC

[section ""data" . Control.Exception.Base.catchJust1_closure" {
     Control.Exception.Base.catchJust1_closure:
         const Control.Exception.Base.catchJust1_info;
 },
 sat_s9PGK_entry() //  [R1]
         { []
         }
     {offset
       c9QIv: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PGK_info" {
     sat_s9PGK_info:
         const sat_s9PGK_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9PGO_entry() //  [R1, R2]
         { []
         }
     {offset
       c9QIC: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c9QID; else goto c9QIE;
       c9QID: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QIE: // global
           I64[Sp - 40] = block_c9QIm_info;
           _s9PGI::P64 = R2;
           _s9PGD::P64 = P64[R1 + 7];
           R2 = _s9PGD::P64;
           I64[Sp - 56] = stg_ap_p_info;
           P64[Sp - 48] = _s9PGI::P64;
           P64[Sp - 32] = _s9PGD::P64;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _s9PGI::P64;
           Sp = Sp - 56;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PGO_info" {
     sat_s9PGO_info:
         const sat_s9PGO_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c9QIm() //  [R1]
         { []
         }
     {offset
       c9QIm: // global
           if (R1 & 7 == 1) goto c9QIz; else goto c9QIA;
       c9QIz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QIH; else goto c9QIG;
       c9QIH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QIG: // global
           I64[Hp - 8] = sat_s9PGK_info;
           P64[Hp] = P64[Sp + 32];
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9QIA: // global
           I64[Sp] = block_c9QIK_info;
           _s9PGL::P64 = P64[R1 + 6];
           R2 = _s9PGL::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 32] = _s9PGL::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QIm_info" {
     block_c9QIm_info:
         const _c9QIm;
         const 4;
         const 30;
 },
 _c9QIK() //  [R1]
         { []
         }
     {offset
       c9QIK: // global
           if (R1 & 7 == 1) goto c9QIR; else goto c9QIV;
       c9QIR: // global
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = GHC.IO.throwIO1_closure+3;
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QIV: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QIK_info" {
     block_c9QIK_info:
         const _c9QIK;
         const 132;
         const 30;
 },
 Control.Exception.Base.catchJust1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c9QIX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QJ1; else goto c9QJ0;
       c9QJ1: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.catchJust1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QJ0: // global
           I64[Hp - 24] = sat_s9PGO_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R5;
           R2 = Hp - 23;
           R1 = R4;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.catchJust1_info" {
     Control.Exception.Base.catchJust1_info:
         const Control.Exception.Base.catchJust1_entry;
         const 0;
         const 14;
         const 21474836504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.153918975 UTC

[section ""data" . Control.Exception.Base.catchJust_closure" {
     Control.Exception.Base.catchJust_closure:
         const Control.Exception.Base.catchJust_info;
 },
 Control.Exception.Base.catchJust_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c9QJv: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.catchJust1_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.catchJust_info" {
     Control.Exception.Base.catchJust_info:
         const Control.Exception.Base.catchJust_entry;
         const 0;
         const 14;
         const 21474836504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.157273361 UTC

[section ""data" . Control.Exception.Base.handleJust1_closure" {
     Control.Exception.Base.handleJust1_closure:
         const Control.Exception.Base.handleJust1_info;
 },
 Control.Exception.Base.handleJust1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c9QJG: // global
           _s9PGS::P64 = R5;
           R5 = R4;
           R4 = _s9PGS::P64;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.catchJust1_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.handleJust1_info" {
     Control.Exception.Base.handleJust1_info:
         const Control.Exception.Base.handleJust1_entry;
         const 0;
         const 14;
         const 21474836504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.160668019 UTC

[section ""data" . Control.Exception.Base.handleJust_closure" {
     Control.Exception.Base.handleJust_closure:
         const Control.Exception.Base.handleJust_info;
 },
 Control.Exception.Base.handleJust_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c9QJR: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.handleJust1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.handleJust_info" {
     Control.Exception.Base.handleJust_info:
         const Control.Exception.Base.handleJust_entry;
         const 0;
         const 14;
         const 21474836504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.164322745 UTC

[section ""data" . Control.Exception.Base.handle1_closure" {
     Control.Exception.Base.handle1_closure:
         const Control.Exception.Base.handle1_info;
 },
 Control.Exception.Base.handle1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9QK2: // global
           _s9PGW::P64 = R4;
           R4 = R3;
           R3 = _s9PGW::P64;
           R2 = R2;
           call GHC.IO.catch1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.handle1_info" {
     Control.Exception.Base.handle1_info:
         const Control.Exception.Base.handle1_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.167636542 UTC

[section ""data" . Control.Exception.Base.handle_closure" {
     Control.Exception.Base.handle_closure:
         const Control.Exception.Base.handle_info;
 },
 Control.Exception.Base.handle_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9QKd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.handle1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.handle_info" {
     Control.Exception.Base.handle_info:
         const Control.Exception.Base.handle_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.171719235 UTC

[section ""data" . Control.Exception.Base.mapException1_closure" {
     Control.Exception.Base.mapException1_closure:
         const Control.Exception.Base.mapException1_info;
 },
 sat_s9PH3_entry() //  [R1]
         { []
         }
     {offset
       c9QKt: // global
           _s9PH3::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c9QKu; else goto c9QKv;
       c9QKv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QKx; else goto c9QKw;
       c9QKx: // global
           HpAlloc = 32;
           goto c9QKu;
       c9QKu: // global
           R1 = _s9PH3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9QKw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9PH3::P64;
           _s9PGY::P64 = P64[_s9PH3::P64 + 16];
           _s9PGZ::P64 = P64[_s9PH3::P64 + 24];
           _s9PH0::P64 = P64[_s9PH3::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s9PGY::P64;
           P64[Hp] = _s9PGZ::P64;
           R2 = _s9PH0::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Exception.toException_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9PH3_info" {
     sat_s9PH3_info:
         const sat_s9PH3_entry;
         const 3;
         const 15;
 },
 Control.Exception.Base.mapException1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9QKy: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9QKC; else goto c9QKB;
       c9QKC: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.mapException1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QKB: // global
           I64[Hp - 32] = sat_s9PH3_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 32;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.mapException1_info" {
     Control.Exception.Base.mapException1_info:
         const Control.Exception.Base.mapException1_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.180372389 UTC

[section ""data" . Control.Exception.Base.mapException_closure" {
     Control.Exception.Base.mapException_closure:
         const Control.Exception.Base.mapException_info;
 },
 sat_s9PHd_entry() //  [R1]
         { []
         }
     {offset
       c9QL6: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PHd_info" {
     sat_s9PHd_info:
         const sat_s9PHd_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9PHg_entry() //  [R1, R2]
         { []
         }
     {offset
       c9QLd: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c9QLe; else goto c9QLf;
       c9QLe: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QLf: // global
           I64[Sp - 32] = block_c9QKX_info;
           _s9PHb::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = _s9PHb::P64;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _s9PHb::P64;
           Sp = Sp - 48;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PHg_info" {
     sat_s9PHg_info:
         const sat_s9PHg_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c9QKX() //  [R1]
         { []
         }
     {offset
       c9QKX: // global
           if (R1 & 7 == 1) goto c9QLa; else goto c9QLb;
       c9QLa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QLi; else goto c9QLh;
       c9QLi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QLh: // global
           I64[Hp - 8] = sat_s9PHd_info;
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9QLb: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = Control.Exception.Base.mapException1_closure+4;
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QKX_info" {
     block_c9QKX_info:
         const _c9QKX;
         const 3;
         const 30;
 },
 sat_s9PHa_entry() //  [R1]
         { []
         }
     {offset
       c9QLr: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PHa_info" {
     sat_s9PHa_info:
         const sat_s9PHa_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 Control.Exception.Base.mapException_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c9QLw: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c9QLx; else goto c9QLy;
       c9QLx: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.mapException_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QLy: // global
           I64[Sp - 40] = block_c9QKQ_info;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.mapException_info" {
     Control.Exception.Base.mapException_info:
         const Control.Exception.Base.mapException_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c9QKQ() //  []
         { []
         }
     {offset
       c9QKQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9QLB; else goto c9QLA;
       c9QLB: // global
           HpAlloc = 48;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c9QLA: // global
           I64[Hp - 40] = sat_s9PHg_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           I64[Hp - 8] = sat_s9PHa_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_c9QLu_info;
           R2 = Hp - 39;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QKQ_info" {
     block_c9QKQ_info:
         const _c9QKQ;
         const 4;
         const 30;
 },
 _c9QLu() //  [R1]
         { []
         }
     {offset
       c9QLu: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QLu_info" {
     block_c9QLu_info:
         const _c9QLu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.195070696 UTC

[section ""data" . Control.Exception.Base.try1_closure" {
     Control.Exception.Base.try1_closure:
         const Control.Exception.Base.try1_info;
 },
 sat_s9PHy_entry() //  [R1, R2]
         { []
         }
     {offset
       c9QMq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9QMr; else goto c9QMs;
       c9QMr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QMs: // global
           I64[Sp - 16] = block_c9QMk_info;
           _s9PHt::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = _s9PHt::P64;
           P64[Sp - 8] = _s9PHt::P64;
           Sp = Sp - 32;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PHy_info" {
     sat_s9PHy_info:
         const sat_s9PHy_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c9QMk() //  [R1]
         { []
         }
     {offset
       c9QMk: // global
           if (R1 & 7 == 1) goto c9QMn; else goto c9QMo;
       c9QMn: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c9QMo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QMB; else goto c9QMA;
       c9QMB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QMA: // global
           _s9PHw::P64 = P64[R1 + 6];
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = _s9PHw::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QMk_info" {
     block_c9QMk_info:
         const _c9QMk;
         const 1;
         const 30;
 },
 sat_s9PHs_entry() //  [R1]
         { []
         }
     {offset
       c9QMK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9QML; else goto c9QMM;
       c9QML: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9QMM: // global
           I64[Sp - 8] = block_c9QMH_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PHs_info" {
     sat_s9PHs_info:
         const sat_s9PHs_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _c9QMH() //  [R1]
         { []
         }
     {offset
       c9QMH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QMP; else goto c9QMO;
       c9QMP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QMO: // global
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QMH_info" {
     block_c9QMH_info:
         const _c9QMH;
         const 0;
         const 30;
 },
 Control.Exception.Base.try1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9QMQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QMU; else goto c9QMT;
       c9QMU: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.try1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QMT: // global
           I64[Hp - 24] = sat_s9PHy_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s9PHs_info;
           P64[Hp] = R3;
           R2 = Hp - 22;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.try1_info" {
     Control.Exception.Base.try1_info:
         const Control.Exception.Base.try1_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.205027692 UTC

[section ""data" . Control.Exception.Base.try_closure" {
     Control.Exception.Base.try_closure:
         const Control.Exception.Base.try_info;
 },
 Control.Exception.Base.try_entry() //  [R2, R3]
         { []
         }
     {offset
       c9QNl: // global
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.try1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.try_info" {
     Control.Exception.Base.try_info:
         const Control.Exception.Base.try_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.209969237 UTC

[section ""data" . Control.Exception.Base.tryJust1_closure" {
     Control.Exception.Base.tryJust1_closure:
         const Control.Exception.Base.tryJust1_info;
 },
 Control.Exception.Base.tryJust1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9QNF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9QNG; else goto c9QNH;
       c9QNG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.tryJust1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QNH: // global
           I64[Sp - 24] = block_c9QNw_info;
           _s9PHA::P64 = R3;
           R3 = R4;
           _s9PHz::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s9PHz::P64;
           P64[Sp - 8] = _s9PHA::P64;
           Sp = Sp - 24;
           call Control.Exception.Base.try1_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.tryJust1_info" {
     Control.Exception.Base.tryJust1_info:
         const Control.Exception.Base.tryJust1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c9QNw() //  [R1]
         { []
         }
     {offset
       c9QNw: // global
           I64[Sp - 8] = block_c9QNy_info;
           _s9PHF::P64 = R1;
           R1 = R1;
           P64[Sp] = _s9PHF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9QO4; else goto c9QNz;
       u9QO4: // global
           call _c9QNy(R1) args: 0, res: 0, upd: 0;
       c9QNz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QNw_info" {
     block_c9QNw_info:
         const _c9QNw;
         const 2;
         const 30;
 },
 _c9QNy() //  [R1]
         { []
         }
     {offset
       c9QNy: // global
           if (R1 & 7 == 1) goto c9QNC; else goto c9QND;
       c9QNC: // global
           I64[Sp + 8] = block_c9QNL_info;
           _s9PHH::P64 = P64[R1 + 7];
           R2 = _s9PHH::P64;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s9PHH::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c9QND: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QNy_info" {
     block_c9QNy_info:
         const _c9QNy;
         const 3;
         const 30;
 },
 _c9QNL() //  [R1]
         { []
         }
     {offset
       c9QNL: // global
           if (R1 & 7 == 1) goto c9QNS; else goto c9QNW;
       c9QNS: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.throwIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9QNW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QNZ; else goto c9QNY;
       c9QNZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QNY: // global
           _s9PHJ::P64 = P64[R1 + 6];
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = _s9PHJ::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QNL_info" {
     block_c9QNL_info:
         const _c9QNL;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.219853888 UTC

[section ""data" . Control.Exception.Base.tryJust_closure" {
     Control.Exception.Base.tryJust_closure:
         const Control.Exception.Base.tryJust_info;
 },
 Control.Exception.Base.tryJust_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9QOu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.tryJust1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.tryJust_info" {
     Control.Exception.Base.tryJust_info:
         const Control.Exception.Base.tryJust_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.224234653 UTC

[section ""data" . Control.Exception.Base.onException1_closure" {
     Control.Exception.Base.onException1_closure:
         const Control.Exception.Base.onException1_info;
 },
 sat_s9PHV_entry() //  [R1, R2]
         { []
         }
     {offset
       c9QOM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QON; else goto c9QOO;
       c9QON: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QOO: // global
           I64[Sp - 16] = block_c9QOK_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PHV_info" {
     sat_s9PHV_info:
         const sat_s9PHV_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c9QOK() //  []
         { []
         }
     {offset
       c9QOK: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QOK_info" {
     block_c9QOK_info:
         const _c9QOK;
         const 1;
         const 30;
 },
 Control.Exception.Base.onException1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9QOQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QOU; else goto c9QOT;
       c9QOU: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.onException1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QOT: // global
           I64[Hp - 8] = sat_s9PHV_info;
           P64[Hp] = R3;
           _s9PHN::P64 = R2;
           R2 = Hp - 6;
           R1 = _s9PHN::P64;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.onException1_info" {
     Control.Exception.Base.onException1_info:
         const Control.Exception.Base.onException1_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.230633188 UTC

[section ""data" . Control.Exception.Base.onException_closure" {
     Control.Exception.Base.onException_closure:
         const Control.Exception.Base.onException_info;
 },
 Control.Exception.Base.onException_entry() //  [R2, R3]
         { []
         }
     {offset
       c9QPa: // global
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.onException1_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.onException_info" {
     Control.Exception.Base.onException_info:
         const Control.Exception.Base.onException_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.239892275 UTC

[section ""data" . Control.Exception.Base.bracket1_closure" {
     Control.Exception.Base.bracket1_closure:
         const Control.Exception.Base.bracket1_info;
 },
 sat_s9PIe_entry() //  [R1, R2]
         { []
         }
     {offset
       c9QPy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QPz; else goto c9QPA;
       c9QPz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QPA: // global
           I64[Sp - 16] = block_c9QPw_info;
           _s9PI9::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PI9::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PIe_info" {
     sat_s9PIe_info:
         const sat_s9PIe_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c9QPw() //  []
         { []
         }
     {offset
       c9QPw: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QPw_info" {
     block_c9QPw_info:
         const _c9QPw;
         const 1;
         const 30;
 },
 sat_s9PI8_entry() //  [R1]
         { []
         }
     {offset
       c9QPI: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PI8_info" {
     sat_s9PI8_info:
         const sat_s9PI8_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9PIw_entry() //  [R1, R2]
         { []
         }
     {offset
       c9QQ0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QQ1; else goto c9QQ2;
       c9QQ1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QQ2: // global
           I64[Sp - 16] = block_c9QPY_info;
           _s9PIr::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PIr::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PIw_info" {
     sat_s9PIw_info:
         const sat_s9PIw_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c9QPY() //  []
         { []
         }
     {offset
       c9QPY: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QPY_info" {
     block_c9QPY_info:
         const _c9QPY;
         const 1;
         const 30;
 },
 sat_s9PIq_entry() //  [R1]
         { []
         }
     {offset
       c9QQa: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PIq_info" {
     sat_s9PIq_info:
         const sat_s9PIq_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9PID_entry() //  [R1]
         { []
         }
     {offset
       c9QQh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9QQi; else goto c9QQj;
       c9QQi: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9QQj: // global
           I64[Sp - 24] = block_c9QPR_info;
           _s9PHX::P64 = P64[R1 + 15];
           _s9PHY::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9PHX::P64;
           P64[Sp - 8] = _s9PHY::P64;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PID_info" {
     sat_s9PID_info:
         const sat_s9PID_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _c9QPR() //  [R1]
         { []
         }
     {offset
       c9QPR: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9QQm; else goto c9QQl;
       c9QQm: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QQl: // global
           I64[Hp - 64] = sat_s9PIw_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PIq_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9QQd_info;
           R2 = Hp - 62;
           _s9PIo::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9PIo::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QPR_info" {
     block_c9QPR_info:
         const _c9QPR;
         const 2;
         const 30;
 },
 _c9QQd() //  [R1]
         { []
         }
     {offset
       c9QQd: // global
           _s9PHX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9QQf_info;
           R2 = P64[Sp + 16];
           _s9PIz::P64 = R1;
           R1 = _s9PHX::P64;
           P64[Sp + 16] = _s9PIz::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QQd_info" {
     block_c9QQd_info:
         const _c9QQd;
         const 2;
         const 30;
 },
 _c9QQf() //  []
         { []
         }
     {offset
       c9QQf: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QQf_info" {
     block_c9QQf_info:
         const _c9QQf;
         const 1;
         const 30;
 },
 sat_s9PIO_entry() //  [R1, R2]
         { []
         }
     {offset
       c9QQz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QQA; else goto c9QQB;
       c9QQA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QQB: // global
           I64[Sp - 16] = block_c9QQx_info;
           _s9PIJ::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PIJ::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PIO_info" {
     sat_s9PIO_info:
         const sat_s9PIO_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c9QQx() //  []
         { []
         }
     {offset
       c9QQx: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QQx_info" {
     block_c9QQx_info:
         const _c9QQx;
         const 1;
         const 30;
 },
 sat_s9PII_entry() //  [R1]
         { []
         }
     {offset
       c9QQJ: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PII_info" {
     sat_s9PII_info:
         const sat_s9PII_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 Control.Exception.Base.bracket1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9QQQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9QQR; else goto c9QQS;
       c9QQR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.bracket1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QQS: // global
           I64[Sp - 32] = block_c9QPl_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.bracket1_info" {
     Control.Exception.Base.bracket1_info:
         const Control.Exception.Base.bracket1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c9QPl() //  [R1]
         { []
         }
     {offset
       c9QPl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QQV; else goto c9QQU;
       c9QQV: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9QQU: // global
           _s9PHW::P64 = P64[Sp + 8];
           if (R1 == 0) goto c9QQO; else goto u9QRe;
       c9QQO: // global
           I64[Hp - 24] = sat_s9PID_info;
           P64[Hp - 16] = _s9PHW::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9QRe: // global
           if (R1 == 1) goto c9QQP; else goto c9QQN;
       c9QQP: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9QQq_info;
           R1 = _s9PHW::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c9QQN: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9QPp_info;
           R1 = _s9PHW::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QPl_info" {
     block_c9QPl_info:
         const _c9QPl;
         const 3;
         const 30;
 },
 _c9QQq() //  [R1]
         { []
         }
     {offset
       c9QQq: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9QRa; else goto c9QR9;
       c9QRa: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QR9: // global
           I64[Hp - 64] = sat_s9PIO_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PII_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9QR5_info;
           R2 = Hp - 62;
           _s9PIG::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9PIG::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QQq_info" {
     block_c9QQq_info:
         const _c9QQq;
         const 2;
         const 30;
 },
 _c9QR5() //  [R1]
         { []
         }
     {offset
       c9QR5: // global
           _s9PHX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9QR7_info;
           R2 = P64[Sp + 16];
           _s9PIR::P64 = R1;
           R1 = _s9PHX::P64;
           P64[Sp + 16] = _s9PIR::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QR5_info" {
     block_c9QR5_info:
         const _c9QR5;
         const 2;
         const 30;
 },
 _c9QR7() //  []
         { []
         }
     {offset
       c9QR7: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QR7_info" {
     block_c9QR7_info:
         const _c9QR7;
         const 1;
         const 30;
 },
 _c9QPp() //  [R1]
         { []
         }
     {offset
       c9QPp: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9QR1; else goto c9QR0;
       c9QR1: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QR0: // global
           I64[Hp - 64] = sat_s9PIe_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PI8_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9QQW_info;
           R2 = Hp - 62;
           _s9PI6::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9PI6::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QPp_info" {
     block_c9QPp_info:
         const _c9QPp;
         const 2;
         const 30;
 },
 _c9QQW() //  [R1]
         { []
         }
     {offset
       c9QQW: // global
           _s9PHX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9QQY_info;
           R2 = P64[Sp + 16];
           _s9PIh::P64 = R1;
           R1 = _s9PHX::P64;
           P64[Sp + 16] = _s9PIh::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QQW_info" {
     block_c9QQW_info:
         const _c9QQW;
         const 2;
         const 30;
 },
 _c9QQY() //  []
         { []
         }
     {offset
       c9QQY: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QQY_info" {
     block_c9QQY_info:
         const _c9QQY;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.274896077 UTC

[section ""data" . Control.Exception.Base.bracket_closure" {
     Control.Exception.Base.bracket_closure:
         const Control.Exception.Base.bracket_info;
 },
 Control.Exception.Base.bracket_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9QSE: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.bracket1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.bracket_info" {
     Control.Exception.Base.bracket_info:
         const Control.Exception.Base.bracket_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.279034362 UTC

[section ""data" . Control.Exception.Base.bracket_1_closure" {
     Control.Exception.Base.bracket_1_closure:
         const Control.Exception.Base.bracket_1_info;
 },
 sat_s9PJ2_entry() //  [R1]
         { []
         }
     {offset
       c9QSU: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PJ2_info" {
     sat_s9PJ2_info:
         const sat_s9PJ2_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s9PJ0_entry() //  [R1]
         { []
         }
     {offset
       c9QT2: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PJ0_info" {
     sat_s9PJ0_info:
         const sat_s9PJ0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Control.Exception.Base.bracket_1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9QT5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QT9; else goto c9QT8;
       c9QT9: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.bracket_1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QT8: // global
           I64[Hp - 24] = sat_s9PJ2_info;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s9PJ0_info;
           P64[Hp] = R3;
           R4 = Hp - 23;
           R3 = Hp - 7;
           R2 = R2;
           call Control.Exception.Base.bracket1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.bracket_1_info" {
     Control.Exception.Base.bracket_1_info:
         const Control.Exception.Base.bracket_1_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.285711299 UTC

[section ""data" . Control.Exception.Base.bracket__closure" {
     Control.Exception.Base.bracket__closure:
         const Control.Exception.Base.bracket__info;
 },
 Control.Exception.Base.bracket__entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9QTo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.bracket_1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.bracket__info" {
     Control.Exception.Base.bracket__info:
         const Control.Exception.Base.bracket__entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.294397313 UTC

[section ""data" . Control.Exception.Base.finally1_closure" {
     Control.Exception.Base.finally1_closure:
         const Control.Exception.Base.finally1_info;
 },
 sat_s9PJg_entry() //  [R1, R2]
         { []
         }
     {offset
       c9QTK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QTL; else goto c9QTM;
       c9QTL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QTM: // global
           I64[Sp - 16] = block_c9QTI_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PJg_info" {
     sat_s9PJg_info:
         const sat_s9PJg_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c9QTI() //  []
         { []
         }
     {offset
       c9QTI: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QTI_info" {
     block_c9QTI_info:
         const _c9QTI;
         const 1;
         const 30;
 },
 sat_s9PJa_entry() //  [R1]
         { []
         }
     {offset
       c9QTT: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PJa_info" {
     sat_s9PJa_info:
         const sat_s9PJa_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9PJu_entry() //  [R1, R2]
         { []
         }
     {offset
       c9QU9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QUa; else goto c9QUb;
       c9QUa: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QUb: // global
           I64[Sp - 16] = block_c9QU7_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PJu_info" {
     sat_s9PJu_info:
         const sat_s9PJu_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c9QU7() //  []
         { []
         }
     {offset
       c9QU7: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QU7_info" {
     block_c9QU7_info:
         const _c9QU7;
         const 1;
         const 30;
 },
 sat_s9PJo_entry() //  [R1]
         { []
         }
     {offset
       c9QUi: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PJo_info" {
     sat_s9PJo_info:
         const sat_s9PJo_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9PJB_entry() //  [R1]
         { []
         }
     {offset
       c9QUp: // global
           _s9PJB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9QUq; else goto c9QUr;
       c9QUr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QUt; else goto c9QUs;
       c9QUt: // global
           HpAlloc = 32;
           goto c9QUq;
       c9QUq: // global
           R1 = _s9PJB::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9QUs: // global
           _s9PJ3::P64 = P64[_s9PJB::P64 + 7];
           _s9PJ4::P64 = P64[_s9PJB::P64 + 15];
           I64[Hp - 24] = sat_s9PJu_info;
           P64[Hp - 16] = _s9PJ4::P64;
           I64[Hp - 8] = sat_s9PJo_info;
           P64[Hp] = _s9PJ3::P64;
           I64[Sp - 16] = block_c9QUl_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           P64[Sp - 8] = _s9PJ4::P64;
           Sp = Sp - 16;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PJB_info" {
     sat_s9PJB_info:
         const sat_s9PJB_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _c9QUl() //  [R1]
         { []
         }
     {offset
       c9QUl: // global
           I64[Sp] = block_c9QUn_info;
           _s9PJx::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9PJx::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QUl_info" {
     block_c9QUl_info:
         const _c9QUl;
         const 1;
         const 30;
 },
 _c9QUn() //  []
         { []
         }
     {offset
       c9QUn: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QUn_info" {
     block_c9QUn_info:
         const _c9QUn;
         const 1;
         const 30;
 },
 sat_s9PJI_entry() //  [R1, R2]
         { []
         }
     {offset
       c9QUE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QUF; else goto c9QUG;
       c9QUF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QUG: // global
           I64[Sp - 16] = block_c9QUC_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PJI_info" {
     sat_s9PJI_info:
         const sat_s9PJI_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c9QUC() //  []
         { []
         }
     {offset
       c9QUC: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QUC_info" {
     block_c9QUC_info:
         const _c9QUC;
         const 1;
         const 30;
 },
 sat_s9PJC_entry() //  [R1]
         { []
         }
     {offset
       c9QUN: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PJC_info" {
     sat_s9PJC_info:
         const sat_s9PJC_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 Control.Exception.Base.finally1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9QUU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9QUV; else goto c9QUW;
       c9QUV: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.finally1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QUW: // global
           I64[Sp - 24] = block_c9QTz_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.finally1_info" {
     Control.Exception.Base.finally1_info:
         const Control.Exception.Base.finally1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9QTz() //  [R1]
         { []
         }
     {offset
       c9QTz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QUZ; else goto c9QUY;
       c9QUZ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9QUY: // global
           _s9PJ3::P64 = P64[Sp + 8];
           _s9PJ4::P64 = P64[Sp + 16];
           if (R1 == 0) goto c9QUS; else goto u9QVc;
       c9QUS: // global
           I64[Hp - 24] = sat_s9PJB_info;
           P64[Hp - 16] = _s9PJ3::P64;
           P64[Hp - 8] = _s9PJ4::P64;
           _c9QTX::P64 = Hp - 23;
           Hp = Hp - 8;
           R1 = _c9QTX::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9QVc: // global
           if (R1 == 1) goto c9QUT; else goto c9QUR;
       c9QUT: // global
           I64[Hp - 24] = sat_s9PJI_info;
           P64[Hp - 16] = _s9PJ4::P64;
           I64[Hp - 8] = sat_s9PJC_info;
           P64[Hp] = _s9PJ3::P64;
           I64[Sp + 8] = block_c9QV6_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
       c9QUR: // global
           I64[Hp - 24] = sat_s9PJg_info;
           P64[Hp - 16] = _s9PJ4::P64;
           I64[Hp - 8] = sat_s9PJa_info;
           P64[Hp] = _s9PJ3::P64;
           I64[Sp + 8] = block_c9QV0_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QTz_info" {
     block_c9QTz_info:
         const _c9QTz;
         const 2;
         const 30;
 },
 _c9QV6() //  [R1]
         { []
         }
     {offset
       c9QV6: // global
           I64[Sp] = block_c9QV8_info;
           _s9PJL::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9PJL::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QV6_info" {
     block_c9QV6_info:
         const _c9QV6;
         const 1;
         const 30;
 },
 _c9QV8() //  []
         { []
         }
     {offset
       c9QV8: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QV8_info" {
     block_c9QV8_info:
         const _c9QV8;
         const 1;
         const 30;
 },
 _c9QV0() //  [R1]
         { []
         }
     {offset
       c9QV0: // global
           I64[Sp] = block_c9QV2_info;
           _s9PJj::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9PJj::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QV0_info" {
     block_c9QV0_info:
         const _c9QV0;
         const 1;
         const 30;
 },
 _c9QV2() //  []
         { []
         }
     {offset
       c9QV2: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QV2_info" {
     block_c9QV2_info:
         const _c9QV2;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.322695447 UTC

[section ""data" . Control.Exception.Base.finally_closure" {
     Control.Exception.Base.finally_closure:
         const Control.Exception.Base.finally_info;
 },
 Control.Exception.Base.finally_entry() //  [R2, R3]
         { []
         }
     {offset
       c9QWi: // global
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.finally1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.finally_info" {
     Control.Exception.Base.finally_info:
         const Control.Exception.Base.finally_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.331801601 UTC

[section ""data" . Control.Exception.Base.bracketOnError1_closure" {
     Control.Exception.Base.bracketOnError1_closure:
         const Control.Exception.Base.bracketOnError1_info;
 },
 sat_s9PK7_entry() //  [R1, R2]
         { []
         }
     {offset
       c9QWG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QWH; else goto c9QWI;
       c9QWH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QWI: // global
           I64[Sp - 16] = block_c9QWE_info;
           _s9PK2::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PK2::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PK7_info" {
     sat_s9PK7_info:
         const sat_s9PK7_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c9QWE() //  []
         { []
         }
     {offset
       c9QWE: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QWE_info" {
     block_c9QWE_info:
         const _c9QWE;
         const 1;
         const 30;
 },
 sat_s9PK1_entry() //  [R1]
         { []
         }
     {offset
       c9QWQ: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PK1_info" {
     sat_s9PK1_info:
         const sat_s9PK1_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9PKj_entry() //  [R1, R2]
         { []
         }
     {offset
       c9QX8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QX9; else goto c9QXa;
       c9QX9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QXa: // global
           I64[Sp - 16] = block_c9QX6_info;
           _s9PKe::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PKe::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PKj_info" {
     sat_s9PKj_info:
         const sat_s9PKj_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c9QX6() //  []
         { []
         }
     {offset
       c9QX6: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QX6_info" {
     block_c9QX6_info:
         const _c9QX6;
         const 1;
         const 30;
 },
 sat_s9PKd_entry() //  [R1]
         { []
         }
     {offset
       c9QXi: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PKd_info" {
     sat_s9PKd_info:
         const sat_s9PKd_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9PKk_entry() //  [R1]
         { []
         }
     {offset
       c9QXl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9QXm; else goto c9QXn;
       c9QXm: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9QXn: // global
           I64[Sp - 24] = block_c9QWZ_info;
           _s9PJQ::P64 = P64[R1 + 15];
           _s9PJR::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9PJQ::P64;
           P64[Sp - 8] = _s9PJR::P64;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PKk_info" {
     sat_s9PKk_info:
         const sat_s9PKk_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _c9QWZ() //  [R1]
         { []
         }
     {offset
       c9QWZ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9QXq; else goto c9QXp;
       c9QXq: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QXp: // global
           I64[Hp - 64] = sat_s9PKj_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PKd_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 62;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QWZ_info" {
     block_c9QWZ_info:
         const _c9QWZ;
         const 2;
         const 30;
 },
 sat_s9PKv_entry() //  [R1, R2]
         { []
         }
     {offset
       c9QXB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QXC; else goto c9QXD;
       c9QXC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QXD: // global
           I64[Sp - 16] = block_c9QXz_info;
           _s9PKq::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PKq::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PKv_info" {
     sat_s9PKv_info:
         const sat_s9PKv_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c9QXz() //  []
         { []
         }
     {offset
       c9QXz: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QXz_info" {
     block_c9QXz_info:
         const _c9QXz;
         const 1;
         const 30;
 },
 sat_s9PKp_entry() //  [R1]
         { []
         }
     {offset
       c9QXL: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9PKp_info" {
     sat_s9PKp_info:
         const sat_s9PKp_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 Control.Exception.Base.bracketOnError1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9QXS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9QXT; else goto c9QXU;
       c9QXT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.bracketOnError1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QXU: // global
           I64[Sp - 32] = block_c9QWt_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.bracketOnError1_info" {
     Control.Exception.Base.bracketOnError1_info:
         const Control.Exception.Base.bracketOnError1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c9QWt() //  [R1]
         { []
         }
     {offset
       c9QWt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QXX; else goto c9QXW;
       c9QXX: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9QXW: // global
           _s9PJP::P64 = P64[Sp + 8];
           if (R1 == 0) goto c9QXQ; else goto u9QY4;
       c9QXQ: // global
           I64[Hp - 24] = sat_s9PKk_info;
           P64[Hp - 16] = _s9PJP::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9QY4: // global
           if (R1 == 1) goto c9QXR; else goto c9QXP;
       c9QXR: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9QXs_info;
           R1 = _s9PJP::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c9QXP: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9QWx_info;
           R1 = _s9PJP::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QWt_info" {
     block_c9QWt_info:
         const _c9QWt;
         const 3;
         const 30;
 },
 _c9QXs() //  [R1]
         { []
         }
     {offset
       c9QXs: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9QY3; else goto c9QY2;
       c9QY3: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QY2: // global
           I64[Hp - 64] = sat_s9PKv_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PKp_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 62;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QXs_info" {
     block_c9QXs_info:
         const _c9QXs;
         const 2;
         const 30;
 },
 _c9QWx() //  [R1]
         { []
         }
     {offset
       c9QWx: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9QY0; else goto c9QXZ;
       c9QY0: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QXZ: // global
           I64[Hp - 64] = sat_s9PK7_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PK1_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 62;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QWx_info" {
     block_c9QWx_info:
         const _c9QWx;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.357098053 UTC

[section ""data" . Control.Exception.Base.bracketOnError_closure" {
     Control.Exception.Base.bracketOnError_closure:
         const Control.Exception.Base.bracketOnError_info;
 },
 Control.Exception.Base.bracketOnError_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9QZ9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.bracketOnError1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.bracketOnError_info" {
     Control.Exception.Base.bracketOnError_info:
         const Control.Exception.Base.bracketOnError_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.360730647 UTC

[section ""data" . Control.Exception.Base.runtimeError_closure" {
     Control.Exception.Base.runtimeError_closure:
         const Control.Exception.Base.runtimeError_info;
         const 0;
 },
 Control.Exception.Base.runtimeError_entry() //  [R2]
         { []
         }
     {offset
       c9QZm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9QZn; else goto c9QZo;
       c9QZn: // global
           R2 = R2;
           R1 = Control.Exception.Base.runtimeError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QZo: // global
           I64[Sp - 8] = block_c9QZk_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.runtimeError_info" {
     Control.Exception.Base.runtimeError_info:
         const Control.Exception.Base.runtimeError_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const S9POL_srt+64;
 },
 _c9QZk() //  [R1]
         { []
         }
     {offset
       c9QZk: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QZk_info" {
     block_c9QZk_info:
         const _c9QZk;
         const 0;
         const 4294967326;
         const S9POL_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.368131565 UTC

[section ""cstring" . lvl_r9PFt_bytes" {
     lvl_r9PFt_bytes:
         I8[] [79,111,112,115,33,32,32,69,110,116,101,114,101,100,32,97,98,115,101,110,116,32,97,114,103,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.372389709 UTC

[section ""data" . Control.Exception.Base.absentError_closure" {
     Control.Exception.Base.absentError_closure:
         const Control.Exception.Base.absentError_info;
         const 0;
 },
 sat_s9PKz_entry() //  [R1]
         { []
         }
     {offset
       c9QZJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QZK; else goto c9QZL;
       c9QZK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9QZL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9PKz_info" {
     sat_s9PKz_info:
         const sat_s9PKz_entry;
         const 4294967296;
         const 17;
 },
 Control.Exception.Base.absentError_entry() //  [R2]
         { []
         }
     {offset
       c9QZO: // global
           _s9PKy::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9QZP; else goto c9QZQ;
       c9QZQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9QZS; else goto c9QZR;
       c9QZS: // global
           HpAlloc = 24;
           goto c9QZP;
       c9QZP: // global
           R2 = _s9PKy::I64;
           R1 = Control.Exception.Base.absentError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QZR: // global
           I64[Hp - 16] = sat_s9PKz_info;
           I64[Hp] = _s9PKy::I64;
           I64[Sp - 8] = block_c9QZM_info;
           R3 = Hp - 16;
           R2 = lvl_r9PFt_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.absentError_info" {
     Control.Exception.Base.absentError_info:
         const Control.Exception.Base.absentError_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const S9POL_srt+72;
 },
 _c9QZM() //  [R1]
         { []
         }
     {offset
       c9QZM: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9QZM_info" {
     block_c9QZM_info:
         const _c9QZM;
         const 0;
         const 4294967326;
         const S9POL_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.382792758 UTC

[section ""cstring" . Control.Exception.Base.$trModule4_bytes" {
     Control.Exception.Base.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.385365832 UTC

[section ""data" . Control.Exception.Base.$trModule3_closure" {
     Control.Exception.Base.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.387747999 UTC

[section ""cstring" . Control.Exception.Base.$trModule2_bytes" {
     Control.Exception.Base.$trModule2_bytes:
         I8[] [67,111,110,116,114,111,108,46,69,120,99,101,112,116,105,111,110,46,66,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.389629438 UTC

[section ""data" . Control.Exception.Base.$trModule1_closure" {
     Control.Exception.Base.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.391309576 UTC

[section ""data" . Control.Exception.Base.$trModule_closure" {
     Control.Exception.Base.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Control.Exception.Base.$trModule3_closure+1;
         const Control.Exception.Base.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.392931453 UTC

[section ""data" . $krep_r9PFu_closure" {
     $krep_r9PFu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.394890948 UTC

[section ""data" . $krep1_r9PFv_closure" {
     $krep1_r9PFv_closure:
         const :_con_info;
         const $krep_r9PFu_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.396588752 UTC

[section ""data" . $krep2_r9PFw_closure" {
     $krep2_r9PFw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_r9PFv_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.398236071 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionPatternMatchFail4_bytes" {
     Control.Exception.Base.$fExceptionPatternMatchFail4_bytes:
         I8[] [80,97,116,116,101,114,110,77,97,116,99,104,70,97,105,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.400351319 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail3_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionPatternMatchFail4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.402152631 UTC

[section ""data" . Control.Exception.Base.$tcPatternMatchFail_closure" {
     Control.Exception.Base.$tcPatternMatchFail_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail3_closure+1;
         const GHC.Types.krep$*_closure;
         const 15470147969565509342;
         const 8416277433045206230;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.40391606 UTC

[section ""data" . $krep3_r9PFx_closure" {
     $krep3_r9PFx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcPatternMatchFail_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.405634989 UTC

[section ""data" . Control.Exception.Base.$tc'PatternMatchFail1_closure" {
     Control.Exception.Base.$tc'PatternMatchFail1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep3_r9PFx_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.407311387 UTC

[section ""cstring" . Control.Exception.Base.$tc'PatternMatchFail3_bytes" {
     Control.Exception.Base.$tc'PatternMatchFail3_bytes:
         I8[] [39,80,97,116,116,101,114,110,77,97,116,99,104,70,97,105,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.40891779 UTC

[section ""data" . Control.Exception.Base.$tc'PatternMatchFail2_closure" {
     Control.Exception.Base.$tc'PatternMatchFail2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'PatternMatchFail3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.410662991 UTC

[section ""data" . Control.Exception.Base.$tc'PatternMatchFail_closure" {
     Control.Exception.Base.$tc'PatternMatchFail_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'PatternMatchFail2_closure+1;
         const Control.Exception.Base.$tc'PatternMatchFail1_closure+4;
         const 5659337934556330582;
         const 79463786797963870;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.414702572 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail2_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail2_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail2_entry() //  [R1]
         { []
         }
     {offset
       c9R0z: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9R0A; else goto c9R0B;
       c9R0A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9R0B: // global
           (_c9R0r::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9R0r::I64 == 0) goto c9R0t; else goto c9R0s;
       c9R0t: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9R0s: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9R0r::I64;
           I64[Sp - 24] = block_c9R0u_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionPatternMatchFail3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 8416277433045206230;
           R2 = 15470147969565509342;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionPatternMatchFail2_info" {
     Control.Exception.Base.$fExceptionPatternMatchFail2_info:
         const Control.Exception.Base.$fExceptionPatternMatchFail2_entry;
         const 0;
         const 4294967317;
         const S9POL_srt+88;
 },
 _c9R0u() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c9R0u: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9R0v() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9R0u_info" {
     block_c9R0u_info:
         const _c9R0u;
         const 0;
         const 30;
 },
 _c9R0v() //  []
         { []
         }
     {offset
       c9R0v: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9R0E; else goto c9R0D;
       c9R0E: // global
           HpAlloc = 48;
           I64[Sp] = block_c9R0v_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9R0D: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9R0v_info" {
     block_c9R0v_info:
         const _c9R0v;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.423200834 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c9R17: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9R1b; else goto c9R1c;
       c9R1b: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R1c: // global
           I64[Sp - 8] = block_c9R14_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9R1x; else goto c9R15;
       u9R1x: // global
           call _c9R14(R1) args: 0, res: 0, upd: 0;
       c9R15: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_info" {
     Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_info:
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S9POL_srt+96;
 },
 _c9R14() //  [R1]
         { []
         }
     {offset
       c9R14: // global
           I64[Sp - 8] = block_c9R1a_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9R14_info" {
     block_c9R14_info:
         const _c9R14;
         const 0;
         const 21474836510;
         const S9POL_srt+96;
 },
 _c9R1a() //  [R1]
         { []
         }
     {offset
       c9R1a: // global
           I64[Sp] = block_c9R1h_info;
           R3 = Control.Exception.Base.$fExceptionPatternMatchFail2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9R1a_info" {
     block_c9R1a_info:
         const _c9R1a;
         const 1;
         const 21474836510;
         const S9POL_srt+96;
 },
 _c9R1h() //  [R1]
         { []
         }
     {offset
       c9R1h: // global
           if (R1 & 7 == 1) goto c9R1o; else goto c9R1s;
       c9R1o: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9R1s: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9R1v; else goto c9R1u;
       c9R1v: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9R1u: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9R1h_info" {
     block_c9R1h_info:
         const _c9R1h;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.432074731 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionPatternMatchFail2_closure;
         const Control.Exception.Base.$fShowPatternMatchFail_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c9R1Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9R22; else goto c9R21;
       c9R22: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R21: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionPatternMatchFail_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_info" {
     Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_info:
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9POL_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.436272378 UTC

[section ""cstring" . lvl1_r9PFy_bytes" {
     lvl1_r9PFy_bytes:
         I8[] [78,111,110,45,101,120,104,97,117,115,116,105,118,101,32,112,97,116,116,101,114,110,115,32,105,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.438535301 UTC

[section ""data" . lvl2_r9PFz_closure" {
     lvl2_r9PFz_closure:
         const lvl2_r9PFz_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r9PFz_entry() //  [R1]
         { []
         }
     {offset
       c9R2g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9R2h; else goto c9R2i;
       c9R2h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9R2i: // global
           (_c9R2d::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9R2d::I64 == 0) goto c9R2f; else goto c9R2e;
       c9R2f: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9R2e: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9R2d::I64;
           R2 = lvl1_r9PFy_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_r9PFz_info" {
     lvl2_r9PFz_info:
         const lvl2_r9PFz_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.442558342 UTC

[section ""data" . Control.Exception.Base.patError_closure" {
     Control.Exception.Base.patError_closure:
         const Control.Exception.Base.patError_info;
         const 0;
 },
 Control.Exception.Base.patError_entry() //  [R2]
         { []
         }
     {offset
       c9R2w: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9R2x; else goto c9R2y;
       c9R2x: // global
           R2 = R2;
           R1 = Control.Exception.Base.patError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R2y: // global
           I64[Sp - 8] = block_c9R2u_info;
           R3 = lvl2_r9PFz_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.patError_info" {
     Control.Exception.Base.patError_info:
         const Control.Exception.Base.patError_entry;
         const 0;
         const 124554051598;
         const 4294967300;
         const S9POL_srt+120;
 },
 _c9R2u() //  [R1]
         { []
         }
     {offset
       c9R2u: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionPatternMatchFail_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9R2u_info" {
     block_c9R2u_info:
         const _c9R2u;
         const 0;
         const 4294967326;
         const S9POL_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.447071159 UTC

[section ""cstring" . lvl3_r9PFA_bytes" {
     lvl3_r9PFA_bytes:
         I8[] [78,111,110,45,101,120,104,97,117,115,116,105,118,101,32,103,117,97,114,100,115,32,105,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.449235795 UTC

[section ""data" . lvl4_r9PFB_closure" {
     lvl4_r9PFB_closure:
         const lvl4_r9PFB_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r9PFB_entry() //  [R1]
         { []
         }
     {offset
       c9R2R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9R2S; else goto c9R2T;
       c9R2S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9R2T: // global
           (_c9R2O::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9R2O::I64 == 0) goto c9R2Q; else goto c9R2P;
       c9R2Q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9R2P: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9R2O::I64;
           R2 = lvl3_r9PFA_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_r9PFB_info" {
     lvl4_r9PFB_info:
         const lvl4_r9PFB_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.45358281 UTC

[section ""data" . Control.Exception.Base.nonExhaustiveGuardsError_closure" {
     Control.Exception.Base.nonExhaustiveGuardsError_closure:
         const Control.Exception.Base.nonExhaustiveGuardsError_info;
         const 0;
 },
 Control.Exception.Base.nonExhaustiveGuardsError_entry() //  [R2]
         { []
         }
     {offset
       c9R37: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9R38; else goto c9R39;
       c9R38: // global
           R2 = R2;
           R1 = Control.Exception.Base.nonExhaustiveGuardsError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R39: // global
           I64[Sp - 8] = block_c9R35_info;
           R3 = lvl4_r9PFB_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.nonExhaustiveGuardsError_info" {
     Control.Exception.Base.nonExhaustiveGuardsError_info:
         const Control.Exception.Base.nonExhaustiveGuardsError_entry;
         const 0;
         const 450971566094;
         const 4294967300;
         const S9POL_srt+120;
 },
 _c9R35() //  [R1]
         { []
         }
     {offset
       c9R35: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionPatternMatchFail_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9R35_info" {
     block_c9R35_info:
         const _c9R35;
         const 0;
         const 4294967326;
         const S9POL_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.458223656 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionRecSelError4_bytes" {
     Control.Exception.Base.$fExceptionRecSelError4_bytes:
         I8[] [82,101,99,83,101,108,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.459889301 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError3_closure" {
     Control.Exception.Base.$fExceptionRecSelError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionRecSelError4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.462098471 UTC

[section ""data" . Control.Exception.Base.$tcRecSelError_closure" {
     Control.Exception.Base.$tcRecSelError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 10415770337441550020;
         const 15768375346093691416;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.464415892 UTC

[section ""data" . $krep4_r9PFC_closure" {
     $krep4_r9PFC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcRecSelError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.466236621 UTC

[section ""data" . Control.Exception.Base.$tc'RecSelError1_closure" {
     Control.Exception.Base.$tc'RecSelError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep4_r9PFC_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.467907013 UTC

[section ""cstring" . Control.Exception.Base.$tc'RecSelError3_bytes" {
     Control.Exception.Base.$tc'RecSelError3_bytes:
         I8[] [39,82,101,99,83,101,108,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.469515847 UTC

[section ""data" . Control.Exception.Base.$tc'RecSelError2_closure" {
     Control.Exception.Base.$tc'RecSelError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'RecSelError3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.471204588 UTC

[section ""data" . Control.Exception.Base.$tc'RecSelError_closure" {
     Control.Exception.Base.$tc'RecSelError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'RecSelError2_closure+1;
         const Control.Exception.Base.$tc'RecSelError1_closure+4;
         const 5471381485413442404;
         const 14158408912397908002;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.474775061 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError2_closure" {
     Control.Exception.Base.$fExceptionRecSelError2_closure:
         const Control.Exception.Base.$fExceptionRecSelError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecSelError2_entry() //  [R1]
         { []
         }
     {offset
       c9R3E: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9R3F; else goto c9R3G;
       c9R3F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9R3G: // global
           (_c9R3w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9R3w::I64 == 0) goto c9R3y; else goto c9R3x;
       c9R3y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9R3x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9R3w::I64;
           I64[Sp - 24] = block_c9R3z_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionRecSelError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 15768375346093691416;
           R2 = 10415770337441550020;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecSelError2_info" {
     Control.Exception.Base.$fExceptionRecSelError2_info:
         const Control.Exception.Base.$fExceptionRecSelError2_entry;
         const 0;
         const 4294967317;
         const S9POL_srt+88;
 },
 _c9R3z() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c9R3z: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9R3A() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9R3z_info" {
     block_c9R3z_info:
         const _c9R3z;
         const 0;
         const 30;
 },
 _c9R3A() //  []
         { []
         }
     {offset
       c9R3A: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9R3J; else goto c9R3I;
       c9R3J: // global
           HpAlloc = 48;
           I64[Sp] = block_c9R3A_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9R3I: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9R3A_info" {
     block_c9R3A_info:
         const _c9R3A;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.483674994 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecSelError_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c9R4c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9R4g; else goto c9R4h;
       c9R4g: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R4h: // global
           I64[Sp - 8] = block_c9R49_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9R4C; else goto c9R4a;
       u9R4C: // global
           call _c9R49(R1) args: 0, res: 0, upd: 0;
       c9R4a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecSelError_$cfromException_info" {
     Control.Exception.Base.$fExceptionRecSelError_$cfromException_info:
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_entry;
         const 0;
         const 13198434500622;
         const 4294967301;
         const S9POL_srt+96;
 },
 _c9R49() //  [R1]
         { []
         }
     {offset
       c9R49: // global
           I64[Sp - 8] = block_c9R4f_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9R49_info" {
     block_c9R49_info:
         const _c9R49;
         const 0;
         const 8800387989534;
         const S9POL_srt+96;
 },
 _c9R4f() //  [R1]
         { []
         }
     {offset
       c9R4f: // global
           I64[Sp] = block_c9R4m_info;
           R3 = Control.Exception.Base.$fExceptionRecSelError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9R4f_info" {
     block_c9R4f_info:
         const _c9R4f;
         const 1;
         const 8800387989534;
         const S9POL_srt+96;
 },
 _c9R4m() //  [R1]
         { []
         }
     {offset
       c9R4m: // global
           if (R1 & 7 == 1) goto c9R4t; else goto c9R4x;
       c9R4t: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9R4x: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9R4A; else goto c9R4z;
       c9R4A: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9R4z: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9R4m_info" {
     block_c9R4m_info:
         const _c9R4m;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.492327817 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError_closure" {
     Control.Exception.Base.$fExceptionRecSelError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionRecSelError2_closure;
         const Control.Exception.Base.$fShowRecSelError_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecSelError_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c9R53: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9R57; else goto c9R56;
       c9R57: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R56: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionRecSelError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecSelError_$ctoException_info" {
     Control.Exception.Base.$fExceptionRecSelError_$ctoException_info:
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9POL_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.496884012 UTC

[section ""cstring" . lvl5_r9PFD_bytes" {
     lvl5_r9PFD_bytes:
         I8[] [78,111,32,109,97,116,99,104,32,105,110,32,114,101,99,111,114,100,32,115,101,108,101,99,116,111,114,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.499880606 UTC

[section ""data" . Control.Exception.Base.recSelError_closure" {
     Control.Exception.Base.recSelError_closure:
         const Control.Exception.Base.recSelError_info;
         const 0;
 },
 sat_s9PL4_entry() //  [R1]
         { []
         }
     {offset
       c9R5n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9R5o; else goto c9R5p;
       c9R5o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9R5p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9PL4_info" {
     sat_s9PL4_info:
         const sat_s9PL4_entry;
         const 4294967296;
         const 17;
 },
 Control.Exception.Base.recSelError_entry() //  [R2]
         { []
         }
     {offset
       c9R5s: // global
           _s9PL3::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9R5t; else goto c9R5u;
       c9R5u: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9R5w; else goto c9R5v;
       c9R5w: // global
           HpAlloc = 24;
           goto c9R5t;
       c9R5t: // global
           R2 = _s9PL3::I64;
           R1 = Control.Exception.Base.recSelError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R5v: // global
           I64[Hp - 16] = sat_s9PL4_info;
           I64[Hp] = _s9PL3::I64;
           I64[Sp - 8] = block_c9R5q_info;
           R3 = Hp - 16;
           R2 = lvl5_r9PFD_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.recSelError_info" {
     Control.Exception.Base.recSelError_info:
         const Control.Exception.Base.recSelError_entry;
         const 0;
         const 21474836494;
         const 4294967300;
         const S9POL_srt+192;
 },
 _c9R5q() //  [R1]
         { []
         }
     {offset
       c9R5q: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionRecSelError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9R5q_info" {
     block_c9R5q_info:
         const _c9R5q;
         const 0;
         const 4294967326;
         const S9POL_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.506028762 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionRecConError4_bytes" {
     Control.Exception.Base.$fExceptionRecConError4_bytes:
         I8[] [82,101,99,67,111,110,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.507674349 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError3_closure" {
     Control.Exception.Base.$fExceptionRecConError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionRecConError4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.509775801 UTC

[section ""data" . Control.Exception.Base.$tcRecConError_closure" {
     Control.Exception.Base.$tcRecConError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionRecConError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 12352028005606494596;
         const 6364281046760374976;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.511557701 UTC

[section ""data" . $krep5_r9PFE_closure" {
     $krep5_r9PFE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcRecConError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.513276749 UTC

[section ""data" . Control.Exception.Base.$tc'RecConError1_closure" {
     Control.Exception.Base.$tc'RecConError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep5_r9PFE_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.51494412 UTC

[section ""cstring" . Control.Exception.Base.$tc'RecConError3_bytes" {
     Control.Exception.Base.$tc'RecConError3_bytes:
         I8[] [39,82,101,99,67,111,110,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.516656817 UTC

[section ""data" . Control.Exception.Base.$tc'RecConError2_closure" {
     Control.Exception.Base.$tc'RecConError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'RecConError3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.518411396 UTC

[section ""data" . Control.Exception.Base.$tc'RecConError_closure" {
     Control.Exception.Base.$tc'RecConError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'RecConError2_closure+1;
         const Control.Exception.Base.$tc'RecConError1_closure+4;
         const 9626440070376619587;
         const 11467734131060317064;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.521811936 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError2_closure" {
     Control.Exception.Base.$fExceptionRecConError2_closure:
         const Control.Exception.Base.$fExceptionRecConError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecConError2_entry() //  [R1]
         { []
         }
     {offset
       c9R65: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9R66; else goto c9R67;
       c9R66: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9R67: // global
           (_c9R5X::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9R5X::I64 == 0) goto c9R5Z; else goto c9R5Y;
       c9R5Z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9R5Y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9R5X::I64;
           I64[Sp - 24] = block_c9R60_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionRecConError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 6364281046760374976;
           R2 = 12352028005606494596;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecConError2_info" {
     Control.Exception.Base.$fExceptionRecConError2_info:
         const Control.Exception.Base.$fExceptionRecConError2_entry;
         const 0;
         const 4294967317;
         const S9POL_srt+88;
 },
 _c9R60() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c9R60: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9R61() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9R60_info" {
     block_c9R60_info:
         const _c9R60;
         const 0;
         const 30;
 },
 _c9R61() //  []
         { []
         }
     {offset
       c9R61: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9R6a; else goto c9R69;
       c9R6a: // global
           HpAlloc = 48;
           I64[Sp] = block_c9R61_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9R69: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9R61_info" {
     block_c9R61_info:
         const _c9R61;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.530979924 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionRecConError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecConError_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c9R6D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9R6H; else goto c9R6I;
       c9R6H: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecConError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R6I: // global
           I64[Sp - 8] = block_c9R6A_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9R73; else goto c9R6B;
       u9R73: // global
           call _c9R6A(R1) args: 0, res: 0, upd: 0;
       c9R6B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecConError_$cfromException_info" {
     Control.Exception.Base.$fExceptionRecConError_$cfromException_info:
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_entry;
         const 0;
         const 422216760033294;
         const 4294967301;
         const S9POL_srt+96;
 },
 _c9R6A() //  [R1]
         { []
         }
     {offset
       c9R6A: // global
           I64[Sp - 8] = block_c9R6G_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9R6A_info" {
     block_c9R6A_info:
         const _c9R6A;
         const 0;
         const 281479271677982;
         const S9POL_srt+96;
 },
 _c9R6G() //  [R1]
         { []
         }
     {offset
       c9R6G: // global
           I64[Sp] = block_c9R6N_info;
           R3 = Control.Exception.Base.$fExceptionRecConError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9R6G_info" {
     block_c9R6G_info:
         const _c9R6G;
         const 1;
         const 281479271677982;
         const S9POL_srt+96;
 },
 _c9R6N() //  [R1]
         { []
         }
     {offset
       c9R6N: // global
           if (R1 & 7 == 1) goto c9R6U; else goto c9R6Y;
       c9R6U: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9R6Y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9R71; else goto c9R70;
       c9R71: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9R70: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9R6N_info" {
     block_c9R6N_info:
         const _c9R6N;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.539775544 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError_closure" {
     Control.Exception.Base.$fExceptionRecConError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionRecConError2_closure;
         const Control.Exception.Base.$fShowRecConError_closure+1;
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionRecConError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionRecConError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionRecConError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecConError_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c9R7u: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9R7y; else goto c9R7x;
       c9R7y: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecConError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R7x: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionRecConError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecConError_$ctoException_info" {
     Control.Exception.Base.$fExceptionRecConError_$ctoException_info:
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9POL_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.54375616 UTC

[section ""cstring" . lvl6_r9PFF_bytes" {
     lvl6_r9PFF_bytes:
         I8[] [77,105,115,115,105,110,103,32,102,105,101,108,100,32,105,110,32,114,101,99,111,114,100,32,99,111,110,115,116,114,117,99,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.545886171 UTC

[section ""data" . lvl7_r9PFG_closure" {
     lvl7_r9PFG_closure:
         const lvl7_r9PFG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r9PFG_entry() //  [R1]
         { []
         }
     {offset
       c9R7M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9R7N; else goto c9R7O;
       c9R7N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9R7O: // global
           (_c9R7J::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9R7J::I64 == 0) goto c9R7L; else goto c9R7K;
       c9R7L: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9R7K: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9R7J::I64;
           R2 = lvl6_r9PFF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r9PFG_info" {
     lvl7_r9PFG_info:
         const lvl7_r9PFG_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.55018864 UTC

[section ""data" . Control.Exception.Base.recConError_closure" {
     Control.Exception.Base.recConError_closure:
         const Control.Exception.Base.recConError_info;
         const 0;
 },
 Control.Exception.Base.recConError_entry() //  [R2]
         { []
         }
     {offset
       c9R82: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9R83; else goto c9R84;
       c9R83: // global
           R2 = R2;
           R1 = Control.Exception.Base.recConError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R84: // global
           I64[Sp - 8] = block_c9R80_info;
           R3 = lvl7_r9PFG_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.recConError_info" {
     Control.Exception.Base.recConError_info:
         const Control.Exception.Base.recConError_entry;
         const 0;
         const 114353504256014;
         const 4294967300;
         const S9POL_srt+144;
 },
 _c9R80() //  [R1]
         { []
         }
     {offset
       c9R80: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionRecConError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9R80_info" {
     block_c9R80_info:
         const _c9R80;
         const 0;
         const 4294967326;
         const S9POL_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.554715692 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionRecUpdError4_bytes" {
     Control.Exception.Base.$fExceptionRecUpdError4_bytes:
         I8[] [82,101,99,85,112,100,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.55628616 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError3_closure" {
     Control.Exception.Base.$fExceptionRecUpdError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionRecUpdError4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.557961474 UTC

[section ""data" . Control.Exception.Base.$tcRecUpdError_closure" {
     Control.Exception.Base.$tcRecUpdError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 15702205725616076489;
         const 17185013925011980063;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.560297757 UTC

[section ""data" . $krep6_r9PFH_closure" {
     $krep6_r9PFH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcRecUpdError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.562101626 UTC

[section ""data" . Control.Exception.Base.$tc'RecUpdError1_closure" {
     Control.Exception.Base.$tc'RecUpdError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep6_r9PFH_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.56379231 UTC

[section ""cstring" . Control.Exception.Base.$tc'RecUpdError3_bytes" {
     Control.Exception.Base.$tc'RecUpdError3_bytes:
         I8[] [39,82,101,99,85,112,100,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.565758304 UTC

[section ""data" . Control.Exception.Base.$tc'RecUpdError2_closure" {
     Control.Exception.Base.$tc'RecUpdError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'RecUpdError3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.567450014 UTC

[section ""data" . Control.Exception.Base.$tc'RecUpdError_closure" {
     Control.Exception.Base.$tc'RecUpdError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'RecUpdError2_closure+1;
         const Control.Exception.Base.$tc'RecUpdError1_closure+4;
         const 16559845159098082290;
         const 2874382059338705699;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.570795924 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError2_closure" {
     Control.Exception.Base.$fExceptionRecUpdError2_closure:
         const Control.Exception.Base.$fExceptionRecUpdError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecUpdError2_entry() //  [R1]
         { []
         }
     {offset
       c9R8z: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9R8A; else goto c9R8B;
       c9R8A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9R8B: // global
           (_c9R8r::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9R8r::I64 == 0) goto c9R8t; else goto c9R8s;
       c9R8t: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9R8s: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9R8r::I64;
           I64[Sp - 24] = block_c9R8u_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionRecUpdError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 17185013925011980063;
           R2 = 15702205725616076489;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecUpdError2_info" {
     Control.Exception.Base.$fExceptionRecUpdError2_info:
         const Control.Exception.Base.$fExceptionRecUpdError2_entry;
         const 0;
         const 4294967317;
         const S9POL_srt+88;
 },
 _c9R8u() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c9R8u: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9R8v() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9R8u_info" {
     block_c9R8u_info:
         const _c9R8u;
         const 0;
         const 30;
 },
 _c9R8v() //  []
         { []
         }
     {offset
       c9R8v: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9R8E; else goto c9R8D;
       c9R8E: // global
           HpAlloc = 48;
           I64[Sp] = block_c9R8v_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9R8D: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9R8v_info" {
     block_c9R8v_info:
         const _c9R8v;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.579563147 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecUpdError_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c9R97: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9R9b; else goto c9R9c;
       c9R9b: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R9c: // global
           I64[Sp - 8] = block_c9R94_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9R9x; else goto c9R95;
       u9R9x: // global
           call _c9R94(R1) args: 0, res: 0, upd: 0;
       c9R95: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecUpdError_$cfromException_info" {
     Control.Exception.Base.$fExceptionRecUpdError_$cfromException_info:
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_entry;
         const 0;
         const 27021602059190286;
         const 4294967301;
         const S9POL_srt+96;
 },
 _c9R94() //  [R1]
         { []
         }
     {offset
       c9R94: // global
           I64[Sp - 8] = block_c9R9a_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9R94_info" {
     block_c9R94_info:
         const _c9R94;
         const 0;
         const 18014402804449310;
         const S9POL_srt+96;
 },
 _c9R9a() //  [R1]
         { []
         }
     {offset
       c9R9a: // global
           I64[Sp] = block_c9R9h_info;
           R3 = Control.Exception.Base.$fExceptionRecUpdError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9R9a_info" {
     block_c9R9a_info:
         const _c9R9a;
         const 1;
         const 18014402804449310;
         const S9POL_srt+96;
 },
 _c9R9h() //  [R1]
         { []
         }
     {offset
       c9R9h: // global
           if (R1 & 7 == 1) goto c9R9o; else goto c9R9s;
       c9R9o: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9R9s: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9R9v; else goto c9R9u;
       c9R9v: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9R9u: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9R9h_info" {
     block_c9R9h_info:
         const _c9R9h;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.58822384 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError_closure" {
     Control.Exception.Base.$fExceptionRecUpdError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionRecUpdError2_closure;
         const Control.Exception.Base.$fShowRecUpdError_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecUpdError_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c9R9Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Ra2; else goto c9Ra1;
       c9Ra2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Ra1: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionRecUpdError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecUpdError_$ctoException_info" {
     Control.Exception.Base.$fExceptionRecUpdError_$ctoException_info:
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9POL_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.592551103 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNoMethodError4_bytes" {
     Control.Exception.Base.$fExceptionNoMethodError4_bytes:
         I8[] [78,111,77,101,116,104,111,100,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.594908401 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError3_closure" {
     Control.Exception.Base.$fExceptionNoMethodError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionNoMethodError4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.596716455 UTC

[section ""data" . Control.Exception.Base.$tcNoMethodError_closure" {
     Control.Exception.Base.$tcNoMethodError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 11351432124310594529;
         const 14675551822527927261;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.598586713 UTC

[section ""data" . $krep7_r9PFI_closure" {
     $krep7_r9PFI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcNoMethodError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.600269739 UTC

[section ""data" . Control.Exception.Base.$tc'NoMethodError1_closure" {
     Control.Exception.Base.$tc'NoMethodError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep7_r9PFI_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.602253502 UTC

[section ""cstring" . Control.Exception.Base.$tc'NoMethodError3_bytes" {
     Control.Exception.Base.$tc'NoMethodError3_bytes:
         I8[] [39,78,111,77,101,116,104,111,100,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.603950075 UTC

[section ""data" . Control.Exception.Base.$tc'NoMethodError2_closure" {
     Control.Exception.Base.$tc'NoMethodError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'NoMethodError3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.605681648 UTC

[section ""data" . Control.Exception.Base.$tc'NoMethodError_closure" {
     Control.Exception.Base.$tc'NoMethodError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'NoMethodError2_closure+1;
         const Control.Exception.Base.$tc'NoMethodError1_closure+4;
         const 17186686744263410642;
         const 16452408278578849625;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.608982151 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError2_closure" {
     Control.Exception.Base.$fExceptionNoMethodError2_closure:
         const Control.Exception.Base.$fExceptionNoMethodError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNoMethodError2_entry() //  [R1]
         { []
         }
     {offset
       c9Ras: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Rat; else goto c9Rau;
       c9Rat: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Rau: // global
           (_c9Rak::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Rak::I64 == 0) goto c9Ram; else goto c9Ral;
       c9Ram: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ral: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Rak::I64;
           I64[Sp - 24] = block_c9Ran_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionNoMethodError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 14675551822527927261;
           R2 = 11351432124310594529;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNoMethodError2_info" {
     Control.Exception.Base.$fExceptionNoMethodError2_info:
         const Control.Exception.Base.$fExceptionNoMethodError2_entry;
         const 0;
         const 4294967317;
         const S9POL_srt+88;
 },
 _c9Ran() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c9Ran: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Rao() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Ran_info" {
     block_c9Ran_info:
         const _c9Ran;
         const 0;
         const 30;
 },
 _c9Rao() //  []
         { []
         }
     {offset
       c9Rao: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Rax; else goto c9Raw;
       c9Rax: // global
           HpAlloc = 48;
           I64[Sp] = block_c9Rao_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Raw: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Rao_info" {
     block_c9Rao_info:
         const _c9Rao;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.617701055 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNoMethodError_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c9Rb0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Rb4; else goto c9Rb5;
       c9Rb4: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Rb5: // global
           I64[Sp - 8] = block_c9RaX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Rbq; else goto c9RaY;
       u9Rbq: // global
           call _c9RaX(R1) args: 0, res: 0, upd: 0;
       c9RaY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNoMethodError_$cfromException_info" {
     Control.Exception.Base.$fExceptionNoMethodError_$cfromException_info:
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_entry;
         const 0;
         const 432345568522534926;
         const 4294967301;
         const S9POL_srt+96;
 },
 _c9RaX() //  [R1]
         { []
         }
     {offset
       c9RaX: // global
           I64[Sp - 8] = block_c9Rb3_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RaX_info" {
     block_c9RaX_info:
         const _c9RaX;
         const 0;
         const 288230380446679070;
         const S9POL_srt+96;
 },
 _c9Rb3() //  [R1]
         { []
         }
     {offset
       c9Rb3: // global
           I64[Sp] = block_c9Rba_info;
           R3 = Control.Exception.Base.$fExceptionNoMethodError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Rb3_info" {
     block_c9Rb3_info:
         const _c9Rb3;
         const 1;
         const 288230380446679070;
         const S9POL_srt+96;
 },
 _c9Rba() //  [R1]
         { []
         }
     {offset
       c9Rba: // global
           if (R1 & 7 == 1) goto c9Rbh; else goto c9Rbl;
       c9Rbh: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Rbl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Rbo; else goto c9Rbn;
       c9Rbo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Rbn: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Rba_info" {
     block_c9Rba_info:
         const _c9Rba;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.627156045 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError_closure" {
     Control.Exception.Base.$fExceptionNoMethodError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionNoMethodError2_closure;
         const Control.Exception.Base.$fShowNoMethodError_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNoMethodError_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c9RbR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9RbV; else goto c9RbU;
       c9RbV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RbU: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionNoMethodError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNoMethodError_$ctoException_info" {
     Control.Exception.Base.$fExceptionNoMethodError_$ctoException_info:
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9POL_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.631335255 UTC

[section ""cstring" . lvl8_r9PFJ_bytes" {
     lvl8_r9PFJ_bytes:
         I8[] [78,111,32,105,110,115,116,97,110,99,101,32,110,111,114,32,100,101,102,97,117,108,116,32,109,101,116,104,111,100,32,102,111,114,32,99,108,97,115,115,32,111,112,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.63354393 UTC

[section ""data" . lvl9_r9PFK_closure" {
     lvl9_r9PFK_closure:
         const lvl9_r9PFK_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r9PFK_entry() //  [R1]
         { []
         }
     {offset
       c9Rc9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Rca; else goto c9Rcb;
       c9Rca: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Rcb: // global
           (_c9Rc6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Rc6::I64 == 0) goto c9Rc8; else goto c9Rc7;
       c9Rc8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Rc7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Rc6::I64;
           R2 = lvl8_r9PFJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_r9PFK_info" {
     lvl9_r9PFK_info:
         const lvl9_r9PFK_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.637859055 UTC

[section ""data" . Control.Exception.Base.noMethodBindingError_closure" {
     Control.Exception.Base.noMethodBindingError_closure:
         const Control.Exception.Base.noMethodBindingError_info;
         const 0;
 },
 Control.Exception.Base.noMethodBindingError_entry() //  [R2]
         { []
         }
     {offset
       c9Rcp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Rcq; else goto c9Rcr;
       c9Rcq: // global
           R2 = R2;
           R1 = Control.Exception.Base.noMethodBindingError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Rcr: // global
           I64[Sp - 8] = block_c9Rcn_info;
           R3 = lvl9_r9PFK_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.noMethodBindingError_info" {
     Control.Exception.Base.noMethodBindingError_info:
         const Control.Exception.Base.noMethodBindingError_entry;
         const 0;
         const 117093594606600206;
         const 4294967300;
         const S9POL_srt+144;
 },
 _c9Rcn() //  [R1]
         { []
         }
     {offset
       c9Rcn: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionNoMethodError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Rcn_info" {
     block_c9Rcn_info:
         const _c9Rcn;
         const 0;
         const 4294967326;
         const S9POL_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.642501113 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionTypeError4_bytes" {
     Control.Exception.Base.$fExceptionTypeError4_bytes:
         I8[] [84,121,112,101,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.644187889 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError3_closure" {
     Control.Exception.Base.$fExceptionTypeError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionTypeError4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.646012958 UTC

[section ""data" . Control.Exception.Base.$tcTypeError_closure" {
     Control.Exception.Base.$tcTypeError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionTypeError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 16164392450212773017;
         const 7054022894506300317;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.647842824 UTC

[section ""data" . $krep8_r9PFL_closure" {
     $krep8_r9PFL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcTypeError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.649578541 UTC

[section ""data" . Control.Exception.Base.$tc'TypeError1_closure" {
     Control.Exception.Base.$tc'TypeError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep8_r9PFL_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.6513051 UTC

[section ""cstring" . Control.Exception.Base.$tc'TypeError3_bytes" {
     Control.Exception.Base.$tc'TypeError3_bytes:
         I8[] [39,84,121,112,101,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.65290715 UTC

[section ""data" . Control.Exception.Base.$tc'TypeError2_closure" {
     Control.Exception.Base.$tc'TypeError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'TypeError3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.655354712 UTC

[section ""data" . Control.Exception.Base.$tc'TypeError_closure" {
     Control.Exception.Base.$tc'TypeError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'TypeError2_closure+1;
         const Control.Exception.Base.$tc'TypeError1_closure+4;
         const 2042750002965703545;
         const 3275664116896771855;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.658694989 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError2_closure" {
     Control.Exception.Base.$fExceptionTypeError2_closure:
         const Control.Exception.Base.$fExceptionTypeError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionTypeError2_entry() //  [R1]
         { []
         }
     {offset
       c9RcW: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9RcX; else goto c9RcY;
       c9RcX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RcY: // global
           (_c9RcO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RcO::I64 == 0) goto c9RcQ; else goto c9RcP;
       c9RcQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RcP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RcO::I64;
           I64[Sp - 24] = block_c9RcR_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionTypeError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 7054022894506300317;
           R2 = 16164392450212773017;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionTypeError2_info" {
     Control.Exception.Base.$fExceptionTypeError2_info:
         const Control.Exception.Base.$fExceptionTypeError2_entry;
         const 0;
         const 4294967317;
         const S9POL_srt+88;
 },
 _c9RcR() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c9RcR: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9RcS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9RcR_info" {
     block_c9RcR_info:
         const _c9RcR;
         const 0;
         const 30;
 },
 _c9RcS() //  []
         { []
         }
     {offset
       c9RcS: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Rd1; else goto c9Rd0;
       c9Rd1: // global
           HpAlloc = 48;
           I64[Sp] = block_c9RcS_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Rd0: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9RcS_info" {
     block_c9RcS_info:
         const _c9RcS;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.667271504 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionTypeError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionTypeError_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c9Rdu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Rdy; else goto c9Rdz;
       c9Rdy: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionTypeError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Rdz: // global
           I64[Sp - 8] = block_c9Rdr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9RdU; else goto c9Rds;
       u9RdU: // global
           call _c9Rdr(R1) args: 0, res: 0, upd: 0;
       c9Rds: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionTypeError_$cfromException_info" {
     Control.Exception.Base.$fExceptionTypeError_$cfromException_info:
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S9POL_srt+344;
 },
 _c9Rdr() //  [R1]
         { []
         }
     {offset
       c9Rdr: // global
           I64[Sp - 8] = block_c9Rdx_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Rdr_info" {
     block_c9Rdr_info:
         const _c9Rdr;
         const 0;
         const 12884901918;
         const S9POL_srt+352;
 },
 _c9Rdx() //  [R1]
         { []
         }
     {offset
       c9Rdx: // global
           I64[Sp] = block_c9RdE_info;
           R3 = Control.Exception.Base.$fExceptionTypeError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Rdx_info" {
     block_c9Rdx_info:
         const _c9Rdx;
         const 1;
         const 12884901918;
         const S9POL_srt+352;
 },
 _c9RdE() //  [R1]
         { []
         }
     {offset
       c9RdE: // global
           if (R1 & 7 == 1) goto c9RdL; else goto c9RdP;
       c9RdL: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9RdP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RdS; else goto c9RdR;
       c9RdS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RdR: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RdE_info" {
     block_c9RdE_info:
         const _c9RdE;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.675613774 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError_closure" {
     Control.Exception.Base.$fExceptionTypeError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionTypeError2_closure;
         const Control.Exception.Base.$fShowTypeError_closure+1;
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionTypeError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionTypeError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionTypeError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionTypeError_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c9Rel: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Rep; else goto c9Reo;
       c9Rep: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionTypeError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Reo: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionTypeError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionTypeError_$ctoException_info" {
     Control.Exception.Base.$fExceptionTypeError_$ctoException_info:
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9POL_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.680264273 UTC

[section ""data" . Control.Exception.Base.typeError_closure" {
     Control.Exception.Base.typeError_closure:
         const Control.Exception.Base.typeError_info;
         const 0;
 },
 Control.Exception.Base.typeError_entry() //  [R2]
         { []
         }
     {offset
       c9ReC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9ReD; else goto c9ReE;
       c9ReD: // global
           R2 = R2;
           R1 = Control.Exception.Base.typeError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9ReE: // global
           I64[Sp - 8] = block_c9ReA_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.typeError_info" {
     Control.Exception.Base.typeError_info:
         const Control.Exception.Base.typeError_entry;
         const 0;
         const 21474836494;
         const 4294967300;
         const S9POL_srt+368;
 },
 _c9ReA() //  [R1]
         { []
         }
     {offset
       c9ReA: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionTypeError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9ReA_info" {
     block_c9ReA_info:
         const _c9ReA;
         const 0;
         const 4294967326;
         const S9POL_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.685216597 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNonTermination5_bytes" {
     Control.Exception.Base.$fExceptionNonTermination5_bytes:
         I8[] [78,111,110,84,101,114,109,105,110,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.686988764 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination4_closure" {
     Control.Exception.Base.$fExceptionNonTermination4_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionNonTermination5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.688764107 UTC

[section ""data" . Control.Exception.Base.$tcNonTermination_closure" {
     Control.Exception.Base.$tcNonTermination_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination4_closure+1;
         const GHC.Types.krep$*_closure;
         const 3579424895879668618;
         const 10599900892006414641;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.691202788 UTC

[section ""data" . Control.Exception.Base.$tc'NonTermination1_closure" {
     Control.Exception.Base.$tc'NonTermination1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcNonTermination_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.692838314 UTC

[section ""cstring" . Control.Exception.Base.$tc'NonTermination3_bytes" {
     Control.Exception.Base.$tc'NonTermination3_bytes:
         I8[] [39,78,111,110,84,101,114,109,105,110,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.69461439 UTC

[section ""data" . Control.Exception.Base.$tc'NonTermination2_closure" {
     Control.Exception.Base.$tc'NonTermination2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'NonTermination3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.696387165 UTC

[section ""data" . Control.Exception.Base.$tc'NonTermination_closure" {
     Control.Exception.Base.$tc'NonTermination_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'NonTermination2_closure+1;
         const Control.Exception.Base.$tc'NonTermination1_closure+1;
         const 12968537629115503750;
         const 16395462767232503200;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.699747337 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination3_closure" {
     Control.Exception.Base.$fExceptionNonTermination3_closure:
         const Control.Exception.Base.$fExceptionNonTermination3_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination3_entry() //  [R1]
         { []
         }
     {offset
       c9Rf8: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Rf9; else goto c9Rfa;
       c9Rf9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Rfa: // global
           (_c9Rf0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Rf0::I64 == 0) goto c9Rf2; else goto c9Rf1;
       c9Rf2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Rf1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Rf0::I64;
           I64[Sp - 24] = block_c9Rf3_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionNonTermination4_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 10599900892006414641;
           R2 = 3579424895879668618;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNonTermination3_info" {
     Control.Exception.Base.$fExceptionNonTermination3_info:
         const Control.Exception.Base.$fExceptionNonTermination3_entry;
         const 0;
         const 4294967317;
         const S9POL_srt+392;
 },
 _c9Rf3() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c9Rf3: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Rf4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Rf3_info" {
     block_c9Rf3_info:
         const _c9Rf3;
         const 0;
         const 30;
 },
 _c9Rf4() //  []
         { []
         }
     {offset
       c9Rf4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Rfd; else goto c9Rfc;
       c9Rfd: // global
           HpAlloc = 48;
           I64[Sp] = block_c9Rf4_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Rfc: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Rf4_info" {
     block_c9Rf4_info:
         const _c9Rf4;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.706930304 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNestedAtomically5_bytes" {
     Control.Exception.Base.$fExceptionNestedAtomically5_bytes:
         I8[] [78,101,115,116,101,100,65,116,111,109,105,99,97,108,108,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.708552986 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically4_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically4_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionNestedAtomically5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.710389624 UTC

[section ""data" . Control.Exception.Base.$tcNestedAtomically_closure" {
     Control.Exception.Base.$tcNestedAtomically_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically4_closure+1;
         const GHC.Types.krep$*_closure;
         const 13388460688970090897;
         const 8422109474180001052;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.712160386 UTC

[section ""data" . Control.Exception.Base.$tc'NestedAtomically1_closure" {
     Control.Exception.Base.$tc'NestedAtomically1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcNestedAtomically_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.714369809 UTC

[section ""cstring" . Control.Exception.Base.$tc'NestedAtomically3_bytes" {
     Control.Exception.Base.$tc'NestedAtomically3_bytes:
         I8[] [39,78,101,115,116,101,100,65,116,111,109,105,99,97,108,108,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.715943118 UTC

[section ""data" . Control.Exception.Base.$tc'NestedAtomically2_closure" {
     Control.Exception.Base.$tc'NestedAtomically2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'NestedAtomically3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.717631837 UTC

[section ""data" . Control.Exception.Base.$tc'NestedAtomically_closure" {
     Control.Exception.Base.$tc'NestedAtomically_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'NestedAtomically2_closure+1;
         const Control.Exception.Base.$tc'NestedAtomically1_closure+1;
         const 4753625237420970988;
         const 7635940481883810337;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.721498027 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically3_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically3_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically3_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically3_entry() //  [R1]
         { []
         }
     {offset
       c9RfR: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9RfS; else goto c9RfT;
       c9RfS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RfT: // global
           (_c9RfJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RfJ::I64 == 0) goto c9RfL; else goto c9RfK;
       c9RfL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RfK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RfJ::I64;
           I64[Sp - 24] = block_c9RfM_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionNestedAtomically4_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 8422109474180001052;
           R2 = 13388460688970090897;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNestedAtomically3_info" {
     Control.Exception.Base.$fExceptionNestedAtomically3_info:
         const Control.Exception.Base.$fExceptionNestedAtomically3_entry;
         const 0;
         const 4294967317;
         const S9POL_srt+392;
 },
 _c9RfM() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c9RfM: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9RfN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9RfM_info" {
     block_c9RfM_info:
         const _c9RfM;
         const 0;
         const 30;
 },
 _c9RfN() //  []
         { []
         }
     {offset
       c9RfN: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9RfW; else goto c9RfV;
       c9RfW: // global
           HpAlloc = 48;
           I64[Sp] = block_c9RfN_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9RfV: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9RfN_info" {
     block_c9RfN_info:
         const _c9RfN;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.730001006 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure" {
     Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure:
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c9Rgp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Rgt; else goto c9Rgu;
       c9Rgt: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Rgu: // global
           I64[Sp - 8] = block_c9Rgm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9RgP; else goto c9Rgn;
       u9RgP: // global
           call _c9Rgm(R1) args: 0, res: 0, upd: 0;
       c9Rgn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNonTermination_$cfromException_info" {
     Control.Exception.Base.$fExceptionNonTermination_$cfromException_info:
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_entry;
         const 0;
         const 416611827726;
         const 4294967301;
         const S9POL_srt+360;
 },
 _c9Rgm() //  [R1]
         { []
         }
     {offset
       c9Rgm: // global
           I64[Sp - 8] = block_c9Rgs_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Rgm_info" {
     block_c9Rgm_info:
         const _c9Rgm;
         const 0;
         const 279172874270;
         const S9POL_srt+360;
 },
 _c9Rgs() //  [R1]
         { []
         }
     {offset
       c9Rgs: // global
           I64[Sp] = block_c9Rgz_info;
           R3 = Control.Exception.Base.$fExceptionNonTermination3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Rgs_info" {
     block_c9Rgs_info:
         const _c9Rgs;
         const 1;
         const 279172874270;
         const S9POL_srt+360;
 },
 _c9Rgz() //  [R1]
         { []
         }
     {offset
       c9Rgz: // global
           if (R1 & 7 == 1) goto c9RgG; else goto c9RgK;
       c9RgG: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9RgK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RgN; else goto c9RgM;
       c9RgN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RgM: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Rgz_info" {
     block_c9Rgz_info:
         const _c9Rgz;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.738511416 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination_closure" {
     Control.Exception.Base.$fExceptionNonTermination_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionNonTermination3_closure;
         const Control.Exception.Base.$fShowNonTermination_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure" {
     Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure:
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c9Rhg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Rhk; else goto c9Rhj;
       c9Rhk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Rhj: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionNonTermination_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNonTermination_$ctoException_info" {
     Control.Exception.Base.$fExceptionNonTermination_$ctoException_info:
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9POL_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.743012739 UTC

[section ""data" . Control.Exception.Base.nonTermination_closure" {
     Control.Exception.Base.nonTermination_closure:
         const Control.Exception.Base.nonTermination_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.nonTermination_entry() //  [R1]
         { []
         }
     {offset
       c9Rhx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Rhy; else goto c9Rhz;
       c9Rhy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Rhz: // global
           (_c9Rhu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Rhu::I64 == 0) goto c9Rhw; else goto c9Rhv;
       c9Rhw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Rhv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Rhu::I64;
           R2 = Control.Exception.Base.NonTermination_closure+1;
           Sp = Sp - 16;
           call Control.Exception.Base.$fExceptionNonTermination_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.nonTermination_info" {
     Control.Exception.Base.nonTermination_info:
         const Control.Exception.Base.nonTermination_entry;
         const 0;
         const 4294967317;
         const S9POL_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.747766179 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c9RhO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RhS; else goto c9RhT;
       c9RhS: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RhT: // global
           I64[Sp - 8] = block_c9RhL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Rie; else goto c9RhM;
       u9Rie: // global
           call _c9RhL(R1) args: 0, res: 0, upd: 0;
       c9RhM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_info" {
     Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_info:
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_entry;
         const 0;
         const 6601364733966;
         const 4294967301;
         const S9POL_srt+360;
 },
 _c9RhL() //  [R1]
         { []
         }
     {offset
       c9RhL: // global
           I64[Sp - 8] = block_c9RhR_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RhL_info" {
     block_c9RhL_info:
         const _c9RhL;
         const 0;
         const 4402341478430;
         const S9POL_srt+360;
 },
 _c9RhR() //  [R1]
         { []
         }
     {offset
       c9RhR: // global
           I64[Sp] = block_c9RhY_info;
           R3 = Control.Exception.Base.$fExceptionNestedAtomically3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RhR_info" {
     block_c9RhR_info:
         const _c9RhR;
         const 1;
         const 4402341478430;
         const S9POL_srt+360;
 },
 _c9RhY() //  [R1]
         { []
         }
     {offset
       c9RhY: // global
           if (R1 & 7 == 1) goto c9Ri5; else goto c9Ri9;
       c9Ri5: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Ri9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Ric; else goto c9Rib;
       c9Ric: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Rib: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RhY_info" {
     block_c9RhY_info:
         const _c9RhY;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.756973872 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionNestedAtomically3_closure;
         const Control.Exception.Base.$fShowNestedAtomically_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c9RiF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9RiJ; else goto c9RiI;
       c9RiJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RiI: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionNestedAtomically_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_info" {
     Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_info:
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9POL_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.761861392 UTC

[section ""data" . Control.Exception.Base.nestedAtomically_closure" {
     Control.Exception.Base.nestedAtomically_closure:
         const Control.Exception.Base.nestedAtomically_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.nestedAtomically_entry() //  [R1]
         { []
         }
     {offset
       c9RiW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RiX; else goto c9RiY;
       c9RiX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RiY: // global
           (_c9RiT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RiT::I64 == 0) goto c9RiV; else goto c9RiU;
       c9RiV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RiU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RiT::I64;
           R2 = Control.Exception.Base.NestedAtomically_closure+1;
           Sp = Sp - 16;
           call Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.nestedAtomically_info" {
     Control.Exception.Base.nestedAtomically_info:
         const Control.Exception.Base.nestedAtomically_entry;
         const 0;
         const 4294967317;
         const S9POL_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.765222247 UTC

[section ""data" . Control.Exception.Base.NestedAtomically_closure" {
     Control.Exception.Base.NestedAtomically_closure:
         const Control.Exception.Base.NestedAtomically_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.766862744 UTC

[section ""data" . Control.Exception.Base.NonTermination_closure" {
     Control.Exception.Base.NonTermination_closure:
         const Control.Exception.Base.NonTermination_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.768458104 UTC

[section ""relreadonly" . Control.Exception.Base.NestedAtomically_closure_tbl" {
     Control.Exception.Base.NestedAtomically_closure_tbl:
         const Control.Exception.Base.NestedAtomically_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.770296077 UTC

[section ""cstring" . i9QBu_str" {
     i9QBu_str:
         I8[] [98,97,115,101,58,67,111,110,116,114,111,108,46,69,120,99,101,112,116,105,111,110,46,66,97,115,101,46,78,101,115,116,101,100,65,116,111,109,105,99,97,108,108,121]
 },
 Control.Exception.Base.NestedAtomically_con_entry() //  [R1]
         { []
         }
     {offset
       c9Rj9: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.NestedAtomically_con_info" {
     Control.Exception.Base.NestedAtomically_con_info:
         const Control.Exception.Base.NestedAtomically_con_entry;
         const 4294967296;
         const 3;
         const i9QBu_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.773262213 UTC

[section ""relreadonly" . Control.Exception.Base.NonTermination_closure_tbl" {
     Control.Exception.Base.NonTermination_closure_tbl:
         const Control.Exception.Base.NonTermination_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.775087988 UTC

[section ""cstring" . i9QBw_str" {
     i9QBw_str:
         I8[] [98,97,115,101,58,67,111,110,116,114,111,108,46,69,120,99,101,112,116,105,111,110,46,66,97,115,101,46,78,111,110,84,101,114,109,105,110,97,116,105,111,110]
 },
 Control.Exception.Base.NonTermination_con_entry() //  [R1]
         { []
         }
     {offset
       c9Rjg: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.NonTermination_con_info" {
     Control.Exception.Base.NonTermination_con_info:
         const Control.Exception.Base.NonTermination_con_entry;
         const 4294967296;
         const 3;
         const i9QBw_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:55.7785601 UTC

[section ""relreadonly" . S9POL_srt" {
     S9POL_srt:
         const Control.Exception.Base.$fExceptionNonTermination1_closure;
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure;
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_closure;
         const Control.Exception.Base.$fShowNonTermination1_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically1_closure;
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure;
         const Control.Exception.Base.$fShowNestedAtomically1_closure;
         const Control.Exception.Base.runtimeError_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Control.Exception.Base.absentError_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail2_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure;
         const Control.Exception.Base.patError_closure;
         const GHC.IO.Exception.untangle_closure;
         const lvl2_r9PFz_closure;
         const Control.Exception.Base.nonExhaustiveGuardsError_closure;
         const lvl4_r9PFB_closure;
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionRecSelError2_closure;
         const Control.Exception.Base.$fExceptionRecSelError_closure;
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure;
         const Control.Exception.Base.recSelError_closure;
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionRecConError2_closure;
         const Control.Exception.Base.$fExceptionRecConError_closure;
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_closure;
         const Control.Exception.Base.recConError_closure;
         const lvl7_r9PFG_closure;
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionRecUpdError2_closure;
         const Control.Exception.Base.$fExceptionRecUpdError_closure;
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure;
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionNoMethodError2_closure;
         const Control.Exception.Base.$fExceptionNoMethodError_closure;
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure;
         const Control.Exception.Base.noMethodBindingError_closure;
         const lvl9_r9PFK_closure;
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionTypeError2_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Control.Exception.Base.$fExceptionTypeError_closure;
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_closure;
         const Control.Exception.Base.typeError_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure;
         const Control.Exception.Base.$fExceptionNonTermination3_closure;
         const Control.Exception.Base.$fExceptionNonTermination_closure;
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically3_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.117061597 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:04:57.1186999 UTC

[section ""data" . Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_entry() //  [R3,
                                                                        R4]
         { []
         }
     {offset
       c9Rq0: // global
           _s9Rjo::P64 = R3;
           R3 = R4;
           R2 = _s9Rjo::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_info" {
     Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_info:
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.123800596 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail1_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail1_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail1_info;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail1_entry() //  [R2]
         { []
         }
     {offset
       c9Rqb: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionPatternMatchFail1_info" {
     Control.Exception.Base.$fExceptionPatternMatchFail1_info:
         const Control.Exception.Base.$fExceptionPatternMatchFail1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.127079703 UTC

[section ""data" . Control.Exception.Base.$fShowPatternMatchFail_$cshowList_closure" {
     Control.Exception.Base.$fShowPatternMatchFail_$cshowList_closure:
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowList_info;
 },
 Control.Exception.Base.$fShowPatternMatchFail_$cshowList_entry() //  [R2,
                                                                       R3]
         { []
         }
     {offset
       c9Rqo: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowPatternMatchFail_$cshowList_info" {
     Control.Exception.Base.$fShowPatternMatchFail_$cshowList_info:
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.130154561 UTC

[section ""data" . Control.Exception.Base.$fShowPatternMatchFail_closure" {
     Control.Exception.Base.$fShowPatternMatchFail_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionPatternMatchFail1_closure+1;
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.132150193 UTC

[section ""data" . Control.Exception.Base.$fShowRecSelError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowRecSelError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowRecSelError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowRecSelError_$cshowsPrec_entry() //  [R3,
                                                                   R4]
         { []
         }
     {offset
       c9RqB: // global
           _s9Rjt::P64 = R3;
           R3 = R4;
           R2 = _s9Rjt::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowRecSelError_$cshowsPrec_info" {
     Control.Exception.Base.$fShowRecSelError_$cshowsPrec_info:
         const Control.Exception.Base.$fShowRecSelError_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.135531618 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError1_closure" {
     Control.Exception.Base.$fExceptionRecSelError1_closure:
         const Control.Exception.Base.$fExceptionRecSelError1_info;
 },
 Control.Exception.Base.$fExceptionRecSelError1_entry() //  [R2]
         { []
         }
     {offset
       c9RqM: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecSelError1_info" {
     Control.Exception.Base.$fExceptionRecSelError1_info:
         const Control.Exception.Base.$fExceptionRecSelError1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.139074591 UTC

[section ""data" . Control.Exception.Base.$fShowRecSelError_$cshowList_closure" {
     Control.Exception.Base.$fShowRecSelError_$cshowList_closure:
         const Control.Exception.Base.$fShowRecSelError_$cshowList_info;
 },
 Control.Exception.Base.$fShowRecSelError_$cshowList_entry() //  [R2,
                                                                  R3]
         { []
         }
     {offset
       c9RqZ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowRecSelError_$cshowList_info" {
     Control.Exception.Base.$fShowRecSelError_$cshowList_info:
         const Control.Exception.Base.$fShowRecSelError_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.14215038 UTC

[section ""data" . Control.Exception.Base.$fShowRecSelError_closure" {
     Control.Exception.Base.$fShowRecSelError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowRecSelError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionRecSelError1_closure+1;
         const Control.Exception.Base.$fShowRecSelError_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.144088683 UTC

[section ""data" . Control.Exception.Base.$fShowRecConError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowRecConError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowRecConError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowRecConError_$cshowsPrec_entry() //  [R3,
                                                                   R4]
         { []
         }
     {offset
       c9Rrc: // global
           _s9Rjy::P64 = R3;
           R3 = R4;
           R2 = _s9Rjy::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowRecConError_$cshowsPrec_info" {
     Control.Exception.Base.$fShowRecConError_$cshowsPrec_info:
         const Control.Exception.Base.$fShowRecConError_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.147458807 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError1_closure" {
     Control.Exception.Base.$fExceptionRecConError1_closure:
         const Control.Exception.Base.$fExceptionRecConError1_info;
 },
 Control.Exception.Base.$fExceptionRecConError1_entry() //  [R2]
         { []
         }
     {offset
       c9Rrn: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecConError1_info" {
     Control.Exception.Base.$fExceptionRecConError1_info:
         const Control.Exception.Base.$fExceptionRecConError1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.152274926 UTC

[section ""data" . Control.Exception.Base.$fShowRecConError_$cshowList_closure" {
     Control.Exception.Base.$fShowRecConError_$cshowList_closure:
         const Control.Exception.Base.$fShowRecConError_$cshowList_info;
 },
 Control.Exception.Base.$fShowRecConError_$cshowList_entry() //  [R2,
                                                                  R3]
         { []
         }
     {offset
       c9RrA: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowRecConError_$cshowList_info" {
     Control.Exception.Base.$fShowRecConError_$cshowList_info:
         const Control.Exception.Base.$fShowRecConError_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.155310249 UTC

[section ""data" . Control.Exception.Base.$fShowRecConError_closure" {
     Control.Exception.Base.$fShowRecConError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowRecConError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionRecConError1_closure+1;
         const Control.Exception.Base.$fShowRecConError_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.157373937 UTC

[section ""data" . Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_entry() //  [R3,
                                                                   R4]
         { []
         }
     {offset
       c9RrN: // global
           _s9RjD::P64 = R3;
           R3 = R4;
           R2 = _s9RjD::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_info" {
     Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_info:
         const Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.160632325 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError1_closure" {
     Control.Exception.Base.$fExceptionRecUpdError1_closure:
         const Control.Exception.Base.$fExceptionRecUpdError1_info;
 },
 Control.Exception.Base.$fExceptionRecUpdError1_entry() //  [R2]
         { []
         }
     {offset
       c9RrY: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecUpdError1_info" {
     Control.Exception.Base.$fExceptionRecUpdError1_info:
         const Control.Exception.Base.$fExceptionRecUpdError1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.164309452 UTC

[section ""data" . Control.Exception.Base.$fShowRecUpdError_$cshowList_closure" {
     Control.Exception.Base.$fShowRecUpdError_$cshowList_closure:
         const Control.Exception.Base.$fShowRecUpdError_$cshowList_info;
 },
 Control.Exception.Base.$fShowRecUpdError_$cshowList_entry() //  [R2,
                                                                  R3]
         { []
         }
     {offset
       c9Rsb: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowRecUpdError_$cshowList_info" {
     Control.Exception.Base.$fShowRecUpdError_$cshowList_info:
         const Control.Exception.Base.$fShowRecUpdError_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.167428203 UTC

[section ""data" . Control.Exception.Base.$fShowRecUpdError_closure" {
     Control.Exception.Base.$fShowRecUpdError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionRecUpdError1_closure+1;
         const Control.Exception.Base.$fShowRecUpdError_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.169436208 UTC

[section ""data" . Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_entry() //  [R3,
                                                                     R4]
         { []
         }
     {offset
       c9Rso: // global
           _s9RjI::P64 = R3;
           R3 = R4;
           R2 = _s9RjI::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_info" {
     Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_info:
         const Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.172747232 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError1_closure" {
     Control.Exception.Base.$fExceptionNoMethodError1_closure:
         const Control.Exception.Base.$fExceptionNoMethodError1_info;
 },
 Control.Exception.Base.$fExceptionNoMethodError1_entry() //  [R2]
         { []
         }
     {offset
       c9Rsz: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNoMethodError1_info" {
     Control.Exception.Base.$fExceptionNoMethodError1_info:
         const Control.Exception.Base.$fExceptionNoMethodError1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.176505565 UTC

[section ""data" . Control.Exception.Base.$fShowNoMethodError_$cshowList_closure" {
     Control.Exception.Base.$fShowNoMethodError_$cshowList_closure:
         const Control.Exception.Base.$fShowNoMethodError_$cshowList_info;
 },
 Control.Exception.Base.$fShowNoMethodError_$cshowList_entry() //  [R2,
                                                                    R3]
         { []
         }
     {offset
       c9RsM: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowNoMethodError_$cshowList_info" {
     Control.Exception.Base.$fShowNoMethodError_$cshowList_info:
         const Control.Exception.Base.$fShowNoMethodError_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.179573452 UTC

[section ""data" . Control.Exception.Base.$fShowNoMethodError_closure" {
     Control.Exception.Base.$fShowNoMethodError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionNoMethodError1_closure+1;
         const Control.Exception.Base.$fShowNoMethodError_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.182102916 UTC

[section ""data" . Control.Exception.Base.$fShowTypeError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowTypeError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowTypeError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowTypeError_$cshowsPrec_entry() //  [R3,
                                                                 R4]
         { []
         }
     {offset
       c9RsZ: // global
           _s9RjN::P64 = R3;
           R3 = R4;
           R2 = _s9RjN::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowTypeError_$cshowsPrec_info" {
     Control.Exception.Base.$fShowTypeError_$cshowsPrec_info:
         const Control.Exception.Base.$fShowTypeError_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.185836292 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError1_closure" {
     Control.Exception.Base.$fExceptionTypeError1_closure:
         const Control.Exception.Base.$fExceptionTypeError1_info;
 },
 Control.Exception.Base.$fExceptionTypeError1_entry() //  [R2]
         { []
         }
     {offset
       c9Rta: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionTypeError1_info" {
     Control.Exception.Base.$fExceptionTypeError1_info:
         const Control.Exception.Base.$fExceptionTypeError1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.189082756 UTC

[section ""data" . Control.Exception.Base.$fShowTypeError_$cshowList_closure" {
     Control.Exception.Base.$fShowTypeError_$cshowList_closure:
         const Control.Exception.Base.$fShowTypeError_$cshowList_info;
 },
 Control.Exception.Base.$fShowTypeError_$cshowList_entry() //  [R2,
                                                                R3]
         { []
         }
     {offset
       c9Rtn: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowTypeError_$cshowList_info" {
     Control.Exception.Base.$fShowTypeError_$cshowList_info:
         const Control.Exception.Base.$fShowTypeError_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.1922252 UTC

[section ""data" . Control.Exception.Base.$fShowTypeError_closure" {
     Control.Exception.Base.$fShowTypeError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowTypeError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionTypeError1_closure+1;
         const Control.Exception.Base.$fShowTypeError_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.193924458 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNonTermination2_bytes" {
     Control.Exception.Base.$fExceptionNonTermination2_bytes:
         I8[] [60,60,108,111,111,112,62,62]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.196189488 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination1_closure" {
     Control.Exception.Base.$fExceptionNonTermination1_closure:
         const Control.Exception.Base.$fExceptionNonTermination1_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination1_entry() //  [R1]
         { []
         }
     {offset
       c9RtD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RtE; else goto c9RtF;
       c9RtE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RtF: // global
           (_c9RtA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RtA::I64 == 0) goto c9RtC; else goto c9RtB;
       c9RtC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RtB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RtA::I64;
           R2 = Control.Exception.Base.$fExceptionNonTermination2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNonTermination1_info" {
     Control.Exception.Base.$fExceptionNonTermination1_info:
         const Control.Exception.Base.$fExceptionNonTermination1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.200847321 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_info;
         const 0;
 },
 Control.Exception.Base.$fShowNonTermination_$cshowsPrec_entry() //  [R2,
                                                                      R3, R4]
         { []
         }
     {offset
       c9RtV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RtW; else goto c9RtX;
       c9RtW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RtX: // global
           I64[Sp - 16] = block_c9RtS_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Ru1; else goto c9RtT;
       u9Ru1: // global
           call _c9RtS() args: 0, res: 0, upd: 0;
       c9RtT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowNonTermination_$cshowsPrec_info" {
     Control.Exception.Base.$fShowNonTermination_$cshowsPrec_info:
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S9Ru2_srt;
 },
 _c9RtS() //  []
         { []
         }
     {offset
       c9RtS: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNonTermination1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RtS_info" {
     block_c9RtS_info:
         const _c9RtS;
         const 1;
         const 4294967326;
         const S9Ru2_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.206399562 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination_$cshow_closure" {
     Control.Exception.Base.$fExceptionNonTermination_$cshow_closure:
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c9Ruk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Rul; else goto c9Rum;
       c9Rul: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNonTermination_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Rum: // global
           I64[Sp - 8] = block_c9Ruh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Ruq; else goto c9Rui;
       u9Ruq: // global
           call _c9Ruh() args: 0, res: 0, upd: 0;
       c9Rui: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNonTermination_$cshow_info" {
     Control.Exception.Base.$fExceptionNonTermination_$cshow_info:
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S9Ru2_srt;
 },
 _c9Ruh() //  []
         { []
         }
     {offset
       c9Ruh: // global
           R1 = Control.Exception.Base.$fExceptionNonTermination1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ruh_info" {
     block_c9Ruh_info:
         const _c9Ruh;
         const 0;
         const 4294967326;
         const S9Ru2_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.212359946 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination1_closure" {
     Control.Exception.Base.$fShowNonTermination1_closure:
         const Control.Exception.Base.$fShowNonTermination1_info;
         const 0;
 },
 Control.Exception.Base.$fShowNonTermination1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9RuJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RuK; else goto c9RuL;
       c9RuK: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNonTermination1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RuL: // global
           I64[Sp - 16] = block_c9RuG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9RuP; else goto c9RuH;
       u9RuP: // global
           call _c9RuG() args: 0, res: 0, upd: 0;
       c9RuH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowNonTermination1_info" {
     Control.Exception.Base.$fShowNonTermination1_info:
         const Control.Exception.Base.$fShowNonTermination1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S9Ru2_srt;
 },
 _c9RuG() //  []
         { []
         }
     {offset
       c9RuG: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNonTermination1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RuG_info" {
     block_c9RuG_info:
         const _c9RuG;
         const 1;
         const 4294967326;
         const S9Ru2_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.218071764 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination_$cshowList_closure" {
     Control.Exception.Base.$fShowNonTermination_$cshowList_closure:
         const Control.Exception.Base.$fShowNonTermination_$cshowList_info;
         const 0;
 },
 Control.Exception.Base.$fShowNonTermination_$cshowList_entry() //  [R2,
                                                                     R3]
         { []
         }
     {offset
       c9Rv4: // global
           R4 = R3;
           R3 = R2;
           R2 = Control.Exception.Base.$fShowNonTermination1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowNonTermination_$cshowList_info" {
     Control.Exception.Base.$fShowNonTermination_$cshowList_info:
         const Control.Exception.Base.$fShowNonTermination_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S9Ru2_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.221148374 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination_closure" {
     Control.Exception.Base.$fShowNonTermination_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_closure+1;
         const Control.Exception.Base.$fShowNonTermination_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.222859641 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNestedAtomically2_bytes" {
     Control.Exception.Base.$fExceptionNestedAtomically2_bytes:
         I8[] [67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,83,84,77,46,97,116,111,109,105,99,97,108,108,121,32,119,97,115,32,110,101,115,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.225041096 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically1_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically1_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically1_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically1_entry() //  [R1]
         { []
         }
     {offset
       c9Rvj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Rvk; else goto c9Rvl;
       c9Rvk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Rvl: // global
           (_c9Rvg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Rvg::I64 == 0) goto c9Rvi; else goto c9Rvh;
       c9Rvi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Rvh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Rvg::I64;
           R2 = Control.Exception.Base.$fExceptionNestedAtomically2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNestedAtomically1_info" {
     Control.Exception.Base.$fExceptionNestedAtomically1_info:
         const Control.Exception.Base.$fExceptionNestedAtomically1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.229680712 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_info;
         const 0;
 },
 Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_entry() //  [R2,
                                                                        R3, R4]
         { []
         }
     {offset
       c9RvB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RvC; else goto c9RvD;
       c9RvC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RvD: // global
           I64[Sp - 16] = block_c9Rvy_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9RvH; else goto c9Rvz;
       u9RvH: // global
           call _c9Rvy() args: 0, res: 0, upd: 0;
       c9Rvz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_info" {
     Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_info:
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S9Ru2_srt+32;
 },
 _c9Rvy() //  []
         { []
         }
     {offset
       c9Rvy: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNestedAtomically1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Rvy_info" {
     block_c9Rvy_info:
         const _c9Rvy;
         const 1;
         const 4294967326;
         const S9Ru2_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.234967581 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c9RvZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Rw0; else goto c9Rw1;
       c9Rw0: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Rw1: // global
           I64[Sp - 8] = block_c9RvW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Rw5; else goto c9RvX;
       u9Rw5: // global
           call _c9RvW() args: 0, res: 0, upd: 0;
       c9RvX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNestedAtomically_$cshow_info" {
     Control.Exception.Base.$fExceptionNestedAtomically_$cshow_info:
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S9Ru2_srt+32;
 },
 _c9RvW() //  []
         { []
         }
     {offset
       c9RvW: // global
           R1 = Control.Exception.Base.$fExceptionNestedAtomically1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RvW_info" {
     block_c9RvW_info:
         const _c9RvW;
         const 0;
         const 4294967326;
         const S9Ru2_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.24035449 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically1_closure" {
     Control.Exception.Base.$fShowNestedAtomically1_closure:
         const Control.Exception.Base.$fShowNestedAtomically1_info;
         const 0;
 },
 Control.Exception.Base.$fShowNestedAtomically1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Rwo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Rwp; else goto c9Rwq;
       c9Rwp: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNestedAtomically1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Rwq: // global
           I64[Sp - 16] = block_c9Rwl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Rwu; else goto c9Rwm;
       u9Rwu: // global
           call _c9Rwl() args: 0, res: 0, upd: 0;
       c9Rwm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowNestedAtomically1_info" {
     Control.Exception.Base.$fShowNestedAtomically1_info:
         const Control.Exception.Base.$fShowNestedAtomically1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S9Ru2_srt+32;
 },
 _c9Rwl() //  []
         { []
         }
     {offset
       c9Rwl: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNestedAtomically1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Rwl_info" {
     block_c9Rwl_info:
         const _c9Rwl;
         const 1;
         const 4294967326;
         const S9Ru2_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.246616473 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically_$cshowList_closure" {
     Control.Exception.Base.$fShowNestedAtomically_$cshowList_closure:
         const Control.Exception.Base.$fShowNestedAtomically_$cshowList_info;
         const 0;
 },
 Control.Exception.Base.$fShowNestedAtomically_$cshowList_entry() //  [R2,
                                                                       R3]
         { []
         }
     {offset
       c9RwJ: // global
           R4 = R3;
           R3 = R2;
           R2 = Control.Exception.Base.$fShowNestedAtomically1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fShowNestedAtomically_$cshowList_info" {
     Control.Exception.Base.$fShowNestedAtomically_$cshowList_info:
         const Control.Exception.Base.$fShowNestedAtomically_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S9Ru2_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.249603612 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically_closure" {
     Control.Exception.Base.$fShowNestedAtomically_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure+1;
         const Control.Exception.Base.$fShowNestedAtomically_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.253753054 UTC

[section ""data" . Control.Exception.Base.catchJust1_closure" {
     Control.Exception.Base.catchJust1_closure:
         const Control.Exception.Base.catchJust1_info;
 },
 sat_s9Rkk_entry() //  [R1]
         { []
         }
     {offset
       c9Rx9: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Rkk_info" {
     sat_s9Rkk_info:
         const sat_s9Rkk_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9Rko_entry() //  [R1, R2]
         { []
         }
     {offset
       c9Rxg: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c9Rxh; else goto c9Rxi;
       c9Rxh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Rxi: // global
           I64[Sp - 40] = block_c9Rx0_info;
           _s9Rki::P64 = R2;
           _s9Rkd::P64 = P64[R1 + 7];
           R2 = _s9Rkd::P64;
           I64[Sp - 56] = stg_ap_p_info;
           P64[Sp - 48] = _s9Rki::P64;
           P64[Sp - 32] = _s9Rkd::P64;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _s9Rki::P64;
           Sp = Sp - 56;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Rko_info" {
     sat_s9Rko_info:
         const sat_s9Rko_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c9Rx0() //  [R1]
         { []
         }
     {offset
       c9Rx0: // global
           if (R1 & 7 == 1) goto c9Rxd; else goto c9Rxe;
       c9Rxd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Rxl; else goto c9Rxk;
       c9Rxl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Rxk: // global
           I64[Hp - 8] = sat_s9Rkk_info;
           P64[Hp] = P64[Sp + 32];
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Rxe: // global
           I64[Sp] = block_c9Rxo_info;
           _s9Rkl::P64 = P64[R1 + 6];
           R2 = _s9Rkl::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 32] = _s9Rkl::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Rx0_info" {
     block_c9Rx0_info:
         const _c9Rx0;
         const 4;
         const 30;
 },
 _c9Rxo() //  [R1]
         { []
         }
     {offset
       c9Rxo: // global
           if (R1 & 7 == 1) goto c9Rxv; else goto c9Rxz;
       c9Rxv: // global
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = GHC.IO.throwIO1_closure+3;
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Rxz: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Rxo_info" {
     block_c9Rxo_info:
         const _c9Rxo;
         const 132;
         const 30;
 },
 Control.Exception.Base.catchJust1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c9RxB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9RxF; else goto c9RxE;
       c9RxF: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.catchJust1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RxE: // global
           I64[Hp - 24] = sat_s9Rko_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R5;
           R2 = Hp - 23;
           R1 = R4;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.catchJust1_info" {
     Control.Exception.Base.catchJust1_info:
         const Control.Exception.Base.catchJust1_entry;
         const 0;
         const 14;
         const 21474836504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.263936433 UTC

[section ""data" . Control.Exception.Base.catchJust_closure" {
     Control.Exception.Base.catchJust_closure:
         const Control.Exception.Base.catchJust_info;
 },
 Control.Exception.Base.catchJust_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c9Ryf: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.catchJust1_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.catchJust_info" {
     Control.Exception.Base.catchJust_info:
         const Control.Exception.Base.catchJust_entry;
         const 0;
         const 14;
         const 21474836504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.267614948 UTC

[section ""data" . Control.Exception.Base.handleJust1_closure" {
     Control.Exception.Base.handleJust1_closure:
         const Control.Exception.Base.handleJust1_info;
 },
 Control.Exception.Base.handleJust1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c9Ryq: // global
           _s9Rks::P64 = R5;
           R5 = R4;
           R4 = _s9Rks::P64;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.catchJust1_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.handleJust1_info" {
     Control.Exception.Base.handleJust1_info:
         const Control.Exception.Base.handleJust1_entry;
         const 0;
         const 14;
         const 21474836504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.271085243 UTC

[section ""data" . Control.Exception.Base.handleJust_closure" {
     Control.Exception.Base.handleJust_closure:
         const Control.Exception.Base.handleJust_info;
 },
 Control.Exception.Base.handleJust_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c9RyB: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.handleJust1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.handleJust_info" {
     Control.Exception.Base.handleJust_info:
         const Control.Exception.Base.handleJust_entry;
         const 0;
         const 14;
         const 21474836504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.274343713 UTC

[section ""data" . Control.Exception.Base.handle1_closure" {
     Control.Exception.Base.handle1_closure:
         const Control.Exception.Base.handle1_info;
 },
 Control.Exception.Base.handle1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9RyM: // global
           _s9Rkw::P64 = R4;
           R4 = R3;
           R3 = _s9Rkw::P64;
           R2 = R2;
           call GHC.IO.catch1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.handle1_info" {
     Control.Exception.Base.handle1_info:
         const Control.Exception.Base.handle1_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.278067883 UTC

[section ""data" . Control.Exception.Base.handle_closure" {
     Control.Exception.Base.handle_closure:
         const Control.Exception.Base.handle_info;
 },
 Control.Exception.Base.handle_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9RyX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.handle1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.handle_info" {
     Control.Exception.Base.handle_info:
         const Control.Exception.Base.handle_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.282701263 UTC

[section ""data" . Control.Exception.Base.mapException1_closure" {
     Control.Exception.Base.mapException1_closure:
         const Control.Exception.Base.mapException1_info;
 },
 sat_s9RkD_entry() //  [R1]
         { []
         }
     {offset
       c9Rzd: // global
           _s9RkD::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c9Rze; else goto c9Rzf;
       c9Rzf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Rzh; else goto c9Rzg;
       c9Rzh: // global
           HpAlloc = 32;
           goto c9Rze;
       c9Rze: // global
           R1 = _s9RkD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Rzg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9RkD::P64;
           _s9Rky::P64 = P64[_s9RkD::P64 + 16];
           _s9Rkz::P64 = P64[_s9RkD::P64 + 24];
           _s9RkA::P64 = P64[_s9RkD::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s9Rky::P64;
           P64[Hp] = _s9Rkz::P64;
           R2 = _s9RkA::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Exception.toException_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9RkD_info" {
     sat_s9RkD_info:
         const sat_s9RkD_entry;
         const 3;
         const 15;
 },
 Control.Exception.Base.mapException1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9Rzi: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Rzm; else goto c9Rzl;
       c9Rzm: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.mapException1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Rzl: // global
           I64[Hp - 32] = sat_s9RkD_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 32;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.mapException1_info" {
     Control.Exception.Base.mapException1_info:
         const Control.Exception.Base.mapException1_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.290236875 UTC

[section ""data" . Control.Exception.Base.mapException_closure" {
     Control.Exception.Base.mapException_closure:
         const Control.Exception.Base.mapException_info;
 },
 sat_s9RkN_entry() //  [R1]
         { []
         }
     {offset
       c9RzU: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9RkN_info" {
     sat_s9RkN_info:
         const sat_s9RkN_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9RkQ_entry() //  [R1, R2]
         { []
         }
     {offset
       c9RA1: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c9RA2; else goto c9RA3;
       c9RA2: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RA3: // global
           I64[Sp - 32] = block_c9RzL_info;
           _s9RkL::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = _s9RkL::P64;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _s9RkL::P64;
           Sp = Sp - 48;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9RkQ_info" {
     sat_s9RkQ_info:
         const sat_s9RkQ_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c9RzL() //  [R1]
         { []
         }
     {offset
       c9RzL: // global
           if (R1 & 7 == 1) goto c9RzY; else goto c9RzZ;
       c9RzY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RA6; else goto c9RA5;
       c9RA6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RA5: // global
           I64[Hp - 8] = sat_s9RkN_info;
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9RzZ: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = Control.Exception.Base.mapException1_closure+4;
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RzL_info" {
     block_c9RzL_info:
         const _c9RzL;
         const 3;
         const 30;
 },
 sat_s9RkK_entry() //  [R1]
         { []
         }
     {offset
       c9RAf: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9RkK_info" {
     sat_s9RkK_info:
         const sat_s9RkK_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 Control.Exception.Base.mapException_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c9RAk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c9RAl; else goto c9RAm;
       c9RAl: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.mapException_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RAm: // global
           I64[Sp - 40] = block_c9RzE_info;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.mapException_info" {
     Control.Exception.Base.mapException_info:
         const Control.Exception.Base.mapException_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c9RzE() //  []
         { []
         }
     {offset
       c9RzE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9RAp; else goto c9RAo;
       c9RAp: // global
           HpAlloc = 48;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c9RAo: // global
           I64[Hp - 40] = sat_s9RkQ_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           I64[Hp - 8] = sat_s9RkK_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_c9RAi_info;
           R2 = Hp - 39;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RzE_info" {
     block_c9RzE_info:
         const _c9RzE;
         const 4;
         const 30;
 },
 _c9RAi() //  [R1]
         { []
         }
     {offset
       c9RAi: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RAi_info" {
     block_c9RAi_info:
         const _c9RAi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.305015147 UTC

[section ""data" . Control.Exception.Base.try1_closure" {
     Control.Exception.Base.try1_closure:
         const Control.Exception.Base.try1_info;
 },
 sat_s9Rl8_entry() //  [R1, R2]
         { []
         }
     {offset
       c9RBl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9RBm; else goto c9RBn;
       c9RBm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RBn: // global
           I64[Sp - 16] = block_c9RBf_info;
           _s9Rl3::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = _s9Rl3::P64;
           P64[Sp - 8] = _s9Rl3::P64;
           Sp = Sp - 32;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Rl8_info" {
     sat_s9Rl8_info:
         const sat_s9Rl8_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c9RBf() //  [R1]
         { []
         }
     {offset
       c9RBf: // global
           if (R1 & 7 == 1) goto c9RBi; else goto c9RBj;
       c9RBi: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c9RBj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RBw; else goto c9RBv;
       c9RBw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RBv: // global
           _s9Rl6::P64 = P64[R1 + 6];
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = _s9Rl6::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RBf_info" {
     block_c9RBf_info:
         const _c9RBf;
         const 1;
         const 30;
 },
 sat_s9Rl2_entry() //  [R1]
         { []
         }
     {offset
       c9RBF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9RBG; else goto c9RBH;
       c9RBG: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9RBH: // global
           I64[Sp - 8] = block_c9RBC_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Rl2_info" {
     sat_s9Rl2_info:
         const sat_s9Rl2_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _c9RBC() //  [R1]
         { []
         }
     {offset
       c9RBC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RBK; else goto c9RBJ;
       c9RBK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RBJ: // global
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RBC_info" {
     block_c9RBC_info:
         const _c9RBC;
         const 0;
         const 30;
 },
 Control.Exception.Base.try1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9RBL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9RBP; else goto c9RBO;
       c9RBP: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.try1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RBO: // global
           I64[Hp - 24] = sat_s9Rl8_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s9Rl2_info;
           P64[Hp] = R3;
           R2 = Hp - 22;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.try1_info" {
     Control.Exception.Base.try1_info:
         const Control.Exception.Base.try1_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.31564384 UTC

[section ""data" . Control.Exception.Base.try_closure" {
     Control.Exception.Base.try_closure:
         const Control.Exception.Base.try_info;
 },
 Control.Exception.Base.try_entry() //  [R2, R3]
         { []
         }
     {offset
       c9RCn: // global
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.try1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.try_info" {
     Control.Exception.Base.try_info:
         const Control.Exception.Base.try_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.3207282 UTC

[section ""data" . Control.Exception.Base.tryJust1_closure" {
     Control.Exception.Base.tryJust1_closure:
         const Control.Exception.Base.tryJust1_info;
 },
 Control.Exception.Base.tryJust1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9RCH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9RCI; else goto c9RCJ;
       c9RCI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.tryJust1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RCJ: // global
           I64[Sp - 24] = block_c9RCy_info;
           _s9Rla::P64 = R3;
           R3 = R4;
           _s9Rl9::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s9Rl9::P64;
           P64[Sp - 8] = _s9Rla::P64;
           Sp = Sp - 24;
           call Control.Exception.Base.try1_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.tryJust1_info" {
     Control.Exception.Base.tryJust1_info:
         const Control.Exception.Base.tryJust1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c9RCy() //  [R1]
         { []
         }
     {offset
       c9RCy: // global
           I64[Sp - 8] = block_c9RCA_info;
           _s9Rlf::P64 = R1;
           R1 = R1;
           P64[Sp] = _s9Rlf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9RD6; else goto c9RCB;
       u9RD6: // global
           call _c9RCA(R1) args: 0, res: 0, upd: 0;
       c9RCB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RCy_info" {
     block_c9RCy_info:
         const _c9RCy;
         const 2;
         const 30;
 },
 _c9RCA() //  [R1]
         { []
         }
     {offset
       c9RCA: // global
           if (R1 & 7 == 1) goto c9RCE; else goto c9RCF;
       c9RCE: // global
           I64[Sp + 8] = block_c9RCN_info;
           _s9Rlh::P64 = P64[R1 + 7];
           R2 = _s9Rlh::P64;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s9Rlh::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c9RCF: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RCA_info" {
     block_c9RCA_info:
         const _c9RCA;
         const 3;
         const 30;
 },
 _c9RCN() //  [R1]
         { []
         }
     {offset
       c9RCN: // global
           if (R1 & 7 == 1) goto c9RCU; else goto c9RCY;
       c9RCU: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.throwIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9RCY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RD1; else goto c9RD0;
       c9RD1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RD0: // global
           _s9Rlj::P64 = P64[R1 + 6];
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = _s9Rlj::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RCN_info" {
     block_c9RCN_info:
         const _c9RCN;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.329468839 UTC

[section ""data" . Control.Exception.Base.tryJust_closure" {
     Control.Exception.Base.tryJust_closure:
         const Control.Exception.Base.tryJust_info;
 },
 Control.Exception.Base.tryJust_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9RDA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.tryJust1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.tryJust_info" {
     Control.Exception.Base.tryJust_info:
         const Control.Exception.Base.tryJust_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.333772272 UTC

[section ""data" . Control.Exception.Base.onException1_closure" {
     Control.Exception.Base.onException1_closure:
         const Control.Exception.Base.onException1_info;
 },
 sat_s9Rlv_entry() //  [R1, R2]
         { []
         }
     {offset
       c9RDS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RDT; else goto c9RDU;
       c9RDT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RDU: // global
           I64[Sp - 16] = block_c9RDQ_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Rlv_info" {
     sat_s9Rlv_info:
         const sat_s9Rlv_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c9RDQ() //  []
         { []
         }
     {offset
       c9RDQ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RDQ_info" {
     block_c9RDQ_info:
         const _c9RDQ;
         const 1;
         const 30;
 },
 Control.Exception.Base.onException1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9RDW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RE0; else goto c9RDZ;
       c9RE0: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.onException1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RDZ: // global
           I64[Hp - 8] = sat_s9Rlv_info;
           P64[Hp] = R3;
           _s9Rln::P64 = R2;
           R2 = Hp - 6;
           R1 = _s9Rln::P64;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.onException1_info" {
     Control.Exception.Base.onException1_info:
         const Control.Exception.Base.onException1_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.340070946 UTC

[section ""data" . Control.Exception.Base.onException_closure" {
     Control.Exception.Base.onException_closure:
         const Control.Exception.Base.onException_info;
 },
 Control.Exception.Base.onException_entry() //  [R2, R3]
         { []
         }
     {offset
       c9REi: // global
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.onException1_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.onException_info" {
     Control.Exception.Base.onException_info:
         const Control.Exception.Base.onException_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.349524903 UTC

[section ""data" . Control.Exception.Base.bracket1_closure" {
     Control.Exception.Base.bracket1_closure:
         const Control.Exception.Base.bracket1_info;
 },
 sat_s9RlO_entry() //  [R1, R2]
         { []
         }
     {offset
       c9REG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9REH; else goto c9REI;
       c9REH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9REI: // global
           I64[Sp - 16] = block_c9REE_info;
           _s9RlJ::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9RlJ::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9RlO_info" {
     sat_s9RlO_info:
         const sat_s9RlO_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c9REE() //  []
         { []
         }
     {offset
       c9REE: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9REE_info" {
     block_c9REE_info:
         const _c9REE;
         const 1;
         const 30;
 },
 sat_s9RlI_entry() //  [R1]
         { []
         }
     {offset
       c9REQ: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9RlI_info" {
     sat_s9RlI_info:
         const sat_s9RlI_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9Rm6_entry() //  [R1, R2]
         { []
         }
     {offset
       c9RF8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RF9; else goto c9RFa;
       c9RF9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RFa: // global
           I64[Sp - 16] = block_c9RF6_info;
           _s9Rm1::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9Rm1::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Rm6_info" {
     sat_s9Rm6_info:
         const sat_s9Rm6_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c9RF6() //  []
         { []
         }
     {offset
       c9RF6: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RF6_info" {
     block_c9RF6_info:
         const _c9RF6;
         const 1;
         const 30;
 },
 sat_s9Rm0_entry() //  [R1]
         { []
         }
     {offset
       c9RFi: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Rm0_info" {
     sat_s9Rm0_info:
         const sat_s9Rm0_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9Rmd_entry() //  [R1]
         { []
         }
     {offset
       c9RFp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9RFq; else goto c9RFr;
       c9RFq: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9RFr: // global
           I64[Sp - 24] = block_c9REZ_info;
           _s9Rlx::P64 = P64[R1 + 15];
           _s9Rly::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9Rlx::P64;
           P64[Sp - 8] = _s9Rly::P64;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Rmd_info" {
     sat_s9Rmd_info:
         const sat_s9Rmd_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _c9REZ() //  [R1]
         { []
         }
     {offset
       c9REZ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9RFu; else goto c9RFt;
       c9RFu: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RFt: // global
           I64[Hp - 64] = sat_s9Rm6_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9Rm0_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9RFl_info;
           R2 = Hp - 62;
           _s9RlY::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9RlY::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9REZ_info" {
     block_c9REZ_info:
         const _c9REZ;
         const 2;
         const 30;
 },
 _c9RFl() //  [R1]
         { []
         }
     {offset
       c9RFl: // global
           _s9Rlx::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9RFn_info;
           R2 = P64[Sp + 16];
           _s9Rm9::P64 = R1;
           R1 = _s9Rlx::P64;
           P64[Sp + 16] = _s9Rm9::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RFl_info" {
     block_c9RFl_info:
         const _c9RFl;
         const 2;
         const 30;
 },
 _c9RFn() //  []
         { []
         }
     {offset
       c9RFn: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RFn_info" {
     block_c9RFn_info:
         const _c9RFn;
         const 1;
         const 30;
 },
 sat_s9Rmo_entry() //  [R1, R2]
         { []
         }
     {offset
       c9RFH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RFI; else goto c9RFJ;
       c9RFI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RFJ: // global
           I64[Sp - 16] = block_c9RFF_info;
           _s9Rmj::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9Rmj::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Rmo_info" {
     sat_s9Rmo_info:
         const sat_s9Rmo_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c9RFF() //  []
         { []
         }
     {offset
       c9RFF: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RFF_info" {
     block_c9RFF_info:
         const _c9RFF;
         const 1;
         const 30;
 },
 sat_s9Rmi_entry() //  [R1]
         { []
         }
     {offset
       c9RFR: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Rmi_info" {
     sat_s9Rmi_info:
         const sat_s9Rmi_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 Control.Exception.Base.bracket1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9RFY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9RFZ; else goto c9RG0;
       c9RFZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.bracket1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RG0: // global
           I64[Sp - 32] = block_c9REt_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.bracket1_info" {
     Control.Exception.Base.bracket1_info:
         const Control.Exception.Base.bracket1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c9REt() //  [R1]
         { []
         }
     {offset
       c9REt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9RG3; else goto c9RG2;
       c9RG3: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9RG2: // global
           _s9Rlw::P64 = P64[Sp + 8];
           if (R1 == 0) goto c9RFW; else goto u9RGm;
       c9RFW: // global
           I64[Hp - 24] = sat_s9Rmd_info;
           P64[Hp - 16] = _s9Rlw::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9RGm: // global
           if (R1 == 1) goto c9RFX; else goto c9RFV;
       c9RFX: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9RFy_info;
           R1 = _s9Rlw::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c9RFV: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9REx_info;
           R1 = _s9Rlw::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9REt_info" {
     block_c9REt_info:
         const _c9REt;
         const 3;
         const 30;
 },
 _c9RFy() //  [R1]
         { []
         }
     {offset
       c9RFy: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9RGi; else goto c9RGh;
       c9RGi: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RGh: // global
           I64[Hp - 64] = sat_s9Rmo_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9Rmi_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9RGd_info;
           R2 = Hp - 62;
           _s9Rmg::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9Rmg::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RFy_info" {
     block_c9RFy_info:
         const _c9RFy;
         const 2;
         const 30;
 },
 _c9RGd() //  [R1]
         { []
         }
     {offset
       c9RGd: // global
           _s9Rlx::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9RGf_info;
           R2 = P64[Sp + 16];
           _s9Rmr::P64 = R1;
           R1 = _s9Rlx::P64;
           P64[Sp + 16] = _s9Rmr::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RGd_info" {
     block_c9RGd_info:
         const _c9RGd;
         const 2;
         const 30;
 },
 _c9RGf() //  []
         { []
         }
     {offset
       c9RGf: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RGf_info" {
     block_c9RGf_info:
         const _c9RGf;
         const 1;
         const 30;
 },
 _c9REx() //  [R1]
         { []
         }
     {offset
       c9REx: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9RG9; else goto c9RG8;
       c9RG9: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RG8: // global
           I64[Hp - 64] = sat_s9RlO_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9RlI_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9RG4_info;
           R2 = Hp - 62;
           _s9RlG::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9RlG::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9REx_info" {
     block_c9REx_info:
         const _c9REx;
         const 2;
         const 30;
 },
 _c9RG4() //  [R1]
         { []
         }
     {offset
       c9RG4: // global
           _s9Rlx::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9RG6_info;
           R2 = P64[Sp + 16];
           _s9RlR::P64 = R1;
           R1 = _s9Rlx::P64;
           P64[Sp + 16] = _s9RlR::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RG4_info" {
     block_c9RG4_info:
         const _c9RG4;
         const 2;
         const 30;
 },
 _c9RG6() //  []
         { []
         }
     {offset
       c9RG6: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RG6_info" {
     block_c9RG6_info:
         const _c9RG6;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.384806742 UTC

[section ""data" . Control.Exception.Base.bracket_closure" {
     Control.Exception.Base.bracket_closure:
         const Control.Exception.Base.bracket_info;
 },
 Control.Exception.Base.bracket_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9RI9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.bracket1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.bracket_info" {
     Control.Exception.Base.bracket_info:
         const Control.Exception.Base.bracket_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.388887934 UTC

[section ""data" . Control.Exception.Base.bracket_1_closure" {
     Control.Exception.Base.bracket_1_closure:
         const Control.Exception.Base.bracket_1_info;
 },
 sat_s9RmC_entry() //  [R1]
         { []
         }
     {offset
       c9RIp: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9RmC_info" {
     sat_s9RmC_info:
         const sat_s9RmC_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s9RmA_entry() //  [R1]
         { []
         }
     {offset
       c9RIx: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9RmA_info" {
     sat_s9RmA_info:
         const sat_s9RmA_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Control.Exception.Base.bracket_1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9RIA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9RIE; else goto c9RID;
       c9RIE: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.bracket_1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RID: // global
           I64[Hp - 24] = sat_s9RmC_info;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s9RmA_info;
           P64[Hp] = R3;
           R4 = Hp - 23;
           R3 = Hp - 7;
           R2 = R2;
           call Control.Exception.Base.bracket1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.bracket_1_info" {
     Control.Exception.Base.bracket_1_info:
         const Control.Exception.Base.bracket_1_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.396059229 UTC

[section ""data" . Control.Exception.Base.bracket__closure" {
     Control.Exception.Base.bracket__closure:
         const Control.Exception.Base.bracket__info;
 },
 Control.Exception.Base.bracket__entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9RIV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.bracket_1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.bracket__info" {
     Control.Exception.Base.bracket__info:
         const Control.Exception.Base.bracket__entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.403684899 UTC

[section ""data" . Control.Exception.Base.finally1_closure" {
     Control.Exception.Base.finally1_closure:
         const Control.Exception.Base.finally1_info;
 },
 sat_s9RmQ_entry() //  [R1, R2]
         { []
         }
     {offset
       c9RJh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RJi; else goto c9RJj;
       c9RJi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RJj: // global
           I64[Sp - 16] = block_c9RJf_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9RmQ_info" {
     sat_s9RmQ_info:
         const sat_s9RmQ_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c9RJf() //  []
         { []
         }
     {offset
       c9RJf: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RJf_info" {
     block_c9RJf_info:
         const _c9RJf;
         const 1;
         const 30;
 },
 sat_s9RmK_entry() //  [R1]
         { []
         }
     {offset
       c9RJq: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9RmK_info" {
     sat_s9RmK_info:
         const sat_s9RmK_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9Rn4_entry() //  [R1, R2]
         { []
         }
     {offset
       c9RJG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RJH; else goto c9RJI;
       c9RJH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RJI: // global
           I64[Sp - 16] = block_c9RJE_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Rn4_info" {
     sat_s9Rn4_info:
         const sat_s9Rn4_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c9RJE() //  []
         { []
         }
     {offset
       c9RJE: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RJE_info" {
     block_c9RJE_info:
         const _c9RJE;
         const 1;
         const 30;
 },
 sat_s9RmY_entry() //  [R1]
         { []
         }
     {offset
       c9RJP: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9RmY_info" {
     sat_s9RmY_info:
         const sat_s9RmY_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9Rnb_entry() //  [R1]
         { []
         }
     {offset
       c9RJW: // global
           _s9Rnb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9RJX; else goto c9RJY;
       c9RJY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9RK0; else goto c9RJZ;
       c9RK0: // global
           HpAlloc = 32;
           goto c9RJX;
       c9RJX: // global
           R1 = _s9Rnb::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9RJZ: // global
           _s9RmD::P64 = P64[_s9Rnb::P64 + 7];
           _s9RmE::P64 = P64[_s9Rnb::P64 + 15];
           I64[Hp - 24] = sat_s9Rn4_info;
           P64[Hp - 16] = _s9RmE::P64;
           I64[Hp - 8] = sat_s9RmY_info;
           P64[Hp] = _s9RmD::P64;
           I64[Sp - 16] = block_c9RJS_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           P64[Sp - 8] = _s9RmE::P64;
           Sp = Sp - 16;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Rnb_info" {
     sat_s9Rnb_info:
         const sat_s9Rnb_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _c9RJS() //  [R1]
         { []
         }
     {offset
       c9RJS: // global
           I64[Sp] = block_c9RJU_info;
           _s9Rn7::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9Rn7::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RJS_info" {
     block_c9RJS_info:
         const _c9RJS;
         const 1;
         const 30;
 },
 _c9RJU() //  []
         { []
         }
     {offset
       c9RJU: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RJU_info" {
     block_c9RJU_info:
         const _c9RJU;
         const 1;
         const 30;
 },
 sat_s9Rni_entry() //  [R1, R2]
         { []
         }
     {offset
       c9RKb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RKc; else goto c9RKd;
       c9RKc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RKd: // global
           I64[Sp - 16] = block_c9RK9_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Rni_info" {
     sat_s9Rni_info:
         const sat_s9Rni_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c9RK9() //  []
         { []
         }
     {offset
       c9RK9: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RK9_info" {
     block_c9RK9_info:
         const _c9RK9;
         const 1;
         const 30;
 },
 sat_s9Rnc_entry() //  [R1]
         { []
         }
     {offset
       c9RKk: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Rnc_info" {
     sat_s9Rnc_info:
         const sat_s9Rnc_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 Control.Exception.Base.finally1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9RKr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9RKs; else goto c9RKt;
       c9RKs: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.finally1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RKt: // global
           I64[Sp - 24] = block_c9RJ6_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.finally1_info" {
     Control.Exception.Base.finally1_info:
         const Control.Exception.Base.finally1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9RJ6() //  [R1]
         { []
         }
     {offset
       c9RJ6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9RKw; else goto c9RKv;
       c9RKw: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9RKv: // global
           _s9RmD::P64 = P64[Sp + 8];
           _s9RmE::P64 = P64[Sp + 16];
           if (R1 == 0) goto c9RKp; else goto u9RKJ;
       c9RKp: // global
           I64[Hp - 24] = sat_s9Rnb_info;
           P64[Hp - 16] = _s9RmD::P64;
           P64[Hp - 8] = _s9RmE::P64;
           _c9RJu::P64 = Hp - 23;
           Hp = Hp - 8;
           R1 = _c9RJu::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9RKJ: // global
           if (R1 == 1) goto c9RKq; else goto c9RKo;
       c9RKq: // global
           I64[Hp - 24] = sat_s9Rni_info;
           P64[Hp - 16] = _s9RmE::P64;
           I64[Hp - 8] = sat_s9Rnc_info;
           P64[Hp] = _s9RmD::P64;
           I64[Sp + 8] = block_c9RKD_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
       c9RKo: // global
           I64[Hp - 24] = sat_s9RmQ_info;
           P64[Hp - 16] = _s9RmE::P64;
           I64[Hp - 8] = sat_s9RmK_info;
           P64[Hp] = _s9RmD::P64;
           I64[Sp + 8] = block_c9RKx_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RJ6_info" {
     block_c9RJ6_info:
         const _c9RJ6;
         const 2;
         const 30;
 },
 _c9RKD() //  [R1]
         { []
         }
     {offset
       c9RKD: // global
           I64[Sp] = block_c9RKF_info;
           _s9Rnl::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9Rnl::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RKD_info" {
     block_c9RKD_info:
         const _c9RKD;
         const 1;
         const 30;
 },
 _c9RKF() //  []
         { []
         }
     {offset
       c9RKF: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RKF_info" {
     block_c9RKF_info:
         const _c9RKF;
         const 1;
         const 30;
 },
 _c9RKx() //  [R1]
         { []
         }
     {offset
       c9RKx: // global
           I64[Sp] = block_c9RKz_info;
           _s9RmT::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9RmT::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RKx_info" {
     block_c9RKx_info:
         const _c9RKx;
         const 1;
         const 30;
 },
 _c9RKz() //  []
         { []
         }
     {offset
       c9RKz: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RKz_info" {
     block_c9RKz_info:
         const _c9RKz;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.433348372 UTC

[section ""data" . Control.Exception.Base.finally_closure" {
     Control.Exception.Base.finally_closure:
         const Control.Exception.Base.finally_info;
 },
 Control.Exception.Base.finally_entry() //  [R2, R3]
         { []
         }
     {offset
       c9RM6: // global
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.finally1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.finally_info" {
     Control.Exception.Base.finally_info:
         const Control.Exception.Base.finally_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.441918633 UTC

[section ""data" . Control.Exception.Base.bracketOnError1_closure" {
     Control.Exception.Base.bracketOnError1_closure:
         const Control.Exception.Base.bracketOnError1_info;
 },
 sat_s9RnH_entry() //  [R1, R2]
         { []
         }
     {offset
       c9RMu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RMv; else goto c9RMw;
       c9RMv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RMw: // global
           I64[Sp - 16] = block_c9RMs_info;
           _s9RnC::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9RnC::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9RnH_info" {
     sat_s9RnH_info:
         const sat_s9RnH_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c9RMs() //  []
         { []
         }
     {offset
       c9RMs: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RMs_info" {
     block_c9RMs_info:
         const _c9RMs;
         const 1;
         const 30;
 },
 sat_s9RnB_entry() //  [R1]
         { []
         }
     {offset
       c9RME: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9RnB_info" {
     sat_s9RnB_info:
         const sat_s9RnB_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9RnT_entry() //  [R1, R2]
         { []
         }
     {offset
       c9RMW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RMX; else goto c9RMY;
       c9RMX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RMY: // global
           I64[Sp - 16] = block_c9RMU_info;
           _s9RnO::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9RnO::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9RnT_info" {
     sat_s9RnT_info:
         const sat_s9RnT_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c9RMU() //  []
         { []
         }
     {offset
       c9RMU: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RMU_info" {
     block_c9RMU_info:
         const _c9RMU;
         const 1;
         const 30;
 },
 sat_s9RnN_entry() //  [R1]
         { []
         }
     {offset
       c9RN6: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9RnN_info" {
     sat_s9RnN_info:
         const sat_s9RnN_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s9RnU_entry() //  [R1]
         { []
         }
     {offset
       c9RN9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9RNa; else goto c9RNb;
       c9RNa: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9RNb: // global
           I64[Sp - 24] = block_c9RMN_info;
           _s9Rnq::P64 = P64[R1 + 15];
           _s9Rnr::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9Rnq::P64;
           P64[Sp - 8] = _s9Rnr::P64;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9RnU_info" {
     sat_s9RnU_info:
         const sat_s9RnU_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _c9RMN() //  [R1]
         { []
         }
     {offset
       c9RMN: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9RNe; else goto c9RNd;
       c9RNe: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RNd: // global
           I64[Hp - 64] = sat_s9RnT_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9RnN_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 62;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RMN_info" {
     block_c9RMN_info:
         const _c9RMN;
         const 2;
         const 30;
 },
 sat_s9Ro5_entry() //  [R1, R2]
         { []
         }
     {offset
       c9RNp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RNq; else goto c9RNr;
       c9RNq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RNr: // global
           I64[Sp - 16] = block_c9RNn_info;
           _s9Ro0::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9Ro0::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9Ro5_info" {
     sat_s9Ro5_info:
         const sat_s9Ro5_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c9RNn() //  []
         { []
         }
     {offset
       c9RNn: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RNn_info" {
     block_c9RNn_info:
         const _c9RNn;
         const 1;
         const 30;
 },
 sat_s9RnZ_entry() //  [R1]
         { []
         }
     {offset
       c9RNz: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9RnZ_info" {
     sat_s9RnZ_info:
         const sat_s9RnZ_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 Control.Exception.Base.bracketOnError1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9RNG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9RNH; else goto c9RNI;
       c9RNH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.bracketOnError1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RNI: // global
           I64[Sp - 32] = block_c9RMh_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.bracketOnError1_info" {
     Control.Exception.Base.bracketOnError1_info:
         const Control.Exception.Base.bracketOnError1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c9RMh() //  [R1]
         { []
         }
     {offset
       c9RMh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9RNL; else goto c9RNK;
       c9RNL: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9RNK: // global
           _s9Rnp::P64 = P64[Sp + 8];
           if (R1 == 0) goto c9RNE; else goto u9RNS;
       c9RNE: // global
           I64[Hp - 24] = sat_s9RnU_info;
           P64[Hp - 16] = _s9Rnp::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9RNS: // global
           if (R1 == 1) goto c9RNF; else goto c9RND;
       c9RNF: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9RNg_info;
           R1 = _s9Rnp::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c9RND: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9RMl_info;
           R1 = _s9Rnp::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RMh_info" {
     block_c9RMh_info:
         const _c9RMh;
         const 3;
         const 30;
 },
 _c9RNg() //  [R1]
         { []
         }
     {offset
       c9RNg: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9RNR; else goto c9RNQ;
       c9RNR: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RNQ: // global
           I64[Hp - 64] = sat_s9Ro5_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9RnZ_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 62;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RNg_info" {
     block_c9RNg_info:
         const _c9RNg;
         const 2;
         const 30;
 },
 _c9RMl() //  [R1]
         { []
         }
     {offset
       c9RMl: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9RNO; else goto c9RNN;
       c9RNO: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RNN: // global
           I64[Hp - 64] = sat_s9RnH_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9RnB_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 62;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RMl_info" {
     block_c9RMl_info:
         const _c9RMl;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.468416412 UTC

[section ""data" . Control.Exception.Base.bracketOnError_closure" {
     Control.Exception.Base.bracketOnError_closure:
         const Control.Exception.Base.bracketOnError_info;
 },
 Control.Exception.Base.bracketOnError_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9RPe: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.bracketOnError1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.bracketOnError_info" {
     Control.Exception.Base.bracketOnError_info:
         const Control.Exception.Base.bracketOnError_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.47205292 UTC

[section ""data" . Control.Exception.Base.runtimeError_closure" {
     Control.Exception.Base.runtimeError_closure:
         const Control.Exception.Base.runtimeError_info;
         const 0;
 },
 Control.Exception.Base.runtimeError_entry() //  [R2]
         { []
         }
     {offset
       c9RPr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9RPs; else goto c9RPt;
       c9RPs: // global
           R2 = R2;
           R1 = Control.Exception.Base.runtimeError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RPt: // global
           I64[Sp - 8] = block_c9RPp_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.runtimeError_info" {
     Control.Exception.Base.runtimeError_info:
         const Control.Exception.Base.runtimeError_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const S9Ru2_srt+64;
 },
 _c9RPp() //  [R1]
         { []
         }
     {offset
       c9RPp: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RPp_info" {
     block_c9RPp_info:
         const _c9RPp;
         const 0;
         const 4294967326;
         const S9Ru2_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.477056402 UTC

[section ""cstring" . lvl_r9PFt_bytes" {
     lvl_r9PFt_bytes:
         I8[] [79,111,112,115,33,32,32,69,110,116,101,114,101,100,32,97,98,115,101,110,116,32,97,114,103,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.479841811 UTC

[section ""data" . Control.Exception.Base.absentError_closure" {
     Control.Exception.Base.absentError_closure:
         const Control.Exception.Base.absentError_info;
         const 0;
 },
 sat_s9Ro9_entry() //  [R1]
         { []
         }
     {offset
       c9RPP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RPQ; else goto c9RPR;
       c9RPQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RPR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9Ro9_info" {
     sat_s9Ro9_info:
         const sat_s9Ro9_entry;
         const 4294967296;
         const 17;
 },
 Control.Exception.Base.absentError_entry() //  [R2]
         { []
         }
     {offset
       c9RPU: // global
           _s9Ro8::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9RPV; else goto c9RPW;
       c9RPW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9RPY; else goto c9RPX;
       c9RPY: // global
           HpAlloc = 24;
           goto c9RPV;
       c9RPV: // global
           R2 = _s9Ro8::I64;
           R1 = Control.Exception.Base.absentError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RPX: // global
           I64[Hp - 16] = sat_s9Ro9_info;
           I64[Hp] = _s9Ro8::I64;
           I64[Sp - 8] = block_c9RPS_info;
           R3 = Hp - 16;
           R2 = lvl_r9PFt_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.absentError_info" {
     Control.Exception.Base.absentError_info:
         const Control.Exception.Base.absentError_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const S9Ru2_srt+72;
 },
 _c9RPS() //  [R1]
         { []
         }
     {offset
       c9RPS: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RPS_info" {
     block_c9RPS_info:
         const _c9RPS;
         const 0;
         const 4294967326;
         const S9Ru2_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.486186314 UTC

[section ""cstring" . Control.Exception.Base.$trModule4_bytes" {
     Control.Exception.Base.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.487911205 UTC

[section ""data" . Control.Exception.Base.$trModule3_closure" {
     Control.Exception.Base.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.489524398 UTC

[section ""cstring" . Control.Exception.Base.$trModule2_bytes" {
     Control.Exception.Base.$trModule2_bytes:
         I8[] [67,111,110,116,114,111,108,46,69,120,99,101,112,116,105,111,110,46,66,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.491210095 UTC

[section ""data" . Control.Exception.Base.$trModule1_closure" {
     Control.Exception.Base.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.49290477 UTC

[section ""data" . Control.Exception.Base.$trModule_closure" {
     Control.Exception.Base.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Control.Exception.Base.$trModule3_closure+1;
         const Control.Exception.Base.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.49523785 UTC

[section ""data" . $krep_r9PFu_closure" {
     $krep_r9PFu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.497391307 UTC

[section ""data" . $krep1_r9PFv_closure" {
     $krep1_r9PFv_closure:
         const :_con_info;
         const $krep_r9PFu_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.4990902 UTC

[section ""data" . $krep2_r9PFw_closure" {
     $krep2_r9PFw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_r9PFv_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.500602241 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionPatternMatchFail4_bytes" {
     Control.Exception.Base.$fExceptionPatternMatchFail4_bytes:
         I8[] [80,97,116,116,101,114,110,77,97,116,99,104,70,97,105,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.502203485 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail3_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionPatternMatchFail4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.503820587 UTC

[section ""data" . Control.Exception.Base.$tcPatternMatchFail_closure" {
     Control.Exception.Base.$tcPatternMatchFail_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail3_closure+1;
         const GHC.Types.krep$*_closure;
         const 15470147969565509342;
         const 8416277433045206230;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.506001548 UTC

[section ""data" . $krep3_r9PFx_closure" {
     $krep3_r9PFx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcPatternMatchFail_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.507681149 UTC

[section ""data" . Control.Exception.Base.$tc'PatternMatchFail1_closure" {
     Control.Exception.Base.$tc'PatternMatchFail1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep3_r9PFx_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.509285877 UTC

[section ""cstring" . Control.Exception.Base.$tc'PatternMatchFail3_bytes" {
     Control.Exception.Base.$tc'PatternMatchFail3_bytes:
         I8[] [39,80,97,116,116,101,114,110,77,97,116,99,104,70,97,105,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.510945812 UTC

[section ""data" . Control.Exception.Base.$tc'PatternMatchFail2_closure" {
     Control.Exception.Base.$tc'PatternMatchFail2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'PatternMatchFail3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.512614952 UTC

[section ""data" . Control.Exception.Base.$tc'PatternMatchFail_closure" {
     Control.Exception.Base.$tc'PatternMatchFail_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'PatternMatchFail2_closure+1;
         const Control.Exception.Base.$tc'PatternMatchFail1_closure+4;
         const 5659337934556330582;
         const 79463786797963870;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.515923504 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail2_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail2_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail2_entry() //  [R1]
         { []
         }
     {offset
       c9RQI: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9RQJ; else goto c9RQK;
       c9RQJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RQK: // global
           (_c9RQA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RQA::I64 == 0) goto c9RQC; else goto c9RQB;
       c9RQC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RQB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RQA::I64;
           I64[Sp - 24] = block_c9RQD_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionPatternMatchFail3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 8416277433045206230;
           R2 = 15470147969565509342;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionPatternMatchFail2_info" {
     Control.Exception.Base.$fExceptionPatternMatchFail2_info:
         const Control.Exception.Base.$fExceptionPatternMatchFail2_entry;
         const 0;
         const 4294967317;
         const S9Ru2_srt+88;
 },
 _c9RQD() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c9RQD: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9RQE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9RQD_info" {
     block_c9RQD_info:
         const _c9RQD;
         const 0;
         const 30;
 },
 _c9RQE() //  []
         { []
         }
     {offset
       c9RQE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9RQN; else goto c9RQM;
       c9RQN: // global
           HpAlloc = 48;
           I64[Sp] = block_c9RQE_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9RQM: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9RQE_info" {
     block_c9RQE_info:
         const _c9RQE;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.52469609 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c9RRn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RRr; else goto c9RRs;
       c9RRr: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RRs: // global
           I64[Sp - 8] = block_c9RRk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9RRN; else goto c9RRl;
       u9RRN: // global
           call _c9RRk(R1) args: 0, res: 0, upd: 0;
       c9RRl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_info" {
     Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_info:
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S9Ru2_srt+96;
 },
 _c9RRk() //  [R1]
         { []
         }
     {offset
       c9RRk: // global
           I64[Sp - 8] = block_c9RRq_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RRk_info" {
     block_c9RRk_info:
         const _c9RRk;
         const 0;
         const 21474836510;
         const S9Ru2_srt+96;
 },
 _c9RRq() //  [R1]
         { []
         }
     {offset
       c9RRq: // global
           I64[Sp] = block_c9RRx_info;
           R3 = Control.Exception.Base.$fExceptionPatternMatchFail2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RRq_info" {
     block_c9RRq_info:
         const _c9RRq;
         const 1;
         const 21474836510;
         const S9Ru2_srt+96;
 },
 _c9RRx() //  [R1]
         { []
         }
     {offset
       c9RRx: // global
           if (R1 & 7 == 1) goto c9RRE; else goto c9RRI;
       c9RRE: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9RRI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RRL; else goto c9RRK;
       c9RRL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RRK: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RRx_info" {
     block_c9RRx_info:
         const _c9RRx;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.534331832 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionPatternMatchFail2_closure;
         const Control.Exception.Base.$fShowPatternMatchFail_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c9RSj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9RSn; else goto c9RSm;
       c9RSn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RSm: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionPatternMatchFail_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_info" {
     Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_info:
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9Ru2_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.538360841 UTC

[section ""cstring" . lvl1_r9PFy_bytes" {
     lvl1_r9PFy_bytes:
         I8[] [78,111,110,45,101,120,104,97,117,115,116,105,118,101,32,112,97,116,116,101,114,110,115,32,105,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.540601803 UTC

[section ""data" . lvl2_r9PFz_closure" {
     lvl2_r9PFz_closure:
         const lvl2_r9PFz_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r9PFz_entry() //  [R1]
         { []
         }
     {offset
       c9RSD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RSE; else goto c9RSF;
       c9RSE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RSF: // global
           (_c9RSA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RSA::I64 == 0) goto c9RSC; else goto c9RSB;
       c9RSC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RSB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RSA::I64;
           R2 = lvl1_r9PFy_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_r9PFz_info" {
     lvl2_r9PFz_info:
         const lvl2_r9PFz_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.544928626 UTC

[section ""data" . Control.Exception.Base.patError_closure" {
     Control.Exception.Base.patError_closure:
         const Control.Exception.Base.patError_info;
         const 0;
 },
 Control.Exception.Base.patError_entry() //  [R2]
         { []
         }
     {offset
       c9RSU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9RSV; else goto c9RSW;
       c9RSV: // global
           R2 = R2;
           R1 = Control.Exception.Base.patError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RSW: // global
           I64[Sp - 8] = block_c9RSS_info;
           R3 = lvl2_r9PFz_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.patError_info" {
     Control.Exception.Base.patError_info:
         const Control.Exception.Base.patError_entry;
         const 0;
         const 124554051598;
         const 4294967300;
         const S9Ru2_srt+120;
 },
 _c9RSS() //  [R1]
         { []
         }
     {offset
       c9RSS: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionPatternMatchFail_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RSS_info" {
     block_c9RSS_info:
         const _c9RSS;
         const 0;
         const 4294967326;
         const S9Ru2_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.549696841 UTC

[section ""cstring" . lvl3_r9PFA_bytes" {
     lvl3_r9PFA_bytes:
         I8[] [78,111,110,45,101,120,104,97,117,115,116,105,118,101,32,103,117,97,114,100,115,32,105,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.551851406 UTC

[section ""data" . lvl4_r9PFB_closure" {
     lvl4_r9PFB_closure:
         const lvl4_r9PFB_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r9PFB_entry() //  [R1]
         { []
         }
     {offset
       c9RTg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RTh; else goto c9RTi;
       c9RTh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RTi: // global
           (_c9RTd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RTd::I64 == 0) goto c9RTf; else goto c9RTe;
       c9RTf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RTe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RTd::I64;
           R2 = lvl3_r9PFA_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_r9PFB_info" {
     lvl4_r9PFB_info:
         const lvl4_r9PFB_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.556274545 UTC

[section ""data" . Control.Exception.Base.nonExhaustiveGuardsError_closure" {
     Control.Exception.Base.nonExhaustiveGuardsError_closure:
         const Control.Exception.Base.nonExhaustiveGuardsError_info;
         const 0;
 },
 Control.Exception.Base.nonExhaustiveGuardsError_entry() //  [R2]
         { []
         }
     {offset
       c9RTx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9RTy; else goto c9RTz;
       c9RTy: // global
           R2 = R2;
           R1 = Control.Exception.Base.nonExhaustiveGuardsError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RTz: // global
           I64[Sp - 8] = block_c9RTv_info;
           R3 = lvl4_r9PFB_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.nonExhaustiveGuardsError_info" {
     Control.Exception.Base.nonExhaustiveGuardsError_info:
         const Control.Exception.Base.nonExhaustiveGuardsError_entry;
         const 0;
         const 450971566094;
         const 4294967300;
         const S9Ru2_srt+120;
 },
 _c9RTv() //  [R1]
         { []
         }
     {offset
       c9RTv: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionPatternMatchFail_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RTv_info" {
     block_c9RTv_info:
         const _c9RTv;
         const 0;
         const 4294967326;
         const S9Ru2_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.56163899 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionRecSelError4_bytes" {
     Control.Exception.Base.$fExceptionRecSelError4_bytes:
         I8[] [82,101,99,83,101,108,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.563355675 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError3_closure" {
     Control.Exception.Base.$fExceptionRecSelError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionRecSelError4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.565191173 UTC

[section ""data" . Control.Exception.Base.$tcRecSelError_closure" {
     Control.Exception.Base.$tcRecSelError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 10415770337441550020;
         const 15768375346093691416;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.567299055 UTC

[section ""data" . $krep4_r9PFC_closure" {
     $krep4_r9PFC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcRecSelError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.568968101 UTC

[section ""data" . Control.Exception.Base.$tc'RecSelError1_closure" {
     Control.Exception.Base.$tc'RecSelError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep4_r9PFC_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.57067314 UTC

[section ""cstring" . Control.Exception.Base.$tc'RecSelError3_bytes" {
     Control.Exception.Base.$tc'RecSelError3_bytes:
         I8[] [39,82,101,99,83,101,108,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.572247682 UTC

[section ""data" . Control.Exception.Base.$tc'RecSelError2_closure" {
     Control.Exception.Base.$tc'RecSelError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'RecSelError3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.573987848 UTC

[section ""data" . Control.Exception.Base.$tc'RecSelError_closure" {
     Control.Exception.Base.$tc'RecSelError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'RecSelError2_closure+1;
         const Control.Exception.Base.$tc'RecSelError1_closure+4;
         const 5471381485413442404;
         const 14158408912397908002;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.577388851 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError2_closure" {
     Control.Exception.Base.$fExceptionRecSelError2_closure:
         const Control.Exception.Base.$fExceptionRecSelError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecSelError2_entry() //  [R1]
         { []
         }
     {offset
       c9RU5: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9RU6; else goto c9RU7;
       c9RU6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RU7: // global
           (_c9RTX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RTX::I64 == 0) goto c9RTZ; else goto c9RTY;
       c9RTZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RTY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RTX::I64;
           I64[Sp - 24] = block_c9RU0_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionRecSelError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 15768375346093691416;
           R2 = 10415770337441550020;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecSelError2_info" {
     Control.Exception.Base.$fExceptionRecSelError2_info:
         const Control.Exception.Base.$fExceptionRecSelError2_entry;
         const 0;
         const 4294967317;
         const S9Ru2_srt+88;
 },
 _c9RU0() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c9RU0: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9RU1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9RU0_info" {
     block_c9RU0_info:
         const _c9RU0;
         const 0;
         const 30;
 },
 _c9RU1() //  []
         { []
         }
     {offset
       c9RU1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9RUa; else goto c9RU9;
       c9RUa: // global
           HpAlloc = 48;
           I64[Sp] = block_c9RU1_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9RU9: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9RU1_info" {
     block_c9RU1_info:
         const _c9RU1;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.586051075 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecSelError_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c9RUK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RUO; else goto c9RUP;
       c9RUO: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RUP: // global
           I64[Sp - 8] = block_c9RUH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9RVa; else goto c9RUI;
       u9RVa: // global
           call _c9RUH(R1) args: 0, res: 0, upd: 0;
       c9RUI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecSelError_$cfromException_info" {
     Control.Exception.Base.$fExceptionRecSelError_$cfromException_info:
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_entry;
         const 0;
         const 13198434500622;
         const 4294967301;
         const S9Ru2_srt+96;
 },
 _c9RUH() //  [R1]
         { []
         }
     {offset
       c9RUH: // global
           I64[Sp - 8] = block_c9RUN_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RUH_info" {
     block_c9RUH_info:
         const _c9RUH;
         const 0;
         const 8800387989534;
         const S9Ru2_srt+96;
 },
 _c9RUN() //  [R1]
         { []
         }
     {offset
       c9RUN: // global
           I64[Sp] = block_c9RUU_info;
           R3 = Control.Exception.Base.$fExceptionRecSelError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RUN_info" {
     block_c9RUN_info:
         const _c9RUN;
         const 1;
         const 8800387989534;
         const S9Ru2_srt+96;
 },
 _c9RUU() //  [R1]
         { []
         }
     {offset
       c9RUU: // global
           if (R1 & 7 == 1) goto c9RV1; else goto c9RV5;
       c9RV1: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9RV5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RV8; else goto c9RV7;
       c9RV8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RV7: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RUU_info" {
     block_c9RUU_info:
         const _c9RUU;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.595231687 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError_closure" {
     Control.Exception.Base.$fExceptionRecSelError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionRecSelError2_closure;
         const Control.Exception.Base.$fShowRecSelError_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecSelError_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c9RVG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9RVK; else goto c9RVJ;
       c9RVK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RVJ: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionRecSelError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecSelError_$ctoException_info" {
     Control.Exception.Base.$fExceptionRecSelError_$ctoException_info:
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9Ru2_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.5992842 UTC

[section ""cstring" . lvl5_r9PFD_bytes" {
     lvl5_r9PFD_bytes:
         I8[] [78,111,32,109,97,116,99,104,32,105,110,32,114,101,99,111,114,100,32,115,101,108,101,99,116,111,114,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.602435439 UTC

[section ""data" . Control.Exception.Base.recSelError_closure" {
     Control.Exception.Base.recSelError_closure:
         const Control.Exception.Base.recSelError_info;
         const 0;
 },
 sat_s9RoE_entry() //  [R1]
         { []
         }
     {offset
       c9RW2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RW3; else goto c9RW4;
       c9RW3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RW4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9RoE_info" {
     sat_s9RoE_info:
         const sat_s9RoE_entry;
         const 4294967296;
         const 17;
 },
 Control.Exception.Base.recSelError_entry() //  [R2]
         { []
         }
     {offset
       c9RW7: // global
           _s9RoD::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9RW8; else goto c9RW9;
       c9RW9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9RWb; else goto c9RWa;
       c9RWb: // global
           HpAlloc = 24;
           goto c9RW8;
       c9RW8: // global
           R2 = _s9RoD::I64;
           R1 = Control.Exception.Base.recSelError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RWa: // global
           I64[Hp - 16] = sat_s9RoE_info;
           I64[Hp] = _s9RoD::I64;
           I64[Sp - 8] = block_c9RW5_info;
           R3 = Hp - 16;
           R2 = lvl5_r9PFD_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.recSelError_info" {
     Control.Exception.Base.recSelError_info:
         const Control.Exception.Base.recSelError_entry;
         const 0;
         const 21474836494;
         const 4294967300;
         const S9Ru2_srt+192;
 },
 _c9RW5() //  [R1]
         { []
         }
     {offset
       c9RW5: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionRecSelError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RW5_info" {
     block_c9RW5_info:
         const _c9RW5;
         const 0;
         const 4294967326;
         const S9Ru2_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.608955221 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionRecConError4_bytes" {
     Control.Exception.Base.$fExceptionRecConError4_bytes:
         I8[] [82,101,99,67,111,110,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.610607403 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError3_closure" {
     Control.Exception.Base.$fExceptionRecConError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionRecConError4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.612359064 UTC

[section ""data" . Control.Exception.Base.$tcRecConError_closure" {
     Control.Exception.Base.$tcRecConError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionRecConError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 12352028005606494596;
         const 6364281046760374976;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.614824756 UTC

[section ""data" . $krep5_r9PFE_closure" {
     $krep5_r9PFE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcRecConError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.6165731 UTC

[section ""data" . Control.Exception.Base.$tc'RecConError1_closure" {
     Control.Exception.Base.$tc'RecConError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep5_r9PFE_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.618369301 UTC

[section ""cstring" . Control.Exception.Base.$tc'RecConError3_bytes" {
     Control.Exception.Base.$tc'RecConError3_bytes:
         I8[] [39,82,101,99,67,111,110,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.620043943 UTC

[section ""data" . Control.Exception.Base.$tc'RecConError2_closure" {
     Control.Exception.Base.$tc'RecConError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'RecConError3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.622349765 UTC

[section ""data" . Control.Exception.Base.$tc'RecConError_closure" {
     Control.Exception.Base.$tc'RecConError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'RecConError2_closure+1;
         const Control.Exception.Base.$tc'RecConError1_closure+4;
         const 9626440070376619587;
         const 11467734131060317064;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.626089662 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError2_closure" {
     Control.Exception.Base.$fExceptionRecConError2_closure:
         const Control.Exception.Base.$fExceptionRecConError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecConError2_entry() //  [R1]
         { []
         }
     {offset
       c9RWN: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9RWO; else goto c9RWP;
       c9RWO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RWP: // global
           (_c9RWF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RWF::I64 == 0) goto c9RWH; else goto c9RWG;
       c9RWH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RWG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RWF::I64;
           I64[Sp - 24] = block_c9RWI_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionRecConError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 6364281046760374976;
           R2 = 12352028005606494596;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecConError2_info" {
     Control.Exception.Base.$fExceptionRecConError2_info:
         const Control.Exception.Base.$fExceptionRecConError2_entry;
         const 0;
         const 4294967317;
         const S9Ru2_srt+88;
 },
 _c9RWI() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c9RWI: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9RWJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9RWI_info" {
     block_c9RWI_info:
         const _c9RWI;
         const 0;
         const 30;
 },
 _c9RWJ() //  []
         { []
         }
     {offset
       c9RWJ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9RWS; else goto c9RWR;
       c9RWS: // global
           HpAlloc = 48;
           I64[Sp] = block_c9RWJ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9RWR: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9RWJ_info" {
     block_c9RWJ_info:
         const _c9RWJ;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.634382871 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionRecConError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecConError_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c9RXs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RXw; else goto c9RXx;
       c9RXw: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecConError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RXx: // global
           I64[Sp - 8] = block_c9RXp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9RXS; else goto c9RXq;
       u9RXS: // global
           call _c9RXp(R1) args: 0, res: 0, upd: 0;
       c9RXq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecConError_$cfromException_info" {
     Control.Exception.Base.$fExceptionRecConError_$cfromException_info:
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_entry;
         const 0;
         const 422216760033294;
         const 4294967301;
         const S9Ru2_srt+96;
 },
 _c9RXp() //  [R1]
         { []
         }
     {offset
       c9RXp: // global
           I64[Sp - 8] = block_c9RXv_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RXp_info" {
     block_c9RXp_info:
         const _c9RXp;
         const 0;
         const 281479271677982;
         const S9Ru2_srt+96;
 },
 _c9RXv() //  [R1]
         { []
         }
     {offset
       c9RXv: // global
           I64[Sp] = block_c9RXC_info;
           R3 = Control.Exception.Base.$fExceptionRecConError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RXv_info" {
     block_c9RXv_info:
         const _c9RXv;
         const 1;
         const 281479271677982;
         const S9Ru2_srt+96;
 },
 _c9RXC() //  [R1]
         { []
         }
     {offset
       c9RXC: // global
           if (R1 & 7 == 1) goto c9RXJ; else goto c9RXN;
       c9RXJ: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9RXN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RXQ; else goto c9RXP;
       c9RXQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RXP: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RXC_info" {
     block_c9RXC_info:
         const _c9RXC;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.643366449 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError_closure" {
     Control.Exception.Base.$fExceptionRecConError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionRecConError2_closure;
         const Control.Exception.Base.$fShowRecConError_closure+1;
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionRecConError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionRecConError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionRecConError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecConError_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c9RYo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9RYs; else goto c9RYr;
       c9RYs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecConError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RYr: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionRecConError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecConError_$ctoException_info" {
     Control.Exception.Base.$fExceptionRecConError_$ctoException_info:
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9Ru2_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.647480249 UTC

[section ""cstring" . lvl6_r9PFF_bytes" {
     lvl6_r9PFF_bytes:
         I8[] [77,105,115,115,105,110,103,32,102,105,101,108,100,32,105,110,32,114,101,99,111,114,100,32,99,111,110,115,116,114,117,99,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.650018347 UTC

[section ""data" . lvl7_r9PFG_closure" {
     lvl7_r9PFG_closure:
         const lvl7_r9PFG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r9PFG_entry() //  [R1]
         { []
         }
     {offset
       c9RYI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RYJ; else goto c9RYK;
       c9RYJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RYK: // global
           (_c9RYF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RYF::I64 == 0) goto c9RYH; else goto c9RYG;
       c9RYH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RYG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RYF::I64;
           R2 = lvl6_r9PFF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r9PFG_info" {
     lvl7_r9PFG_info:
         const lvl7_r9PFG_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.654159243 UTC

[section ""data" . Control.Exception.Base.recConError_closure" {
     Control.Exception.Base.recConError_closure:
         const Control.Exception.Base.recConError_info;
         const 0;
 },
 Control.Exception.Base.recConError_entry() //  [R2]
         { []
         }
     {offset
       c9RYZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9RZ0; else goto c9RZ1;
       c9RZ0: // global
           R2 = R2;
           R1 = Control.Exception.Base.recConError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RZ1: // global
           I64[Sp - 8] = block_c9RYX_info;
           R3 = lvl7_r9PFG_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.recConError_info" {
     Control.Exception.Base.recConError_info:
         const Control.Exception.Base.recConError_entry;
         const 0;
         const 114353504256014;
         const 4294967300;
         const S9Ru2_srt+144;
 },
 _c9RYX() //  [R1]
         { []
         }
     {offset
       c9RYX: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionRecConError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9RYX_info" {
     block_c9RYX_info:
         const _c9RYX;
         const 0;
         const 4294967326;
         const S9Ru2_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.659466427 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionRecUpdError4_bytes" {
     Control.Exception.Base.$fExceptionRecUpdError4_bytes:
         I8[] [82,101,99,85,112,100,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.661182329 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError3_closure" {
     Control.Exception.Base.$fExceptionRecUpdError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionRecUpdError4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.663157107 UTC

[section ""data" . Control.Exception.Base.$tcRecUpdError_closure" {
     Control.Exception.Base.$tcRecUpdError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 15702205725616076489;
         const 17185013925011980063;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.664948606 UTC

[section ""data" . $krep6_r9PFH_closure" {
     $krep6_r9PFH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcRecUpdError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.666589262 UTC

[section ""data" . Control.Exception.Base.$tc'RecUpdError1_closure" {
     Control.Exception.Base.$tc'RecUpdError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep6_r9PFH_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.668306327 UTC

[section ""cstring" . Control.Exception.Base.$tc'RecUpdError3_bytes" {
     Control.Exception.Base.$tc'RecUpdError3_bytes:
         I8[] [39,82,101,99,85,112,100,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.669937794 UTC

[section ""data" . Control.Exception.Base.$tc'RecUpdError2_closure" {
     Control.Exception.Base.$tc'RecUpdError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'RecUpdError3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.67162513 UTC

[section ""data" . Control.Exception.Base.$tc'RecUpdError_closure" {
     Control.Exception.Base.$tc'RecUpdError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'RecUpdError2_closure+1;
         const Control.Exception.Base.$tc'RecUpdError1_closure+4;
         const 16559845159098082290;
         const 2874382059338705699;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.675247188 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError2_closure" {
     Control.Exception.Base.$fExceptionRecUpdError2_closure:
         const Control.Exception.Base.$fExceptionRecUpdError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecUpdError2_entry() //  [R1]
         { []
         }
     {offset
       c9RZx: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9RZy; else goto c9RZz;
       c9RZy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RZz: // global
           (_c9RZp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RZp::I64 == 0) goto c9RZr; else goto c9RZq;
       c9RZr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RZq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RZp::I64;
           I64[Sp - 24] = block_c9RZs_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionRecUpdError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 17185013925011980063;
           R2 = 15702205725616076489;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecUpdError2_info" {
     Control.Exception.Base.$fExceptionRecUpdError2_info:
         const Control.Exception.Base.$fExceptionRecUpdError2_entry;
         const 0;
         const 4294967317;
         const S9Ru2_srt+88;
 },
 _c9RZs() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c9RZs: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9RZt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9RZs_info" {
     block_c9RZs_info:
         const _c9RZs;
         const 0;
         const 30;
 },
 _c9RZt() //  []
         { []
         }
     {offset
       c9RZt: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9RZC; else goto c9RZB;
       c9RZC: // global
           HpAlloc = 48;
           I64[Sp] = block_c9RZt_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9RZB: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9RZt_info" {
     block_c9RZt_info:
         const _c9RZt;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.683735888 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecUpdError_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c9S0c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9S0g; else goto c9S0h;
       c9S0g: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S0h: // global
           I64[Sp - 8] = block_c9S09_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9S0C; else goto c9S0a;
       u9S0C: // global
           call _c9S09(R1) args: 0, res: 0, upd: 0;
       c9S0a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecUpdError_$cfromException_info" {
     Control.Exception.Base.$fExceptionRecUpdError_$cfromException_info:
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_entry;
         const 0;
         const 27021602059190286;
         const 4294967301;
         const S9Ru2_srt+96;
 },
 _c9S09() //  [R1]
         { []
         }
     {offset
       c9S09: // global
           I64[Sp - 8] = block_c9S0f_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9S09_info" {
     block_c9S09_info:
         const _c9S09;
         const 0;
         const 18014402804449310;
         const S9Ru2_srt+96;
 },
 _c9S0f() //  [R1]
         { []
         }
     {offset
       c9S0f: // global
           I64[Sp] = block_c9S0m_info;
           R3 = Control.Exception.Base.$fExceptionRecUpdError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9S0f_info" {
     block_c9S0f_info:
         const _c9S0f;
         const 1;
         const 18014402804449310;
         const S9Ru2_srt+96;
 },
 _c9S0m() //  [R1]
         { []
         }
     {offset
       c9S0m: // global
           if (R1 & 7 == 1) goto c9S0t; else goto c9S0x;
       c9S0t: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9S0x: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9S0A; else goto c9S0z;
       c9S0A: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9S0z: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9S0m_info" {
     block_c9S0m_info:
         const _c9S0m;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.693231246 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError_closure" {
     Control.Exception.Base.$fExceptionRecUpdError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionRecUpdError2_closure;
         const Control.Exception.Base.$fShowRecUpdError_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecUpdError_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c9S18: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9S1c; else goto c9S1b;
       c9S1c: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S1b: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionRecUpdError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionRecUpdError_$ctoException_info" {
     Control.Exception.Base.$fExceptionRecUpdError_$ctoException_info:
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9Ru2_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.697158819 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNoMethodError4_bytes" {
     Control.Exception.Base.$fExceptionNoMethodError4_bytes:
         I8[] [78,111,77,101,116,104,111,100,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.699094274 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError3_closure" {
     Control.Exception.Base.$fExceptionNoMethodError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionNoMethodError4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.700686114 UTC

[section ""data" . Control.Exception.Base.$tcNoMethodError_closure" {
     Control.Exception.Base.$tcNoMethodError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 11351432124310594529;
         const 14675551822527927261;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.702471591 UTC

[section ""data" . $krep7_r9PFI_closure" {
     $krep7_r9PFI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcNoMethodError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.704238183 UTC

[section ""data" . Control.Exception.Base.$tc'NoMethodError1_closure" {
     Control.Exception.Base.$tc'NoMethodError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep7_r9PFI_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.705921669 UTC

[section ""cstring" . Control.Exception.Base.$tc'NoMethodError3_bytes" {
     Control.Exception.Base.$tc'NoMethodError3_bytes:
         I8[] [39,78,111,77,101,116,104,111,100,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.707597729 UTC

[section ""data" . Control.Exception.Base.$tc'NoMethodError2_closure" {
     Control.Exception.Base.$tc'NoMethodError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'NoMethodError3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.709742028 UTC

[section ""data" . Control.Exception.Base.$tc'NoMethodError_closure" {
     Control.Exception.Base.$tc'NoMethodError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'NoMethodError2_closure+1;
         const Control.Exception.Base.$tc'NoMethodError1_closure+4;
         const 17186686744263410642;
         const 16452408278578849625;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.713051288 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError2_closure" {
     Control.Exception.Base.$fExceptionNoMethodError2_closure:
         const Control.Exception.Base.$fExceptionNoMethodError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNoMethodError2_entry() //  [R1]
         { []
         }
     {offset
       c9S1E: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9S1F; else goto c9S1G;
       c9S1F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9S1G: // global
           (_c9S1w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9S1w::I64 == 0) goto c9S1y; else goto c9S1x;
       c9S1y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9S1x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9S1w::I64;
           I64[Sp - 24] = block_c9S1z_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionNoMethodError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 14675551822527927261;
           R2 = 11351432124310594529;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNoMethodError2_info" {
     Control.Exception.Base.$fExceptionNoMethodError2_info:
         const Control.Exception.Base.$fExceptionNoMethodError2_entry;
         const 0;
         const 4294967317;
         const S9Ru2_srt+88;
 },
 _c9S1z() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c9S1z: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9S1A() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9S1z_info" {
     block_c9S1z_info:
         const _c9S1z;
         const 0;
         const 30;
 },
 _c9S1A() //  []
         { []
         }
     {offset
       c9S1A: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9S1J; else goto c9S1I;
       c9S1J: // global
           HpAlloc = 48;
           I64[Sp] = block_c9S1A_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9S1I: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9S1A_info" {
     block_c9S1A_info:
         const _c9S1A;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.721973246 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNoMethodError_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c9S2j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9S2n; else goto c9S2o;
       c9S2n: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S2o: // global
           I64[Sp - 8] = block_c9S2g_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9S2J; else goto c9S2h;
       u9S2J: // global
           call _c9S2g(R1) args: 0, res: 0, upd: 0;
       c9S2h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNoMethodError_$cfromException_info" {
     Control.Exception.Base.$fExceptionNoMethodError_$cfromException_info:
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_entry;
         const 0;
         const 432345568522534926;
         const 4294967301;
         const S9Ru2_srt+96;
 },
 _c9S2g() //  [R1]
         { []
         }
     {offset
       c9S2g: // global
           I64[Sp - 8] = block_c9S2m_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9S2g_info" {
     block_c9S2g_info:
         const _c9S2g;
         const 0;
         const 288230380446679070;
         const S9Ru2_srt+96;
 },
 _c9S2m() //  [R1]
         { []
         }
     {offset
       c9S2m: // global
           I64[Sp] = block_c9S2t_info;
           R3 = Control.Exception.Base.$fExceptionNoMethodError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9S2m_info" {
     block_c9S2m_info:
         const _c9S2m;
         const 1;
         const 288230380446679070;
         const S9Ru2_srt+96;
 },
 _c9S2t() //  [R1]
         { []
         }
     {offset
       c9S2t: // global
           if (R1 & 7 == 1) goto c9S2A; else goto c9S2E;
       c9S2A: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9S2E: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9S2H; else goto c9S2G;
       c9S2H: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9S2G: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9S2t_info" {
     block_c9S2t_info:
         const _c9S2t;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.730961724 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError_closure" {
     Control.Exception.Base.$fExceptionNoMethodError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionNoMethodError2_closure;
         const Control.Exception.Base.$fShowNoMethodError_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNoMethodError_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c9S3f: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9S3j; else goto c9S3i;
       c9S3j: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S3i: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionNoMethodError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNoMethodError_$ctoException_info" {
     Control.Exception.Base.$fExceptionNoMethodError_$ctoException_info:
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9Ru2_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.735357928 UTC

[section ""cstring" . lvl8_r9PFJ_bytes" {
     lvl8_r9PFJ_bytes:
         I8[] [78,111,32,105,110,115,116,97,110,99,101,32,110,111,114,32,100,101,102,97,117,108,116,32,109,101,116,104,111,100,32,102,111,114,32,99,108,97,115,115,32,111,112,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.737546753 UTC

[section ""data" . lvl9_r9PFK_closure" {
     lvl9_r9PFK_closure:
         const lvl9_r9PFK_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r9PFK_entry() //  [R1]
         { []
         }
     {offset
       c9S3z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9S3A; else goto c9S3B;
       c9S3A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9S3B: // global
           (_c9S3w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9S3w::I64 == 0) goto c9S3y; else goto c9S3x;
       c9S3y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9S3x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9S3w::I64;
           R2 = lvl8_r9PFJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_r9PFK_info" {
     lvl9_r9PFK_info:
         const lvl9_r9PFK_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.741690053 UTC

[section ""data" . Control.Exception.Base.noMethodBindingError_closure" {
     Control.Exception.Base.noMethodBindingError_closure:
         const Control.Exception.Base.noMethodBindingError_info;
         const 0;
 },
 Control.Exception.Base.noMethodBindingError_entry() //  [R2]
         { []
         }
     {offset
       c9S3Q: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9S3R; else goto c9S3S;
       c9S3R: // global
           R2 = R2;
           R1 = Control.Exception.Base.noMethodBindingError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S3S: // global
           I64[Sp - 8] = block_c9S3O_info;
           R3 = lvl9_r9PFK_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.noMethodBindingError_info" {
     Control.Exception.Base.noMethodBindingError_info:
         const Control.Exception.Base.noMethodBindingError_entry;
         const 0;
         const 117093594606600206;
         const 4294967300;
         const S9Ru2_srt+144;
 },
 _c9S3O() //  [R1]
         { []
         }
     {offset
       c9S3O: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionNoMethodError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9S3O_info" {
     block_c9S3O_info:
         const _c9S3O;
         const 0;
         const 4294967326;
         const S9Ru2_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.746816178 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionTypeError4_bytes" {
     Control.Exception.Base.$fExceptionTypeError4_bytes:
         I8[] [84,121,112,101,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.748516054 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError3_closure" {
     Control.Exception.Base.$fExceptionTypeError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionTypeError4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.750385903 UTC

[section ""data" . Control.Exception.Base.$tcTypeError_closure" {
     Control.Exception.Base.$tcTypeError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionTypeError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 16164392450212773017;
         const 7054022894506300317;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.752228824 UTC

[section ""data" . $krep8_r9PFL_closure" {
     $krep8_r9PFL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcTypeError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.754502499 UTC

[section ""data" . Control.Exception.Base.$tc'TypeError1_closure" {
     Control.Exception.Base.$tc'TypeError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep8_r9PFL_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.756120747 UTC

[section ""cstring" . Control.Exception.Base.$tc'TypeError3_bytes" {
     Control.Exception.Base.$tc'TypeError3_bytes:
         I8[] [39,84,121,112,101,69,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.758107097 UTC

[section ""data" . Control.Exception.Base.$tc'TypeError2_closure" {
     Control.Exception.Base.$tc'TypeError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'TypeError3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.759810592 UTC

[section ""data" . Control.Exception.Base.$tc'TypeError_closure" {
     Control.Exception.Base.$tc'TypeError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'TypeError2_closure+1;
         const Control.Exception.Base.$tc'TypeError1_closure+4;
         const 2042750002965703545;
         const 3275664116896771855;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.763099471 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError2_closure" {
     Control.Exception.Base.$fExceptionTypeError2_closure:
         const Control.Exception.Base.$fExceptionTypeError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionTypeError2_entry() //  [R1]
         { []
         }
     {offset
       c9S4o: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9S4p; else goto c9S4q;
       c9S4p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9S4q: // global
           (_c9S4g::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9S4g::I64 == 0) goto c9S4i; else goto c9S4h;
       c9S4i: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9S4h: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9S4g::I64;
           I64[Sp - 24] = block_c9S4j_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionTypeError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 7054022894506300317;
           R2 = 16164392450212773017;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionTypeError2_info" {
     Control.Exception.Base.$fExceptionTypeError2_info:
         const Control.Exception.Base.$fExceptionTypeError2_entry;
         const 0;
         const 4294967317;
         const S9Ru2_srt+88;
 },
 _c9S4j() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c9S4j: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9S4k() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9S4j_info" {
     block_c9S4j_info:
         const _c9S4j;
         const 0;
         const 30;
 },
 _c9S4k() //  []
         { []
         }
     {offset
       c9S4k: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9S4t; else goto c9S4s;
       c9S4t: // global
           HpAlloc = 48;
           I64[Sp] = block_c9S4k_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9S4s: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9S4k_info" {
     block_c9S4k_info:
         const _c9S4k;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.771907051 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionTypeError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionTypeError_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c9S53: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9S57; else goto c9S58;
       c9S57: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionTypeError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S58: // global
           I64[Sp - 8] = block_c9S50_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9S5t; else goto c9S51;
       u9S5t: // global
           call _c9S50(R1) args: 0, res: 0, upd: 0;
       c9S51: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionTypeError_$cfromException_info" {
     Control.Exception.Base.$fExceptionTypeError_$cfromException_info:
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S9Ru2_srt+344;
 },
 _c9S50() //  [R1]
         { []
         }
     {offset
       c9S50: // global
           I64[Sp - 8] = block_c9S56_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9S50_info" {
     block_c9S50_info:
         const _c9S50;
         const 0;
         const 12884901918;
         const S9Ru2_srt+352;
 },
 _c9S56() //  [R1]
         { []
         }
     {offset
       c9S56: // global
           I64[Sp] = block_c9S5d_info;
           R3 = Control.Exception.Base.$fExceptionTypeError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9S56_info" {
     block_c9S56_info:
         const _c9S56;
         const 1;
         const 12884901918;
         const S9Ru2_srt+352;
 },
 _c9S5d() //  [R1]
         { []
         }
     {offset
       c9S5d: // global
           if (R1 & 7 == 1) goto c9S5k; else goto c9S5o;
       c9S5k: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9S5o: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9S5r; else goto c9S5q;
       c9S5r: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9S5q: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9S5d_info" {
     block_c9S5d_info:
         const _c9S5d;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.780438155 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError_closure" {
     Control.Exception.Base.$fExceptionTypeError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionTypeError2_closure;
         const Control.Exception.Base.$fShowTypeError_closure+1;
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionTypeError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionTypeError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionTypeError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionTypeError_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c9S5Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9S63; else goto c9S62;
       c9S63: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionTypeError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S62: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionTypeError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionTypeError_$ctoException_info" {
     Control.Exception.Base.$fExceptionTypeError_$ctoException_info:
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9Ru2_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.785420615 UTC

[section ""data" . Control.Exception.Base.typeError_closure" {
     Control.Exception.Base.typeError_closure:
         const Control.Exception.Base.typeError_info;
         const 0;
 },
 Control.Exception.Base.typeError_entry() //  [R2]
         { []
         }
     {offset
       c9S6i: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9S6j; else goto c9S6k;
       c9S6j: // global
           R2 = R2;
           R1 = Control.Exception.Base.typeError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S6k: // global
           I64[Sp - 8] = block_c9S6g_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.typeError_info" {
     Control.Exception.Base.typeError_info:
         const Control.Exception.Base.typeError_entry;
         const 0;
         const 21474836494;
         const 4294967300;
         const S9Ru2_srt+368;
 },
 _c9S6g() //  [R1]
         { []
         }
     {offset
       c9S6g: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionTypeError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9S6g_info" {
     block_c9S6g_info:
         const _c9S6g;
         const 0;
         const 4294967326;
         const S9Ru2_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.790650657 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNonTermination5_bytes" {
     Control.Exception.Base.$fExceptionNonTermination5_bytes:
         I8[] [78,111,110,84,101,114,109,105,110,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.792257275 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination4_closure" {
     Control.Exception.Base.$fExceptionNonTermination4_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionNonTermination5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.794321851 UTC

[section ""data" . Control.Exception.Base.$tcNonTermination_closure" {
     Control.Exception.Base.$tcNonTermination_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination4_closure+1;
         const GHC.Types.krep$*_closure;
         const 3579424895879668618;
         const 10599900892006414641;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.796044702 UTC

[section ""data" . Control.Exception.Base.$tc'NonTermination1_closure" {
     Control.Exception.Base.$tc'NonTermination1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcNonTermination_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.797686009 UTC

[section ""cstring" . Control.Exception.Base.$tc'NonTermination3_bytes" {
     Control.Exception.Base.$tc'NonTermination3_bytes:
         I8[] [39,78,111,110,84,101,114,109,105,110,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.799299547 UTC

[section ""data" . Control.Exception.Base.$tc'NonTermination2_closure" {
     Control.Exception.Base.$tc'NonTermination2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'NonTermination3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.801002534 UTC

[section ""data" . Control.Exception.Base.$tc'NonTermination_closure" {
     Control.Exception.Base.$tc'NonTermination_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'NonTermination2_closure+1;
         const Control.Exception.Base.$tc'NonTermination1_closure+1;
         const 12968537629115503750;
         const 16395462767232503200;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.804297504 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination3_closure" {
     Control.Exception.Base.$fExceptionNonTermination3_closure:
         const Control.Exception.Base.$fExceptionNonTermination3_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination3_entry() //  [R1]
         { []
         }
     {offset
       c9S6P: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9S6Q; else goto c9S6R;
       c9S6Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9S6R: // global
           (_c9S6H::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9S6H::I64 == 0) goto c9S6J; else goto c9S6I;
       c9S6J: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9S6I: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9S6H::I64;
           I64[Sp - 24] = block_c9S6K_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionNonTermination4_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 10599900892006414641;
           R2 = 3579424895879668618;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNonTermination3_info" {
     Control.Exception.Base.$fExceptionNonTermination3_info:
         const Control.Exception.Base.$fExceptionNonTermination3_entry;
         const 0;
         const 4294967317;
         const S9Ru2_srt+392;
 },
 _c9S6K() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c9S6K: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9S6L() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9S6K_info" {
     block_c9S6K_info:
         const _c9S6K;
         const 0;
         const 30;
 },
 _c9S6L() //  []
         { []
         }
     {offset
       c9S6L: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9S6U; else goto c9S6T;
       c9S6U: // global
           HpAlloc = 48;
           I64[Sp] = block_c9S6L_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9S6T: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9S6L_info" {
     block_c9S6L_info:
         const _c9S6L;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.811708424 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNestedAtomically5_bytes" {
     Control.Exception.Base.$fExceptionNestedAtomically5_bytes:
         I8[] [78,101,115,116,101,100,65,116,111,109,105,99,97,108,108,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.813427686 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically4_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically4_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionNestedAtomically5_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.815182303 UTC

[section ""data" . Control.Exception.Base.$tcNestedAtomically_closure" {
     Control.Exception.Base.$tcNestedAtomically_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically4_closure+1;
         const GHC.Types.krep$*_closure;
         const 13388460688970090897;
         const 8422109474180001052;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.816977188 UTC

[section ""data" . Control.Exception.Base.$tc'NestedAtomically1_closure" {
     Control.Exception.Base.$tc'NestedAtomically1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcNestedAtomically_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.820456186 UTC

[section ""cstring" . Control.Exception.Base.$tc'NestedAtomically3_bytes" {
     Control.Exception.Base.$tc'NestedAtomically3_bytes:
         I8[] [39,78,101,115,116,101,100,65,116,111,109,105,99,97,108,108,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.822204225 UTC

[section ""data" . Control.Exception.Base.$tc'NestedAtomically2_closure" {
     Control.Exception.Base.$tc'NestedAtomically2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'NestedAtomically3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.823990018 UTC

[section ""data" . Control.Exception.Base.$tc'NestedAtomically_closure" {
     Control.Exception.Base.$tc'NestedAtomically_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'NestedAtomically2_closure+1;
         const Control.Exception.Base.$tc'NestedAtomically1_closure+1;
         const 4753625237420970988;
         const 7635940481883810337;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.827421633 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically3_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically3_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically3_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically3_entry() //  [R1]
         { []
         }
     {offset
       c9S7F: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9S7G; else goto c9S7H;
       c9S7G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9S7H: // global
           (_c9S7x::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9S7x::I64 == 0) goto c9S7z; else goto c9S7y;
       c9S7z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9S7y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9S7x::I64;
           I64[Sp - 24] = block_c9S7A_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionNestedAtomically4_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 8422109474180001052;
           R2 = 13388460688970090897;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNestedAtomically3_info" {
     Control.Exception.Base.$fExceptionNestedAtomically3_info:
         const Control.Exception.Base.$fExceptionNestedAtomically3_entry;
         const 0;
         const 4294967317;
         const S9Ru2_srt+392;
 },
 _c9S7A() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       c9S7A: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9S7B() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9S7A_info" {
     block_c9S7A_info:
         const _c9S7A;
         const 0;
         const 30;
 },
 _c9S7B() //  []
         { []
         }
     {offset
       c9S7B: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9S7K; else goto c9S7J;
       c9S7K: // global
           HpAlloc = 48;
           I64[Sp] = block_c9S7B_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9S7J: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9S7B_info" {
     block_c9S7B_info:
         const _c9S7B;
         const 1093;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.836147112 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure" {
     Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure:
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c9S8k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9S8o; else goto c9S8p;
       c9S8o: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S8p: // global
           I64[Sp - 8] = block_c9S8h_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9S8K; else goto c9S8i;
       u9S8K: // global
           call _c9S8h(R1) args: 0, res: 0, upd: 0;
       c9S8i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNonTermination_$cfromException_info" {
     Control.Exception.Base.$fExceptionNonTermination_$cfromException_info:
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_entry;
         const 0;
         const 416611827726;
         const 4294967301;
         const S9Ru2_srt+360;
 },
 _c9S8h() //  [R1]
         { []
         }
     {offset
       c9S8h: // global
           I64[Sp - 8] = block_c9S8n_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9S8h_info" {
     block_c9S8h_info:
         const _c9S8h;
         const 0;
         const 279172874270;
         const S9Ru2_srt+360;
 },
 _c9S8n() //  [R1]
         { []
         }
     {offset
       c9S8n: // global
           I64[Sp] = block_c9S8u_info;
           R3 = Control.Exception.Base.$fExceptionNonTermination3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9S8n_info" {
     block_c9S8n_info:
         const _c9S8n;
         const 1;
         const 279172874270;
         const S9Ru2_srt+360;
 },
 _c9S8u() //  [R1]
         { []
         }
     {offset
       c9S8u: // global
           if (R1 & 7 == 1) goto c9S8B; else goto c9S8F;
       c9S8B: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9S8F: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9S8I; else goto c9S8H;
       c9S8I: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9S8H: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9S8u_info" {
     block_c9S8u_info:
         const _c9S8u;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.845059299 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination_closure" {
     Control.Exception.Base.$fExceptionNonTermination_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionNonTermination3_closure;
         const Control.Exception.Base.$fShowNonTermination_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure" {
     Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure:
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c9S9g: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9S9k; else goto c9S9j;
       c9S9k: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S9j: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionNonTermination_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNonTermination_$ctoException_info" {
     Control.Exception.Base.$fExceptionNonTermination_$ctoException_info:
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9Ru2_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.849793073 UTC

[section ""data" . Control.Exception.Base.nonTermination_closure" {
     Control.Exception.Base.nonTermination_closure:
         const Control.Exception.Base.nonTermination_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.nonTermination_entry() //  [R1]
         { []
         }
     {offset
       c9S9z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9S9A; else goto c9S9B;
       c9S9A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9S9B: // global
           (_c9S9w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9S9w::I64 == 0) goto c9S9y; else goto c9S9x;
       c9S9y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9S9x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9S9w::I64;
           R2 = Control.Exception.Base.NonTermination_closure+1;
           Sp = Sp - 16;
           call Control.Exception.Base.$fExceptionNonTermination_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.nonTermination_info" {
     Control.Exception.Base.nonTermination_info:
         const Control.Exception.Base.nonTermination_entry;
         const 0;
         const 4294967317;
         const S9Ru2_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.855552637 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_entry() //  [R2]
         { []
         }
     {offset
       c9S9R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9S9V; else goto c9S9W;
       c9S9V: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S9W: // global
           I64[Sp - 8] = block_c9S9O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Sah; else goto c9S9P;
       u9Sah: // global
           call _c9S9O(R1) args: 0, res: 0, upd: 0;
       c9S9P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_info" {
     Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_info:
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_entry;
         const 0;
         const 6601364733966;
         const 4294967301;
         const S9Ru2_srt+360;
 },
 _c9S9O() //  [R1]
         { []
         }
     {offset
       c9S9O: // global
           I64[Sp - 8] = block_c9S9U_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9S9O_info" {
     block_c9S9O_info:
         const _c9S9O;
         const 0;
         const 4402341478430;
         const S9Ru2_srt+360;
 },
 _c9S9U() //  [R1]
         { []
         }
     {offset
       c9S9U: // global
           I64[Sp] = block_c9Sa1_info;
           R3 = Control.Exception.Base.$fExceptionNestedAtomically3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9S9U_info" {
     block_c9S9U_info:
         const _c9S9U;
         const 1;
         const 4402341478430;
         const S9Ru2_srt+360;
 },
 _c9Sa1() //  [R1]
         { []
         }
     {offset
       c9Sa1: // global
           if (R1 & 7 == 1) goto c9Sa8; else goto c9Sac;
       c9Sa8: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Sac: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Saf; else goto c9Sae;
       c9Saf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Sae: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Sa1_info" {
     block_c9Sa1_info:
         const _c9Sa1;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.863865906 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionNestedAtomically3_closure;
         const Control.Exception.Base.$fShowNestedAtomically_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_entry() //  [R2]
         { []
         }
     {offset
       c9SaN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9SaR; else goto c9SaQ;
       c9SaR: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9SaQ: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionNestedAtomically_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_info" {
     Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_info:
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9Ru2_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.868785399 UTC

[section ""data" . Control.Exception.Base.nestedAtomically_closure" {
     Control.Exception.Base.nestedAtomically_closure:
         const Control.Exception.Base.nestedAtomically_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.nestedAtomically_entry() //  [R1]
         { []
         }
     {offset
       c9Sb6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Sb7; else goto c9Sb8;
       c9Sb7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Sb8: // global
           (_c9Sb3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Sb3::I64 == 0) goto c9Sb5; else goto c9Sb4;
       c9Sb5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Sb4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Sb3::I64;
           R2 = Control.Exception.Base.NestedAtomically_closure+1;
           Sp = Sp - 16;
           call Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Control.Exception.Base.nestedAtomically_info" {
     Control.Exception.Base.nestedAtomically_info:
         const Control.Exception.Base.nestedAtomically_entry;
         const 0;
         const 4294967317;
         const S9Ru2_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.872292597 UTC

[section ""data" . Control.Exception.Base.NestedAtomically_closure" {
     Control.Exception.Base.NestedAtomically_closure:
         const Control.Exception.Base.NestedAtomically_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.874264821 UTC

[section ""data" . Control.Exception.Base.NonTermination_closure" {
     Control.Exception.Base.NonTermination_closure:
         const Control.Exception.Base.NonTermination_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.875881618 UTC

[section ""relreadonly" . Control.Exception.Base.NestedAtomically_closure_tbl" {
     Control.Exception.Base.NestedAtomically_closure_tbl:
         const Control.Exception.Base.NestedAtomically_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.877797151 UTC

[section ""cstring" . i9Sbl_str" {
     i9Sbl_str:
         I8[] [98,97,115,101,58,67,111,110,116,114,111,108,46,69,120,99,101,112,116,105,111,110,46,66,97,115,101,46,78,101,115,116,101,100,65,116,111,109,105,99,97,108,108,121]
 },
 Control.Exception.Base.NestedAtomically_con_entry() //  [R1]
         { []
         }
     {offset
       c9Sbk: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.NestedAtomically_con_info" {
     Control.Exception.Base.NestedAtomically_con_info:
         const Control.Exception.Base.NestedAtomically_con_entry;
         const 4294967296;
         const 3;
         const i9Sbl_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.880821064 UTC

[section ""relreadonly" . Control.Exception.Base.NonTermination_closure_tbl" {
     Control.Exception.Base.NonTermination_closure_tbl:
         const Control.Exception.Base.NonTermination_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.882927017 UTC

[section ""cstring" . i9Sbt_str" {
     i9Sbt_str:
         I8[] [98,97,115,101,58,67,111,110,116,114,111,108,46,69,120,99,101,112,116,105,111,110,46,66,97,115,101,46,78,111,110,84,101,114,109,105,110,97,116,105,111,110]
 },
 Control.Exception.Base.NonTermination_con_entry() //  [R1]
         { []
         }
     {offset
       c9Sbs: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Exception.Base.NonTermination_con_info" {
     Control.Exception.Base.NonTermination_con_info:
         const Control.Exception.Base.NonTermination_con_entry;
         const 4294967296;
         const 3;
         const i9Sbt_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:57.886882067 UTC

[section ""relreadonly" . S9Ru2_srt" {
     S9Ru2_srt:
         const Control.Exception.Base.$fExceptionNonTermination1_closure;
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure;
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_closure;
         const Control.Exception.Base.$fShowNonTermination1_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically1_closure;
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure;
         const Control.Exception.Base.$fShowNestedAtomically1_closure;
         const Control.Exception.Base.runtimeError_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Control.Exception.Base.absentError_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail2_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure;
         const Control.Exception.Base.patError_closure;
         const GHC.IO.Exception.untangle_closure;
         const lvl2_r9PFz_closure;
         const Control.Exception.Base.nonExhaustiveGuardsError_closure;
         const lvl4_r9PFB_closure;
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionRecSelError2_closure;
         const Control.Exception.Base.$fExceptionRecSelError_closure;
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure;
         const Control.Exception.Base.recSelError_closure;
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionRecConError2_closure;
         const Control.Exception.Base.$fExceptionRecConError_closure;
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_closure;
         const Control.Exception.Base.recConError_closure;
         const lvl7_r9PFG_closure;
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionRecUpdError2_closure;
         const Control.Exception.Base.$fExceptionRecUpdError_closure;
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure;
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionNoMethodError2_closure;
         const Control.Exception.Base.$fExceptionNoMethodError_closure;
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure;
         const Control.Exception.Base.noMethodBindingError_closure;
         const lvl9_r9PFK_closure;
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionTypeError2_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Control.Exception.Base.$fExceptionTypeError_closure;
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_closure;
         const Control.Exception.Base.typeError_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure;
         const Control.Exception.Base.$fExceptionNonTermination3_closure;
         const Control.Exception.Base.$fExceptionNonTermination_closure;
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically3_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure;
 }]

