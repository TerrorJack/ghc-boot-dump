
==================== Output Cmm ====================
2018-03-16 16:04:54.62828249 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:04:54.629165679 UTC

[section ""data" . Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_entry() //  [R3,
                                                                        R4]
         { info_tbl: [(c9PMq,
                       label: Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PMq: // global
           _s9PFO::P64 = R3;
           R3 = R4;
           R2 = _s9PFO::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.630100532 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail1_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail1_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail1_info;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail1_entry() //  [R2]
         { info_tbl: [(c9PMx,
                       label: Control.Exception.Base.$fExceptionPatternMatchFail1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PMx: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.630924558 UTC

[section ""data" . Control.Exception.Base.$fShowPatternMatchFail_$cshowList_closure" {
     Control.Exception.Base.$fShowPatternMatchFail_$cshowList_closure:
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowList_info;
 },
 Control.Exception.Base.$fShowPatternMatchFail_$cshowList_entry() //  [R2,
                                                                       R3]
         { info_tbl: [(c9PME,
                       label: Control.Exception.Base.$fShowPatternMatchFail_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PME: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.631649997 UTC

[section ""data" . Control.Exception.Base.$fShowPatternMatchFail_closure" {
     Control.Exception.Base.$fShowPatternMatchFail_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionPatternMatchFail1_closure+1;
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.632351224 UTC

[section ""data" . Control.Exception.Base.$fShowRecSelError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowRecSelError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowRecSelError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowRecSelError_$cshowsPrec_entry() //  [R3,
                                                                   R4]
         { info_tbl: [(c9PML,
                       label: Control.Exception.Base.$fShowRecSelError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PML: // global
           _s9PFT::P64 = R3;
           R3 = R4;
           R2 = _s9PFT::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.633182832 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError1_closure" {
     Control.Exception.Base.$fExceptionRecSelError1_closure:
         const Control.Exception.Base.$fExceptionRecSelError1_info;
 },
 Control.Exception.Base.$fExceptionRecSelError1_entry() //  [R2]
         { info_tbl: [(c9PMS,
                       label: Control.Exception.Base.$fExceptionRecSelError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PMS: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.634017969 UTC

[section ""data" . Control.Exception.Base.$fShowRecSelError_$cshowList_closure" {
     Control.Exception.Base.$fShowRecSelError_$cshowList_closure:
         const Control.Exception.Base.$fShowRecSelError_$cshowList_info;
 },
 Control.Exception.Base.$fShowRecSelError_$cshowList_entry() //  [R2,
                                                                  R3]
         { info_tbl: [(c9PMZ,
                       label: Control.Exception.Base.$fShowRecSelError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PMZ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.634765166 UTC

[section ""data" . Control.Exception.Base.$fShowRecSelError_closure" {
     Control.Exception.Base.$fShowRecSelError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowRecSelError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionRecSelError1_closure+1;
         const Control.Exception.Base.$fShowRecSelError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.635465255 UTC

[section ""data" . Control.Exception.Base.$fShowRecConError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowRecConError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowRecConError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowRecConError_$cshowsPrec_entry() //  [R3,
                                                                   R4]
         { info_tbl: [(c9PN6,
                       label: Control.Exception.Base.$fShowRecConError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PN6: // global
           _s9PFY::P64 = R3;
           R3 = R4;
           R2 = _s9PFY::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.636270234 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError1_closure" {
     Control.Exception.Base.$fExceptionRecConError1_closure:
         const Control.Exception.Base.$fExceptionRecConError1_info;
 },
 Control.Exception.Base.$fExceptionRecConError1_entry() //  [R2]
         { info_tbl: [(c9PNd,
                       label: Control.Exception.Base.$fExceptionRecConError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PNd: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.637069789 UTC

[section ""data" . Control.Exception.Base.$fShowRecConError_$cshowList_closure" {
     Control.Exception.Base.$fShowRecConError_$cshowList_closure:
         const Control.Exception.Base.$fShowRecConError_$cshowList_info;
 },
 Control.Exception.Base.$fShowRecConError_$cshowList_entry() //  [R2,
                                                                  R3]
         { info_tbl: [(c9PNk,
                       label: Control.Exception.Base.$fShowRecConError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PNk: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.637828201 UTC

[section ""data" . Control.Exception.Base.$fShowRecConError_closure" {
     Control.Exception.Base.$fShowRecConError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowRecConError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionRecConError1_closure+1;
         const Control.Exception.Base.$fShowRecConError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.638553318 UTC

[section ""data" . Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_entry() //  [R3,
                                                                   R4]
         { info_tbl: [(c9PNr,
                       label: Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PNr: // global
           _s9PG3::P64 = R3;
           R3 = R4;
           R2 = _s9PG3::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.639348731 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError1_closure" {
     Control.Exception.Base.$fExceptionRecUpdError1_closure:
         const Control.Exception.Base.$fExceptionRecUpdError1_info;
 },
 Control.Exception.Base.$fExceptionRecUpdError1_entry() //  [R2]
         { info_tbl: [(c9PNy,
                       label: Control.Exception.Base.$fExceptionRecUpdError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PNy: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.640171269 UTC

[section ""data" . Control.Exception.Base.$fShowRecUpdError_$cshowList_closure" {
     Control.Exception.Base.$fShowRecUpdError_$cshowList_closure:
         const Control.Exception.Base.$fShowRecUpdError_$cshowList_info;
 },
 Control.Exception.Base.$fShowRecUpdError_$cshowList_entry() //  [R2,
                                                                  R3]
         { info_tbl: [(c9PNF,
                       label: Control.Exception.Base.$fShowRecUpdError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PNF: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.640919591 UTC

[section ""data" . Control.Exception.Base.$fShowRecUpdError_closure" {
     Control.Exception.Base.$fShowRecUpdError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionRecUpdError1_closure+1;
         const Control.Exception.Base.$fShowRecUpdError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.641744852 UTC

[section ""data" . Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_entry() //  [R3,
                                                                     R4]
         { info_tbl: [(c9PNM,
                       label: Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PNM: // global
           _s9PG8::P64 = R3;
           R3 = R4;
           R2 = _s9PG8::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.642543068 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError1_closure" {
     Control.Exception.Base.$fExceptionNoMethodError1_closure:
         const Control.Exception.Base.$fExceptionNoMethodError1_info;
 },
 Control.Exception.Base.$fExceptionNoMethodError1_entry() //  [R2]
         { info_tbl: [(c9PNT,
                       label: Control.Exception.Base.$fExceptionNoMethodError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PNT: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.643391118 UTC

[section ""data" . Control.Exception.Base.$fShowNoMethodError_$cshowList_closure" {
     Control.Exception.Base.$fShowNoMethodError_$cshowList_closure:
         const Control.Exception.Base.$fShowNoMethodError_$cshowList_info;
 },
 Control.Exception.Base.$fShowNoMethodError_$cshowList_entry() //  [R2,
                                                                    R3]
         { info_tbl: [(c9PO0,
                       label: Control.Exception.Base.$fShowNoMethodError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PO0: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.644119911 UTC

[section ""data" . Control.Exception.Base.$fShowNoMethodError_closure" {
     Control.Exception.Base.$fShowNoMethodError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionNoMethodError1_closure+1;
         const Control.Exception.Base.$fShowNoMethodError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.64480407 UTC

[section ""data" . Control.Exception.Base.$fShowTypeError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowTypeError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowTypeError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowTypeError_$cshowsPrec_entry() //  [R3,
                                                                 R4]
         { info_tbl: [(c9PO7,
                       label: Control.Exception.Base.$fShowTypeError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PO7: // global
           _s9PGd::P64 = R3;
           R3 = R4;
           R2 = _s9PGd::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.645631067 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError1_closure" {
     Control.Exception.Base.$fExceptionTypeError1_closure:
         const Control.Exception.Base.$fExceptionTypeError1_info;
 },
 Control.Exception.Base.$fExceptionTypeError1_entry() //  [R2]
         { info_tbl: [(c9POe,
                       label: Control.Exception.Base.$fExceptionTypeError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9POe: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.646422036 UTC

[section ""data" . Control.Exception.Base.$fShowTypeError_$cshowList_closure" {
     Control.Exception.Base.$fShowTypeError_$cshowList_closure:
         const Control.Exception.Base.$fShowTypeError_$cshowList_info;
 },
 Control.Exception.Base.$fShowTypeError_$cshowList_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c9POl,
                       label: Control.Exception.Base.$fShowTypeError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9POl: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.647179717 UTC

[section ""data" . Control.Exception.Base.$fShowTypeError_closure" {
     Control.Exception.Base.$fShowTypeError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowTypeError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionTypeError1_closure+1;
         const Control.Exception.Base.$fShowTypeError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.647761472 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNonTermination2_bytes" {
     Control.Exception.Base.$fExceptionNonTermination2_bytes:
         I8[] [60,60,108,111,111,112,62,62]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.648480238 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination1_closure" {
     Control.Exception.Base.$fExceptionNonTermination1_closure:
         const Control.Exception.Base.$fExceptionNonTermination1_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination1_entry() //  [R1]
         { info_tbl: [(c9POu,
                       label: Control.Exception.Base.$fExceptionNonTermination1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9POu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9POv; else goto c9POw;
       c9POv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9POw: // global
           (_c9POr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9POr::I64 == 0) goto c9POt; else goto c9POs;
       c9POt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9POs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9POr::I64;
           R2 = Control.Exception.Base.$fExceptionNonTermination2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.649678908 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_info;
         const 0;
 },
 Control.Exception.Base.$fShowNonTermination_$cshowsPrec_entry() //  [R2,
                                                                      R3, R4]
         { info_tbl: [(c9POE,
                       label: Control.Exception.Base.$fShowNonTermination_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9POE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9POF; else goto c9POG;
       c9POF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9POG: // global
           I64[Sp - 16] = block_c9POB_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9POK; else goto c9POC;
       u9POK: // global
           call _c9POB() args: 0, res: 0, upd: 0;
       c9POC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9POB() //  []
         { info_tbl: [(c9POB,
                       label: block_c9POB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9POB: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNonTermination1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.650920208 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination_$cshow_closure" {
     Control.Exception.Base.$fExceptionNonTermination_$cshow_closure:
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination_$cshow_entry() //  [R2]
         { info_tbl: [(c9POT,
                       label: Control.Exception.Base.$fExceptionNonTermination_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9POT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9POU; else goto c9POV;
       c9POU: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNonTermination_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9POV: // global
           I64[Sp - 8] = block_c9POQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9POZ; else goto c9POR;
       u9POZ: // global
           call _c9POQ() args: 0, res: 0, upd: 0;
       c9POR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9POQ() //  []
         { info_tbl: [(c9POQ,
                       label: block_c9POQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9POQ: // global
           R1 = Control.Exception.Base.$fExceptionNonTermination1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.652077359 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination1_closure" {
     Control.Exception.Base.$fShowNonTermination1_closure:
         const Control.Exception.Base.$fShowNonTermination1_info;
         const 0;
 },
 Control.Exception.Base.$fShowNonTermination1_entry() //  [R2, R3]
         { info_tbl: [(c9PP7,
                       label: Control.Exception.Base.$fShowNonTermination1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PP7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9PP8; else goto c9PP9;
       c9PP8: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNonTermination1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9PP9: // global
           I64[Sp - 16] = block_c9PP4_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9PPd; else goto c9PP5;
       u9PPd: // global
           call _c9PP4() args: 0, res: 0, upd: 0;
       c9PP5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PP4() //  []
         { info_tbl: [(c9PP4,
                       label: block_c9PP4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PP4: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNonTermination1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.653605203 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination_$cshowList_closure" {
     Control.Exception.Base.$fShowNonTermination_$cshowList_closure:
         const Control.Exception.Base.$fShowNonTermination_$cshowList_info;
         const 0;
 },
 Control.Exception.Base.$fShowNonTermination_$cshowList_entry() //  [R2,
                                                                     R3]
         { info_tbl: [(c9PPi,
                       label: Control.Exception.Base.$fShowNonTermination_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PPi: // global
           R4 = R3;
           R3 = R2;
           R2 = Control.Exception.Base.$fShowNonTermination1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.65436401 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination_closure" {
     Control.Exception.Base.$fShowNonTermination_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_closure+1;
         const Control.Exception.Base.$fShowNonTermination_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.654945334 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNestedAtomically2_bytes" {
     Control.Exception.Base.$fExceptionNestedAtomically2_bytes:
         I8[] [67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,83,84,77,46,97,116,111,109,105,99,97,108,108,121,32,119,97,115,32,110,101,115,116,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.655658893 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically1_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically1_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically1_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically1_entry() //  [R1]
         { info_tbl: [(c9PPr,
                       label: Control.Exception.Base.$fExceptionNestedAtomically1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PPr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9PPs; else goto c9PPt;
       c9PPs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9PPt: // global
           (_c9PPo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9PPo::I64 == 0) goto c9PPq; else goto c9PPp;
       c9PPq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9PPp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9PPo::I64;
           R2 = Control.Exception.Base.$fExceptionNestedAtomically2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.656742185 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_info;
         const 0;
 },
 Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_entry() //  [R2,
                                                                        R3, R4]
         { info_tbl: [(c9PPB,
                       label: Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PPB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9PPC; else goto c9PPD;
       c9PPC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9PPD: // global
           I64[Sp - 16] = block_c9PPy_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9PPH; else goto c9PPz;
       u9PPH: // global
           call _c9PPy() args: 0, res: 0, upd: 0;
       c9PPz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PPy() //  []
         { info_tbl: [(c9PPy,
                       label: block_c9PPy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PPy: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNestedAtomically1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.657976914 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically_$cshow_entry() //  [R2]
         { info_tbl: [(c9PPP,
                       label: Control.Exception.Base.$fExceptionNestedAtomically_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PPP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9PPQ; else goto c9PPR;
       c9PPQ: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9PPR: // global
           I64[Sp - 8] = block_c9PPM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9PPV; else goto c9PPN;
       u9PPV: // global
           call _c9PPM() args: 0, res: 0, upd: 0;
       c9PPN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PPM() //  []
         { info_tbl: [(c9PPM,
                       label: block_c9PPM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PPM: // global
           R1 = Control.Exception.Base.$fExceptionNestedAtomically1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.659149849 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically1_closure" {
     Control.Exception.Base.$fShowNestedAtomically1_closure:
         const Control.Exception.Base.$fShowNestedAtomically1_info;
         const 0;
 },
 Control.Exception.Base.$fShowNestedAtomically1_entry() //  [R2, R3]
         { info_tbl: [(c9PQ3,
                       label: Control.Exception.Base.$fShowNestedAtomically1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PQ3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9PQ4; else goto c9PQ5;
       c9PQ4: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNestedAtomically1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9PQ5: // global
           I64[Sp - 16] = block_c9PQ0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9PQ9; else goto c9PQ1;
       u9PQ9: // global
           call _c9PQ0() args: 0, res: 0, upd: 0;
       c9PQ1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PQ0() //  []
         { info_tbl: [(c9PQ0,
                       label: block_c9PQ0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PQ0: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNestedAtomically1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.660311987 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically_$cshowList_closure" {
     Control.Exception.Base.$fShowNestedAtomically_$cshowList_closure:
         const Control.Exception.Base.$fShowNestedAtomically_$cshowList_info;
         const 0;
 },
 Control.Exception.Base.$fShowNestedAtomically_$cshowList_entry() //  [R2,
                                                                       R3]
         { info_tbl: [(c9PQe,
                       label: Control.Exception.Base.$fShowNestedAtomically_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PQe: // global
           R4 = R3;
           R3 = R2;
           R2 = Control.Exception.Base.$fShowNestedAtomically1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.661062068 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically_closure" {
     Control.Exception.Base.$fShowNestedAtomically_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure+1;
         const Control.Exception.Base.$fShowNestedAtomically_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.662475492 UTC

[section ""data" . Control.Exception.Base.catchJust1_closure" {
     Control.Exception.Base.catchJust1_closure:
         const Control.Exception.Base.catchJust1_info;
 },
 sat_s9PGK_entry() //  [R1]
         { info_tbl: [(c9PQz,
                       label: sat_s9PGK_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PQz: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PGO_entry() //  [R1, R2]
         { info_tbl: [(c9PQG,
                       label: sat_s9PGO_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PQG: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c9PQH; else goto c9PQI;
       c9PQH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9PQI: // global
           I64[Sp - 40] = block_c9PQq_info;
           _s9PGI::P64 = R2;
           _s9PGD::P64 = P64[R1 + 7];
           R2 = _s9PGD::P64;
           I64[Sp - 56] = stg_ap_p_info;
           P64[Sp - 48] = _s9PGI::P64;
           P64[Sp - 32] = _s9PGD::P64;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _s9PGI::P64;
           Sp = Sp - 56;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c9PQq() //  [R1]
         { info_tbl: [(c9PQq,
                       label: block_c9PQq_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PQq: // global
           if (R1 & 7 == 1) goto c9PQD; else goto c9PQE;
       c9PQD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9PQL; else goto c9PQK;
       c9PQL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9PQK: // global
           I64[Hp - 8] = sat_s9PGK_info;
           P64[Hp] = P64[Sp + 32];
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9PQE: // global
           I64[Sp] = block_c9PQO_info;
           _s9PGL::P64 = P64[R1 + 6];
           R2 = _s9PGL::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 32] = _s9PGL::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PQO() //  [R1]
         { info_tbl: [(c9PQO,
                       label: block_c9PQO_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PQO: // global
           if (R1 & 7 == 1) goto c9PQV; else goto c9PQZ;
       c9PQV: // global
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = GHC.IO.throwIO1_closure+3;
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9PQZ: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.catchJust1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9PR1,
                       label: Control.Exception.Base.catchJust1_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PR1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9PR5; else goto c9PR4;
       c9PR5: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.catchJust1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9PR4: // global
           I64[Hp - 24] = sat_s9PGO_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R5;
           R2 = Hp - 23;
           R1 = R4;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.6666129 UTC

[section ""data" . Control.Exception.Base.catchJust_closure" {
     Control.Exception.Base.catchJust_closure:
         const Control.Exception.Base.catchJust_info;
 },
 Control.Exception.Base.catchJust_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9PRa,
                       label: Control.Exception.Base.catchJust_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PRa: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.catchJust1_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.667407295 UTC

[section ""data" . Control.Exception.Base.handleJust1_closure" {
     Control.Exception.Base.handleJust1_closure:
         const Control.Exception.Base.handleJust1_info;
 },
 Control.Exception.Base.handleJust1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9PRh,
                       label: Control.Exception.Base.handleJust1_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PRh: // global
           _s9PGS::P64 = R5;
           R5 = R4;
           R4 = _s9PGS::P64;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.catchJust1_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.66824966 UTC

[section ""data" . Control.Exception.Base.handleJust_closure" {
     Control.Exception.Base.handleJust_closure:
         const Control.Exception.Base.handleJust_info;
 },
 Control.Exception.Base.handleJust_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9PRo,
                       label: Control.Exception.Base.handleJust_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PRo: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.handleJust1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.669074162 UTC

[section ""data" . Control.Exception.Base.handle1_closure" {
     Control.Exception.Base.handle1_closure:
         const Control.Exception.Base.handle1_info;
 },
 Control.Exception.Base.handle1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9PRv,
                       label: Control.Exception.Base.handle1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PRv: // global
           _s9PGW::P64 = R4;
           R4 = R3;
           R3 = _s9PGW::P64;
           R2 = R2;
           call GHC.IO.catch1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.669945596 UTC

[section ""data" . Control.Exception.Base.handle_closure" {
     Control.Exception.Base.handle_closure:
         const Control.Exception.Base.handle_info;
 },
 Control.Exception.Base.handle_entry() //  [R2, R3, R4]
         { info_tbl: [(c9PRC,
                       label: Control.Exception.Base.handle_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PRC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.handle1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.671019472 UTC

[section ""data" . Control.Exception.Base.mapException1_closure" {
     Control.Exception.Base.mapException1_closure:
         const Control.Exception.Base.mapException1_info;
 },
 sat_s9PH3_entry() //  [R1]
         { info_tbl: [(c9PRO,
                       label: sat_s9PH3_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PRO: // global
           _s9PH3::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c9PRP; else goto c9PRQ;
       c9PRQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9PRS; else goto c9PRR;
       c9PRS: // global
           HpAlloc = 32;
           goto c9PRP;
       c9PRP: // global
           R1 = _s9PH3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9PRR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9PH3::P64;
           _s9PGY::P64 = P64[_s9PH3::P64 + 16];
           _s9PGZ::P64 = P64[_s9PH3::P64 + 24];
           _s9PH0::P64 = P64[_s9PH3::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s9PGY::P64;
           P64[Hp] = _s9PGZ::P64;
           R2 = _s9PH0::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Exception.toException_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Control.Exception.Base.mapException1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9PRT,
                       label: Control.Exception.Base.mapException1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PRT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9PRX; else goto c9PRW;
       c9PRX: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.mapException1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9PRW: // global
           I64[Hp - 32] = sat_s9PH3_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 32;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.673003533 UTC

[section ""data" . Control.Exception.Base.mapException_closure" {
     Control.Exception.Base.mapException_closure:
         const Control.Exception.Base.mapException_info;
 },
 sat_s9PHd_entry() //  [R1]
         { info_tbl: [(c9PSi,
                       label: sat_s9PHd_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PSi: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PHg_entry() //  [R1, R2]
         { info_tbl: [(c9PSp,
                       label: sat_s9PHg_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PSp: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c9PSq; else goto c9PSr;
       c9PSq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9PSr: // global
           I64[Sp - 32] = block_c9PS9_info;
           _s9PHb::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = _s9PHb::P64;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _s9PHb::P64;
           Sp = Sp - 48;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c9PS9() //  [R1]
         { info_tbl: [(c9PS9,
                       label: block_c9PS9_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PS9: // global
           if (R1 & 7 == 1) goto c9PSm; else goto c9PSn;
       c9PSm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9PSu; else goto c9PSt;
       c9PSu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9PSt: // global
           I64[Hp - 8] = sat_s9PHd_info;
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9PSn: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = Control.Exception.Base.mapException1_closure+4;
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PHa_entry() //  [R1]
         { info_tbl: [(c9PSD,
                       label: sat_s9PHa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PSD: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.mapException_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9PSI,
                       label: Control.Exception.Base.mapException_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PSI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c9PSJ; else goto c9PSK;
       c9PSJ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.mapException_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9PSK: // global
           I64[Sp - 40] = block_c9PS2_info;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9PS2() //  []
         { info_tbl: [(c9PS2,
                       label: block_c9PS2_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PS2: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9PSN; else goto c9PSM;
       c9PSN: // global
           HpAlloc = 48;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c9PSM: // global
           I64[Hp - 40] = sat_s9PHg_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           I64[Hp - 8] = sat_s9PHa_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_c9PSG_info;
           R2 = Hp - 39;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PSG() //  [R1]
         { info_tbl: [(c9PSG,
                       label: block_c9PSG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PSG: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.675783955 UTC

[section ""data" . Control.Exception.Base.try1_closure" {
     Control.Exception.Base.try1_closure:
         const Control.Exception.Base.try1_info;
 },
 sat_s9PHy_entry() //  [R1, R2]
         { info_tbl: [(c9PT4,
                       label: sat_s9PHy_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PT4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9PT5; else goto c9PT6;
       c9PT5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9PT6: // global
           I64[Sp - 16] = block_c9PSY_info;
           _s9PHt::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = _s9PHt::P64;
           P64[Sp - 8] = _s9PHt::P64;
           Sp = Sp - 32;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c9PSY() //  [R1]
         { info_tbl: [(c9PSY,
                       label: block_c9PSY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PSY: // global
           if (R1 & 7 == 1) goto c9PT1; else goto c9PT2;
       c9PT1: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c9PT2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9PTf; else goto c9PTe;
       c9PTf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9PTe: // global
           _s9PHw::P64 = P64[R1 + 6];
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = _s9PHw::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PHs_entry() //  [R1]
         { info_tbl: [(c9PTo,
                       label: sat_s9PHs_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PTo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9PTp; else goto c9PTq;
       c9PTp: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9PTq: // global
           I64[Sp - 8] = block_c9PTl_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PTl() //  [R1]
         { info_tbl: [(c9PTl,
                       label: block_c9PTl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PTl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9PTt; else goto c9PTs;
       c9PTt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9PTs: // global
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.try1_entry() //  [R2, R3]
         { info_tbl: [(c9PTu,
                       label: Control.Exception.Base.try1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PTu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9PTy; else goto c9PTx;
       c9PTy: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.try1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9PTx: // global
           I64[Hp - 24] = sat_s9PHy_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s9PHs_info;
           P64[Hp] = R3;
           R2 = Hp - 22;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.677904961 UTC

[section ""data" . Control.Exception.Base.try_closure" {
     Control.Exception.Base.try_closure:
         const Control.Exception.Base.try_info;
 },
 Control.Exception.Base.try_entry() //  [R2, R3]
         { info_tbl: [(c9PTD,
                       label: Control.Exception.Base.try_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PTD: // global
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.try1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.679110544 UTC

[section ""data" . Control.Exception.Base.tryJust1_closure" {
     Control.Exception.Base.tryJust1_closure:
         const Control.Exception.Base.tryJust1_info;
 },
 Control.Exception.Base.tryJust1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9PTT,
                       label: Control.Exception.Base.tryJust1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PTT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9PTU; else goto c9PTV;
       c9PTU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.tryJust1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9PTV: // global
           I64[Sp - 24] = block_c9PTK_info;
           _s9PHA::P64 = R3;
           R3 = R4;
           _s9PHz::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s9PHz::P64;
           P64[Sp - 8] = _s9PHA::P64;
           Sp = Sp - 24;
           call Control.Exception.Base.try1_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9PTK() //  [R1]
         { info_tbl: [(c9PTK,
                       label: block_c9PTK_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PTK: // global
           I64[Sp - 8] = block_c9PTM_info;
           _s9PHF::P64 = R1;
           R1 = R1;
           P64[Sp] = _s9PHF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9PUi; else goto c9PTN;
       u9PUi: // global
           call _c9PTM(R1) args: 0, res: 0, upd: 0;
       c9PTN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PTM() //  [R1]
         { info_tbl: [(c9PTM,
                       label: block_c9PTM_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PTM: // global
           if (R1 & 7 == 1) goto c9PTQ; else goto c9PTR;
       c9PTQ: // global
           I64[Sp + 8] = block_c9PTZ_info;
           _s9PHH::P64 = P64[R1 + 7];
           R2 = _s9PHH::P64;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s9PHH::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c9PTR: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9PTZ() //  [R1]
         { info_tbl: [(c9PTZ,
                       label: block_c9PTZ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PTZ: // global
           if (R1 & 7 == 1) goto c9PU6; else goto c9PUa;
       c9PU6: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.throwIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9PUa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9PUd; else goto c9PUc;
       c9PUd: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9PUc: // global
           _s9PHJ::P64 = P64[R1 + 6];
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = _s9PHJ::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.680799147 UTC

[section ""data" . Control.Exception.Base.tryJust_closure" {
     Control.Exception.Base.tryJust_closure:
         const Control.Exception.Base.tryJust_info;
 },
 Control.Exception.Base.tryJust_entry() //  [R2, R3, R4]
         { info_tbl: [(c9PUn,
                       label: Control.Exception.Base.tryJust_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PUn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.tryJust1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.681867352 UTC

[section ""data" . Control.Exception.Base.onException1_closure" {
     Control.Exception.Base.onException1_closure:
         const Control.Exception.Base.onException1_info;
 },
 sat_s9PHV_entry() //  [R1, R2]
         { info_tbl: [(c9PUB,
                       label: sat_s9PHV_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PUB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9PUC; else goto c9PUD;
       c9PUC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9PUD: // global
           I64[Sp - 16] = block_c9PUz_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PUz() //  []
         { info_tbl: [(c9PUz,
                       label: block_c9PUz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PUz: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.onException1_entry() //  [R2, R3]
         { info_tbl: [(c9PUF,
                       label: Control.Exception.Base.onException1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PUF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9PUJ; else goto c9PUI;
       c9PUJ: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.onException1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9PUI: // global
           I64[Hp - 8] = sat_s9PHV_info;
           P64[Hp] = R3;
           _s9PHN::P64 = R2;
           R2 = Hp - 6;
           R1 = _s9PHN::P64;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.683128818 UTC

[section ""data" . Control.Exception.Base.onException_closure" {
     Control.Exception.Base.onException_closure:
         const Control.Exception.Base.onException_info;
 },
 Control.Exception.Base.onException_entry() //  [R2, R3]
         { info_tbl: [(c9PUO,
                       label: Control.Exception.Base.onException_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PUO: // global
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.onException1_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.685694541 UTC

[section ""data" . Control.Exception.Base.bracket1_closure" {
     Control.Exception.Base.bracket1_closure:
         const Control.Exception.Base.bracket1_info;
 },
 sat_s9PIe_entry() //  [R1, R2]
         { info_tbl: [(c9PV8,
                       label: sat_s9PIe_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PV8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9PV9; else goto c9PVa;
       c9PV9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9PVa: // global
           I64[Sp - 16] = block_c9PV6_info;
           _s9PI9::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PI9::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PV6() //  []
         { info_tbl: [(c9PV6,
                       label: block_c9PV6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PV6: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PI8_entry() //  [R1]
         { info_tbl: [(c9PVi,
                       label: sat_s9PI8_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PVi: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PIw_entry() //  [R1, R2]
         { info_tbl: [(c9PVA,
                       label: sat_s9PIw_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PVA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9PVB; else goto c9PVC;
       c9PVB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9PVC: // global
           I64[Sp - 16] = block_c9PVy_info;
           _s9PIr::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PIr::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PVy() //  []
         { info_tbl: [(c9PVy,
                       label: block_c9PVy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PVy: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PIq_entry() //  [R1]
         { info_tbl: [(c9PVK,
                       label: sat_s9PIq_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PVK: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PID_entry() //  [R1]
         { info_tbl: [(c9PVR,
                       label: sat_s9PID_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PVR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9PVS; else goto c9PVT;
       c9PVS: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9PVT: // global
           I64[Sp - 24] = block_c9PVr_info;
           _s9PHX::P64 = P64[R1 + 15];
           _s9PHY::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9PHX::P64;
           P64[Sp - 8] = _s9PHY::P64;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PVr() //  [R1]
         { info_tbl: [(c9PVr,
                       label: block_c9PVr_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PVr: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9PVW; else goto c9PVV;
       c9PVW: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9PVV: // global
           I64[Hp - 64] = sat_s9PIw_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PIq_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9PVN_info;
           R2 = Hp - 62;
           _s9PIo::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9PIo::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PVN() //  [R1]
         { info_tbl: [(c9PVN,
                       label: block_c9PVN_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PVN: // global
           _s9PHX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9PVP_info;
           R2 = P64[Sp + 16];
           _s9PIz::P64 = R1;
           R1 = _s9PHX::P64;
           P64[Sp + 16] = _s9PIz::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PVP() //  []
         { info_tbl: [(c9PVP,
                       label: block_c9PVP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PVP: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PIO_entry() //  [R1, R2]
         { info_tbl: [(c9PW9,
                       label: sat_s9PIO_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PW9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9PWa; else goto c9PWb;
       c9PWa: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9PWb: // global
           I64[Sp - 16] = block_c9PW7_info;
           _s9PIJ::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PIJ::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PW7() //  []
         { info_tbl: [(c9PW7,
                       label: block_c9PW7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PW7: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PII_entry() //  [R1]
         { info_tbl: [(c9PWj,
                       label: sat_s9PII_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PWj: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.bracket1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9PWq,
                       label: Control.Exception.Base.bracket1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PWq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9PWr; else goto c9PWs;
       c9PWr: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.bracket1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9PWs: // global
           I64[Sp - 32] = block_c9PUV_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 _c9PUV() //  [R1]
         { info_tbl: [(c9PUV,
                       label: block_c9PUV_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PUV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9PWv; else goto c9PWu;
       c9PWv: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9PWu: // global
           _s9PHW::P64 = P64[Sp + 8];
           if (R1 == 0) goto c9PWo; else goto u9PWO;
       c9PWo: // global
           I64[Hp - 24] = sat_s9PID_info;
           P64[Hp - 16] = _s9PHW::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9PWO: // global
           if (R1 == 1) goto c9PWp; else goto c9PWn;
       c9PWp: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9PW0_info;
           R1 = _s9PHW::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c9PWn: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9PUZ_info;
           R1 = _s9PHW::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PW0() //  [R1]
         { info_tbl: [(c9PW0,
                       label: block_c9PW0_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PW0: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9PWK; else goto c9PWJ;
       c9PWK: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9PWJ: // global
           I64[Hp - 64] = sat_s9PIO_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PII_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9PWF_info;
           R2 = Hp - 62;
           _s9PIG::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9PIG::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PWF() //  [R1]
         { info_tbl: [(c9PWF,
                       label: block_c9PWF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PWF: // global
           _s9PHX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9PWH_info;
           R2 = P64[Sp + 16];
           _s9PIR::P64 = R1;
           R1 = _s9PHX::P64;
           P64[Sp + 16] = _s9PIR::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PWH() //  []
         { info_tbl: [(c9PWH,
                       label: block_c9PWH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PWH: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9PUZ() //  [R1]
         { info_tbl: [(c9PUZ,
                       label: block_c9PUZ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PUZ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9PWB; else goto c9PWA;
       c9PWB: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9PWA: // global
           I64[Hp - 64] = sat_s9PIe_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PI8_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9PWw_info;
           R2 = Hp - 62;
           _s9PI6::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9PI6::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PWw() //  [R1]
         { info_tbl: [(c9PWw,
                       label: block_c9PWw_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PWw: // global
           _s9PHX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9PWy_info;
           R2 = P64[Sp + 16];
           _s9PIh::P64 = R1;
           R1 = _s9PHX::P64;
           P64[Sp + 16] = _s9PIh::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PWy() //  []
         { info_tbl: [(c9PWy,
                       label: block_c9PWy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PWy: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.690534483 UTC

[section ""data" . Control.Exception.Base.bracket_closure" {
     Control.Exception.Base.bracket_closure:
         const Control.Exception.Base.bracket_info;
 },
 Control.Exception.Base.bracket_entry() //  [R2, R3, R4]
         { info_tbl: [(c9PWT,
                       label: Control.Exception.Base.bracket_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PWT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.bracket1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.691612351 UTC

[section ""data" . Control.Exception.Base.bracket_1_closure" {
     Control.Exception.Base.bracket_1_closure:
         const Control.Exception.Base.bracket_1_info;
 },
 sat_s9PJ2_entry() //  [R1]
         { info_tbl: [(c9PX5,
                       label: sat_s9PJ2_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PX5: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJ0_entry() //  [R1]
         { info_tbl: [(c9PXd,
                       label: sat_s9PJ0_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PXd: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.bracket_1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9PXg,
                       label: Control.Exception.Base.bracket_1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PXg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9PXk; else goto c9PXj;
       c9PXk: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.bracket_1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9PXj: // global
           I64[Hp - 24] = sat_s9PJ2_info;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s9PJ0_info;
           P64[Hp] = R3;
           R4 = Hp - 23;
           R3 = Hp - 7;
           R2 = R2;
           call Control.Exception.Base.bracket1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.692825812 UTC

[section ""data" . Control.Exception.Base.bracket__closure" {
     Control.Exception.Base.bracket__closure:
         const Control.Exception.Base.bracket__info;
 },
 Control.Exception.Base.bracket__entry() //  [R2, R3, R4]
         { info_tbl: [(c9PXp,
                       label: Control.Exception.Base.bracket__info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PXp: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.bracket_1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.695065034 UTC

[section ""data" . Control.Exception.Base.finally1_closure" {
     Control.Exception.Base.finally1_closure:
         const Control.Exception.Base.finally1_info;
 },
 sat_s9PJg_entry() //  [R1, R2]
         { info_tbl: [(c9PXH,
                       label: sat_s9PJg_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PXH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9PXI; else goto c9PXJ;
       c9PXI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9PXJ: // global
           I64[Sp - 16] = block_c9PXF_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PXF() //  []
         { info_tbl: [(c9PXF,
                       label: block_c9PXF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PXF: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJa_entry() //  [R1]
         { info_tbl: [(c9PXQ,
                       label: sat_s9PJa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PXQ: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJu_entry() //  [R1, R2]
         { info_tbl: [(c9PY6,
                       label: sat_s9PJu_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PY6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9PY7; else goto c9PY8;
       c9PY7: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9PY8: // global
           I64[Sp - 16] = block_c9PY4_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PY4() //  []
         { info_tbl: [(c9PY4,
                       label: block_c9PY4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PY4: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJo_entry() //  [R1]
         { info_tbl: [(c9PYf,
                       label: sat_s9PJo_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PYf: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJB_entry() //  [R1]
         { info_tbl: [(c9PYm,
                       label: sat_s9PJB_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PYm: // global
           _s9PJB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9PYn; else goto c9PYo;
       c9PYo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9PYq; else goto c9PYp;
       c9PYq: // global
           HpAlloc = 32;
           goto c9PYn;
       c9PYn: // global
           R1 = _s9PJB::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9PYp: // global
           _s9PJ3::P64 = P64[_s9PJB::P64 + 7];
           _s9PJ4::P64 = P64[_s9PJB::P64 + 15];
           I64[Hp - 24] = sat_s9PJu_info;
           P64[Hp - 16] = _s9PJ4::P64;
           I64[Hp - 8] = sat_s9PJo_info;
           P64[Hp] = _s9PJ3::P64;
           I64[Sp - 16] = block_c9PYi_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           P64[Sp - 8] = _s9PJ4::P64;
           Sp = Sp - 16;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PYi() //  [R1]
         { info_tbl: [(c9PYi,
                       label: block_c9PYi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PYi: // global
           I64[Sp] = block_c9PYk_info;
           _s9PJx::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9PJx::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PYk() //  []
         { info_tbl: [(c9PYk,
                       label: block_c9PYk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PYk: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJI_entry() //  [R1, R2]
         { info_tbl: [(c9PYB,
                       label: sat_s9PJI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PYB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9PYC; else goto c9PYD;
       c9PYC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9PYD: // global
           I64[Sp - 16] = block_c9PYz_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PYz() //  []
         { info_tbl: [(c9PYz,
                       label: block_c9PYz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PYz: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJC_entry() //  [R1]
         { info_tbl: [(c9PYK,
                       label: sat_s9PJC_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PYK: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.finally1_entry() //  [R2, R3]
         { info_tbl: [(c9PYR,
                       label: Control.Exception.Base.finally1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PYR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9PYS; else goto c9PYT;
       c9PYS: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.finally1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9PYT: // global
           I64[Sp - 24] = block_c9PXw_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 _c9PXw() //  [R1]
         { info_tbl: [(c9PXw,
                       label: block_c9PXw_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PXw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9PYW; else goto c9PYV;
       c9PYW: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9PYV: // global
           _s9PJ3::P64 = P64[Sp + 8];
           _s9PJ4::P64 = P64[Sp + 16];
           if (R1 == 0) goto c9PYP; else goto u9PZ9;
       c9PYP: // global
           I64[Hp - 24] = sat_s9PJB_info;
           P64[Hp - 16] = _s9PJ3::P64;
           P64[Hp - 8] = _s9PJ4::P64;
           _c9PXU::P64 = Hp - 23;
           Hp = Hp - 8;
           R1 = _c9PXU::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9PZ9: // global
           if (R1 == 1) goto c9PYQ; else goto c9PYO;
       c9PYQ: // global
           I64[Hp - 24] = sat_s9PJI_info;
           P64[Hp - 16] = _s9PJ4::P64;
           I64[Hp - 8] = sat_s9PJC_info;
           P64[Hp] = _s9PJ3::P64;
           I64[Sp + 8] = block_c9PZ3_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
       c9PYO: // global
           I64[Hp - 24] = sat_s9PJg_info;
           P64[Hp - 16] = _s9PJ4::P64;
           I64[Hp - 8] = sat_s9PJa_info;
           P64[Hp] = _s9PJ3::P64;
           I64[Sp + 8] = block_c9PYX_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PZ3() //  [R1]
         { info_tbl: [(c9PZ3,
                       label: block_c9PZ3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PZ3: // global
           I64[Sp] = block_c9PZ5_info;
           _s9PJL::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9PJL::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PZ5() //  []
         { info_tbl: [(c9PZ5,
                       label: block_c9PZ5_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PZ5: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9PYX() //  [R1]
         { info_tbl: [(c9PYX,
                       label: block_c9PYX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PYX: // global
           I64[Sp] = block_c9PYZ_info;
           _s9PJj::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9PJj::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PYZ() //  []
         { info_tbl: [(c9PYZ,
                       label: block_c9PYZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PYZ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.698914838 UTC

[section ""data" . Control.Exception.Base.finally_closure" {
     Control.Exception.Base.finally_closure:
         const Control.Exception.Base.finally_info;
 },
 Control.Exception.Base.finally_entry() //  [R2, R3]
         { info_tbl: [(c9PZe,
                       label: Control.Exception.Base.finally_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PZe: // global
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.finally1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.701226025 UTC

[section ""data" . Control.Exception.Base.bracketOnError1_closure" {
     Control.Exception.Base.bracketOnError1_closure:
         const Control.Exception.Base.bracketOnError1_info;
 },
 sat_s9PK7_entry() //  [R1, R2]
         { info_tbl: [(c9PZy,
                       label: sat_s9PK7_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PZy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9PZz; else goto c9PZA;
       c9PZz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9PZA: // global
           I64[Sp - 16] = block_c9PZw_info;
           _s9PK2::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PK2::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PZw() //  []
         { info_tbl: [(c9PZw,
                       label: block_c9PZw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PZw: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PK1_entry() //  [R1]
         { info_tbl: [(c9PZI,
                       label: sat_s9PK1_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PZI: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PKj_entry() //  [R1, R2]
         { info_tbl: [(c9Q00,
                       label: sat_s9PKj_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q00: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Q01; else goto c9Q02;
       c9Q01: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q02: // global
           I64[Sp - 16] = block_c9PZY_info;
           _s9PKe::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PKe::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PZY() //  []
         { info_tbl: [(c9PZY,
                       label: block_c9PZY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PZY: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PKd_entry() //  [R1]
         { info_tbl: [(c9Q0a,
                       label: sat_s9PKd_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q0a: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PKk_entry() //  [R1]
         { info_tbl: [(c9Q0d,
                       label: sat_s9PKk_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q0d: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Q0e; else goto c9Q0f;
       c9Q0e: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Q0f: // global
           I64[Sp - 24] = block_c9PZR_info;
           _s9PJQ::P64 = P64[R1 + 15];
           _s9PJR::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9PJQ::P64;
           P64[Sp - 8] = _s9PJR::P64;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9PZR() //  [R1]
         { info_tbl: [(c9PZR,
                       label: block_c9PZR_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PZR: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9Q0i; else goto c9Q0h;
       c9Q0i: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Q0h: // global
           I64[Hp - 64] = sat_s9PKj_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PKd_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 62;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PKv_entry() //  [R1, R2]
         { info_tbl: [(c9Q0t,
                       label: sat_s9PKv_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q0t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Q0u; else goto c9Q0v;
       c9Q0u: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q0v: // global
           I64[Sp - 16] = block_c9Q0r_info;
           _s9PKq::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PKq::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q0r() //  []
         { info_tbl: [(c9Q0r,
                       label: block_c9Q0r_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q0r: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PKp_entry() //  [R1]
         { info_tbl: [(c9Q0D,
                       label: sat_s9PKp_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q0D: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.bracketOnError1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9Q0K,
                       label: Control.Exception.Base.bracketOnError1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q0K: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9Q0L; else goto c9Q0M;
       c9Q0L: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.bracketOnError1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Q0M: // global
           I64[Sp - 32] = block_c9PZl_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 _c9PZl() //  [R1]
         { info_tbl: [(c9PZl,
                       label: block_c9PZl_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PZl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Q0P; else goto c9Q0O;
       c9Q0P: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9Q0O: // global
           _s9PJP::P64 = P64[Sp + 8];
           if (R1 == 0) goto c9Q0I; else goto u9Q0W;
       c9Q0I: // global
           I64[Hp - 24] = sat_s9PKk_info;
           P64[Hp - 16] = _s9PJP::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9Q0W: // global
           if (R1 == 1) goto c9Q0J; else goto c9Q0H;
       c9Q0J: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9Q0k_info;
           R1 = _s9PJP::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c9Q0H: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9PZp_info;
           R1 = _s9PJP::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q0k() //  [R1]
         { info_tbl: [(c9Q0k,
                       label: block_c9Q0k_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q0k: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9Q0V; else goto c9Q0U;
       c9Q0V: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Q0U: // global
           I64[Hp - 64] = sat_s9PKv_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PKp_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 62;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9PZp() //  [R1]
         { info_tbl: [(c9PZp,
                       label: block_c9PZp_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9PZp: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9Q0S; else goto c9Q0R;
       c9Q0S: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Q0R: // global
           I64[Hp - 64] = sat_s9PK7_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PK1_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 62;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.705211924 UTC

[section ""data" . Control.Exception.Base.bracketOnError_closure" {
     Control.Exception.Base.bracketOnError_closure:
         const Control.Exception.Base.bracketOnError_info;
 },
 Control.Exception.Base.bracketOnError_entry() //  [R2, R3, R4]
         { info_tbl: [(c9Q11,
                       label: Control.Exception.Base.bracketOnError_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q11: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.bracketOnError1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.706117986 UTC

[section ""data" . Control.Exception.Base.runtimeError_closure" {
     Control.Exception.Base.runtimeError_closure:
         const Control.Exception.Base.runtimeError_info;
         const 0;
 },
 Control.Exception.Base.runtimeError_entry() //  [R2]
         { info_tbl: [(c9Q1a,
                       label: Control.Exception.Base.runtimeError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q1a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Q1b; else goto c9Q1c;
       c9Q1b: // global
           R2 = R2;
           R1 = Control.Exception.Base.runtimeError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q1c: // global
           I64[Sp - 8] = block_c9Q18_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q18() //  [R1]
         { info_tbl: [(c9Q18,
                       label: block_c9Q18_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q18: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.707013199 UTC

[section ""cstring" . lvl_r9PFt_bytes" {
     lvl_r9PFt_bytes:
         I8[] [79,111,112,115,33,32,32,69,110,116,101,114,101,100,32,97,98,115,101,110,116,32,97,114,103,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.707912482 UTC

[section ""data" . Control.Exception.Base.absentError_closure" {
     Control.Exception.Base.absentError_closure:
         const Control.Exception.Base.absentError_info;
         const 0;
 },
 sat_s9PKz_entry() //  [R1]
         { info_tbl: [(c9Q1o,
                       label: sat_s9PKz_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q1o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Q1p; else goto c9Q1q;
       c9Q1p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Q1q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Control.Exception.Base.absentError_entry() //  [R2]
         { info_tbl: [(c9Q1t,
                       label: Control.Exception.Base.absentError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q1t: // global
           _s9PKy::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9Q1u; else goto c9Q1v;
       c9Q1v: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Q1x; else goto c9Q1w;
       c9Q1x: // global
           HpAlloc = 24;
           goto c9Q1u;
       c9Q1u: // global
           R2 = _s9PKy::I64;
           R1 = Control.Exception.Base.absentError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q1w: // global
           I64[Hp - 16] = sat_s9PKz_info;
           I64[Hp] = _s9PKy::I64;
           I64[Sp - 8] = block_c9Q1r_info;
           R3 = Hp - 16;
           R2 = lvl_r9PFt_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q1r() //  [R1]
         { info_tbl: [(c9Q1r,
                       label: block_c9Q1r_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q1r: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.70913708 UTC

[section ""cstring" . Control.Exception.Base.$trModule4_bytes" {
     Control.Exception.Base.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.709732623 UTC

[section ""data" . Control.Exception.Base.$trModule3_closure" {
     Control.Exception.Base.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.710262355 UTC

[section ""cstring" . Control.Exception.Base.$trModule2_bytes" {
     Control.Exception.Base.$trModule2_bytes:
         I8[] [67,111,110,116,114,111,108,46,69,120,99,101,112,116,105,111,110,46,66,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.71080306 UTC

[section ""data" . Control.Exception.Base.$trModule1_closure" {
     Control.Exception.Base.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.711348953 UTC

[section ""data" . Control.Exception.Base.$trModule_closure" {
     Control.Exception.Base.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Control.Exception.Base.$trModule3_closure+1;
         const Control.Exception.Base.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.711940708 UTC

[section ""data" . $krep_r9PFu_closure" {
     $krep_r9PFu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.712527406 UTC

[section ""data" . $krep1_r9PFv_closure" {
     $krep1_r9PFv_closure:
         const :_con_info;
         const $krep_r9PFu_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.71312463 UTC

[section ""data" . $krep2_r9PFw_closure" {
     $krep2_r9PFw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_r9PFv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.71383793 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionPatternMatchFail4_bytes" {
     Control.Exception.Base.$fExceptionPatternMatchFail4_bytes:
         I8[] [80,97,116,116,101,114,110,77,97,116,99,104,70,97,105,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.714400516 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail3_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionPatternMatchFail4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.714936789 UTC

[section ""data" . Control.Exception.Base.$tcPatternMatchFail_closure" {
     Control.Exception.Base.$tcPatternMatchFail_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail3_closure+1;
         const GHC.Types.krep$*_closure;
         const 15470147969565509342;
         const 8416277433045206230;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.715570547 UTC

[section ""data" . $krep3_r9PFx_closure" {
     $krep3_r9PFx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcPatternMatchFail_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.716112006 UTC

[section ""data" . Control.Exception.Base.$tc'PatternMatchFail1_closure" {
     Control.Exception.Base.$tc'PatternMatchFail1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep3_r9PFx_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.716684707 UTC

[section ""cstring" . Control.Exception.Base.$tc'PatternMatchFail3_bytes" {
     Control.Exception.Base.$tc'PatternMatchFail3_bytes:
         I8[] [39,80,97,116,116,101,114,110,77,97,116,99,104,70,97,105,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.717282771 UTC

[section ""data" . Control.Exception.Base.$tc'PatternMatchFail2_closure" {
     Control.Exception.Base.$tc'PatternMatchFail2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'PatternMatchFail3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.717839088 UTC

[section ""data" . Control.Exception.Base.$tc'PatternMatchFail_closure" {
     Control.Exception.Base.$tc'PatternMatchFail_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'PatternMatchFail2_closure+1;
         const Control.Exception.Base.$tc'PatternMatchFail1_closure+4;
         const 5659337934556330582;
         const 79463786797963870;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.71894997 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail2_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail2_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail2_entry() //  [R1]
         { info_tbl: [(c9Q1M,
                       label: Control.Exception.Base.$fExceptionPatternMatchFail2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q1M: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Q1N; else goto c9Q1O;
       c9Q1N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Q1O: // global
           (_c9Q1E::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Q1E::I64 == 0) goto c9Q1G; else goto c9Q1F;
       c9Q1G: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Q1F: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Q1E::I64;
           I64[Sp - 24] = block_c9Q1H_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionPatternMatchFail3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 8416277433045206230;
           R2 = 15470147969565509342;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Q1H() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Q1H,
                       label: block_c9Q1H_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q1H: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Q1I() args: 0, res: 0, upd: 0;
     }
 },
 _c9Q1I() //  []
         { info_tbl: [(c9Q1I,
                       label: block_c9Q1I_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q1I: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Q1R; else goto c9Q1Q;
       c9Q1R: // global
           HpAlloc = 48;
           I64[Sp] = block_c9Q1I_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Q1Q: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.720839991 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_entry() //  [R2]
         { info_tbl: [(c9Q21,
                       label: Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q21: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Q25; else goto c9Q26;
       c9Q25: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q26: // global
           I64[Sp - 8] = block_c9Q1Y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Q2r; else goto c9Q1Z;
       u9Q2r: // global
           call _c9Q1Y(R1) args: 0, res: 0, upd: 0;
       c9Q1Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q1Y() //  [R1]
         { info_tbl: [(c9Q1Y,
                       label: block_c9Q1Y_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q1Y: // global
           I64[Sp - 8] = block_c9Q24_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q24() //  [R1]
         { info_tbl: [(c9Q24,
                       label: block_c9Q24_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q24: // global
           I64[Sp] = block_c9Q2b_info;
           R3 = Control.Exception.Base.$fExceptionPatternMatchFail2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q2b() //  [R1]
         { info_tbl: [(c9Q2b,
                       label: block_c9Q2b_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q2b: // global
           if (R1 & 7 == 1) goto c9Q2i; else goto c9Q2m;
       c9Q2i: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Q2m: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Q2p; else goto c9Q2o;
       c9Q2p: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Q2o: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.72424755 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionPatternMatchFail2_closure;
         const Control.Exception.Base.$fShowPatternMatchFail_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_entry() //  [R2]
         { info_tbl: [(c9Q2x,
                       label: Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q2x: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Q2B; else goto c9Q2A;
       c9Q2B: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q2A: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionPatternMatchFail_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.725202655 UTC

[section ""cstring" . lvl1_r9PFy_bytes" {
     lvl1_r9PFy_bytes:
         I8[] [78,111,110,45,101,120,104,97,117,115,116,105,118,101,32,112,97,116,116,101,114,110,115,32,105,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.726223099 UTC

[section ""data" . lvl2_r9PFz_closure" {
     lvl2_r9PFz_closure:
         const lvl2_r9PFz_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r9PFz_entry() //  [R1]
         { info_tbl: [(c9Q2I,
                       label: lvl2_r9PFz_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q2I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Q2J; else goto c9Q2K;
       c9Q2J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Q2K: // global
           (_c9Q2F::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Q2F::I64 == 0) goto c9Q2H; else goto c9Q2G;
       c9Q2H: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Q2G: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Q2F::I64;
           R2 = lvl1_r9PFy_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.727282197 UTC

[section ""data" . Control.Exception.Base.patError_closure" {
     Control.Exception.Base.patError_closure:
         const Control.Exception.Base.patError_info;
         const 0;
 },
 Control.Exception.Base.patError_entry() //  [R2]
         { info_tbl: [(c9Q2R,
                       label: Control.Exception.Base.patError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q2R: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Q2S; else goto c9Q2T;
       c9Q2S: // global
           R2 = R2;
           R1 = Control.Exception.Base.patError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q2T: // global
           I64[Sp - 8] = block_c9Q2P_info;
           R3 = lvl2_r9PFz_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q2P() //  [R1]
         { info_tbl: [(c9Q2P,
                       label: block_c9Q2P_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q2P: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionPatternMatchFail_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.728213397 UTC

[section ""cstring" . lvl3_r9PFA_bytes" {
     lvl3_r9PFA_bytes:
         I8[] [78,111,110,45,101,120,104,97,117,115,116,105,118,101,32,103,117,97,114,100,115,32,105,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.728932997 UTC

[section ""data" . lvl4_r9PFB_closure" {
     lvl4_r9PFB_closure:
         const lvl4_r9PFB_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r9PFB_entry() //  [R1]
         { info_tbl: [(c9Q33,
                       label: lvl4_r9PFB_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q33: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Q34; else goto c9Q35;
       c9Q34: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Q35: // global
           (_c9Q30::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Q30::I64 == 0) goto c9Q32; else goto c9Q31;
       c9Q32: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Q31: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Q30::I64;
           R2 = lvl3_r9PFA_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.730018513 UTC

[section ""data" . Control.Exception.Base.nonExhaustiveGuardsError_closure" {
     Control.Exception.Base.nonExhaustiveGuardsError_closure:
         const Control.Exception.Base.nonExhaustiveGuardsError_info;
         const 0;
 },
 Control.Exception.Base.nonExhaustiveGuardsError_entry() //  [R2]
         { info_tbl: [(c9Q3c,
                       label: Control.Exception.Base.nonExhaustiveGuardsError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q3c: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Q3d; else goto c9Q3e;
       c9Q3d: // global
           R2 = R2;
           R1 = Control.Exception.Base.nonExhaustiveGuardsError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q3e: // global
           I64[Sp - 8] = block_c9Q3a_info;
           R3 = lvl4_r9PFB_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q3a() //  [R1]
         { info_tbl: [(c9Q3a,
                       label: block_c9Q3a_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q3a: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionPatternMatchFail_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.730978979 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionRecSelError4_bytes" {
     Control.Exception.Base.$fExceptionRecSelError4_bytes:
         I8[] [82,101,99,83,101,108,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.731503422 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError3_closure" {
     Control.Exception.Base.$fExceptionRecSelError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionRecSelError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.732107978 UTC

[section ""data" . Control.Exception.Base.$tcRecSelError_closure" {
     Control.Exception.Base.$tcRecSelError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 10415770337441550020;
         const 15768375346093691416;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.732711434 UTC

[section ""data" . $krep4_r9PFC_closure" {
     $krep4_r9PFC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcRecSelError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.733364324 UTC

[section ""data" . Control.Exception.Base.$tc'RecSelError1_closure" {
     Control.Exception.Base.$tc'RecSelError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep4_r9PFC_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.733915871 UTC

[section ""cstring" . Control.Exception.Base.$tc'RecSelError3_bytes" {
     Control.Exception.Base.$tc'RecSelError3_bytes:
         I8[] [39,82,101,99,83,101,108,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.734469184 UTC

[section ""data" . Control.Exception.Base.$tc'RecSelError2_closure" {
     Control.Exception.Base.$tc'RecSelError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'RecSelError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.735038807 UTC

[section ""data" . Control.Exception.Base.$tc'RecSelError_closure" {
     Control.Exception.Base.$tc'RecSelError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'RecSelError2_closure+1;
         const Control.Exception.Base.$tc'RecSelError1_closure+4;
         const 5471381485413442404;
         const 14158408912397908002;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.7361138 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError2_closure" {
     Control.Exception.Base.$fExceptionRecSelError2_closure:
         const Control.Exception.Base.$fExceptionRecSelError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecSelError2_entry() //  [R1]
         { info_tbl: [(c9Q3t,
                       label: Control.Exception.Base.$fExceptionRecSelError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q3t: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Q3u; else goto c9Q3v;
       c9Q3u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Q3v: // global
           (_c9Q3l::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Q3l::I64 == 0) goto c9Q3n; else goto c9Q3m;
       c9Q3n: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Q3m: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Q3l::I64;
           I64[Sp - 24] = block_c9Q3o_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionRecSelError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 15768375346093691416;
           R2 = 10415770337441550020;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Q3o() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Q3o,
                       label: block_c9Q3o_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q3o: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Q3p() args: 0, res: 0, upd: 0;
     }
 },
 _c9Q3p() //  []
         { info_tbl: [(c9Q3p,
                       label: block_c9Q3p_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q3p: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Q3y; else goto c9Q3x;
       c9Q3y: // global
           HpAlloc = 48;
           I64[Sp] = block_c9Q3p_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Q3x: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.738188615 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecSelError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9Q3I,
                       label: Control.Exception.Base.$fExceptionRecSelError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q3I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Q3M; else goto c9Q3N;
       c9Q3M: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q3N: // global
           I64[Sp - 8] = block_c9Q3F_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Q48; else goto c9Q3G;
       u9Q48: // global
           call _c9Q3F(R1) args: 0, res: 0, upd: 0;
       c9Q3G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q3F() //  [R1]
         { info_tbl: [(c9Q3F,
                       label: block_c9Q3F_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q3F: // global
           I64[Sp - 8] = block_c9Q3L_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q3L() //  [R1]
         { info_tbl: [(c9Q3L,
                       label: block_c9Q3L_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q3L: // global
           I64[Sp] = block_c9Q3S_info;
           R3 = Control.Exception.Base.$fExceptionRecSelError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q3S() //  [R1]
         { info_tbl: [(c9Q3S,
                       label: block_c9Q3S_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q3S: // global
           if (R1 & 7 == 1) goto c9Q3Z; else goto c9Q43;
       c9Q3Z: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Q43: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Q46; else goto c9Q45;
       c9Q46: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Q45: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.739730756 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError_closure" {
     Control.Exception.Base.$fExceptionRecSelError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionRecSelError2_closure;
         const Control.Exception.Base.$fShowRecSelError_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecSelError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9Q4e,
                       label: Control.Exception.Base.$fExceptionRecSelError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q4e: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Q4i; else goto c9Q4h;
       c9Q4i: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q4h: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionRecSelError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.74059778 UTC

[section ""cstring" . lvl5_r9PFD_bytes" {
     lvl5_r9PFD_bytes:
         I8[] [78,111,32,109,97,116,99,104,32,105,110,32,114,101,99,111,114,100,32,115,101,108,101,99,116,111,114,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.741487509 UTC

[section ""data" . Control.Exception.Base.recSelError_closure" {
     Control.Exception.Base.recSelError_closure:
         const Control.Exception.Base.recSelError_info;
         const 0;
 },
 sat_s9PL4_entry() //  [R1]
         { info_tbl: [(c9Q4r,
                       label: sat_s9PL4_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q4r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Q4s; else goto c9Q4t;
       c9Q4s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Q4t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Control.Exception.Base.recSelError_entry() //  [R2]
         { info_tbl: [(c9Q4w,
                       label: Control.Exception.Base.recSelError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q4w: // global
           _s9PL3::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9Q4x; else goto c9Q4y;
       c9Q4y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Q4A; else goto c9Q4z;
       c9Q4A: // global
           HpAlloc = 24;
           goto c9Q4x;
       c9Q4x: // global
           R2 = _s9PL3::I64;
           R1 = Control.Exception.Base.recSelError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q4z: // global
           I64[Hp - 16] = sat_s9PL4_info;
           I64[Hp] = _s9PL3::I64;
           I64[Sp - 8] = block_c9Q4u_info;
           R3 = Hp - 16;
           R2 = lvl5_r9PFD_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q4u() //  [R1]
         { info_tbl: [(c9Q4u,
                       label: block_c9Q4u_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q4u: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionRecSelError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.742726291 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionRecConError4_bytes" {
     Control.Exception.Base.$fExceptionRecConError4_bytes:
         I8[] [82,101,99,67,111,110,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.743270985 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError3_closure" {
     Control.Exception.Base.$fExceptionRecConError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionRecConError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.743826082 UTC

[section ""data" . Control.Exception.Base.$tcRecConError_closure" {
     Control.Exception.Base.$tcRecConError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionRecConError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 12352028005606494596;
         const 6364281046760374976;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.744458816 UTC

[section ""data" . $krep5_r9PFE_closure" {
     $krep5_r9PFE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcRecConError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.745000505 UTC

[section ""data" . Control.Exception.Base.$tc'RecConError1_closure" {
     Control.Exception.Base.$tc'RecConError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep5_r9PFE_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.745535786 UTC

[section ""cstring" . Control.Exception.Base.$tc'RecConError3_bytes" {
     Control.Exception.Base.$tc'RecConError3_bytes:
         I8[] [39,82,101,99,67,111,110,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.746083782 UTC

[section ""data" . Control.Exception.Base.$tc'RecConError2_closure" {
     Control.Exception.Base.$tc'RecConError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'RecConError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.746674198 UTC

[section ""data" . Control.Exception.Base.$tc'RecConError_closure" {
     Control.Exception.Base.$tc'RecConError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'RecConError2_closure+1;
         const Control.Exception.Base.$tc'RecConError1_closure+4;
         const 9626440070376619587;
         const 11467734131060317064;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.747661803 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError2_closure" {
     Control.Exception.Base.$fExceptionRecConError2_closure:
         const Control.Exception.Base.$fExceptionRecConError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecConError2_entry() //  [R1]
         { info_tbl: [(c9Q4P,
                       label: Control.Exception.Base.$fExceptionRecConError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q4P: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Q4Q; else goto c9Q4R;
       c9Q4Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Q4R: // global
           (_c9Q4H::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Q4H::I64 == 0) goto c9Q4J; else goto c9Q4I;
       c9Q4J: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Q4I: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Q4H::I64;
           I64[Sp - 24] = block_c9Q4K_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionRecConError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 6364281046760374976;
           R2 = 12352028005606494596;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Q4K() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Q4K,
                       label: block_c9Q4K_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q4K: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Q4L() args: 0, res: 0, upd: 0;
     }
 },
 _c9Q4L() //  []
         { info_tbl: [(c9Q4L,
                       label: block_c9Q4L_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q4L: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Q4U; else goto c9Q4T;
       c9Q4U: // global
           HpAlloc = 48;
           I64[Sp] = block_c9Q4L_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Q4T: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.749793303 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionRecConError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecConError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9Q54,
                       label: Control.Exception.Base.$fExceptionRecConError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q54: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Q58; else goto c9Q59;
       c9Q58: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecConError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q59: // global
           I64[Sp - 8] = block_c9Q51_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Q5u; else goto c9Q52;
       u9Q5u: // global
           call _c9Q51(R1) args: 0, res: 0, upd: 0;
       c9Q52: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q51() //  [R1]
         { info_tbl: [(c9Q51,
                       label: block_c9Q51_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q51: // global
           I64[Sp - 8] = block_c9Q57_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q57() //  [R1]
         { info_tbl: [(c9Q57,
                       label: block_c9Q57_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q57: // global
           I64[Sp] = block_c9Q5e_info;
           R3 = Control.Exception.Base.$fExceptionRecConError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q5e() //  [R1]
         { info_tbl: [(c9Q5e,
                       label: block_c9Q5e_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q5e: // global
           if (R1 & 7 == 1) goto c9Q5l; else goto c9Q5p;
       c9Q5l: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Q5p: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Q5s; else goto c9Q5r;
       c9Q5s: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Q5r: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.751316863 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError_closure" {
     Control.Exception.Base.$fExceptionRecConError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionRecConError2_closure;
         const Control.Exception.Base.$fShowRecConError_closure+1;
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionRecConError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionRecConError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionRecConError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecConError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9Q5A,
                       label: Control.Exception.Base.$fExceptionRecConError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q5A: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Q5E; else goto c9Q5D;
       c9Q5E: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecConError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q5D: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionRecConError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.752251983 UTC

[section ""cstring" . lvl6_r9PFF_bytes" {
     lvl6_r9PFF_bytes:
         I8[] [77,105,115,115,105,110,103,32,102,105,101,108,100,32,105,110,32,114,101,99,111,114,100,32,99,111,110,115,116,114,117,99,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.752959489 UTC

[section ""data" . lvl7_r9PFG_closure" {
     lvl7_r9PFG_closure:
         const lvl7_r9PFG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r9PFG_entry() //  [R1]
         { info_tbl: [(c9Q5L,
                       label: lvl7_r9PFG_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q5L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Q5M; else goto c9Q5N;
       c9Q5M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Q5N: // global
           (_c9Q5I::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Q5I::I64 == 0) goto c9Q5K; else goto c9Q5J;
       c9Q5K: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Q5J: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Q5I::I64;
           R2 = lvl6_r9PFF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.754056811 UTC

[section ""data" . Control.Exception.Base.recConError_closure" {
     Control.Exception.Base.recConError_closure:
         const Control.Exception.Base.recConError_info;
         const 0;
 },
 Control.Exception.Base.recConError_entry() //  [R2]
         { info_tbl: [(c9Q5U,
                       label: Control.Exception.Base.recConError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q5U: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Q5V; else goto c9Q5W;
       c9Q5V: // global
           R2 = R2;
           R1 = Control.Exception.Base.recConError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q5W: // global
           I64[Sp - 8] = block_c9Q5S_info;
           R3 = lvl7_r9PFG_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q5S() //  [R1]
         { info_tbl: [(c9Q5S,
                       label: block_c9Q5S_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q5S: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionRecConError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.755002252 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionRecUpdError4_bytes" {
     Control.Exception.Base.$fExceptionRecUpdError4_bytes:
         I8[] [82,101,99,85,112,100,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.755575148 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError3_closure" {
     Control.Exception.Base.$fExceptionRecUpdError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionRecUpdError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.756135424 UTC

[section ""data" . Control.Exception.Base.$tcRecUpdError_closure" {
     Control.Exception.Base.$tcRecUpdError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 15702205725616076489;
         const 17185013925011980063;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.756696419 UTC

[section ""data" . $krep6_r9PFH_closure" {
     $krep6_r9PFH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcRecUpdError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.757231845 UTC

[section ""data" . Control.Exception.Base.$tc'RecUpdError1_closure" {
     Control.Exception.Base.$tc'RecUpdError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep6_r9PFH_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.757802039 UTC

[section ""cstring" . Control.Exception.Base.$tc'RecUpdError3_bytes" {
     Control.Exception.Base.$tc'RecUpdError3_bytes:
         I8[] [39,82,101,99,85,112,100,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.758391231 UTC

[section ""data" . Control.Exception.Base.$tc'RecUpdError2_closure" {
     Control.Exception.Base.$tc'RecUpdError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'RecUpdError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.758937362 UTC

[section ""data" . Control.Exception.Base.$tc'RecUpdError_closure" {
     Control.Exception.Base.$tc'RecUpdError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'RecUpdError2_closure+1;
         const Control.Exception.Base.$tc'RecUpdError1_closure+4;
         const 16559845159098082290;
         const 2874382059338705699;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.75995395 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError2_closure" {
     Control.Exception.Base.$fExceptionRecUpdError2_closure:
         const Control.Exception.Base.$fExceptionRecUpdError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecUpdError2_entry() //  [R1]
         { info_tbl: [(c9Q6b,
                       label: Control.Exception.Base.$fExceptionRecUpdError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q6b: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Q6c; else goto c9Q6d;
       c9Q6c: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Q6d: // global
           (_c9Q63::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Q63::I64 == 0) goto c9Q65; else goto c9Q64;
       c9Q65: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Q64: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Q63::I64;
           I64[Sp - 24] = block_c9Q66_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionRecUpdError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 17185013925011980063;
           R2 = 15702205725616076489;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Q66() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Q66,
                       label: block_c9Q66_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q66: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Q67() args: 0, res: 0, upd: 0;
     }
 },
 _c9Q67() //  []
         { info_tbl: [(c9Q67,
                       label: block_c9Q67_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q67: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Q6g; else goto c9Q6f;
       c9Q6g: // global
           HpAlloc = 48;
           I64[Sp] = block_c9Q67_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Q6f: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.763109195 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecUpdError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9Q6q,
                       label: Control.Exception.Base.$fExceptionRecUpdError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q6q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Q6u; else goto c9Q6v;
       c9Q6u: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q6v: // global
           I64[Sp - 8] = block_c9Q6n_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Q6Q; else goto c9Q6o;
       u9Q6Q: // global
           call _c9Q6n(R1) args: 0, res: 0, upd: 0;
       c9Q6o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q6n() //  [R1]
         { info_tbl: [(c9Q6n,
                       label: block_c9Q6n_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q6n: // global
           I64[Sp - 8] = block_c9Q6t_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q6t() //  [R1]
         { info_tbl: [(c9Q6t,
                       label: block_c9Q6t_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q6t: // global
           I64[Sp] = block_c9Q6A_info;
           R3 = Control.Exception.Base.$fExceptionRecUpdError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q6A() //  [R1]
         { info_tbl: [(c9Q6A,
                       label: block_c9Q6A_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q6A: // global
           if (R1 & 7 == 1) goto c9Q6H; else goto c9Q6L;
       c9Q6H: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Q6L: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Q6O; else goto c9Q6N;
       c9Q6O: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Q6N: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.764746301 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError_closure" {
     Control.Exception.Base.$fExceptionRecUpdError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionRecUpdError2_closure;
         const Control.Exception.Base.$fShowRecUpdError_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecUpdError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9Q6W,
                       label: Control.Exception.Base.$fExceptionRecUpdError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q6W: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Q70; else goto c9Q6Z;
       c9Q70: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q6Z: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionRecUpdError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.76581106 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNoMethodError4_bytes" {
     Control.Exception.Base.$fExceptionNoMethodError4_bytes:
         I8[] [78,111,77,101,116,104,111,100,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.766344947 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError3_closure" {
     Control.Exception.Base.$fExceptionNoMethodError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionNoMethodError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.766949769 UTC

[section ""data" . Control.Exception.Base.$tcNoMethodError_closure" {
     Control.Exception.Base.$tcNoMethodError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 11351432124310594529;
         const 14675551822527927261;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.767522741 UTC

[section ""data" . $krep7_r9PFI_closure" {
     $krep7_r9PFI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcNoMethodError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.76809088 UTC

[section ""data" . Control.Exception.Base.$tc'NoMethodError1_closure" {
     Control.Exception.Base.$tc'NoMethodError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep7_r9PFI_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.768591085 UTC

[section ""cstring" . Control.Exception.Base.$tc'NoMethodError3_bytes" {
     Control.Exception.Base.$tc'NoMethodError3_bytes:
         I8[] [39,78,111,77,101,116,104,111,100,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.7691562 UTC

[section ""data" . Control.Exception.Base.$tc'NoMethodError2_closure" {
     Control.Exception.Base.$tc'NoMethodError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'NoMethodError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.770026646 UTC

[section ""data" . Control.Exception.Base.$tc'NoMethodError_closure" {
     Control.Exception.Base.$tc'NoMethodError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'NoMethodError2_closure+1;
         const Control.Exception.Base.$tc'NoMethodError1_closure+4;
         const 17186686744263410642;
         const 16452408278578849625;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.771090233 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError2_closure" {
     Control.Exception.Base.$fExceptionNoMethodError2_closure:
         const Control.Exception.Base.$fExceptionNoMethodError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNoMethodError2_entry() //  [R1]
         { info_tbl: [(c9Q7c,
                       label: Control.Exception.Base.$fExceptionNoMethodError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q7c: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Q7d; else goto c9Q7e;
       c9Q7d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Q7e: // global
           (_c9Q74::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Q74::I64 == 0) goto c9Q76; else goto c9Q75;
       c9Q76: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Q75: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Q74::I64;
           I64[Sp - 24] = block_c9Q77_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionNoMethodError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 14675551822527927261;
           R2 = 11351432124310594529;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Q77() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Q77,
                       label: block_c9Q77_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q77: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Q78() args: 0, res: 0, upd: 0;
     }
 },
 _c9Q78() //  []
         { info_tbl: [(c9Q78,
                       label: block_c9Q78_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q78: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Q7h; else goto c9Q7g;
       c9Q7h: // global
           HpAlloc = 48;
           I64[Sp] = block_c9Q78_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Q7g: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.772893587 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNoMethodError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9Q7r,
                       label: Control.Exception.Base.$fExceptionNoMethodError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q7r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Q7v; else goto c9Q7w;
       c9Q7v: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q7w: // global
           I64[Sp - 8] = block_c9Q7o_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Q7R; else goto c9Q7p;
       u9Q7R: // global
           call _c9Q7o(R1) args: 0, res: 0, upd: 0;
       c9Q7p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q7o() //  [R1]
         { info_tbl: [(c9Q7o,
                       label: block_c9Q7o_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q7o: // global
           I64[Sp - 8] = block_c9Q7u_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q7u() //  [R1]
         { info_tbl: [(c9Q7u,
                       label: block_c9Q7u_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q7u: // global
           I64[Sp] = block_c9Q7B_info;
           R3 = Control.Exception.Base.$fExceptionNoMethodError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q7B() //  [R1]
         { info_tbl: [(c9Q7B,
                       label: block_c9Q7B_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q7B: // global
           if (R1 & 7 == 1) goto c9Q7I; else goto c9Q7M;
       c9Q7I: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Q7M: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Q7P; else goto c9Q7O;
       c9Q7P: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Q7O: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.774508669 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError_closure" {
     Control.Exception.Base.$fExceptionNoMethodError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionNoMethodError2_closure;
         const Control.Exception.Base.$fShowNoMethodError_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNoMethodError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9Q7X,
                       label: Control.Exception.Base.$fExceptionNoMethodError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q7X: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Q81; else goto c9Q80;
       c9Q81: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q80: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionNoMethodError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.775419662 UTC

[section ""cstring" . lvl8_r9PFJ_bytes" {
     lvl8_r9PFJ_bytes:
         I8[] [78,111,32,105,110,115,116,97,110,99,101,32,110,111,114,32,100,101,102,97,117,108,116,32,109,101,116,104,111,100,32,102,111,114,32,99,108,97,115,115,32,111,112,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.776175703 UTC

[section ""data" . lvl9_r9PFK_closure" {
     lvl9_r9PFK_closure:
         const lvl9_r9PFK_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r9PFK_entry() //  [R1]
         { info_tbl: [(c9Q88,
                       label: lvl9_r9PFK_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q88: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Q89; else goto c9Q8a;
       c9Q89: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Q8a: // global
           (_c9Q85::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Q85::I64 == 0) goto c9Q87; else goto c9Q86;
       c9Q87: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Q86: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Q85::I64;
           R2 = lvl8_r9PFJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.77723584 UTC

[section ""data" . Control.Exception.Base.noMethodBindingError_closure" {
     Control.Exception.Base.noMethodBindingError_closure:
         const Control.Exception.Base.noMethodBindingError_info;
         const 0;
 },
 Control.Exception.Base.noMethodBindingError_entry() //  [R2]
         { info_tbl: [(c9Q8h,
                       label: Control.Exception.Base.noMethodBindingError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q8h: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Q8i; else goto c9Q8j;
       c9Q8i: // global
           R2 = R2;
           R1 = Control.Exception.Base.noMethodBindingError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q8j: // global
           I64[Sp - 8] = block_c9Q8f_info;
           R3 = lvl9_r9PFK_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q8f() //  [R1]
         { info_tbl: [(c9Q8f,
                       label: block_c9Q8f_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q8f: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionNoMethodError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.778209979 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionTypeError4_bytes" {
     Control.Exception.Base.$fExceptionTypeError4_bytes:
         I8[] [84,121,112,101,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.778756847 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError3_closure" {
     Control.Exception.Base.$fExceptionTypeError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionTypeError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.779266854 UTC

[section ""data" . Control.Exception.Base.$tcTypeError_closure" {
     Control.Exception.Base.$tcTypeError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionTypeError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 16164392450212773017;
         const 7054022894506300317;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.779845617 UTC

[section ""data" . $krep8_r9PFL_closure" {
     $krep8_r9PFL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcTypeError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.780389261 UTC

[section ""data" . Control.Exception.Base.$tc'TypeError1_closure" {
     Control.Exception.Base.$tc'TypeError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep8_r9PFL_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.780949232 UTC

[section ""cstring" . Control.Exception.Base.$tc'TypeError3_bytes" {
     Control.Exception.Base.$tc'TypeError3_bytes:
         I8[] [39,84,121,112,101,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.781530281 UTC

[section ""data" . Control.Exception.Base.$tc'TypeError2_closure" {
     Control.Exception.Base.$tc'TypeError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'TypeError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.782099989 UTC

[section ""data" . Control.Exception.Base.$tc'TypeError_closure" {
     Control.Exception.Base.$tc'TypeError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'TypeError2_closure+1;
         const Control.Exception.Base.$tc'TypeError1_closure+4;
         const 2042750002965703545;
         const 3275664116896771855;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.783101885 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError2_closure" {
     Control.Exception.Base.$fExceptionTypeError2_closure:
         const Control.Exception.Base.$fExceptionTypeError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionTypeError2_entry() //  [R1]
         { info_tbl: [(c9Q8y,
                       label: Control.Exception.Base.$fExceptionTypeError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q8y: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Q8z; else goto c9Q8A;
       c9Q8z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Q8A: // global
           (_c9Q8q::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Q8q::I64 == 0) goto c9Q8s; else goto c9Q8r;
       c9Q8s: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Q8r: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Q8q::I64;
           I64[Sp - 24] = block_c9Q8t_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionTypeError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 7054022894506300317;
           R2 = 16164392450212773017;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Q8t() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Q8t,
                       label: block_c9Q8t_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q8t: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Q8u() args: 0, res: 0, upd: 0;
     }
 },
 _c9Q8u() //  []
         { info_tbl: [(c9Q8u,
                       label: block_c9Q8u_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q8u: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Q8D; else goto c9Q8C;
       c9Q8D: // global
           HpAlloc = 48;
           I64[Sp] = block_c9Q8u_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Q8C: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.784942817 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionTypeError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionTypeError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9Q8N,
                       label: Control.Exception.Base.$fExceptionTypeError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q8N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Q8R; else goto c9Q8S;
       c9Q8R: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionTypeError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q8S: // global
           I64[Sp - 8] = block_c9Q8K_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Q9d; else goto c9Q8L;
       u9Q9d: // global
           call _c9Q8K(R1) args: 0, res: 0, upd: 0;
       c9Q8L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q8K() //  [R1]
         { info_tbl: [(c9Q8K,
                       label: block_c9Q8K_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q8K: // global
           I64[Sp - 8] = block_c9Q8Q_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q8Q() //  [R1]
         { info_tbl: [(c9Q8Q,
                       label: block_c9Q8Q_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q8Q: // global
           I64[Sp] = block_c9Q8X_info;
           R3 = Control.Exception.Base.$fExceptionTypeError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q8X() //  [R1]
         { info_tbl: [(c9Q8X,
                       label: block_c9Q8X_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q8X: // global
           if (R1 & 7 == 1) goto c9Q94; else goto c9Q98;
       c9Q94: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Q98: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Q9b; else goto c9Q9a;
       c9Q9b: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Q9a: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.786597561 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError_closure" {
     Control.Exception.Base.$fExceptionTypeError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionTypeError2_closure;
         const Control.Exception.Base.$fShowTypeError_closure+1;
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionTypeError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionTypeError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionTypeError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionTypeError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9Q9j,
                       label: Control.Exception.Base.$fExceptionTypeError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q9j: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Q9n; else goto c9Q9m;
       c9Q9n: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionTypeError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q9m: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionTypeError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.787708822 UTC

[section ""data" . Control.Exception.Base.typeError_closure" {
     Control.Exception.Base.typeError_closure:
         const Control.Exception.Base.typeError_info;
         const 0;
 },
 Control.Exception.Base.typeError_entry() //  [R2]
         { info_tbl: [(c9Q9u,
                       label: Control.Exception.Base.typeError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q9u: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Q9v; else goto c9Q9w;
       c9Q9v: // global
           R2 = R2;
           R1 = Control.Exception.Base.typeError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Q9w: // global
           I64[Sp - 8] = block_c9Q9s_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Q9s() //  [R1]
         { info_tbl: [(c9Q9s,
                       label: block_c9Q9s_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q9s: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionTypeError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.788642703 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNonTermination5_bytes" {
     Control.Exception.Base.$fExceptionNonTermination5_bytes:
         I8[] [78,111,110,84,101,114,109,105,110,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.789219886 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination4_closure" {
     Control.Exception.Base.$fExceptionNonTermination4_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionNonTermination5_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.789889987 UTC

[section ""data" . Control.Exception.Base.$tcNonTermination_closure" {
     Control.Exception.Base.$tcNonTermination_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination4_closure+1;
         const GHC.Types.krep$*_closure;
         const 3579424895879668618;
         const 10599900892006414641;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.790493389 UTC

[section ""data" . Control.Exception.Base.$tc'NonTermination1_closure" {
     Control.Exception.Base.$tc'NonTermination1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcNonTermination_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.791099741 UTC

[section ""cstring" . Control.Exception.Base.$tc'NonTermination3_bytes" {
     Control.Exception.Base.$tc'NonTermination3_bytes:
         I8[] [39,78,111,110,84,101,114,109,105,110,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.791668748 UTC

[section ""data" . Control.Exception.Base.$tc'NonTermination2_closure" {
     Control.Exception.Base.$tc'NonTermination2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'NonTermination3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.792194733 UTC

[section ""data" . Control.Exception.Base.$tc'NonTermination_closure" {
     Control.Exception.Base.$tc'NonTermination_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'NonTermination2_closure+1;
         const Control.Exception.Base.$tc'NonTermination1_closure+1;
         const 12968537629115503750;
         const 16395462767232503200;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.79383466 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination3_closure" {
     Control.Exception.Base.$fExceptionNonTermination3_closure:
         const Control.Exception.Base.$fExceptionNonTermination3_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination3_entry() //  [R1]
         { info_tbl: [(c9Q9L,
                       label: Control.Exception.Base.$fExceptionNonTermination3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q9L: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Q9M; else goto c9Q9N;
       c9Q9M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Q9N: // global
           (_c9Q9D::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Q9D::I64 == 0) goto c9Q9F; else goto c9Q9E;
       c9Q9F: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Q9E: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Q9D::I64;
           I64[Sp - 24] = block_c9Q9G_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionNonTermination4_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 10599900892006414641;
           R2 = 3579424895879668618;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Q9G() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Q9G,
                       label: block_c9Q9G_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q9G: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Q9H() args: 0, res: 0, upd: 0;
     }
 },
 _c9Q9H() //  []
         { info_tbl: [(c9Q9H,
                       label: block_c9Q9H_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q9H: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Q9Q; else goto c9Q9P;
       c9Q9Q: // global
           HpAlloc = 48;
           I64[Sp] = block_c9Q9H_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Q9P: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.795275814 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNestedAtomically5_bytes" {
     Control.Exception.Base.$fExceptionNestedAtomically5_bytes:
         I8[] [78,101,115,116,101,100,65,116,111,109,105,99,97,108,108,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.795846866 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically4_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically4_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionNestedAtomically5_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.79644589 UTC

[section ""data" . Control.Exception.Base.$tcNestedAtomically_closure" {
     Control.Exception.Base.$tcNestedAtomically_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically4_closure+1;
         const GHC.Types.krep$*_closure;
         const 13388460688970090897;
         const 8422109474180001052;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.797020268 UTC

[section ""data" . Control.Exception.Base.$tc'NestedAtomically1_closure" {
     Control.Exception.Base.$tc'NestedAtomically1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcNestedAtomically_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.797666075 UTC

[section ""cstring" . Control.Exception.Base.$tc'NestedAtomically3_bytes" {
     Control.Exception.Base.$tc'NestedAtomically3_bytes:
         I8[] [39,78,101,115,116,101,100,65,116,111,109,105,99,97,108,108,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.798190592 UTC

[section ""data" . Control.Exception.Base.$tc'NestedAtomically2_closure" {
     Control.Exception.Base.$tc'NestedAtomically2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'NestedAtomically3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.798699767 UTC

[section ""data" . Control.Exception.Base.$tc'NestedAtomically_closure" {
     Control.Exception.Base.$tc'NestedAtomically_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'NestedAtomically2_closure+1;
         const Control.Exception.Base.$tc'NestedAtomically1_closure+1;
         const 4753625237420970988;
         const 7635940481883810337;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.800921335 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically3_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically3_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically3_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically3_entry() //  [R1]
         { info_tbl: [(c9Qa4,
                       label: Control.Exception.Base.$fExceptionNestedAtomically3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qa4: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Qa5; else goto c9Qa6;
       c9Qa5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Qa6: // global
           (_c9Q9W::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Q9W::I64 == 0) goto c9Q9Y; else goto c9Q9X;
       c9Q9Y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Q9X: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Q9W::I64;
           I64[Sp - 24] = block_c9Q9Z_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionNestedAtomically4_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 8422109474180001052;
           R2 = 13388460688970090897;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Q9Z() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Q9Z,
                       label: block_c9Q9Z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Q9Z: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Qa0() args: 0, res: 0, upd: 0;
     }
 },
 _c9Qa0() //  []
         { info_tbl: [(c9Qa0,
                       label: block_c9Qa0_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qa0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Qa9; else goto c9Qa8;
       c9Qa9: // global
           HpAlloc = 48;
           I64[Sp] = block_c9Qa0_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Qa8: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.802880672 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure" {
     Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure:
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination_$cfromException_entry() //  [R2]
         { info_tbl: [(c9Qaj,
                       label: Control.Exception.Base.$fExceptionNonTermination_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qaj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qan; else goto c9Qao;
       c9Qan: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qao: // global
           I64[Sp - 8] = block_c9Qag_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9QaJ; else goto c9Qah;
       u9QaJ: // global
           call _c9Qag(R1) args: 0, res: 0, upd: 0;
       c9Qah: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qag() //  [R1]
         { info_tbl: [(c9Qag,
                       label: block_c9Qag_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qag: // global
           I64[Sp - 8] = block_c9Qam_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qam() //  [R1]
         { info_tbl: [(c9Qam,
                       label: block_c9Qam_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qam: // global
           I64[Sp] = block_c9Qat_info;
           R3 = Control.Exception.Base.$fExceptionNonTermination3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qat() //  [R1]
         { info_tbl: [(c9Qat,
                       label: block_c9Qat_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qat: // global
           if (R1 & 7 == 1) goto c9QaA; else goto c9QaE;
       c9QaA: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9QaE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QaH; else goto c9QaG;
       c9QaH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QaG: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.804491001 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination_closure" {
     Control.Exception.Base.$fExceptionNonTermination_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionNonTermination3_closure;
         const Control.Exception.Base.$fShowNonTermination_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure" {
     Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure:
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination_$ctoException_entry() //  [R2]
         { info_tbl: [(c9QaP,
                       label: Control.Exception.Base.$fExceptionNonTermination_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QaP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9QaT; else goto c9QaS;
       c9QaT: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QaS: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionNonTermination_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.805643419 UTC

[section ""data" . Control.Exception.Base.nonTermination_closure" {
     Control.Exception.Base.nonTermination_closure:
         const Control.Exception.Base.nonTermination_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.nonTermination_entry() //  [R1]
         { info_tbl: [(c9Qb0,
                       label: Control.Exception.Base.nonTermination_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qb0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qb1; else goto c9Qb2;
       c9Qb1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Qb2: // global
           (_c9QaX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9QaX::I64 == 0) goto c9QaZ; else goto c9QaY;
       c9QaZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9QaY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9QaX::I64;
           R2 = Control.Exception.Base.NonTermination_closure+1;
           Sp = Sp - 16;
           call Control.Exception.Base.$fExceptionNonTermination_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.806955895 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_entry() //  [R2]
         { info_tbl: [(c9Qba,
                       label: Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qba: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qbe; else goto c9Qbf;
       c9Qbe: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qbf: // global
           I64[Sp - 8] = block_c9Qb7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9QbA; else goto c9Qb8;
       u9QbA: // global
           call _c9Qb7(R1) args: 0, res: 0, upd: 0;
       c9Qb8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qb7() //  [R1]
         { info_tbl: [(c9Qb7,
                       label: block_c9Qb7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qb7: // global
           I64[Sp - 8] = block_c9Qbd_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qbd() //  [R1]
         { info_tbl: [(c9Qbd,
                       label: block_c9Qbd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qbd: // global
           I64[Sp] = block_c9Qbk_info;
           R3 = Control.Exception.Base.$fExceptionNestedAtomically3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qbk() //  [R1]
         { info_tbl: [(c9Qbk,
                       label: block_c9Qbk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qbk: // global
           if (R1 & 7 == 1) goto c9Qbr; else goto c9Qbv;
       c9Qbr: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Qbv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Qby; else goto c9Qbx;
       c9Qby: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Qbx: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.808506098 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionNestedAtomically3_closure;
         const Control.Exception.Base.$fShowNestedAtomically_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_entry() //  [R2]
         { info_tbl: [(c9QbG,
                       label: Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QbG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9QbK; else goto c9QbJ;
       c9QbK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QbJ: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionNestedAtomically_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.809606325 UTC

[section ""data" . Control.Exception.Base.nestedAtomically_closure" {
     Control.Exception.Base.nestedAtomically_closure:
         const Control.Exception.Base.nestedAtomically_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.nestedAtomically_entry() //  [R1]
         { info_tbl: [(c9QbR,
                       label: Control.Exception.Base.nestedAtomically_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QbR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QbS; else goto c9QbT;
       c9QbS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9QbT: // global
           (_c9QbO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9QbO::I64 == 0) goto c9QbQ; else goto c9QbP;
       c9QbQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9QbP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9QbO::I64;
           R2 = Control.Exception.Base.NestedAtomically_closure+1;
           Sp = Sp - 16;
           call Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.810461242 UTC

[section ""data" . Control.Exception.Base.NestedAtomically_closure" {
     Control.Exception.Base.NestedAtomically_closure:
         const Control.Exception.Base.NestedAtomically_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.811016838 UTC

[section ""data" . Control.Exception.Base.NonTermination_closure" {
     Control.Exception.Base.NonTermination_closure:
         const Control.Exception.Base.NonTermination_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.811554092 UTC

[section ""relreadonly" . Control.Exception.Base.NestedAtomically_closure_tbl" {
     Control.Exception.Base.NestedAtomically_closure_tbl:
         const Control.Exception.Base.NestedAtomically_closure+1;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.812168287 UTC

[Control.Exception.Base.NestedAtomically_con_entry() //  [R1]
         { info_tbl: [(c9QbU,
                       label: Control.Exception.Base.NestedAtomically_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,67,111,110,116,114,111,108,46,69,120,99,101,112,116,105,111,110,46,66,97,115,101,46,78,101,115,116,101,100,65,116,111,109,105,99,97,108,108,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QbU: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.812846157 UTC

[section ""relreadonly" . Control.Exception.Base.NonTermination_closure_tbl" {
     Control.Exception.Base.NonTermination_closure_tbl:
         const Control.Exception.Base.NonTermination_closure+1;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.814049123 UTC

[Control.Exception.Base.NonTermination_con_entry() //  [R1]
         { info_tbl: [(c9QbV,
                       label: Control.Exception.Base.NonTermination_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,67,111,110,116,114,111,108,46,69,120,99,101,112,116,105,111,110,46,66,97,115,101,46,78,111,110,84,101,114,109,105,110,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QbV: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.814729555 UTC

[section ""relreadonly" . S9POL_srt" {
     S9POL_srt:
         const Control.Exception.Base.$fExceptionNonTermination1_closure;
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure;
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_closure;
         const Control.Exception.Base.$fShowNonTermination1_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically1_closure;
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure;
         const Control.Exception.Base.$fShowNestedAtomically1_closure;
         const Control.Exception.Base.runtimeError_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Control.Exception.Base.absentError_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail2_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure;
         const Control.Exception.Base.patError_closure;
         const GHC.IO.Exception.untangle_closure;
         const lvl2_r9PFz_closure;
         const Control.Exception.Base.nonExhaustiveGuardsError_closure;
         const lvl4_r9PFB_closure;
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionRecSelError2_closure;
         const Control.Exception.Base.$fExceptionRecSelError_closure;
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure;
         const Control.Exception.Base.recSelError_closure;
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionRecConError2_closure;
         const Control.Exception.Base.$fExceptionRecConError_closure;
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_closure;
         const Control.Exception.Base.recConError_closure;
         const lvl7_r9PFG_closure;
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionRecUpdError2_closure;
         const Control.Exception.Base.$fExceptionRecUpdError_closure;
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure;
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionNoMethodError2_closure;
         const Control.Exception.Base.$fExceptionNoMethodError_closure;
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure;
         const Control.Exception.Base.noMethodBindingError_closure;
         const lvl9_r9PFK_closure;
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionTypeError2_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Control.Exception.Base.$fExceptionTypeError_closure;
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_closure;
         const Control.Exception.Base.typeError_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure;
         const Control.Exception.Base.$fExceptionNonTermination3_closure;
         const Control.Exception.Base.$fExceptionNonTermination_closure;
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically3_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.815575887 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:04:54.816211441 UTC

[section ""data" . Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_entry() //  [R3,
                                                                        R4]
         { info_tbl: [(c9Qc0,
                       label: Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qc0: // global
           _s9PFO::P64 = R3;
           R3 = R4;
           R2 = _s9PFO::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.817074641 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail1_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail1_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail1_info;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail1_entry() //  [R2]
         { info_tbl: [(c9Qc7,
                       label: Control.Exception.Base.$fExceptionPatternMatchFail1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qc7: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.817896741 UTC

[section ""data" . Control.Exception.Base.$fShowPatternMatchFail_$cshowList_closure" {
     Control.Exception.Base.$fShowPatternMatchFail_$cshowList_closure:
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowList_info;
 },
 Control.Exception.Base.$fShowPatternMatchFail_$cshowList_entry() //  [R2,
                                                                       R3]
         { info_tbl: [(c9Qce,
                       label: Control.Exception.Base.$fShowPatternMatchFail_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qce: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.818618183 UTC

[section ""data" . Control.Exception.Base.$fShowPatternMatchFail_closure" {
     Control.Exception.Base.$fShowPatternMatchFail_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionPatternMatchFail1_closure+1;
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.819351513 UTC

[section ""data" . Control.Exception.Base.$fShowRecSelError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowRecSelError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowRecSelError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowRecSelError_$cshowsPrec_entry() //  [R3,
                                                                   R4]
         { info_tbl: [(c9Qcl,
                       label: Control.Exception.Base.$fShowRecSelError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qcl: // global
           _s9PFT::P64 = R3;
           R3 = R4;
           R2 = _s9PFT::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.820176192 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError1_closure" {
     Control.Exception.Base.$fExceptionRecSelError1_closure:
         const Control.Exception.Base.$fExceptionRecSelError1_info;
 },
 Control.Exception.Base.$fExceptionRecSelError1_entry() //  [R2]
         { info_tbl: [(c9Qcs,
                       label: Control.Exception.Base.$fExceptionRecSelError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qcs: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.820950244 UTC

[section ""data" . Control.Exception.Base.$fShowRecSelError_$cshowList_closure" {
     Control.Exception.Base.$fShowRecSelError_$cshowList_closure:
         const Control.Exception.Base.$fShowRecSelError_$cshowList_info;
 },
 Control.Exception.Base.$fShowRecSelError_$cshowList_entry() //  [R2,
                                                                  R3]
         { info_tbl: [(c9Qcz,
                       label: Control.Exception.Base.$fShowRecSelError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qcz: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.822150959 UTC

[section ""data" . Control.Exception.Base.$fShowRecSelError_closure" {
     Control.Exception.Base.$fShowRecSelError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowRecSelError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionRecSelError1_closure+1;
         const Control.Exception.Base.$fShowRecSelError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.822884552 UTC

[section ""data" . Control.Exception.Base.$fShowRecConError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowRecConError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowRecConError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowRecConError_$cshowsPrec_entry() //  [R3,
                                                                   R4]
         { info_tbl: [(c9QcG,
                       label: Control.Exception.Base.$fShowRecConError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QcG: // global
           _s9PFY::P64 = R3;
           R3 = R4;
           R2 = _s9PFY::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.82370626 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError1_closure" {
     Control.Exception.Base.$fExceptionRecConError1_closure:
         const Control.Exception.Base.$fExceptionRecConError1_info;
 },
 Control.Exception.Base.$fExceptionRecConError1_entry() //  [R2]
         { info_tbl: [(c9QcN,
                       label: Control.Exception.Base.$fExceptionRecConError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QcN: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.824509266 UTC

[section ""data" . Control.Exception.Base.$fShowRecConError_$cshowList_closure" {
     Control.Exception.Base.$fShowRecConError_$cshowList_closure:
         const Control.Exception.Base.$fShowRecConError_$cshowList_info;
 },
 Control.Exception.Base.$fShowRecConError_$cshowList_entry() //  [R2,
                                                                  R3]
         { info_tbl: [(c9QcU,
                       label: Control.Exception.Base.$fShowRecConError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QcU: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.825226698 UTC

[section ""data" . Control.Exception.Base.$fShowRecConError_closure" {
     Control.Exception.Base.$fShowRecConError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowRecConError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionRecConError1_closure+1;
         const Control.Exception.Base.$fShowRecConError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.825918171 UTC

[section ""data" . Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_entry() //  [R3,
                                                                   R4]
         { info_tbl: [(c9Qd1,
                       label: Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qd1: // global
           _s9PG3::P64 = R3;
           R3 = R4;
           R2 = _s9PG3::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.826724418 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError1_closure" {
     Control.Exception.Base.$fExceptionRecUpdError1_closure:
         const Control.Exception.Base.$fExceptionRecUpdError1_info;
 },
 Control.Exception.Base.$fExceptionRecUpdError1_entry() //  [R2]
         { info_tbl: [(c9Qd8,
                       label: Control.Exception.Base.$fExceptionRecUpdError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qd8: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.827518956 UTC

[section ""data" . Control.Exception.Base.$fShowRecUpdError_$cshowList_closure" {
     Control.Exception.Base.$fShowRecUpdError_$cshowList_closure:
         const Control.Exception.Base.$fShowRecUpdError_$cshowList_info;
 },
 Control.Exception.Base.$fShowRecUpdError_$cshowList_entry() //  [R2,
                                                                  R3]
         { info_tbl: [(c9Qdf,
                       label: Control.Exception.Base.$fShowRecUpdError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qdf: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.828215348 UTC

[section ""data" . Control.Exception.Base.$fShowRecUpdError_closure" {
     Control.Exception.Base.$fShowRecUpdError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionRecUpdError1_closure+1;
         const Control.Exception.Base.$fShowRecUpdError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.828906439 UTC

[section ""data" . Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_entry() //  [R3,
                                                                     R4]
         { info_tbl: [(c9Qdm,
                       label: Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qdm: // global
           _s9PG8::P64 = R3;
           R3 = R4;
           R2 = _s9PG8::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.829994748 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError1_closure" {
     Control.Exception.Base.$fExceptionNoMethodError1_closure:
         const Control.Exception.Base.$fExceptionNoMethodError1_info;
 },
 Control.Exception.Base.$fExceptionNoMethodError1_entry() //  [R2]
         { info_tbl: [(c9Qdt,
                       label: Control.Exception.Base.$fExceptionNoMethodError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qdt: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.830793977 UTC

[section ""data" . Control.Exception.Base.$fShowNoMethodError_$cshowList_closure" {
     Control.Exception.Base.$fShowNoMethodError_$cshowList_closure:
         const Control.Exception.Base.$fShowNoMethodError_$cshowList_info;
 },
 Control.Exception.Base.$fShowNoMethodError_$cshowList_entry() //  [R2,
                                                                    R3]
         { info_tbl: [(c9QdA,
                       label: Control.Exception.Base.$fShowNoMethodError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QdA: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.831484361 UTC

[section ""data" . Control.Exception.Base.$fShowNoMethodError_closure" {
     Control.Exception.Base.$fShowNoMethodError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionNoMethodError1_closure+1;
         const Control.Exception.Base.$fShowNoMethodError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.832197997 UTC

[section ""data" . Control.Exception.Base.$fShowTypeError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowTypeError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowTypeError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowTypeError_$cshowsPrec_entry() //  [R3,
                                                                 R4]
         { info_tbl: [(c9QdH,
                       label: Control.Exception.Base.$fShowTypeError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QdH: // global
           _s9PGd::P64 = R3;
           R3 = R4;
           R2 = _s9PGd::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.833055754 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError1_closure" {
     Control.Exception.Base.$fExceptionTypeError1_closure:
         const Control.Exception.Base.$fExceptionTypeError1_info;
 },
 Control.Exception.Base.$fExceptionTypeError1_entry() //  [R2]
         { info_tbl: [(c9QdO,
                       label: Control.Exception.Base.$fExceptionTypeError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QdO: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.833902316 UTC

[section ""data" . Control.Exception.Base.$fShowTypeError_$cshowList_closure" {
     Control.Exception.Base.$fShowTypeError_$cshowList_closure:
         const Control.Exception.Base.$fShowTypeError_$cshowList_info;
 },
 Control.Exception.Base.$fShowTypeError_$cshowList_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c9QdV,
                       label: Control.Exception.Base.$fShowTypeError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QdV: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.834654764 UTC

[section ""data" . Control.Exception.Base.$fShowTypeError_closure" {
     Control.Exception.Base.$fShowTypeError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowTypeError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionTypeError1_closure+1;
         const Control.Exception.Base.$fShowTypeError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.835240302 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNonTermination2_bytes" {
     Control.Exception.Base.$fExceptionNonTermination2_bytes:
         I8[] [60,60,108,111,111,112,62,62]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.835987897 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination1_closure" {
     Control.Exception.Base.$fExceptionNonTermination1_closure:
         const Control.Exception.Base.$fExceptionNonTermination1_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination1_entry() //  [R1]
         { info_tbl: [(c9Qe4,
                       label: Control.Exception.Base.$fExceptionNonTermination1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qe4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qe5; else goto c9Qe6;
       c9Qe5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Qe6: // global
           (_c9Qe1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Qe1::I64 == 0) goto c9Qe3; else goto c9Qe2;
       c9Qe3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Qe2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Qe1::I64;
           R2 = Control.Exception.Base.$fExceptionNonTermination2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.837150638 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_info;
         const 0;
 },
 Control.Exception.Base.$fShowNonTermination_$cshowsPrec_entry() //  [R2,
                                                                      R3, R4]
         { info_tbl: [(c9Qee,
                       label: Control.Exception.Base.$fShowNonTermination_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qee: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qef; else goto c9Qeg;
       c9Qef: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Qeg: // global
           I64[Sp - 16] = block_c9Qeb_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Qek; else goto c9Qec;
       u9Qek: // global
           call _c9Qeb() args: 0, res: 0, upd: 0;
       c9Qec: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qeb() //  []
         { info_tbl: [(c9Qeb,
                       label: block_c9Qeb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qeb: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNonTermination1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.839430414 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination_$cshow_closure" {
     Control.Exception.Base.$fExceptionNonTermination_$cshow_closure:
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination_$cshow_entry() //  [R2]
         { info_tbl: [(c9Qes,
                       label: Control.Exception.Base.$fExceptionNonTermination_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qes: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Qet; else goto c9Qeu;
       c9Qet: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNonTermination_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qeu: // global
           I64[Sp - 8] = block_c9Qep_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Qey; else goto c9Qeq;
       u9Qey: // global
           call _c9Qep() args: 0, res: 0, upd: 0;
       c9Qeq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qep() //  []
         { info_tbl: [(c9Qep,
                       label: block_c9Qep_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qep: // global
           R1 = Control.Exception.Base.$fExceptionNonTermination1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.840602889 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination1_closure" {
     Control.Exception.Base.$fShowNonTermination1_closure:
         const Control.Exception.Base.$fShowNonTermination1_info;
         const 0;
 },
 Control.Exception.Base.$fShowNonTermination1_entry() //  [R2, R3]
         { info_tbl: [(c9QeG,
                       label: Control.Exception.Base.$fShowNonTermination1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QeG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QeH; else goto c9QeI;
       c9QeH: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNonTermination1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QeI: // global
           I64[Sp - 16] = block_c9QeD_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9QeM; else goto c9QeE;
       u9QeM: // global
           call _c9QeD() args: 0, res: 0, upd: 0;
       c9QeE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QeD() //  []
         { info_tbl: [(c9QeD,
                       label: block_c9QeD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QeD: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNonTermination1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.841801002 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination_$cshowList_closure" {
     Control.Exception.Base.$fShowNonTermination_$cshowList_closure:
         const Control.Exception.Base.$fShowNonTermination_$cshowList_info;
         const 0;
 },
 Control.Exception.Base.$fShowNonTermination_$cshowList_entry() //  [R2,
                                                                     R3]
         { info_tbl: [(c9QeR,
                       label: Control.Exception.Base.$fShowNonTermination_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QeR: // global
           R4 = R3;
           R3 = R2;
           R2 = Control.Exception.Base.$fShowNonTermination1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.842579045 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination_closure" {
     Control.Exception.Base.$fShowNonTermination_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_closure+1;
         const Control.Exception.Base.$fShowNonTermination_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.843184078 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNestedAtomically2_bytes" {
     Control.Exception.Base.$fExceptionNestedAtomically2_bytes:
         I8[] [67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,83,84,77,46,97,116,111,109,105,99,97,108,108,121,32,119,97,115,32,110,101,115,116,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.84394826 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically1_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically1_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically1_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically1_entry() //  [R1]
         { info_tbl: [(c9Qf0,
                       label: Control.Exception.Base.$fExceptionNestedAtomically1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qf0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qf1; else goto c9Qf2;
       c9Qf1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Qf2: // global
           (_c9QeX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9QeX::I64 == 0) goto c9QeZ; else goto c9QeY;
       c9QeZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9QeY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9QeX::I64;
           R2 = Control.Exception.Base.$fExceptionNestedAtomically2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.845015643 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_info;
         const 0;
 },
 Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_entry() //  [R2,
                                                                        R3, R4]
         { info_tbl: [(c9Qfa,
                       label: Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qfa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qfb; else goto c9Qfc;
       c9Qfb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Qfc: // global
           I64[Sp - 16] = block_c9Qf7_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Qfg; else goto c9Qf8;
       u9Qfg: // global
           call _c9Qf7() args: 0, res: 0, upd: 0;
       c9Qf8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qf7() //  []
         { info_tbl: [(c9Qf7,
                       label: block_c9Qf7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qf7: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNestedAtomically1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.846508377 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically_$cshow_entry() //  [R2]
         { info_tbl: [(c9Qfo,
                       label: Control.Exception.Base.$fExceptionNestedAtomically_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qfo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Qfp; else goto c9Qfq;
       c9Qfp: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qfq: // global
           I64[Sp - 8] = block_c9Qfl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Qfu; else goto c9Qfm;
       u9Qfu: // global
           call _c9Qfl() args: 0, res: 0, upd: 0;
       c9Qfm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qfl() //  []
         { info_tbl: [(c9Qfl,
                       label: block_c9Qfl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qfl: // global
           R1 = Control.Exception.Base.$fExceptionNestedAtomically1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.847676528 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically1_closure" {
     Control.Exception.Base.$fShowNestedAtomically1_closure:
         const Control.Exception.Base.$fShowNestedAtomically1_info;
         const 0;
 },
 Control.Exception.Base.$fShowNestedAtomically1_entry() //  [R2, R3]
         { info_tbl: [(c9QfC,
                       label: Control.Exception.Base.$fShowNestedAtomically1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QfC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QfD; else goto c9QfE;
       c9QfD: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNestedAtomically1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QfE: // global
           I64[Sp - 16] = block_c9Qfz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9QfI; else goto c9QfA;
       u9QfI: // global
           call _c9Qfz() args: 0, res: 0, upd: 0;
       c9QfA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qfz() //  []
         { info_tbl: [(c9Qfz,
                       label: block_c9Qfz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qfz: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNestedAtomically1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.848805021 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically_$cshowList_closure" {
     Control.Exception.Base.$fShowNestedAtomically_$cshowList_closure:
         const Control.Exception.Base.$fShowNestedAtomically_$cshowList_info;
         const 0;
 },
 Control.Exception.Base.$fShowNestedAtomically_$cshowList_entry() //  [R2,
                                                                       R3]
         { info_tbl: [(c9QfN,
                       label: Control.Exception.Base.$fShowNestedAtomically_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QfN: // global
           R4 = R3;
           R3 = R2;
           R2 = Control.Exception.Base.$fShowNestedAtomically1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.849595678 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically_closure" {
     Control.Exception.Base.$fShowNestedAtomically_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure+1;
         const Control.Exception.Base.$fShowNestedAtomically_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.850949753 UTC

[section ""data" . Control.Exception.Base.catchJust1_closure" {
     Control.Exception.Base.catchJust1_closure:
         const Control.Exception.Base.catchJust1_info;
 },
 sat_s9PGK_entry() //  [R1]
         { info_tbl: [(c9Qg8,
                       label: sat_s9PGK_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qg8: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PGO_entry() //  [R1, R2]
         { info_tbl: [(c9Qgf,
                       label: sat_s9PGO_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qgf: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c9Qgg; else goto c9Qgh;
       c9Qgg: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qgh: // global
           I64[Sp - 40] = block_c9QfZ_info;
           _s9PGI::P64 = R2;
           _s9PGD::P64 = P64[R1 + 7];
           R2 = _s9PGD::P64;
           I64[Sp - 56] = stg_ap_p_info;
           P64[Sp - 48] = _s9PGI::P64;
           P64[Sp - 32] = _s9PGD::P64;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _s9PGI::P64;
           Sp = Sp - 56;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c9QfZ() //  [R1]
         { info_tbl: [(c9QfZ,
                       label: block_c9QfZ_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QfZ: // global
           if (R1 & 7 == 1) goto c9Qgc; else goto c9Qgd;
       c9Qgc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Qgk; else goto c9Qgj;
       c9Qgk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Qgj: // global
           I64[Hp - 8] = sat_s9PGK_info;
           P64[Hp] = P64[Sp + 32];
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Qgd: // global
           I64[Sp] = block_c9Qgn_info;
           _s9PGL::P64 = P64[R1 + 6];
           R2 = _s9PGL::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 32] = _s9PGL::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qgn() //  [R1]
         { info_tbl: [(c9Qgn,
                       label: block_c9Qgn_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qgn: // global
           if (R1 & 7 == 1) goto c9Qgu; else goto c9Qgy;
       c9Qgu: // global
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = GHC.IO.throwIO1_closure+3;
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Qgy: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.catchJust1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9QgA,
                       label: Control.Exception.Base.catchJust1_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QgA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QgE; else goto c9QgD;
       c9QgE: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.catchJust1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QgD: // global
           I64[Hp - 24] = sat_s9PGO_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R5;
           R2 = Hp - 23;
           R1 = R4;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.852940999 UTC

[section ""data" . Control.Exception.Base.catchJust_closure" {
     Control.Exception.Base.catchJust_closure:
         const Control.Exception.Base.catchJust_info;
 },
 Control.Exception.Base.catchJust_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9QgJ,
                       label: Control.Exception.Base.catchJust_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QgJ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.catchJust1_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.853764781 UTC

[section ""data" . Control.Exception.Base.handleJust1_closure" {
     Control.Exception.Base.handleJust1_closure:
         const Control.Exception.Base.handleJust1_info;
 },
 Control.Exception.Base.handleJust1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9QgQ,
                       label: Control.Exception.Base.handleJust1_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QgQ: // global
           _s9PGS::P64 = R5;
           R5 = R4;
           R4 = _s9PGS::P64;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.catchJust1_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.854628497 UTC

[section ""data" . Control.Exception.Base.handleJust_closure" {
     Control.Exception.Base.handleJust_closure:
         const Control.Exception.Base.handleJust_info;
 },
 Control.Exception.Base.handleJust_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9QgX,
                       label: Control.Exception.Base.handleJust_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QgX: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.handleJust1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.855518622 UTC

[section ""data" . Control.Exception.Base.handle1_closure" {
     Control.Exception.Base.handle1_closure:
         const Control.Exception.Base.handle1_info;
 },
 Control.Exception.Base.handle1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9Qh4,
                       label: Control.Exception.Base.handle1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qh4: // global
           _s9PGW::P64 = R4;
           R4 = R3;
           R3 = _s9PGW::P64;
           R2 = R2;
           call GHC.IO.catch1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.856356297 UTC

[section ""data" . Control.Exception.Base.handle_closure" {
     Control.Exception.Base.handle_closure:
         const Control.Exception.Base.handle_info;
 },
 Control.Exception.Base.handle_entry() //  [R2, R3, R4]
         { info_tbl: [(c9Qhb,
                       label: Control.Exception.Base.handle_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qhb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.handle1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.857849148 UTC

[section ""data" . Control.Exception.Base.mapException1_closure" {
     Control.Exception.Base.mapException1_closure:
         const Control.Exception.Base.mapException1_info;
 },
 sat_s9PH3_entry() //  [R1]
         { info_tbl: [(c9Qhn,
                       label: sat_s9PH3_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qhn: // global
           _s9PH3::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c9Qho; else goto c9Qhp;
       c9Qhp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Qhr; else goto c9Qhq;
       c9Qhr: // global
           HpAlloc = 32;
           goto c9Qho;
       c9Qho: // global
           R1 = _s9PH3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Qhq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9PH3::P64;
           _s9PGY::P64 = P64[_s9PH3::P64 + 16];
           _s9PGZ::P64 = P64[_s9PH3::P64 + 24];
           _s9PH0::P64 = P64[_s9PH3::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s9PGY::P64;
           P64[Hp] = _s9PGZ::P64;
           R2 = _s9PH0::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Exception.toException_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Control.Exception.Base.mapException1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9Qhs,
                       label: Control.Exception.Base.mapException1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qhs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Qhw; else goto c9Qhv;
       c9Qhw: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.mapException1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Qhv: // global
           I64[Hp - 32] = sat_s9PH3_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 32;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.859840847 UTC

[section ""data" . Control.Exception.Base.mapException_closure" {
     Control.Exception.Base.mapException_closure:
         const Control.Exception.Base.mapException_info;
 },
 sat_s9PHd_entry() //  [R1]
         { info_tbl: [(c9QhR,
                       label: sat_s9PHd_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QhR: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PHg_entry() //  [R1, R2]
         { info_tbl: [(c9QhY,
                       label: sat_s9PHg_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QhY: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c9QhZ; else goto c9Qi0;
       c9QhZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qi0: // global
           I64[Sp - 32] = block_c9QhI_info;
           _s9PHb::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = _s9PHb::P64;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _s9PHb::P64;
           Sp = Sp - 48;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c9QhI() //  [R1]
         { info_tbl: [(c9QhI,
                       label: block_c9QhI_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QhI: // global
           if (R1 & 7 == 1) goto c9QhV; else goto c9QhW;
       c9QhV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Qi3; else goto c9Qi2;
       c9Qi3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Qi2: // global
           I64[Hp - 8] = sat_s9PHd_info;
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9QhW: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = Control.Exception.Base.mapException1_closure+4;
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PHa_entry() //  [R1]
         { info_tbl: [(c9Qic,
                       label: sat_s9PHa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qic: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.mapException_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9Qih,
                       label: Control.Exception.Base.mapException_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qih: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c9Qii; else goto c9Qij;
       c9Qii: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.mapException_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Qij: // global
           I64[Sp - 40] = block_c9QhB_info;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9QhB() //  []
         { info_tbl: [(c9QhB,
                       label: block_c9QhB_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QhB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Qim; else goto c9Qil;
       c9Qim: // global
           HpAlloc = 48;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c9Qil: // global
           I64[Hp - 40] = sat_s9PHg_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           I64[Hp - 8] = sat_s9PHa_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_c9Qif_info;
           R2 = Hp - 39;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qif() //  [R1]
         { info_tbl: [(c9Qif,
                       label: block_c9Qif_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qif: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.862623822 UTC

[section ""data" . Control.Exception.Base.try1_closure" {
     Control.Exception.Base.try1_closure:
         const Control.Exception.Base.try1_info;
 },
 sat_s9PHy_entry() //  [R1, R2]
         { info_tbl: [(c9QiD,
                       label: sat_s9PHy_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QiD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9QiE; else goto c9QiF;
       c9QiE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QiF: // global
           I64[Sp - 16] = block_c9Qix_info;
           _s9PHt::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = _s9PHt::P64;
           P64[Sp - 8] = _s9PHt::P64;
           Sp = Sp - 32;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c9Qix() //  [R1]
         { info_tbl: [(c9Qix,
                       label: block_c9Qix_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qix: // global
           if (R1 & 7 == 1) goto c9QiA; else goto c9QiB;
       c9QiA: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c9QiB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QiO; else goto c9QiN;
       c9QiO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QiN: // global
           _s9PHw::P64 = P64[R1 + 6];
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = _s9PHw::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PHs_entry() //  [R1]
         { info_tbl: [(c9QiX,
                       label: sat_s9PHs_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QiX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9QiY; else goto c9QiZ;
       c9QiY: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9QiZ: // global
           I64[Sp - 8] = block_c9QiU_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QiU() //  [R1]
         { info_tbl: [(c9QiU,
                       label: block_c9QiU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QiU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Qj2; else goto c9Qj1;
       c9Qj2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Qj1: // global
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.try1_entry() //  [R2, R3]
         { info_tbl: [(c9Qj3,
                       label: Control.Exception.Base.try1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qj3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Qj7; else goto c9Qj6;
       c9Qj7: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.try1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Qj6: // global
           I64[Hp - 24] = sat_s9PHy_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s9PHs_info;
           P64[Hp] = R3;
           R2 = Hp - 22;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.86452254 UTC

[section ""data" . Control.Exception.Base.try_closure" {
     Control.Exception.Base.try_closure:
         const Control.Exception.Base.try_info;
 },
 Control.Exception.Base.try_entry() //  [R2, R3]
         { info_tbl: [(c9Qjc,
                       label: Control.Exception.Base.try_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qjc: // global
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.try1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.865774296 UTC

[section ""data" . Control.Exception.Base.tryJust1_closure" {
     Control.Exception.Base.tryJust1_closure:
         const Control.Exception.Base.tryJust1_info;
 },
 Control.Exception.Base.tryJust1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9Qjs,
                       label: Control.Exception.Base.tryJust1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qjs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9Qjt; else goto c9Qju;
       c9Qjt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.tryJust1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Qju: // global
           I64[Sp - 24] = block_c9Qjj_info;
           _s9PHA::P64 = R3;
           R3 = R4;
           _s9PHz::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s9PHz::P64;
           P64[Sp - 8] = _s9PHA::P64;
           Sp = Sp - 24;
           call Control.Exception.Base.try1_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qjj() //  [R1]
         { info_tbl: [(c9Qjj,
                       label: block_c9Qjj_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qjj: // global
           I64[Sp - 8] = block_c9Qjl_info;
           _s9PHF::P64 = R1;
           R1 = R1;
           P64[Sp] = _s9PHF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9QjR; else goto c9Qjm;
       u9QjR: // global
           call _c9Qjl(R1) args: 0, res: 0, upd: 0;
       c9Qjm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qjl() //  [R1]
         { info_tbl: [(c9Qjl,
                       label: block_c9Qjl_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qjl: // global
           if (R1 & 7 == 1) goto c9Qjp; else goto c9Qjq;
       c9Qjp: // global
           I64[Sp + 8] = block_c9Qjy_info;
           _s9PHH::P64 = P64[R1 + 7];
           R2 = _s9PHH::P64;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s9PHH::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c9Qjq: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Qjy() //  [R1]
         { info_tbl: [(c9Qjy,
                       label: block_c9Qjy_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qjy: // global
           if (R1 & 7 == 1) goto c9QjF; else goto c9QjJ;
       c9QjF: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.throwIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9QjJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QjM; else goto c9QjL;
       c9QjM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QjL: // global
           _s9PHJ::P64 = P64[R1 + 6];
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = _s9PHJ::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.867455112 UTC

[section ""data" . Control.Exception.Base.tryJust_closure" {
     Control.Exception.Base.tryJust_closure:
         const Control.Exception.Base.tryJust_info;
 },
 Control.Exception.Base.tryJust_entry() //  [R2, R3, R4]
         { info_tbl: [(c9QjW,
                       label: Control.Exception.Base.tryJust_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QjW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.tryJust1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.868516896 UTC

[section ""data" . Control.Exception.Base.onException1_closure" {
     Control.Exception.Base.onException1_closure:
         const Control.Exception.Base.onException1_info;
 },
 sat_s9PHV_entry() //  [R1, R2]
         { info_tbl: [(c9Qka,
                       label: sat_s9PHV_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qka: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qkb; else goto c9Qkc;
       c9Qkb: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qkc: // global
           I64[Sp - 16] = block_c9Qk8_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qk8() //  []
         { info_tbl: [(c9Qk8,
                       label: block_c9Qk8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qk8: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.onException1_entry() //  [R2, R3]
         { info_tbl: [(c9Qke,
                       label: Control.Exception.Base.onException1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qke: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Qki; else goto c9Qkh;
       c9Qki: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.onException1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Qkh: // global
           I64[Hp - 8] = sat_s9PHV_info;
           P64[Hp] = R3;
           _s9PHN::P64 = R2;
           R2 = Hp - 6;
           R1 = _s9PHN::P64;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.87003037 UTC

[section ""data" . Control.Exception.Base.onException_closure" {
     Control.Exception.Base.onException_closure:
         const Control.Exception.Base.onException_info;
 },
 Control.Exception.Base.onException_entry() //  [R2, R3]
         { info_tbl: [(c9Qkn,
                       label: Control.Exception.Base.onException_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qkn: // global
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.onException1_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.872608454 UTC

[section ""data" . Control.Exception.Base.bracket1_closure" {
     Control.Exception.Base.bracket1_closure:
         const Control.Exception.Base.bracket1_info;
 },
 sat_s9PIe_entry() //  [R1, R2]
         { info_tbl: [(c9QkH,
                       label: sat_s9PIe_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QkH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QkI; else goto c9QkJ;
       c9QkI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QkJ: // global
           I64[Sp - 16] = block_c9QkF_info;
           _s9PI9::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PI9::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QkF() //  []
         { info_tbl: [(c9QkF,
                       label: block_c9QkF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QkF: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PI8_entry() //  [R1]
         { info_tbl: [(c9QkR,
                       label: sat_s9PI8_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QkR: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PIw_entry() //  [R1, R2]
         { info_tbl: [(c9Ql9,
                       label: sat_s9PIw_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ql9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qla; else goto c9Qlb;
       c9Qla: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qlb: // global
           I64[Sp - 16] = block_c9Ql7_info;
           _s9PIr::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PIr::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Ql7() //  []
         { info_tbl: [(c9Ql7,
                       label: block_c9Ql7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ql7: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PIq_entry() //  [R1]
         { info_tbl: [(c9Qlj,
                       label: sat_s9PIq_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qlj: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PID_entry() //  [R1]
         { info_tbl: [(c9Qlq,
                       label: sat_s9PID_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qlq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Qlr; else goto c9Qls;
       c9Qlr: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Qls: // global
           I64[Sp - 24] = block_c9Ql0_info;
           _s9PHX::P64 = P64[R1 + 15];
           _s9PHY::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9PHX::P64;
           P64[Sp - 8] = _s9PHY::P64;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Ql0() //  [R1]
         { info_tbl: [(c9Ql0,
                       label: block_c9Ql0_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ql0: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9Qlv; else goto c9Qlu;
       c9Qlv: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Qlu: // global
           I64[Hp - 64] = sat_s9PIw_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PIq_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9Qlm_info;
           R2 = Hp - 62;
           _s9PIo::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9PIo::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qlm() //  [R1]
         { info_tbl: [(c9Qlm,
                       label: block_c9Qlm_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qlm: // global
           _s9PHX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9Qlo_info;
           R2 = P64[Sp + 16];
           _s9PIz::P64 = R1;
           R1 = _s9PHX::P64;
           P64[Sp + 16] = _s9PIz::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qlo() //  []
         { info_tbl: [(c9Qlo,
                       label: block_c9Qlo_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qlo: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PIO_entry() //  [R1, R2]
         { info_tbl: [(c9QlI,
                       label: sat_s9PIO_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QlI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QlJ; else goto c9QlK;
       c9QlJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QlK: // global
           I64[Sp - 16] = block_c9QlG_info;
           _s9PIJ::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PIJ::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QlG() //  []
         { info_tbl: [(c9QlG,
                       label: block_c9QlG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QlG: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PII_entry() //  [R1]
         { info_tbl: [(c9QlS,
                       label: sat_s9PII_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QlS: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.bracket1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9QlZ,
                       label: Control.Exception.Base.bracket1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QlZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9Qm0; else goto c9Qm1;
       c9Qm0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.bracket1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Qm1: // global
           I64[Sp - 32] = block_c9Qku_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 _c9Qku() //  [R1]
         { info_tbl: [(c9Qku,
                       label: block_c9Qku_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qku: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Qm4; else goto c9Qm3;
       c9Qm4: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9Qm3: // global
           _s9PHW::P64 = P64[Sp + 8];
           if (R1 == 0) goto c9QlX; else goto u9Qmn;
       c9QlX: // global
           I64[Hp - 24] = sat_s9PID_info;
           P64[Hp - 16] = _s9PHW::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9Qmn: // global
           if (R1 == 1) goto c9QlY; else goto c9QlW;
       c9QlY: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9Qlz_info;
           R1 = _s9PHW::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c9QlW: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9Qky_info;
           R1 = _s9PHW::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qlz() //  [R1]
         { info_tbl: [(c9Qlz,
                       label: block_c9Qlz_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qlz: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9Qmj; else goto c9Qmi;
       c9Qmj: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Qmi: // global
           I64[Hp - 64] = sat_s9PIO_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PII_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9Qme_info;
           R2 = Hp - 62;
           _s9PIG::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9PIG::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qme() //  [R1]
         { info_tbl: [(c9Qme,
                       label: block_c9Qme_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qme: // global
           _s9PHX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9Qmg_info;
           R2 = P64[Sp + 16];
           _s9PIR::P64 = R1;
           R1 = _s9PHX::P64;
           P64[Sp + 16] = _s9PIR::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qmg() //  []
         { info_tbl: [(c9Qmg,
                       label: block_c9Qmg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qmg: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Qky() //  [R1]
         { info_tbl: [(c9Qky,
                       label: block_c9Qky_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qky: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9Qma; else goto c9Qm9;
       c9Qma: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Qm9: // global
           I64[Hp - 64] = sat_s9PIe_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PI8_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9Qm5_info;
           R2 = Hp - 62;
           _s9PI6::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9PI6::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qm5() //  [R1]
         { info_tbl: [(c9Qm5,
                       label: block_c9Qm5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qm5: // global
           _s9PHX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9Qm7_info;
           R2 = P64[Sp + 16];
           _s9PIh::P64 = R1;
           R1 = _s9PHX::P64;
           P64[Sp + 16] = _s9PIh::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qm7() //  []
         { info_tbl: [(c9Qm7,
                       label: block_c9Qm7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qm7: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.877314789 UTC

[section ""data" . Control.Exception.Base.bracket_closure" {
     Control.Exception.Base.bracket_closure:
         const Control.Exception.Base.bracket_info;
 },
 Control.Exception.Base.bracket_entry() //  [R2, R3, R4]
         { info_tbl: [(c9Qms,
                       label: Control.Exception.Base.bracket_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qms: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.bracket1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.878410277 UTC

[section ""data" . Control.Exception.Base.bracket_1_closure" {
     Control.Exception.Base.bracket_1_closure:
         const Control.Exception.Base.bracket_1_info;
 },
 sat_s9PJ2_entry() //  [R1]
         { info_tbl: [(c9QmE,
                       label: sat_s9PJ2_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QmE: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJ0_entry() //  [R1]
         { info_tbl: [(c9QmM,
                       label: sat_s9PJ0_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QmM: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.bracket_1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9QmP,
                       label: Control.Exception.Base.bracket_1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QmP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QmT; else goto c9QmS;
       c9QmT: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.bracket_1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QmS: // global
           I64[Hp - 24] = sat_s9PJ2_info;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s9PJ0_info;
           P64[Hp] = R3;
           R4 = Hp - 23;
           R3 = Hp - 7;
           R2 = R2;
           call Control.Exception.Base.bracket1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.879615904 UTC

[section ""data" . Control.Exception.Base.bracket__closure" {
     Control.Exception.Base.bracket__closure:
         const Control.Exception.Base.bracket__info;
 },
 Control.Exception.Base.bracket__entry() //  [R2, R3, R4]
         { info_tbl: [(c9QmY,
                       label: Control.Exception.Base.bracket__info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QmY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.bracket_1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.881978613 UTC

[section ""data" . Control.Exception.Base.finally1_closure" {
     Control.Exception.Base.finally1_closure:
         const Control.Exception.Base.finally1_info;
 },
 sat_s9PJg_entry() //  [R1, R2]
         { info_tbl: [(c9Qng,
                       label: sat_s9PJg_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qng: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qnh; else goto c9Qni;
       c9Qnh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qni: // global
           I64[Sp - 16] = block_c9Qne_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qne() //  []
         { info_tbl: [(c9Qne,
                       label: block_c9Qne_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qne: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJa_entry() //  [R1]
         { info_tbl: [(c9Qnp,
                       label: sat_s9PJa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qnp: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJu_entry() //  [R1, R2]
         { info_tbl: [(c9QnF,
                       label: sat_s9PJu_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QnF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QnG; else goto c9QnH;
       c9QnG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QnH: // global
           I64[Sp - 16] = block_c9QnD_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QnD() //  []
         { info_tbl: [(c9QnD,
                       label: block_c9QnD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QnD: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJo_entry() //  [R1]
         { info_tbl: [(c9QnO,
                       label: sat_s9PJo_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QnO: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJB_entry() //  [R1]
         { info_tbl: [(c9QnV,
                       label: sat_s9PJB_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QnV: // global
           _s9PJB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9QnW; else goto c9QnX;
       c9QnX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QnZ; else goto c9QnY;
       c9QnZ: // global
           HpAlloc = 32;
           goto c9QnW;
       c9QnW: // global
           R1 = _s9PJB::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9QnY: // global
           _s9PJ3::P64 = P64[_s9PJB::P64 + 7];
           _s9PJ4::P64 = P64[_s9PJB::P64 + 15];
           I64[Hp - 24] = sat_s9PJu_info;
           P64[Hp - 16] = _s9PJ4::P64;
           I64[Hp - 8] = sat_s9PJo_info;
           P64[Hp] = _s9PJ3::P64;
           I64[Sp - 16] = block_c9QnR_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           P64[Sp - 8] = _s9PJ4::P64;
           Sp = Sp - 16;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QnR() //  [R1]
         { info_tbl: [(c9QnR,
                       label: block_c9QnR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QnR: // global
           I64[Sp] = block_c9QnT_info;
           _s9PJx::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9PJx::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QnT() //  []
         { info_tbl: [(c9QnT,
                       label: block_c9QnT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QnT: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJI_entry() //  [R1, R2]
         { info_tbl: [(c9Qoa,
                       label: sat_s9PJI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qoa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qob; else goto c9Qoc;
       c9Qob: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qoc: // global
           I64[Sp - 16] = block_c9Qo8_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qo8() //  []
         { info_tbl: [(c9Qo8,
                       label: block_c9Qo8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qo8: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJC_entry() //  [R1]
         { info_tbl: [(c9Qoj,
                       label: sat_s9PJC_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qoj: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.finally1_entry() //  [R2, R3]
         { info_tbl: [(c9Qoq,
                       label: Control.Exception.Base.finally1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qoq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Qor; else goto c9Qos;
       c9Qor: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.finally1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Qos: // global
           I64[Sp - 24] = block_c9Qn5_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 _c9Qn5() //  [R1]
         { info_tbl: [(c9Qn5,
                       label: block_c9Qn5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qn5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Qov; else goto c9Qou;
       c9Qov: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9Qou: // global
           _s9PJ3::P64 = P64[Sp + 8];
           _s9PJ4::P64 = P64[Sp + 16];
           if (R1 == 0) goto c9Qoo; else goto u9QoI;
       c9Qoo: // global
           I64[Hp - 24] = sat_s9PJB_info;
           P64[Hp - 16] = _s9PJ3::P64;
           P64[Hp - 8] = _s9PJ4::P64;
           _c9Qnt::P64 = Hp - 23;
           Hp = Hp - 8;
           R1 = _c9Qnt::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9QoI: // global
           if (R1 == 1) goto c9Qop; else goto c9Qon;
       c9Qop: // global
           I64[Hp - 24] = sat_s9PJI_info;
           P64[Hp - 16] = _s9PJ4::P64;
           I64[Hp - 8] = sat_s9PJC_info;
           P64[Hp] = _s9PJ3::P64;
           I64[Sp + 8] = block_c9QoC_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
       c9Qon: // global
           I64[Hp - 24] = sat_s9PJg_info;
           P64[Hp - 16] = _s9PJ4::P64;
           I64[Hp - 8] = sat_s9PJa_info;
           P64[Hp] = _s9PJ3::P64;
           I64[Sp + 8] = block_c9Qow_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QoC() //  [R1]
         { info_tbl: [(c9QoC,
                       label: block_c9QoC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QoC: // global
           I64[Sp] = block_c9QoE_info;
           _s9PJL::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9PJL::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QoE() //  []
         { info_tbl: [(c9QoE,
                       label: block_c9QoE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QoE: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Qow() //  [R1]
         { info_tbl: [(c9Qow,
                       label: block_c9Qow_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qow: // global
           I64[Sp] = block_c9Qoy_info;
           _s9PJj::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9PJj::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qoy() //  []
         { info_tbl: [(c9Qoy,
                       label: block_c9Qoy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qoy: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.88580393 UTC

[section ""data" . Control.Exception.Base.finally_closure" {
     Control.Exception.Base.finally_closure:
         const Control.Exception.Base.finally_info;
 },
 Control.Exception.Base.finally_entry() //  [R2, R3]
         { info_tbl: [(c9QoN,
                       label: Control.Exception.Base.finally_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QoN: // global
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.finally1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.888155918 UTC

[section ""data" . Control.Exception.Base.bracketOnError1_closure" {
     Control.Exception.Base.bracketOnError1_closure:
         const Control.Exception.Base.bracketOnError1_info;
 },
 sat_s9PK7_entry() //  [R1, R2]
         { info_tbl: [(c9Qp7,
                       label: sat_s9PK7_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qp7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qp8; else goto c9Qp9;
       c9Qp8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qp9: // global
           I64[Sp - 16] = block_c9Qp5_info;
           _s9PK2::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PK2::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qp5() //  []
         { info_tbl: [(c9Qp5,
                       label: block_c9Qp5_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qp5: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PK1_entry() //  [R1]
         { info_tbl: [(c9Qph,
                       label: sat_s9PK1_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qph: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PKj_entry() //  [R1, R2]
         { info_tbl: [(c9Qpz,
                       label: sat_s9PKj_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qpz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QpA; else goto c9QpB;
       c9QpA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QpB: // global
           I64[Sp - 16] = block_c9Qpx_info;
           _s9PKe::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PKe::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qpx() //  []
         { info_tbl: [(c9Qpx,
                       label: block_c9Qpx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qpx: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PKd_entry() //  [R1]
         { info_tbl: [(c9QpJ,
                       label: sat_s9PKd_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QpJ: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PKk_entry() //  [R1]
         { info_tbl: [(c9QpM,
                       label: sat_s9PKk_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QpM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9QpN; else goto c9QpO;
       c9QpN: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9QpO: // global
           I64[Sp - 24] = block_c9Qpq_info;
           _s9PJQ::P64 = P64[R1 + 15];
           _s9PJR::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9PJQ::P64;
           P64[Sp - 8] = _s9PJR::P64;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qpq() //  [R1]
         { info_tbl: [(c9Qpq,
                       label: block_c9Qpq_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qpq: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9QpR; else goto c9QpQ;
       c9QpR: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QpQ: // global
           I64[Hp - 64] = sat_s9PKj_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PKd_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 62;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PKv_entry() //  [R1, R2]
         { info_tbl: [(c9Qq2,
                       label: sat_s9PKv_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qq2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qq3; else goto c9Qq4;
       c9Qq3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qq4: // global
           I64[Sp - 16] = block_c9Qq0_info;
           _s9PKq::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PKq::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qq0() //  []
         { info_tbl: [(c9Qq0,
                       label: block_c9Qq0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qq0: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PKp_entry() //  [R1]
         { info_tbl: [(c9Qqc,
                       label: sat_s9PKp_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qqc: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.bracketOnError1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9Qqj,
                       label: Control.Exception.Base.bracketOnError1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qqj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9Qqk; else goto c9Qql;
       c9Qqk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.bracketOnError1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Qql: // global
           I64[Sp - 32] = block_c9QoU_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 _c9QoU() //  [R1]
         { info_tbl: [(c9QoU,
                       label: block_c9QoU_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QoU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Qqo; else goto c9Qqn;
       c9Qqo: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9Qqn: // global
           _s9PJP::P64 = P64[Sp + 8];
           if (R1 == 0) goto c9Qqh; else goto u9Qqv;
       c9Qqh: // global
           I64[Hp - 24] = sat_s9PKk_info;
           P64[Hp - 16] = _s9PJP::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9Qqv: // global
           if (R1 == 1) goto c9Qqi; else goto c9Qqg;
       c9Qqi: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9QpT_info;
           R1 = _s9PJP::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c9Qqg: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9QoY_info;
           R1 = _s9PJP::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QpT() //  [R1]
         { info_tbl: [(c9QpT,
                       label: block_c9QpT_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QpT: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9Qqu; else goto c9Qqt;
       c9Qqu: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Qqt: // global
           I64[Hp - 64] = sat_s9PKv_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PKp_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 62;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9QoY() //  [R1]
         { info_tbl: [(c9QoY,
                       label: block_c9QoY_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QoY: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9Qqr; else goto c9Qqq;
       c9Qqr: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Qqq: // global
           I64[Hp - 64] = sat_s9PK7_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PK1_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 62;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.892017893 UTC

[section ""data" . Control.Exception.Base.bracketOnError_closure" {
     Control.Exception.Base.bracketOnError_closure:
         const Control.Exception.Base.bracketOnError_info;
 },
 Control.Exception.Base.bracketOnError_entry() //  [R2, R3, R4]
         { info_tbl: [(c9QqA,
                       label: Control.Exception.Base.bracketOnError_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QqA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.bracketOnError1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.892923359 UTC

[section ""data" . Control.Exception.Base.runtimeError_closure" {
     Control.Exception.Base.runtimeError_closure:
         const Control.Exception.Base.runtimeError_info;
         const 0;
 },
 Control.Exception.Base.runtimeError_entry() //  [R2]
         { info_tbl: [(c9QqJ,
                       label: Control.Exception.Base.runtimeError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QqJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9QqK; else goto c9QqL;
       c9QqK: // global
           R2 = R2;
           R1 = Control.Exception.Base.runtimeError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QqL: // global
           I64[Sp - 8] = block_c9QqH_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9QqH() //  [R1]
         { info_tbl: [(c9QqH,
                       label: block_c9QqH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QqH: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.894038454 UTC

[section ""cstring" . lvl_r9PFt_bytes" {
     lvl_r9PFt_bytes:
         I8[] [79,111,112,115,33,32,32,69,110,116,101,114,101,100,32,97,98,115,101,110,116,32,97,114,103,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.894901267 UTC

[section ""data" . Control.Exception.Base.absentError_closure" {
     Control.Exception.Base.absentError_closure:
         const Control.Exception.Base.absentError_info;
         const 0;
 },
 sat_s9PKz_entry() //  [R1]
         { info_tbl: [(c9QqX,
                       label: sat_s9PKz_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QqX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QqY; else goto c9QqZ;
       c9QqY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9QqZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Control.Exception.Base.absentError_entry() //  [R2]
         { info_tbl: [(c9Qr2,
                       label: Control.Exception.Base.absentError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qr2: // global
           _s9PKy::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9Qr3; else goto c9Qr4;
       c9Qr4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Qr6; else goto c9Qr5;
       c9Qr6: // global
           HpAlloc = 24;
           goto c9Qr3;
       c9Qr3: // global
           R2 = _s9PKy::I64;
           R1 = Control.Exception.Base.absentError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qr5: // global
           I64[Hp - 16] = sat_s9PKz_info;
           I64[Hp] = _s9PKy::I64;
           I64[Sp - 8] = block_c9Qr0_info;
           R3 = Hp - 16;
           R2 = lvl_r9PFt_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qr0() //  [R1]
         { info_tbl: [(c9Qr0,
                       label: block_c9Qr0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qr0: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.896080922 UTC

[section ""cstring" . Control.Exception.Base.$trModule4_bytes" {
     Control.Exception.Base.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.896631131 UTC

[section ""data" . Control.Exception.Base.$trModule3_closure" {
     Control.Exception.Base.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.897268781 UTC

[section ""cstring" . Control.Exception.Base.$trModule2_bytes" {
     Control.Exception.Base.$trModule2_bytes:
         I8[] [67,111,110,116,114,111,108,46,69,120,99,101,112,116,105,111,110,46,66,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.897846074 UTC

[section ""data" . Control.Exception.Base.$trModule1_closure" {
     Control.Exception.Base.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.898390912 UTC

[section ""data" . Control.Exception.Base.$trModule_closure" {
     Control.Exception.Base.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Control.Exception.Base.$trModule3_closure+1;
         const Control.Exception.Base.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.898944707 UTC

[section ""data" . $krep_r9PFu_closure" {
     $krep_r9PFu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.899565954 UTC

[section ""data" . $krep1_r9PFv_closure" {
     $krep1_r9PFv_closure:
         const :_con_info;
         const $krep_r9PFu_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.901775454 UTC

[section ""data" . $krep2_r9PFw_closure" {
     $krep2_r9PFw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_r9PFv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.90237785 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionPatternMatchFail4_bytes" {
     Control.Exception.Base.$fExceptionPatternMatchFail4_bytes:
         I8[] [80,97,116,116,101,114,110,77,97,116,99,104,70,97,105,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.902890806 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail3_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionPatternMatchFail4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.903479555 UTC

[section ""data" . Control.Exception.Base.$tcPatternMatchFail_closure" {
     Control.Exception.Base.$tcPatternMatchFail_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail3_closure+1;
         const GHC.Types.krep$*_closure;
         const 15470147969565509342;
         const 8416277433045206230;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.90407614 UTC

[section ""data" . $krep3_r9PFx_closure" {
     $krep3_r9PFx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcPatternMatchFail_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.904637359 UTC

[section ""data" . Control.Exception.Base.$tc'PatternMatchFail1_closure" {
     Control.Exception.Base.$tc'PatternMatchFail1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep3_r9PFx_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.905224958 UTC

[section ""cstring" . Control.Exception.Base.$tc'PatternMatchFail3_bytes" {
     Control.Exception.Base.$tc'PatternMatchFail3_bytes:
         I8[] [39,80,97,116,116,101,114,110,77,97,116,99,104,70,97,105,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.90595332 UTC

[section ""data" . Control.Exception.Base.$tc'PatternMatchFail2_closure" {
     Control.Exception.Base.$tc'PatternMatchFail2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'PatternMatchFail3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.906522406 UTC

[section ""data" . Control.Exception.Base.$tc'PatternMatchFail_closure" {
     Control.Exception.Base.$tc'PatternMatchFail_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'PatternMatchFail2_closure+1;
         const Control.Exception.Base.$tc'PatternMatchFail1_closure+4;
         const 5659337934556330582;
         const 79463786797963870;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.907638122 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail2_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail2_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail2_entry() //  [R1]
         { info_tbl: [(c9Qrl,
                       label: Control.Exception.Base.$fExceptionPatternMatchFail2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qrl: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Qrm; else goto c9Qrn;
       c9Qrm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Qrn: // global
           (_c9Qrd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Qrd::I64 == 0) goto c9Qrf; else goto c9Qre;
       c9Qrf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Qre: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Qrd::I64;
           I64[Sp - 24] = block_c9Qrg_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionPatternMatchFail3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 8416277433045206230;
           R2 = 15470147969565509342;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Qrg() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Qrg,
                       label: block_c9Qrg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qrg: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Qrh() args: 0, res: 0, upd: 0;
     }
 },
 _c9Qrh() //  []
         { info_tbl: [(c9Qrh,
                       label: block_c9Qrh_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qrh: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Qrq; else goto c9Qrp;
       c9Qrq: // global
           HpAlloc = 48;
           I64[Sp] = block_c9Qrh_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Qrp: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.909578431 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_entry() //  [R2]
         { info_tbl: [(c9QrA,
                       label: Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QrA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QrE; else goto c9QrF;
       c9QrE: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QrF: // global
           I64[Sp - 8] = block_c9Qrx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Qs0; else goto c9Qry;
       u9Qs0: // global
           call _c9Qrx(R1) args: 0, res: 0, upd: 0;
       c9Qry: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qrx() //  [R1]
         { info_tbl: [(c9Qrx,
                       label: block_c9Qrx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qrx: // global
           I64[Sp - 8] = block_c9QrD_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9QrD() //  [R1]
         { info_tbl: [(c9QrD,
                       label: block_c9QrD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QrD: // global
           I64[Sp] = block_c9QrK_info;
           R3 = Control.Exception.Base.$fExceptionPatternMatchFail2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9QrK() //  [R1]
         { info_tbl: [(c9QrK,
                       label: block_c9QrK_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QrK: // global
           if (R1 & 7 == 1) goto c9QrR; else goto c9QrV;
       c9QrR: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9QrV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QrY; else goto c9QrX;
       c9QrY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QrX: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.911117737 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionPatternMatchFail2_closure;
         const Control.Exception.Base.$fShowPatternMatchFail_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_entry() //  [R2]
         { info_tbl: [(c9Qs6,
                       label: Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qs6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Qsa; else goto c9Qs9;
       c9Qsa: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qs9: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionPatternMatchFail_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.912009388 UTC

[section ""cstring" . lvl1_r9PFy_bytes" {
     lvl1_r9PFy_bytes:
         I8[] [78,111,110,45,101,120,104,97,117,115,116,105,118,101,32,112,97,116,116,101,114,110,115,32,105,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.912746035 UTC

[section ""data" . lvl2_r9PFz_closure" {
     lvl2_r9PFz_closure:
         const lvl2_r9PFz_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r9PFz_entry() //  [R1]
         { info_tbl: [(c9Qsh,
                       label: lvl2_r9PFz_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qsh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qsi; else goto c9Qsj;
       c9Qsi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Qsj: // global
           (_c9Qse::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Qse::I64 == 0) goto c9Qsg; else goto c9Qsf;
       c9Qsg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Qsf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Qse::I64;
           R2 = lvl1_r9PFy_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.913780086 UTC

[section ""data" . Control.Exception.Base.patError_closure" {
     Control.Exception.Base.patError_closure:
         const Control.Exception.Base.patError_info;
         const 0;
 },
 Control.Exception.Base.patError_entry() //  [R2]
         { info_tbl: [(c9Qsq,
                       label: Control.Exception.Base.patError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qsq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Qsr; else goto c9Qss;
       c9Qsr: // global
           R2 = R2;
           R1 = Control.Exception.Base.patError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qss: // global
           I64[Sp - 8] = block_c9Qso_info;
           R3 = lvl2_r9PFz_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qso() //  [R1]
         { info_tbl: [(c9Qso,
                       label: block_c9Qso_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qso: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionPatternMatchFail_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.914742366 UTC

[section ""cstring" . lvl3_r9PFA_bytes" {
     lvl3_r9PFA_bytes:
         I8[] [78,111,110,45,101,120,104,97,117,115,116,105,118,101,32,103,117,97,114,100,115,32,105,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.915469058 UTC

[section ""data" . lvl4_r9PFB_closure" {
     lvl4_r9PFB_closure:
         const lvl4_r9PFB_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r9PFB_entry() //  [R1]
         { info_tbl: [(c9QsC,
                       label: lvl4_r9PFB_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QsC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QsD; else goto c9QsE;
       c9QsD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9QsE: // global
           (_c9Qsz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Qsz::I64 == 0) goto c9QsB; else goto c9QsA;
       c9QsB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9QsA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Qsz::I64;
           R2 = lvl3_r9PFA_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.916502363 UTC

[section ""data" . Control.Exception.Base.nonExhaustiveGuardsError_closure" {
     Control.Exception.Base.nonExhaustiveGuardsError_closure:
         const Control.Exception.Base.nonExhaustiveGuardsError_info;
         const 0;
 },
 Control.Exception.Base.nonExhaustiveGuardsError_entry() //  [R2]
         { info_tbl: [(c9QsL,
                       label: Control.Exception.Base.nonExhaustiveGuardsError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QsL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9QsM; else goto c9QsN;
       c9QsM: // global
           R2 = R2;
           R1 = Control.Exception.Base.nonExhaustiveGuardsError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QsN: // global
           I64[Sp - 8] = block_c9QsJ_info;
           R3 = lvl4_r9PFB_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9QsJ() //  [R1]
         { info_tbl: [(c9QsJ,
                       label: block_c9QsJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QsJ: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionPatternMatchFail_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.917819724 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionRecSelError4_bytes" {
     Control.Exception.Base.$fExceptionRecSelError4_bytes:
         I8[] [82,101,99,83,101,108,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.918371544 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError3_closure" {
     Control.Exception.Base.$fExceptionRecSelError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionRecSelError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.918909757 UTC

[section ""data" . Control.Exception.Base.$tcRecSelError_closure" {
     Control.Exception.Base.$tcRecSelError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 10415770337441550020;
         const 15768375346093691416;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.919531801 UTC

[section ""data" . $krep4_r9PFC_closure" {
     $krep4_r9PFC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcRecSelError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.920121545 UTC

[section ""data" . Control.Exception.Base.$tc'RecSelError1_closure" {
     Control.Exception.Base.$tc'RecSelError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep4_r9PFC_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.920679177 UTC

[section ""cstring" . Control.Exception.Base.$tc'RecSelError3_bytes" {
     Control.Exception.Base.$tc'RecSelError3_bytes:
         I8[] [39,82,101,99,83,101,108,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.921261168 UTC

[section ""data" . Control.Exception.Base.$tc'RecSelError2_closure" {
     Control.Exception.Base.$tc'RecSelError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'RecSelError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.921787152 UTC

[section ""data" . Control.Exception.Base.$tc'RecSelError_closure" {
     Control.Exception.Base.$tc'RecSelError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'RecSelError2_closure+1;
         const Control.Exception.Base.$tc'RecSelError1_closure+4;
         const 5471381485413442404;
         const 14158408912397908002;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.922787784 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError2_closure" {
     Control.Exception.Base.$fExceptionRecSelError2_closure:
         const Control.Exception.Base.$fExceptionRecSelError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecSelError2_entry() //  [R1]
         { info_tbl: [(c9Qt2,
                       label: Control.Exception.Base.$fExceptionRecSelError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qt2: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Qt3; else goto c9Qt4;
       c9Qt3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Qt4: // global
           (_c9QsU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9QsU::I64 == 0) goto c9QsW; else goto c9QsV;
       c9QsW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9QsV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9QsU::I64;
           I64[Sp - 24] = block_c9QsX_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionRecSelError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 15768375346093691416;
           R2 = 10415770337441550020;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9QsX() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9QsX,
                       label: block_c9QsX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QsX: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9QsY() args: 0, res: 0, upd: 0;
     }
 },
 _c9QsY() //  []
         { info_tbl: [(c9QsY,
                       label: block_c9QsY_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QsY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Qt7; else goto c9Qt6;
       c9Qt7: // global
           HpAlloc = 48;
           I64[Sp] = block_c9QsY_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Qt6: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.924582286 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecSelError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9Qth,
                       label: Control.Exception.Base.$fExceptionRecSelError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qth: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qtl; else goto c9Qtm;
       c9Qtl: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qtm: // global
           I64[Sp - 8] = block_c9Qte_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9QtH; else goto c9Qtf;
       u9QtH: // global
           call _c9Qte(R1) args: 0, res: 0, upd: 0;
       c9Qtf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qte() //  [R1]
         { info_tbl: [(c9Qte,
                       label: block_c9Qte_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qte: // global
           I64[Sp - 8] = block_c9Qtk_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qtk() //  [R1]
         { info_tbl: [(c9Qtk,
                       label: block_c9Qtk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qtk: // global
           I64[Sp] = block_c9Qtr_info;
           R3 = Control.Exception.Base.$fExceptionRecSelError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qtr() //  [R1]
         { info_tbl: [(c9Qtr,
                       label: block_c9Qtr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qtr: // global
           if (R1 & 7 == 1) goto c9Qty; else goto c9QtC;
       c9Qty: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9QtC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QtF; else goto c9QtE;
       c9QtF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QtE: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.926200403 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError_closure" {
     Control.Exception.Base.$fExceptionRecSelError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionRecSelError2_closure;
         const Control.Exception.Base.$fShowRecSelError_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecSelError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9QtN,
                       label: Control.Exception.Base.$fExceptionRecSelError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QtN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9QtR; else goto c9QtQ;
       c9QtR: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QtQ: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionRecSelError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.927122143 UTC

[section ""cstring" . lvl5_r9PFD_bytes" {
     lvl5_r9PFD_bytes:
         I8[] [78,111,32,109,97,116,99,104,32,105,110,32,114,101,99,111,114,100,32,115,101,108,101,99,116,111,114,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.927998578 UTC

[section ""data" . Control.Exception.Base.recSelError_closure" {
     Control.Exception.Base.recSelError_closure:
         const Control.Exception.Base.recSelError_info;
         const 0;
 },
 sat_s9PL4_entry() //  [R1]
         { info_tbl: [(c9Qu0,
                       label: sat_s9PL4_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qu0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qu1; else goto c9Qu2;
       c9Qu1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Qu2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Control.Exception.Base.recSelError_entry() //  [R2]
         { info_tbl: [(c9Qu5,
                       label: Control.Exception.Base.recSelError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qu5: // global
           _s9PL3::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9Qu6; else goto c9Qu7;
       c9Qu7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Qu9; else goto c9Qu8;
       c9Qu9: // global
           HpAlloc = 24;
           goto c9Qu6;
       c9Qu6: // global
           R2 = _s9PL3::I64;
           R1 = Control.Exception.Base.recSelError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qu8: // global
           I64[Hp - 16] = sat_s9PL4_info;
           I64[Hp] = _s9PL3::I64;
           I64[Sp - 8] = block_c9Qu3_info;
           R3 = Hp - 16;
           R2 = lvl5_r9PFD_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qu3() //  [R1]
         { info_tbl: [(c9Qu3,
                       label: block_c9Qu3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qu3: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionRecSelError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.929234561 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionRecConError4_bytes" {
     Control.Exception.Base.$fExceptionRecConError4_bytes:
         I8[] [82,101,99,67,111,110,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.930067285 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError3_closure" {
     Control.Exception.Base.$fExceptionRecConError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionRecConError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.930606951 UTC

[section ""data" . Control.Exception.Base.$tcRecConError_closure" {
     Control.Exception.Base.$tcRecConError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionRecConError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 12352028005606494596;
         const 6364281046760374976;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.931227151 UTC

[section ""data" . $krep5_r9PFE_closure" {
     $krep5_r9PFE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcRecConError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.931812377 UTC

[section ""data" . Control.Exception.Base.$tc'RecConError1_closure" {
     Control.Exception.Base.$tc'RecConError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep5_r9PFE_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.932352942 UTC

[section ""cstring" . Control.Exception.Base.$tc'RecConError3_bytes" {
     Control.Exception.Base.$tc'RecConError3_bytes:
         I8[] [39,82,101,99,67,111,110,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.932868155 UTC

[section ""data" . Control.Exception.Base.$tc'RecConError2_closure" {
     Control.Exception.Base.$tc'RecConError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'RecConError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.933463123 UTC

[section ""data" . Control.Exception.Base.$tc'RecConError_closure" {
     Control.Exception.Base.$tc'RecConError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'RecConError2_closure+1;
         const Control.Exception.Base.$tc'RecConError1_closure+4;
         const 9626440070376619587;
         const 11467734131060317064;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.934480452 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError2_closure" {
     Control.Exception.Base.$fExceptionRecConError2_closure:
         const Control.Exception.Base.$fExceptionRecConError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecConError2_entry() //  [R1]
         { info_tbl: [(c9Quo,
                       label: Control.Exception.Base.$fExceptionRecConError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Quo: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Qup; else goto c9Quq;
       c9Qup: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Quq: // global
           (_c9Qug::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Qug::I64 == 0) goto c9Qui; else goto c9Quh;
       c9Qui: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Quh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Qug::I64;
           I64[Sp - 24] = block_c9Quj_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionRecConError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 6364281046760374976;
           R2 = 12352028005606494596;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Quj() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Quj,
                       label: block_c9Quj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Quj: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Quk() args: 0, res: 0, upd: 0;
     }
 },
 _c9Quk() //  []
         { info_tbl: [(c9Quk,
                       label: block_c9Quk_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Quk: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Qut; else goto c9Qus;
       c9Qut: // global
           HpAlloc = 48;
           I64[Sp] = block_c9Quk_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Qus: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.93628292 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionRecConError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecConError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9QuD,
                       label: Control.Exception.Base.$fExceptionRecConError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QuD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QuH; else goto c9QuI;
       c9QuH: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecConError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QuI: // global
           I64[Sp - 8] = block_c9QuA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Qv3; else goto c9QuB;
       u9Qv3: // global
           call _c9QuA(R1) args: 0, res: 0, upd: 0;
       c9QuB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QuA() //  [R1]
         { info_tbl: [(c9QuA,
                       label: block_c9QuA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QuA: // global
           I64[Sp - 8] = block_c9QuG_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9QuG() //  [R1]
         { info_tbl: [(c9QuG,
                       label: block_c9QuG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QuG: // global
           I64[Sp] = block_c9QuN_info;
           R3 = Control.Exception.Base.$fExceptionRecConError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9QuN() //  [R1]
         { info_tbl: [(c9QuN,
                       label: block_c9QuN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QuN: // global
           if (R1 & 7 == 1) goto c9QuU; else goto c9QuY;
       c9QuU: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9QuY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Qv1; else goto c9Qv0;
       c9Qv1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Qv0: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.937883188 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError_closure" {
     Control.Exception.Base.$fExceptionRecConError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionRecConError2_closure;
         const Control.Exception.Base.$fShowRecConError_closure+1;
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionRecConError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionRecConError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionRecConError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecConError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9Qv9,
                       label: Control.Exception.Base.$fExceptionRecConError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qv9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Qvd; else goto c9Qvc;
       c9Qvd: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecConError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qvc: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionRecConError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.938810313 UTC

[section ""cstring" . lvl6_r9PFF_bytes" {
     lvl6_r9PFF_bytes:
         I8[] [77,105,115,115,105,110,103,32,102,105,101,108,100,32,105,110,32,114,101,99,111,114,100,32,99,111,110,115,116,114,117,99,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.940891085 UTC

[section ""data" . lvl7_r9PFG_closure" {
     lvl7_r9PFG_closure:
         const lvl7_r9PFG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r9PFG_entry() //  [R1]
         { info_tbl: [(c9Qvk,
                       label: lvl7_r9PFG_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qvk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qvl; else goto c9Qvm;
       c9Qvl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Qvm: // global
           (_c9Qvh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Qvh::I64 == 0) goto c9Qvj; else goto c9Qvi;
       c9Qvj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Qvi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Qvh::I64;
           R2 = lvl6_r9PFF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.942256707 UTC

[section ""data" . Control.Exception.Base.recConError_closure" {
     Control.Exception.Base.recConError_closure:
         const Control.Exception.Base.recConError_info;
         const 0;
 },
 Control.Exception.Base.recConError_entry() //  [R2]
         { info_tbl: [(c9Qvt,
                       label: Control.Exception.Base.recConError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qvt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Qvu; else goto c9Qvv;
       c9Qvu: // global
           R2 = R2;
           R1 = Control.Exception.Base.recConError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qvv: // global
           I64[Sp - 8] = block_c9Qvr_info;
           R3 = lvl7_r9PFG_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qvr() //  [R1]
         { info_tbl: [(c9Qvr,
                       label: block_c9Qvr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qvr: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionRecConError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.943226266 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionRecUpdError4_bytes" {
     Control.Exception.Base.$fExceptionRecUpdError4_bytes:
         I8[] [82,101,99,85,112,100,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.943784906 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError3_closure" {
     Control.Exception.Base.$fExceptionRecUpdError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionRecUpdError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.944339757 UTC

[section ""data" . Control.Exception.Base.$tcRecUpdError_closure" {
     Control.Exception.Base.$tcRecUpdError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 15702205725616076489;
         const 17185013925011980063;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.944963601 UTC

[section ""data" . $krep6_r9PFH_closure" {
     $krep6_r9PFH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcRecUpdError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.945561143 UTC

[section ""data" . Control.Exception.Base.$tc'RecUpdError1_closure" {
     Control.Exception.Base.$tc'RecUpdError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep6_r9PFH_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.946106005 UTC

[section ""cstring" . Control.Exception.Base.$tc'RecUpdError3_bytes" {
     Control.Exception.Base.$tc'RecUpdError3_bytes:
         I8[] [39,82,101,99,85,112,100,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.946645728 UTC

[section ""data" . Control.Exception.Base.$tc'RecUpdError2_closure" {
     Control.Exception.Base.$tc'RecUpdError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'RecUpdError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.947187803 UTC

[section ""data" . Control.Exception.Base.$tc'RecUpdError_closure" {
     Control.Exception.Base.$tc'RecUpdError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'RecUpdError2_closure+1;
         const Control.Exception.Base.$tc'RecUpdError1_closure+4;
         const 16559845159098082290;
         const 2874382059338705699;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.94821042 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError2_closure" {
     Control.Exception.Base.$fExceptionRecUpdError2_closure:
         const Control.Exception.Base.$fExceptionRecUpdError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecUpdError2_entry() //  [R1]
         { info_tbl: [(c9QvK,
                       label: Control.Exception.Base.$fExceptionRecUpdError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QvK: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9QvL; else goto c9QvM;
       c9QvL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9QvM: // global
           (_c9QvC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9QvC::I64 == 0) goto c9QvE; else goto c9QvD;
       c9QvE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9QvD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9QvC::I64;
           I64[Sp - 24] = block_c9QvF_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionRecUpdError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 17185013925011980063;
           R2 = 15702205725616076489;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9QvF() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9QvF,
                       label: block_c9QvF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QvF: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9QvG() args: 0, res: 0, upd: 0;
     }
 },
 _c9QvG() //  []
         { info_tbl: [(c9QvG,
                       label: block_c9QvG_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QvG: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9QvP; else goto c9QvO;
       c9QvP: // global
           HpAlloc = 48;
           I64[Sp] = block_c9QvG_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9QvO: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.950069077 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecUpdError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9QvZ,
                       label: Control.Exception.Base.$fExceptionRecUpdError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QvZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qw3; else goto c9Qw4;
       c9Qw3: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qw4: // global
           I64[Sp - 8] = block_c9QvW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Qwp; else goto c9QvX;
       u9Qwp: // global
           call _c9QvW(R1) args: 0, res: 0, upd: 0;
       c9QvX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QvW() //  [R1]
         { info_tbl: [(c9QvW,
                       label: block_c9QvW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QvW: // global
           I64[Sp - 8] = block_c9Qw2_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qw2() //  [R1]
         { info_tbl: [(c9Qw2,
                       label: block_c9Qw2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qw2: // global
           I64[Sp] = block_c9Qw9_info;
           R3 = Control.Exception.Base.$fExceptionRecUpdError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qw9() //  [R1]
         { info_tbl: [(c9Qw9,
                       label: block_c9Qw9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qw9: // global
           if (R1 & 7 == 1) goto c9Qwg; else goto c9Qwk;
       c9Qwg: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Qwk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Qwn; else goto c9Qwm;
       c9Qwn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Qwm: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.951624646 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError_closure" {
     Control.Exception.Base.$fExceptionRecUpdError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionRecUpdError2_closure;
         const Control.Exception.Base.$fShowRecUpdError_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecUpdError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9Qwv,
                       label: Control.Exception.Base.$fExceptionRecUpdError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qwv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Qwz; else goto c9Qwy;
       c9Qwz: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qwy: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionRecUpdError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.952549766 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNoMethodError4_bytes" {
     Control.Exception.Base.$fExceptionNoMethodError4_bytes:
         I8[] [78,111,77,101,116,104,111,100,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.95310407 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError3_closure" {
     Control.Exception.Base.$fExceptionNoMethodError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionNoMethodError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.954003732 UTC

[section ""data" . Control.Exception.Base.$tcNoMethodError_closure" {
     Control.Exception.Base.$tcNoMethodError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 11351432124310594529;
         const 14675551822527927261;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.954557347 UTC

[section ""data" . $krep7_r9PFI_closure" {
     $krep7_r9PFI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcNoMethodError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.955114678 UTC

[section ""data" . Control.Exception.Base.$tc'NoMethodError1_closure" {
     Control.Exception.Base.$tc'NoMethodError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep7_r9PFI_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.9557023 UTC

[section ""cstring" . Control.Exception.Base.$tc'NoMethodError3_bytes" {
     Control.Exception.Base.$tc'NoMethodError3_bytes:
         I8[] [39,78,111,77,101,116,104,111,100,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.956214083 UTC

[section ""data" . Control.Exception.Base.$tc'NoMethodError2_closure" {
     Control.Exception.Base.$tc'NoMethodError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'NoMethodError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.956796011 UTC

[section ""data" . Control.Exception.Base.$tc'NoMethodError_closure" {
     Control.Exception.Base.$tc'NoMethodError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'NoMethodError2_closure+1;
         const Control.Exception.Base.$tc'NoMethodError1_closure+4;
         const 17186686744263410642;
         const 16452408278578849625;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.957868915 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError2_closure" {
     Control.Exception.Base.$fExceptionNoMethodError2_closure:
         const Control.Exception.Base.$fExceptionNoMethodError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNoMethodError2_entry() //  [R1]
         { info_tbl: [(c9QwL,
                       label: Control.Exception.Base.$fExceptionNoMethodError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QwL: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9QwM; else goto c9QwN;
       c9QwM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9QwN: // global
           (_c9QwD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9QwD::I64 == 0) goto c9QwF; else goto c9QwE;
       c9QwF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9QwE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9QwD::I64;
           I64[Sp - 24] = block_c9QwG_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionNoMethodError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 14675551822527927261;
           R2 = 11351432124310594529;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9QwG() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9QwG,
                       label: block_c9QwG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QwG: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9QwH() args: 0, res: 0, upd: 0;
     }
 },
 _c9QwH() //  []
         { info_tbl: [(c9QwH,
                       label: block_c9QwH_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QwH: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9QwQ; else goto c9QwP;
       c9QwQ: // global
           HpAlloc = 48;
           I64[Sp] = block_c9QwH_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9QwP: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.95966652 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNoMethodError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9Qx0,
                       label: Control.Exception.Base.$fExceptionNoMethodError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qx0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qx4; else goto c9Qx5;
       c9Qx4: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qx5: // global
           I64[Sp - 8] = block_c9QwX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Qxq; else goto c9QwY;
       u9Qxq: // global
           call _c9QwX(R1) args: 0, res: 0, upd: 0;
       c9QwY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QwX() //  [R1]
         { info_tbl: [(c9QwX,
                       label: block_c9QwX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QwX: // global
           I64[Sp - 8] = block_c9Qx3_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qx3() //  [R1]
         { info_tbl: [(c9Qx3,
                       label: block_c9Qx3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qx3: // global
           I64[Sp] = block_c9Qxa_info;
           R3 = Control.Exception.Base.$fExceptionNoMethodError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qxa() //  [R1]
         { info_tbl: [(c9Qxa,
                       label: block_c9Qxa_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qxa: // global
           if (R1 & 7 == 1) goto c9Qxh; else goto c9Qxl;
       c9Qxh: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Qxl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Qxo; else goto c9Qxn;
       c9Qxo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Qxn: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.961215128 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError_closure" {
     Control.Exception.Base.$fExceptionNoMethodError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionNoMethodError2_closure;
         const Control.Exception.Base.$fShowNoMethodError_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNoMethodError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9Qxw,
                       label: Control.Exception.Base.$fExceptionNoMethodError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qxw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9QxA; else goto c9Qxz;
       c9QxA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qxz: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionNoMethodError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.962205137 UTC

[section ""cstring" . lvl8_r9PFJ_bytes" {
     lvl8_r9PFJ_bytes:
         I8[] [78,111,32,105,110,115,116,97,110,99,101,32,110,111,114,32,100,101,102,97,117,108,116,32,109,101,116,104,111,100,32,102,111,114,32,99,108,97,115,115,32,111,112,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.9629365 UTC

[section ""data" . lvl9_r9PFK_closure" {
     lvl9_r9PFK_closure:
         const lvl9_r9PFK_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r9PFK_entry() //  [R1]
         { info_tbl: [(c9QxH,
                       label: lvl9_r9PFK_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QxH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QxI; else goto c9QxJ;
       c9QxI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9QxJ: // global
           (_c9QxE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9QxE::I64 == 0) goto c9QxG; else goto c9QxF;
       c9QxG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9QxF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9QxE::I64;
           R2 = lvl8_r9PFJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.963926328 UTC

[section ""data" . Control.Exception.Base.noMethodBindingError_closure" {
     Control.Exception.Base.noMethodBindingError_closure:
         const Control.Exception.Base.noMethodBindingError_info;
         const 0;
 },
 Control.Exception.Base.noMethodBindingError_entry() //  [R2]
         { info_tbl: [(c9QxQ,
                       label: Control.Exception.Base.noMethodBindingError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QxQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9QxR; else goto c9QxS;
       c9QxR: // global
           R2 = R2;
           R1 = Control.Exception.Base.noMethodBindingError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QxS: // global
           I64[Sp - 8] = block_c9QxO_info;
           R3 = lvl9_r9PFK_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9QxO() //  [R1]
         { info_tbl: [(c9QxO,
                       label: block_c9QxO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QxO: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionNoMethodError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.964861669 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionTypeError4_bytes" {
     Control.Exception.Base.$fExceptionTypeError4_bytes:
         I8[] [84,121,112,101,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.965522108 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError3_closure" {
     Control.Exception.Base.$fExceptionTypeError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionTypeError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.966090518 UTC

[section ""data" . Control.Exception.Base.$tcTypeError_closure" {
     Control.Exception.Base.$tcTypeError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionTypeError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 16164392450212773017;
         const 7054022894506300317;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.966696366 UTC

[section ""data" . $krep8_r9PFL_closure" {
     $krep8_r9PFL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcTypeError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.967254032 UTC

[section ""data" . Control.Exception.Base.$tc'TypeError1_closure" {
     Control.Exception.Base.$tc'TypeError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep8_r9PFL_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.96782208 UTC

[section ""cstring" . Control.Exception.Base.$tc'TypeError3_bytes" {
     Control.Exception.Base.$tc'TypeError3_bytes:
         I8[] [39,84,121,112,101,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.968297368 UTC

[section ""data" . Control.Exception.Base.$tc'TypeError2_closure" {
     Control.Exception.Base.$tc'TypeError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'TypeError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.968865909 UTC

[section ""data" . Control.Exception.Base.$tc'TypeError_closure" {
     Control.Exception.Base.$tc'TypeError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'TypeError2_closure+1;
         const Control.Exception.Base.$tc'TypeError1_closure+4;
         const 2042750002965703545;
         const 3275664116896771855;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.969974525 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError2_closure" {
     Control.Exception.Base.$fExceptionTypeError2_closure:
         const Control.Exception.Base.$fExceptionTypeError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionTypeError2_entry() //  [R1]
         { info_tbl: [(c9Qy7,
                       label: Control.Exception.Base.$fExceptionTypeError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qy7: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Qy8; else goto c9Qy9;
       c9Qy8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Qy9: // global
           (_c9QxZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9QxZ::I64 == 0) goto c9Qy1; else goto c9Qy0;
       c9Qy1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Qy0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9QxZ::I64;
           I64[Sp - 24] = block_c9Qy2_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionTypeError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 7054022894506300317;
           R2 = 16164392450212773017;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Qy2() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Qy2,
                       label: block_c9Qy2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qy2: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Qy3() args: 0, res: 0, upd: 0;
     }
 },
 _c9Qy3() //  []
         { info_tbl: [(c9Qy3,
                       label: block_c9Qy3_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qy3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Qyc; else goto c9Qyb;
       c9Qyc: // global
           HpAlloc = 48;
           I64[Sp] = block_c9Qy3_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Qyb: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.971807976 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionTypeError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionTypeError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9Qym,
                       label: Control.Exception.Base.$fExceptionTypeError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qym: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Qyq; else goto c9Qyr;
       c9Qyq: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionTypeError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qyr: // global
           I64[Sp - 8] = block_c9Qyj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9QyM; else goto c9Qyk;
       u9QyM: // global
           call _c9Qyj(R1) args: 0, res: 0, upd: 0;
       c9Qyk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qyj() //  [R1]
         { info_tbl: [(c9Qyj,
                       label: block_c9Qyj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qyj: // global
           I64[Sp - 8] = block_c9Qyp_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qyp() //  [R1]
         { info_tbl: [(c9Qyp,
                       label: block_c9Qyp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qyp: // global
           I64[Sp] = block_c9Qyw_info;
           R3 = Control.Exception.Base.$fExceptionTypeError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qyw() //  [R1]
         { info_tbl: [(c9Qyw,
                       label: block_c9Qyw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qyw: // global
           if (R1 & 7 == 1) goto c9QyD; else goto c9QyH;
       c9QyD: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9QyH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QyK; else goto c9QyJ;
       c9QyK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QyJ: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.973403635 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError_closure" {
     Control.Exception.Base.$fExceptionTypeError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionTypeError2_closure;
         const Control.Exception.Base.$fShowTypeError_closure+1;
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionTypeError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionTypeError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionTypeError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionTypeError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9QyS,
                       label: Control.Exception.Base.$fExceptionTypeError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QyS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9QyW; else goto c9QyV;
       c9QyW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionTypeError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QyV: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionTypeError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.974479042 UTC

[section ""data" . Control.Exception.Base.typeError_closure" {
     Control.Exception.Base.typeError_closure:
         const Control.Exception.Base.typeError_info;
         const 0;
 },
 Control.Exception.Base.typeError_entry() //  [R2]
         { info_tbl: [(c9Qz3,
                       label: Control.Exception.Base.typeError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qz3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Qz4; else goto c9Qz5;
       c9Qz4: // global
           R2 = R2;
           R1 = Control.Exception.Base.typeError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Qz5: // global
           I64[Sp - 8] = block_c9Qz1_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Qz1() //  [R1]
         { info_tbl: [(c9Qz1,
                       label: block_c9Qz1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qz1: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionTypeError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.975411553 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNonTermination5_bytes" {
     Control.Exception.Base.$fExceptionNonTermination5_bytes:
         I8[] [78,111,110,84,101,114,109,105,110,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.975946592 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination4_closure" {
     Control.Exception.Base.$fExceptionNonTermination4_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionNonTermination5_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.976506783 UTC

[section ""data" . Control.Exception.Base.$tcNonTermination_closure" {
     Control.Exception.Base.$tcNonTermination_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination4_closure+1;
         const GHC.Types.krep$*_closure;
         const 3579424895879668618;
         const 10599900892006414641;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.978269223 UTC

[section ""data" . Control.Exception.Base.$tc'NonTermination1_closure" {
     Control.Exception.Base.$tc'NonTermination1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcNonTermination_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.978917641 UTC

[section ""cstring" . Control.Exception.Base.$tc'NonTermination3_bytes" {
     Control.Exception.Base.$tc'NonTermination3_bytes:
         I8[] [39,78,111,110,84,101,114,109,105,110,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.979462621 UTC

[section ""data" . Control.Exception.Base.$tc'NonTermination2_closure" {
     Control.Exception.Base.$tc'NonTermination2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'NonTermination3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.980059115 UTC

[section ""data" . Control.Exception.Base.$tc'NonTermination_closure" {
     Control.Exception.Base.$tc'NonTermination_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'NonTermination2_closure+1;
         const Control.Exception.Base.$tc'NonTermination1_closure+1;
         const 12968537629115503750;
         const 16395462767232503200;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.981097298 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination3_closure" {
     Control.Exception.Base.$fExceptionNonTermination3_closure:
         const Control.Exception.Base.$fExceptionNonTermination3_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination3_entry() //  [R1]
         { info_tbl: [(c9Qzk,
                       label: Control.Exception.Base.$fExceptionNonTermination3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qzk: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Qzl; else goto c9Qzm;
       c9Qzl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Qzm: // global
           (_c9Qzc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Qzc::I64 == 0) goto c9Qze; else goto c9Qzd;
       c9Qze: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Qzd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Qzc::I64;
           I64[Sp - 24] = block_c9Qzf_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionNonTermination4_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 10599900892006414641;
           R2 = 3579424895879668618;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Qzf() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Qzf,
                       label: block_c9Qzf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qzf: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Qzg() args: 0, res: 0, upd: 0;
     }
 },
 _c9Qzg() //  []
         { info_tbl: [(c9Qzg,
                       label: block_c9Qzg_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qzg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Qzp; else goto c9Qzo;
       c9Qzp: // global
           HpAlloc = 48;
           I64[Sp] = block_c9Qzg_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Qzo: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.982508305 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNestedAtomically5_bytes" {
     Control.Exception.Base.$fExceptionNestedAtomically5_bytes:
         I8[] [78,101,115,116,101,100,65,116,111,109,105,99,97,108,108,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.983062991 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically4_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically4_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionNestedAtomically5_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.983611827 UTC

[section ""data" . Control.Exception.Base.$tcNestedAtomically_closure" {
     Control.Exception.Base.$tcNestedAtomically_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically4_closure+1;
         const GHC.Types.krep$*_closure;
         const 13388460688970090897;
         const 8422109474180001052;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.984183865 UTC

[section ""data" . Control.Exception.Base.$tc'NestedAtomically1_closure" {
     Control.Exception.Base.$tc'NestedAtomically1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcNestedAtomically_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.984729696 UTC

[section ""cstring" . Control.Exception.Base.$tc'NestedAtomically3_bytes" {
     Control.Exception.Base.$tc'NestedAtomically3_bytes:
         I8[] [39,78,101,115,116,101,100,65,116,111,109,105,99,97,108,108,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.985236048 UTC

[section ""data" . Control.Exception.Base.$tc'NestedAtomically2_closure" {
     Control.Exception.Base.$tc'NestedAtomically2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'NestedAtomically3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.986419827 UTC

[section ""data" . Control.Exception.Base.$tc'NestedAtomically_closure" {
     Control.Exception.Base.$tc'NestedAtomically_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'NestedAtomically2_closure+1;
         const Control.Exception.Base.$tc'NestedAtomically1_closure+1;
         const 4753625237420970988;
         const 7635940481883810337;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.987431756 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically3_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically3_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically3_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically3_entry() //  [R1]
         { info_tbl: [(c9QzD,
                       label: Control.Exception.Base.$fExceptionNestedAtomically3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QzD: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9QzE; else goto c9QzF;
       c9QzE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9QzF: // global
           (_c9Qzv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Qzv::I64 == 0) goto c9Qzx; else goto c9Qzw;
       c9Qzx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Qzw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Qzv::I64;
           I64[Sp - 24] = block_c9Qzy_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionNestedAtomically4_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 8422109474180001052;
           R2 = 13388460688970090897;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Qzy() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Qzy,
                       label: block_c9Qzy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qzy: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Qzz() args: 0, res: 0, upd: 0;
     }
 },
 _c9Qzz() //  []
         { info_tbl: [(c9Qzz,
                       label: block_c9Qzz_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Qzz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9QzI; else goto c9QzH;
       c9QzI: // global
           HpAlloc = 48;
           I64[Sp] = block_c9Qzz_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9QzH: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.989229024 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure" {
     Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure:
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination_$cfromException_entry() //  [R2]
         { info_tbl: [(c9QzS,
                       label: Control.Exception.Base.$fExceptionNonTermination_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QzS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QzW; else goto c9QzX;
       c9QzW: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QzX: // global
           I64[Sp - 8] = block_c9QzP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9QAi; else goto c9QzQ;
       u9QAi: // global
           call _c9QzP(R1) args: 0, res: 0, upd: 0;
       c9QzQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QzP() //  [R1]
         { info_tbl: [(c9QzP,
                       label: block_c9QzP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QzP: // global
           I64[Sp - 8] = block_c9QzV_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9QzV() //  [R1]
         { info_tbl: [(c9QzV,
                       label: block_c9QzV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QzV: // global
           I64[Sp] = block_c9QA2_info;
           R3 = Control.Exception.Base.$fExceptionNonTermination3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9QA2() //  [R1]
         { info_tbl: [(c9QA2,
                       label: block_c9QA2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QA2: // global
           if (R1 & 7 == 1) goto c9QA9; else goto c9QAd;
       c9QA9: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9QAd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QAg; else goto c9QAf;
       c9QAg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QAf: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.990748576 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination_closure" {
     Control.Exception.Base.$fExceptionNonTermination_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionNonTermination3_closure;
         const Control.Exception.Base.$fShowNonTermination_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure" {
     Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure:
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination_$ctoException_entry() //  [R2]
         { info_tbl: [(c9QAo,
                       label: Control.Exception.Base.$fExceptionNonTermination_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QAo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9QAs; else goto c9QAr;
       c9QAs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QAr: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionNonTermination_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.991795734 UTC

[section ""data" . Control.Exception.Base.nonTermination_closure" {
     Control.Exception.Base.nonTermination_closure:
         const Control.Exception.Base.nonTermination_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.nonTermination_entry() //  [R1]
         { info_tbl: [(c9QAz,
                       label: Control.Exception.Base.nonTermination_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QAz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QAA; else goto c9QAB;
       c9QAA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9QAB: // global
           (_c9QAw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9QAw::I64 == 0) goto c9QAy; else goto c9QAx;
       c9QAy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9QAx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9QAw::I64;
           R2 = Control.Exception.Base.NonTermination_closure+1;
           Sp = Sp - 16;
           call Control.Exception.Base.$fExceptionNonTermination_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.99306512 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_entry() //  [R2]
         { info_tbl: [(c9QAJ,
                       label: Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QAJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QAN; else goto c9QAO;
       c9QAN: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QAO: // global
           I64[Sp - 8] = block_c9QAG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9QB9; else goto c9QAH;
       u9QB9: // global
           call _c9QAG(R1) args: 0, res: 0, upd: 0;
       c9QAH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QAG() //  [R1]
         { info_tbl: [(c9QAG,
                       label: block_c9QAG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QAG: // global
           I64[Sp - 8] = block_c9QAM_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9QAM() //  [R1]
         { info_tbl: [(c9QAM,
                       label: block_c9QAM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QAM: // global
           I64[Sp] = block_c9QAT_info;
           R3 = Control.Exception.Base.$fExceptionNestedAtomically3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9QAT() //  [R1]
         { info_tbl: [(c9QAT,
                       label: block_c9QAT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QAT: // global
           if (R1 & 7 == 1) goto c9QB0; else goto c9QB4;
       c9QB0: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9QB4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QB7; else goto c9QB6;
       c9QB7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QB6: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.994589908 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionNestedAtomically3_closure;
         const Control.Exception.Base.$fShowNestedAtomically_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_entry() //  [R2]
         { info_tbl: [(c9QBf,
                       label: Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QBf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9QBj; else goto c9QBi;
       c9QBj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QBi: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionNestedAtomically_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.995632484 UTC

[section ""data" . Control.Exception.Base.nestedAtomically_closure" {
     Control.Exception.Base.nestedAtomically_closure:
         const Control.Exception.Base.nestedAtomically_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.nestedAtomically_entry() //  [R1]
         { info_tbl: [(c9QBq,
                       label: Control.Exception.Base.nestedAtomically_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QBq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QBr; else goto c9QBs;
       c9QBr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9QBs: // global
           (_c9QBn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9QBn::I64 == 0) goto c9QBp; else goto c9QBo;
       c9QBp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9QBo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9QBn::I64;
           R2 = Control.Exception.Base.NestedAtomically_closure+1;
           Sp = Sp - 16;
           call Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.996467561 UTC

[section ""data" . Control.Exception.Base.NestedAtomically_closure" {
     Control.Exception.Base.NestedAtomically_closure:
         const Control.Exception.Base.NestedAtomically_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.996977641 UTC

[section ""data" . Control.Exception.Base.NonTermination_closure" {
     Control.Exception.Base.NonTermination_closure:
         const Control.Exception.Base.NonTermination_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.998128855 UTC

[section ""relreadonly" . Control.Exception.Base.NestedAtomically_closure_tbl" {
     Control.Exception.Base.NestedAtomically_closure_tbl:
         const Control.Exception.Base.NestedAtomically_closure+1;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.998701487 UTC

[Control.Exception.Base.NestedAtomically_con_entry() //  [R1]
         { info_tbl: [(c9QBt,
                       label: Control.Exception.Base.NestedAtomically_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,67,111,110,116,114,111,108,46,69,120,99,101,112,116,105,111,110,46,66,97,115,101,46,78,101,115,116,101,100,65,116,111,109,105,99,97,108,108,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QBt: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.999325761 UTC

[section ""relreadonly" . Control.Exception.Base.NonTermination_closure_tbl" {
     Control.Exception.Base.NonTermination_closure_tbl:
         const Control.Exception.Base.NonTermination_closure+1;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:54.999851639 UTC

[Control.Exception.Base.NonTermination_con_entry() //  [R1]
         { info_tbl: [(c9QBv,
                       label: Control.Exception.Base.NonTermination_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,67,111,110,116,114,111,108,46,69,120,99,101,112,116,105,111,110,46,66,97,115,101,46,78,111,110,84,101,114,109,105,110,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QBv: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.000485293 UTC

[section ""relreadonly" . S9POL_srt" {
     S9POL_srt:
         const Control.Exception.Base.$fExceptionNonTermination1_closure;
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure;
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_closure;
         const Control.Exception.Base.$fShowNonTermination1_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically1_closure;
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure;
         const Control.Exception.Base.$fShowNestedAtomically1_closure;
         const Control.Exception.Base.runtimeError_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Control.Exception.Base.absentError_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail2_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure;
         const Control.Exception.Base.patError_closure;
         const GHC.IO.Exception.untangle_closure;
         const lvl2_r9PFz_closure;
         const Control.Exception.Base.nonExhaustiveGuardsError_closure;
         const lvl4_r9PFB_closure;
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionRecSelError2_closure;
         const Control.Exception.Base.$fExceptionRecSelError_closure;
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure;
         const Control.Exception.Base.recSelError_closure;
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionRecConError2_closure;
         const Control.Exception.Base.$fExceptionRecConError_closure;
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_closure;
         const Control.Exception.Base.recConError_closure;
         const lvl7_r9PFG_closure;
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionRecUpdError2_closure;
         const Control.Exception.Base.$fExceptionRecUpdError_closure;
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure;
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionNoMethodError2_closure;
         const Control.Exception.Base.$fExceptionNoMethodError_closure;
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure;
         const Control.Exception.Base.noMethodBindingError_closure;
         const lvl9_r9PFK_closure;
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionTypeError2_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Control.Exception.Base.$fExceptionTypeError_closure;
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_closure;
         const Control.Exception.Base.typeError_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure;
         const Control.Exception.Base.$fExceptionNonTermination3_closure;
         const Control.Exception.Base.$fExceptionNonTermination_closure;
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically3_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.001585281 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:04:55.002737468 UTC

[section ""data" . Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_entry() //  [R3,
                                                                        R4]
         { info_tbl: [(c9QBB,
                       label: Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QBB: // global
           _s9PFO::P64 = R3;
           R3 = R4;
           R2 = _s9PFO::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.006013109 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail1_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail1_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail1_info;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail1_entry() //  [R2]
         { info_tbl: [(c9QBM,
                       label: Control.Exception.Base.$fExceptionPatternMatchFail1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QBM: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.009490767 UTC

[section ""data" . Control.Exception.Base.$fShowPatternMatchFail_$cshowList_closure" {
     Control.Exception.Base.$fShowPatternMatchFail_$cshowList_closure:
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowList_info;
 },
 Control.Exception.Base.$fShowPatternMatchFail_$cshowList_entry() //  [R2,
                                                                       R3]
         { info_tbl: [(c9QBZ,
                       label: Control.Exception.Base.$fShowPatternMatchFail_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QBZ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.013627853 UTC

[section ""data" . Control.Exception.Base.$fShowPatternMatchFail_closure" {
     Control.Exception.Base.$fShowPatternMatchFail_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionPatternMatchFail1_closure+1;
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.015442698 UTC

[section ""data" . Control.Exception.Base.$fShowRecSelError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowRecSelError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowRecSelError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowRecSelError_$cshowsPrec_entry() //  [R3,
                                                                   R4]
         { info_tbl: [(c9QCb,
                       label: Control.Exception.Base.$fShowRecSelError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QCb: // global
           _s9PFT::P64 = R3;
           R3 = R4;
           R2 = _s9PFT::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.018629743 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError1_closure" {
     Control.Exception.Base.$fExceptionRecSelError1_closure:
         const Control.Exception.Base.$fExceptionRecSelError1_info;
 },
 Control.Exception.Base.$fExceptionRecSelError1_entry() //  [R2]
         { info_tbl: [(c9QCm,
                       label: Control.Exception.Base.$fExceptionRecSelError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QCm: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.022035041 UTC

[section ""data" . Control.Exception.Base.$fShowRecSelError_$cshowList_closure" {
     Control.Exception.Base.$fShowRecSelError_$cshowList_closure:
         const Control.Exception.Base.$fShowRecSelError_$cshowList_info;
 },
 Control.Exception.Base.$fShowRecSelError_$cshowList_entry() //  [R2,
                                                                  R3]
         { info_tbl: [(c9QCz,
                       label: Control.Exception.Base.$fShowRecSelError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QCz: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.025225403 UTC

[section ""data" . Control.Exception.Base.$fShowRecSelError_closure" {
     Control.Exception.Base.$fShowRecSelError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowRecSelError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionRecSelError1_closure+1;
         const Control.Exception.Base.$fShowRecSelError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.027014488 UTC

[section ""data" . Control.Exception.Base.$fShowRecConError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowRecConError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowRecConError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowRecConError_$cshowsPrec_entry() //  [R3,
                                                                   R4]
         { info_tbl: [(c9QCL,
                       label: Control.Exception.Base.$fShowRecConError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QCL: // global
           _s9PFY::P64 = R3;
           R3 = R4;
           R2 = _s9PFY::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.030278093 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError1_closure" {
     Control.Exception.Base.$fExceptionRecConError1_closure:
         const Control.Exception.Base.$fExceptionRecConError1_info;
 },
 Control.Exception.Base.$fExceptionRecConError1_entry() //  [R2]
         { info_tbl: [(c9QCW,
                       label: Control.Exception.Base.$fExceptionRecConError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QCW: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.033644549 UTC

[section ""data" . Control.Exception.Base.$fShowRecConError_$cshowList_closure" {
     Control.Exception.Base.$fShowRecConError_$cshowList_closure:
         const Control.Exception.Base.$fShowRecConError_$cshowList_info;
 },
 Control.Exception.Base.$fShowRecConError_$cshowList_entry() //  [R2,
                                                                  R3]
         { info_tbl: [(c9QD9,
                       label: Control.Exception.Base.$fShowRecConError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QD9: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.036795787 UTC

[section ""data" . Control.Exception.Base.$fShowRecConError_closure" {
     Control.Exception.Base.$fShowRecConError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowRecConError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionRecConError1_closure+1;
         const Control.Exception.Base.$fShowRecConError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.038629231 UTC

[section ""data" . Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_entry() //  [R3,
                                                                   R4]
         { info_tbl: [(c9QDl,
                       label: Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QDl: // global
           _s9PG3::P64 = R3;
           R3 = R4;
           R2 = _s9PG3::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.042513919 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError1_closure" {
     Control.Exception.Base.$fExceptionRecUpdError1_closure:
         const Control.Exception.Base.$fExceptionRecUpdError1_info;
 },
 Control.Exception.Base.$fExceptionRecUpdError1_entry() //  [R2]
         { info_tbl: [(c9QDw,
                       label: Control.Exception.Base.$fExceptionRecUpdError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QDw: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.046186389 UTC

[section ""data" . Control.Exception.Base.$fShowRecUpdError_$cshowList_closure" {
     Control.Exception.Base.$fShowRecUpdError_$cshowList_closure:
         const Control.Exception.Base.$fShowRecUpdError_$cshowList_info;
 },
 Control.Exception.Base.$fShowRecUpdError_$cshowList_entry() //  [R2,
                                                                  R3]
         { info_tbl: [(c9QDJ,
                       label: Control.Exception.Base.$fShowRecUpdError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QDJ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.050986068 UTC

[section ""data" . Control.Exception.Base.$fShowRecUpdError_closure" {
     Control.Exception.Base.$fShowRecUpdError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionRecUpdError1_closure+1;
         const Control.Exception.Base.$fShowRecUpdError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.053446109 UTC

[section ""data" . Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_entry() //  [R3,
                                                                     R4]
         { info_tbl: [(c9QDV,
                       label: Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QDV: // global
           _s9PG8::P64 = R3;
           R3 = R4;
           R2 = _s9PG8::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.056728181 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError1_closure" {
     Control.Exception.Base.$fExceptionNoMethodError1_closure:
         const Control.Exception.Base.$fExceptionNoMethodError1_info;
 },
 Control.Exception.Base.$fExceptionNoMethodError1_entry() //  [R2]
         { info_tbl: [(c9QE6,
                       label: Control.Exception.Base.$fExceptionNoMethodError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QE6: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.06143382 UTC

[section ""data" . Control.Exception.Base.$fShowNoMethodError_$cshowList_closure" {
     Control.Exception.Base.$fShowNoMethodError_$cshowList_closure:
         const Control.Exception.Base.$fShowNoMethodError_$cshowList_info;
 },
 Control.Exception.Base.$fShowNoMethodError_$cshowList_entry() //  [R2,
                                                                    R3]
         { info_tbl: [(c9QEj,
                       label: Control.Exception.Base.$fShowNoMethodError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QEj: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.065295163 UTC

[section ""data" . Control.Exception.Base.$fShowNoMethodError_closure" {
     Control.Exception.Base.$fShowNoMethodError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionNoMethodError1_closure+1;
         const Control.Exception.Base.$fShowNoMethodError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.067550685 UTC

[section ""data" . Control.Exception.Base.$fShowTypeError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowTypeError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowTypeError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowTypeError_$cshowsPrec_entry() //  [R3,
                                                                 R4]
         { info_tbl: [(c9QEv,
                       label: Control.Exception.Base.$fShowTypeError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QEv: // global
           _s9PGd::P64 = R3;
           R3 = R4;
           R2 = _s9PGd::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.071826445 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError1_closure" {
     Control.Exception.Base.$fExceptionTypeError1_closure:
         const Control.Exception.Base.$fExceptionTypeError1_info;
 },
 Control.Exception.Base.$fExceptionTypeError1_entry() //  [R2]
         { info_tbl: [(c9QEG,
                       label: Control.Exception.Base.$fExceptionTypeError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QEG: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.076413941 UTC

[section ""data" . Control.Exception.Base.$fShowTypeError_$cshowList_closure" {
     Control.Exception.Base.$fShowTypeError_$cshowList_closure:
         const Control.Exception.Base.$fShowTypeError_$cshowList_info;
 },
 Control.Exception.Base.$fShowTypeError_$cshowList_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c9QET,
                       label: Control.Exception.Base.$fShowTypeError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QET: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.080095493 UTC

[section ""data" . Control.Exception.Base.$fShowTypeError_closure" {
     Control.Exception.Base.$fShowTypeError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowTypeError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionTypeError1_closure+1;
         const Control.Exception.Base.$fShowTypeError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.082930295 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNonTermination2_bytes" {
     Control.Exception.Base.$fExceptionNonTermination2_bytes:
         I8[] [60,60,108,111,111,112,62,62]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.084687488 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination1_closure" {
     Control.Exception.Base.$fExceptionNonTermination1_closure:
         const Control.Exception.Base.$fExceptionNonTermination1_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination1_entry() //  [R1]
         { info_tbl: [(c9QF8,
                       label: Control.Exception.Base.$fExceptionNonTermination1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QF8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QF9; else goto c9QFa;
       c9QF9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9QFa: // global
           (_c9QF5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9QF5::I64 == 0) goto c9QF7; else goto c9QF6;
       c9QF7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9QF6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9QF5::I64;
           R2 = Control.Exception.Base.$fExceptionNonTermination2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.089079688 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_info;
         const 0;
 },
 Control.Exception.Base.$fShowNonTermination_$cshowsPrec_entry() //  [R2,
                                                                      R3, R4]
         { info_tbl: [(c9QFp,
                       label: Control.Exception.Base.$fShowNonTermination_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QFp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QFq; else goto c9QFr;
       c9QFq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QFr: // global
           I64[Sp - 16] = block_c9QFm_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9QFv; else goto c9QFn;
       u9QFv: // global
           call _c9QFm() args: 0, res: 0, upd: 0;
       c9QFn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QFm() //  []
         { info_tbl: [(c9QFm,
                       label: block_c9QFm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QFm: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNonTermination1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.094838523 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination_$cshow_closure" {
     Control.Exception.Base.$fExceptionNonTermination_$cshow_closure:
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination_$cshow_entry() //  [R2]
         { info_tbl: [(c9QFM,
                       label: Control.Exception.Base.$fExceptionNonTermination_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QFM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9QFN; else goto c9QFO;
       c9QFN: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNonTermination_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QFO: // global
           I64[Sp - 8] = block_c9QFJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9QFS; else goto c9QFK;
       u9QFS: // global
           call _c9QFJ() args: 0, res: 0, upd: 0;
       c9QFK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QFJ() //  []
         { info_tbl: [(c9QFJ,
                       label: block_c9QFJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QFJ: // global
           R1 = Control.Exception.Base.$fExceptionNonTermination1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.100048012 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination1_closure" {
     Control.Exception.Base.$fShowNonTermination1_closure:
         const Control.Exception.Base.$fShowNonTermination1_info;
         const 0;
 },
 Control.Exception.Base.$fShowNonTermination1_entry() //  [R2, R3]
         { info_tbl: [(c9QGa,
                       label: Control.Exception.Base.$fShowNonTermination1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QGa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QGb; else goto c9QGc;
       c9QGb: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNonTermination1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QGc: // global
           I64[Sp - 16] = block_c9QG7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9QGg; else goto c9QG8;
       u9QGg: // global
           call _c9QG7() args: 0, res: 0, upd: 0;
       c9QG8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QG7() //  []
         { info_tbl: [(c9QG7,
                       label: block_c9QG7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QG7: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNonTermination1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.105687115 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination_$cshowList_closure" {
     Control.Exception.Base.$fShowNonTermination_$cshowList_closure:
         const Control.Exception.Base.$fShowNonTermination_$cshowList_info;
         const 0;
 },
 Control.Exception.Base.$fShowNonTermination_$cshowList_entry() //  [R2,
                                                                     R3]
         { info_tbl: [(c9QGu,
                       label: Control.Exception.Base.$fShowNonTermination_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QGu: // global
           R4 = R3;
           R3 = R2;
           R2 = Control.Exception.Base.$fShowNonTermination1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.109853112 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination_closure" {
     Control.Exception.Base.$fShowNonTermination_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_closure+1;
         const Control.Exception.Base.$fShowNonTermination_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.111627304 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNestedAtomically2_bytes" {
     Control.Exception.Base.$fExceptionNestedAtomically2_bytes:
         I8[] [67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,83,84,77,46,97,116,111,109,105,99,97,108,108,121,32,119,97,115,32,110,101,115,116,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.11387816 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically1_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically1_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically1_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically1_entry() //  [R1]
         { info_tbl: [(c9QGJ,
                       label: Control.Exception.Base.$fExceptionNestedAtomically1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QGJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QGK; else goto c9QGL;
       c9QGK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9QGL: // global
           (_c9QGG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9QGG::I64 == 0) goto c9QGI; else goto c9QGH;
       c9QGI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9QGH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9QGG::I64;
           R2 = Control.Exception.Base.$fExceptionNestedAtomically2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.117931012 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_info;
         const 0;
 },
 Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_entry() //  [R2,
                                                                        R3, R4]
         { info_tbl: [(c9QH0,
                       label: Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QH0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QH1; else goto c9QH2;
       c9QH1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QH2: // global
           I64[Sp - 16] = block_c9QGX_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9QH6; else goto c9QGY;
       u9QH6: // global
           call _c9QGX() args: 0, res: 0, upd: 0;
       c9QGY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QGX() //  []
         { info_tbl: [(c9QGX,
                       label: block_c9QGX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QGX: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNestedAtomically1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.123231745 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically_$cshow_entry() //  [R2]
         { info_tbl: [(c9QHn,
                       label: Control.Exception.Base.$fExceptionNestedAtomically_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QHn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9QHo; else goto c9QHp;
       c9QHo: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QHp: // global
           I64[Sp - 8] = block_c9QHk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9QHt; else goto c9QHl;
       u9QHt: // global
           call _c9QHk() args: 0, res: 0, upd: 0;
       c9QHl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QHk() //  []
         { info_tbl: [(c9QHk,
                       label: block_c9QHk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QHk: // global
           R1 = Control.Exception.Base.$fExceptionNestedAtomically1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.128603499 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically1_closure" {
     Control.Exception.Base.$fShowNestedAtomically1_closure:
         const Control.Exception.Base.$fShowNestedAtomically1_info;
         const 0;
 },
 Control.Exception.Base.$fShowNestedAtomically1_entry() //  [R2, R3]
         { info_tbl: [(c9QHL,
                       label: Control.Exception.Base.$fShowNestedAtomically1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QHL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QHM; else goto c9QHN;
       c9QHM: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNestedAtomically1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QHN: // global
           I64[Sp - 16] = block_c9QHI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9QHR; else goto c9QHJ;
       u9QHR: // global
           call _c9QHI() args: 0, res: 0, upd: 0;
       c9QHJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QHI() //  []
         { info_tbl: [(c9QHI,
                       label: block_c9QHI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QHI: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNestedAtomically1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.134002351 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically_$cshowList_closure" {
     Control.Exception.Base.$fShowNestedAtomically_$cshowList_closure:
         const Control.Exception.Base.$fShowNestedAtomically_$cshowList_info;
         const 0;
 },
 Control.Exception.Base.$fShowNestedAtomically_$cshowList_entry() //  [R2,
                                                                       R3]
         { info_tbl: [(c9QI5,
                       label: Control.Exception.Base.$fShowNestedAtomically_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QI5: // global
           R4 = R3;
           R3 = R2;
           R2 = Control.Exception.Base.$fShowNestedAtomically1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.137271369 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically_closure" {
     Control.Exception.Base.$fShowNestedAtomically_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure+1;
         const Control.Exception.Base.$fShowNestedAtomically_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.139947421 UTC

[section ""data" . Control.Exception.Base.catchJust1_closure" {
     Control.Exception.Base.catchJust1_closure:
         const Control.Exception.Base.catchJust1_info;
 },
 sat_s9PGK_entry() //  [R1]
         { info_tbl: [(c9QIv,
                       label: sat_s9PGK_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QIv: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PGO_entry() //  [R1, R2]
         { info_tbl: [(c9QIC,
                       label: sat_s9PGO_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QIC: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c9QID; else goto c9QIE;
       c9QID: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QIE: // global
           I64[Sp - 40] = block_c9QIm_info;
           _s9PGI::P64 = R2;
           _s9PGD::P64 = P64[R1 + 7];
           R2 = _s9PGD::P64;
           I64[Sp - 56] = stg_ap_p_info;
           P64[Sp - 48] = _s9PGI::P64;
           P64[Sp - 32] = _s9PGD::P64;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _s9PGI::P64;
           Sp = Sp - 56;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c9QIm() //  [R1]
         { info_tbl: [(c9QIm,
                       label: block_c9QIm_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QIm: // global
           if (R1 & 7 == 1) goto c9QIz; else goto c9QIA;
       c9QIz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QIH; else goto c9QIG;
       c9QIH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QIG: // global
           I64[Hp - 8] = sat_s9PGK_info;
           P64[Hp] = P64[Sp + 32];
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9QIA: // global
           I64[Sp] = block_c9QIK_info;
           _s9PGL::P64 = P64[R1 + 6];
           R2 = _s9PGL::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 32] = _s9PGL::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QIK() //  [R1]
         { info_tbl: [(c9QIK,
                       label: block_c9QIK_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QIK: // global
           if (R1 & 7 == 1) goto c9QIR; else goto c9QIV;
       c9QIR: // global
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = GHC.IO.throwIO1_closure+3;
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QIV: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.catchJust1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9QIX,
                       label: Control.Exception.Base.catchJust1_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QIX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QJ1; else goto c9QJ0;
       c9QJ1: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.catchJust1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QJ0: // global
           I64[Hp - 24] = sat_s9PGO_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R5;
           R2 = Hp - 23;
           R1 = R4;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.15319102 UTC

[section ""data" . Control.Exception.Base.catchJust_closure" {
     Control.Exception.Base.catchJust_closure:
         const Control.Exception.Base.catchJust_info;
 },
 Control.Exception.Base.catchJust_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9QJv,
                       label: Control.Exception.Base.catchJust_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QJv: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.catchJust1_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.156480397 UTC

[section ""data" . Control.Exception.Base.handleJust1_closure" {
     Control.Exception.Base.handleJust1_closure:
         const Control.Exception.Base.handleJust1_info;
 },
 Control.Exception.Base.handleJust1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9QJG,
                       label: Control.Exception.Base.handleJust1_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QJG: // global
           _s9PGS::P64 = R5;
           R5 = R4;
           R4 = _s9PGS::P64;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.catchJust1_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.159917683 UTC

[section ""data" . Control.Exception.Base.handleJust_closure" {
     Control.Exception.Base.handleJust_closure:
         const Control.Exception.Base.handleJust_info;
 },
 Control.Exception.Base.handleJust_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9QJR,
                       label: Control.Exception.Base.handleJust_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QJR: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.handleJust1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.163625092 UTC

[section ""data" . Control.Exception.Base.handle1_closure" {
     Control.Exception.Base.handle1_closure:
         const Control.Exception.Base.handle1_info;
 },
 Control.Exception.Base.handle1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9QK2,
                       label: Control.Exception.Base.handle1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QK2: // global
           _s9PGW::P64 = R4;
           R4 = R3;
           R3 = _s9PGW::P64;
           R2 = R2;
           call GHC.IO.catch1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.166928231 UTC

[section ""data" . Control.Exception.Base.handle_closure" {
     Control.Exception.Base.handle_closure:
         const Control.Exception.Base.handle_info;
 },
 Control.Exception.Base.handle_entry() //  [R2, R3, R4]
         { info_tbl: [(c9QKd,
                       label: Control.Exception.Base.handle_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QKd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.handle1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.170513089 UTC

[section ""data" . Control.Exception.Base.mapException1_closure" {
     Control.Exception.Base.mapException1_closure:
         const Control.Exception.Base.mapException1_info;
 },
 sat_s9PH3_entry() //  [R1]
         { info_tbl: [(c9QKt,
                       label: sat_s9PH3_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QKt: // global
           _s9PH3::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c9QKu; else goto c9QKv;
       c9QKv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QKx; else goto c9QKw;
       c9QKx: // global
           HpAlloc = 32;
           goto c9QKu;
       c9QKu: // global
           R1 = _s9PH3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9QKw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9PH3::P64;
           _s9PGY::P64 = P64[_s9PH3::P64 + 16];
           _s9PGZ::P64 = P64[_s9PH3::P64 + 24];
           _s9PH0::P64 = P64[_s9PH3::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s9PGY::P64;
           P64[Hp] = _s9PGZ::P64;
           R2 = _s9PH0::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Exception.toException_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Control.Exception.Base.mapException1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9QKy,
                       label: Control.Exception.Base.mapException1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QKy: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9QKC; else goto c9QKB;
       c9QKC: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.mapException1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QKB: // global
           I64[Hp - 32] = sat_s9PH3_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 32;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.17761839 UTC

[section ""data" . Control.Exception.Base.mapException_closure" {
     Control.Exception.Base.mapException_closure:
         const Control.Exception.Base.mapException_info;
 },
 sat_s9PHd_entry() //  [R1]
         { info_tbl: [(c9QL6,
                       label: sat_s9PHd_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QL6: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PHg_entry() //  [R1, R2]
         { info_tbl: [(c9QLd,
                       label: sat_s9PHg_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QLd: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c9QLe; else goto c9QLf;
       c9QLe: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QLf: // global
           I64[Sp - 32] = block_c9QKX_info;
           _s9PHb::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = _s9PHb::P64;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _s9PHb::P64;
           Sp = Sp - 48;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c9QKX() //  [R1]
         { info_tbl: [(c9QKX,
                       label: block_c9QKX_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QKX: // global
           if (R1 & 7 == 1) goto c9QLa; else goto c9QLb;
       c9QLa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QLi; else goto c9QLh;
       c9QLi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QLh: // global
           I64[Hp - 8] = sat_s9PHd_info;
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9QLb: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = Control.Exception.Base.mapException1_closure+4;
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PHa_entry() //  [R1]
         { info_tbl: [(c9QLr,
                       label: sat_s9PHa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QLr: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.mapException_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9QLw,
                       label: Control.Exception.Base.mapException_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QLw: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c9QLx; else goto c9QLy;
       c9QLx: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.mapException_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QLy: // global
           I64[Sp - 40] = block_c9QKQ_info;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9QKQ() //  []
         { info_tbl: [(c9QKQ,
                       label: block_c9QKQ_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QKQ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9QLB; else goto c9QLA;
       c9QLB: // global
           HpAlloc = 48;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c9QLA: // global
           I64[Hp - 40] = sat_s9PHg_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           I64[Hp - 8] = sat_s9PHa_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_c9QLu_info;
           R2 = Hp - 39;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QLu() //  [R1]
         { info_tbl: [(c9QLu,
                       label: block_c9QLu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QLu: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.193162453 UTC

[section ""data" . Control.Exception.Base.try1_closure" {
     Control.Exception.Base.try1_closure:
         const Control.Exception.Base.try1_info;
 },
 sat_s9PHy_entry() //  [R1, R2]
         { info_tbl: [(c9QMq,
                       label: sat_s9PHy_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QMq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9QMr; else goto c9QMs;
       c9QMr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QMs: // global
           I64[Sp - 16] = block_c9QMk_info;
           _s9PHt::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = _s9PHt::P64;
           P64[Sp - 8] = _s9PHt::P64;
           Sp = Sp - 32;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c9QMk() //  [R1]
         { info_tbl: [(c9QMk,
                       label: block_c9QMk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QMk: // global
           if (R1 & 7 == 1) goto c9QMn; else goto c9QMo;
       c9QMn: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c9QMo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QMB; else goto c9QMA;
       c9QMB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QMA: // global
           _s9PHw::P64 = P64[R1 + 6];
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = _s9PHw::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PHs_entry() //  [R1]
         { info_tbl: [(c9QMK,
                       label: sat_s9PHs_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QMK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9QML; else goto c9QMM;
       c9QML: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9QMM: // global
           I64[Sp - 8] = block_c9QMH_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QMH() //  [R1]
         { info_tbl: [(c9QMH,
                       label: block_c9QMH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QMH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QMP; else goto c9QMO;
       c9QMP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QMO: // global
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.try1_entry() //  [R2, R3]
         { info_tbl: [(c9QMQ,
                       label: Control.Exception.Base.try1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QMQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QMU; else goto c9QMT;
       c9QMU: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.try1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QMT: // global
           I64[Hp - 24] = sat_s9PHy_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s9PHs_info;
           P64[Hp] = R3;
           R2 = Hp - 22;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.204325229 UTC

[section ""data" . Control.Exception.Base.try_closure" {
     Control.Exception.Base.try_closure:
         const Control.Exception.Base.try_info;
 },
 Control.Exception.Base.try_entry() //  [R2, R3]
         { info_tbl: [(c9QNl,
                       label: Control.Exception.Base.try_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QNl: // global
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.try1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.208051448 UTC

[section ""data" . Control.Exception.Base.tryJust1_closure" {
     Control.Exception.Base.tryJust1_closure:
         const Control.Exception.Base.tryJust1_info;
 },
 Control.Exception.Base.tryJust1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9QNF,
                       label: Control.Exception.Base.tryJust1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QNF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9QNG; else goto c9QNH;
       c9QNG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.tryJust1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QNH: // global
           I64[Sp - 24] = block_c9QNw_info;
           _s9PHA::P64 = R3;
           R3 = R4;
           _s9PHz::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s9PHz::P64;
           P64[Sp - 8] = _s9PHA::P64;
           Sp = Sp - 24;
           call Control.Exception.Base.try1_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9QNw() //  [R1]
         { info_tbl: [(c9QNw,
                       label: block_c9QNw_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QNw: // global
           I64[Sp - 8] = block_c9QNy_info;
           _s9PHF::P64 = R1;
           R1 = R1;
           P64[Sp] = _s9PHF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9QO4; else goto c9QNz;
       u9QO4: // global
           call _c9QNy(R1) args: 0, res: 0, upd: 0;
       c9QNz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QNy() //  [R1]
         { info_tbl: [(c9QNy,
                       label: block_c9QNy_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QNy: // global
           if (R1 & 7 == 1) goto c9QNC; else goto c9QND;
       c9QNC: // global
           I64[Sp + 8] = block_c9QNL_info;
           _s9PHH::P64 = P64[R1 + 7];
           R2 = _s9PHH::P64;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s9PHH::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c9QND: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9QNL() //  [R1]
         { info_tbl: [(c9QNL,
                       label: block_c9QNL_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QNL: // global
           if (R1 & 7 == 1) goto c9QNS; else goto c9QNW;
       c9QNS: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.throwIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9QNW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QNZ; else goto c9QNY;
       c9QNZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QNY: // global
           _s9PHJ::P64 = P64[R1 + 6];
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = _s9PHJ::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.219128265 UTC

[section ""data" . Control.Exception.Base.tryJust_closure" {
     Control.Exception.Base.tryJust_closure:
         const Control.Exception.Base.tryJust_info;
 },
 Control.Exception.Base.tryJust_entry() //  [R2, R3, R4]
         { info_tbl: [(c9QOu,
                       label: Control.Exception.Base.tryJust_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QOu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.tryJust1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.223033072 UTC

[section ""data" . Control.Exception.Base.onException1_closure" {
     Control.Exception.Base.onException1_closure:
         const Control.Exception.Base.onException1_info;
 },
 sat_s9PHV_entry() //  [R1, R2]
         { info_tbl: [(c9QOM,
                       label: sat_s9PHV_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QOM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QON; else goto c9QOO;
       c9QON: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QOO: // global
           I64[Sp - 16] = block_c9QOK_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QOK() //  []
         { info_tbl: [(c9QOK,
                       label: block_c9QOK_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QOK: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.onException1_entry() //  [R2, R3]
         { info_tbl: [(c9QOQ,
                       label: Control.Exception.Base.onException1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QOQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9QOU; else goto c9QOT;
       c9QOU: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.onException1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QOT: // global
           I64[Hp - 8] = sat_s9PHV_info;
           P64[Hp] = R3;
           _s9PHN::P64 = R2;
           R2 = Hp - 6;
           R1 = _s9PHN::P64;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.229910909 UTC

[section ""data" . Control.Exception.Base.onException_closure" {
     Control.Exception.Base.onException_closure:
         const Control.Exception.Base.onException_info;
 },
 Control.Exception.Base.onException_entry() //  [R2, R3]
         { info_tbl: [(c9QPa,
                       label: Control.Exception.Base.onException_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QPa: // global
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.onException1_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.235312789 UTC

[section ""data" . Control.Exception.Base.bracket1_closure" {
     Control.Exception.Base.bracket1_closure:
         const Control.Exception.Base.bracket1_info;
 },
 sat_s9PIe_entry() //  [R1, R2]
         { info_tbl: [(c9QPy,
                       label: sat_s9PIe_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QPy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QPz; else goto c9QPA;
       c9QPz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QPA: // global
           I64[Sp - 16] = block_c9QPw_info;
           _s9PI9::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PI9::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QPw() //  []
         { info_tbl: [(c9QPw,
                       label: block_c9QPw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QPw: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PI8_entry() //  [R1]
         { info_tbl: [(c9QPI,
                       label: sat_s9PI8_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QPI: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PIw_entry() //  [R1, R2]
         { info_tbl: [(c9QQ0,
                       label: sat_s9PIw_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QQ0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QQ1; else goto c9QQ2;
       c9QQ1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QQ2: // global
           I64[Sp - 16] = block_c9QPY_info;
           _s9PIr::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PIr::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QPY() //  []
         { info_tbl: [(c9QPY,
                       label: block_c9QPY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QPY: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PIq_entry() //  [R1]
         { info_tbl: [(c9QQa,
                       label: sat_s9PIq_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QQa: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PID_entry() //  [R1]
         { info_tbl: [(c9QQh,
                       label: sat_s9PID_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QQh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9QQi; else goto c9QQj;
       c9QQi: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9QQj: // global
           I64[Sp - 24] = block_c9QPR_info;
           _s9PHX::P64 = P64[R1 + 15];
           _s9PHY::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9PHX::P64;
           P64[Sp - 8] = _s9PHY::P64;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QPR() //  [R1]
         { info_tbl: [(c9QPR,
                       label: block_c9QPR_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QPR: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9QQm; else goto c9QQl;
       c9QQm: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QQl: // global
           I64[Hp - 64] = sat_s9PIw_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PIq_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9QQd_info;
           R2 = Hp - 62;
           _s9PIo::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9PIo::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QQd() //  [R1]
         { info_tbl: [(c9QQd,
                       label: block_c9QQd_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QQd: // global
           _s9PHX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9QQf_info;
           R2 = P64[Sp + 16];
           _s9PIz::P64 = R1;
           R1 = _s9PHX::P64;
           P64[Sp + 16] = _s9PIz::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QQf() //  []
         { info_tbl: [(c9QQf,
                       label: block_c9QQf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QQf: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PIO_entry() //  [R1, R2]
         { info_tbl: [(c9QQz,
                       label: sat_s9PIO_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QQz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QQA; else goto c9QQB;
       c9QQA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QQB: // global
           I64[Sp - 16] = block_c9QQx_info;
           _s9PIJ::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PIJ::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QQx() //  []
         { info_tbl: [(c9QQx,
                       label: block_c9QQx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QQx: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PII_entry() //  [R1]
         { info_tbl: [(c9QQJ,
                       label: sat_s9PII_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QQJ: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.bracket1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9QQQ,
                       label: Control.Exception.Base.bracket1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QQQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9QQR; else goto c9QQS;
       c9QQR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.bracket1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QQS: // global
           I64[Sp - 32] = block_c9QPl_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 _c9QPl() //  [R1]
         { info_tbl: [(c9QPl,
                       label: block_c9QPl_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QPl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QQV; else goto c9QQU;
       c9QQV: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9QQU: // global
           _s9PHW::P64 = P64[Sp + 8];
           if (R1 == 0) goto c9QQO; else goto u9QRe;
       c9QQO: // global
           I64[Hp - 24] = sat_s9PID_info;
           P64[Hp - 16] = _s9PHW::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9QRe: // global
           if (R1 == 1) goto c9QQP; else goto c9QQN;
       c9QQP: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9QQq_info;
           R1 = _s9PHW::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c9QQN: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9QPp_info;
           R1 = _s9PHW::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QQq() //  [R1]
         { info_tbl: [(c9QQq,
                       label: block_c9QQq_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QQq: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9QRa; else goto c9QR9;
       c9QRa: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QR9: // global
           I64[Hp - 64] = sat_s9PIO_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PII_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9QR5_info;
           R2 = Hp - 62;
           _s9PIG::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9PIG::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QR5() //  [R1]
         { info_tbl: [(c9QR5,
                       label: block_c9QR5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QR5: // global
           _s9PHX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9QR7_info;
           R2 = P64[Sp + 16];
           _s9PIR::P64 = R1;
           R1 = _s9PHX::P64;
           P64[Sp + 16] = _s9PIR::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QR7() //  []
         { info_tbl: [(c9QR7,
                       label: block_c9QR7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QR7: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9QPp() //  [R1]
         { info_tbl: [(c9QPp,
                       label: block_c9QPp_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QPp: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9QR1; else goto c9QR0;
       c9QR1: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QR0: // global
           I64[Hp - 64] = sat_s9PIe_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PI8_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9QQW_info;
           R2 = Hp - 62;
           _s9PI6::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9PI6::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QQW() //  [R1]
         { info_tbl: [(c9QQW,
                       label: block_c9QQW_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QQW: // global
           _s9PHX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9QQY_info;
           R2 = P64[Sp + 16];
           _s9PIh::P64 = R1;
           R1 = _s9PHX::P64;
           P64[Sp + 16] = _s9PIh::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QQY() //  []
         { info_tbl: [(c9QQY,
                       label: block_c9QQY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QQY: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.274116211 UTC

[section ""data" . Control.Exception.Base.bracket_closure" {
     Control.Exception.Base.bracket_closure:
         const Control.Exception.Base.bracket_info;
 },
 Control.Exception.Base.bracket_entry() //  [R2, R3, R4]
         { info_tbl: [(c9QSE,
                       label: Control.Exception.Base.bracket_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QSE: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.bracket1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.277895903 UTC

[section ""data" . Control.Exception.Base.bracket_1_closure" {
     Control.Exception.Base.bracket_1_closure:
         const Control.Exception.Base.bracket_1_info;
 },
 sat_s9PJ2_entry() //  [R1]
         { info_tbl: [(c9QSU,
                       label: sat_s9PJ2_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QSU: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJ0_entry() //  [R1]
         { info_tbl: [(c9QT2,
                       label: sat_s9PJ0_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QT2: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.bracket_1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9QT5,
                       label: Control.Exception.Base.bracket_1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QT5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QT9; else goto c9QT8;
       c9QT9: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.bracket_1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QT8: // global
           I64[Hp - 24] = sat_s9PJ2_info;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s9PJ0_info;
           P64[Hp] = R3;
           R4 = Hp - 23;
           R3 = Hp - 7;
           R2 = R2;
           call Control.Exception.Base.bracket1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.284986384 UTC

[section ""data" . Control.Exception.Base.bracket__closure" {
     Control.Exception.Base.bracket__closure:
         const Control.Exception.Base.bracket__info;
 },
 Control.Exception.Base.bracket__entry() //  [R2, R3, R4]
         { info_tbl: [(c9QTo,
                       label: Control.Exception.Base.bracket__info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QTo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.bracket_1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.290313857 UTC

[section ""data" . Control.Exception.Base.finally1_closure" {
     Control.Exception.Base.finally1_closure:
         const Control.Exception.Base.finally1_info;
 },
 sat_s9PJg_entry() //  [R1, R2]
         { info_tbl: [(c9QTK,
                       label: sat_s9PJg_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QTK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QTL; else goto c9QTM;
       c9QTL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QTM: // global
           I64[Sp - 16] = block_c9QTI_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QTI() //  []
         { info_tbl: [(c9QTI,
                       label: block_c9QTI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QTI: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJa_entry() //  [R1]
         { info_tbl: [(c9QTT,
                       label: sat_s9PJa_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QTT: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJu_entry() //  [R1, R2]
         { info_tbl: [(c9QU9,
                       label: sat_s9PJu_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QU9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QUa; else goto c9QUb;
       c9QUa: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QUb: // global
           I64[Sp - 16] = block_c9QU7_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QU7() //  []
         { info_tbl: [(c9QU7,
                       label: block_c9QU7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QU7: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJo_entry() //  [R1]
         { info_tbl: [(c9QUi,
                       label: sat_s9PJo_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QUi: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJB_entry() //  [R1]
         { info_tbl: [(c9QUp,
                       label: sat_s9PJB_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QUp: // global
           _s9PJB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9QUq; else goto c9QUr;
       c9QUr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QUt; else goto c9QUs;
       c9QUt: // global
           HpAlloc = 32;
           goto c9QUq;
       c9QUq: // global
           R1 = _s9PJB::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9QUs: // global
           _s9PJ3::P64 = P64[_s9PJB::P64 + 7];
           _s9PJ4::P64 = P64[_s9PJB::P64 + 15];
           I64[Hp - 24] = sat_s9PJu_info;
           P64[Hp - 16] = _s9PJ4::P64;
           I64[Hp - 8] = sat_s9PJo_info;
           P64[Hp] = _s9PJ3::P64;
           I64[Sp - 16] = block_c9QUl_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           P64[Sp - 8] = _s9PJ4::P64;
           Sp = Sp - 16;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QUl() //  [R1]
         { info_tbl: [(c9QUl,
                       label: block_c9QUl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QUl: // global
           I64[Sp] = block_c9QUn_info;
           _s9PJx::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9PJx::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QUn() //  []
         { info_tbl: [(c9QUn,
                       label: block_c9QUn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QUn: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJI_entry() //  [R1, R2]
         { info_tbl: [(c9QUE,
                       label: sat_s9PJI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QUE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QUF; else goto c9QUG;
       c9QUF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QUG: // global
           I64[Sp - 16] = block_c9QUC_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QUC() //  []
         { info_tbl: [(c9QUC,
                       label: block_c9QUC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QUC: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PJC_entry() //  [R1]
         { info_tbl: [(c9QUN,
                       label: sat_s9PJC_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QUN: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.finally1_entry() //  [R2, R3]
         { info_tbl: [(c9QUU,
                       label: Control.Exception.Base.finally1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QUU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9QUV; else goto c9QUW;
       c9QUV: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.finally1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QUW: // global
           I64[Sp - 24] = block_c9QTz_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 _c9QTz() //  [R1]
         { info_tbl: [(c9QTz,
                       label: block_c9QTz_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QTz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QUZ; else goto c9QUY;
       c9QUZ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9QUY: // global
           _s9PJ3::P64 = P64[Sp + 8];
           _s9PJ4::P64 = P64[Sp + 16];
           if (R1 == 0) goto c9QUS; else goto u9QVc;
       c9QUS: // global
           I64[Hp - 24] = sat_s9PJB_info;
           P64[Hp - 16] = _s9PJ3::P64;
           P64[Hp - 8] = _s9PJ4::P64;
           _c9QTX::P64 = Hp - 23;
           Hp = Hp - 8;
           R1 = _c9QTX::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9QVc: // global
           if (R1 == 1) goto c9QUT; else goto c9QUR;
       c9QUT: // global
           I64[Hp - 24] = sat_s9PJI_info;
           P64[Hp - 16] = _s9PJ4::P64;
           I64[Hp - 8] = sat_s9PJC_info;
           P64[Hp] = _s9PJ3::P64;
           I64[Sp + 8] = block_c9QV6_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
       c9QUR: // global
           I64[Hp - 24] = sat_s9PJg_info;
           P64[Hp - 16] = _s9PJ4::P64;
           I64[Hp - 8] = sat_s9PJa_info;
           P64[Hp] = _s9PJ3::P64;
           I64[Sp + 8] = block_c9QV0_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QV6() //  [R1]
         { info_tbl: [(c9QV6,
                       label: block_c9QV6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QV6: // global
           I64[Sp] = block_c9QV8_info;
           _s9PJL::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9PJL::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QV8() //  []
         { info_tbl: [(c9QV8,
                       label: block_c9QV8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QV8: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9QV0() //  [R1]
         { info_tbl: [(c9QV0,
                       label: block_c9QV0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QV0: // global
           I64[Sp] = block_c9QV2_info;
           _s9PJj::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9PJj::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QV2() //  []
         { info_tbl: [(c9QV2,
                       label: block_c9QV2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QV2: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.321972385 UTC

[section ""data" . Control.Exception.Base.finally_closure" {
     Control.Exception.Base.finally_closure:
         const Control.Exception.Base.finally_info;
 },
 Control.Exception.Base.finally_entry() //  [R2, R3]
         { info_tbl: [(c9QWi,
                       label: Control.Exception.Base.finally_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QWi: // global
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.finally1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.32799694 UTC

[section ""data" . Control.Exception.Base.bracketOnError1_closure" {
     Control.Exception.Base.bracketOnError1_closure:
         const Control.Exception.Base.bracketOnError1_info;
 },
 sat_s9PK7_entry() //  [R1, R2]
         { info_tbl: [(c9QWG,
                       label: sat_s9PK7_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QWG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QWH; else goto c9QWI;
       c9QWH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QWI: // global
           I64[Sp - 16] = block_c9QWE_info;
           _s9PK2::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PK2::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QWE() //  []
         { info_tbl: [(c9QWE,
                       label: block_c9QWE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QWE: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PK1_entry() //  [R1]
         { info_tbl: [(c9QWQ,
                       label: sat_s9PK1_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QWQ: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PKj_entry() //  [R1, R2]
         { info_tbl: [(c9QX8,
                       label: sat_s9PKj_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QX8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QX9; else goto c9QXa;
       c9QX9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QXa: // global
           I64[Sp - 16] = block_c9QX6_info;
           _s9PKe::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PKe::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QX6() //  []
         { info_tbl: [(c9QX6,
                       label: block_c9QX6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QX6: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PKd_entry() //  [R1]
         { info_tbl: [(c9QXi,
                       label: sat_s9PKd_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QXi: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PKk_entry() //  [R1]
         { info_tbl: [(c9QXl,
                       label: sat_s9PKk_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QXl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9QXm; else goto c9QXn;
       c9QXm: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9QXn: // global
           I64[Sp - 24] = block_c9QWZ_info;
           _s9PJQ::P64 = P64[R1 + 15];
           _s9PJR::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9PJQ::P64;
           P64[Sp - 8] = _s9PJR::P64;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QWZ() //  [R1]
         { info_tbl: [(c9QWZ,
                       label: block_c9QWZ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QWZ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9QXq; else goto c9QXp;
       c9QXq: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QXp: // global
           I64[Hp - 64] = sat_s9PKj_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PKd_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 62;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PKv_entry() //  [R1, R2]
         { info_tbl: [(c9QXB,
                       label: sat_s9PKv_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QXB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QXC; else goto c9QXD;
       c9QXC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QXD: // global
           I64[Sp - 16] = block_c9QXz_info;
           _s9PKq::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9PKq::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QXz() //  []
         { info_tbl: [(c9QXz,
                       label: block_c9QXz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QXz: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9PKp_entry() //  [R1]
         { info_tbl: [(c9QXL,
                       label: sat_s9PKp_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QXL: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.bracketOnError1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9QXS,
                       label: Control.Exception.Base.bracketOnError1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QXS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9QXT; else goto c9QXU;
       c9QXT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.bracketOnError1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9QXU: // global
           I64[Sp - 32] = block_c9QWt_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 _c9QWt() //  [R1]
         { info_tbl: [(c9QWt,
                       label: block_c9QWt_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QWt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9QXX; else goto c9QXW;
       c9QXX: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9QXW: // global
           _s9PJP::P64 = P64[Sp + 8];
           if (R1 == 0) goto c9QXQ; else goto u9QY4;
       c9QXQ: // global
           I64[Hp - 24] = sat_s9PKk_info;
           P64[Hp - 16] = _s9PJP::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9QY4: // global
           if (R1 == 1) goto c9QXR; else goto c9QXP;
       c9QXR: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9QXs_info;
           R1 = _s9PJP::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c9QXP: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9QWx_info;
           R1 = _s9PJP::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9QXs() //  [R1]
         { info_tbl: [(c9QXs,
                       label: block_c9QXs_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QXs: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9QY3; else goto c9QY2;
       c9QY3: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QY2: // global
           I64[Hp - 64] = sat_s9PKv_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PKp_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 62;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9QWx() //  [R1]
         { info_tbl: [(c9QWx,
                       label: block_c9QWx_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QWx: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9QY0; else goto c9QXZ;
       c9QY0: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9QXZ: // global
           I64[Hp - 64] = sat_s9PK7_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9PK1_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 62;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.356326088 UTC

[section ""data" . Control.Exception.Base.bracketOnError_closure" {
     Control.Exception.Base.bracketOnError_closure:
         const Control.Exception.Base.bracketOnError_info;
 },
 Control.Exception.Base.bracketOnError_entry() //  [R2, R3, R4]
         { info_tbl: [(c9QZ9,
                       label: Control.Exception.Base.bracketOnError_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QZ9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.bracketOnError1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.359801647 UTC

[section ""data" . Control.Exception.Base.runtimeError_closure" {
     Control.Exception.Base.runtimeError_closure:
         const Control.Exception.Base.runtimeError_info;
         const 0;
 },
 Control.Exception.Base.runtimeError_entry() //  [R2]
         { info_tbl: [(c9QZm,
                       label: Control.Exception.Base.runtimeError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QZm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9QZn; else goto c9QZo;
       c9QZn: // global
           R2 = R2;
           R1 = Control.Exception.Base.runtimeError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QZo: // global
           I64[Sp - 8] = block_c9QZk_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9QZk() //  [R1]
         { info_tbl: [(c9QZk,
                       label: block_c9QZk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QZk: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.36734928 UTC

[section ""cstring" . lvl_r9PFt_bytes" {
     lvl_r9PFt_bytes:
         I8[] [79,111,112,115,33,32,32,69,110,116,101,114,101,100,32,97,98,115,101,110,116,32,97,114,103,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.370324661 UTC

[section ""data" . Control.Exception.Base.absentError_closure" {
     Control.Exception.Base.absentError_closure:
         const Control.Exception.Base.absentError_info;
         const 0;
 },
 sat_s9PKz_entry() //  [R1]
         { info_tbl: [(c9QZJ,
                       label: sat_s9PKz_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QZJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9QZK; else goto c9QZL;
       c9QZK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9QZL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Control.Exception.Base.absentError_entry() //  [R2]
         { info_tbl: [(c9QZO,
                       label: Control.Exception.Base.absentError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QZO: // global
           _s9PKy::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9QZP; else goto c9QZQ;
       c9QZQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9QZS; else goto c9QZR;
       c9QZS: // global
           HpAlloc = 24;
           goto c9QZP;
       c9QZP: // global
           R2 = _s9PKy::I64;
           R1 = Control.Exception.Base.absentError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9QZR: // global
           I64[Hp - 16] = sat_s9PKz_info;
           I64[Hp] = _s9PKy::I64;
           I64[Sp - 8] = block_c9QZM_info;
           R3 = Hp - 16;
           R2 = lvl_r9PFt_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9QZM() //  [R1]
         { info_tbl: [(c9QZM,
                       label: block_c9QZM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9QZM: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.381920635 UTC

[section ""cstring" . Control.Exception.Base.$trModule4_bytes" {
     Control.Exception.Base.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.384529118 UTC

[section ""data" . Control.Exception.Base.$trModule3_closure" {
     Control.Exception.Base.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.386928586 UTC

[section ""cstring" . Control.Exception.Base.$trModule2_bytes" {
     Control.Exception.Base.$trModule2_bytes:
         I8[] [67,111,110,116,114,111,108,46,69,120,99,101,112,116,105,111,110,46,66,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.389047677 UTC

[section ""data" . Control.Exception.Base.$trModule1_closure" {
     Control.Exception.Base.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.390730527 UTC

[section ""data" . Control.Exception.Base.$trModule_closure" {
     Control.Exception.Base.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Control.Exception.Base.$trModule3_closure+1;
         const Control.Exception.Base.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.392415744 UTC

[section ""data" . $krep_r9PFu_closure" {
     $krep_r9PFu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.394312701 UTC

[section ""data" . $krep1_r9PFv_closure" {
     $krep1_r9PFv_closure:
         const :_con_info;
         const $krep_r9PFu_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.396017541 UTC

[section ""data" . $krep2_r9PFw_closure" {
     $krep2_r9PFw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_r9PFv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.39769558 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionPatternMatchFail4_bytes" {
     Control.Exception.Base.$fExceptionPatternMatchFail4_bytes:
         I8[] [80,97,116,116,101,114,110,77,97,116,99,104,70,97,105,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.399825967 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail3_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionPatternMatchFail4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.401520164 UTC

[section ""data" . Control.Exception.Base.$tcPatternMatchFail_closure" {
     Control.Exception.Base.$tcPatternMatchFail_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail3_closure+1;
         const GHC.Types.krep$*_closure;
         const 15470147969565509342;
         const 8416277433045206230;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.403383732 UTC

[section ""data" . $krep3_r9PFx_closure" {
     $krep3_r9PFx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcPatternMatchFail_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.405044012 UTC

[section ""data" . Control.Exception.Base.$tc'PatternMatchFail1_closure" {
     Control.Exception.Base.$tc'PatternMatchFail1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep3_r9PFx_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.40680687 UTC

[section ""cstring" . Control.Exception.Base.$tc'PatternMatchFail3_bytes" {
     Control.Exception.Base.$tc'PatternMatchFail3_bytes:
         I8[] [39,80,97,116,116,101,114,110,77,97,116,99,104,70,97,105,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.408387511 UTC

[section ""data" . Control.Exception.Base.$tc'PatternMatchFail2_closure" {
     Control.Exception.Base.$tc'PatternMatchFail2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'PatternMatchFail3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.410075569 UTC

[section ""data" . Control.Exception.Base.$tc'PatternMatchFail_closure" {
     Control.Exception.Base.$tc'PatternMatchFail_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'PatternMatchFail2_closure+1;
         const Control.Exception.Base.$tc'PatternMatchFail1_closure+4;
         const 5659337934556330582;
         const 79463786797963870;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.412505024 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail2_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail2_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail2_entry() //  [R1]
         { info_tbl: [(c9R0z,
                       label: Control.Exception.Base.$fExceptionPatternMatchFail2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R0z: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9R0A; else goto c9R0B;
       c9R0A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9R0B: // global
           (_c9R0r::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9R0r::I64 == 0) goto c9R0t; else goto c9R0s;
       c9R0t: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9R0s: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9R0r::I64;
           I64[Sp - 24] = block_c9R0u_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionPatternMatchFail3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 8416277433045206230;
           R2 = 15470147969565509342;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9R0u() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9R0u,
                       label: block_c9R0u_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R0u: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9R0v() args: 0, res: 0, upd: 0;
     }
 },
 _c9R0v() //  []
         { info_tbl: [(c9R0v,
                       label: block_c9R0v_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R0v: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9R0E; else goto c9R0D;
       c9R0E: // global
           HpAlloc = 48;
           I64[Sp] = block_c9R0v_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9R0D: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.421789433 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_entry() //  [R2]
         { info_tbl: [(c9R17,
                       label: Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R17: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9R1b; else goto c9R1c;
       c9R1b: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R1c: // global
           I64[Sp - 8] = block_c9R14_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9R1x; else goto c9R15;
       u9R1x: // global
           call _c9R14(R1) args: 0, res: 0, upd: 0;
       c9R15: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9R14() //  [R1]
         { info_tbl: [(c9R14,
                       label: block_c9R14_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R14: // global
           I64[Sp - 8] = block_c9R1a_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9R1a() //  [R1]
         { info_tbl: [(c9R1a,
                       label: block_c9R1a_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R1a: // global
           I64[Sp] = block_c9R1h_info;
           R3 = Control.Exception.Base.$fExceptionPatternMatchFail2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9R1h() //  [R1]
         { info_tbl: [(c9R1h,
                       label: block_c9R1h_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R1h: // global
           if (R1 & 7 == 1) goto c9R1o; else goto c9R1s;
       c9R1o: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9R1s: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9R1v; else goto c9R1u;
       c9R1v: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9R1u: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.430634486 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionPatternMatchFail2_closure;
         const Control.Exception.Base.$fShowPatternMatchFail_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_entry() //  [R2]
         { info_tbl: [(c9R1Y,
                       label: Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R1Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9R22; else goto c9R21;
       c9R22: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R21: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionPatternMatchFail_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.435747544 UTC

[section ""cstring" . lvl1_r9PFy_bytes" {
     lvl1_r9PFy_bytes:
         I8[] [78,111,110,45,101,120,104,97,117,115,116,105,118,101,32,112,97,116,116,101,114,110,115,32,105,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.437664935 UTC

[section ""data" . lvl2_r9PFz_closure" {
     lvl2_r9PFz_closure:
         const lvl2_r9PFz_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r9PFz_entry() //  [R1]
         { info_tbl: [(c9R2g,
                       label: lvl2_r9PFz_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R2g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9R2h; else goto c9R2i;
       c9R2h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9R2i: // global
           (_c9R2d::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9R2d::I64 == 0) goto c9R2f; else goto c9R2e;
       c9R2f: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9R2e: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9R2d::I64;
           R2 = lvl1_r9PFy_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.441617295 UTC

[section ""data" . Control.Exception.Base.patError_closure" {
     Control.Exception.Base.patError_closure:
         const Control.Exception.Base.patError_info;
         const 0;
 },
 Control.Exception.Base.patError_entry() //  [R2]
         { info_tbl: [(c9R2w,
                       label: Control.Exception.Base.patError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R2w: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9R2x; else goto c9R2y;
       c9R2x: // global
           R2 = R2;
           R1 = Control.Exception.Base.patError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R2y: // global
           I64[Sp - 8] = block_c9R2u_info;
           R3 = lvl2_r9PFz_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9R2u() //  [R1]
         { info_tbl: [(c9R2u,
                       label: block_c9R2u_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R2u: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionPatternMatchFail_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.446513901 UTC

[section ""cstring" . lvl3_r9PFA_bytes" {
     lvl3_r9PFA_bytes:
         I8[] [78,111,110,45,101,120,104,97,117,115,116,105,118,101,32,103,117,97,114,100,115,32,105,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.448364378 UTC

[section ""data" . lvl4_r9PFB_closure" {
     lvl4_r9PFB_closure:
         const lvl4_r9PFB_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r9PFB_entry() //  [R1]
         { info_tbl: [(c9R2R,
                       label: lvl4_r9PFB_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R2R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9R2S; else goto c9R2T;
       c9R2S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9R2T: // global
           (_c9R2O::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9R2O::I64 == 0) goto c9R2Q; else goto c9R2P;
       c9R2Q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9R2P: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9R2O::I64;
           R2 = lvl3_r9PFA_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.452602661 UTC

[section ""data" . Control.Exception.Base.nonExhaustiveGuardsError_closure" {
     Control.Exception.Base.nonExhaustiveGuardsError_closure:
         const Control.Exception.Base.nonExhaustiveGuardsError_info;
         const 0;
 },
 Control.Exception.Base.nonExhaustiveGuardsError_entry() //  [R2]
         { info_tbl: [(c9R37,
                       label: Control.Exception.Base.nonExhaustiveGuardsError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R37: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9R38; else goto c9R39;
       c9R38: // global
           R2 = R2;
           R1 = Control.Exception.Base.nonExhaustiveGuardsError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R39: // global
           I64[Sp - 8] = block_c9R35_info;
           R3 = lvl4_r9PFB_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9R35() //  [R1]
         { info_tbl: [(c9R35,
                       label: block_c9R35_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R35: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionPatternMatchFail_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.457670883 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionRecSelError4_bytes" {
     Control.Exception.Base.$fExceptionRecSelError4_bytes:
         I8[] [82,101,99,83,101,108,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.459318285 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError3_closure" {
     Control.Exception.Base.$fExceptionRecSelError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionRecSelError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.461047805 UTC

[section ""data" . Control.Exception.Base.$tcRecSelError_closure" {
     Control.Exception.Base.$tcRecSelError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 10415770337441550020;
         const 15768375346093691416;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.463878835 UTC

[section ""data" . $krep4_r9PFC_closure" {
     $krep4_r9PFC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcRecSelError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.465669104 UTC

[section ""data" . Control.Exception.Base.$tc'RecSelError1_closure" {
     Control.Exception.Base.$tc'RecSelError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep4_r9PFC_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.467343389 UTC

[section ""cstring" . Control.Exception.Base.$tc'RecSelError3_bytes" {
     Control.Exception.Base.$tc'RecSelError3_bytes:
         I8[] [39,82,101,99,83,101,108,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.468951075 UTC

[section ""data" . Control.Exception.Base.$tc'RecSelError2_closure" {
     Control.Exception.Base.$tc'RecSelError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'RecSelError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.47064729 UTC

[section ""data" . Control.Exception.Base.$tc'RecSelError_closure" {
     Control.Exception.Base.$tc'RecSelError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'RecSelError2_closure+1;
         const Control.Exception.Base.$tc'RecSelError1_closure+4;
         const 5471381485413442404;
         const 14158408912397908002;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.472987789 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError2_closure" {
     Control.Exception.Base.$fExceptionRecSelError2_closure:
         const Control.Exception.Base.$fExceptionRecSelError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecSelError2_entry() //  [R1]
         { info_tbl: [(c9R3E,
                       label: Control.Exception.Base.$fExceptionRecSelError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R3E: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9R3F; else goto c9R3G;
       c9R3F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9R3G: // global
           (_c9R3w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9R3w::I64 == 0) goto c9R3y; else goto c9R3x;
       c9R3y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9R3x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9R3w::I64;
           I64[Sp - 24] = block_c9R3z_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionRecSelError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 15768375346093691416;
           R2 = 10415770337441550020;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9R3z() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9R3z,
                       label: block_c9R3z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R3z: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9R3A() args: 0, res: 0, upd: 0;
     }
 },
 _c9R3A() //  []
         { info_tbl: [(c9R3A,
                       label: block_c9R3A_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R3A: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9R3J; else goto c9R3I;
       c9R3J: // global
           HpAlloc = 48;
           I64[Sp] = block_c9R3A_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9R3I: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.481597864 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecSelError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9R4c,
                       label: Control.Exception.Base.$fExceptionRecSelError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R4c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9R4g; else goto c9R4h;
       c9R4g: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R4h: // global
           I64[Sp - 8] = block_c9R49_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9R4C; else goto c9R4a;
       u9R4C: // global
           call _c9R49(R1) args: 0, res: 0, upd: 0;
       c9R4a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9R49() //  [R1]
         { info_tbl: [(c9R49,
                       label: block_c9R49_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R49: // global
           I64[Sp - 8] = block_c9R4f_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9R4f() //  [R1]
         { info_tbl: [(c9R4f,
                       label: block_c9R4f_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R4f: // global
           I64[Sp] = block_c9R4m_info;
           R3 = Control.Exception.Base.$fExceptionRecSelError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9R4m() //  [R1]
         { info_tbl: [(c9R4m,
                       label: block_c9R4m_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R4m: // global
           if (R1 & 7 == 1) goto c9R4t; else goto c9R4x;
       c9R4t: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9R4x: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9R4A; else goto c9R4z;
       c9R4A: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9R4z: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.491390118 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError_closure" {
     Control.Exception.Base.$fExceptionRecSelError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionRecSelError2_closure;
         const Control.Exception.Base.$fShowRecSelError_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecSelError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9R53,
                       label: Control.Exception.Base.$fExceptionRecSelError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R53: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9R57; else goto c9R56;
       c9R57: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R56: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionRecSelError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.495810936 UTC

[section ""cstring" . lvl5_r9PFD_bytes" {
     lvl5_r9PFD_bytes:
         I8[] [78,111,32,109,97,116,99,104,32,105,110,32,114,101,99,111,114,100,32,115,101,108,101,99,116,111,114,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.49862029 UTC

[section ""data" . Control.Exception.Base.recSelError_closure" {
     Control.Exception.Base.recSelError_closure:
         const Control.Exception.Base.recSelError_info;
         const 0;
 },
 sat_s9PL4_entry() //  [R1]
         { info_tbl: [(c9R5n,
                       label: sat_s9PL4_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R5n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9R5o; else goto c9R5p;
       c9R5o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9R5p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Control.Exception.Base.recSelError_entry() //  [R2]
         { info_tbl: [(c9R5s,
                       label: Control.Exception.Base.recSelError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R5s: // global
           _s9PL3::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9R5t; else goto c9R5u;
       c9R5u: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9R5w; else goto c9R5v;
       c9R5w: // global
           HpAlloc = 24;
           goto c9R5t;
       c9R5t: // global
           R2 = _s9PL3::I64;
           R1 = Control.Exception.Base.recSelError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R5v: // global
           I64[Hp - 16] = sat_s9PL4_info;
           I64[Hp] = _s9PL3::I64;
           I64[Sp - 8] = block_c9R5q_info;
           R3 = Hp - 16;
           R2 = lvl5_r9PFD_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9R5q() //  [R1]
         { info_tbl: [(c9R5q,
                       label: block_c9R5q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R5q: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionRecSelError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.505524925 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionRecConError4_bytes" {
     Control.Exception.Base.$fExceptionRecConError4_bytes:
         I8[] [82,101,99,67,111,110,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.507085743 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError3_closure" {
     Control.Exception.Base.$fExceptionRecConError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionRecConError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.508824414 UTC

[section ""data" . Control.Exception.Base.$tcRecConError_closure" {
     Control.Exception.Base.$tcRecConError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionRecConError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 12352028005606494596;
         const 6364281046760374976;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.511006925 UTC

[section ""data" . $krep5_r9PFE_closure" {
     $krep5_r9PFE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcRecConError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.512672639 UTC

[section ""data" . Control.Exception.Base.$tc'RecConError1_closure" {
     Control.Exception.Base.$tc'RecConError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep5_r9PFE_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.514402349 UTC

[section ""cstring" . Control.Exception.Base.$tc'RecConError3_bytes" {
     Control.Exception.Base.$tc'RecConError3_bytes:
         I8[] [39,82,101,99,67,111,110,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.516097741 UTC

[section ""data" . Control.Exception.Base.$tc'RecConError2_closure" {
     Control.Exception.Base.$tc'RecConError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'RecConError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.517859424 UTC

[section ""data" . Control.Exception.Base.$tc'RecConError_closure" {
     Control.Exception.Base.$tc'RecConError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'RecConError2_closure+1;
         const Control.Exception.Base.$tc'RecConError1_closure+4;
         const 9626440070376619587;
         const 11467734131060317064;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.520242033 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError2_closure" {
     Control.Exception.Base.$fExceptionRecConError2_closure:
         const Control.Exception.Base.$fExceptionRecConError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecConError2_entry() //  [R1]
         { info_tbl: [(c9R65,
                       label: Control.Exception.Base.$fExceptionRecConError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R65: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9R66; else goto c9R67;
       c9R66: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9R67: // global
           (_c9R5X::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9R5X::I64 == 0) goto c9R5Z; else goto c9R5Y;
       c9R5Z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9R5Y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9R5X::I64;
           I64[Sp - 24] = block_c9R60_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionRecConError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 6364281046760374976;
           R2 = 12352028005606494596;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9R60() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9R60,
                       label: block_c9R60_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R60: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9R61() args: 0, res: 0, upd: 0;
     }
 },
 _c9R61() //  []
         { info_tbl: [(c9R61,
                       label: block_c9R61_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R61: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9R6a; else goto c9R69;
       c9R6a: // global
           HpAlloc = 48;
           I64[Sp] = block_c9R61_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9R69: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.529508028 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionRecConError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecConError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9R6D,
                       label: Control.Exception.Base.$fExceptionRecConError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R6D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9R6H; else goto c9R6I;
       c9R6H: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecConError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R6I: // global
           I64[Sp - 8] = block_c9R6A_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9R73; else goto c9R6B;
       u9R73: // global
           call _c9R6A(R1) args: 0, res: 0, upd: 0;
       c9R6B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9R6A() //  [R1]
         { info_tbl: [(c9R6A,
                       label: block_c9R6A_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R6A: // global
           I64[Sp - 8] = block_c9R6G_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9R6G() //  [R1]
         { info_tbl: [(c9R6G,
                       label: block_c9R6G_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R6G: // global
           I64[Sp] = block_c9R6N_info;
           R3 = Control.Exception.Base.$fExceptionRecConError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9R6N() //  [R1]
         { info_tbl: [(c9R6N,
                       label: block_c9R6N_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R6N: // global
           if (R1 & 7 == 1) goto c9R6U; else goto c9R6Y;
       c9R6U: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9R6Y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9R71; else goto c9R70;
       c9R71: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9R70: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.538855568 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError_closure" {
     Control.Exception.Base.$fExceptionRecConError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionRecConError2_closure;
         const Control.Exception.Base.$fShowRecConError_closure+1;
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionRecConError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionRecConError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionRecConError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecConError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9R7u,
                       label: Control.Exception.Base.$fExceptionRecConError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R7u: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9R7y; else goto c9R7x;
       c9R7y: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecConError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R7x: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionRecConError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.543199699 UTC

[section ""cstring" . lvl6_r9PFF_bytes" {
     lvl6_r9PFF_bytes:
         I8[] [77,105,115,115,105,110,103,32,102,105,101,108,100,32,105,110,32,114,101,99,111,114,100,32,99,111,110,115,116,114,117,99,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.544989324 UTC

[section ""data" . lvl7_r9PFG_closure" {
     lvl7_r9PFG_closure:
         const lvl7_r9PFG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r9PFG_entry() //  [R1]
         { info_tbl: [(c9R7M,
                       label: lvl7_r9PFG_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R7M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9R7N; else goto c9R7O;
       c9R7N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9R7O: // global
           (_c9R7J::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9R7J::I64 == 0) goto c9R7L; else goto c9R7K;
       c9R7L: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9R7K: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9R7J::I64;
           R2 = lvl6_r9PFF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.548930062 UTC

[section ""data" . Control.Exception.Base.recConError_closure" {
     Control.Exception.Base.recConError_closure:
         const Control.Exception.Base.recConError_info;
         const 0;
 },
 Control.Exception.Base.recConError_entry() //  [R2]
         { info_tbl: [(c9R82,
                       label: Control.Exception.Base.recConError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R82: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9R83; else goto c9R84;
       c9R83: // global
           R2 = R2;
           R1 = Control.Exception.Base.recConError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R84: // global
           I64[Sp - 8] = block_c9R80_info;
           R3 = lvl7_r9PFG_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9R80() //  [R1]
         { info_tbl: [(c9R80,
                       label: block_c9R80_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R80: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionRecConError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.554216898 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionRecUpdError4_bytes" {
     Control.Exception.Base.$fExceptionRecUpdError4_bytes:
         I8[] [82,101,99,85,112,100,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.555760903 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError3_closure" {
     Control.Exception.Base.$fExceptionRecUpdError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionRecUpdError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.557344546 UTC

[section ""data" . Control.Exception.Base.$tcRecUpdError_closure" {
     Control.Exception.Base.$tcRecUpdError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 15702205725616076489;
         const 17185013925011980063;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.55972684 UTC

[section ""data" . $krep6_r9PFH_closure" {
     $krep6_r9PFH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcRecUpdError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.561535418 UTC

[section ""data" . Control.Exception.Base.$tc'RecUpdError1_closure" {
     Control.Exception.Base.$tc'RecUpdError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep6_r9PFH_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.563243219 UTC

[section ""cstring" . Control.Exception.Base.$tc'RecUpdError3_bytes" {
     Control.Exception.Base.$tc'RecUpdError3_bytes:
         I8[] [39,82,101,99,85,112,100,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.564879122 UTC

[section ""data" . Control.Exception.Base.$tc'RecUpdError2_closure" {
     Control.Exception.Base.$tc'RecUpdError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'RecUpdError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.566872626 UTC

[section ""data" . Control.Exception.Base.$tc'RecUpdError_closure" {
     Control.Exception.Base.$tc'RecUpdError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'RecUpdError2_closure+1;
         const Control.Exception.Base.$tc'RecUpdError1_closure+4;
         const 16559845159098082290;
         const 2874382059338705699;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.569320098 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError2_closure" {
     Control.Exception.Base.$fExceptionRecUpdError2_closure:
         const Control.Exception.Base.$fExceptionRecUpdError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecUpdError2_entry() //  [R1]
         { info_tbl: [(c9R8z,
                       label: Control.Exception.Base.$fExceptionRecUpdError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R8z: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9R8A; else goto c9R8B;
       c9R8A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9R8B: // global
           (_c9R8r::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9R8r::I64 == 0) goto c9R8t; else goto c9R8s;
       c9R8t: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9R8s: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9R8r::I64;
           I64[Sp - 24] = block_c9R8u_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionRecUpdError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 17185013925011980063;
           R2 = 15702205725616076489;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9R8u() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9R8u,
                       label: block_c9R8u_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R8u: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9R8v() args: 0, res: 0, upd: 0;
     }
 },
 _c9R8v() //  []
         { info_tbl: [(c9R8v,
                       label: block_c9R8v_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R8v: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9R8E; else goto c9R8D;
       c9R8E: // global
           HpAlloc = 48;
           I64[Sp] = block_c9R8v_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9R8D: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.578105421 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecUpdError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9R97,
                       label: Control.Exception.Base.$fExceptionRecUpdError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R97: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9R9b; else goto c9R9c;
       c9R9b: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9R9c: // global
           I64[Sp - 8] = block_c9R94_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9R9x; else goto c9R95;
       u9R9x: // global
           call _c9R94(R1) args: 0, res: 0, upd: 0;
       c9R95: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9R94() //  [R1]
         { info_tbl: [(c9R94,
                       label: block_c9R94_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R94: // global
           I64[Sp - 8] = block_c9R9a_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9R9a() //  [R1]
         { info_tbl: [(c9R9a,
                       label: block_c9R9a_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R9a: // global
           I64[Sp] = block_c9R9h_info;
           R3 = Control.Exception.Base.$fExceptionRecUpdError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9R9h() //  [R1]
         { info_tbl: [(c9R9h,
                       label: block_c9R9h_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R9h: // global
           if (R1 & 7 == 1) goto c9R9o; else goto c9R9s;
       c9R9o: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9R9s: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9R9v; else goto c9R9u;
       c9R9v: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9R9u: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.587254658 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError_closure" {
     Control.Exception.Base.$fExceptionRecUpdError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionRecUpdError2_closure;
         const Control.Exception.Base.$fShowRecUpdError_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecUpdError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9R9Y,
                       label: Control.Exception.Base.$fExceptionRecUpdError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9R9Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Ra2; else goto c9Ra1;
       c9Ra2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Ra1: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionRecUpdError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.592012142 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNoMethodError4_bytes" {
     Control.Exception.Base.$fExceptionNoMethodError4_bytes:
         I8[] [78,111,77,101,116,104,111,100,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.594311203 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError3_closure" {
     Control.Exception.Base.$fExceptionNoMethodError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionNoMethodError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.596115613 UTC

[section ""data" . Control.Exception.Base.$tcNoMethodError_closure" {
     Control.Exception.Base.$tcNoMethodError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 11351432124310594529;
         const 14675551822527927261;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.598007691 UTC

[section ""data" . $krep7_r9PFI_closure" {
     $krep7_r9PFI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcNoMethodError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.599699338 UTC

[section ""data" . Control.Exception.Base.$tc'NoMethodError1_closure" {
     Control.Exception.Base.$tc'NoMethodError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep7_r9PFI_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.601707071 UTC

[section ""cstring" . Control.Exception.Base.$tc'NoMethodError3_bytes" {
     Control.Exception.Base.$tc'NoMethodError3_bytes:
         I8[] [39,78,111,77,101,116,104,111,100,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.60338771 UTC

[section ""data" . Control.Exception.Base.$tc'NoMethodError2_closure" {
     Control.Exception.Base.$tc'NoMethodError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'NoMethodError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.605053726 UTC

[section ""data" . Control.Exception.Base.$tc'NoMethodError_closure" {
     Control.Exception.Base.$tc'NoMethodError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'NoMethodError2_closure+1;
         const Control.Exception.Base.$tc'NoMethodError1_closure+4;
         const 17186686744263410642;
         const 16452408278578849625;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.60749718 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError2_closure" {
     Control.Exception.Base.$fExceptionNoMethodError2_closure:
         const Control.Exception.Base.$fExceptionNoMethodError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNoMethodError2_entry() //  [R1]
         { info_tbl: [(c9Ras,
                       label: Control.Exception.Base.$fExceptionNoMethodError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ras: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Rat; else goto c9Rau;
       c9Rat: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Rau: // global
           (_c9Rak::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Rak::I64 == 0) goto c9Ram; else goto c9Ral;
       c9Ram: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ral: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Rak::I64;
           I64[Sp - 24] = block_c9Ran_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionNoMethodError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 14675551822527927261;
           R2 = 11351432124310594529;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Ran() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Ran,
                       label: block_c9Ran_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ran: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Rao() args: 0, res: 0, upd: 0;
     }
 },
 _c9Rao() //  []
         { info_tbl: [(c9Rao,
                       label: block_c9Rao_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rao: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Rax; else goto c9Raw;
       c9Rax: // global
           HpAlloc = 48;
           I64[Sp] = block_c9Rao_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Raw: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.616245141 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNoMethodError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9Rb0,
                       label: Control.Exception.Base.$fExceptionNoMethodError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rb0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Rb4; else goto c9Rb5;
       c9Rb4: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Rb5: // global
           I64[Sp - 8] = block_c9RaX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Rbq; else goto c9RaY;
       u9Rbq: // global
           call _c9RaX(R1) args: 0, res: 0, upd: 0;
       c9RaY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RaX() //  [R1]
         { info_tbl: [(c9RaX,
                       label: block_c9RaX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RaX: // global
           I64[Sp - 8] = block_c9Rb3_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Rb3() //  [R1]
         { info_tbl: [(c9Rb3,
                       label: block_c9Rb3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rb3: // global
           I64[Sp] = block_c9Rba_info;
           R3 = Control.Exception.Base.$fExceptionNoMethodError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Rba() //  [R1]
         { info_tbl: [(c9Rba,
                       label: block_c9Rba_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rba: // global
           if (R1 & 7 == 1) goto c9Rbh; else goto c9Rbl;
       c9Rbh: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Rbl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Rbo; else goto c9Rbn;
       c9Rbo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Rbn: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.626131813 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError_closure" {
     Control.Exception.Base.$fExceptionNoMethodError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionNoMethodError2_closure;
         const Control.Exception.Base.$fShowNoMethodError_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNoMethodError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9RbR,
                       label: Control.Exception.Base.$fExceptionNoMethodError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RbR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9RbV; else goto c9RbU;
       c9RbV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RbU: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionNoMethodError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.630782129 UTC

[section ""cstring" . lvl8_r9PFJ_bytes" {
     lvl8_r9PFJ_bytes:
         I8[] [78,111,32,105,110,115,116,97,110,99,101,32,110,111,114,32,100,101,102,97,117,108,116,32,109,101,116,104,111,100,32,102,111,114,32,99,108,97,115,115,32,111,112,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.632625857 UTC

[section ""data" . lvl9_r9PFK_closure" {
     lvl9_r9PFK_closure:
         const lvl9_r9PFK_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r9PFK_entry() //  [R1]
         { info_tbl: [(c9Rc9,
                       label: lvl9_r9PFK_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rc9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Rca; else goto c9Rcb;
       c9Rca: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Rcb: // global
           (_c9Rc6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Rc6::I64 == 0) goto c9Rc8; else goto c9Rc7;
       c9Rc8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Rc7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Rc6::I64;
           R2 = lvl8_r9PFJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.63660901 UTC

[section ""data" . Control.Exception.Base.noMethodBindingError_closure" {
     Control.Exception.Base.noMethodBindingError_closure:
         const Control.Exception.Base.noMethodBindingError_info;
         const 0;
 },
 Control.Exception.Base.noMethodBindingError_entry() //  [R2]
         { info_tbl: [(c9Rcp,
                       label: Control.Exception.Base.noMethodBindingError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rcp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Rcq; else goto c9Rcr;
       c9Rcq: // global
           R2 = R2;
           R1 = Control.Exception.Base.noMethodBindingError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Rcr: // global
           I64[Sp - 8] = block_c9Rcn_info;
           R3 = lvl9_r9PFK_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Rcn() //  [R1]
         { info_tbl: [(c9Rcn,
                       label: block_c9Rcn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rcn: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionNoMethodError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.641963664 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionTypeError4_bytes" {
     Control.Exception.Base.$fExceptionTypeError4_bytes:
         I8[] [84,121,112,101,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.643622551 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError3_closure" {
     Control.Exception.Base.$fExceptionTypeError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionTypeError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.645416952 UTC

[section ""data" . Control.Exception.Base.$tcTypeError_closure" {
     Control.Exception.Base.$tcTypeError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionTypeError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 16164392450212773017;
         const 7054022894506300317;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.647259324 UTC

[section ""data" . $krep8_r9PFL_closure" {
     $krep8_r9PFL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcTypeError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.648973834 UTC

[section ""data" . Control.Exception.Base.$tc'TypeError1_closure" {
     Control.Exception.Base.$tc'TypeError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep8_r9PFL_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.650756223 UTC

[section ""cstring" . Control.Exception.Base.$tc'TypeError3_bytes" {
     Control.Exception.Base.$tc'TypeError3_bytes:
         I8[] [39,84,121,112,101,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.652401614 UTC

[section ""data" . Control.Exception.Base.$tc'TypeError2_closure" {
     Control.Exception.Base.$tc'TypeError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'TypeError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.654322512 UTC

[section ""data" . Control.Exception.Base.$tc'TypeError_closure" {
     Control.Exception.Base.$tc'TypeError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'TypeError2_closure+1;
         const Control.Exception.Base.$tc'TypeError1_closure+4;
         const 2042750002965703545;
         const 3275664116896771855;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.657158205 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError2_closure" {
     Control.Exception.Base.$fExceptionTypeError2_closure:
         const Control.Exception.Base.$fExceptionTypeError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionTypeError2_entry() //  [R1]
         { info_tbl: [(c9RcW,
                       label: Control.Exception.Base.$fExceptionTypeError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RcW: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9RcX; else goto c9RcY;
       c9RcX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RcY: // global
           (_c9RcO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RcO::I64 == 0) goto c9RcQ; else goto c9RcP;
       c9RcQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RcP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RcO::I64;
           I64[Sp - 24] = block_c9RcR_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionTypeError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 7054022894506300317;
           R2 = 16164392450212773017;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9RcR() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9RcR,
                       label: block_c9RcR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RcR: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9RcS() args: 0, res: 0, upd: 0;
     }
 },
 _c9RcS() //  []
         { info_tbl: [(c9RcS,
                       label: block_c9RcS_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RcS: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Rd1; else goto c9Rd0;
       c9Rd1: // global
           HpAlloc = 48;
           I64[Sp] = block_c9RcS_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Rd0: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.665882185 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionTypeError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionTypeError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9Rdu,
                       label: Control.Exception.Base.$fExceptionTypeError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rdu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Rdy; else goto c9Rdz;
       c9Rdy: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionTypeError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Rdz: // global
           I64[Sp - 8] = block_c9Rdr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9RdU; else goto c9Rds;
       u9RdU: // global
           call _c9Rdr(R1) args: 0, res: 0, upd: 0;
       c9Rds: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Rdr() //  [R1]
         { info_tbl: [(c9Rdr,
                       label: block_c9Rdr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rdr: // global
           I64[Sp - 8] = block_c9Rdx_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Rdx() //  [R1]
         { info_tbl: [(c9Rdx,
                       label: block_c9Rdx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rdx: // global
           I64[Sp] = block_c9RdE_info;
           R3 = Control.Exception.Base.$fExceptionTypeError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9RdE() //  [R1]
         { info_tbl: [(c9RdE,
                       label: block_c9RdE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RdE: // global
           if (R1 & 7 == 1) goto c9RdL; else goto c9RdP;
       c9RdL: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9RdP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RdS; else goto c9RdR;
       c9RdS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RdR: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.674694567 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError_closure" {
     Control.Exception.Base.$fExceptionTypeError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionTypeError2_closure;
         const Control.Exception.Base.$fShowTypeError_closure+1;
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionTypeError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionTypeError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionTypeError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionTypeError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9Rel,
                       label: Control.Exception.Base.$fExceptionTypeError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rel: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Rep; else goto c9Reo;
       c9Rep: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionTypeError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Reo: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionTypeError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.679332277 UTC

[section ""data" . Control.Exception.Base.typeError_closure" {
     Control.Exception.Base.typeError_closure:
         const Control.Exception.Base.typeError_info;
         const 0;
 },
 Control.Exception.Base.typeError_entry() //  [R2]
         { info_tbl: [(c9ReC,
                       label: Control.Exception.Base.typeError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ReC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9ReD; else goto c9ReE;
       c9ReD: // global
           R2 = R2;
           R1 = Control.Exception.Base.typeError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9ReE: // global
           I64[Sp - 8] = block_c9ReA_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9ReA() //  [R1]
         { info_tbl: [(c9ReA,
                       label: block_c9ReA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9ReA: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionTypeError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.684641518 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNonTermination5_bytes" {
     Control.Exception.Base.$fExceptionNonTermination5_bytes:
         I8[] [78,111,110,84,101,114,109,105,110,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.686457523 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination4_closure" {
     Control.Exception.Base.$fExceptionNonTermination4_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionNonTermination5_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.688141844 UTC

[section ""data" . Control.Exception.Base.$tcNonTermination_closure" {
     Control.Exception.Base.$tcNonTermination_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination4_closure+1;
         const GHC.Types.krep$*_closure;
         const 3579424895879668618;
         const 10599900892006414641;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.690642433 UTC

[section ""data" . Control.Exception.Base.$tc'NonTermination1_closure" {
     Control.Exception.Base.$tc'NonTermination1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcNonTermination_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.69232985 UTC

[section ""cstring" . Control.Exception.Base.$tc'NonTermination3_bytes" {
     Control.Exception.Base.$tc'NonTermination3_bytes:
         I8[] [39,78,111,110,84,101,114,109,105,110,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.694033603 UTC

[section ""data" . Control.Exception.Base.$tc'NonTermination2_closure" {
     Control.Exception.Base.$tc'NonTermination2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'NonTermination3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.695769764 UTC

[section ""data" . Control.Exception.Base.$tc'NonTermination_closure" {
     Control.Exception.Base.$tc'NonTermination_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'NonTermination2_closure+1;
         const Control.Exception.Base.$tc'NonTermination1_closure+1;
         const 12968537629115503750;
         const 16395462767232503200;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.698259985 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination3_closure" {
     Control.Exception.Base.$fExceptionNonTermination3_closure:
         const Control.Exception.Base.$fExceptionNonTermination3_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination3_entry() //  [R1]
         { info_tbl: [(c9Rf8,
                       label: Control.Exception.Base.$fExceptionNonTermination3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rf8: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Rf9; else goto c9Rfa;
       c9Rf9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Rfa: // global
           (_c9Rf0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Rf0::I64 == 0) goto c9Rf2; else goto c9Rf1;
       c9Rf2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Rf1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Rf0::I64;
           I64[Sp - 24] = block_c9Rf3_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionNonTermination4_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 10599900892006414641;
           R2 = 3579424895879668618;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9Rf3() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9Rf3,
                       label: block_c9Rf3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rf3: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9Rf4() args: 0, res: 0, upd: 0;
     }
 },
 _c9Rf4() //  []
         { info_tbl: [(c9Rf4,
                       label: block_c9Rf4_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rf4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9Rfd; else goto c9Rfc;
       c9Rfd: // global
           HpAlloc = 48;
           I64[Sp] = block_c9Rf4_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9Rfc: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.706441968 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNestedAtomically5_bytes" {
     Control.Exception.Base.$fExceptionNestedAtomically5_bytes:
         I8[] [78,101,115,116,101,100,65,116,111,109,105,99,97,108,108,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.708013222 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically4_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically4_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionNestedAtomically5_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.709772643 UTC

[section ""data" . Control.Exception.Base.$tcNestedAtomically_closure" {
     Control.Exception.Base.$tcNestedAtomically_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically4_closure+1;
         const GHC.Types.krep$*_closure;
         const 13388460688970090897;
         const 8422109474180001052;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.711580339 UTC

[section ""data" . Control.Exception.Base.$tc'NestedAtomically1_closure" {
     Control.Exception.Base.$tc'NestedAtomically1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcNestedAtomically_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.713847001 UTC

[section ""cstring" . Control.Exception.Base.$tc'NestedAtomically3_bytes" {
     Control.Exception.Base.$tc'NestedAtomically3_bytes:
         I8[] [39,78,101,115,116,101,100,65,116,111,109,105,99,97,108,108,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.715424355 UTC

[section ""data" . Control.Exception.Base.$tc'NestedAtomically2_closure" {
     Control.Exception.Base.$tc'NestedAtomically2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'NestedAtomically3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.716999369 UTC

[section ""data" . Control.Exception.Base.$tc'NestedAtomically_closure" {
     Control.Exception.Base.$tc'NestedAtomically_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'NestedAtomically2_closure+1;
         const Control.Exception.Base.$tc'NestedAtomically1_closure+1;
         const 4753625237420970988;
         const 7635940481883810337;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.719999302 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically3_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically3_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically3_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically3_entry() //  [R1]
         { info_tbl: [(c9RfR,
                       label: Control.Exception.Base.$fExceptionNestedAtomically3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RfR: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9RfS; else goto c9RfT;
       c9RfS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RfT: // global
           (_c9RfJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RfJ::I64 == 0) goto c9RfL; else goto c9RfK;
       c9RfL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RfK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RfJ::I64;
           I64[Sp - 24] = block_c9RfM_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionNestedAtomically4_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 8422109474180001052;
           R2 = 13388460688970090897;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9RfM() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9RfM,
                       label: block_c9RfM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RfM: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9RfN() args: 0, res: 0, upd: 0;
     }
 },
 _c9RfN() //  []
         { info_tbl: [(c9RfN,
                       label: block_c9RfN_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RfN: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9RfW; else goto c9RfV;
       c9RfW: // global
           HpAlloc = 48;
           I64[Sp] = block_c9RfN_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9RfV: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.728583532 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure" {
     Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure:
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination_$cfromException_entry() //  [R2]
         { info_tbl: [(c9Rgp,
                       label: Control.Exception.Base.$fExceptionNonTermination_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rgp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Rgt; else goto c9Rgu;
       c9Rgt: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Rgu: // global
           I64[Sp - 8] = block_c9Rgm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9RgP; else goto c9Rgn;
       u9RgP: // global
           call _c9Rgm(R1) args: 0, res: 0, upd: 0;
       c9Rgn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Rgm() //  [R1]
         { info_tbl: [(c9Rgm,
                       label: block_c9Rgm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rgm: // global
           I64[Sp - 8] = block_c9Rgs_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Rgs() //  [R1]
         { info_tbl: [(c9Rgs,
                       label: block_c9Rgs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rgs: // global
           I64[Sp] = block_c9Rgz_info;
           R3 = Control.Exception.Base.$fExceptionNonTermination3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Rgz() //  [R1]
         { info_tbl: [(c9Rgz,
                       label: block_c9Rgz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rgz: // global
           if (R1 & 7 == 1) goto c9RgG; else goto c9RgK;
       c9RgG: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9RgK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RgN; else goto c9RgM;
       c9RgN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RgM: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.737620224 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination_closure" {
     Control.Exception.Base.$fExceptionNonTermination_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionNonTermination3_closure;
         const Control.Exception.Base.$fShowNonTermination_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure" {
     Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure:
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination_$ctoException_entry() //  [R2]
         { info_tbl: [(c9Rhg,
                       label: Control.Exception.Base.$fExceptionNonTermination_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rhg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Rhk; else goto c9Rhj;
       c9Rhk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Rhj: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionNonTermination_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.742134336 UTC

[section ""data" . Control.Exception.Base.nonTermination_closure" {
     Control.Exception.Base.nonTermination_closure:
         const Control.Exception.Base.nonTermination_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.nonTermination_entry() //  [R1]
         { info_tbl: [(c9Rhx,
                       label: Control.Exception.Base.nonTermination_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rhx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Rhy; else goto c9Rhz;
       c9Rhy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Rhz: // global
           (_c9Rhu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Rhu::I64 == 0) goto c9Rhw; else goto c9Rhv;
       c9Rhw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Rhv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Rhu::I64;
           R2 = Control.Exception.Base.NonTermination_closure+1;
           Sp = Sp - 16;
           call Control.Exception.Base.$fExceptionNonTermination_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.746373928 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_entry() //  [R2]
         { info_tbl: [(c9RhO,
                       label: Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RhO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RhS; else goto c9RhT;
       c9RhS: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RhT: // global
           I64[Sp - 8] = block_c9RhL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Rie; else goto c9RhM;
       u9Rie: // global
           call _c9RhL(R1) args: 0, res: 0, upd: 0;
       c9RhM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RhL() //  [R1]
         { info_tbl: [(c9RhL,
                       label: block_c9RhL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RhL: // global
           I64[Sp - 8] = block_c9RhR_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9RhR() //  [R1]
         { info_tbl: [(c9RhR,
                       label: block_c9RhR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RhR: // global
           I64[Sp] = block_c9RhY_info;
           R3 = Control.Exception.Base.$fExceptionNestedAtomically3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9RhY() //  [R1]
         { info_tbl: [(c9RhY,
                       label: block_c9RhY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RhY: // global
           if (R1 & 7 == 1) goto c9Ri5; else goto c9Ri9;
       c9Ri5: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Ri9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Ric; else goto c9Rib;
       c9Ric: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Rib: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.756001471 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionNestedAtomically3_closure;
         const Control.Exception.Base.$fShowNestedAtomically_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_entry() //  [R2]
         { info_tbl: [(c9RiF,
                       label: Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RiF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9RiJ; else goto c9RiI;
       c9RiJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RiI: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionNestedAtomically_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.760700493 UTC

[section ""data" . Control.Exception.Base.nestedAtomically_closure" {
     Control.Exception.Base.nestedAtomically_closure:
         const Control.Exception.Base.nestedAtomically_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.nestedAtomically_entry() //  [R1]
         { info_tbl: [(c9RiW,
                       label: Control.Exception.Base.nestedAtomically_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RiW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RiX; else goto c9RiY;
       c9RiX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RiY: // global
           (_c9RiT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RiT::I64 == 0) goto c9RiV; else goto c9RiU;
       c9RiV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RiU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RiT::I64;
           R2 = Control.Exception.Base.NestedAtomically_closure+1;
           Sp = Sp - 16;
           call Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.764680077 UTC

[section ""data" . Control.Exception.Base.NestedAtomically_closure" {
     Control.Exception.Base.NestedAtomically_closure:
         const Control.Exception.Base.NestedAtomically_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.766318975 UTC

[section ""data" . Control.Exception.Base.NonTermination_closure" {
     Control.Exception.Base.NonTermination_closure:
         const Control.Exception.Base.NonTermination_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.767919273 UTC

[section ""relreadonly" . Control.Exception.Base.NestedAtomically_closure_tbl" {
     Control.Exception.Base.NestedAtomically_closure_tbl:
         const Control.Exception.Base.NestedAtomically_closure+1;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.769633622 UTC

[Control.Exception.Base.NestedAtomically_con_entry() //  [R1]
         { info_tbl: [(c9Rj9,
                       label: Control.Exception.Base.NestedAtomically_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,67,111,110,116,114,111,108,46,69,120,99,101,112,116,105,111,110,46,66,97,115,101,46,78,101,115,116,101,100,65,116,111,109,105,99,97,108,108,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rj9: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.772734263 UTC

[section ""relreadonly" . Control.Exception.Base.NonTermination_closure_tbl" {
     Control.Exception.Base.NonTermination_closure_tbl:
         const Control.Exception.Base.NonTermination_closure+1;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.774409192 UTC

[Control.Exception.Base.NonTermination_con_entry() //  [R1]
         { info_tbl: [(c9Rjg,
                       label: Control.Exception.Base.NonTermination_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,67,111,110,116,114,111,108,46,69,120,99,101,112,116,105,111,110,46,66,97,115,101,46,78,111,110,84,101,114,109,105,110,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rjg: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:55.77767233 UTC

[section ""relreadonly" . S9POL_srt" {
     S9POL_srt:
         const Control.Exception.Base.$fExceptionNonTermination1_closure;
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure;
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_closure;
         const Control.Exception.Base.$fShowNonTermination1_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically1_closure;
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure;
         const Control.Exception.Base.$fShowNestedAtomically1_closure;
         const Control.Exception.Base.runtimeError_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Control.Exception.Base.absentError_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail2_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure;
         const Control.Exception.Base.patError_closure;
         const GHC.IO.Exception.untangle_closure;
         const lvl2_r9PFz_closure;
         const Control.Exception.Base.nonExhaustiveGuardsError_closure;
         const lvl4_r9PFB_closure;
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionRecSelError2_closure;
         const Control.Exception.Base.$fExceptionRecSelError_closure;
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure;
         const Control.Exception.Base.recSelError_closure;
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionRecConError2_closure;
         const Control.Exception.Base.$fExceptionRecConError_closure;
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_closure;
         const Control.Exception.Base.recConError_closure;
         const lvl7_r9PFG_closure;
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionRecUpdError2_closure;
         const Control.Exception.Base.$fExceptionRecUpdError_closure;
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure;
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionNoMethodError2_closure;
         const Control.Exception.Base.$fExceptionNoMethodError_closure;
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure;
         const Control.Exception.Base.noMethodBindingError_closure;
         const lvl9_r9PFK_closure;
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionTypeError2_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Control.Exception.Base.$fExceptionTypeError_closure;
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_closure;
         const Control.Exception.Base.typeError_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure;
         const Control.Exception.Base.$fExceptionNonTermination3_closure;
         const Control.Exception.Base.$fExceptionNonTermination_closure;
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically3_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.116469315 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:04:57.117899411 UTC

[section ""data" . Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_entry() //  [R3,
                                                                        R4]
         { info_tbl: [(c9Rq0,
                       label: Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rq0: // global
           _s9Rjo::P64 = R3;
           R3 = R4;
           R2 = _s9Rjo::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.123113543 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail1_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail1_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail1_info;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail1_entry() //  [R2]
         { info_tbl: [(c9Rqb,
                       label: Control.Exception.Base.$fExceptionPatternMatchFail1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rqb: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.126378338 UTC

[section ""data" . Control.Exception.Base.$fShowPatternMatchFail_$cshowList_closure" {
     Control.Exception.Base.$fShowPatternMatchFail_$cshowList_closure:
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowList_info;
 },
 Control.Exception.Base.$fShowPatternMatchFail_$cshowList_entry() //  [R2,
                                                                       R3]
         { info_tbl: [(c9Rqo,
                       label: Control.Exception.Base.$fShowPatternMatchFail_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rqo: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.129547194 UTC

[section ""data" . Control.Exception.Base.$fShowPatternMatchFail_closure" {
     Control.Exception.Base.$fShowPatternMatchFail_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionPatternMatchFail1_closure+1;
         const Control.Exception.Base.$fShowPatternMatchFail_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.131432648 UTC

[section ""data" . Control.Exception.Base.$fShowRecSelError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowRecSelError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowRecSelError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowRecSelError_$cshowsPrec_entry() //  [R3,
                                                                   R4]
         { info_tbl: [(c9RqB,
                       label: Control.Exception.Base.$fShowRecSelError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RqB: // global
           _s9Rjt::P64 = R3;
           R3 = R4;
           R2 = _s9Rjt::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.134846044 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError1_closure" {
     Control.Exception.Base.$fExceptionRecSelError1_closure:
         const Control.Exception.Base.$fExceptionRecSelError1_info;
 },
 Control.Exception.Base.$fExceptionRecSelError1_entry() //  [R2]
         { info_tbl: [(c9RqM,
                       label: Control.Exception.Base.$fExceptionRecSelError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RqM: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.138346959 UTC

[section ""data" . Control.Exception.Base.$fShowRecSelError_$cshowList_closure" {
     Control.Exception.Base.$fShowRecSelError_$cshowList_closure:
         const Control.Exception.Base.$fShowRecSelError_$cshowList_info;
 },
 Control.Exception.Base.$fShowRecSelError_$cshowList_entry() //  [R2,
                                                                  R3]
         { info_tbl: [(c9RqZ,
                       label: Control.Exception.Base.$fShowRecSelError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RqZ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.141602028 UTC

[section ""data" . Control.Exception.Base.$fShowRecSelError_closure" {
     Control.Exception.Base.$fShowRecSelError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowRecSelError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionRecSelError1_closure+1;
         const Control.Exception.Base.$fShowRecSelError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.143413268 UTC

[section ""data" . Control.Exception.Base.$fShowRecConError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowRecConError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowRecConError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowRecConError_$cshowsPrec_entry() //  [R3,
                                                                   R4]
         { info_tbl: [(c9Rrc,
                       label: Control.Exception.Base.$fShowRecConError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rrc: // global
           _s9Rjy::P64 = R3;
           R3 = R4;
           R2 = _s9Rjy::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.146755553 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError1_closure" {
     Control.Exception.Base.$fExceptionRecConError1_closure:
         const Control.Exception.Base.$fExceptionRecConError1_info;
 },
 Control.Exception.Base.$fExceptionRecConError1_entry() //  [R2]
         { info_tbl: [(c9Rrn,
                       label: Control.Exception.Base.$fExceptionRecConError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rrn: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.150688795 UTC

[section ""data" . Control.Exception.Base.$fShowRecConError_$cshowList_closure" {
     Control.Exception.Base.$fShowRecConError_$cshowList_closure:
         const Control.Exception.Base.$fShowRecConError_$cshowList_info;
 },
 Control.Exception.Base.$fShowRecConError_$cshowList_entry() //  [R2,
                                                                  R3]
         { info_tbl: [(c9RrA,
                       label: Control.Exception.Base.$fShowRecConError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RrA: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.154742591 UTC

[section ""data" . Control.Exception.Base.$fShowRecConError_closure" {
     Control.Exception.Base.$fShowRecConError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowRecConError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionRecConError1_closure+1;
         const Control.Exception.Base.$fShowRecConError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.156622137 UTC

[section ""data" . Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_entry() //  [R3,
                                                                   R4]
         { info_tbl: [(c9RrN,
                       label: Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RrN: // global
           _s9RjD::P64 = R3;
           R3 = R4;
           R2 = _s9RjD::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.15997917 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError1_closure" {
     Control.Exception.Base.$fExceptionRecUpdError1_closure:
         const Control.Exception.Base.$fExceptionRecUpdError1_info;
 },
 Control.Exception.Base.$fExceptionRecUpdError1_entry() //  [R2]
         { info_tbl: [(c9RrY,
                       label: Control.Exception.Base.$fExceptionRecUpdError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RrY: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.163605144 UTC

[section ""data" . Control.Exception.Base.$fShowRecUpdError_$cshowList_closure" {
     Control.Exception.Base.$fShowRecUpdError_$cshowList_closure:
         const Control.Exception.Base.$fShowRecUpdError_$cshowList_info;
 },
 Control.Exception.Base.$fShowRecUpdError_$cshowList_entry() //  [R2,
                                                                  R3]
         { info_tbl: [(c9Rsb,
                       label: Control.Exception.Base.$fShowRecUpdError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rsb: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.166851667 UTC

[section ""data" . Control.Exception.Base.$fShowRecUpdError_closure" {
     Control.Exception.Base.$fShowRecUpdError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowRecUpdError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionRecUpdError1_closure+1;
         const Control.Exception.Base.$fShowRecUpdError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.168710448 UTC

[section ""data" . Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_entry() //  [R3,
                                                                     R4]
         { info_tbl: [(c9Rso,
                       label: Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rso: // global
           _s9RjI::P64 = R3;
           R3 = R4;
           R2 = _s9RjI::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.171998018 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError1_closure" {
     Control.Exception.Base.$fExceptionNoMethodError1_closure:
         const Control.Exception.Base.$fExceptionNoMethodError1_info;
 },
 Control.Exception.Base.$fExceptionNoMethodError1_entry() //  [R2]
         { info_tbl: [(c9Rsz,
                       label: Control.Exception.Base.$fExceptionNoMethodError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rsz: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.175767797 UTC

[section ""data" . Control.Exception.Base.$fShowNoMethodError_$cshowList_closure" {
     Control.Exception.Base.$fShowNoMethodError_$cshowList_closure:
         const Control.Exception.Base.$fShowNoMethodError_$cshowList_info;
 },
 Control.Exception.Base.$fShowNoMethodError_$cshowList_entry() //  [R2,
                                                                    R3]
         { info_tbl: [(c9RsM,
                       label: Control.Exception.Base.$fShowNoMethodError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RsM: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.179004936 UTC

[section ""data" . Control.Exception.Base.$fShowNoMethodError_closure" {
     Control.Exception.Base.$fShowNoMethodError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowNoMethodError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionNoMethodError1_closure+1;
         const Control.Exception.Base.$fShowNoMethodError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.18140476 UTC

[section ""data" . Control.Exception.Base.$fShowTypeError_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowTypeError_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowTypeError_$cshowsPrec_info;
 },
 Control.Exception.Base.$fShowTypeError_$cshowsPrec_entry() //  [R3,
                                                                 R4]
         { info_tbl: [(c9RsZ,
                       label: Control.Exception.Base.$fShowTypeError_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RsZ: // global
           _s9RjN::P64 = R3;
           R3 = R4;
           R2 = _s9RjN::P64;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.184730147 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError1_closure" {
     Control.Exception.Base.$fExceptionTypeError1_closure:
         const Control.Exception.Base.$fExceptionTypeError1_info;
 },
 Control.Exception.Base.$fExceptionTypeError1_entry() //  [R2]
         { info_tbl: [(c9Rta,
                       label: Control.Exception.Base.$fExceptionTypeError1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rta: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.188363492 UTC

[section ""data" . Control.Exception.Base.$fShowTypeError_$cshowList_closure" {
     Control.Exception.Base.$fShowTypeError_$cshowList_closure:
         const Control.Exception.Base.$fShowTypeError_$cshowList_info;
 },
 Control.Exception.Base.$fShowTypeError_$cshowList_entry() //  [R2,
                                                                R3]
         { info_tbl: [(c9Rtn,
                       label: Control.Exception.Base.$fShowTypeError_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rtn: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Base.++_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.191663848 UTC

[section ""data" . Control.Exception.Base.$fShowTypeError_closure" {
     Control.Exception.Base.$fShowTypeError_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowTypeError_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionTypeError1_closure+1;
         const Control.Exception.Base.$fShowTypeError_$cshowList_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.193397127 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNonTermination2_bytes" {
     Control.Exception.Base.$fExceptionNonTermination2_bytes:
         I8[] [60,60,108,111,111,112,62,62]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.195243633 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination1_closure" {
     Control.Exception.Base.$fExceptionNonTermination1_closure:
         const Control.Exception.Base.$fExceptionNonTermination1_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination1_entry() //  [R1]
         { info_tbl: [(c9RtD,
                       label: Control.Exception.Base.$fExceptionNonTermination1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RtD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RtE; else goto c9RtF;
       c9RtE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RtF: // global
           (_c9RtA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RtA::I64 == 0) goto c9RtC; else goto c9RtB;
       c9RtC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RtB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RtA::I64;
           R2 = Control.Exception.Base.$fExceptionNonTermination2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.199824956 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_info;
         const 0;
 },
 Control.Exception.Base.$fShowNonTermination_$cshowsPrec_entry() //  [R2,
                                                                      R3, R4]
         { info_tbl: [(c9RtV,
                       label: Control.Exception.Base.$fShowNonTermination_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RtV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RtW; else goto c9RtX;
       c9RtW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RtX: // global
           I64[Sp - 16] = block_c9RtS_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Ru1; else goto c9RtT;
       u9Ru1: // global
           call _c9RtS() args: 0, res: 0, upd: 0;
       c9RtT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RtS() //  []
         { info_tbl: [(c9RtS,
                       label: block_c9RtS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RtS: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNonTermination1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.205345701 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination_$cshow_closure" {
     Control.Exception.Base.$fExceptionNonTermination_$cshow_closure:
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination_$cshow_entry() //  [R2]
         { info_tbl: [(c9Ruk,
                       label: Control.Exception.Base.$fExceptionNonTermination_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ruk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Rul; else goto c9Rum;
       c9Rul: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNonTermination_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Rum: // global
           I64[Sp - 8] = block_c9Ruh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Ruq; else goto c9Rui;
       u9Ruq: // global
           call _c9Ruh() args: 0, res: 0, upd: 0;
       c9Rui: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Ruh() //  []
         { info_tbl: [(c9Ruh,
                       label: block_c9Ruh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ruh: // global
           R1 = Control.Exception.Base.$fExceptionNonTermination1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.211296697 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination1_closure" {
     Control.Exception.Base.$fShowNonTermination1_closure:
         const Control.Exception.Base.$fShowNonTermination1_info;
         const 0;
 },
 Control.Exception.Base.$fShowNonTermination1_entry() //  [R2, R3]
         { info_tbl: [(c9RuJ,
                       label: Control.Exception.Base.$fShowNonTermination1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RuJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RuK; else goto c9RuL;
       c9RuK: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNonTermination1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RuL: // global
           I64[Sp - 16] = block_c9RuG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9RuP; else goto c9RuH;
       u9RuP: // global
           call _c9RuG() args: 0, res: 0, upd: 0;
       c9RuH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RuG() //  []
         { info_tbl: [(c9RuG,
                       label: block_c9RuG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RuG: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNonTermination1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.217357734 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination_$cshowList_closure" {
     Control.Exception.Base.$fShowNonTermination_$cshowList_closure:
         const Control.Exception.Base.$fShowNonTermination_$cshowList_info;
         const 0;
 },
 Control.Exception.Base.$fShowNonTermination_$cshowList_entry() //  [R2,
                                                                     R3]
         { info_tbl: [(c9Rv4,
                       label: Control.Exception.Base.$fShowNonTermination_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rv4: // global
           R4 = R3;
           R3 = R2;
           R2 = Control.Exception.Base.$fShowNonTermination1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.220614674 UTC

[section ""data" . Control.Exception.Base.$fShowNonTermination_closure" {
     Control.Exception.Base.$fShowNonTermination_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_closure+1;
         const Control.Exception.Base.$fShowNonTermination_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.222316743 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNestedAtomically2_bytes" {
     Control.Exception.Base.$fExceptionNestedAtomically2_bytes:
         I8[] [67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,83,84,77,46,97,116,111,109,105,99,97,108,108,121,32,119,97,115,32,110,101,115,116,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.224174238 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically1_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically1_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically1_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically1_entry() //  [R1]
         { info_tbl: [(c9Rvj,
                       label: Control.Exception.Base.$fExceptionNestedAtomically1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rvj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Rvk; else goto c9Rvl;
       c9Rvk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Rvl: // global
           (_c9Rvg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Rvg::I64 == 0) goto c9Rvi; else goto c9Rvh;
       c9Rvi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Rvh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Rvg::I64;
           R2 = Control.Exception.Base.$fExceptionNestedAtomically2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.228333312 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure" {
     Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure:
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_info;
         const 0;
 },
 Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_entry() //  [R2,
                                                                        R3, R4]
         { info_tbl: [(c9RvB,
                       label: Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RvB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RvC; else goto c9RvD;
       c9RvC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RvD: // global
           I64[Sp - 16] = block_c9Rvy_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9RvH; else goto c9Rvz;
       u9RvH: // global
           call _c9Rvy() args: 0, res: 0, upd: 0;
       c9Rvz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Rvy() //  []
         { info_tbl: [(c9Rvy,
                       label: block_c9Rvy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rvy: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNestedAtomically1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.23400482 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically_$cshow_entry() //  [R2]
         { info_tbl: [(c9RvZ,
                       label: Control.Exception.Base.$fExceptionNestedAtomically_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RvZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Rw0; else goto c9Rw1;
       c9Rw0: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Rw1: // global
           I64[Sp - 8] = block_c9RvW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Rw5; else goto c9RvX;
       u9Rw5: // global
           call _c9RvW() args: 0, res: 0, upd: 0;
       c9RvX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RvW() //  []
         { info_tbl: [(c9RvW,
                       label: block_c9RvW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RvW: // global
           R1 = Control.Exception.Base.$fExceptionNestedAtomically1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.239335705 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically1_closure" {
     Control.Exception.Base.$fShowNestedAtomically1_closure:
         const Control.Exception.Base.$fShowNestedAtomically1_info;
         const 0;
 },
 Control.Exception.Base.$fShowNestedAtomically1_entry() //  [R2, R3]
         { info_tbl: [(c9Rwo,
                       label: Control.Exception.Base.$fShowNestedAtomically1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rwo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Rwp; else goto c9Rwq;
       c9Rwp: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.$fShowNestedAtomically1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Rwq: // global
           I64[Sp - 16] = block_c9Rwl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Rwu; else goto c9Rwm;
       u9Rwu: // global
           call _c9Rwl() args: 0, res: 0, upd: 0;
       c9Rwm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Rwl() //  []
         { info_tbl: [(c9Rwl,
                       label: block_c9Rwl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rwl: // global
           R3 = P64[Sp + 8];
           R2 = Control.Exception.Base.$fExceptionNestedAtomically1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.245356909 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically_$cshowList_closure" {
     Control.Exception.Base.$fShowNestedAtomically_$cshowList_closure:
         const Control.Exception.Base.$fShowNestedAtomically_$cshowList_info;
         const 0;
 },
 Control.Exception.Base.$fShowNestedAtomically_$cshowList_entry() //  [R2,
                                                                       R3]
         { info_tbl: [(c9RwJ,
                       label: Control.Exception.Base.$fShowNestedAtomically_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RwJ: // global
           R4 = R3;
           R3 = R2;
           R2 = Control.Exception.Base.$fShowNestedAtomically1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.249013007 UTC

[section ""data" . Control.Exception.Base.$fShowNestedAtomically_closure" {
     Control.Exception.Base.$fShowNestedAtomically_closure:
         const GHC.Show.C:Show_con_info;
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure+3;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure+1;
         const Control.Exception.Base.$fShowNestedAtomically_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.251555802 UTC

[section ""data" . Control.Exception.Base.catchJust1_closure" {
     Control.Exception.Base.catchJust1_closure:
         const Control.Exception.Base.catchJust1_info;
 },
 sat_s9Rkk_entry() //  [R1]
         { info_tbl: [(c9Rx9,
                       label: sat_s9Rkk_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rx9: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Rko_entry() //  [R1, R2]
         { info_tbl: [(c9Rxg,
                       label: sat_s9Rko_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rxg: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c9Rxh; else goto c9Rxi;
       c9Rxh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Rxi: // global
           I64[Sp - 40] = block_c9Rx0_info;
           _s9Rki::P64 = R2;
           _s9Rkd::P64 = P64[R1 + 7];
           R2 = _s9Rkd::P64;
           I64[Sp - 56] = stg_ap_p_info;
           P64[Sp - 48] = _s9Rki::P64;
           P64[Sp - 32] = _s9Rkd::P64;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _s9Rki::P64;
           Sp = Sp - 56;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c9Rx0() //  [R1]
         { info_tbl: [(c9Rx0,
                       label: block_c9Rx0_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rx0: // global
           if (R1 & 7 == 1) goto c9Rxd; else goto c9Rxe;
       c9Rxd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Rxl; else goto c9Rxk;
       c9Rxl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Rxk: // global
           I64[Hp - 8] = sat_s9Rkk_info;
           P64[Hp] = P64[Sp + 32];
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Rxe: // global
           I64[Sp] = block_c9Rxo_info;
           _s9Rkl::P64 = P64[R1 + 6];
           R2 = _s9Rkl::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 32] = _s9Rkl::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Rxo() //  [R1]
         { info_tbl: [(c9Rxo,
                       label: block_c9Rxo_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rxo: // global
           if (R1 & 7 == 1) goto c9Rxv; else goto c9Rxz;
       c9Rxv: // global
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = GHC.IO.throwIO1_closure+3;
           Sp = Sp + 40;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Rxz: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.catchJust1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9RxB,
                       label: Control.Exception.Base.catchJust1_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RxB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9RxF; else goto c9RxE;
       c9RxF: // global
           HpAlloc = 32;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.catchJust1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RxE: // global
           I64[Hp - 24] = sat_s9Rko_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R5;
           R2 = Hp - 23;
           R1 = R4;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.263206959 UTC

[section ""data" . Control.Exception.Base.catchJust_closure" {
     Control.Exception.Base.catchJust_closure:
         const Control.Exception.Base.catchJust_info;
 },
 Control.Exception.Base.catchJust_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9Ryf,
                       label: Control.Exception.Base.catchJust_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ryf: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.catchJust1_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.266866551 UTC

[section ""data" . Control.Exception.Base.handleJust1_closure" {
     Control.Exception.Base.handleJust1_closure:
         const Control.Exception.Base.handleJust1_info;
 },
 Control.Exception.Base.handleJust1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9Ryq,
                       label: Control.Exception.Base.handleJust1_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ryq: // global
           _s9Rks::P64 = R5;
           R5 = R4;
           R4 = _s9Rks::P64;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.catchJust1_entry(R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.270332169 UTC

[section ""data" . Control.Exception.Base.handleJust_closure" {
     Control.Exception.Base.handleJust_closure:
         const Control.Exception.Base.handleJust_info;
 },
 Control.Exception.Base.handleJust_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9RyB,
                       label: Control.Exception.Base.handleJust_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RyB: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.handleJust1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.273627127 UTC

[section ""data" . Control.Exception.Base.handle1_closure" {
     Control.Exception.Base.handle1_closure:
         const Control.Exception.Base.handle1_info;
 },
 Control.Exception.Base.handle1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9RyM,
                       label: Control.Exception.Base.handle1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RyM: // global
           _s9Rkw::P64 = R4;
           R4 = R3;
           R3 = _s9Rkw::P64;
           R2 = R2;
           call GHC.IO.catch1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.276980122 UTC

[section ""data" . Control.Exception.Base.handle_closure" {
     Control.Exception.Base.handle_closure:
         const Control.Exception.Base.handle_info;
 },
 Control.Exception.Base.handle_entry() //  [R2, R3, R4]
         { info_tbl: [(c9RyX,
                       label: Control.Exception.Base.handle_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RyX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.handle1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.281449333 UTC

[section ""data" . Control.Exception.Base.mapException1_closure" {
     Control.Exception.Base.mapException1_closure:
         const Control.Exception.Base.mapException1_info;
 },
 sat_s9RkD_entry() //  [R1]
         { info_tbl: [(c9Rzd,
                       label: sat_s9RkD_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rzd: // global
           _s9RkD::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c9Rze; else goto c9Rzf;
       c9Rzf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Rzh; else goto c9Rzg;
       c9Rzh: // global
           HpAlloc = 32;
           goto c9Rze;
       c9Rze: // global
           R1 = _s9RkD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Rzg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9RkD::P64;
           _s9Rky::P64 = P64[_s9RkD::P64 + 16];
           _s9Rkz::P64 = P64[_s9RkD::P64 + 24];
           _s9RkA::P64 = P64[_s9RkD::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _s9Rky::P64;
           P64[Hp] = _s9Rkz::P64;
           R2 = _s9RkA::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           call GHC.Exception.toException_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 Control.Exception.Base.mapException1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9Rzi,
                       label: Control.Exception.Base.mapException1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Rzi: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Rzm; else goto c9Rzl;
       c9Rzm: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.mapException1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Rzl: // global
           I64[Hp - 32] = sat_s9RkD_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 32;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.28815375 UTC

[section ""data" . Control.Exception.Base.mapException_closure" {
     Control.Exception.Base.mapException_closure:
         const Control.Exception.Base.mapException_info;
 },
 sat_s9RkN_entry() //  [R1]
         { info_tbl: [(c9RzU,
                       label: sat_s9RkN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RzU: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9RkQ_entry() //  [R1, R2]
         { info_tbl: [(c9RA1,
                       label: sat_s9RkQ_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RA1: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c9RA2; else goto c9RA3;
       c9RA2: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RA3: // global
           I64[Sp - 32] = block_c9RzL_info;
           _s9RkL::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = _s9RkL::P64;
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = _s9RkL::P64;
           Sp = Sp - 48;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c9RzL() //  [R1]
         { info_tbl: [(c9RzL,
                       label: block_c9RzL_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RzL: // global
           if (R1 & 7 == 1) goto c9RzY; else goto c9RzZ;
       c9RzY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RA6; else goto c9RA5;
       c9RA6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RA5: // global
           I64[Hp - 8] = sat_s9RkN_info;
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9RzZ: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 16];
           R1 = Control.Exception.Base.mapException1_closure+4;
           Sp = Sp + 32;
           call stg_ap_ppp_fast(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9RkK_entry() //  [R1]
         { info_tbl: [(c9RAf,
                       label: sat_s9RkK_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RAf: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.mapException_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c9RAk,
                       label: Control.Exception.Base.mapException_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RAk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c9RAl; else goto c9RAm;
       c9RAl: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.mapException_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RAm: // global
           I64[Sp - 40] = block_c9RzE_info;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9RzE() //  []
         { info_tbl: [(c9RzE,
                       label: block_c9RzE_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RzE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9RAp; else goto c9RAo;
       c9RAp: // global
           HpAlloc = 48;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c9RAo: // global
           I64[Hp - 40] = sat_s9RkQ_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           I64[Hp - 8] = sat_s9RkK_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_c9RAi_info;
           R2 = Hp - 39;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RAi() //  [R1]
         { info_tbl: [(c9RAi,
                       label: block_c9RAi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RAi: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.303162603 UTC

[section ""data" . Control.Exception.Base.try1_closure" {
     Control.Exception.Base.try1_closure:
         const Control.Exception.Base.try1_info;
 },
 sat_s9Rl8_entry() //  [R1, R2]
         { info_tbl: [(c9RBl,
                       label: sat_s9Rl8_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RBl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9RBm; else goto c9RBn;
       c9RBm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RBn: // global
           I64[Sp - 16] = block_c9RBf_info;
           _s9Rl3::P64 = R2;
           R2 = P64[R1 + 6];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = _s9Rl3::P64;
           P64[Sp - 8] = _s9Rl3::P64;
           Sp = Sp - 32;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c9RBf() //  [R1]
         { info_tbl: [(c9RBf,
                       label: block_c9RBf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RBf: // global
           if (R1 & 7 == 1) goto c9RBi; else goto c9RBj;
       c9RBi: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       c9RBj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RBw; else goto c9RBv;
       c9RBw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RBv: // global
           _s9Rl6::P64 = P64[R1 + 6];
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = _s9Rl6::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Rl2_entry() //  [R1]
         { info_tbl: [(c9RBF,
                       label: sat_s9Rl2_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RBF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9RBG; else goto c9RBH;
       c9RBG: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9RBH: // global
           I64[Sp - 8] = block_c9RBC_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RBC() //  [R1]
         { info_tbl: [(c9RBC,
                       label: block_c9RBC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RBC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RBK; else goto c9RBJ;
       c9RBK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RBJ: // global
           I64[Hp - 8] = Data.Either.Right_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.try1_entry() //  [R2, R3]
         { info_tbl: [(c9RBL,
                       label: Control.Exception.Base.try1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RBL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9RBP; else goto c9RBO;
       c9RBP: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.try1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RBO: // global
           I64[Hp - 24] = sat_s9Rl8_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = sat_s9Rl2_info;
           P64[Hp] = R3;
           R2 = Hp - 22;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.314871097 UTC

[section ""data" . Control.Exception.Base.try_closure" {
     Control.Exception.Base.try_closure:
         const Control.Exception.Base.try_info;
 },
 Control.Exception.Base.try_entry() //  [R2, R3]
         { info_tbl: [(c9RCn,
                       label: Control.Exception.Base.try_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RCn: // global
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.try1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.3191694 UTC

[section ""data" . Control.Exception.Base.tryJust1_closure" {
     Control.Exception.Base.tryJust1_closure:
         const Control.Exception.Base.tryJust1_info;
 },
 Control.Exception.Base.tryJust1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9RCH,
                       label: Control.Exception.Base.tryJust1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RCH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9RCI; else goto c9RCJ;
       c9RCI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.tryJust1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RCJ: // global
           I64[Sp - 24] = block_c9RCy_info;
           _s9Rla::P64 = R3;
           R3 = R4;
           _s9Rl9::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s9Rl9::P64;
           P64[Sp - 8] = _s9Rla::P64;
           Sp = Sp - 24;
           call Control.Exception.Base.try1_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9RCy() //  [R1]
         { info_tbl: [(c9RCy,
                       label: block_c9RCy_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RCy: // global
           I64[Sp - 8] = block_c9RCA_info;
           _s9Rlf::P64 = R1;
           R1 = R1;
           P64[Sp] = _s9Rlf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9RD6; else goto c9RCB;
       u9RD6: // global
           call _c9RCA(R1) args: 0, res: 0, upd: 0;
       c9RCB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RCA() //  [R1]
         { info_tbl: [(c9RCA,
                       label: block_c9RCA_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RCA: // global
           if (R1 & 7 == 1) goto c9RCE; else goto c9RCF;
       c9RCE: // global
           I64[Sp + 8] = block_c9RCN_info;
           _s9Rlh::P64 = P64[R1 + 7];
           R2 = _s9Rlh::P64;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s9Rlh::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       c9RCF: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9RCN() //  [R1]
         { info_tbl: [(c9RCN,
                       label: block_c9RCN_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RCN: // global
           if (R1 & 7 == 1) goto c9RCU; else goto c9RCY;
       c9RCU: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.throwIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9RCY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RD1; else goto c9RD0;
       c9RD1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RD0: // global
           _s9Rlj::P64 = P64[R1 + 6];
           I64[Hp - 8] = Data.Either.Left_con_info;
           P64[Hp] = _s9Rlj::P64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.328735036 UTC

[section ""data" . Control.Exception.Base.tryJust_closure" {
     Control.Exception.Base.tryJust_closure:
         const Control.Exception.Base.tryJust_info;
 },
 Control.Exception.Base.tryJust_entry() //  [R2, R3, R4]
         { info_tbl: [(c9RDA,
                       label: Control.Exception.Base.tryJust_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RDA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.tryJust1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.332279974 UTC

[section ""data" . Control.Exception.Base.onException1_closure" {
     Control.Exception.Base.onException1_closure:
         const Control.Exception.Base.onException1_info;
 },
 sat_s9Rlv_entry() //  [R1, R2]
         { info_tbl: [(c9RDS,
                       label: sat_s9Rlv_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RDS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RDT; else goto c9RDU;
       c9RDT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RDU: // global
           I64[Sp - 16] = block_c9RDQ_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RDQ() //  []
         { info_tbl: [(c9RDQ,
                       label: block_c9RDQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RDQ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.onException1_entry() //  [R2, R3]
         { info_tbl: [(c9RDW,
                       label: Control.Exception.Base.onException1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RDW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RE0; else goto c9RDZ;
       c9RE0: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.onException1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RDZ: // global
           I64[Hp - 8] = sat_s9Rlv_info;
           P64[Hp] = R3;
           _s9Rln::P64 = R2;
           R2 = Hp - 6;
           R1 = _s9Rln::P64;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.339354763 UTC

[section ""data" . Control.Exception.Base.onException_closure" {
     Control.Exception.Base.onException_closure:
         const Control.Exception.Base.onException_info;
 },
 Control.Exception.Base.onException_entry() //  [R2, R3]
         { info_tbl: [(c9REi,
                       label: Control.Exception.Base.onException_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9REi: // global
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.onException1_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.344523639 UTC

[section ""data" . Control.Exception.Base.bracket1_closure" {
     Control.Exception.Base.bracket1_closure:
         const Control.Exception.Base.bracket1_info;
 },
 sat_s9RlO_entry() //  [R1, R2]
         { info_tbl: [(c9REG,
                       label: sat_s9RlO_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9REG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9REH; else goto c9REI;
       c9REH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9REI: // global
           I64[Sp - 16] = block_c9REE_info;
           _s9RlJ::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9RlJ::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9REE() //  []
         { info_tbl: [(c9REE,
                       label: block_c9REE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9REE: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9RlI_entry() //  [R1]
         { info_tbl: [(c9REQ,
                       label: sat_s9RlI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9REQ: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Rm6_entry() //  [R1, R2]
         { info_tbl: [(c9RF8,
                       label: sat_s9Rm6_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RF8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RF9; else goto c9RFa;
       c9RF9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RFa: // global
           I64[Sp - 16] = block_c9RF6_info;
           _s9Rm1::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9Rm1::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RF6() //  []
         { info_tbl: [(c9RF6,
                       label: block_c9RF6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RF6: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Rm0_entry() //  [R1]
         { info_tbl: [(c9RFi,
                       label: sat_s9Rm0_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RFi: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Rmd_entry() //  [R1]
         { info_tbl: [(c9RFp,
                       label: sat_s9Rmd_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RFp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9RFq; else goto c9RFr;
       c9RFq: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9RFr: // global
           I64[Sp - 24] = block_c9REZ_info;
           _s9Rlx::P64 = P64[R1 + 15];
           _s9Rly::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9Rlx::P64;
           P64[Sp - 8] = _s9Rly::P64;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9REZ() //  [R1]
         { info_tbl: [(c9REZ,
                       label: block_c9REZ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9REZ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9RFu; else goto c9RFt;
       c9RFu: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RFt: // global
           I64[Hp - 64] = sat_s9Rm6_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9Rm0_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9RFl_info;
           R2 = Hp - 62;
           _s9RlY::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9RlY::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RFl() //  [R1]
         { info_tbl: [(c9RFl,
                       label: block_c9RFl_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RFl: // global
           _s9Rlx::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9RFn_info;
           R2 = P64[Sp + 16];
           _s9Rm9::P64 = R1;
           R1 = _s9Rlx::P64;
           P64[Sp + 16] = _s9Rm9::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RFn() //  []
         { info_tbl: [(c9RFn,
                       label: block_c9RFn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RFn: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Rmo_entry() //  [R1, R2]
         { info_tbl: [(c9RFH,
                       label: sat_s9Rmo_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RFH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RFI; else goto c9RFJ;
       c9RFI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RFJ: // global
           I64[Sp - 16] = block_c9RFF_info;
           _s9Rmj::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9Rmj::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RFF() //  []
         { info_tbl: [(c9RFF,
                       label: block_c9RFF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RFF: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Rmi_entry() //  [R1]
         { info_tbl: [(c9RFR,
                       label: sat_s9Rmi_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RFR: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.bracket1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9RFY,
                       label: Control.Exception.Base.bracket1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RFY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9RFZ; else goto c9RG0;
       c9RFZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.bracket1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RG0: // global
           I64[Sp - 32] = block_c9REt_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 _c9REt() //  [R1]
         { info_tbl: [(c9REt,
                       label: block_c9REt_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9REt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9RG3; else goto c9RG2;
       c9RG3: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9RG2: // global
           _s9Rlw::P64 = P64[Sp + 8];
           if (R1 == 0) goto c9RFW; else goto u9RGm;
       c9RFW: // global
           I64[Hp - 24] = sat_s9Rmd_info;
           P64[Hp - 16] = _s9Rlw::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9RGm: // global
           if (R1 == 1) goto c9RFX; else goto c9RFV;
       c9RFX: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9RFy_info;
           R1 = _s9Rlw::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c9RFV: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9REx_info;
           R1 = _s9Rlw::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RFy() //  [R1]
         { info_tbl: [(c9RFy,
                       label: block_c9RFy_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RFy: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9RGi; else goto c9RGh;
       c9RGi: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RGh: // global
           I64[Hp - 64] = sat_s9Rmo_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9Rmi_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9RGd_info;
           R2 = Hp - 62;
           _s9Rmg::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9Rmg::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RGd() //  [R1]
         { info_tbl: [(c9RGd,
                       label: block_c9RGd_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RGd: // global
           _s9Rlx::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9RGf_info;
           R2 = P64[Sp + 16];
           _s9Rmr::P64 = R1;
           R1 = _s9Rlx::P64;
           P64[Sp + 16] = _s9Rmr::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RGf() //  []
         { info_tbl: [(c9RGf,
                       label: block_c9RGf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RGf: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9REx() //  [R1]
         { info_tbl: [(c9REx,
                       label: block_c9REx_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9REx: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9RG9; else goto c9RG8;
       c9RG9: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RG8: // global
           I64[Hp - 64] = sat_s9RlO_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9RlI_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c9RG4_info;
           R2 = Hp - 62;
           _s9RlG::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s9RlG::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RG4() //  [R1]
         { info_tbl: [(c9RG4,
                       label: block_c9RG4_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RG4: // global
           _s9Rlx::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9RG6_info;
           R2 = P64[Sp + 16];
           _s9RlR::P64 = R1;
           R1 = _s9Rlx::P64;
           P64[Sp + 16] = _s9RlR::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RG6() //  []
         { info_tbl: [(c9RG6,
                       label: block_c9RG6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RG6: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.384059875 UTC

[section ""data" . Control.Exception.Base.bracket_closure" {
     Control.Exception.Base.bracket_closure:
         const Control.Exception.Base.bracket_info;
 },
 Control.Exception.Base.bracket_entry() //  [R2, R3, R4]
         { info_tbl: [(c9RI9,
                       label: Control.Exception.Base.bracket_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RI9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.bracket1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.38772103 UTC

[section ""data" . Control.Exception.Base.bracket_1_closure" {
     Control.Exception.Base.bracket_1_closure:
         const Control.Exception.Base.bracket_1_info;
 },
 sat_s9RmC_entry() //  [R1]
         { info_tbl: [(c9RIp,
                       label: sat_s9RmC_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RIp: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9RmA_entry() //  [R1]
         { info_tbl: [(c9RIx,
                       label: sat_s9RmA_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RIx: // global
           R1 = P64[R1 + 7];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.bracket_1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9RIA,
                       label: Control.Exception.Base.bracket_1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RIA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9RIE; else goto c9RID;
       c9RIE: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.bracket_1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RID: // global
           I64[Hp - 24] = sat_s9RmC_info;
           P64[Hp - 16] = R4;
           I64[Hp - 8] = sat_s9RmA_info;
           P64[Hp] = R3;
           R4 = Hp - 23;
           R3 = Hp - 7;
           R2 = R2;
           call Control.Exception.Base.bracket1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.395321414 UTC

[section ""data" . Control.Exception.Base.bracket__closure" {
     Control.Exception.Base.bracket__closure:
         const Control.Exception.Base.bracket__info;
 },
 Control.Exception.Base.bracket__entry() //  [R2, R3, R4]
         { info_tbl: [(c9RIV,
                       label: Control.Exception.Base.bracket__info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RIV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.bracket_1_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.399996274 UTC

[section ""data" . Control.Exception.Base.finally1_closure" {
     Control.Exception.Base.finally1_closure:
         const Control.Exception.Base.finally1_info;
 },
 sat_s9RmQ_entry() //  [R1, R2]
         { info_tbl: [(c9RJh,
                       label: sat_s9RmQ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RJh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RJi; else goto c9RJj;
       c9RJi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RJj: // global
           I64[Sp - 16] = block_c9RJf_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RJf() //  []
         { info_tbl: [(c9RJf,
                       label: block_c9RJf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RJf: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9RmK_entry() //  [R1]
         { info_tbl: [(c9RJq,
                       label: sat_s9RmK_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RJq: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Rn4_entry() //  [R1, R2]
         { info_tbl: [(c9RJG,
                       label: sat_s9Rn4_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RJG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RJH; else goto c9RJI;
       c9RJH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RJI: // global
           I64[Sp - 16] = block_c9RJE_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RJE() //  []
         { info_tbl: [(c9RJE,
                       label: block_c9RJE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RJE: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9RmY_entry() //  [R1]
         { info_tbl: [(c9RJP,
                       label: sat_s9RmY_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RJP: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Rnb_entry() //  [R1]
         { info_tbl: [(c9RJW,
                       label: sat_s9Rnb_info
                       rep:HeapRep 2 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RJW: // global
           _s9Rnb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9RJX; else goto c9RJY;
       c9RJY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9RK0; else goto c9RJZ;
       c9RK0: // global
           HpAlloc = 32;
           goto c9RJX;
       c9RJX: // global
           R1 = _s9Rnb::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9RJZ: // global
           _s9RmD::P64 = P64[_s9Rnb::P64 + 7];
           _s9RmE::P64 = P64[_s9Rnb::P64 + 15];
           I64[Hp - 24] = sat_s9Rn4_info;
           P64[Hp - 16] = _s9RmE::P64;
           I64[Hp - 8] = sat_s9RmY_info;
           P64[Hp] = _s9RmD::P64;
           I64[Sp - 16] = block_c9RJS_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           P64[Sp - 8] = _s9RmE::P64;
           Sp = Sp - 16;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RJS() //  [R1]
         { info_tbl: [(c9RJS,
                       label: block_c9RJS_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RJS: // global
           I64[Sp] = block_c9RJU_info;
           _s9Rn7::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9Rn7::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RJU() //  []
         { info_tbl: [(c9RJU,
                       label: block_c9RJU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RJU: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Rni_entry() //  [R1, R2]
         { info_tbl: [(c9RKb,
                       label: sat_s9Rni_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RKb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RKc; else goto c9RKd;
       c9RKc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RKd: // global
           I64[Sp - 16] = block_c9RK9_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RK9() //  []
         { info_tbl: [(c9RK9,
                       label: block_c9RK9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RK9: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Rnc_entry() //  [R1]
         { info_tbl: [(c9RKk,
                       label: sat_s9Rnc_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RKk: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.finally1_entry() //  [R2, R3]
         { info_tbl: [(c9RKr,
                       label: Control.Exception.Base.finally1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RKr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9RKs; else goto c9RKt;
       c9RKs: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.finally1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RKt: // global
           I64[Sp - 24] = block_c9RJ6_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 _c9RJ6() //  [R1]
         { info_tbl: [(c9RJ6,
                       label: block_c9RJ6_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RJ6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9RKw; else goto c9RKv;
       c9RKw: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9RKv: // global
           _s9RmD::P64 = P64[Sp + 8];
           _s9RmE::P64 = P64[Sp + 16];
           if (R1 == 0) goto c9RKp; else goto u9RKJ;
       c9RKp: // global
           I64[Hp - 24] = sat_s9Rnb_info;
           P64[Hp - 16] = _s9RmD::P64;
           P64[Hp - 8] = _s9RmE::P64;
           _c9RJu::P64 = Hp - 23;
           Hp = Hp - 8;
           R1 = _c9RJu::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9RKJ: // global
           if (R1 == 1) goto c9RKq; else goto c9RKo;
       c9RKq: // global
           I64[Hp - 24] = sat_s9Rni_info;
           P64[Hp - 16] = _s9RmE::P64;
           I64[Hp - 8] = sat_s9Rnc_info;
           P64[Hp] = _s9RmD::P64;
           I64[Sp + 8] = block_c9RKD_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
       c9RKo: // global
           I64[Hp - 24] = sat_s9RmQ_info;
           P64[Hp - 16] = _s9RmE::P64;
           I64[Hp - 8] = sat_s9RmK_info;
           P64[Hp] = _s9RmD::P64;
           I64[Sp + 8] = block_c9RKx_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RKD() //  [R1]
         { info_tbl: [(c9RKD,
                       label: block_c9RKD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RKD: // global
           I64[Sp] = block_c9RKF_info;
           _s9Rnl::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9Rnl::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RKF() //  []
         { info_tbl: [(c9RKF,
                       label: block_c9RKF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RKF: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9RKx() //  [R1]
         { info_tbl: [(c9RKx,
                       label: block_c9RKx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RKx: // global
           I64[Sp] = block_c9RKz_info;
           _s9RmT::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s9RmT::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RKz() //  []
         { info_tbl: [(c9RKz,
                       label: block_c9RKz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RKz: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.432577881 UTC

[section ""data" . Control.Exception.Base.finally_closure" {
     Control.Exception.Base.finally_closure:
         const Control.Exception.Base.finally_info;
 },
 Control.Exception.Base.finally_entry() //  [R2, R3]
         { info_tbl: [(c9RM6,
                       label: Control.Exception.Base.finally_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RM6: // global
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.finally1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.438147156 UTC

[section ""data" . Control.Exception.Base.bracketOnError1_closure" {
     Control.Exception.Base.bracketOnError1_closure:
         const Control.Exception.Base.bracketOnError1_info;
 },
 sat_s9RnH_entry() //  [R1, R2]
         { info_tbl: [(c9RMu,
                       label: sat_s9RnH_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RMu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RMv; else goto c9RMw;
       c9RMv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RMw: // global
           I64[Sp - 16] = block_c9RMs_info;
           _s9RnC::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9RnC::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RMs() //  []
         { info_tbl: [(c9RMs,
                       label: block_c9RMs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RMs: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9RnB_entry() //  [R1]
         { info_tbl: [(c9RME,
                       label: sat_s9RnB_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RME: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9RnT_entry() //  [R1, R2]
         { info_tbl: [(c9RMW,
                       label: sat_s9RnT_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RMW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RMX; else goto c9RMY;
       c9RMX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RMY: // global
           I64[Sp - 16] = block_c9RMU_info;
           _s9RnO::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9RnO::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RMU() //  []
         { info_tbl: [(c9RMU,
                       label: block_c9RMU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RMU: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9RnN_entry() //  [R1]
         { info_tbl: [(c9RN6,
                       label: sat_s9RnN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RN6: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9RnU_entry() //  [R1]
         { info_tbl: [(c9RN9,
                       label: sat_s9RnU_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RN9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9RNa; else goto c9RNb;
       c9RNa: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9RNb: // global
           I64[Sp - 24] = block_c9RMN_info;
           _s9Rnq::P64 = P64[R1 + 15];
           _s9Rnr::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s9Rnq::P64;
           P64[Sp - 8] = _s9Rnr::P64;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RMN() //  [R1]
         { info_tbl: [(c9RMN,
                       label: block_c9RMN_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RMN: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9RNe; else goto c9RNd;
       c9RNe: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RNd: // global
           I64[Hp - 64] = sat_s9RnT_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9RnN_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 62;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Ro5_entry() //  [R1, R2]
         { info_tbl: [(c9RNp,
                       label: sat_s9Ro5_info
                       rep:HeapRep 2 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RNp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RNq; else goto c9RNr;
       c9RNq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RNr: // global
           I64[Sp - 16] = block_c9RNn_info;
           _s9Ro0::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s9Ro0::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RNn() //  []
         { info_tbl: [(c9RNn,
                       label: block_c9RNn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RNn: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9RnZ_entry() //  [R1]
         { info_tbl: [(c9RNz,
                       label: sat_s9RnZ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RNz: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 Control.Exception.Base.bracketOnError1_entry() //  [R2, R3, R4]
         { info_tbl: [(c9RNG,
                       label: Control.Exception.Base.bracketOnError1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RNG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9RNH; else goto c9RNI;
       c9RNH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Exception.Base.bracketOnError1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9RNI: // global
           I64[Sp - 32] = block_c9RMh_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 _c9RMh() //  [R1]
         { info_tbl: [(c9RMh,
                       label: block_c9RMh_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RMh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9RNL; else goto c9RNK;
       c9RNL: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9RNK: // global
           _s9Rnp::P64 = P64[Sp + 8];
           if (R1 == 0) goto c9RNE; else goto u9RNS;
       c9RNE: // global
           I64[Hp - 24] = sat_s9RnU_info;
           P64[Hp - 16] = _s9Rnp::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u9RNS: // global
           if (R1 == 1) goto c9RNF; else goto c9RND;
       c9RNF: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9RNg_info;
           R1 = _s9Rnp::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c9RND: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c9RMl_info;
           R1 = _s9Rnp::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RNg() //  [R1]
         { info_tbl: [(c9RNg,
                       label: block_c9RNg_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RNg: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9RNR; else goto c9RNQ;
       c9RNR: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RNQ: // global
           I64[Hp - 64] = sat_s9Ro5_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9RnZ_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 62;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9RMl() //  [R1]
         { info_tbl: [(c9RMl,
                       label: block_c9RMl_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RMl: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9RNO; else goto c9RNN;
       c9RNO: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RNN: // global
           I64[Hp - 64] = sat_s9RnH_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s9RnB_info;
           P64[Hp] = Hp - 40;
           R2 = Hp - 62;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.467634179 UTC

[section ""data" . Control.Exception.Base.bracketOnError_closure" {
     Control.Exception.Base.bracketOnError_closure:
         const Control.Exception.Base.bracketOnError_info;
 },
 Control.Exception.Base.bracketOnError_entry() //  [R2, R3, R4]
         { info_tbl: [(c9RPe,
                       label: Control.Exception.Base.bracketOnError_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RPe: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call Control.Exception.Base.bracketOnError1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.471107616 UTC

[section ""data" . Control.Exception.Base.runtimeError_closure" {
     Control.Exception.Base.runtimeError_closure:
         const Control.Exception.Base.runtimeError_info;
         const 0;
 },
 Control.Exception.Base.runtimeError_entry() //  [R2]
         { info_tbl: [(c9RPr,
                       label: Control.Exception.Base.runtimeError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RPr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9RPs; else goto c9RPt;
       c9RPs: // global
           R2 = R2;
           R1 = Control.Exception.Base.runtimeError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RPt: // global
           I64[Sp - 8] = block_c9RPp_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9RPp() //  [R1]
         { info_tbl: [(c9RPp,
                       label: block_c9RPp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RPp: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.476490253 UTC

[section ""cstring" . lvl_r9PFt_bytes" {
     lvl_r9PFt_bytes:
         I8[] [79,111,112,115,33,32,32,69,110,116,101,114,101,100,32,97,98,115,101,110,116,32,97,114,103,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.478588627 UTC

[section ""data" . Control.Exception.Base.absentError_closure" {
     Control.Exception.Base.absentError_closure:
         const Control.Exception.Base.absentError_info;
         const 0;
 },
 sat_s9Ro9_entry() //  [R1]
         { info_tbl: [(c9RPP,
                       label: sat_s9Ro9_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RPP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RPQ; else goto c9RPR;
       c9RPQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RPR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Control.Exception.Base.absentError_entry() //  [R2]
         { info_tbl: [(c9RPU,
                       label: Control.Exception.Base.absentError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RPU: // global
           _s9Ro8::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9RPV; else goto c9RPW;
       c9RPW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9RPY; else goto c9RPX;
       c9RPY: // global
           HpAlloc = 24;
           goto c9RPV;
       c9RPV: // global
           R2 = _s9Ro8::I64;
           R1 = Control.Exception.Base.absentError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RPX: // global
           I64[Hp - 16] = sat_s9Ro9_info;
           I64[Hp] = _s9Ro8::I64;
           I64[Sp - 8] = block_c9RPS_info;
           R3 = Hp - 16;
           R2 = lvl_r9PFt_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9RPS() //  [R1]
         { info_tbl: [(c9RPS,
                       label: block_c9RPS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RPS: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.485653277 UTC

[section ""cstring" . Control.Exception.Base.$trModule4_bytes" {
     Control.Exception.Base.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.487347816 UTC

[section ""data" . Control.Exception.Base.$trModule3_closure" {
     Control.Exception.Base.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.488986471 UTC

[section ""cstring" . Control.Exception.Base.$trModule2_bytes" {
     Control.Exception.Base.$trModule2_bytes:
         I8[] [67,111,110,116,114,111,108,46,69,120,99,101,112,116,105,111,110,46,66,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.490622393 UTC

[section ""data" . Control.Exception.Base.$trModule1_closure" {
     Control.Exception.Base.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.492327835 UTC

[section ""data" . Control.Exception.Base.$trModule_closure" {
     Control.Exception.Base.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Control.Exception.Base.$trModule3_closure+1;
         const Control.Exception.Base.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.494649949 UTC

[section ""data" . $krep_r9PFu_closure" {
     $krep_r9PFu_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.496836538 UTC

[section ""data" . $krep1_r9PFv_closure" {
     $krep1_r9PFv_closure:
         const :_con_info;
         const $krep_r9PFu_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.498540007 UTC

[section ""data" . $krep2_r9PFw_closure" {
     $krep2_r9PFw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_r9PFv_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.500117261 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionPatternMatchFail4_bytes" {
     Control.Exception.Base.$fExceptionPatternMatchFail4_bytes:
         I8[] [80,97,116,116,101,114,110,77,97,116,99,104,70,97,105,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.50171586 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail3_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionPatternMatchFail4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.503267633 UTC

[section ""data" . Control.Exception.Base.$tcPatternMatchFail_closure" {
     Control.Exception.Base.$tcPatternMatchFail_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail3_closure+1;
         const GHC.Types.krep$*_closure;
         const 15470147969565509342;
         const 8416277433045206230;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.504998598 UTC

[section ""data" . $krep3_r9PFx_closure" {
     $krep3_r9PFx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcPatternMatchFail_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.507112569 UTC

[section ""data" . Control.Exception.Base.$tc'PatternMatchFail1_closure" {
     Control.Exception.Base.$tc'PatternMatchFail1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep3_r9PFx_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.508762975 UTC

[section ""cstring" . Control.Exception.Base.$tc'PatternMatchFail3_bytes" {
     Control.Exception.Base.$tc'PatternMatchFail3_bytes:
         I8[] [39,80,97,116,116,101,114,110,77,97,116,99,104,70,97,105,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.510420115 UTC

[section ""data" . Control.Exception.Base.$tc'PatternMatchFail2_closure" {
     Control.Exception.Base.$tc'PatternMatchFail2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'PatternMatchFail3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.512053857 UTC

[section ""data" . Control.Exception.Base.$tc'PatternMatchFail_closure" {
     Control.Exception.Base.$tc'PatternMatchFail_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'PatternMatchFail2_closure+1;
         const Control.Exception.Base.$tc'PatternMatchFail1_closure+4;
         const 5659337934556330582;
         const 79463786797963870;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.514422763 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail2_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail2_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail2_entry() //  [R1]
         { info_tbl: [(c9RQI,
                       label: Control.Exception.Base.$fExceptionPatternMatchFail2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RQI: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9RQJ; else goto c9RQK;
       c9RQJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RQK: // global
           (_c9RQA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RQA::I64 == 0) goto c9RQC; else goto c9RQB;
       c9RQC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RQB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RQA::I64;
           I64[Sp - 24] = block_c9RQD_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionPatternMatchFail3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 8416277433045206230;
           R2 = 15470147969565509342;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9RQD() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9RQD,
                       label: block_c9RQD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RQD: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9RQE() args: 0, res: 0, upd: 0;
     }
 },
 _c9RQE() //  []
         { info_tbl: [(c9RQE,
                       label: block_c9RQE_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RQE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9RQN; else goto c9RQM;
       c9RQN: // global
           HpAlloc = 48;
           I64[Sp] = block_c9RQE_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9RQM: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.523253113 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_entry() //  [R2]
         { info_tbl: [(c9RRn,
                       label: Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RRn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RRr; else goto c9RRs;
       c9RRr: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RRs: // global
           I64[Sp - 8] = block_c9RRk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9RRN; else goto c9RRl;
       u9RRN: // global
           call _c9RRk(R1) args: 0, res: 0, upd: 0;
       c9RRl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RRk() //  [R1]
         { info_tbl: [(c9RRk,
                       label: block_c9RRk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RRk: // global
           I64[Sp - 8] = block_c9RRq_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9RRq() //  [R1]
         { info_tbl: [(c9RRq,
                       label: block_c9RRq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RRq: // global
           I64[Sp] = block_c9RRx_info;
           R3 = Control.Exception.Base.$fExceptionPatternMatchFail2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9RRx() //  [R1]
         { info_tbl: [(c9RRx,
                       label: block_c9RRx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RRx: // global
           if (R1 & 7 == 1) goto c9RRE; else goto c9RRI;
       c9RRE: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9RRI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RRL; else goto c9RRK;
       c9RRL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RRK: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.533369919 UTC

[section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionPatternMatchFail2_closure;
         const Control.Exception.Base.$fShowPatternMatchFail_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionPatternMatchFail1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure" {
     Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure:
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_entry() //  [R2]
         { info_tbl: [(c9RSj,
                       label: Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RSj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9RSn; else goto c9RSm;
       c9RSn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RSm: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionPatternMatchFail_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.537840458 UTC

[section ""cstring" . lvl1_r9PFy_bytes" {
     lvl1_r9PFy_bytes:
         I8[] [78,111,110,45,101,120,104,97,117,115,116,105,118,101,32,112,97,116,116,101,114,110,115,32,105,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.539706458 UTC

[section ""data" . lvl2_r9PFz_closure" {
     lvl2_r9PFz_closure:
         const lvl2_r9PFz_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r9PFz_entry() //  [R1]
         { info_tbl: [(c9RSD,
                       label: lvl2_r9PFz_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RSD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RSE; else goto c9RSF;
       c9RSE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RSF: // global
           (_c9RSA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RSA::I64 == 0) goto c9RSC; else goto c9RSB;
       c9RSC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RSB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RSA::I64;
           R2 = lvl1_r9PFy_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.54400141 UTC

[section ""data" . Control.Exception.Base.patError_closure" {
     Control.Exception.Base.patError_closure:
         const Control.Exception.Base.patError_info;
         const 0;
 },
 Control.Exception.Base.patError_entry() //  [R2]
         { info_tbl: [(c9RSU,
                       label: Control.Exception.Base.patError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RSU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9RSV; else goto c9RSW;
       c9RSV: // global
           R2 = R2;
           R1 = Control.Exception.Base.patError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RSW: // global
           I64[Sp - 8] = block_c9RSS_info;
           R3 = lvl2_r9PFz_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9RSS() //  [R1]
         { info_tbl: [(c9RSS,
                       label: block_c9RSS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RSS: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionPatternMatchFail_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.549146433 UTC

[section ""cstring" . lvl3_r9PFA_bytes" {
     lvl3_r9PFA_bytes:
         I8[] [78,111,110,45,101,120,104,97,117,115,116,105,118,101,32,103,117,97,114,100,115,32,105,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.550965713 UTC

[section ""data" . lvl4_r9PFB_closure" {
     lvl4_r9PFB_closure:
         const lvl4_r9PFB_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r9PFB_entry() //  [R1]
         { info_tbl: [(c9RTg,
                       label: lvl4_r9PFB_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RTg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RTh; else goto c9RTi;
       c9RTh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RTi: // global
           (_c9RTd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RTd::I64 == 0) goto c9RTf; else goto c9RTe;
       c9RTf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RTe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RTd::I64;
           R2 = lvl3_r9PFA_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.55531282 UTC

[section ""data" . Control.Exception.Base.nonExhaustiveGuardsError_closure" {
     Control.Exception.Base.nonExhaustiveGuardsError_closure:
         const Control.Exception.Base.nonExhaustiveGuardsError_info;
         const 0;
 },
 Control.Exception.Base.nonExhaustiveGuardsError_entry() //  [R2]
         { info_tbl: [(c9RTx,
                       label: Control.Exception.Base.nonExhaustiveGuardsError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RTx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9RTy; else goto c9RTz;
       c9RTy: // global
           R2 = R2;
           R1 = Control.Exception.Base.nonExhaustiveGuardsError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RTz: // global
           I64[Sp - 8] = block_c9RTv_info;
           R3 = lvl4_r9PFB_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9RTv() //  [R1]
         { info_tbl: [(c9RTv,
                       label: block_c9RTv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RTv: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionPatternMatchFail_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.56108647 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionRecSelError4_bytes" {
     Control.Exception.Base.$fExceptionRecSelError4_bytes:
         I8[] [82,101,99,83,101,108,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.56281253 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError3_closure" {
     Control.Exception.Base.$fExceptionRecSelError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionRecSelError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.564553901 UTC

[section ""data" . Control.Exception.Base.$tcRecSelError_closure" {
     Control.Exception.Base.$tcRecSelError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 10415770337441550020;
         const 15768375346093691416;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.566744757 UTC

[section ""data" . $krep4_r9PFC_closure" {
     $krep4_r9PFC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcRecSelError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.568368234 UTC

[section ""data" . Control.Exception.Base.$tc'RecSelError1_closure" {
     Control.Exception.Base.$tc'RecSelError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep4_r9PFC_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.57015653 UTC

[section ""cstring" . Control.Exception.Base.$tc'RecSelError3_bytes" {
     Control.Exception.Base.$tc'RecSelError3_bytes:
         I8[] [39,82,101,99,83,101,108,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.571694906 UTC

[section ""data" . Control.Exception.Base.$tc'RecSelError2_closure" {
     Control.Exception.Base.$tc'RecSelError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'RecSelError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.573353906 UTC

[section ""data" . Control.Exception.Base.$tc'RecSelError_closure" {
     Control.Exception.Base.$tc'RecSelError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'RecSelError2_closure+1;
         const Control.Exception.Base.$tc'RecSelError1_closure+4;
         const 5471381485413442404;
         const 14158408912397908002;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.575817631 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError2_closure" {
     Control.Exception.Base.$fExceptionRecSelError2_closure:
         const Control.Exception.Base.$fExceptionRecSelError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecSelError2_entry() //  [R1]
         { info_tbl: [(c9RU5,
                       label: Control.Exception.Base.$fExceptionRecSelError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RU5: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9RU6; else goto c9RU7;
       c9RU6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RU7: // global
           (_c9RTX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RTX::I64 == 0) goto c9RTZ; else goto c9RTY;
       c9RTZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RTY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RTX::I64;
           I64[Sp - 24] = block_c9RU0_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionRecSelError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 15768375346093691416;
           R2 = 10415770337441550020;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9RU0() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9RU0,
                       label: block_c9RU0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RU0: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9RU1() args: 0, res: 0, upd: 0;
     }
 },
 _c9RU1() //  []
         { info_tbl: [(c9RU1,
                       label: block_c9RU1_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RU1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9RUa; else goto c9RU9;
       c9RUa: // global
           HpAlloc = 48;
           I64[Sp] = block_c9RU1_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9RU9: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.584560935 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecSelError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9RUK,
                       label: Control.Exception.Base.$fExceptionRecSelError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RUK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RUO; else goto c9RUP;
       c9RUO: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RUP: // global
           I64[Sp - 8] = block_c9RUH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9RVa; else goto c9RUI;
       u9RVa: // global
           call _c9RUH(R1) args: 0, res: 0, upd: 0;
       c9RUI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RUH() //  [R1]
         { info_tbl: [(c9RUH,
                       label: block_c9RUH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RUH: // global
           I64[Sp - 8] = block_c9RUN_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9RUN() //  [R1]
         { info_tbl: [(c9RUN,
                       label: block_c9RUN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RUN: // global
           I64[Sp] = block_c9RUU_info;
           R3 = Control.Exception.Base.$fExceptionRecSelError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9RUU() //  [R1]
         { info_tbl: [(c9RUU,
                       label: block_c9RUU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RUU: // global
           if (R1 & 7 == 1) goto c9RV1; else goto c9RV5;
       c9RV1: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9RV5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RV8; else goto c9RV7;
       c9RV8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RV7: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.594303598 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecSelError_closure" {
     Control.Exception.Base.$fExceptionRecSelError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionRecSelError2_closure;
         const Control.Exception.Base.$fShowRecSelError_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionRecSelError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecSelError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9RVG,
                       label: Control.Exception.Base.$fExceptionRecSelError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RVG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9RVK; else goto c9RVJ;
       c9RVK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RVJ: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionRecSelError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.598752437 UTC

[section ""cstring" . lvl5_r9PFD_bytes" {
     lvl5_r9PFD_bytes:
         I8[] [78,111,32,109,97,116,99,104,32,105,110,32,114,101,99,111,114,100,32,115,101,108,101,99,116,111,114,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.600682662 UTC

[section ""data" . Control.Exception.Base.recSelError_closure" {
     Control.Exception.Base.recSelError_closure:
         const Control.Exception.Base.recSelError_info;
         const 0;
 },
 sat_s9RoE_entry() //  [R1]
         { info_tbl: [(c9RW2,
                       label: sat_s9RoE_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RW2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RW3; else goto c9RW4;
       c9RW3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RW4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 Control.Exception.Base.recSelError_entry() //  [R2]
         { info_tbl: [(c9RW7,
                       label: Control.Exception.Base.recSelError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RW7: // global
           _s9RoD::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9RW8; else goto c9RW9;
       c9RW9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9RWb; else goto c9RWa;
       c9RWb: // global
           HpAlloc = 24;
           goto c9RW8;
       c9RW8: // global
           R2 = _s9RoD::I64;
           R1 = Control.Exception.Base.recSelError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RWa: // global
           I64[Hp - 16] = sat_s9RoE_info;
           I64[Hp] = _s9RoD::I64;
           I64[Sp - 8] = block_c9RW5_info;
           R3 = Hp - 16;
           R2 = lvl5_r9PFD_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9RW5() //  [R1]
         { info_tbl: [(c9RW5,
                       label: block_c9RW5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RW5: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionRecSelError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.608416023 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionRecConError4_bytes" {
     Control.Exception.Base.$fExceptionRecConError4_bytes:
         I8[] [82,101,99,67,111,110,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.610070768 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError3_closure" {
     Control.Exception.Base.$fExceptionRecConError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionRecConError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.611752185 UTC

[section ""data" . Control.Exception.Base.$tcRecConError_closure" {
     Control.Exception.Base.$tcRecConError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionRecConError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 12352028005606494596;
         const 6364281046760374976;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.614205541 UTC

[section ""data" . $krep5_r9PFE_closure" {
     $krep5_r9PFE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcRecConError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.615991534 UTC

[section ""data" . Control.Exception.Base.$tc'RecConError1_closure" {
     Control.Exception.Base.$tc'RecConError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep5_r9PFE_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.617800122 UTC

[section ""cstring" . Control.Exception.Base.$tc'RecConError3_bytes" {
     Control.Exception.Base.$tc'RecConError3_bytes:
         I8[] [39,82,101,99,67,111,110,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.619483432 UTC

[section ""data" . Control.Exception.Base.$tc'RecConError2_closure" {
     Control.Exception.Base.$tc'RecConError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'RecConError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.621197837 UTC

[section ""data" . Control.Exception.Base.$tc'RecConError_closure" {
     Control.Exception.Base.$tc'RecConError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'RecConError2_closure+1;
         const Control.Exception.Base.$tc'RecConError1_closure+4;
         const 9626440070376619587;
         const 11467734131060317064;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.624200096 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError2_closure" {
     Control.Exception.Base.$fExceptionRecConError2_closure:
         const Control.Exception.Base.$fExceptionRecConError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecConError2_entry() //  [R1]
         { info_tbl: [(c9RWN,
                       label: Control.Exception.Base.$fExceptionRecConError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RWN: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9RWO; else goto c9RWP;
       c9RWO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RWP: // global
           (_c9RWF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RWF::I64 == 0) goto c9RWH; else goto c9RWG;
       c9RWH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RWG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RWF::I64;
           I64[Sp - 24] = block_c9RWI_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionRecConError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 6364281046760374976;
           R2 = 12352028005606494596;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9RWI() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9RWI,
                       label: block_c9RWI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RWI: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9RWJ() args: 0, res: 0, upd: 0;
     }
 },
 _c9RWJ() //  []
         { info_tbl: [(c9RWJ,
                       label: block_c9RWJ_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RWJ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9RWS; else goto c9RWR;
       c9RWS: // global
           HpAlloc = 48;
           I64[Sp] = block_c9RWJ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9RWR: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.632976615 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionRecConError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecConError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9RXs,
                       label: Control.Exception.Base.$fExceptionRecConError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RXs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RXw; else goto c9RXx;
       c9RXw: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecConError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RXx: // global
           I64[Sp - 8] = block_c9RXp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9RXS; else goto c9RXq;
       u9RXS: // global
           call _c9RXp(R1) args: 0, res: 0, upd: 0;
       c9RXq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9RXp() //  [R1]
         { info_tbl: [(c9RXp,
                       label: block_c9RXp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RXp: // global
           I64[Sp - 8] = block_c9RXv_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9RXv() //  [R1]
         { info_tbl: [(c9RXv,
                       label: block_c9RXv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RXv: // global
           I64[Sp] = block_c9RXC_info;
           R3 = Control.Exception.Base.$fExceptionRecConError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9RXC() //  [R1]
         { info_tbl: [(c9RXC,
                       label: block_c9RXC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RXC: // global
           if (R1 & 7 == 1) goto c9RXJ; else goto c9RXN;
       c9RXJ: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9RXN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9RXQ; else goto c9RXP;
       c9RXQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9RXP: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.642409479 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecConError_closure" {
     Control.Exception.Base.$fExceptionRecConError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionRecConError2_closure;
         const Control.Exception.Base.$fShowRecConError_closure+1;
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionRecConError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionRecConError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionRecConError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecConError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9RYo,
                       label: Control.Exception.Base.$fExceptionRecConError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RYo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9RYs; else goto c9RYr;
       c9RYs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecConError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RYr: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionRecConError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.646917357 UTC

[section ""cstring" . lvl6_r9PFF_bytes" {
     lvl6_r9PFF_bytes:
         I8[] [77,105,115,115,105,110,103,32,102,105,101,108,100,32,105,110,32,114,101,99,111,114,100,32,99,111,110,115,116,114,117,99,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.648793175 UTC

[section ""data" . lvl7_r9PFG_closure" {
     lvl7_r9PFG_closure:
         const lvl7_r9PFG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r9PFG_entry() //  [R1]
         { info_tbl: [(c9RYI,
                       label: lvl7_r9PFG_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RYI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9RYJ; else goto c9RYK;
       c9RYJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RYK: // global
           (_c9RYF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RYF::I64 == 0) goto c9RYH; else goto c9RYG;
       c9RYH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RYG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RYF::I64;
           R2 = lvl6_r9PFF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.653141633 UTC

[section ""data" . Control.Exception.Base.recConError_closure" {
     Control.Exception.Base.recConError_closure:
         const Control.Exception.Base.recConError_info;
         const 0;
 },
 Control.Exception.Base.recConError_entry() //  [R2]
         { info_tbl: [(c9RYZ,
                       label: Control.Exception.Base.recConError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RYZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9RZ0; else goto c9RZ1;
       c9RZ0: // global
           R2 = R2;
           R1 = Control.Exception.Base.recConError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9RZ1: // global
           I64[Sp - 8] = block_c9RYX_info;
           R3 = lvl7_r9PFG_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9RYX() //  [R1]
         { info_tbl: [(c9RYX,
                       label: block_c9RYX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RYX: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionRecConError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.658885416 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionRecUpdError4_bytes" {
     Control.Exception.Base.$fExceptionRecUpdError4_bytes:
         I8[] [82,101,99,85,112,100,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.660591289 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError3_closure" {
     Control.Exception.Base.$fExceptionRecUpdError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionRecUpdError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.66263224 UTC

[section ""data" . Control.Exception.Base.$tcRecUpdError_closure" {
     Control.Exception.Base.$tcRecUpdError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 15702205725616076489;
         const 17185013925011980063;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.66436651 UTC

[section ""data" . $krep6_r9PFH_closure" {
     $krep6_r9PFH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcRecUpdError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.666023714 UTC

[section ""data" . Control.Exception.Base.$tc'RecUpdError1_closure" {
     Control.Exception.Base.$tc'RecUpdError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep6_r9PFH_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.667785661 UTC

[section ""cstring" . Control.Exception.Base.$tc'RecUpdError3_bytes" {
     Control.Exception.Base.$tc'RecUpdError3_bytes:
         I8[] [39,82,101,99,85,112,100,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.669424704 UTC

[section ""data" . Control.Exception.Base.$tc'RecUpdError2_closure" {
     Control.Exception.Base.$tc'RecUpdError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'RecUpdError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.671025784 UTC

[section ""data" . Control.Exception.Base.$tc'RecUpdError_closure" {
     Control.Exception.Base.$tc'RecUpdError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'RecUpdError2_closure+1;
         const Control.Exception.Base.$tc'RecUpdError1_closure+4;
         const 16559845159098082290;
         const 2874382059338705699;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.67378685 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError2_closure" {
     Control.Exception.Base.$fExceptionRecUpdError2_closure:
         const Control.Exception.Base.$fExceptionRecUpdError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecUpdError2_entry() //  [R1]
         { info_tbl: [(c9RZx,
                       label: Control.Exception.Base.$fExceptionRecUpdError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RZx: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9RZy; else goto c9RZz;
       c9RZy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9RZz: // global
           (_c9RZp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9RZp::I64 == 0) goto c9RZr; else goto c9RZq;
       c9RZr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9RZq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9RZp::I64;
           I64[Sp - 24] = block_c9RZs_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionRecUpdError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 17185013925011980063;
           R2 = 15702205725616076489;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9RZs() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9RZs,
                       label: block_c9RZs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RZs: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9RZt() args: 0, res: 0, upd: 0;
     }
 },
 _c9RZt() //  []
         { info_tbl: [(c9RZt,
                       label: block_c9RZt_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9RZt: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9RZC; else goto c9RZB;
       c9RZC: // global
           HpAlloc = 48;
           I64[Sp] = block_c9RZt_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9RZB: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.682287205 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecUpdError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9S0c,
                       label: Control.Exception.Base.$fExceptionRecUpdError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S0c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9S0g; else goto c9S0h;
       c9S0g: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S0h: // global
           I64[Sp - 8] = block_c9S09_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9S0C; else goto c9S0a;
       u9S0C: // global
           call _c9S09(R1) args: 0, res: 0, upd: 0;
       c9S0a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9S09() //  [R1]
         { info_tbl: [(c9S09,
                       label: block_c9S09_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S09: // global
           I64[Sp - 8] = block_c9S0f_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9S0f() //  [R1]
         { info_tbl: [(c9S0f,
                       label: block_c9S0f_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S0f: // global
           I64[Sp] = block_c9S0m_info;
           R3 = Control.Exception.Base.$fExceptionRecUpdError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9S0m() //  [R1]
         { info_tbl: [(c9S0m,
                       label: block_c9S0m_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S0m: // global
           if (R1 & 7 == 1) goto c9S0t; else goto c9S0x;
       c9S0t: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9S0x: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9S0A; else goto c9S0z;
       c9S0A: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9S0z: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.692322695 UTC

[section ""data" . Control.Exception.Base.$fExceptionRecUpdError_closure" {
     Control.Exception.Base.$fExceptionRecUpdError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionRecUpdError2_closure;
         const Control.Exception.Base.$fShowRecUpdError_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionRecUpdError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionRecUpdError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9S18,
                       label: Control.Exception.Base.$fExceptionRecUpdError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S18: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9S1c; else goto c9S1b;
       c9S1c: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S1b: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionRecUpdError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.696650737 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNoMethodError4_bytes" {
     Control.Exception.Base.$fExceptionNoMethodError4_bytes:
         I8[] [78,111,77,101,116,104,111,100,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.698552994 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError3_closure" {
     Control.Exception.Base.$fExceptionNoMethodError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionNoMethodError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.700129824 UTC

[section ""data" . Control.Exception.Base.$tcNoMethodError_closure" {
     Control.Exception.Base.$tcNoMethodError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 11351432124310594529;
         const 14675551822527927261;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.701893424 UTC

[section ""data" . $krep7_r9PFI_closure" {
     $krep7_r9PFI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcNoMethodError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.703648618 UTC

[section ""data" . Control.Exception.Base.$tc'NoMethodError1_closure" {
     Control.Exception.Base.$tc'NoMethodError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep7_r9PFI_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.705388435 UTC

[section ""cstring" . Control.Exception.Base.$tc'NoMethodError3_bytes" {
     Control.Exception.Base.$tc'NoMethodError3_bytes:
         I8[] [39,78,111,77,101,116,104,111,100,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.707036453 UTC

[section ""data" . Control.Exception.Base.$tc'NoMethodError2_closure" {
     Control.Exception.Base.$tc'NoMethodError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'NoMethodError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.708759837 UTC

[section ""data" . Control.Exception.Base.$tc'NoMethodError_closure" {
     Control.Exception.Base.$tc'NoMethodError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'NoMethodError2_closure+1;
         const Control.Exception.Base.$tc'NoMethodError1_closure+4;
         const 17186686744263410642;
         const 16452408278578849625;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.711528503 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError2_closure" {
     Control.Exception.Base.$fExceptionNoMethodError2_closure:
         const Control.Exception.Base.$fExceptionNoMethodError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNoMethodError2_entry() //  [R1]
         { info_tbl: [(c9S1E,
                       label: Control.Exception.Base.$fExceptionNoMethodError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S1E: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9S1F; else goto c9S1G;
       c9S1F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9S1G: // global
           (_c9S1w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9S1w::I64 == 0) goto c9S1y; else goto c9S1x;
       c9S1y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9S1x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9S1w::I64;
           I64[Sp - 24] = block_c9S1z_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionNoMethodError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 14675551822527927261;
           R2 = 11351432124310594529;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9S1z() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9S1z,
                       label: block_c9S1z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S1z: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9S1A() args: 0, res: 0, upd: 0;
     }
 },
 _c9S1A() //  []
         { info_tbl: [(c9S1A,
                       label: block_c9S1A_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S1A: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9S1J; else goto c9S1I;
       c9S1J: // global
           HpAlloc = 48;
           I64[Sp] = block_c9S1A_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9S1I: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.720079551 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNoMethodError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9S2j,
                       label: Control.Exception.Base.$fExceptionNoMethodError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S2j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9S2n; else goto c9S2o;
       c9S2n: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S2o: // global
           I64[Sp - 8] = block_c9S2g_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9S2J; else goto c9S2h;
       u9S2J: // global
           call _c9S2g(R1) args: 0, res: 0, upd: 0;
       c9S2h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9S2g() //  [R1]
         { info_tbl: [(c9S2g,
                       label: block_c9S2g_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S2g: // global
           I64[Sp - 8] = block_c9S2m_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9S2m() //  [R1]
         { info_tbl: [(c9S2m,
                       label: block_c9S2m_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S2m: // global
           I64[Sp] = block_c9S2t_info;
           R3 = Control.Exception.Base.$fExceptionNoMethodError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9S2t() //  [R1]
         { info_tbl: [(c9S2t,
                       label: block_c9S2t_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S2t: // global
           if (R1 & 7 == 1) goto c9S2A; else goto c9S2E;
       c9S2A: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9S2E: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9S2H; else goto c9S2G;
       c9S2H: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9S2G: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.729997386 UTC

[section ""data" . Control.Exception.Base.$fExceptionNoMethodError_closure" {
     Control.Exception.Base.$fExceptionNoMethodError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionNoMethodError2_closure;
         const Control.Exception.Base.$fShowNoMethodError_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionNoMethodError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNoMethodError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9S3f,
                       label: Control.Exception.Base.$fExceptionNoMethodError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S3f: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9S3j; else goto c9S3i;
       c9S3j: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S3i: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionNoMethodError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.734818152 UTC

[section ""cstring" . lvl8_r9PFJ_bytes" {
     lvl8_r9PFJ_bytes:
         I8[] [78,111,32,105,110,115,116,97,110,99,101,32,110,111,114,32,100,101,102,97,117,108,116,32,109,101,116,104,111,100,32,102,111,114,32,99,108,97,115,115,32,111,112,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.736618556 UTC

[section ""data" . lvl9_r9PFK_closure" {
     lvl9_r9PFK_closure:
         const lvl9_r9PFK_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r9PFK_entry() //  [R1]
         { info_tbl: [(c9S3z,
                       label: lvl9_r9PFK_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S3z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9S3A; else goto c9S3B;
       c9S3A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9S3B: // global
           (_c9S3w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9S3w::I64 == 0) goto c9S3y; else goto c9S3x;
       c9S3y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9S3x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9S3w::I64;
           R2 = lvl8_r9PFJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.740657311 UTC

[section ""data" . Control.Exception.Base.noMethodBindingError_closure" {
     Control.Exception.Base.noMethodBindingError_closure:
         const Control.Exception.Base.noMethodBindingError_info;
         const 0;
 },
 Control.Exception.Base.noMethodBindingError_entry() //  [R2]
         { info_tbl: [(c9S3Q,
                       label: Control.Exception.Base.noMethodBindingError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S3Q: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9S3R; else goto c9S3S;
       c9S3R: // global
           R2 = R2;
           R1 = Control.Exception.Base.noMethodBindingError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S3S: // global
           I64[Sp - 8] = block_c9S3O_info;
           R3 = lvl9_r9PFK_closure;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Exception.untangle_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9S3O() //  [R1]
         { info_tbl: [(c9S3O,
                       label: block_c9S3O_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S3O: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionNoMethodError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.74624533 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionTypeError4_bytes" {
     Control.Exception.Base.$fExceptionTypeError4_bytes:
         I8[] [84,121,112,101,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.747951132 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError3_closure" {
     Control.Exception.Base.$fExceptionTypeError3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionTypeError4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.749782151 UTC

[section ""data" . Control.Exception.Base.$tcTypeError_closure" {
     Control.Exception.Base.$tcTypeError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionTypeError3_closure+1;
         const GHC.Types.krep$*_closure;
         const 16164392450212773017;
         const 7054022894506300317;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.751647849 UTC

[section ""data" . $krep8_r9PFL_closure" {
     $krep8_r9PFL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcTypeError_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.753867357 UTC

[section ""data" . Control.Exception.Base.$tc'TypeError1_closure" {
     Control.Exception.Base.$tc'TypeError1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9PFw_closure+1;
         const $krep8_r9PFL_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.755634624 UTC

[section ""cstring" . Control.Exception.Base.$tc'TypeError3_bytes" {
     Control.Exception.Base.$tc'TypeError3_bytes:
         I8[] [39,84,121,112,101,69,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.757163678 UTC

[section ""data" . Control.Exception.Base.$tc'TypeError2_closure" {
     Control.Exception.Base.$tc'TypeError2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'TypeError3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.759230225 UTC

[section ""data" . Control.Exception.Base.$tc'TypeError_closure" {
     Control.Exception.Base.$tc'TypeError_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'TypeError2_closure+1;
         const Control.Exception.Base.$tc'TypeError1_closure+4;
         const 2042750002965703545;
         const 3275664116896771855;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.76164286 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError2_closure" {
     Control.Exception.Base.$fExceptionTypeError2_closure:
         const Control.Exception.Base.$fExceptionTypeError2_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionTypeError2_entry() //  [R1]
         { info_tbl: [(c9S4o,
                       label: Control.Exception.Base.$fExceptionTypeError2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S4o: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9S4p; else goto c9S4q;
       c9S4p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9S4q: // global
           (_c9S4g::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9S4g::I64 == 0) goto c9S4i; else goto c9S4h;
       c9S4i: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9S4h: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9S4g::I64;
           I64[Sp - 24] = block_c9S4j_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionTypeError3_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 7054022894506300317;
           R2 = 16164392450212773017;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9S4j() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9S4j,
                       label: block_c9S4j_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S4j: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9S4k() args: 0, res: 0, upd: 0;
     }
 },
 _c9S4k() //  []
         { info_tbl: [(c9S4k,
                       label: block_c9S4k_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S4k: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9S4t; else goto c9S4s;
       c9S4t: // global
           HpAlloc = 48;
           I64[Sp] = block_c9S4k_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9S4s: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.770507082 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError_$cfromException_closure" {
     Control.Exception.Base.$fExceptionTypeError_$cfromException_closure:
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionTypeError_$cfromException_entry() //  [R2]
         { info_tbl: [(c9S53,
                       label: Control.Exception.Base.$fExceptionTypeError_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S53: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9S57; else goto c9S58;
       c9S57: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionTypeError_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S58: // global
           I64[Sp - 8] = block_c9S50_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9S5t; else goto c9S51;
       u9S5t: // global
           call _c9S50(R1) args: 0, res: 0, upd: 0;
       c9S51: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9S50() //  [R1]
         { info_tbl: [(c9S50,
                       label: block_c9S50_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S50: // global
           I64[Sp - 8] = block_c9S56_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9S56() //  [R1]
         { info_tbl: [(c9S56,
                       label: block_c9S56_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S56: // global
           I64[Sp] = block_c9S5d_info;
           R3 = Control.Exception.Base.$fExceptionTypeError2_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9S5d() //  [R1]
         { info_tbl: [(c9S5d,
                       label: block_c9S5d_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S5d: // global
           if (R1 & 7 == 1) goto c9S5k; else goto c9S5o;
       c9S5k: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9S5o: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9S5r; else goto c9S5q;
       c9S5r: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9S5q: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.779528238 UTC

[section ""data" . Control.Exception.Base.$fExceptionTypeError_closure" {
     Control.Exception.Base.$fExceptionTypeError_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionTypeError2_closure;
         const Control.Exception.Base.$fShowTypeError_closure+1;
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionTypeError1_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionTypeError_$ctoException_closure" {
     Control.Exception.Base.$fExceptionTypeError_$ctoException_closure:
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionTypeError_$ctoException_entry() //  [R2]
         { info_tbl: [(c9S5Z,
                       label: Control.Exception.Base.$fExceptionTypeError_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S5Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9S63; else goto c9S62;
       c9S63: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionTypeError_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S62: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionTypeError_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.78445956 UTC

[section ""data" . Control.Exception.Base.typeError_closure" {
     Control.Exception.Base.typeError_closure:
         const Control.Exception.Base.typeError_info;
         const 0;
 },
 Control.Exception.Base.typeError_entry() //  [R2]
         { info_tbl: [(c9S6i,
                       label: Control.Exception.Base.typeError_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S6i: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9S6j; else goto c9S6k;
       c9S6j: // global
           R2 = R2;
           R1 = Control.Exception.Base.typeError_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S6k: // global
           I64[Sp - 8] = block_c9S6g_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.CString.unpackCStringUtf8#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9S6g() //  [R1]
         { info_tbl: [(c9S6g,
                       label: block_c9S6g_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S6g: // global
           R3 = R1;
           R2 = Control.Exception.Base.$fExceptionTypeError_closure+1;
           Sp = Sp + 8;
           call GHC.Exception.throw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.790104245 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNonTermination5_bytes" {
     Control.Exception.Base.$fExceptionNonTermination5_bytes:
         I8[] [78,111,110,84,101,114,109,105,110,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.791729621 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination4_closure" {
     Control.Exception.Base.$fExceptionNonTermination4_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionNonTermination5_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.793723874 UTC

[section ""data" . Control.Exception.Base.$tcNonTermination_closure" {
     Control.Exception.Base.$tcNonTermination_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination4_closure+1;
         const GHC.Types.krep$*_closure;
         const 3579424895879668618;
         const 10599900892006414641;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.795484142 UTC

[section ""data" . Control.Exception.Base.$tc'NonTermination1_closure" {
     Control.Exception.Base.$tc'NonTermination1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcNonTermination_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.797129658 UTC

[section ""cstring" . Control.Exception.Base.$tc'NonTermination3_bytes" {
     Control.Exception.Base.$tc'NonTermination3_bytes:
         I8[] [39,78,111,110,84,101,114,109,105,110,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.798773186 UTC

[section ""data" . Control.Exception.Base.$tc'NonTermination2_closure" {
     Control.Exception.Base.$tc'NonTermination2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'NonTermination3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.800418674 UTC

[section ""data" . Control.Exception.Base.$tc'NonTermination_closure" {
     Control.Exception.Base.$tc'NonTermination_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'NonTermination2_closure+1;
         const Control.Exception.Base.$tc'NonTermination1_closure+1;
         const 12968537629115503750;
         const 16395462767232503200;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.802783059 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination3_closure" {
     Control.Exception.Base.$fExceptionNonTermination3_closure:
         const Control.Exception.Base.$fExceptionNonTermination3_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination3_entry() //  [R1]
         { info_tbl: [(c9S6P,
                       label: Control.Exception.Base.$fExceptionNonTermination3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S6P: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9S6Q; else goto c9S6R;
       c9S6Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9S6R: // global
           (_c9S6H::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9S6H::I64 == 0) goto c9S6J; else goto c9S6I;
       c9S6J: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9S6I: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9S6H::I64;
           I64[Sp - 24] = block_c9S6K_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionNonTermination4_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 10599900892006414641;
           R2 = 3579424895879668618;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9S6K() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9S6K,
                       label: block_c9S6K_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S6K: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9S6L() args: 0, res: 0, upd: 0;
     }
 },
 _c9S6L() //  []
         { info_tbl: [(c9S6L,
                       label: block_c9S6L_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S6L: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9S6U; else goto c9S6T;
       c9S6U: // global
           HpAlloc = 48;
           I64[Sp] = block_c9S6L_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9S6T: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.811156172 UTC

[section ""cstring" . Control.Exception.Base.$fExceptionNestedAtomically5_bytes" {
     Control.Exception.Base.$fExceptionNestedAtomically5_bytes:
         I8[] [78,101,115,116,101,100,65,116,111,109,105,99,97,108,108,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.812841419 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically4_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically4_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$fExceptionNestedAtomically5_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.814596438 UTC

[section ""data" . Control.Exception.Base.$tcNestedAtomically_closure" {
     Control.Exception.Base.$tcNestedAtomically_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically4_closure+1;
         const GHC.Types.krep$*_closure;
         const 13388460688970090897;
         const 8422109474180001052;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.816411549 UTC

[section ""data" . Control.Exception.Base.$tc'NestedAtomically1_closure" {
     Control.Exception.Base.$tc'NestedAtomically1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Exception.Base.$tcNestedAtomically_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.819849794 UTC

[section ""cstring" . Control.Exception.Base.$tc'NestedAtomically3_bytes" {
     Control.Exception.Base.$tc'NestedAtomically3_bytes:
         I8[] [39,78,101,115,116,101,100,65,116,111,109,105,99,97,108,108,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.821631241 UTC

[section ""data" . Control.Exception.Base.$tc'NestedAtomically2_closure" {
     Control.Exception.Base.$tc'NestedAtomically2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Exception.Base.$tc'NestedAtomically3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.823397394 UTC

[section ""data" . Control.Exception.Base.$tc'NestedAtomically_closure" {
     Control.Exception.Base.$tc'NestedAtomically_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Exception.Base.$trModule_closure+1;
         const Control.Exception.Base.$tc'NestedAtomically2_closure+1;
         const Control.Exception.Base.$tc'NestedAtomically1_closure+1;
         const 4753625237420970988;
         const 7635940481883810337;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.825950453 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically3_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically3_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically3_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically3_entry() //  [R1]
         { info_tbl: [(c9S7F,
                       label: Control.Exception.Base.$fExceptionNestedAtomically3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S7F: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9S7G; else goto c9S7H;
       c9S7G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9S7H: // global
           (_c9S7x::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9S7x::I64 == 0) goto c9S7z; else goto c9S7y;
       c9S7z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9S7y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9S7x::I64;
           I64[Sp - 24] = block_c9S7A_info;
           R6 = 0;
           R5 = Control.Exception.Base.$fExceptionNestedAtomically4_closure+1;
           R4 = Control.Exception.Base.$trModule_closure+1;
           R3 = 8422109474180001052;
           R2 = 13388460688970090897;
           P64[Sp - 40] = GHC.Types.krep$*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 _c9S7A() //  [R1, R2, R3, R4, R5]
         { info_tbl: [(c9S7A,
                       label: block_c9S7A_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S7A: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _c9S7B() args: 0, res: 0, upd: 0;
     }
 },
 _c9S7B() //  []
         { info_tbl: [(c9S7B,
                       label: block_c9S7B_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S7B: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c9S7K; else goto c9S7J;
       c9S7K: // global
           HpAlloc = 48;
           I64[Sp] = block_c9S7B_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c9S7J: // global
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 38;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.8347174 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure" {
     Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure:
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination_$cfromException_entry() //  [R2]
         { info_tbl: [(c9S8k,
                       label: Control.Exception.Base.$fExceptionNonTermination_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S8k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9S8o; else goto c9S8p;
       c9S8o: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S8p: // global
           I64[Sp - 8] = block_c9S8h_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9S8K; else goto c9S8i;
       u9S8K: // global
           call _c9S8h(R1) args: 0, res: 0, upd: 0;
       c9S8i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9S8h() //  [R1]
         { info_tbl: [(c9S8h,
                       label: block_c9S8h_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S8h: // global
           I64[Sp - 8] = block_c9S8n_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9S8n() //  [R1]
         { info_tbl: [(c9S8n,
                       label: block_c9S8n_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S8n: // global
           I64[Sp] = block_c9S8u_info;
           R3 = Control.Exception.Base.$fExceptionNonTermination3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9S8u() //  [R1]
         { info_tbl: [(c9S8u,
                       label: block_c9S8u_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S8u: // global
           if (R1 & 7 == 1) goto c9S8B; else goto c9S8F;
       c9S8B: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9S8F: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9S8I; else goto c9S8H;
       c9S8I: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9S8H: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.844134414 UTC

[section ""data" . Control.Exception.Base.$fExceptionNonTermination_closure" {
     Control.Exception.Base.$fExceptionNonTermination_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionNonTermination3_closure;
         const Control.Exception.Base.$fShowNonTermination_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure" {
     Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure:
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNonTermination_$ctoException_entry() //  [R2]
         { info_tbl: [(c9S9g,
                       label: Control.Exception.Base.$fExceptionNonTermination_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S9g: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9S9k; else goto c9S9j;
       c9S9k: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S9j: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionNonTermination_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.848824453 UTC

[section ""data" . Control.Exception.Base.nonTermination_closure" {
     Control.Exception.Base.nonTermination_closure:
         const Control.Exception.Base.nonTermination_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.nonTermination_entry() //  [R1]
         { info_tbl: [(c9S9z,
                       label: Control.Exception.Base.nonTermination_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S9z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9S9A; else goto c9S9B;
       c9S9A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9S9B: // global
           (_c9S9w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9S9w::I64 == 0) goto c9S9y; else goto c9S9x;
       c9S9y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9S9x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9S9w::I64;
           R2 = Control.Exception.Base.NonTermination_closure+1;
           Sp = Sp - 16;
           call Control.Exception.Base.$fExceptionNonTermination_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.853625512 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_entry() //  [R2]
         { info_tbl: [(c9S9R,
                       label: Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S9R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9S9V; else goto c9S9W;
       c9S9V: // global
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9S9W: // global
           I64[Sp - 8] = block_c9S9O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Sah; else goto c9S9P;
       u9Sah: // global
           call _c9S9O(R1) args: 0, res: 0, upd: 0;
       c9S9P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9S9O() //  [R1]
         { info_tbl: [(c9S9O,
                       label: block_c9S9O_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S9O: // global
           I64[Sp - 8] = block_c9S9U_info;
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9S9U() //  [R1]
         { info_tbl: [(c9S9U,
                       label: block_c9S9U_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9S9U: // global
           I64[Sp] = block_c9Sa1_info;
           R3 = Control.Exception.Base.$fExceptionNestedAtomically3_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Sa1() //  [R1]
         { info_tbl: [(c9Sa1,
                       label: block_c9Sa1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Sa1: // global
           if (R1 & 7 == 1) goto c9Sa8; else goto c9Sac;
       c9Sa8: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Sac: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Saf; else goto c9Sae;
       c9Saf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Sae: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.862935187 UTC

[section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_closure:
         const GHC.Exception.C:Exception_con_info;
         const Control.Exception.Base.$fExceptionNestedAtomically3_closure;
         const Control.Exception.Base.$fShowNestedAtomically_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure+1;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure+1;
         const 0;
 },
 section ""data" . Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure" {
     Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure:
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_info;
         const 0;
 },
 Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_entry() //  [R2]
         { info_tbl: [(c9SaN,
                       label: Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9SaN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9SaR; else goto c9SaQ;
       c9SaR: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9SaQ: // global
           I64[Hp - 16] = GHC.Exception.SomeException_con_info;
           P64[Hp - 8] = Control.Exception.Base.$fExceptionNestedAtomically_closure+1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.867878431 UTC

[section ""data" . Control.Exception.Base.nestedAtomically_closure" {
     Control.Exception.Base.nestedAtomically_closure:
         const Control.Exception.Base.nestedAtomically_info;
         const 0;
         const 0;
         const 0;
 },
 Control.Exception.Base.nestedAtomically_entry() //  [R1]
         { info_tbl: [(c9Sb6,
                       label: Control.Exception.Base.nestedAtomically_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Sb6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Sb7; else goto c9Sb8;
       c9Sb7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Sb8: // global
           (_c9Sb3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Sb3::I64 == 0) goto c9Sb5; else goto c9Sb4;
       c9Sb5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Sb4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Sb3::I64;
           R2 = Control.Exception.Base.NestedAtomically_closure+1;
           Sp = Sp - 16;
           call Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.871748805 UTC

[section ""data" . Control.Exception.Base.NestedAtomically_closure" {
     Control.Exception.Base.NestedAtomically_closure:
         const Control.Exception.Base.NestedAtomically_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.873700346 UTC

[section ""data" . Control.Exception.Base.NonTermination_closure" {
     Control.Exception.Base.NonTermination_closure:
         const Control.Exception.Base.NonTermination_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.875366188 UTC

[section ""relreadonly" . Control.Exception.Base.NestedAtomically_closure_tbl" {
     Control.Exception.Base.NestedAtomically_closure_tbl:
         const Control.Exception.Base.NestedAtomically_closure+1;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.877091286 UTC

[Control.Exception.Base.NestedAtomically_con_entry() //  [R1]
         { info_tbl: [(c9Sbk,
                       label: Control.Exception.Base.NestedAtomically_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,67,111,110,116,114,111,108,46,69,120,99,101,112,116,105,111,110,46,66,97,115,101,46,78,101,115,116,101,100,65,116,111,109,105,99,97,108,108,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Sbk: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.880267145 UTC

[section ""relreadonly" . Control.Exception.Base.NonTermination_closure_tbl" {
     Control.Exception.Base.NonTermination_closure_tbl:
         const Control.Exception.Base.NonTermination_closure+1;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.882274428 UTC

[Control.Exception.Base.NonTermination_con_entry() //  [R1]
         { info_tbl: [(c9Sbs,
                       label: Control.Exception.Base.NonTermination_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,67,111,110,116,114,111,108,46,69,120,99,101,112,116,105,111,110,46,66,97,115,101,46,78,111,110,84,101,114,109,105,110,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Sbs: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:57.885880776 UTC

[section ""relreadonly" . S9Ru2_srt" {
     S9Ru2_srt:
         const Control.Exception.Base.$fExceptionNonTermination1_closure;
         const Control.Exception.Base.$fShowNonTermination_$cshowsPrec_closure;
         const Control.Exception.Base.$fExceptionNonTermination_$cshow_closure;
         const Control.Exception.Base.$fShowNonTermination1_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically1_closure;
         const Control.Exception.Base.$fShowNestedAtomically_$cshowsPrec_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cshow_closure;
         const Control.Exception.Base.$fShowNestedAtomically1_closure;
         const Control.Exception.Base.runtimeError_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Control.Exception.Base.absentError_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$cfromException_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail2_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail_closure;
         const Control.Exception.Base.$fExceptionPatternMatchFail_$ctoException_closure;
         const Control.Exception.Base.patError_closure;
         const GHC.IO.Exception.untangle_closure;
         const lvl2_r9PFz_closure;
         const Control.Exception.Base.nonExhaustiveGuardsError_closure;
         const lvl4_r9PFB_closure;
         const Control.Exception.Base.$fExceptionRecSelError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionRecSelError2_closure;
         const Control.Exception.Base.$fExceptionRecSelError_closure;
         const Control.Exception.Base.$fExceptionRecSelError_$ctoException_closure;
         const Control.Exception.Base.recSelError_closure;
         const Control.Exception.Base.$fExceptionRecConError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionRecConError2_closure;
         const Control.Exception.Base.$fExceptionRecConError_closure;
         const Control.Exception.Base.$fExceptionRecConError_$ctoException_closure;
         const Control.Exception.Base.recConError_closure;
         const lvl7_r9PFG_closure;
         const Control.Exception.Base.$fExceptionRecUpdError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionRecUpdError2_closure;
         const Control.Exception.Base.$fExceptionRecUpdError_closure;
         const Control.Exception.Base.$fExceptionRecUpdError_$ctoException_closure;
         const Control.Exception.Base.$fExceptionNoMethodError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionNoMethodError2_closure;
         const Control.Exception.Base.$fExceptionNoMethodError_closure;
         const Control.Exception.Base.$fExceptionNoMethodError_$ctoException_closure;
         const Control.Exception.Base.noMethodBindingError_closure;
         const lvl9_r9PFK_closure;
         const Control.Exception.Base.$fExceptionTypeError_$cfromException_closure;
         const Control.Exception.Base.$fExceptionTypeError2_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const Control.Exception.Base.$fExceptionTypeError_closure;
         const Control.Exception.Base.$fExceptionTypeError_$ctoException_closure;
         const Control.Exception.Base.typeError_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const Control.Exception.Base.$fExceptionNonTermination_$cfromException_closure;
         const Control.Exception.Base.$fExceptionNonTermination3_closure;
         const Control.Exception.Base.$fExceptionNonTermination_closure;
         const Control.Exception.Base.$fExceptionNonTermination_$ctoException_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_$cfromException_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically3_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_closure;
         const Control.Exception.Base.$fExceptionNestedAtomically_$ctoException_closure;
 }]

