
==================== Raw Cmm ====================
2018-03-16 16:09:09.378378987 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:09:09.380472571 UTC

[section ""data" . Control.Concurrent.QSem.$WQSem_closure" {
     Control.Concurrent.QSem.$WQSem_closure:
         const Control.Concurrent.QSem.$WQSem_info;
 },
 Control.Concurrent.QSem.$WQSem_entry() //  [R2]
         { []
         }
     {offset
       cdU8G: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdU8K; else goto cdU8L;
       cdU8K: // global
           R2 = R2;
           R1 = Control.Concurrent.QSem.$WQSem_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdU8L: // global
           I64[Sp - 8] = block_cdU8D_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udU8P; else goto cdU8E;
       udU8P: // global
           call _cdU8D(R1) args: 0, res: 0, upd: 0;
       cdU8E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.$WQSem_info" {
     Control.Concurrent.QSem.$WQSem_info:
         const Control.Concurrent.QSem.$WQSem_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdU8D() //  [R1]
         { []
         }
     {offset
       cdU8D: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdU8O; else goto cdU8N;
       cdU8O: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdU8N: // global
           _sdTOZ::P64 = P64[R1 + 7];
           I64[Hp - 8] = Control.Concurrent.QSem.QSem_con_info;
           P64[Hp] = _sdTOZ::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdU8D_info" {
     block_cdU8D_info:
         const _cdU8D;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.386850762 UTC

[section ""cstring" . Control.Concurrent.QSem.$trModule4_bytes" {
     Control.Concurrent.QSem.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.388800354 UTC

[section ""data" . Control.Concurrent.QSem.$trModule3_closure" {
     Control.Concurrent.QSem.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.QSem.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.390699077 UTC

[section ""cstring" . Control.Concurrent.QSem.$trModule2_bytes" {
     Control.Concurrent.QSem.$trModule2_bytes:
         I8[] [67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,81,83,101,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.392589713 UTC

[section ""data" . Control.Concurrent.QSem.$trModule1_closure" {
     Control.Concurrent.QSem.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.QSem.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.394573356 UTC

[section ""data" . Control.Concurrent.QSem.$trModule_closure" {
     Control.Concurrent.QSem.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Control.Concurrent.QSem.$trModule3_closure+1;
         const Control.Concurrent.QSem.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.396468241 UTC

[section ""data" . $krep_rdTOF_closure" {
     $krep_rdTOF_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.398393912 UTC

[section ""data" . $krep1_rdTOG_closure" {
     $krep1_rdTOG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.400335561 UTC

[section ""data" . $krep2_rdTOH_closure" {
     $krep2_rdTOH_closure:
         const :_con_info;
         const $krep_rdTOF_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.403674156 UTC

[section ""data" . $krep3_rdTOI_closure" {
     $krep3_rdTOI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep2_rdTOH_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.406000546 UTC

[section ""data" . $krep4_rdTOJ_closure" {
     $krep4_rdTOJ_closure:
         const :_con_info;
         const $krep3_rdTOI_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.407898202 UTC

[section ""data" . $krep5_rdTOK_closure" {
     $krep5_rdTOK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep4_rdTOJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.409844789 UTC

[section ""data" . $krep6_rdTOL_closure" {
     $krep6_rdTOL_closure:
         const :_con_info;
         const $krep5_rdTOK_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.411731335 UTC

[section ""data" . $krep7_rdTOM_closure" {
     $krep7_rdTOM_closure:
         const :_con_info;
         const $krep5_rdTOK_closure+1;
         const $krep6_rdTOL_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.414022614 UTC

[section ""data" . $krep8_rdTON_closure" {
     $krep8_rdTON_closure:
         const :_con_info;
         const $krep1_rdTOG_closure+1;
         const $krep7_rdTOM_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.415946814 UTC

[section ""data" . $krep9_rdTOO_closure" {
     $krep9_rdTOO_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,,)_closure;
         const $krep8_rdTON_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.417867861 UTC

[section ""data" . $krep10_rdTOP_closure" {
     $krep10_rdTOP_closure:
         const :_con_info;
         const $krep9_rdTOO_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.419746598 UTC

[section ""data" . $krep11_rdTOQ_closure" {
     $krep11_rdTOQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep10_rdTOP_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.421657118 UTC

[section ""cstring" . Control.Concurrent.QSem.$tcQSem2_bytes" {
     Control.Concurrent.QSem.$tcQSem2_bytes:
         I8[] [81,83,101,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.423515208 UTC

[section ""data" . Control.Concurrent.QSem.$tcQSem1_closure" {
     Control.Concurrent.QSem.$tcQSem1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.QSem.$tcQSem2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.426041692 UTC

[section ""data" . Control.Concurrent.QSem.$tcQSem_closure" {
     Control.Concurrent.QSem.$tcQSem_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Concurrent.QSem.$trModule_closure+1;
         const Control.Concurrent.QSem.$tcQSem1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9564161763912145234;
         const 3945938196429110556;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.428558367 UTC

[section ""data" . $krep12_rdTOR_closure" {
     $krep12_rdTOR_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Concurrent.QSem.$tcQSem_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.430564715 UTC

[section ""data" . Control.Concurrent.QSem.$tc'QSem1_closure" {
     Control.Concurrent.QSem.$tc'QSem1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_rdTOQ_closure+1;
         const $krep12_rdTOR_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.432449832 UTC

[section ""cstring" . Control.Concurrent.QSem.$tc'QSem3_bytes" {
     Control.Concurrent.QSem.$tc'QSem3_bytes:
         I8[] [39,81,83,101,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.435493578 UTC

[section ""data" . Control.Concurrent.QSem.$tc'QSem2_closure" {
     Control.Concurrent.QSem.$tc'QSem2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.QSem.$tc'QSem3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.437981888 UTC

[section ""data" . Control.Concurrent.QSem.$tc'QSem_closure" {
     Control.Concurrent.QSem.$tc'QSem_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Concurrent.QSem.$trModule_closure+1;
         const Control.Concurrent.QSem.$tc'QSem2_closure+1;
         const Control.Concurrent.QSem.$tc'QSem1_closure+4;
         const 16012040391974534726;
         const 6627878139257558952;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.440335461 UTC

[section ""cstring" . lvl_rdTOS_bytes" {
     lvl_rdTOS_bytes:
         I8[] [110,101,119,81,83,101,109,58,32,73,110,105,116,105,97,108,32,113,117,97,110,116,105,116,121,32,109,117,115,116,32,98,101,32,110,111,110,45,110,101,103,97,116,105,118,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.443049841 UTC

[section ""data" . Control.Concurrent.QSem.newQSem2_closure" {
     Control.Concurrent.QSem.newQSem2_closure:
         const Control.Concurrent.QSem.newQSem2_info;
         const 0;
 },
 Control.Concurrent.QSem.newQSem2_entry() //  []
         { []
         }
     {offset
       cdU9w: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdU9x; else goto cdU9y;
       cdU9x: // global
           R1 = Control.Concurrent.QSem.newQSem2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdU9y: // global
           I64[Sp - 8] = block_cdU9u_info;
           R2 = lvl_rdTOS_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.newQSem2_info" {
     Control.Concurrent.QSem.newQSem2_info:
         const Control.Concurrent.QSem.newQSem2_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const SdTSm_srt;
 },
 _cdU9u() //  [R1]
         { []
         }
     {offset
       cdU9u: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdU9u_info" {
     block_cdU9u_info:
         const _cdU9u;
         const 0;
         const 4294967326;
         const SdTSm_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.450703448 UTC

[section ""data" . Control.Concurrent.QSem.newQSem1_closure" {
     Control.Concurrent.QSem.newQSem1_closure:
         const Control.Concurrent.QSem.newQSem1_info;
         const 0;
 },
 Control.Concurrent.QSem.newQSem1_entry() //  [R2]
         { []
         }
     {offset
       cdU9R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdU9S; else goto cdU9T;
       cdU9S: // global
           R2 = R2;
           R1 = Control.Concurrent.QSem.newQSem1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdU9T: // global
           I64[Sp - 8] = block_cdU9O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udUaf; else goto cdU9P;
       udUaf: // global
           call _cdU9O(R1) args: 0, res: 0, upd: 0;
       cdU9P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.newQSem1_info" {
     Control.Concurrent.QSem.newQSem1_info:
         const Control.Concurrent.QSem.newQSem1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SdTSm_srt+8;
 },
 _cdU9O() //  [R1]
         { []
         }
     {offset
       cdU9O: // global
           if (%MO_S_Ge_W64(I64[R1 + 7], 0)) goto cdUa7; else goto cdUae;
       cdUa7: // global
           I64[Sp - 8] = block_cdUa0_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
       cdUae: // global
           Sp = Sp + 8;
           call Control.Concurrent.QSem.newQSem2_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdU9O_info" {
     block_cdU9O_info:
         const _cdU9O;
         const 0;
         const 4294967326;
         const SdTSm_srt+8;
 },
 _cdUa0() //  [R1]
         { []
         }
     {offset
       cdUa0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdUaa; else goto cdUa9;
       cdUaa: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdUa9: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp] = block_cdUa3_info;
           R2 = Hp - 23;
           _sdTP9::P64 = R1;
           R1 = R1;
           P64[Sp + 8] = _sdTP9::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUa0_info" {
     block_cdUa0_info:
         const _cdUa0;
         const 1;
         const 30;
 },
 _cdUa3() //  []
         { []
         }
     {offset
       cdUa3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdUad; else goto cdUac;
       cdUad: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdUac: // global
           I64[Hp - 8] = Control.Concurrent.QSem.QSem_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUa3_info" {
     block_cdUa3_info:
         const _cdUa3;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.462382338 UTC

[section ""data" . Control.Concurrent.QSem.newQSem_closure" {
     Control.Concurrent.QSem.newQSem_closure:
         const Control.Concurrent.QSem.newQSem_info;
         const 0;
 },
 Control.Concurrent.QSem.newQSem_entry() //  [R2]
         { []
         }
     {offset
       cdUaC: // global
           R2 = R2;
           call Control.Concurrent.QSem.newQSem1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.newQSem_info" {
     Control.Concurrent.QSem.newQSem_info:
         const Control.Concurrent.QSem.newQSem_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdTSm_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.467129308 UTC

[section ""data" . lvl1_rdTOT_closure" {
     lvl1_rdTOT_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.469540976 UTC

[section ""data" . lvl2_rdTOU_closure" {
     lvl2_rdTOU_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.472192553 UTC

[section ""data" . lvl3_rdTOV_closure" {
     lvl3_rdTOV_closure:
         const (,,)_con_info;
         const lvl2_rdTOU_closure+1;
         const GHC.Types.[]_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.479510999 UTC

[section ""data" . Control.Concurrent.QSem.signalQSem2_closure" {
     Control.Concurrent.QSem.signalQSem2_closure:
         const Control.Concurrent.QSem.signalQSem2_info;
 },
 Control.Concurrent.QSem.signalQSem2_entry() //  [R2, R3]
         { []
         }
     {offset
       cdUaX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdUaY; else goto udUbF;
       cdUaY: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.QSem.signalQSem2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       udUbF: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cdUaN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.signalQSem2_info" {
     Control.Concurrent.QSem.signalQSem2_info:
         const Control.Concurrent.QSem.signalQSem2_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cdUaN() //  []
         { []
         }
     {offset
       cdUaN: // global
           _sdTPd::P64 = P64[Sp];
           I64[Sp] = block_cdUaQ_info;
           R1 = _sdTPd::P64;
           if (R1 & 7 != 0) goto udUbI; else goto cdUaR;
       udUbI: // global
           call _cdUaQ(R1) args: 0, res: 0, upd: 0;
       cdUaR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdUaQ() //  [R1]
         { []
         }
     {offset
       cdUaQ: // global
           if (R1 & 7 == 1) goto cdUaU; else goto cdUaV;
       cdUaU: // global
           _sdTPe::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdUb2_info;
           R1 = _sdTPe::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udUbJ; else goto cdUb4;
       udUbJ: // global
           call _cdUb2(R1) args: 0, res: 0, upd: 0;
       cdUb4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdUaV: // global
           I64[Sp - 8] = block_cdUbm_info;
           _sdTPm::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdTPm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udUbK; else goto cdUbo;
       udUbK: // global
           call _cdUbm(R1) args: 0, res: 0, upd: 0;
       cdUbo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUaQ_info" {
     block_cdUaQ_info:
         const _cdUaQ;
         const 1;
         const 30;
 },
 _cdUb2() //  [R1]
         { []
         }
     {offset
       cdUb2: // global
           if (R1 & 7 == 1) goto cdUba; else goto cdUbf;
       cdUba: // global
           R1 = lvl3_rdTOV_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdUbf: // global
           I64[Sp] = block_cdUbd_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUb2_info" {
     block_cdUb2_info:
         const _cdUb2;
         const 0;
         const 30;
 },
 _cdUbd() //  [R1]
         { []
         }
     {offset
       cdUbd: // global
           P64[Sp - 8] = R1;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call _cdUaN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdUbd_info" {
     block_cdUbd_info:
         const _cdUbd;
         const 0;
         const 30;
 },
 _cdUbm() //  [R1]
         { []
         }
     {offset
       cdUbm: // global
           I64[Sp] = block_cdUbs_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 7];
           call stg_tryPutMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUbm_info" {
     block_cdUbm_info:
         const _cdUbm;
         const 2;
         const 30;
 },
 _cdUbs() //  [R1]
         { []
         }
     {offset
       cdUbs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdUbx; else goto cdUbw;
       cdUbx: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdUbw: // global
           _sdTPe::P64 = P64[Sp + 16];
           _sdTPm::P64 = P64[Sp + 8];
           if (R1 == 0) goto cdUbD; else goto cdUbC;
       cdUbD: // global
           Hp = Hp - 32;
           P64[Sp + 8] = _sdTPm::P64;
           P64[Sp + 16] = _sdTPe::P64;
           Sp = Sp + 8;
           call _cdUaN() args: 0, res: 0, upd: 0;
       cdUbC: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = lvl1_rdTOT_closure+1;
           P64[Hp - 8] = _sdTPm::P64;
           P64[Hp] = _sdTPe::P64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUbs_info" {
     block_cdUbs_info:
         const _cdUbs;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.496612239 UTC

[section ""data" . Control.Concurrent.QSem.$wsignalQSem_closure" {
     Control.Concurrent.QSem.$wsignalQSem_closure:
         const Control.Concurrent.QSem.$wsignalQSem_info;
 },
 sat_sdTPT_entry() //  [R1]
         { []
         }
     {offset
       cdUcB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdUcF; else goto cdUcG;
       cdUcF: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdUcG: // global
           I64[Sp - 16] = block_cdUcw_info;
           _sdTPu::P64 = P64[R1 + 7];
           R1 = _sdTPu::P64;
           P64[Sp - 8] = _sdTPu::P64;
           Sp = Sp - 16;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdTPT_info" {
     sat_sdTPT_info:
         const sat_sdTPT_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _cdUcw() //  [R1]
         { []
         }
     {offset
       cdUcw: // global
           I64[Sp] = block_cdUcy_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udUda; else goto cdUcz;
       udUda: // global
           call _cdUcy(R1) args: 0, res: 0, upd: 0;
       cdUcz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUcw_info" {
     block_cdUcw_info:
         const _cdUcw;
         const 1;
         const 30;
 },
 _cdUcy() //  [R1]
         { []
         }
     {offset
       cdUcy: // global
           I64[Sp - 16] = block_cdUcE_info;
           _sdTPG::P64 = P64[R1 + 15];
           _sdTPH::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sdTPH::P64;
           P64[Sp] = _sdTPG::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udUdb; else goto cdUcJ;
       udUdb: // global
           call _cdUcE(R1) args: 0, res: 0, upd: 0;
       cdUcJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUcy_info" {
     block_cdUcy_info:
         const _cdUcy;
         const 1;
         const 30;
 },
 _cdUcE() //  [R1]
         { []
         }
     {offset
       cdUcE: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdUcP; else goto cdUcO;
       cdUcP: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdUcO: // global
           _sdTPG::P64 = P64[Sp + 16];
           _sdTPH::P64 = P64[Sp + 8];
           _sdTPK::I64 = I64[R1 + 7];
           if (_sdTPK::I64 != 0) goto cdUcZ; else goto cdUd6;
       cdUcZ: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sdTPK::I64 + 1;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = _sdTPG::P64;
           P64[Hp] = _sdTPH::P64;
           _sdTPu::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cdUd5_info;
           R2 = Hp - 23;
           R1 = _sdTPu::P64;
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cdUd6: // global
           Hp = Hp - 48;
           I64[Sp + 16] = block_cdUd3_info;
           R3 = _sdTPH::P64;
           R2 = _sdTPG::P64;
           Sp = Sp + 16;
           call Control.Concurrent.QSem.signalQSem2_entry(R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUcE_info" {
     block_cdUcE_info:
         const _cdUcE;
         const 3;
         const 30;
 },
 _cdUd3() //  [R1]
         { []
         }
     {offset
       cdUd3: // global
           _sdTPu::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdUd5_info;
           R2 = R1;
           R1 = _sdTPu::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUd3_info" {
     block_cdUd3_info:
         const _cdUd3;
         const 1;
         const 30;
 },
 _cdUd5() //  []
         { []
         }
     {offset
       cdUd5: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUd5_info" {
     block_cdUd5_info:
         const _cdUd5;
         const 0;
         const 30;
 },
 Control.Concurrent.QSem.$wsignalQSem_entry() //  [R2]
         { []
         }
     {offset
       cdUdf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdUdg; else goto cdUdh;
       cdUdg: // global
           R2 = R2;
           R1 = Control.Concurrent.QSem.$wsignalQSem_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdUdh: // global
           I64[Sp - 16] = block_cdUcn_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.$wsignalQSem_info" {
     Control.Concurrent.QSem.$wsignalQSem_info:
         const Control.Concurrent.QSem.$wsignalQSem_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cdUcn() //  [R1]
         { []
         }
     {offset
       cdUcn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdUdk; else goto cdUdj;
       cdUdk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdUdj: // global
           _sdTPu::P64 = P64[Sp + 8];
           if (R1 == 1) goto cdUde; else goto cdUdd;
       cdUde: // global
           Hp = Hp - 16;
           I64[Sp] = block_cdUdm_info;
           R1 = _sdTPu::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       cdUdd: // global
           I64[Hp - 8] = sat_sdTPT_info;
           P64[Hp] = _sdTPu::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUcn_info" {
     block_cdUcn_info:
         const _cdUcn;
         const 1;
         const 30;
 },
 _cdUdm() //  [R1]
         { []
         }
     {offset
       cdUdm: // global
           I64[Sp] = block_cdUdo_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udUdX; else goto cdUdp;
       udUdX: // global
           call _cdUdo(R1) args: 0, res: 0, upd: 0;
       cdUdp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUdm_info" {
     block_cdUdm_info:
         const _cdUdm;
         const 1;
         const 30;
 },
 _cdUdo() //  [R1]
         { []
         }
     {offset
       cdUdo: // global
           I64[Sp - 16] = block_cdUdt_info;
           _sdTPZ::P64 = P64[R1 + 15];
           _sdTQ0::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sdTQ0::P64;
           P64[Sp] = _sdTPZ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udUdY; else goto cdUdw;
       udUdY: // global
           call _cdUdt(R1) args: 0, res: 0, upd: 0;
       cdUdw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUdo_info" {
     block_cdUdo_info:
         const _cdUdo;
         const 1;
         const 30;
 },
 _cdUdt() //  [R1]
         { []
         }
     {offset
       cdUdt: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdUdC; else goto cdUdB;
       cdUdC: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdUdB: // global
           _sdTPZ::P64 = P64[Sp + 16];
           _sdTQ0::P64 = P64[Sp + 8];
           _sdTQ3::I64 = I64[R1 + 7];
           if (_sdTQ3::I64 != 0) goto cdUdM; else goto cdUdT;
       cdUdM: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sdTQ3::I64 + 1;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = _sdTPZ::P64;
           P64[Hp] = _sdTQ0::P64;
           _sdTPu::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cdUdS_info;
           R2 = Hp - 23;
           R1 = _sdTPu::P64;
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cdUdT: // global
           Hp = Hp - 48;
           I64[Sp + 16] = block_cdUdQ_info;
           R3 = _sdTQ0::P64;
           R2 = _sdTPZ::P64;
           Sp = Sp + 16;
           call Control.Concurrent.QSem.signalQSem2_entry(R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUdt_info" {
     block_cdUdt_info:
         const _cdUdt;
         const 3;
         const 30;
 },
 _cdUdQ() //  [R1]
         { []
         }
     {offset
       cdUdQ: // global
           _sdTPu::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdUdS_info;
           R2 = R1;
           R1 = _sdTPu::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUdQ_info" {
     block_cdUdQ_info:
         const _cdUdQ;
         const 1;
         const 30;
 },
 _cdUdS() //  []
         { []
         }
     {offset
       cdUdS: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUdS_info" {
     block_cdUdS_info:
         const _cdUdS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.521078168 UTC

[section ""data" . Control.Concurrent.QSem.signalQSem1_closure" {
     Control.Concurrent.QSem.signalQSem1_closure:
         const Control.Concurrent.QSem.signalQSem1_info;
 },
 Control.Concurrent.QSem.signalQSem1_entry() //  [R2]
         { []
         }
     {offset
       cdUeW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdUeX; else goto cdUeY;
       cdUeX: // global
           R2 = R2;
           R1 = Control.Concurrent.QSem.signalQSem1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdUeY: // global
           I64[Sp - 8] = block_cdUeT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udUf2; else goto cdUeU;
       udUf2: // global
           call _cdUeT(R1) args: 0, res: 0, upd: 0;
       cdUeU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.signalQSem1_info" {
     Control.Concurrent.QSem.signalQSem1_info:
         const Control.Concurrent.QSem.signalQSem1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cdUeT() //  [R1]
         { []
         }
     {offset
       cdUeT: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Control.Concurrent.QSem.$wsignalQSem_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUeT_info" {
     block_cdUeT_info:
         const _cdUeT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.526793663 UTC

[section ""data" . Control.Concurrent.QSem.signalQSem_closure" {
     Control.Concurrent.QSem.signalQSem_closure:
         const Control.Concurrent.QSem.signalQSem_info;
 },
 Control.Concurrent.QSem.signalQSem_entry() //  [R2]
         { []
         }
     {offset
       cdUfg: // global
           R2 = R2;
           call Control.Concurrent.QSem.signalQSem1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.signalQSem_info" {
     Control.Concurrent.QSem.signalQSem_info:
         const Control.Concurrent.QSem.signalQSem_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.536512376 UTC

[section ""data" . Control.Concurrent.QSem.$wlvl_closure" {
     Control.Concurrent.QSem.$wlvl_closure:
         const Control.Concurrent.QSem.$wlvl_info;
 },
 sat_sdTQO_entry() //  [R1]
         { []
         }
     {offset
       cdUfF: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cdUfG; else goto cdUfH;
       cdUfG: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdUfH: // global
           I64[Sp - 24] = block_cdUfA_info;
           _sdTQg::P64 = P64[R1 + 7];
           _sdTQh::P64 = P64[R1 + 15];
           R1 = _sdTQh::P64;
           P64[Sp - 16] = _sdTQg::P64;
           P64[Sp - 8] = _sdTQh::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdTQO_info" {
     sat_sdTQO_info:
         const sat_sdTQO_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cdUfA() //  [R1]
         { []
         }
     {offset
       cdUfA: // global
           I64[Sp] = block_cdUfC_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udUgv; else goto cdUfD;
       udUgv: // global
           call _cdUfC(R1) args: 0, res: 0, upd: 0;
       cdUfD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUfA_info" {
     block_cdUfA_info:
         const _cdUfA;
         const 2;
         const 30;
 },
 _cdUfC() //  [R1]
         { []
         }
     {offset
       cdUfC: // global
           I64[Sp - 32] = block_cdUfL_info;
           _sdTQs::P64 = R1;
           _sdTQt::P64 = P64[R1 + 7];
           _sdTQu::P64 = P64[R1 + 15];
           _sdTQv::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp - 24] = _sdTQt::P64;
           P64[Sp - 16] = _sdTQu::P64;
           P64[Sp - 8] = _sdTQv::P64;
           P64[Sp] = _sdTQs::P64;
           Sp = Sp - 32;
           call stg_tryTakeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUfC_info" {
     block_cdUfC_info:
         const _cdUfC;
         const 2;
         const 30;
 },
 _cdUfL() //  [R1]
         { []
         }
     {offset
       cdUfL: // global
           if (R1 == 0) goto cdUgr; else goto cdUfV;
       cdUgr: // global
           I64[Sp + 24] = block_cdUgo_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 40];
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cdUfV: // global
           _sdTQt::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdUfT_info;
           R1 = _sdTQt::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udUgw; else goto cdUfW;
       udUgw: // global
           call _cdUfT(R1) args: 0, res: 0, upd: 0;
       cdUfW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUfL_info" {
     block_cdUfL_info:
         const _cdUfL;
         const 6;
         const 30;
 },
 _cdUgo() //  []
         { []
         }
     {offset
       cdUgo: // global
           _sdTQh::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cdUgq_info;
           R2 = P64[Sp + 8];
           R1 = _sdTQh::P64;
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUgo_info" {
     block_cdUgo_info:
         const _cdUgo;
         const 131;
         const 30;
 },
 _cdUfT() //  [R1]
         { []
         }
     {offset
       cdUfT: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdUg2; else goto cdUg1;
       cdUg2: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdUg1: // global
           _sdTQu::P64 = P64[Sp + 8];
           _sdTQv::P64 = P64[Sp + 16];
           _sdTQD::I64 = I64[R1 + 7];
           if (_sdTQD::I64 != 0) goto cdUgc; else goto cdUgj;
       cdUgc: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sdTQD::I64 + 1;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = _sdTQu::P64;
           P64[Hp] = _sdTQv::P64;
           _sdTQh::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cdUgq_info;
           R2 = Hp - 23;
           R1 = _sdTQh::P64;
           Sp = Sp + 40;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cdUgj: // global
           Hp = Hp - 48;
           I64[Sp + 32] = block_cdUgg_info;
           R3 = _sdTQv::P64;
           R2 = _sdTQu::P64;
           Sp = Sp + 32;
           call Control.Concurrent.QSem.signalQSem2_entry(R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUfT_info" {
     block_cdUfT_info:
         const _cdUfT;
         const 773;
         const 30;
 },
 _cdUgg() //  [R1]
         { []
         }
     {offset
       cdUgg: // global
           _sdTQh::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdUgq_info;
           R2 = R1;
           R1 = _sdTQh::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUgg_info" {
     block_cdUgg_info:
         const _cdUgg;
         const 1;
         const 30;
 },
 _cdUgq() //  []
         { []
         }
     {offset
       cdUgq: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUgq_info" {
     block_cdUgq_info:
         const _cdUgq;
         const 0;
         const 30;
 },
 Control.Concurrent.QSem.$wlvl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdUgA: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cdUgB; else goto cdUgC;
       cdUgB: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.QSem.$wlvl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdUgC: // global
           I64[Sp - 32] = block_cdUfr_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.$wlvl_info" {
     Control.Concurrent.QSem.$wlvl_info:
         const Control.Concurrent.QSem.$wlvl_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _cdUfr() //  [R1]
         { []
         }
     {offset
       cdUfr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdUgF; else goto cdUgE;
       cdUgF: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdUgE: // global
           _sdTQh::P64 = P64[Sp + 16];
           if (R1 == 1) goto cdUgz; else goto cdUgy;
       cdUgz: // global
           Hp = Hp - 24;
           I64[Sp] = block_cdUgK_info;
           R1 = _sdTQh::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       cdUgy: // global
           I64[Hp - 16] = sat_sdTQO_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sdTQh::P64;
           I64[Sp + 16] = block_cdUgG_info;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call stg_maskUninterruptible#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUfr_info" {
     block_cdUfr_info:
         const _cdUfr;
         const 3;
         const 30;
 },
 _cdUgK() //  [R1]
         { []
         }
     {offset
       cdUgK: // global
           I64[Sp] = block_cdUgM_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udUhC; else goto cdUgO;
       udUhC: // global
           call _cdUgM(R1) args: 0, res: 0, upd: 0;
       cdUgO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUgK_info" {
     block_cdUgK_info:
         const _cdUgK;
         const 3;
         const 30;
 },
 _cdUgM() //  [R1]
         { []
         }
     {offset
       cdUgM: // global
           I64[Sp - 32] = block_cdUgS_info;
           _sdTQV::P64 = R1;
           _sdTQW::P64 = P64[R1 + 7];
           _sdTQX::P64 = P64[R1 + 15];
           _sdTQY::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp - 24] = _sdTQW::P64;
           P64[Sp - 16] = _sdTQX::P64;
           P64[Sp - 8] = _sdTQY::P64;
           P64[Sp] = _sdTQV::P64;
           Sp = Sp - 32;
           call stg_tryTakeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUgM_info" {
     block_cdUgM_info:
         const _cdUgM;
         const 3;
         const 30;
 },
 _cdUgS() //  [R1]
         { []
         }
     {offset
       cdUgS: // global
           if (R1 == 0) goto cdUhy; else goto cdUh2;
       cdUhy: // global
           I64[Sp + 24] = block_cdUhv_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 40];
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cdUh2: // global
           _sdTQW::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdUh0_info;
           R1 = _sdTQW::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udUhD; else goto cdUh3;
       udUhD: // global
           call _cdUh0(R1) args: 0, res: 0, upd: 0;
       cdUh3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUgS_info" {
     block_cdUgS_info:
         const _cdUgS;
         const 7;
         const 30;
 },
 _cdUhv() //  []
         { []
         }
     {offset
       cdUhv: // global
           _sdTQh::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cdUhx_info;
           R2 = P64[Sp + 8];
           R1 = _sdTQh::P64;
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUhv_info" {
     block_cdUhv_info:
         const _cdUhv;
         const 132;
         const 30;
 },
 _cdUh0() //  [R1]
         { []
         }
     {offset
       cdUh0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdUh9; else goto cdUh8;
       cdUh9: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdUh8: // global
           _sdTQX::P64 = P64[Sp + 8];
           _sdTQY::P64 = P64[Sp + 16];
           _sdTR6::I64 = I64[R1 + 7];
           if (_sdTR6::I64 != 0) goto cdUhj; else goto cdUhq;
       cdUhj: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sdTR6::I64 + 1;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = _sdTQX::P64;
           P64[Hp] = _sdTQY::P64;
           _sdTQh::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cdUhx_info;
           R2 = Hp - 23;
           R1 = _sdTQh::P64;
           Sp = Sp + 40;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cdUhq: // global
           Hp = Hp - 48;
           I64[Sp + 32] = block_cdUhn_info;
           R3 = _sdTQY::P64;
           R2 = _sdTQX::P64;
           Sp = Sp + 32;
           call Control.Concurrent.QSem.signalQSem2_entry(R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUh0_info" {
     block_cdUh0_info:
         const _cdUh0;
         const 774;
         const 30;
 },
 _cdUhn() //  [R1]
         { []
         }
     {offset
       cdUhn: // global
           _sdTQh::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdUhx_info;
           R2 = R1;
           R1 = _sdTQh::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUhn_info" {
     block_cdUhn_info:
         const _cdUhn;
         const 2;
         const 30;
 },
 _cdUhx() //  []
         { []
         }
     {offset
       cdUhx: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUhx_info" {
     block_cdUhx_info:
         const _cdUhx;
         const 1;
         const 30;
 },
 _cdUgG() //  []
         { []
         }
     {offset
       cdUgG: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUgG_info" {
     block_cdUgG_info:
         const _cdUgG;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.572804915 UTC

[section ""data" . Control.Concurrent.QSem.$wwaitQSem_closure" {
     Control.Concurrent.QSem.$wwaitQSem_closure:
         const Control.Concurrent.QSem.$wwaitQSem_info;
 },
 sat_sdTRN_entry() //  [R1, R2]
         { []
         }
     {offset
       cdUjl: // global
           R4 = R2;
           R3 = P64[R1 + 6];
           R2 = P64[R1 + 14];
           call Control.Concurrent.QSem.$wlvl_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdTRN_info" {
     sat_sdTRN_info:
         const sat_sdTRN_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 sat_sdTRK_entry() //  [R1]
         { []
         }
     {offset
       cdUjt: // global
           R1 = P64[R1 + 7];
           call stg_takeMVar#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdTRK_info" {
     sat_sdTRK_info:
         const sat_sdTRK_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 io_sdTRm_entry() //  [R1]
         { []
         }
     {offset
       cdUjw: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdUjx; else goto cdUjy;
       cdUjx: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdUjy: // global
           I64[Sp - 16] = block_cdUiU_info;
           _sdTRh::P64 = P64[R1 + 7];
           R1 = _sdTRh::P64;
           P64[Sp - 8] = _sdTRh::P64;
           Sp = Sp - 16;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sdTRm_info" {
     io_sdTRm_info:
         const io_sdTRm_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _cdUiU() //  [R1]
         { []
         }
     {offset
       cdUiU: // global
           I64[Sp] = block_cdUiW_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udUjV; else goto cdUiX;
       udUjV: // global
           call _cdUiW(R1) args: 0, res: 0, upd: 0;
       cdUiX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUiU_info" {
     block_cdUiU_info:
         const _cdUiU;
         const 1;
         const 30;
 },
 _cdUiW() //  [R1]
         { []
         }
     {offset
       cdUiW: // global
           I64[Sp - 16] = block_cdUj1_info;
           _sdTRt::P64 = P64[R1 + 15];
           _sdTRu::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sdTRu::P64;
           P64[Sp] = _sdTRt::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udUjW; else goto cdUj2;
       udUjW: // global
           call _cdUj1(R1) args: 0, res: 0, upd: 0;
       cdUj2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUiW_info" {
     block_cdUiW_info:
         const _cdUiW;
         const 1;
         const 30;
 },
 _cdUj1() //  [R1]
         { []
         }
     {offset
       cdUj1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdUjD; else goto cdUjC;
       cdUjD: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdUjC: // global
           _sdTRx::I64 = I64[R1 + 7];
           if (_sdTRx::I64 == 0) goto cdUjO; else goto cdUjL;
       cdUjO: // global
           Hp = Hp - 48;
           I64[Sp - 8] = block_cdUj9_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
       cdUjL: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sdTRx::I64 - 1;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _sdTRh::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cdUjJ_info;
           R2 = Hp - 23;
           R1 = _sdTRh::P64;
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUj1_info" {
     block_cdUj1_info:
         const _cdUj1;
         const 3;
         const 30;
 },
 _cdUj9() //  [R1]
         { []
         }
     {offset
       cdUj9: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdUjR; else goto cdUjQ;
       cdUjR: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdUjQ: // global
           I64[Hp - 64] = GHC.MVar.MVar_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 63;
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = Hp - 46;
           I64[Sp + 16] = block_cdUje_info;
           R2 = Hp - 23;
           _sdTRE::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 24] = _sdTRE::P64;
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUj9_info" {
     block_cdUj9_info:
         const _cdUj9;
         const 4;
         const 30;
 },
 _cdUje() //  []
         { []
         }
     {offset
       cdUje: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdUjU; else goto cdUjT;
       cdUjU: // global
           HpAlloc = 40;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdUjT: // global
           I64[Hp - 32] = sat_sdTRN_info;
           P64[Hp - 24] = P64[Sp + 16];
           _sdTRE::P64 = P64[Sp + 8];
           P64[Hp - 16] = _sdTRE::P64;
           I64[Hp - 8] = sat_sdTRK_info;
           P64[Hp] = _sdTRE::P64;
           R2 = Hp - 30;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUje_info" {
     block_cdUje_info:
         const _cdUje;
         const 2;
         const 30;
 },
 _cdUjJ() //  []
         { []
         }
     {offset
       cdUjJ: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUjJ_info" {
     block_cdUjJ_info:
         const _cdUjJ;
         const 0;
         const 30;
 },
 Control.Concurrent.QSem.$wwaitQSem_entry() //  [R2]
         { []
         }
     {offset
       cdUk1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdUk2; else goto cdUk3;
       cdUk2: // global
           R2 = R2;
           R1 = Control.Concurrent.QSem.$wwaitQSem_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdUk3: // global
           I64[Sp - 16] = block_cdUiN_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.$wwaitQSem_info" {
     Control.Concurrent.QSem.$wwaitQSem_info:
         const Control.Concurrent.QSem.$wwaitQSem_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cdUiN() //  [R1]
         { []
         }
     {offset
       cdUiN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdUk6; else goto cdUk5;
       cdUk6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdUk5: // global
           I64[Hp - 8] = io_sdTRm_info;
           P64[Hp] = P64[Sp + 8];
           _cdUiP::P64 = Hp - 7;
           if (R1 == 0) goto cdUk0; else goto cdUjZ;
       cdUk0: // global
           R1 = _cdUiP::P64;
           Sp = Sp + 16;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cdUjZ: // global
           R1 = _cdUiP::P64;
           Sp = Sp + 16;
           call io_sdTRm_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUiN_info" {
     block_cdUiN_info:
         const _cdUiN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.59459833 UTC

[section ""data" . Control.Concurrent.QSem.waitQSem1_closure" {
     Control.Concurrent.QSem.waitQSem1_closure:
         const Control.Concurrent.QSem.waitQSem1_info;
 },
 Control.Concurrent.QSem.waitQSem1_entry() //  [R2]
         { []
         }
     {offset
       cdUl2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdUl3; else goto cdUl4;
       cdUl3: // global
           R2 = R2;
           R1 = Control.Concurrent.QSem.waitQSem1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdUl4: // global
           I64[Sp - 8] = block_cdUkZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udUl8; else goto cdUl0;
       udUl8: // global
           call _cdUkZ(R1) args: 0, res: 0, upd: 0;
       cdUl0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.waitQSem1_info" {
     Control.Concurrent.QSem.waitQSem1_info:
         const Control.Concurrent.QSem.waitQSem1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cdUkZ() //  [R1]
         { []
         }
     {offset
       cdUkZ: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Control.Concurrent.QSem.$wwaitQSem_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUkZ_info" {
     block_cdUkZ_info:
         const _cdUkZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.600426084 UTC

[section ""data" . Control.Concurrent.QSem.waitQSem_closure" {
     Control.Concurrent.QSem.waitQSem_closure:
         const Control.Concurrent.QSem.waitQSem_info;
 },
 Control.Concurrent.QSem.waitQSem_entry() //  [R2]
         { []
         }
     {offset
       cdUlm: // global
           R2 = R2;
           call Control.Concurrent.QSem.waitQSem1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.waitQSem_info" {
     Control.Concurrent.QSem.waitQSem_info:
         const Control.Concurrent.QSem.waitQSem_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.60398378 UTC

[section ""data" . Control.Concurrent.QSem.QSem_closure" {
     Control.Concurrent.QSem.QSem_closure:
         const Control.Concurrent.QSem.QSem_info;
 },
 Control.Concurrent.QSem.QSem_entry() //  [R2]
         { []
         }
     {offset
       cdUly: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdUlC; else goto cdUlB;
       cdUlC: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Control.Concurrent.QSem.QSem_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdUlB: // global
           I64[Hp - 8] = Control.Concurrent.QSem.QSem_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.QSem_info" {
     Control.Concurrent.QSem.QSem_info:
         const Control.Concurrent.QSem.QSem_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.608175569 UTC

[section ""cstring" . idU8y_str" {
     idU8y_str:
         I8[] [98,97,115,101,58,67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,81,83,101,109,46,81,83,101,109]
 },
 Control.Concurrent.QSem.QSem_con_entry() //  [R1]
         { []
         }
     {offset
       cdUlI: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.QSem_con_info" {
     Control.Concurrent.QSem.QSem_con_info:
         const Control.Concurrent.QSem.QSem_con_entry;
         const 1;
         const 2;
         const idU8y_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.611348663 UTC

[section ""relreadonly" . SdTSm_srt" {
     SdTSm_srt:
         const GHC.IO.failIO1_closure;
         const Control.Concurrent.QSem.newQSem2_closure;
         const Control.Concurrent.QSem.newQSem1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.163408601 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:09:10.165738822 UTC

[section ""data" . Control.Concurrent.QSem.$WQSem_closure" {
     Control.Concurrent.QSem.$WQSem_closure:
         const Control.Concurrent.QSem.$WQSem_info;
 },
 Control.Concurrent.QSem.$WQSem_entry() //  [R2]
         { []
         }
     {offset
       cdUoS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdUoW; else goto cdUoX;
       cdUoW: // global
           R2 = R2;
           R1 = Control.Concurrent.QSem.$WQSem_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdUoX: // global
           I64[Sp - 8] = block_cdUoP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udUp1; else goto cdUoQ;
       udUp1: // global
           call _cdUoP(R1) args: 0, res: 0, upd: 0;
       cdUoQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.$WQSem_info" {
     Control.Concurrent.QSem.$WQSem_info:
         const Control.Concurrent.QSem.$WQSem_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdUoP() //  [R1]
         { []
         }
     {offset
       cdUoP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdUp0; else goto cdUoZ;
       cdUp0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdUoZ: // global
           _sdUlR::P64 = P64[R1 + 7];
           I64[Hp - 8] = Control.Concurrent.QSem.QSem_con_info;
           P64[Hp] = _sdUlR::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUoP_info" {
     block_cdUoP_info:
         const _cdUoP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.171155094 UTC

[section ""cstring" . Control.Concurrent.QSem.$trModule4_bytes" {
     Control.Concurrent.QSem.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.173694197 UTC

[section ""data" . Control.Concurrent.QSem.$trModule3_closure" {
     Control.Concurrent.QSem.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.QSem.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.176612488 UTC

[section ""cstring" . Control.Concurrent.QSem.$trModule2_bytes" {
     Control.Concurrent.QSem.$trModule2_bytes:
         I8[] [67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,81,83,101,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.179091354 UTC

[section ""data" . Control.Concurrent.QSem.$trModule1_closure" {
     Control.Concurrent.QSem.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.QSem.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.181193375 UTC

[section ""data" . Control.Concurrent.QSem.$trModule_closure" {
     Control.Concurrent.QSem.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Control.Concurrent.QSem.$trModule3_closure+1;
         const Control.Concurrent.QSem.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.185177832 UTC

[section ""data" . $krep_rdTOF_closure" {
     $krep_rdTOF_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.187867156 UTC

[section ""data" . $krep1_rdTOG_closure" {
     $krep1_rdTOG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.19031218 UTC

[section ""data" . $krep2_rdTOH_closure" {
     $krep2_rdTOH_closure:
         const :_con_info;
         const $krep_rdTOF_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.192930841 UTC

[section ""data" . $krep3_rdTOI_closure" {
     $krep3_rdTOI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep2_rdTOH_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.195887514 UTC

[section ""data" . $krep4_rdTOJ_closure" {
     $krep4_rdTOJ_closure:
         const :_con_info;
         const $krep3_rdTOI_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.198682722 UTC

[section ""data" . $krep5_rdTOK_closure" {
     $krep5_rdTOK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep4_rdTOJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.201285523 UTC

[section ""data" . $krep6_rdTOL_closure" {
     $krep6_rdTOL_closure:
         const :_con_info;
         const $krep5_rdTOK_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.204018286 UTC

[section ""data" . $krep7_rdTOM_closure" {
     $krep7_rdTOM_closure:
         const :_con_info;
         const $krep5_rdTOK_closure+1;
         const $krep6_rdTOL_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.206957762 UTC

[section ""data" . $krep8_rdTON_closure" {
     $krep8_rdTON_closure:
         const :_con_info;
         const $krep1_rdTOG_closure+1;
         const $krep7_rdTOM_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.210107082 UTC

[section ""data" . $krep9_rdTOO_closure" {
     $krep9_rdTOO_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,,)_closure;
         const $krep8_rdTON_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.213079359 UTC

[section ""data" . $krep10_rdTOP_closure" {
     $krep10_rdTOP_closure:
         const :_con_info;
         const $krep9_rdTOO_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.215533338 UTC

[section ""data" . $krep11_rdTOQ_closure" {
     $krep11_rdTOQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep10_rdTOP_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.217542939 UTC

[section ""cstring" . Control.Concurrent.QSem.$tcQSem2_bytes" {
     Control.Concurrent.QSem.$tcQSem2_bytes:
         I8[] [81,83,101,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.219469099 UTC

[section ""data" . Control.Concurrent.QSem.$tcQSem1_closure" {
     Control.Concurrent.QSem.$tcQSem1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.QSem.$tcQSem2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.222154723 UTC

[section ""data" . Control.Concurrent.QSem.$tcQSem_closure" {
     Control.Concurrent.QSem.$tcQSem_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Concurrent.QSem.$trModule_closure+1;
         const Control.Concurrent.QSem.$tcQSem1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9564161763912145234;
         const 3945938196429110556;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.2240908 UTC

[section ""data" . $krep12_rdTOR_closure" {
     $krep12_rdTOR_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Concurrent.QSem.$tcQSem_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.225940335 UTC

[section ""data" . Control.Concurrent.QSem.$tc'QSem1_closure" {
     Control.Concurrent.QSem.$tc'QSem1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_rdTOQ_closure+1;
         const $krep12_rdTOR_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.2277246 UTC

[section ""cstring" . Control.Concurrent.QSem.$tc'QSem3_bytes" {
     Control.Concurrent.QSem.$tc'QSem3_bytes:
         I8[] [39,81,83,101,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.230223038 UTC

[section ""data" . Control.Concurrent.QSem.$tc'QSem2_closure" {
     Control.Concurrent.QSem.$tc'QSem2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.QSem.$tc'QSem3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.232002907 UTC

[section ""data" . Control.Concurrent.QSem.$tc'QSem_closure" {
     Control.Concurrent.QSem.$tc'QSem_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Concurrent.QSem.$trModule_closure+1;
         const Control.Concurrent.QSem.$tc'QSem2_closure+1;
         const Control.Concurrent.QSem.$tc'QSem1_closure+4;
         const 16012040391974534726;
         const 6627878139257558952;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.233863504 UTC

[section ""cstring" . lvl_rdTOS_bytes" {
     lvl_rdTOS_bytes:
         I8[] [110,101,119,81,83,101,109,58,32,73,110,105,116,105,97,108,32,113,117,97,110,116,105,116,121,32,109,117,115,116,32,98,101,32,110,111,110,45,110,101,103,97,116,105,118,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.236384645 UTC

[section ""data" . Control.Concurrent.QSem.newQSem2_closure" {
     Control.Concurrent.QSem.newQSem2_closure:
         const Control.Concurrent.QSem.newQSem2_info;
         const 0;
 },
 Control.Concurrent.QSem.newQSem2_entry() //  []
         { []
         }
     {offset
       cdUpK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdUpL; else goto cdUpM;
       cdUpL: // global
           R1 = Control.Concurrent.QSem.newQSem2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdUpM: // global
           I64[Sp - 8] = block_cdUpI_info;
           R2 = lvl_rdTOS_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.newQSem2_info" {
     Control.Concurrent.QSem.newQSem2_info:
         const Control.Concurrent.QSem.newQSem2_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const SdUpQ_srt;
 },
 _cdUpI() //  [R1]
         { []
         }
     {offset
       cdUpI: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUpI_info" {
     block_cdUpI_info:
         const _cdUpI;
         const 0;
         const 4294967326;
         const SdUpQ_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.243232271 UTC

[section ""data" . Control.Concurrent.QSem.newQSem1_closure" {
     Control.Concurrent.QSem.newQSem1_closure:
         const Control.Concurrent.QSem.newQSem1_info;
         const 0;
 },
 Control.Concurrent.QSem.newQSem1_entry() //  [R2]
         { []
         }
     {offset
       cdUq7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdUq8; else goto cdUq9;
       cdUq8: // global
           R2 = R2;
           R1 = Control.Concurrent.QSem.newQSem1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdUq9: // global
           I64[Sp - 8] = block_cdUq4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udUqv; else goto cdUq5;
       udUqv: // global
           call _cdUq4(R1) args: 0, res: 0, upd: 0;
       cdUq5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.newQSem1_info" {
     Control.Concurrent.QSem.newQSem1_info:
         const Control.Concurrent.QSem.newQSem1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SdUpQ_srt+8;
 },
 _cdUq4() //  [R1]
         { []
         }
     {offset
       cdUq4: // global
           if (%MO_S_Ge_W64(I64[R1 + 7], 0)) goto cdUqn; else goto cdUqu;
       cdUqn: // global
           I64[Sp - 8] = block_cdUqg_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
       cdUqu: // global
           Sp = Sp + 8;
           call Control.Concurrent.QSem.newQSem2_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUq4_info" {
     block_cdUq4_info:
         const _cdUq4;
         const 0;
         const 4294967326;
         const SdUpQ_srt+8;
 },
 _cdUqg() //  [R1]
         { []
         }
     {offset
       cdUqg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdUqq; else goto cdUqp;
       cdUqq: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdUqp: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp] = block_cdUqj_info;
           R2 = Hp - 23;
           _sdUm1::P64 = R1;
           R1 = R1;
           P64[Sp + 8] = _sdUm1::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUqg_info" {
     block_cdUqg_info:
         const _cdUqg;
         const 1;
         const 30;
 },
 _cdUqj() //  []
         { []
         }
     {offset
       cdUqj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdUqt; else goto cdUqs;
       cdUqt: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdUqs: // global
           I64[Hp - 8] = Control.Concurrent.QSem.QSem_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUqj_info" {
     block_cdUqj_info:
         const _cdUqj;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.252813588 UTC

[section ""data" . Control.Concurrent.QSem.newQSem_closure" {
     Control.Concurrent.QSem.newQSem_closure:
         const Control.Concurrent.QSem.newQSem_info;
         const 0;
 },
 Control.Concurrent.QSem.newQSem_entry() //  [R2]
         { []
         }
     {offset
       cdUr1: // global
           R2 = R2;
           call Control.Concurrent.QSem.newQSem1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.newQSem_info" {
     Control.Concurrent.QSem.newQSem_info:
         const Control.Concurrent.QSem.newQSem_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdUpQ_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.256685898 UTC

[section ""data" . lvl1_rdTOT_closure" {
     lvl1_rdTOT_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.258488798 UTC

[section ""data" . lvl2_rdTOU_closure" {
     lvl2_rdTOU_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.260295097 UTC

[section ""data" . lvl3_rdTOV_closure" {
     lvl3_rdTOV_closure:
         const (,,)_con_info;
         const lvl2_rdTOU_closure+1;
         const GHC.Types.[]_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.264791853 UTC

[section ""data" . Control.Concurrent.QSem.signalQSem2_closure" {
     Control.Concurrent.QSem.signalQSem2_closure:
         const Control.Concurrent.QSem.signalQSem2_info;
 },
 Control.Concurrent.QSem.signalQSem2_entry() //  [R2, R3]
         { []
         }
     {offset
       cdUrm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdUrn; else goto udUs4;
       cdUrn: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.QSem.signalQSem2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       udUs4: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cdUrc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.signalQSem2_info" {
     Control.Concurrent.QSem.signalQSem2_info:
         const Control.Concurrent.QSem.signalQSem2_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cdUrc() //  []
         { []
         }
     {offset
       cdUrc: // global
           _sdUm5::P64 = P64[Sp];
           I64[Sp] = block_cdUrf_info;
           R1 = _sdUm5::P64;
           if (R1 & 7 != 0) goto udUs7; else goto cdUrg;
       udUs7: // global
           call _cdUrf(R1) args: 0, res: 0, upd: 0;
       cdUrg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdUrf() //  [R1]
         { []
         }
     {offset
       cdUrf: // global
           if (R1 & 7 == 1) goto cdUrj; else goto cdUrk;
       cdUrj: // global
           _sdUm6::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdUrr_info;
           R1 = _sdUm6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udUs8; else goto cdUrt;
       udUs8: // global
           call _cdUrr(R1) args: 0, res: 0, upd: 0;
       cdUrt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdUrk: // global
           I64[Sp - 8] = block_cdUrL_info;
           _sdUme::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdUme::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udUs9; else goto cdUrN;
       udUs9: // global
           call _cdUrL(R1) args: 0, res: 0, upd: 0;
       cdUrN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUrf_info" {
     block_cdUrf_info:
         const _cdUrf;
         const 1;
         const 30;
 },
 _cdUrr() //  [R1]
         { []
         }
     {offset
       cdUrr: // global
           if (R1 & 7 == 1) goto cdUrz; else goto cdUrE;
       cdUrz: // global
           R1 = lvl3_rdTOV_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdUrE: // global
           I64[Sp] = block_cdUrC_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUrr_info" {
     block_cdUrr_info:
         const _cdUrr;
         const 0;
         const 30;
 },
 _cdUrC() //  [R1]
         { []
         }
     {offset
       cdUrC: // global
           P64[Sp - 8] = R1;
           P64[Sp] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call _cdUrc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdUrC_info" {
     block_cdUrC_info:
         const _cdUrC;
         const 0;
         const 30;
 },
 _cdUrL() //  [R1]
         { []
         }
     {offset
       cdUrL: // global
           I64[Sp] = block_cdUrR_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 7];
           call stg_tryPutMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUrL_info" {
     block_cdUrL_info:
         const _cdUrL;
         const 2;
         const 30;
 },
 _cdUrR() //  [R1]
         { []
         }
     {offset
       cdUrR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdUrW; else goto cdUrV;
       cdUrW: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdUrV: // global
           _sdUm6::P64 = P64[Sp + 16];
           _sdUme::P64 = P64[Sp + 8];
           if (R1 == 0) goto cdUs2; else goto cdUs1;
       cdUs2: // global
           Hp = Hp - 32;
           P64[Sp + 8] = _sdUme::P64;
           P64[Sp + 16] = _sdUm6::P64;
           Sp = Sp + 8;
           call _cdUrc() args: 0, res: 0, upd: 0;
       cdUs1: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = lvl1_rdTOT_closure+1;
           P64[Hp - 8] = _sdUme::P64;
           P64[Hp] = _sdUm6::P64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUrR_info" {
     block_cdUrR_info:
         const _cdUrR;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.283241687 UTC

[section ""data" . Control.Concurrent.QSem.$wsignalQSem_closure" {
     Control.Concurrent.QSem.$wsignalQSem_closure:
         const Control.Concurrent.QSem.$wsignalQSem_info;
 },
 sat_sdUmL_entry() //  [R1]
         { []
         }
     {offset
       cdUtb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdUtf; else goto cdUtg;
       cdUtf: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdUtg: // global
           I64[Sp - 16] = block_cdUt6_info;
           _sdUmm::P64 = P64[R1 + 7];
           R1 = _sdUmm::P64;
           P64[Sp - 8] = _sdUmm::P64;
           Sp = Sp - 16;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdUmL_info" {
     sat_sdUmL_info:
         const sat_sdUmL_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _cdUt6() //  [R1]
         { []
         }
     {offset
       cdUt6: // global
           I64[Sp] = block_cdUt8_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udUtK; else goto cdUt9;
       udUtK: // global
           call _cdUt8(R1) args: 0, res: 0, upd: 0;
       cdUt9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUt6_info" {
     block_cdUt6_info:
         const _cdUt6;
         const 1;
         const 30;
 },
 _cdUt8() //  [R1]
         { []
         }
     {offset
       cdUt8: // global
           I64[Sp - 16] = block_cdUte_info;
           _sdUmy::P64 = P64[R1 + 15];
           _sdUmz::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sdUmz::P64;
           P64[Sp] = _sdUmy::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udUtL; else goto cdUtj;
       udUtL: // global
           call _cdUte(R1) args: 0, res: 0, upd: 0;
       cdUtj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUt8_info" {
     block_cdUt8_info:
         const _cdUt8;
         const 1;
         const 30;
 },
 _cdUte() //  [R1]
         { []
         }
     {offset
       cdUte: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdUtp; else goto cdUto;
       cdUtp: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdUto: // global
           _sdUmy::P64 = P64[Sp + 16];
           _sdUmz::P64 = P64[Sp + 8];
           _sdUmC::I64 = I64[R1 + 7];
           if (_sdUmC::I64 != 0) goto cdUtz; else goto cdUtG;
       cdUtz: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sdUmC::I64 + 1;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = _sdUmy::P64;
           P64[Hp] = _sdUmz::P64;
           _sdUmm::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cdUtF_info;
           R2 = Hp - 23;
           R1 = _sdUmm::P64;
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cdUtG: // global
           Hp = Hp - 48;
           I64[Sp + 16] = block_cdUtD_info;
           R3 = _sdUmz::P64;
           R2 = _sdUmy::P64;
           Sp = Sp + 16;
           call Control.Concurrent.QSem.signalQSem2_entry(R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUte_info" {
     block_cdUte_info:
         const _cdUte;
         const 3;
         const 30;
 },
 _cdUtD() //  [R1]
         { []
         }
     {offset
       cdUtD: // global
           _sdUmm::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdUtF_info;
           R2 = R1;
           R1 = _sdUmm::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUtD_info" {
     block_cdUtD_info:
         const _cdUtD;
         const 1;
         const 30;
 },
 _cdUtF() //  []
         { []
         }
     {offset
       cdUtF: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUtF_info" {
     block_cdUtF_info:
         const _cdUtF;
         const 0;
         const 30;
 },
 Control.Concurrent.QSem.$wsignalQSem_entry() //  [R2]
         { []
         }
     {offset
       cdUtP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdUtQ; else goto cdUtR;
       cdUtQ: // global
           R2 = R2;
           R1 = Control.Concurrent.QSem.$wsignalQSem_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdUtR: // global
           I64[Sp - 16] = block_cdUsX_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.$wsignalQSem_info" {
     Control.Concurrent.QSem.$wsignalQSem_info:
         const Control.Concurrent.QSem.$wsignalQSem_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cdUsX() //  [R1]
         { []
         }
     {offset
       cdUsX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdUtU; else goto cdUtT;
       cdUtU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdUtT: // global
           _sdUmm::P64 = P64[Sp + 8];
           if (R1 == 1) goto cdUtO; else goto cdUtN;
       cdUtO: // global
           Hp = Hp - 16;
           I64[Sp] = block_cdUtW_info;
           R1 = _sdUmm::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       cdUtN: // global
           I64[Hp - 8] = sat_sdUmL_info;
           P64[Hp] = _sdUmm::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUsX_info" {
     block_cdUsX_info:
         const _cdUsX;
         const 1;
         const 30;
 },
 _cdUtW() //  [R1]
         { []
         }
     {offset
       cdUtW: // global
           I64[Sp] = block_cdUtY_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udUux; else goto cdUtZ;
       udUux: // global
           call _cdUtY(R1) args: 0, res: 0, upd: 0;
       cdUtZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUtW_info" {
     block_cdUtW_info:
         const _cdUtW;
         const 1;
         const 30;
 },
 _cdUtY() //  [R1]
         { []
         }
     {offset
       cdUtY: // global
           I64[Sp - 16] = block_cdUu3_info;
           _sdUmR::P64 = P64[R1 + 15];
           _sdUmS::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sdUmS::P64;
           P64[Sp] = _sdUmR::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udUuy; else goto cdUu6;
       udUuy: // global
           call _cdUu3(R1) args: 0, res: 0, upd: 0;
       cdUu6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUtY_info" {
     block_cdUtY_info:
         const _cdUtY;
         const 1;
         const 30;
 },
 _cdUu3() //  [R1]
         { []
         }
     {offset
       cdUu3: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdUuc; else goto cdUub;
       cdUuc: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdUub: // global
           _sdUmR::P64 = P64[Sp + 16];
           _sdUmS::P64 = P64[Sp + 8];
           _sdUmV::I64 = I64[R1 + 7];
           if (_sdUmV::I64 != 0) goto cdUum; else goto cdUut;
       cdUum: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sdUmV::I64 + 1;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = _sdUmR::P64;
           P64[Hp] = _sdUmS::P64;
           _sdUmm::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cdUus_info;
           R2 = Hp - 23;
           R1 = _sdUmm::P64;
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cdUut: // global
           Hp = Hp - 48;
           I64[Sp + 16] = block_cdUuq_info;
           R3 = _sdUmS::P64;
           R2 = _sdUmR::P64;
           Sp = Sp + 16;
           call Control.Concurrent.QSem.signalQSem2_entry(R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUu3_info" {
     block_cdUu3_info:
         const _cdUu3;
         const 3;
         const 30;
 },
 _cdUuq() //  [R1]
         { []
         }
     {offset
       cdUuq: // global
           _sdUmm::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdUus_info;
           R2 = R1;
           R1 = _sdUmm::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUuq_info" {
     block_cdUuq_info:
         const _cdUuq;
         const 1;
         const 30;
 },
 _cdUus() //  []
         { []
         }
     {offset
       cdUus: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUus_info" {
     block_cdUus_info:
         const _cdUus;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.308935152 UTC

[section ""data" . Control.Concurrent.QSem.signalQSem1_closure" {
     Control.Concurrent.QSem.signalQSem1_closure:
         const Control.Concurrent.QSem.signalQSem1_info;
 },
 Control.Concurrent.QSem.signalQSem1_entry() //  [R2]
         { []
         }
     {offset
       cdUvQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdUvR; else goto cdUvS;
       cdUvR: // global
           R2 = R2;
           R1 = Control.Concurrent.QSem.signalQSem1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdUvS: // global
           I64[Sp - 8] = block_cdUvN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udUvW; else goto cdUvO;
       udUvW: // global
           call _cdUvN(R1) args: 0, res: 0, upd: 0;
       cdUvO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.signalQSem1_info" {
     Control.Concurrent.QSem.signalQSem1_info:
         const Control.Concurrent.QSem.signalQSem1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cdUvN() //  [R1]
         { []
         }
     {offset
       cdUvN: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Control.Concurrent.QSem.$wsignalQSem_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUvN_info" {
     block_cdUvN_info:
         const _cdUvN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.314349499 UTC

[section ""data" . Control.Concurrent.QSem.signalQSem_closure" {
     Control.Concurrent.QSem.signalQSem_closure:
         const Control.Concurrent.QSem.signalQSem_info;
 },
 Control.Concurrent.QSem.signalQSem_entry() //  [R2]
         { []
         }
     {offset
       cdUwb: // global
           R2 = R2;
           call Control.Concurrent.QSem.signalQSem1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.signalQSem_info" {
     Control.Concurrent.QSem.signalQSem_info:
         const Control.Concurrent.QSem.signalQSem_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.324163237 UTC

[section ""data" . Control.Concurrent.QSem.$wlvl_closure" {
     Control.Concurrent.QSem.$wlvl_closure:
         const Control.Concurrent.QSem.$wlvl_info;
 },
 sat_sdUnG_entry() //  [R1]
         { []
         }
     {offset
       cdUwA: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cdUwB; else goto cdUwC;
       cdUwB: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdUwC: // global
           I64[Sp - 24] = block_cdUwv_info;
           _sdUn8::P64 = P64[R1 + 7];
           _sdUn9::P64 = P64[R1 + 15];
           R1 = _sdUn9::P64;
           P64[Sp - 16] = _sdUn8::P64;
           P64[Sp - 8] = _sdUn9::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdUnG_info" {
     sat_sdUnG_info:
         const sat_sdUnG_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cdUwv() //  [R1]
         { []
         }
     {offset
       cdUwv: // global
           I64[Sp] = block_cdUwx_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udUxq; else goto cdUwy;
       udUxq: // global
           call _cdUwx(R1) args: 0, res: 0, upd: 0;
       cdUwy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUwv_info" {
     block_cdUwv_info:
         const _cdUwv;
         const 2;
         const 30;
 },
 _cdUwx() //  [R1]
         { []
         }
     {offset
       cdUwx: // global
           I64[Sp - 32] = block_cdUwG_info;
           _sdUnk::P64 = R1;
           _sdUnl::P64 = P64[R1 + 7];
           _sdUnm::P64 = P64[R1 + 15];
           _sdUnn::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp - 24] = _sdUnl::P64;
           P64[Sp - 16] = _sdUnm::P64;
           P64[Sp - 8] = _sdUnn::P64;
           P64[Sp] = _sdUnk::P64;
           Sp = Sp - 32;
           call stg_tryTakeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUwx_info" {
     block_cdUwx_info:
         const _cdUwx;
         const 2;
         const 30;
 },
 _cdUwG() //  [R1]
         { []
         }
     {offset
       cdUwG: // global
           if (R1 == 0) goto cdUxm; else goto cdUwQ;
       cdUxm: // global
           I64[Sp + 24] = block_cdUxj_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 40];
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cdUwQ: // global
           _sdUnl::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdUwO_info;
           R1 = _sdUnl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udUxr; else goto cdUwR;
       udUxr: // global
           call _cdUwO(R1) args: 0, res: 0, upd: 0;
       cdUwR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUwG_info" {
     block_cdUwG_info:
         const _cdUwG;
         const 6;
         const 30;
 },
 _cdUxj() //  []
         { []
         }
     {offset
       cdUxj: // global
           _sdUn9::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cdUxl_info;
           R2 = P64[Sp + 8];
           R1 = _sdUn9::P64;
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUxj_info" {
     block_cdUxj_info:
         const _cdUxj;
         const 131;
         const 30;
 },
 _cdUwO() //  [R1]
         { []
         }
     {offset
       cdUwO: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdUwX; else goto cdUwW;
       cdUwX: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdUwW: // global
           _sdUnm::P64 = P64[Sp + 8];
           _sdUnn::P64 = P64[Sp + 16];
           _sdUnv::I64 = I64[R1 + 7];
           if (_sdUnv::I64 != 0) goto cdUx7; else goto cdUxe;
       cdUx7: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sdUnv::I64 + 1;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = _sdUnm::P64;
           P64[Hp] = _sdUnn::P64;
           _sdUn9::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cdUxl_info;
           R2 = Hp - 23;
           R1 = _sdUn9::P64;
           Sp = Sp + 40;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cdUxe: // global
           Hp = Hp - 48;
           I64[Sp + 32] = block_cdUxb_info;
           R3 = _sdUnn::P64;
           R2 = _sdUnm::P64;
           Sp = Sp + 32;
           call Control.Concurrent.QSem.signalQSem2_entry(R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUwO_info" {
     block_cdUwO_info:
         const _cdUwO;
         const 773;
         const 30;
 },
 _cdUxb() //  [R1]
         { []
         }
     {offset
       cdUxb: // global
           _sdUn9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdUxl_info;
           R2 = R1;
           R1 = _sdUn9::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUxb_info" {
     block_cdUxb_info:
         const _cdUxb;
         const 1;
         const 30;
 },
 _cdUxl() //  []
         { []
         }
     {offset
       cdUxl: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUxl_info" {
     block_cdUxl_info:
         const _cdUxl;
         const 0;
         const 30;
 },
 Control.Concurrent.QSem.$wlvl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdUxv: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cdUxw; else goto cdUxx;
       cdUxw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.QSem.$wlvl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdUxx: // global
           I64[Sp - 32] = block_cdUwm_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.$wlvl_info" {
     Control.Concurrent.QSem.$wlvl_info:
         const Control.Concurrent.QSem.$wlvl_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _cdUwm() //  [R1]
         { []
         }
     {offset
       cdUwm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdUxA; else goto cdUxz;
       cdUxA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdUxz: // global
           _sdUn9::P64 = P64[Sp + 16];
           if (R1 == 1) goto cdUxu; else goto cdUxt;
       cdUxu: // global
           Hp = Hp - 24;
           I64[Sp] = block_cdUxF_info;
           R1 = _sdUn9::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       cdUxt: // global
           I64[Hp - 16] = sat_sdUnG_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sdUn9::P64;
           I64[Sp + 16] = block_cdUxB_info;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call stg_maskUninterruptible#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUwm_info" {
     block_cdUwm_info:
         const _cdUwm;
         const 3;
         const 30;
 },
 _cdUxF() //  [R1]
         { []
         }
     {offset
       cdUxF: // global
           I64[Sp] = block_cdUxH_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udUyx; else goto cdUxJ;
       udUyx: // global
           call _cdUxH(R1) args: 0, res: 0, upd: 0;
       cdUxJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUxF_info" {
     block_cdUxF_info:
         const _cdUxF;
         const 3;
         const 30;
 },
 _cdUxH() //  [R1]
         { []
         }
     {offset
       cdUxH: // global
           I64[Sp - 32] = block_cdUxN_info;
           _sdUnN::P64 = R1;
           _sdUnO::P64 = P64[R1 + 7];
           _sdUnP::P64 = P64[R1 + 15];
           _sdUnQ::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp - 24] = _sdUnO::P64;
           P64[Sp - 16] = _sdUnP::P64;
           P64[Sp - 8] = _sdUnQ::P64;
           P64[Sp] = _sdUnN::P64;
           Sp = Sp - 32;
           call stg_tryTakeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUxH_info" {
     block_cdUxH_info:
         const _cdUxH;
         const 3;
         const 30;
 },
 _cdUxN() //  [R1]
         { []
         }
     {offset
       cdUxN: // global
           if (R1 == 0) goto cdUyt; else goto cdUxX;
       cdUyt: // global
           I64[Sp + 24] = block_cdUyq_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 40];
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cdUxX: // global
           _sdUnO::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdUxV_info;
           R1 = _sdUnO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udUyy; else goto cdUxY;
       udUyy: // global
           call _cdUxV(R1) args: 0, res: 0, upd: 0;
       cdUxY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUxN_info" {
     block_cdUxN_info:
         const _cdUxN;
         const 7;
         const 30;
 },
 _cdUyq() //  []
         { []
         }
     {offset
       cdUyq: // global
           _sdUn9::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cdUys_info;
           R2 = P64[Sp + 8];
           R1 = _sdUn9::P64;
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUyq_info" {
     block_cdUyq_info:
         const _cdUyq;
         const 132;
         const 30;
 },
 _cdUxV() //  [R1]
         { []
         }
     {offset
       cdUxV: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdUy4; else goto cdUy3;
       cdUy4: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdUy3: // global
           _sdUnP::P64 = P64[Sp + 8];
           _sdUnQ::P64 = P64[Sp + 16];
           _sdUnY::I64 = I64[R1 + 7];
           if (_sdUnY::I64 != 0) goto cdUye; else goto cdUyl;
       cdUye: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sdUnY::I64 + 1;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = _sdUnP::P64;
           P64[Hp] = _sdUnQ::P64;
           _sdUn9::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cdUys_info;
           R2 = Hp - 23;
           R1 = _sdUn9::P64;
           Sp = Sp + 40;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cdUyl: // global
           Hp = Hp - 48;
           I64[Sp + 32] = block_cdUyi_info;
           R3 = _sdUnQ::P64;
           R2 = _sdUnP::P64;
           Sp = Sp + 32;
           call Control.Concurrent.QSem.signalQSem2_entry(R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUxV_info" {
     block_cdUxV_info:
         const _cdUxV;
         const 774;
         const 30;
 },
 _cdUyi() //  [R1]
         { []
         }
     {offset
       cdUyi: // global
           _sdUn9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdUys_info;
           R2 = R1;
           R1 = _sdUn9::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUyi_info" {
     block_cdUyi_info:
         const _cdUyi;
         const 2;
         const 30;
 },
 _cdUys() //  []
         { []
         }
     {offset
       cdUys: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUys_info" {
     block_cdUys_info:
         const _cdUys;
         const 1;
         const 30;
 },
 _cdUxB() //  []
         { []
         }
     {offset
       cdUxB: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUxB_info" {
     block_cdUxB_info:
         const _cdUxB;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.361295251 UTC

[section ""data" . Control.Concurrent.QSem.$wwaitQSem_closure" {
     Control.Concurrent.QSem.$wwaitQSem_closure:
         const Control.Concurrent.QSem.$wwaitQSem_info;
 },
 sat_sdUoF_entry() //  [R1, R2]
         { []
         }
     {offset
       cdUAI: // global
           R4 = R2;
           R3 = P64[R1 + 6];
           R2 = P64[R1 + 14];
           call Control.Concurrent.QSem.$wlvl_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdUoF_info" {
     sat_sdUoF_info:
         const sat_sdUoF_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 sat_sdUoC_entry() //  [R1]
         { []
         }
     {offset
       cdUAQ: // global
           R1 = P64[R1 + 7];
           call stg_takeMVar#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdUoC_info" {
     sat_sdUoC_info:
         const sat_sdUoC_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 io_sdUoe_entry() //  [R1]
         { []
         }
     {offset
       cdUAT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdUAU; else goto cdUAV;
       cdUAU: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdUAV: // global
           I64[Sp - 16] = block_cdUAh_info;
           _sdUo9::P64 = P64[R1 + 7];
           R1 = _sdUo9::P64;
           P64[Sp - 8] = _sdUo9::P64;
           Sp = Sp - 16;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sdUoe_info" {
     io_sdUoe_info:
         const io_sdUoe_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _cdUAh() //  [R1]
         { []
         }
     {offset
       cdUAh: // global
           I64[Sp] = block_cdUAj_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udUBi; else goto cdUAk;
       udUBi: // global
           call _cdUAj(R1) args: 0, res: 0, upd: 0;
       cdUAk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUAh_info" {
     block_cdUAh_info:
         const _cdUAh;
         const 1;
         const 30;
 },
 _cdUAj() //  [R1]
         { []
         }
     {offset
       cdUAj: // global
           I64[Sp - 16] = block_cdUAo_info;
           _sdUol::P64 = P64[R1 + 15];
           _sdUom::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sdUom::P64;
           P64[Sp] = _sdUol::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udUBj; else goto cdUAp;
       udUBj: // global
           call _cdUAo(R1) args: 0, res: 0, upd: 0;
       cdUAp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUAj_info" {
     block_cdUAj_info:
         const _cdUAj;
         const 1;
         const 30;
 },
 _cdUAo() //  [R1]
         { []
         }
     {offset
       cdUAo: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdUB0; else goto cdUAZ;
       cdUB0: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdUAZ: // global
           _sdUop::I64 = I64[R1 + 7];
           if (_sdUop::I64 == 0) goto cdUBb; else goto cdUB8;
       cdUBb: // global
           Hp = Hp - 48;
           I64[Sp - 8] = block_cdUAw_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
       cdUB8: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sdUop::I64 - 1;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _sdUo9::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cdUB6_info;
           R2 = Hp - 23;
           R1 = _sdUo9::P64;
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUAo_info" {
     block_cdUAo_info:
         const _cdUAo;
         const 3;
         const 30;
 },
 _cdUAw() //  [R1]
         { []
         }
     {offset
       cdUAw: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdUBe; else goto cdUBd;
       cdUBe: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdUBd: // global
           I64[Hp - 64] = GHC.MVar.MVar_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 63;
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = Hp - 46;
           I64[Sp + 16] = block_cdUAB_info;
           R2 = Hp - 23;
           _sdUow::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 24] = _sdUow::P64;
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUAw_info" {
     block_cdUAw_info:
         const _cdUAw;
         const 4;
         const 30;
 },
 _cdUAB() //  []
         { []
         }
     {offset
       cdUAB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdUBh; else goto cdUBg;
       cdUBh: // global
           HpAlloc = 40;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdUBg: // global
           I64[Hp - 32] = sat_sdUoF_info;
           P64[Hp - 24] = P64[Sp + 16];
           _sdUow::P64 = P64[Sp + 8];
           P64[Hp - 16] = _sdUow::P64;
           I64[Hp - 8] = sat_sdUoC_info;
           P64[Hp] = _sdUow::P64;
           R2 = Hp - 30;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUAB_info" {
     block_cdUAB_info:
         const _cdUAB;
         const 2;
         const 30;
 },
 _cdUB6() //  []
         { []
         }
     {offset
       cdUB6: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUB6_info" {
     block_cdUB6_info:
         const _cdUB6;
         const 0;
         const 30;
 },
 Control.Concurrent.QSem.$wwaitQSem_entry() //  [R2]
         { []
         }
     {offset
       cdUBo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdUBp; else goto cdUBq;
       cdUBp: // global
           R2 = R2;
           R1 = Control.Concurrent.QSem.$wwaitQSem_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdUBq: // global
           I64[Sp - 16] = block_cdUAa_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.$wwaitQSem_info" {
     Control.Concurrent.QSem.$wwaitQSem_info:
         const Control.Concurrent.QSem.$wwaitQSem_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cdUAa() //  [R1]
         { []
         }
     {offset
       cdUAa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdUBt; else goto cdUBs;
       cdUBt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdUBs: // global
           I64[Hp - 8] = io_sdUoe_info;
           P64[Hp] = P64[Sp + 8];
           _cdUAc::P64 = Hp - 7;
           if (R1 == 0) goto cdUBn; else goto cdUBm;
       cdUBn: // global
           R1 = _cdUAc::P64;
           Sp = Sp + 16;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cdUBm: // global
           R1 = _cdUAc::P64;
           Sp = Sp + 16;
           call io_sdUoe_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUAa_info" {
     block_cdUAa_info:
         const _cdUAa;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.384016474 UTC

[section ""data" . Control.Concurrent.QSem.waitQSem1_closure" {
     Control.Concurrent.QSem.waitQSem1_closure:
         const Control.Concurrent.QSem.waitQSem1_info;
 },
 Control.Concurrent.QSem.waitQSem1_entry() //  [R2]
         { []
         }
     {offset
       cdUCF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdUCG; else goto cdUCH;
       cdUCG: // global
           R2 = R2;
           R1 = Control.Concurrent.QSem.waitQSem1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdUCH: // global
           I64[Sp - 8] = block_cdUCC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udUCL; else goto cdUCD;
       udUCL: // global
           call _cdUCC(R1) args: 0, res: 0, upd: 0;
       cdUCD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.waitQSem1_info" {
     Control.Concurrent.QSem.waitQSem1_info:
         const Control.Concurrent.QSem.waitQSem1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cdUCC() //  [R1]
         { []
         }
     {offset
       cdUCC: // global
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Control.Concurrent.QSem.$wwaitQSem_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdUCC_info" {
     block_cdUCC_info:
         const _cdUCC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.39003268 UTC

[section ""data" . Control.Concurrent.QSem.waitQSem_closure" {
     Control.Concurrent.QSem.waitQSem_closure:
         const Control.Concurrent.QSem.waitQSem_info;
 },
 Control.Concurrent.QSem.waitQSem_entry() //  [R2]
         { []
         }
     {offset
       cdUD0: // global
           R2 = R2;
           call Control.Concurrent.QSem.waitQSem1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.waitQSem_info" {
     Control.Concurrent.QSem.waitQSem_info:
         const Control.Concurrent.QSem.waitQSem_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.393901751 UTC

[section ""data" . Control.Concurrent.QSem.QSem_closure" {
     Control.Concurrent.QSem.QSem_closure:
         const Control.Concurrent.QSem.QSem_info;
 },
 Control.Concurrent.QSem.QSem_entry() //  [R2]
         { []
         }
     {offset
       cdUDc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdUDg; else goto cdUDf;
       cdUDg: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Control.Concurrent.QSem.QSem_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdUDf: // global
           I64[Hp - 8] = Control.Concurrent.QSem.QSem_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.QSem_info" {
     Control.Concurrent.QSem.QSem_info:
         const Control.Concurrent.QSem.QSem_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.397764441 UTC

[section ""cstring" . idUDo_str" {
     idUDo_str:
         I8[] [98,97,115,101,58,67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,81,83,101,109,46,81,83,101,109]
 },
 Control.Concurrent.QSem.QSem_con_entry() //  [R1]
         { []
         }
     {offset
       cdUDn: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSem.QSem_con_info" {
     Control.Concurrent.QSem.QSem_con_info:
         const Control.Concurrent.QSem.QSem_con_entry;
         const 1;
         const 2;
         const idUDo_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.401007016 UTC

[section ""relreadonly" . SdUpQ_srt" {
     SdUpQ_srt:
         const GHC.IO.failIO1_closure;
         const Control.Concurrent.QSem.newQSem2_closure;
         const Control.Concurrent.QSem.newQSem1_closure;
 }]

