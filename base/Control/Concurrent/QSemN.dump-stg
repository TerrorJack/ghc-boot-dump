
==================== Pre unarise: ====================
2018-03-16 16:09:07.627262928 UTC

Control.Concurrent.QSemN.$WQSemN [InlPrag=INLINE[2]]
  :: GHC.MVar.MVar
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> Control.Concurrent.QSemN.QSemN
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m,
 Unf=OtherCon []] =
    [] \r [dt_sdSvQ]
        case dt_sdSvQ of {
          GHC.MVar.MVar dt_sdSvS [Occ=Once] ->
              Control.Concurrent.QSemN.QSemN [dt_sdSvS];
        };

Control.Concurrent.QSemN.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Concurrent.QSemN.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSemN.$trModule4];

Control.Concurrent.QSemN.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Concurrent.QSemN"#;

Control.Concurrent.QSemN.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSemN.$trModule2];

Control.Concurrent.QSemN.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Concurrent.QSemN.$trModule3
                                     Control.Concurrent.QSemN.$trModule1];

$krep_rdSvw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep1_rdSvx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rdSvy :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rdSvw GHC.Types.[]];

$krep3_rdSvz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep2_rdSvy];

$krep4_rdSvA :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_rdSvz GHC.Types.[]];

$krep5_rdSvB :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rdSvx $krep4_rdSvA];

$krep6_rdSvC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep5_rdSvB];

$krep7_rdSvD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep6_rdSvC GHC.Types.[]];

$krep8_rdSvE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep7_rdSvD];

$krep9_rdSvF :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep8_rdSvE GHC.Types.[]];

$krep10_rdSvG :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep8_rdSvE $krep9_rdSvF];

$krep11_rdSvH :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rdSvx $krep10_rdSvG];

$krep12_rdSvI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,,)
                                              $krep11_rdSvH];

$krep13_rdSvJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep12_rdSvI GHC.Types.[]];

$krep14_rdSvK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep13_rdSvJ];

Control.Concurrent.QSemN.$tcQSemN2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "QSemN"#;

Control.Concurrent.QSemN.$tcQSemN1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSemN.$tcQSemN2];

Control.Concurrent.QSemN.$tcQSemN :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8650881979471817661##
                                    11033619023634057930##
                                    Control.Concurrent.QSemN.$trModule
                                    Control.Concurrent.QSemN.$tcQSemN1
                                    0#
                                    GHC.Types.krep$*];

$krep15_rdSvL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Control.Concurrent.QSemN.$tcQSemN
                                              GHC.Types.[]];

Control.Concurrent.QSemN.$tc'QSemN1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep14_rdSvK $krep15_rdSvL];

Control.Concurrent.QSemN.$tc'QSemN3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'QSemN"#;

Control.Concurrent.QSemN.$tc'QSemN2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSemN.$tc'QSemN3];

Control.Concurrent.QSemN.$tc'QSemN :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15878277071781304355##
                                    273080421945023395##
                                    Control.Concurrent.QSemN.$trModule
                                    Control.Concurrent.QSemN.$tc'QSemN2
                                    0#
                                    Control.Concurrent.QSemN.$tc'QSemN1];

lvl_rdSvM :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "newQSemN: Initial quantity must be non-negative"#;

Control.Concurrent.QSemN.newQSemN2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Control.Concurrent.QSemN.QSemN #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sdSvT]
        case GHC.CString.unpackCString# lvl_rdSvM of sat_sdSvU {
          __DEFAULT -> GHC.IO.failIO1 sat_sdSvU eta_sdSvT;
        };

Control.Concurrent.QSemN.newQSemN1
  :: GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Control.Concurrent.QSemN.QSemN #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [initial_sdSvV eta_sdSvW]
        case initial_sdSvV of wild_sdSvX {
          GHC.Types.I# x_sdSvY [Occ=Once] ->
              case <# [x_sdSvY 0#] of {
                __DEFAULT ->
                    case newMVar# [eta_sdSvW] of {
                      (#,#) ipv_sdSw1 [Occ=Once] ipv1_sdSw2 ->
                          let {
                            sat_sdSw3 [Occ=Once]
                              :: (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
                                  [(GHC.Types.Int, GHC.MVar.MVar ())])
                            [LclId] =
                                CCCS (,,)! [wild_sdSvX GHC.Types.[] GHC.Types.[]];
                          } in 
                            case putMVar# [ipv1_sdSw2 sat_sdSw3 ipv_sdSw1] of s2#_sdSw4 {
                              __DEFAULT ->
                                  let {
                                    sat_sdSw5 [Occ=Once] :: Control.Concurrent.QSemN.QSemN
                                    [LclId] =
                                        CCCS Control.Concurrent.QSemN.QSemN! [ipv1_sdSw2];
                                  } in  (#,#) [s2#_sdSw4 sat_sdSw5];
                            };
                    };
                1# -> Control.Concurrent.QSemN.newQSemN2 eta_sdSvW;
              };
        };

Control.Concurrent.QSemN.newQSemN
  :: GHC.Types.Int -> GHC.Types.IO Control.Concurrent.QSemN.QSemN
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Concurrent.QSemN.newQSemN1 eta_B2 eta_B1;

lvl1_rdSvN :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Control.Concurrent.QSemN.$wloop [InlPrag=NOUSERINLINE[0],
                                 Occ=LoopBreaker]
  :: GHC.Prim.Int#
     -> [(GHC.Types.Int, GHC.MVar.MVar ())]
     -> [(GHC.Types.Int, GHC.MVar.MVar ())]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
            [(GHC.Types.Int, GHC.MVar.MVar ())]) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdSw6 w_sdSw7 w1_sdSw8 w2_sdSw9]
        case ww_sdSw6 of wild_sdSwa {
          __DEFAULT ->
              case w_sdSw7 of wild1_sdSwb {
                [] ->
                    case w1_sdSw8 of wild2_sdSwc {
                      [] ->
                          let {
                            sat_sdSwd [Occ=Once] :: GHC.Types.Int
                            [LclId] =
                                CCCS GHC.Types.I#! [wild_sdSwa]; } in
                          let {
                            sat_sdSwe [Occ=Once]
                              :: (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
                                  [(GHC.Types.Int, GHC.MVar.MVar ())])
                            [LclId] =
                                CCCS (,,)! [sat_sdSwd GHC.Types.[] GHC.Types.[]];
                          } in  (#,#) [w2_sdSw9 sat_sdSwe];
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          let {
                            sat_sdSwh [Occ=Once] :: [(GHC.Types.Int, GHC.MVar.MVar ())]
                            [LclId] =
                                [wild2_sdSwc] \u [] GHC.List.reverse1 wild2_sdSwc GHC.Types.[];
                          } in 
                            Control.Concurrent.QSemN.$wloop
                                wild_sdSwa sat_sdSwh GHC.Types.[] w2_sdSw9;
                    };
                : ds_sdSwi [Occ=Once!] bs_sdSwj [Occ=Once*] ->
                    case ds_sdSwi of {
                      (,) j_sdSwl [Occ=Once!] b_sdSwm [Occ=Once*!] ->
                          case j_sdSwl of {
                            GHC.Types.I# x_sdSwo ->
                                case ># [x_sdSwo wild_sdSwa] of {
                                  __DEFAULT ->
                                      case b_sdSwm of {
                                        GHC.MVar.MVar mvar#_sdSwr [Occ=Once] ->
                                            case
                                                tryPutMVar# [mvar#_sdSwr GHC.Tuple.() w2_sdSw9]
                                            of
                                            { (#,#) ipv_sdSwt [Occ=Once*] ipv1_sdSwu [Occ=Once!] ->
                                                  case ipv1_sdSwu of {
                                                    __DEFAULT ->
                                                        case -# [wild_sdSwa x_sdSwo] of sat_sdSww {
                                                          __DEFAULT ->
                                                              Control.Concurrent.QSemN.$wloop
                                                                  sat_sdSww
                                                                  bs_sdSwj
                                                                  w1_sdSw8
                                                                  ipv_sdSwt;
                                                        };
                                                    0# ->
                                                        Control.Concurrent.QSemN.$wloop
                                                            wild_sdSwa bs_sdSwj w1_sdSw8 ipv_sdSwt;
                                                  };
                                            };
                                      };
                                  1# ->
                                      case b_sdSwm of {
                                        GHC.MVar.MVar mv#_sdSwy [Occ=Once] ->
                                            case isEmptyMVar# [mv#_sdSwy w2_sdSw9] of {
                                              (#,#) ipv_sdSwA [Occ=Once*] ipv1_sdSwB [Occ=Once!] ->
                                                  case ipv1_sdSwB of {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_sdSwD [Occ=Once] :: GHC.Types.Int
                                                          [LclId] =
                                                              CCCS GHC.Types.I#! [wild_sdSwa]; } in
                                                        let {
                                                          sat_sdSwE [Occ=Once]
                                                            :: (GHC.Types.Int,
                                                                [(GHC.Types.Int, GHC.MVar.MVar ())],
                                                                [(GHC.Types.Int, GHC.MVar.MVar ())])
                                                          [LclId] =
                                                              CCCS (,,)! [sat_sdSwD
                                                                          wild1_sdSwb
                                                                          w1_sdSw8];
                                                        } in  (#,#) [ipv_sdSwA sat_sdSwE];
                                                    0# ->
                                                        Control.Concurrent.QSemN.$wloop
                                                            wild_sdSwa bs_sdSwj w1_sdSw8 ipv_sdSwA;
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
          0# ->
              let {
                sat_sdSwF [Occ=Once]
                  :: (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
                      [(GHC.Types.Int, GHC.MVar.MVar ())])
                [LclId] =
                    CCCS (,,)! [lvl1_rdSvN w_sdSw7 w1_sdSw8];
              } in  (#,#) [w2_sdSw9 sat_sdSwF];
        };

Control.Concurrent.QSemN.$wsignalQSemN [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdSwG ww1_sdSwH w_sdSwI]
        case getMaskingState# [w_sdSwI] of {
          (#,#) ipv_sdSwK [Occ=Once*] ipv1_sdSwL [Occ=Once!] ->
              case ipv1_sdSwL of {
                __DEFAULT ->
                    let {
                      sat_sdSx2 [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [ww_sdSwG ww1_sdSwH] \r [s_sdSwN]
                              case takeMVar# [ww_sdSwG s_sdSwN] of {
                                (#,#) ipv2_sdSwP [Occ=Once] ipv3_sdSwQ [Occ=Once!] ->
                                    case ipv3_sdSwQ of {
                                      (,,) i_sdSwS [Occ=Once!]
                                           a1_sdSwT [Occ=Once]
                                           a2_sdSwU [Occ=Once] ->
                                          case i_sdSwS of {
                                            GHC.Types.I# y_sdSwW [Occ=Once] ->
                                                case +# [ww1_sdSwH y_sdSwW] of sat_sdSwX {
                                                  __DEFAULT ->
                                                      case
                                                          Control.Concurrent.QSemN.$wloop
                                                              sat_sdSwX a1_sdSwT a2_sdSwU ipv2_sdSwP
                                                      of
                                                      { (#,#) ipv4_sdSwZ [Occ=Once]
                                                              ipv5_sdSx0 [Occ=Once] ->
                                                            case
                                                                putMVar# [ww_sdSwG
                                                                          ipv5_sdSx0
                                                                          ipv4_sdSwZ]
                                                            of
                                                            s2#_sdSx1
                                                            { __DEFAULT ->
                                                                  (#,#) [s2#_sdSx1 GHC.Tuple.()];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in  maskUninterruptible# [sat_sdSx2 ipv_sdSwK];
                1# ->
                    case takeMVar# [ww_sdSwG ipv_sdSwK] of {
                      (#,#) ipv2_sdSx4 [Occ=Once] ipv3_sdSx5 [Occ=Once!] ->
                          case ipv3_sdSx5 of {
                            (,,) i_sdSx7 [Occ=Once!] a1_sdSx8 [Occ=Once] a2_sdSx9 [Occ=Once] ->
                                case i_sdSx7 of {
                                  GHC.Types.I# y_sdSxb [Occ=Once] ->
                                      case +# [ww1_sdSwH y_sdSxb] of sat_sdSxc {
                                        __DEFAULT ->
                                            case
                                                Control.Concurrent.QSemN.$wloop
                                                    sat_sdSxc a1_sdSx8 a2_sdSx9 ipv2_sdSx4
                                            of
                                            { (#,#) ipv4_sdSxe [Occ=Once] ipv5_sdSxf [Occ=Once] ->
                                                  case
                                                      putMVar# [ww_sdSwG ipv5_sdSxf ipv4_sdSxe]
                                                  of
                                                  s2#_sdSxg
                                                  { __DEFAULT -> (#,#) [s2#_sdSxg GHC.Tuple.()];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Control.Concurrent.QSemN.signalQSemN1 [InlPrag=NOUSERINLINE[0]]
  :: Control.Concurrent.QSemN.QSemN
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sdSxh w1_sdSxi w2_sdSxj]
        case w_sdSxh of {
          Control.Concurrent.QSemN.QSemN ww1_sdSxl [Occ=Once] ->
              case w1_sdSxi of {
                GHC.Types.I# ww3_sdSxn [Occ=Once] ->
                    Control.Concurrent.QSemN.$wsignalQSemN
                        ww1_sdSxl ww3_sdSxn w2_sdSxj;
              };
        };

Control.Concurrent.QSemN.signalQSemN
  :: Control.Concurrent.QSemN.QSemN
     -> GHC.Types.Int -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Control.Concurrent.QSemN.signalQSemN1 eta_B3 eta_B2 eta_B1;

lvl2_rdSvO
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> GHC.Types.Int
     -> GHC.Prim.MVar# GHC.Prim.RealWorld ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Exception.SomeException
     -> GHC.Prim.Int#
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<S,U><S(S),1*U(U)><S,U><S,U><L,U><S,1*U>,
 Unf=OtherCon []] =
    sat-only [] \r [w_sdSxo
                    w1_sdSxp
                    ww_sdSxq
                    ipv_sdSxr
                    w2_sdSxs
                    ipv1_sdSxt]
        case ipv1_sdSxt of {
          __DEFAULT ->
              let {
                sat_sdSxT [Occ=Once]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId] =
                    [w_sdSxo w1_sdSxp ww_sdSxq] \r [s_sdSxv]
                        case takeMVar# [w_sdSxo s_sdSxv] of {
                          (#,#) ipv2_sdSxx [Occ=Once] ipv3_sdSxy [Occ=Once!] ->
                              case ipv3_sdSxy of wild_sdSxz {
                                (,,) i_sdSxA [Occ=Once!] b1_sdSxB [Occ=Once] b2_sdSxC [Occ=Once] ->
                                    case tryTakeMVar# [ww_sdSxq ipv2_sdSxx] of {
                                      (#,,#) ipv4_sdSxE [Occ=Once*]
                                             ipv5_sdSxF [Occ=Once!]
                                             _ [Occ=Dead] ->
                                          case ipv5_sdSxF of {
                                            __DEFAULT ->
                                                case w1_sdSxp of {
                                                  GHC.Types.I# x_sdSxJ [Occ=Once] ->
                                                      case i_sdSxA of {
                                                        GHC.Types.I# y_sdSxL [Occ=Once] ->
                                                            case +# [x_sdSxJ y_sdSxL] of sat_sdSxM {
                                                              __DEFAULT ->
                                                                  case
                                                                      Control.Concurrent.QSemN.$wloop
                                                                          sat_sdSxM
                                                                          b1_sdSxB
                                                                          b2_sdSxC
                                                                          ipv4_sdSxE
                                                                  of
                                                                  { (#,#) ipv7_sdSxO [Occ=Once]
                                                                          ipv8_sdSxP [Occ=Once] ->
                                                                        case
                                                                            putMVar# [w_sdSxo
                                                                                      ipv8_sdSxP
                                                                                      ipv7_sdSxO]
                                                                        of
                                                                        s2#_sdSxQ
                                                                        { __DEFAULT ->
                                                                              (#,#) [s2#_sdSxQ
                                                                                     GHC.Tuple.()];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                            0# ->
                                                case
                                                    putMVar# [ww_sdSxq GHC.Tuple.() ipv4_sdSxE]
                                                of
                                                s2#_sdSxR
                                                { __DEFAULT ->
                                                      case
                                                          putMVar# [w_sdSxo wild_sdSxz s2#_sdSxR]
                                                      of
                                                      s2#1_sdSxS
                                                      { __DEFAULT ->
                                                            (#,#) [s2#1_sdSxS GHC.Tuple.()];
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case maskUninterruptible# [sat_sdSxT ipv_sdSxr] of {
                  (#,#) ipv2_sdSxV [Occ=Once] _ [Occ=Dead] ->
                      raiseIO# [w2_sdSxs ipv2_sdSxV];
                };
          1# ->
              case takeMVar# [w_sdSxo ipv_sdSxr] of {
                (#,#) ipv2_sdSxY [Occ=Once] ipv3_sdSxZ [Occ=Once!] ->
                    case ipv3_sdSxZ of wild_sdSy0 {
                      (,,) i_sdSy1 [Occ=Once!] b1_sdSy2 [Occ=Once] b2_sdSy3 [Occ=Once] ->
                          case tryTakeMVar# [ww_sdSxq ipv2_sdSxY] of {
                            (#,,#) ipv4_sdSy5 [Occ=Once*]
                                   ipv5_sdSy6 [Occ=Once!]
                                   _ [Occ=Dead] ->
                                case ipv5_sdSy6 of {
                                  __DEFAULT ->
                                      case w1_sdSxp of {
                                        GHC.Types.I# x_sdSya [Occ=Once] ->
                                            case i_sdSy1 of {
                                              GHC.Types.I# y_sdSyc [Occ=Once] ->
                                                  case +# [x_sdSya y_sdSyc] of sat_sdSyd {
                                                    __DEFAULT ->
                                                        case
                                                            Control.Concurrent.QSemN.$wloop
                                                                sat_sdSyd
                                                                b1_sdSy2
                                                                b2_sdSy3
                                                                ipv4_sdSy5
                                                        of
                                                        { (#,#) ipv7_sdSyf [Occ=Once]
                                                                ipv8_sdSyg [Occ=Once] ->
                                                              case
                                                                  putMVar# [w_sdSxo
                                                                            ipv8_sdSyg
                                                                            ipv7_sdSyf]
                                                              of
                                                              s2#_sdSyh
                                                              { __DEFAULT ->
                                                                    raiseIO# [w2_sdSxs s2#_sdSyh];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# ->
                                      case
                                          putMVar# [ww_sdSxq GHC.Tuple.() ipv4_sdSy5]
                                      of
                                      s2#_sdSyi
                                      { __DEFAULT ->
                                            case
                                                putMVar# [w_sdSxo wild_sdSy0 s2#_sdSyi]
                                            of
                                            s2#1_sdSyj
                                            { __DEFAULT -> raiseIO# [w2_sdSxs s2#1_sdSyj];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Control.Concurrent.QSemN.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar# GHC.Prim.RealWorld ()
     -> GHC.Types.Int
     -> GHC.Prim.MVar#
          GHC.Prim.RealWorld
          (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
           [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Exception.SomeException
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S,U><S(S),1*U(U)><S,U><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdSyk w_sdSyl w1_sdSym w2_sdSyn w3_sdSyo]
        case getMaskingState# [w2_sdSyn] of {
          (#,#) ipv_sdSyq [Occ=Once] ipv1_sdSyr [Occ=Once] ->
              lvl2_rdSvO w1_sdSym w_sdSyl ww_sdSyk ipv_sdSyq w3_sdSyo ipv1_sdSyr;
        };

Control.Concurrent.QSemN.$wwaitQSemN [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdSys ww1_sdSyt w_sdSyu]
        case getMaskingState# [w_sdSyu] of {
          (#,#) ipv_sdSyw [Occ=Once*] ipv1_sdSyx [Occ=Once!] ->
              let {
                io_sdSyy [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                    [ww_sdSys ww1_sdSyt] \r [s_sdSyz]
                        case takeMVar# [ww_sdSys s_sdSyz] of {
                          (#,#) ipv2_sdSyB [Occ=Once*] ipv3_sdSyC [Occ=Once!] ->
                              case ipv3_sdSyC of {
                                (,,) i_sdSyE [Occ=Once!]
                                     b1_sdSyF [Occ=Once*]
                                     b2_sdSyG [Occ=Once*] ->
                                    case i_sdSyE of wild1_sdSyH {
                                      GHC.Types.I# x_sdSyI [Occ=Once] ->
                                          case -# [x_sdSyI ww1_sdSyt] of x1_sdSyJ [Dmd=<S,U>] {
                                            __DEFAULT ->
                                                case <# [x1_sdSyJ 0#] of {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sdSyL [Occ=Once] :: GHC.Types.Int
                                                        [LclId] =
                                                            CCCS GHC.Types.I#! [x1_sdSyJ]; } in
                                                      let {
                                                        sat_sdSyM [Occ=Once]
                                                          :: (GHC.Types.Int,
                                                              [(GHC.Types.Int, GHC.MVar.MVar ())],
                                                              [(GHC.Types.Int, GHC.MVar.MVar ())])
                                                        [LclId] =
                                                            CCCS (,,)! [sat_sdSyL
                                                                        b1_sdSyF
                                                                        b2_sdSyG];
                                                      } in 
                                                        case
                                                            putMVar# [ww_sdSys sat_sdSyM ipv2_sdSyB]
                                                        of
                                                        s2#_sdSyN
                                                        { __DEFAULT ->
                                                              (#,#) [s2#_sdSyN GHC.Tuple.()];
                                                        };
                                                  1# ->
                                                      case newMVar# [ipv2_sdSyB] of {
                                                        (#,#) ipv4_sdSyP [Occ=Once] ipv5_sdSyQ ->
                                                            let {
                                                              wild2_sdSyR [Dmd=<L,U(U)>]
                                                                :: GHC.Types.Int
                                                              [LclId, Unf=OtherCon []] =
                                                                  CCCS GHC.Types.I#! [ww1_sdSyt]; } in
                                                            let {
                                                              sat_sdSyS [Occ=Once]
                                                                :: GHC.MVar.MVar ()
                                                              [LclId] =
                                                                  CCCS GHC.MVar.MVar! [ipv5_sdSyQ]; } in
                                                            let {
                                                              sat_sdSyT [Occ=Once]
                                                                :: (GHC.Types.Int, GHC.MVar.MVar ())
                                                              [LclId] =
                                                                  CCCS (,)! [wild2_sdSyR
                                                                             sat_sdSyS]; } in
                                                            let {
                                                              sat_sdSyU [Occ=Once]
                                                                :: [(GHC.Types.Int,
                                                                     GHC.MVar.MVar ())]
                                                              [LclId] =
                                                                  CCCS :! [sat_sdSyT b2_sdSyG]; } in
                                                            let {
                                                              sat_sdSyV [Occ=Once]
                                                                :: (GHC.Types.Int,
                                                                    [(GHC.Types.Int,
                                                                      GHC.MVar.MVar ())],
                                                                    [(GHC.Types.Int,
                                                                      GHC.MVar.MVar ())])
                                                              [LclId] =
                                                                  CCCS (,,)! [wild1_sdSyH
                                                                              b1_sdSyF
                                                                              sat_sdSyU];
                                                            } in 
                                                              case
                                                                  putMVar# [ww_sdSys
                                                                            sat_sdSyV
                                                                            ipv4_sdSyP]
                                                              of
                                                              s2#_sdSyW
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_sdSz1 [Occ=Once]
                                                                        :: GHC.Exception.SomeException
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 () #)
                                                                      [LclId] =
                                                                          [ww_sdSys
                                                                           ipv5_sdSyQ
                                                                           wild2_sdSyR] \r [e1_sdSyZ
                                                                                            s1_sdSz0]
                                                                              Control.Concurrent.QSemN.$wlvl
                                                                                  ipv5_sdSyQ
                                                                                  wild2_sdSyR
                                                                                  ww_sdSys
                                                                                  s1_sdSz0
                                                                                  e1_sdSyZ; } in
                                                                    let {
                                                                      sat_sdSyY [Occ=Once]
                                                                        :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 () #)
                                                                      [LclId] =
                                                                          [ipv5_sdSyQ] \r [eta_sdSyX]
                                                                              takeMVar# [ipv5_sdSyQ
                                                                                         eta_sdSyX];
                                                                    } in 
                                                                      catch# [sat_sdSyY
                                                                              sat_sdSz1
                                                                              s2#_sdSyW];
                                                              };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case ipv1_sdSyx of {
                  __DEFAULT -> io_sdSyy ipv_sdSyw;
                  0# -> maskAsyncExceptions# [io_sdSyy ipv_sdSyw];
                };
        };

Control.Concurrent.QSemN.waitQSemN1 [InlPrag=NOUSERINLINE[0]]
  :: Control.Concurrent.QSemN.QSemN
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sdSz3 w1_sdSz4 w2_sdSz5]
        case w_sdSz3 of {
          Control.Concurrent.QSemN.QSemN ww1_sdSz7 [Occ=Once] ->
              case w1_sdSz4 of {
                GHC.Types.I# ww3_sdSz9 [Occ=Once] ->
                    Control.Concurrent.QSemN.$wwaitQSemN ww1_sdSz7 ww3_sdSz9 w2_sdSz5;
              };
        };

Control.Concurrent.QSemN.waitQSemN
  :: Control.Concurrent.QSemN.QSemN
     -> GHC.Types.Int -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Control.Concurrent.QSemN.waitQSemN1 eta_B3 eta_B2 eta_B1;

Control.Concurrent.QSemN.QSemN
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> Control.Concurrent.QSemN.QSemN
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] Control.Concurrent.QSemN.QSemN [eta_B1];


==================== STG syntax: ====================
2018-03-16 16:09:07.641106928 UTC

Control.Concurrent.QSemN.$WQSemN [InlPrag=INLINE[2]]
  :: GHC.MVar.MVar
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> Control.Concurrent.QSemN.QSemN
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m,
 Unf=OtherCon []] =
    [] \r [dt_sdSvQ]
        case dt_sdSvQ of {
          GHC.MVar.MVar dt_sdSvS [Occ=Once] ->
              Control.Concurrent.QSemN.QSemN [dt_sdSvS];
        };

Control.Concurrent.QSemN.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Concurrent.QSemN.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSemN.$trModule4];

Control.Concurrent.QSemN.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Concurrent.QSemN"#;

Control.Concurrent.QSemN.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSemN.$trModule2];

Control.Concurrent.QSemN.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Concurrent.QSemN.$trModule3
                                     Control.Concurrent.QSemN.$trModule1];

$krep_rdSvw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep1_rdSvx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rdSvy :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rdSvw GHC.Types.[]];

$krep3_rdSvz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep2_rdSvy];

$krep4_rdSvA :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_rdSvz GHC.Types.[]];

$krep5_rdSvB :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rdSvx $krep4_rdSvA];

$krep6_rdSvC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep5_rdSvB];

$krep7_rdSvD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep6_rdSvC GHC.Types.[]];

$krep8_rdSvE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep7_rdSvD];

$krep9_rdSvF :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep8_rdSvE GHC.Types.[]];

$krep10_rdSvG :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep8_rdSvE $krep9_rdSvF];

$krep11_rdSvH :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rdSvx $krep10_rdSvG];

$krep12_rdSvI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,,)
                                              $krep11_rdSvH];

$krep13_rdSvJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep12_rdSvI GHC.Types.[]];

$krep14_rdSvK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep13_rdSvJ];

Control.Concurrent.QSemN.$tcQSemN2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "QSemN"#;

Control.Concurrent.QSemN.$tcQSemN1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSemN.$tcQSemN2];

Control.Concurrent.QSemN.$tcQSemN :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8650881979471817661##
                                    11033619023634057930##
                                    Control.Concurrent.QSemN.$trModule
                                    Control.Concurrent.QSemN.$tcQSemN1
                                    0#
                                    GHC.Types.krep$*];

$krep15_rdSvL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Control.Concurrent.QSemN.$tcQSemN
                                              GHC.Types.[]];

Control.Concurrent.QSemN.$tc'QSemN1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep14_rdSvK $krep15_rdSvL];

Control.Concurrent.QSemN.$tc'QSemN3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'QSemN"#;

Control.Concurrent.QSemN.$tc'QSemN2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSemN.$tc'QSemN3];

Control.Concurrent.QSemN.$tc'QSemN :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15878277071781304355##
                                    273080421945023395##
                                    Control.Concurrent.QSemN.$trModule
                                    Control.Concurrent.QSemN.$tc'QSemN2
                                    0#
                                    Control.Concurrent.QSemN.$tc'QSemN1];

lvl_rdSvM :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "newQSemN: Initial quantity must be non-negative"#;

Control.Concurrent.QSemN.newQSemN2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Control.Concurrent.QSemN.QSemN #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        case GHC.CString.unpackCString# lvl_rdSvM of sat_sdSvU {
          __DEFAULT -> GHC.IO.failIO1 sat_sdSvU GHC.Prim.void#;
        };

Control.Concurrent.QSemN.newQSemN1
  :: GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Control.Concurrent.QSemN.QSemN #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [initial_sdSvV void_0E]
        case initial_sdSvV of wild_sdSvX {
          GHC.Types.I# x_sdSvY [Occ=Once] ->
              case <# [x_sdSvY 0#] of {
                __DEFAULT ->
                    case newMVar# [GHC.Prim.void#] of {
                      Unit# ipv1_sdSw2 ->
                          let {
                            sat_sdSw3 [Occ=Once]
                              :: (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
                                  [(GHC.Types.Int, GHC.MVar.MVar ())])
                            [LclId] =
                                CCCS (,,)! [wild_sdSvX GHC.Types.[] GHC.Types.[]];
                          } in 
                            case putMVar# [ipv1_sdSw2 sat_sdSw3 GHC.Prim.void#] of s2#_sdSw4 {
                              (##) ->
                                  let {
                                    sat_sdSw5 [Occ=Once] :: Control.Concurrent.QSemN.QSemN
                                    [LclId] =
                                        CCCS Control.Concurrent.QSemN.QSemN! [ipv1_sdSw2];
                                  } in  Unit# [sat_sdSw5];
                            };
                    };
                1# -> Control.Concurrent.QSemN.newQSemN2 GHC.Prim.void#;
              };
        };

Control.Concurrent.QSemN.newQSemN
  :: GHC.Types.Int -> GHC.Types.IO Control.Concurrent.QSemN.QSemN
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Control.Concurrent.QSemN.newQSemN1 eta_B2 GHC.Prim.void#;

lvl1_rdSvN :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Control.Concurrent.QSemN.$wloop [InlPrag=NOUSERINLINE[0],
                                 Occ=LoopBreaker]
  :: GHC.Prim.Int#
     -> [(GHC.Types.Int, GHC.MVar.MVar ())]
     -> [(GHC.Types.Int, GHC.MVar.MVar ())]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
            [(GHC.Types.Int, GHC.MVar.MVar ())]) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdSw6 w_sdSw7 w1_sdSw8 void_0E]
        case ww_sdSw6 of wild_sdSwa {
          __DEFAULT ->
              case w_sdSw7 of wild1_sdSwb {
                [] ->
                    case w1_sdSw8 of wild2_sdSwc {
                      [] ->
                          let {
                            sat_sdSwd [Occ=Once] :: GHC.Types.Int
                            [LclId] =
                                CCCS GHC.Types.I#! [wild_sdSwa]; } in
                          let {
                            sat_sdSwe [Occ=Once]
                              :: (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
                                  [(GHC.Types.Int, GHC.MVar.MVar ())])
                            [LclId] =
                                CCCS (,,)! [sat_sdSwd GHC.Types.[] GHC.Types.[]];
                          } in  Unit# [sat_sdSwe];
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          let {
                            sat_sdSwh [Occ=Once] :: [(GHC.Types.Int, GHC.MVar.MVar ())]
                            [LclId] =
                                [wild2_sdSwc] \u [] GHC.List.reverse1 wild2_sdSwc GHC.Types.[];
                          } in 
                            Control.Concurrent.QSemN.$wloop
                                wild_sdSwa sat_sdSwh GHC.Types.[] GHC.Prim.void#;
                    };
                : ds_sdSwi [Occ=Once!] bs_sdSwj [Occ=Once*] ->
                    case ds_sdSwi of {
                      (,) j_sdSwl [Occ=Once!] b_sdSwm [Occ=Once*!] ->
                          case j_sdSwl of {
                            GHC.Types.I# x_sdSwo ->
                                case ># [x_sdSwo wild_sdSwa] of {
                                  __DEFAULT ->
                                      case b_sdSwm of {
                                        GHC.MVar.MVar mvar#_sdSwr [Occ=Once] ->
                                            case
                                                tryPutMVar# [mvar#_sdSwr
                                                             GHC.Tuple.()
                                                             GHC.Prim.void#]
                                            of
                                            { Unit# ipv1_sdSwu [Occ=Once!] ->
                                                  case ipv1_sdSwu of {
                                                    __DEFAULT ->
                                                        case -# [wild_sdSwa x_sdSwo] of sat_sdSww {
                                                          __DEFAULT ->
                                                              Control.Concurrent.QSemN.$wloop
                                                                  sat_sdSww
                                                                  bs_sdSwj
                                                                  w1_sdSw8
                                                                  GHC.Prim.void#;
                                                        };
                                                    0# ->
                                                        Control.Concurrent.QSemN.$wloop
                                                            wild_sdSwa
                                                            bs_sdSwj
                                                            w1_sdSw8
                                                            GHC.Prim.void#;
                                                  };
                                            };
                                      };
                                  1# ->
                                      case b_sdSwm of {
                                        GHC.MVar.MVar mv#_sdSwy [Occ=Once] ->
                                            case isEmptyMVar# [mv#_sdSwy GHC.Prim.void#] of {
                                              Unit# ipv1_sdSwB [Occ=Once!] ->
                                                  case ipv1_sdSwB of {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_sdSwD [Occ=Once] :: GHC.Types.Int
                                                          [LclId] =
                                                              CCCS GHC.Types.I#! [wild_sdSwa]; } in
                                                        let {
                                                          sat_sdSwE [Occ=Once]
                                                            :: (GHC.Types.Int,
                                                                [(GHC.Types.Int, GHC.MVar.MVar ())],
                                                                [(GHC.Types.Int, GHC.MVar.MVar ())])
                                                          [LclId] =
                                                              CCCS (,,)! [sat_sdSwD
                                                                          wild1_sdSwb
                                                                          w1_sdSw8];
                                                        } in  Unit# [sat_sdSwE];
                                                    0# ->
                                                        Control.Concurrent.QSemN.$wloop
                                                            wild_sdSwa
                                                            bs_sdSwj
                                                            w1_sdSw8
                                                            GHC.Prim.void#;
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
          0# ->
              let {
                sat_sdSwF [Occ=Once]
                  :: (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
                      [(GHC.Types.Int, GHC.MVar.MVar ())])
                [LclId] =
                    CCCS (,,)! [lvl1_rdSvN w_sdSw7 w1_sdSw8];
              } in  Unit# [sat_sdSwF];
        };

Control.Concurrent.QSemN.$wsignalQSemN [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdSwG ww1_sdSwH void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sdSwL [Occ=Once!] ->
              case ipv1_sdSwL of {
                __DEFAULT ->
                    let {
                      sat_sdSx2 [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [ww_sdSwG ww1_sdSwH] \r [void_0E]
                              case takeMVar# [ww_sdSwG GHC.Prim.void#] of {
                                Unit# ipv3_sdSwQ [Occ=Once!] ->
                                    case ipv3_sdSwQ of {
                                      (,,) i_sdSwS [Occ=Once!]
                                           a1_sdSwT [Occ=Once]
                                           a2_sdSwU [Occ=Once] ->
                                          case i_sdSwS of {
                                            GHC.Types.I# y_sdSwW [Occ=Once] ->
                                                case +# [ww1_sdSwH y_sdSwW] of sat_sdSwX {
                                                  __DEFAULT ->
                                                      case
                                                          Control.Concurrent.QSemN.$wloop
                                                              sat_sdSwX
                                                              a1_sdSwT
                                                              a2_sdSwU
                                                              GHC.Prim.void#
                                                      of
                                                      { Unit# ipv5_sdSx0 [Occ=Once] ->
                                                            case
                                                                putMVar# [ww_sdSwG
                                                                          ipv5_sdSx0
                                                                          GHC.Prim.void#]
                                                            of
                                                            s2#_sdSx1
                                                            { (##) -> Unit# [GHC.Tuple.()];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in  maskUninterruptible# [sat_sdSx2 GHC.Prim.void#];
                1# ->
                    case takeMVar# [ww_sdSwG GHC.Prim.void#] of {
                      Unit# ipv3_sdSx5 [Occ=Once!] ->
                          case ipv3_sdSx5 of {
                            (,,) i_sdSx7 [Occ=Once!] a1_sdSx8 [Occ=Once] a2_sdSx9 [Occ=Once] ->
                                case i_sdSx7 of {
                                  GHC.Types.I# y_sdSxb [Occ=Once] ->
                                      case +# [ww1_sdSwH y_sdSxb] of sat_sdSxc {
                                        __DEFAULT ->
                                            case
                                                Control.Concurrent.QSemN.$wloop
                                                    sat_sdSxc a1_sdSx8 a2_sdSx9 GHC.Prim.void#
                                            of
                                            { Unit# ipv5_sdSxf [Occ=Once] ->
                                                  case
                                                      putMVar# [ww_sdSwG ipv5_sdSxf GHC.Prim.void#]
                                                  of
                                                  s2#_sdSxg
                                                  { (##) -> Unit# [GHC.Tuple.()];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Control.Concurrent.QSemN.signalQSemN1 [InlPrag=NOUSERINLINE[0]]
  :: Control.Concurrent.QSemN.QSemN
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sdSxh w1_sdSxi void_0E]
        case w_sdSxh of {
          Control.Concurrent.QSemN.QSemN ww1_sdSxl [Occ=Once] ->
              case w1_sdSxi of {
                GHC.Types.I# ww3_sdSxn [Occ=Once] ->
                    Control.Concurrent.QSemN.$wsignalQSemN
                        ww1_sdSxl ww3_sdSxn GHC.Prim.void#;
              };
        };

Control.Concurrent.QSemN.signalQSemN
  :: Control.Concurrent.QSemN.QSemN
     -> GHC.Types.Int -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        Control.Concurrent.QSemN.signalQSemN1 eta_B3 eta_B2 GHC.Prim.void#;

lvl2_rdSvO
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> GHC.Types.Int
     -> GHC.Prim.MVar# GHC.Prim.RealWorld ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Exception.SomeException
     -> GHC.Prim.Int#
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<S,U><S(S),1*U(U)><S,U><S,U><L,U><S,1*U>,
 Unf=OtherCon []] =
    sat-only [] \r [w_sdSxo
                    w1_sdSxp
                    ww_sdSxq
                    void_0E
                    w2_sdSxs
                    ipv1_sdSxt]
        case ipv1_sdSxt of {
          __DEFAULT ->
              let {
                sat_sdSxT [Occ=Once]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId] =
                    [w_sdSxo w1_sdSxp ww_sdSxq] \r [void_0E]
                        case takeMVar# [w_sdSxo GHC.Prim.void#] of {
                          Unit# ipv3_sdSxy [Occ=Once!] ->
                              case ipv3_sdSxy of wild_sdSxz {
                                (,,) i_sdSxA [Occ=Once!] b1_sdSxB [Occ=Once] b2_sdSxC [Occ=Once] ->
                                    case tryTakeMVar# [ww_sdSxq GHC.Prim.void#] of {
                                      (#,#) ipv5_sdSxF [Occ=Once!] _ [Occ=Dead] ->
                                          case ipv5_sdSxF of {
                                            __DEFAULT ->
                                                case w1_sdSxp of {
                                                  GHC.Types.I# x_sdSxJ [Occ=Once] ->
                                                      case i_sdSxA of {
                                                        GHC.Types.I# y_sdSxL [Occ=Once] ->
                                                            case +# [x_sdSxJ y_sdSxL] of sat_sdSxM {
                                                              __DEFAULT ->
                                                                  case
                                                                      Control.Concurrent.QSemN.$wloop
                                                                          sat_sdSxM
                                                                          b1_sdSxB
                                                                          b2_sdSxC
                                                                          GHC.Prim.void#
                                                                  of
                                                                  { Unit# ipv8_sdSxP [Occ=Once] ->
                                                                        case
                                                                            putMVar# [w_sdSxo
                                                                                      ipv8_sdSxP
                                                                                      GHC.Prim.void#]
                                                                        of
                                                                        s2#_sdSxQ
                                                                        { (##) ->
                                                                              Unit# [GHC.Tuple.()];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                            0# ->
                                                case
                                                    putMVar# [ww_sdSxq GHC.Tuple.() GHC.Prim.void#]
                                                of
                                                s2#_sdSxR
                                                { (##) ->
                                                      case
                                                          putMVar# [w_sdSxo
                                                                    wild_sdSxz
                                                                    GHC.Prim.void#]
                                                      of
                                                      s2#1_sdSxS
                                                      { (##) -> Unit# [GHC.Tuple.()];
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case maskUninterruptible# [sat_sdSxT GHC.Prim.void#] of {
                  Unit# _ [Occ=Dead] -> raiseIO# [w2_sdSxs GHC.Prim.void#];
                };
          1# ->
              case takeMVar# [w_sdSxo GHC.Prim.void#] of {
                Unit# ipv3_sdSxZ [Occ=Once!] ->
                    case ipv3_sdSxZ of wild_sdSy0 {
                      (,,) i_sdSy1 [Occ=Once!] b1_sdSy2 [Occ=Once] b2_sdSy3 [Occ=Once] ->
                          case tryTakeMVar# [ww_sdSxq GHC.Prim.void#] of {
                            (#,#) ipv5_sdSy6 [Occ=Once!] _ [Occ=Dead] ->
                                case ipv5_sdSy6 of {
                                  __DEFAULT ->
                                      case w1_sdSxp of {
                                        GHC.Types.I# x_sdSya [Occ=Once] ->
                                            case i_sdSy1 of {
                                              GHC.Types.I# y_sdSyc [Occ=Once] ->
                                                  case +# [x_sdSya y_sdSyc] of sat_sdSyd {
                                                    __DEFAULT ->
                                                        case
                                                            Control.Concurrent.QSemN.$wloop
                                                                sat_sdSyd
                                                                b1_sdSy2
                                                                b2_sdSy3
                                                                GHC.Prim.void#
                                                        of
                                                        { Unit# ipv8_sdSyg [Occ=Once] ->
                                                              case
                                                                  putMVar# [w_sdSxo
                                                                            ipv8_sdSyg
                                                                            GHC.Prim.void#]
                                                              of
                                                              s2#_sdSyh
                                                              { (##) ->
                                                                    raiseIO# [w2_sdSxs
                                                                              GHC.Prim.void#];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# ->
                                      case
                                          putMVar# [ww_sdSxq GHC.Tuple.() GHC.Prim.void#]
                                      of
                                      s2#_sdSyi
                                      { (##) ->
                                            case
                                                putMVar# [w_sdSxo wild_sdSy0 GHC.Prim.void#]
                                            of
                                            s2#1_sdSyj
                                            { (##) -> raiseIO# [w2_sdSxs GHC.Prim.void#];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Control.Concurrent.QSemN.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar# GHC.Prim.RealWorld ()
     -> GHC.Types.Int
     -> GHC.Prim.MVar#
          GHC.Prim.RealWorld
          (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
           [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Exception.SomeException
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S,U><S(S),1*U(U)><S,U><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdSyk w_sdSyl w1_sdSym void_0E w3_sdSyo]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sdSyr [Occ=Once] ->
              lvl2_rdSvO
                  w1_sdSym w_sdSyl ww_sdSyk GHC.Prim.void# w3_sdSyo ipv1_sdSyr;
        };

Control.Concurrent.QSemN.$wwaitQSemN [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdSys ww1_sdSyt void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sdSyx [Occ=Once!] ->
              let {
                io_sdSyy [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                    [ww_sdSys ww1_sdSyt] \r [void_0E]
                        case takeMVar# [ww_sdSys GHC.Prim.void#] of {
                          Unit# ipv3_sdSyC [Occ=Once!] ->
                              case ipv3_sdSyC of {
                                (,,) i_sdSyE [Occ=Once!]
                                     b1_sdSyF [Occ=Once*]
                                     b2_sdSyG [Occ=Once*] ->
                                    case i_sdSyE of wild1_sdSyH {
                                      GHC.Types.I# x_sdSyI [Occ=Once] ->
                                          case -# [x_sdSyI ww1_sdSyt] of x1_sdSyJ [Dmd=<S,U>] {
                                            __DEFAULT ->
                                                case <# [x1_sdSyJ 0#] of {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sdSyL [Occ=Once] :: GHC.Types.Int
                                                        [LclId] =
                                                            CCCS GHC.Types.I#! [x1_sdSyJ]; } in
                                                      let {
                                                        sat_sdSyM [Occ=Once]
                                                          :: (GHC.Types.Int,
                                                              [(GHC.Types.Int, GHC.MVar.MVar ())],
                                                              [(GHC.Types.Int, GHC.MVar.MVar ())])
                                                        [LclId] =
                                                            CCCS (,,)! [sat_sdSyL
                                                                        b1_sdSyF
                                                                        b2_sdSyG];
                                                      } in 
                                                        case
                                                            putMVar# [ww_sdSys
                                                                      sat_sdSyM
                                                                      GHC.Prim.void#]
                                                        of
                                                        s2#_sdSyN
                                                        { (##) -> Unit# [GHC.Tuple.()];
                                                        };
                                                  1# ->
                                                      case newMVar# [GHC.Prim.void#] of {
                                                        Unit# ipv5_sdSyQ ->
                                                            let {
                                                              wild2_sdSyR [Dmd=<L,U(U)>]
                                                                :: GHC.Types.Int
                                                              [LclId, Unf=OtherCon []] =
                                                                  CCCS GHC.Types.I#! [ww1_sdSyt]; } in
                                                            let {
                                                              sat_sdSyS [Occ=Once]
                                                                :: GHC.MVar.MVar ()
                                                              [LclId] =
                                                                  CCCS GHC.MVar.MVar! [ipv5_sdSyQ]; } in
                                                            let {
                                                              sat_sdSyT [Occ=Once]
                                                                :: (GHC.Types.Int, GHC.MVar.MVar ())
                                                              [LclId] =
                                                                  CCCS (,)! [wild2_sdSyR
                                                                             sat_sdSyS]; } in
                                                            let {
                                                              sat_sdSyU [Occ=Once]
                                                                :: [(GHC.Types.Int,
                                                                     GHC.MVar.MVar ())]
                                                              [LclId] =
                                                                  CCCS :! [sat_sdSyT b2_sdSyG]; } in
                                                            let {
                                                              sat_sdSyV [Occ=Once]
                                                                :: (GHC.Types.Int,
                                                                    [(GHC.Types.Int,
                                                                      GHC.MVar.MVar ())],
                                                                    [(GHC.Types.Int,
                                                                      GHC.MVar.MVar ())])
                                                              [LclId] =
                                                                  CCCS (,,)! [wild1_sdSyH
                                                                              b1_sdSyF
                                                                              sat_sdSyU];
                                                            } in 
                                                              case
                                                                  putMVar# [ww_sdSys
                                                                            sat_sdSyV
                                                                            GHC.Prim.void#]
                                                              of
                                                              s2#_sdSyW
                                                              { (##) ->
                                                                    let {
                                                                      sat_sdSz1 [Occ=Once]
                                                                        :: GHC.Exception.SomeException
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 () #)
                                                                      [LclId] =
                                                                          [ww_sdSys
                                                                           ipv5_sdSyQ
                                                                           wild2_sdSyR] \r [e1_sdSyZ
                                                                                            void_0E]
                                                                              Control.Concurrent.QSemN.$wlvl
                                                                                  ipv5_sdSyQ
                                                                                  wild2_sdSyR
                                                                                  ww_sdSys
                                                                                  GHC.Prim.void#
                                                                                  e1_sdSyZ; } in
                                                                    let {
                                                                      sat_sdSyY [Occ=Once]
                                                                        :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 () #)
                                                                      [LclId] =
                                                                          [ipv5_sdSyQ] \r [void_0E]
                                                                              takeMVar# [ipv5_sdSyQ
                                                                                         GHC.Prim.void#];
                                                                    } in 
                                                                      catch# [sat_sdSyY
                                                                              sat_sdSz1
                                                                              GHC.Prim.void#];
                                                              };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case ipv1_sdSyx of {
                  __DEFAULT -> io_sdSyy GHC.Prim.void#;
                  0# -> maskAsyncExceptions# [io_sdSyy GHC.Prim.void#];
                };
        };

Control.Concurrent.QSemN.waitQSemN1 [InlPrag=NOUSERINLINE[0]]
  :: Control.Concurrent.QSemN.QSemN
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sdSz3 w1_sdSz4 void_0E]
        case w_sdSz3 of {
          Control.Concurrent.QSemN.QSemN ww1_sdSz7 [Occ=Once] ->
              case w1_sdSz4 of {
                GHC.Types.I# ww3_sdSz9 [Occ=Once] ->
                    Control.Concurrent.QSemN.$wwaitQSemN
                        ww1_sdSz7 ww3_sdSz9 GHC.Prim.void#;
              };
        };

Control.Concurrent.QSemN.waitQSemN
  :: Control.Concurrent.QSemN.QSemN
     -> GHC.Types.Int -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        Control.Concurrent.QSemN.waitQSemN1 eta_B3 eta_B2 GHC.Prim.void#;

Control.Concurrent.QSemN.QSemN
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> Control.Concurrent.QSemN.QSemN
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] Control.Concurrent.QSemN.QSemN [eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:09:08.734895515 UTC

Control.Concurrent.QSemN.$WQSemN [InlPrag=INLINE[2]]
  :: GHC.MVar.MVar
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> Control.Concurrent.QSemN.QSemN
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m,
 Unf=OtherCon []] =
    [] \r [dt_sdT6m]
        case dt_sdT6m of {
          GHC.MVar.MVar dt_sdT6o [Occ=Once] ->
              Control.Concurrent.QSemN.QSemN [dt_sdT6o];
        };

Control.Concurrent.QSemN.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Concurrent.QSemN.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSemN.$trModule4];

Control.Concurrent.QSemN.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Concurrent.QSemN"#;

Control.Concurrent.QSemN.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSemN.$trModule2];

Control.Concurrent.QSemN.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Concurrent.QSemN.$trModule3
                                     Control.Concurrent.QSemN.$trModule1];

$krep_rdSvw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep1_rdSvx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rdSvy :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rdSvw GHC.Types.[]];

$krep3_rdSvz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep2_rdSvy];

$krep4_rdSvA :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_rdSvz GHC.Types.[]];

$krep5_rdSvB :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rdSvx $krep4_rdSvA];

$krep6_rdSvC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep5_rdSvB];

$krep7_rdSvD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep6_rdSvC GHC.Types.[]];

$krep8_rdSvE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep7_rdSvD];

$krep9_rdSvF :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep8_rdSvE GHC.Types.[]];

$krep10_rdSvG :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep8_rdSvE $krep9_rdSvF];

$krep11_rdSvH :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rdSvx $krep10_rdSvG];

$krep12_rdSvI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,,)
                                              $krep11_rdSvH];

$krep13_rdSvJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep12_rdSvI GHC.Types.[]];

$krep14_rdSvK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep13_rdSvJ];

Control.Concurrent.QSemN.$tcQSemN2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "QSemN"#;

Control.Concurrent.QSemN.$tcQSemN1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSemN.$tcQSemN2];

Control.Concurrent.QSemN.$tcQSemN :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8650881979471817661##
                                    11033619023634057930##
                                    Control.Concurrent.QSemN.$trModule
                                    Control.Concurrent.QSemN.$tcQSemN1
                                    0#
                                    GHC.Types.krep$*];

$krep15_rdSvL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Control.Concurrent.QSemN.$tcQSemN
                                              GHC.Types.[]];

Control.Concurrent.QSemN.$tc'QSemN1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep14_rdSvK $krep15_rdSvL];

Control.Concurrent.QSemN.$tc'QSemN3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'QSemN"#;

Control.Concurrent.QSemN.$tc'QSemN2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSemN.$tc'QSemN3];

Control.Concurrent.QSemN.$tc'QSemN :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15878277071781304355##
                                    273080421945023395##
                                    Control.Concurrent.QSemN.$trModule
                                    Control.Concurrent.QSemN.$tc'QSemN2
                                    0#
                                    Control.Concurrent.QSemN.$tc'QSemN1];

lvl_rdSvM :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "newQSemN: Initial quantity must be non-negative"#;

Control.Concurrent.QSemN.newQSemN2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Control.Concurrent.QSemN.QSemN #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sdT6p]
        case GHC.CString.unpackCString# lvl_rdSvM of sat_sdT6q {
          __DEFAULT -> GHC.IO.failIO1 sat_sdT6q eta_sdT6p;
        };

Control.Concurrent.QSemN.newQSemN1
  :: GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Control.Concurrent.QSemN.QSemN #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [initial_sdT6r eta_sdT6s]
        case initial_sdT6r of wild_sdT6t {
          GHC.Types.I# x_sdT6u [Occ=Once] ->
              case <# [x_sdT6u 0#] of {
                __DEFAULT ->
                    case newMVar# [eta_sdT6s] of {
                      (#,#) ipv_sdT6x [Occ=Once] ipv1_sdT6y ->
                          let {
                            sat_sdT6z [Occ=Once]
                              :: (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
                                  [(GHC.Types.Int, GHC.MVar.MVar ())])
                            [LclId] =
                                CCCS (,,)! [wild_sdT6t GHC.Types.[] GHC.Types.[]];
                          } in 
                            case putMVar# [ipv1_sdT6y sat_sdT6z ipv_sdT6x] of s2#_sdT6A {
                              __DEFAULT ->
                                  let {
                                    sat_sdT6B [Occ=Once] :: Control.Concurrent.QSemN.QSemN
                                    [LclId] =
                                        CCCS Control.Concurrent.QSemN.QSemN! [ipv1_sdT6y];
                                  } in  (#,#) [s2#_sdT6A sat_sdT6B];
                            };
                    };
                1# -> Control.Concurrent.QSemN.newQSemN2 eta_sdT6s;
              };
        };

Control.Concurrent.QSemN.newQSemN
  :: GHC.Types.Int -> GHC.Types.IO Control.Concurrent.QSemN.QSemN
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Concurrent.QSemN.newQSemN1 eta_B2 eta_B1;

lvl1_rdSvN :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Control.Concurrent.QSemN.$wloop [InlPrag=NOUSERINLINE[0],
                                 Occ=LoopBreaker]
  :: GHC.Prim.Int#
     -> [(GHC.Types.Int, GHC.MVar.MVar ())]
     -> [(GHC.Types.Int, GHC.MVar.MVar ())]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
            [(GHC.Types.Int, GHC.MVar.MVar ())]) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdT6C w_sdT6D w1_sdT6E w2_sdT6F]
        case ww_sdT6C of wild_sdT6G {
          __DEFAULT ->
              case w_sdT6D of wild1_sdT6H {
                [] ->
                    case w1_sdT6E of wild2_sdT6I {
                      [] ->
                          let {
                            sat_sdT6J [Occ=Once] :: GHC.Types.Int
                            [LclId] =
                                CCCS GHC.Types.I#! [wild_sdT6G]; } in
                          let {
                            sat_sdT6K [Occ=Once]
                              :: (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
                                  [(GHC.Types.Int, GHC.MVar.MVar ())])
                            [LclId] =
                                CCCS (,,)! [sat_sdT6J GHC.Types.[] GHC.Types.[]];
                          } in  (#,#) [w2_sdT6F sat_sdT6K];
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          let {
                            sat_sdT6N [Occ=Once] :: [(GHC.Types.Int, GHC.MVar.MVar ())]
                            [LclId] =
                                [wild2_sdT6I] \u [] GHC.List.reverse1 wild2_sdT6I GHC.Types.[];
                          } in 
                            Control.Concurrent.QSemN.$wloop
                                wild_sdT6G sat_sdT6N GHC.Types.[] w2_sdT6F;
                    };
                : ds_sdT6O [Occ=Once!] bs_sdT6P [Occ=Once*] ->
                    case ds_sdT6O of {
                      (,) j_sdT6R [Occ=Once!] b_sdT6S [Occ=Once*!] ->
                          case j_sdT6R of {
                            GHC.Types.I# x_sdT6U ->
                                case ># [x_sdT6U wild_sdT6G] of {
                                  __DEFAULT ->
                                      case b_sdT6S of {
                                        GHC.MVar.MVar mvar#_sdT6X [Occ=Once] ->
                                            case
                                                tryPutMVar# [mvar#_sdT6X GHC.Tuple.() w2_sdT6F]
                                            of
                                            { (#,#) ipv_sdT6Z [Occ=Once*] ipv1_sdT70 [Occ=Once!] ->
                                                  case ipv1_sdT70 of {
                                                    __DEFAULT ->
                                                        case -# [wild_sdT6G x_sdT6U] of sat_sdT72 {
                                                          __DEFAULT ->
                                                              Control.Concurrent.QSemN.$wloop
                                                                  sat_sdT72
                                                                  bs_sdT6P
                                                                  w1_sdT6E
                                                                  ipv_sdT6Z;
                                                        };
                                                    0# ->
                                                        Control.Concurrent.QSemN.$wloop
                                                            wild_sdT6G bs_sdT6P w1_sdT6E ipv_sdT6Z;
                                                  };
                                            };
                                      };
                                  1# ->
                                      case b_sdT6S of {
                                        GHC.MVar.MVar mv#_sdT74 [Occ=Once] ->
                                            case isEmptyMVar# [mv#_sdT74 w2_sdT6F] of {
                                              (#,#) ipv_sdT76 [Occ=Once*] ipv1_sdT77 [Occ=Once!] ->
                                                  case ipv1_sdT77 of {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_sdT79 [Occ=Once] :: GHC.Types.Int
                                                          [LclId] =
                                                              CCCS GHC.Types.I#! [wild_sdT6G]; } in
                                                        let {
                                                          sat_sdT7a [Occ=Once]
                                                            :: (GHC.Types.Int,
                                                                [(GHC.Types.Int, GHC.MVar.MVar ())],
                                                                [(GHC.Types.Int, GHC.MVar.MVar ())])
                                                          [LclId] =
                                                              CCCS (,,)! [sat_sdT79
                                                                          wild1_sdT6H
                                                                          w1_sdT6E];
                                                        } in  (#,#) [ipv_sdT76 sat_sdT7a];
                                                    0# ->
                                                        Control.Concurrent.QSemN.$wloop
                                                            wild_sdT6G bs_sdT6P w1_sdT6E ipv_sdT76;
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
          0# ->
              let {
                sat_sdT7b [Occ=Once]
                  :: (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
                      [(GHC.Types.Int, GHC.MVar.MVar ())])
                [LclId] =
                    CCCS (,,)! [lvl1_rdSvN w_sdT6D w1_sdT6E];
              } in  (#,#) [w2_sdT6F sat_sdT7b];
        };

Control.Concurrent.QSemN.$wsignalQSemN [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdT7c ww1_sdT7d w_sdT7e]
        case getMaskingState# [w_sdT7e] of {
          (#,#) ipv_sdT7g [Occ=Once*] ipv1_sdT7h [Occ=Once!] ->
              case ipv1_sdT7h of {
                __DEFAULT ->
                    let {
                      sat_sdT7y [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [ww_sdT7c ww1_sdT7d] \r [s_sdT7j]
                              case takeMVar# [ww_sdT7c s_sdT7j] of {
                                (#,#) ipv2_sdT7l [Occ=Once] ipv3_sdT7m [Occ=Once!] ->
                                    case ipv3_sdT7m of {
                                      (,,) i_sdT7o [Occ=Once!]
                                           a1_sdT7p [Occ=Once]
                                           a2_sdT7q [Occ=Once] ->
                                          case i_sdT7o of {
                                            GHC.Types.I# y_sdT7s [Occ=Once] ->
                                                case +# [ww1_sdT7d y_sdT7s] of sat_sdT7t {
                                                  __DEFAULT ->
                                                      case
                                                          Control.Concurrent.QSemN.$wloop
                                                              sat_sdT7t a1_sdT7p a2_sdT7q ipv2_sdT7l
                                                      of
                                                      { (#,#) ipv4_sdT7v [Occ=Once]
                                                              ipv5_sdT7w [Occ=Once] ->
                                                            case
                                                                putMVar# [ww_sdT7c
                                                                          ipv5_sdT7w
                                                                          ipv4_sdT7v]
                                                            of
                                                            s2#_sdT7x
                                                            { __DEFAULT ->
                                                                  (#,#) [s2#_sdT7x GHC.Tuple.()];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in  maskUninterruptible# [sat_sdT7y ipv_sdT7g];
                1# ->
                    case takeMVar# [ww_sdT7c ipv_sdT7g] of {
                      (#,#) ipv2_sdT7A [Occ=Once] ipv3_sdT7B [Occ=Once!] ->
                          case ipv3_sdT7B of {
                            (,,) i_sdT7D [Occ=Once!] a1_sdT7E [Occ=Once] a2_sdT7F [Occ=Once] ->
                                case i_sdT7D of {
                                  GHC.Types.I# y_sdT7H [Occ=Once] ->
                                      case +# [ww1_sdT7d y_sdT7H] of sat_sdT7I {
                                        __DEFAULT ->
                                            case
                                                Control.Concurrent.QSemN.$wloop
                                                    sat_sdT7I a1_sdT7E a2_sdT7F ipv2_sdT7A
                                            of
                                            { (#,#) ipv4_sdT7K [Occ=Once] ipv5_sdT7L [Occ=Once] ->
                                                  case
                                                      putMVar# [ww_sdT7c ipv5_sdT7L ipv4_sdT7K]
                                                  of
                                                  s2#_sdT7M
                                                  { __DEFAULT -> (#,#) [s2#_sdT7M GHC.Tuple.()];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Control.Concurrent.QSemN.signalQSemN1 [InlPrag=NOUSERINLINE[0]]
  :: Control.Concurrent.QSemN.QSemN
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sdT7N w1_sdT7O w2_sdT7P]
        case w_sdT7N of {
          Control.Concurrent.QSemN.QSemN ww1_sdT7R [Occ=Once] ->
              case w1_sdT7O of {
                GHC.Types.I# ww3_sdT7T [Occ=Once] ->
                    Control.Concurrent.QSemN.$wsignalQSemN
                        ww1_sdT7R ww3_sdT7T w2_sdT7P;
              };
        };

Control.Concurrent.QSemN.signalQSemN
  :: Control.Concurrent.QSemN.QSemN
     -> GHC.Types.Int -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Control.Concurrent.QSemN.signalQSemN1 eta_B3 eta_B2 eta_B1;

lvl2_rdSvO
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> GHC.Types.Int
     -> GHC.Prim.MVar# GHC.Prim.RealWorld ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Exception.SomeException
     -> GHC.Prim.Int#
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<S,U><S(S),1*U(U)><S,U><S,U><L,U><S,1*U>,
 Unf=OtherCon []] =
    sat-only [] \r [w_sdT7U
                    w1_sdT7V
                    ww_sdT7W
                    ipv_sdT7X
                    w2_sdT7Y
                    ipv1_sdT7Z]
        case ipv1_sdT7Z of {
          __DEFAULT ->
              let {
                sat_sdT8p [Occ=Once]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId] =
                    [w_sdT7U w1_sdT7V ww_sdT7W] \r [s_sdT81]
                        case takeMVar# [w_sdT7U s_sdT81] of {
                          (#,#) ipv2_sdT83 [Occ=Once] ipv3_sdT84 [Occ=Once!] ->
                              case ipv3_sdT84 of wild_sdT85 {
                                (,,) i_sdT86 [Occ=Once!] b1_sdT87 [Occ=Once] b2_sdT88 [Occ=Once] ->
                                    case tryTakeMVar# [ww_sdT7W ipv2_sdT83] of {
                                      (#,,#) ipv4_sdT8a [Occ=Once*]
                                             ipv5_sdT8b [Occ=Once!]
                                             _ [Occ=Dead] ->
                                          case ipv5_sdT8b of {
                                            __DEFAULT ->
                                                case w1_sdT7V of {
                                                  GHC.Types.I# x_sdT8f [Occ=Once] ->
                                                      case i_sdT86 of {
                                                        GHC.Types.I# y_sdT8h [Occ=Once] ->
                                                            case +# [x_sdT8f y_sdT8h] of sat_sdT8i {
                                                              __DEFAULT ->
                                                                  case
                                                                      Control.Concurrent.QSemN.$wloop
                                                                          sat_sdT8i
                                                                          b1_sdT87
                                                                          b2_sdT88
                                                                          ipv4_sdT8a
                                                                  of
                                                                  { (#,#) ipv7_sdT8k [Occ=Once]
                                                                          ipv8_sdT8l [Occ=Once] ->
                                                                        case
                                                                            putMVar# [w_sdT7U
                                                                                      ipv8_sdT8l
                                                                                      ipv7_sdT8k]
                                                                        of
                                                                        s2#_sdT8m
                                                                        { __DEFAULT ->
                                                                              (#,#) [s2#_sdT8m
                                                                                     GHC.Tuple.()];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                            0# ->
                                                case
                                                    putMVar# [ww_sdT7W GHC.Tuple.() ipv4_sdT8a]
                                                of
                                                s2#_sdT8n
                                                { __DEFAULT ->
                                                      case
                                                          putMVar# [w_sdT7U wild_sdT85 s2#_sdT8n]
                                                      of
                                                      s2#1_sdT8o
                                                      { __DEFAULT ->
                                                            (#,#) [s2#1_sdT8o GHC.Tuple.()];
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case maskUninterruptible# [sat_sdT8p ipv_sdT7X] of {
                  (#,#) ipv2_sdT8r [Occ=Once] _ [Occ=Dead] ->
                      raiseIO# [w2_sdT7Y ipv2_sdT8r];
                };
          1# ->
              case takeMVar# [w_sdT7U ipv_sdT7X] of {
                (#,#) ipv2_sdT8u [Occ=Once] ipv3_sdT8v [Occ=Once!] ->
                    case ipv3_sdT8v of wild_sdT8w {
                      (,,) i_sdT8x [Occ=Once!] b1_sdT8y [Occ=Once] b2_sdT8z [Occ=Once] ->
                          case tryTakeMVar# [ww_sdT7W ipv2_sdT8u] of {
                            (#,,#) ipv4_sdT8B [Occ=Once*]
                                   ipv5_sdT8C [Occ=Once!]
                                   _ [Occ=Dead] ->
                                case ipv5_sdT8C of {
                                  __DEFAULT ->
                                      case w1_sdT7V of {
                                        GHC.Types.I# x_sdT8G [Occ=Once] ->
                                            case i_sdT8x of {
                                              GHC.Types.I# y_sdT8I [Occ=Once] ->
                                                  case +# [x_sdT8G y_sdT8I] of sat_sdT8J {
                                                    __DEFAULT ->
                                                        case
                                                            Control.Concurrent.QSemN.$wloop
                                                                sat_sdT8J
                                                                b1_sdT8y
                                                                b2_sdT8z
                                                                ipv4_sdT8B
                                                        of
                                                        { (#,#) ipv7_sdT8L [Occ=Once]
                                                                ipv8_sdT8M [Occ=Once] ->
                                                              case
                                                                  putMVar# [w_sdT7U
                                                                            ipv8_sdT8M
                                                                            ipv7_sdT8L]
                                                              of
                                                              s2#_sdT8N
                                                              { __DEFAULT ->
                                                                    raiseIO# [w2_sdT7Y s2#_sdT8N];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# ->
                                      case
                                          putMVar# [ww_sdT7W GHC.Tuple.() ipv4_sdT8B]
                                      of
                                      s2#_sdT8O
                                      { __DEFAULT ->
                                            case
                                                putMVar# [w_sdT7U wild_sdT8w s2#_sdT8O]
                                            of
                                            s2#1_sdT8P
                                            { __DEFAULT -> raiseIO# [w2_sdT7Y s2#1_sdT8P];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Control.Concurrent.QSemN.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar# GHC.Prim.RealWorld ()
     -> GHC.Types.Int
     -> GHC.Prim.MVar#
          GHC.Prim.RealWorld
          (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
           [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Exception.SomeException
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S,U><S(S),1*U(U)><S,U><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdT8Q w_sdT8R w1_sdT8S w2_sdT8T w3_sdT8U]
        case getMaskingState# [w2_sdT8T] of {
          (#,#) ipv_sdT8W [Occ=Once] ipv1_sdT8X [Occ=Once] ->
              lvl2_rdSvO w1_sdT8S w_sdT8R ww_sdT8Q ipv_sdT8W w3_sdT8U ipv1_sdT8X;
        };

Control.Concurrent.QSemN.$wwaitQSemN [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdT8Y ww1_sdT8Z w_sdT90]
        case getMaskingState# [w_sdT90] of {
          (#,#) ipv_sdT92 [Occ=Once*] ipv1_sdT93 [Occ=Once!] ->
              let {
                io_sdT94 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                    [ww_sdT8Y ww1_sdT8Z] \r [s_sdT95]
                        case takeMVar# [ww_sdT8Y s_sdT95] of {
                          (#,#) ipv2_sdT97 [Occ=Once*] ipv3_sdT98 [Occ=Once!] ->
                              case ipv3_sdT98 of {
                                (,,) i_sdT9a [Occ=Once!]
                                     b1_sdT9b [Occ=Once*]
                                     b2_sdT9c [Occ=Once*] ->
                                    case i_sdT9a of wild1_sdT9d {
                                      GHC.Types.I# x_sdT9e [Occ=Once] ->
                                          case -# [x_sdT9e ww1_sdT8Z] of x1_sdT9f [Dmd=<S,U>] {
                                            __DEFAULT ->
                                                case <# [x1_sdT9f 0#] of {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sdT9h [Occ=Once] :: GHC.Types.Int
                                                        [LclId] =
                                                            CCCS GHC.Types.I#! [x1_sdT9f]; } in
                                                      let {
                                                        sat_sdT9i [Occ=Once]
                                                          :: (GHC.Types.Int,
                                                              [(GHC.Types.Int, GHC.MVar.MVar ())],
                                                              [(GHC.Types.Int, GHC.MVar.MVar ())])
                                                        [LclId] =
                                                            CCCS (,,)! [sat_sdT9h
                                                                        b1_sdT9b
                                                                        b2_sdT9c];
                                                      } in 
                                                        case
                                                            putMVar# [ww_sdT8Y sat_sdT9i ipv2_sdT97]
                                                        of
                                                        s2#_sdT9j
                                                        { __DEFAULT ->
                                                              (#,#) [s2#_sdT9j GHC.Tuple.()];
                                                        };
                                                  1# ->
                                                      case newMVar# [ipv2_sdT97] of {
                                                        (#,#) ipv4_sdT9l [Occ=Once] ipv5_sdT9m ->
                                                            let {
                                                              wild2_sdT9n [Dmd=<L,U(U)>]
                                                                :: GHC.Types.Int
                                                              [LclId, Unf=OtherCon []] =
                                                                  CCCS GHC.Types.I#! [ww1_sdT8Z]; } in
                                                            let {
                                                              sat_sdT9o [Occ=Once]
                                                                :: GHC.MVar.MVar ()
                                                              [LclId] =
                                                                  CCCS GHC.MVar.MVar! [ipv5_sdT9m]; } in
                                                            let {
                                                              sat_sdT9p [Occ=Once]
                                                                :: (GHC.Types.Int, GHC.MVar.MVar ())
                                                              [LclId] =
                                                                  CCCS (,)! [wild2_sdT9n
                                                                             sat_sdT9o]; } in
                                                            let {
                                                              sat_sdT9q [Occ=Once]
                                                                :: [(GHC.Types.Int,
                                                                     GHC.MVar.MVar ())]
                                                              [LclId] =
                                                                  CCCS :! [sat_sdT9p b2_sdT9c]; } in
                                                            let {
                                                              sat_sdT9r [Occ=Once]
                                                                :: (GHC.Types.Int,
                                                                    [(GHC.Types.Int,
                                                                      GHC.MVar.MVar ())],
                                                                    [(GHC.Types.Int,
                                                                      GHC.MVar.MVar ())])
                                                              [LclId] =
                                                                  CCCS (,,)! [wild1_sdT9d
                                                                              b1_sdT9b
                                                                              sat_sdT9q];
                                                            } in 
                                                              case
                                                                  putMVar# [ww_sdT8Y
                                                                            sat_sdT9r
                                                                            ipv4_sdT9l]
                                                              of
                                                              s2#_sdT9s
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_sdT9x [Occ=Once]
                                                                        :: GHC.Exception.SomeException
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 () #)
                                                                      [LclId] =
                                                                          [ww_sdT8Y
                                                                           ipv5_sdT9m
                                                                           wild2_sdT9n] \r [e1_sdT9v
                                                                                            s1_sdT9w]
                                                                              Control.Concurrent.QSemN.$wlvl
                                                                                  ipv5_sdT9m
                                                                                  wild2_sdT9n
                                                                                  ww_sdT8Y
                                                                                  s1_sdT9w
                                                                                  e1_sdT9v; } in
                                                                    let {
                                                                      sat_sdT9u [Occ=Once]
                                                                        :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 () #)
                                                                      [LclId] =
                                                                          [ipv5_sdT9m] \r [eta_sdT9t]
                                                                              takeMVar# [ipv5_sdT9m
                                                                                         eta_sdT9t];
                                                                    } in 
                                                                      catch# [sat_sdT9u
                                                                              sat_sdT9x
                                                                              s2#_sdT9s];
                                                              };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case ipv1_sdT93 of {
                  __DEFAULT -> io_sdT94 ipv_sdT92;
                  0# -> maskAsyncExceptions# [io_sdT94 ipv_sdT92];
                };
        };

Control.Concurrent.QSemN.waitQSemN1 [InlPrag=NOUSERINLINE[0]]
  :: Control.Concurrent.QSemN.QSemN
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sdT9z w1_sdT9A w2_sdT9B]
        case w_sdT9z of {
          Control.Concurrent.QSemN.QSemN ww1_sdT9D [Occ=Once] ->
              case w1_sdT9A of {
                GHC.Types.I# ww3_sdT9F [Occ=Once] ->
                    Control.Concurrent.QSemN.$wwaitQSemN ww1_sdT9D ww3_sdT9F w2_sdT9B;
              };
        };

Control.Concurrent.QSemN.waitQSemN
  :: Control.Concurrent.QSemN.QSemN
     -> GHC.Types.Int -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Control.Concurrent.QSemN.waitQSemN1 eta_B3 eta_B2 eta_B1;

Control.Concurrent.QSemN.QSemN
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> Control.Concurrent.QSemN.QSemN
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] Control.Concurrent.QSemN.QSemN [eta_B1];


==================== STG syntax: ====================
2018-03-16 16:09:08.75646999 UTC

Control.Concurrent.QSemN.$WQSemN [InlPrag=INLINE[2]]
  :: GHC.MVar.MVar
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> Control.Concurrent.QSemN.QSemN
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m,
 Unf=OtherCon []] =
    [] \r [dt_sdT6m]
        case dt_sdT6m of {
          GHC.MVar.MVar dt_sdT6o [Occ=Once] ->
              Control.Concurrent.QSemN.QSemN [dt_sdT6o];
        };

Control.Concurrent.QSemN.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Concurrent.QSemN.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSemN.$trModule4];

Control.Concurrent.QSemN.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Concurrent.QSemN"#;

Control.Concurrent.QSemN.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSemN.$trModule2];

Control.Concurrent.QSemN.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Concurrent.QSemN.$trModule3
                                     Control.Concurrent.QSemN.$trModule1];

$krep_rdSvw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep1_rdSvx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rdSvy :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rdSvw GHC.Types.[]];

$krep3_rdSvz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep2_rdSvy];

$krep4_rdSvA :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_rdSvz GHC.Types.[]];

$krep5_rdSvB :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rdSvx $krep4_rdSvA];

$krep6_rdSvC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep5_rdSvB];

$krep7_rdSvD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep6_rdSvC GHC.Types.[]];

$krep8_rdSvE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep7_rdSvD];

$krep9_rdSvF :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep8_rdSvE GHC.Types.[]];

$krep10_rdSvG :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep8_rdSvE $krep9_rdSvF];

$krep11_rdSvH :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rdSvx $krep10_rdSvG];

$krep12_rdSvI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,,)
                                              $krep11_rdSvH];

$krep13_rdSvJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep12_rdSvI GHC.Types.[]];

$krep14_rdSvK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep13_rdSvJ];

Control.Concurrent.QSemN.$tcQSemN2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "QSemN"#;

Control.Concurrent.QSemN.$tcQSemN1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSemN.$tcQSemN2];

Control.Concurrent.QSemN.$tcQSemN :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8650881979471817661##
                                    11033619023634057930##
                                    Control.Concurrent.QSemN.$trModule
                                    Control.Concurrent.QSemN.$tcQSemN1
                                    0#
                                    GHC.Types.krep$*];

$krep15_rdSvL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Control.Concurrent.QSemN.$tcQSemN
                                              GHC.Types.[]];

Control.Concurrent.QSemN.$tc'QSemN1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep14_rdSvK $krep15_rdSvL];

Control.Concurrent.QSemN.$tc'QSemN3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'QSemN"#;

Control.Concurrent.QSemN.$tc'QSemN2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSemN.$tc'QSemN3];

Control.Concurrent.QSemN.$tc'QSemN :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15878277071781304355##
                                    273080421945023395##
                                    Control.Concurrent.QSemN.$trModule
                                    Control.Concurrent.QSemN.$tc'QSemN2
                                    0#
                                    Control.Concurrent.QSemN.$tc'QSemN1];

lvl_rdSvM :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "newQSemN: Initial quantity must be non-negative"#;

Control.Concurrent.QSemN.newQSemN2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Control.Concurrent.QSemN.QSemN #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        case GHC.CString.unpackCString# lvl_rdSvM of sat_sdT6q {
          __DEFAULT -> GHC.IO.failIO1 sat_sdT6q GHC.Prim.void#;
        };

Control.Concurrent.QSemN.newQSemN1
  :: GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Control.Concurrent.QSemN.QSemN #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [initial_sdT6r void_0E]
        case initial_sdT6r of wild_sdT6t {
          GHC.Types.I# x_sdT6u [Occ=Once] ->
              case <# [x_sdT6u 0#] of {
                __DEFAULT ->
                    case newMVar# [GHC.Prim.void#] of {
                      Unit# ipv1_sdT6y ->
                          let {
                            sat_sdT6z [Occ=Once]
                              :: (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
                                  [(GHC.Types.Int, GHC.MVar.MVar ())])
                            [LclId] =
                                CCCS (,,)! [wild_sdT6t GHC.Types.[] GHC.Types.[]];
                          } in 
                            case putMVar# [ipv1_sdT6y sat_sdT6z GHC.Prim.void#] of s2#_sdT6A {
                              (##) ->
                                  let {
                                    sat_sdT6B [Occ=Once] :: Control.Concurrent.QSemN.QSemN
                                    [LclId] =
                                        CCCS Control.Concurrent.QSemN.QSemN! [ipv1_sdT6y];
                                  } in  Unit# [sat_sdT6B];
                            };
                    };
                1# -> Control.Concurrent.QSemN.newQSemN2 GHC.Prim.void#;
              };
        };

Control.Concurrent.QSemN.newQSemN
  :: GHC.Types.Int -> GHC.Types.IO Control.Concurrent.QSemN.QSemN
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Control.Concurrent.QSemN.newQSemN1 eta_B2 GHC.Prim.void#;

lvl1_rdSvN :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Control.Concurrent.QSemN.$wloop [InlPrag=NOUSERINLINE[0],
                                 Occ=LoopBreaker]
  :: GHC.Prim.Int#
     -> [(GHC.Types.Int, GHC.MVar.MVar ())]
     -> [(GHC.Types.Int, GHC.MVar.MVar ())]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
            [(GHC.Types.Int, GHC.MVar.MVar ())]) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdT6C w_sdT6D w1_sdT6E void_0E]
        case ww_sdT6C of wild_sdT6G {
          __DEFAULT ->
              case w_sdT6D of wild1_sdT6H {
                [] ->
                    case w1_sdT6E of wild2_sdT6I {
                      [] ->
                          let {
                            sat_sdT6J [Occ=Once] :: GHC.Types.Int
                            [LclId] =
                                CCCS GHC.Types.I#! [wild_sdT6G]; } in
                          let {
                            sat_sdT6K [Occ=Once]
                              :: (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
                                  [(GHC.Types.Int, GHC.MVar.MVar ())])
                            [LclId] =
                                CCCS (,,)! [sat_sdT6J GHC.Types.[] GHC.Types.[]];
                          } in  Unit# [sat_sdT6K];
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          let {
                            sat_sdT6N [Occ=Once] :: [(GHC.Types.Int, GHC.MVar.MVar ())]
                            [LclId] =
                                [wild2_sdT6I] \u [] GHC.List.reverse1 wild2_sdT6I GHC.Types.[];
                          } in 
                            Control.Concurrent.QSemN.$wloop
                                wild_sdT6G sat_sdT6N GHC.Types.[] GHC.Prim.void#;
                    };
                : ds_sdT6O [Occ=Once!] bs_sdT6P [Occ=Once*] ->
                    case ds_sdT6O of {
                      (,) j_sdT6R [Occ=Once!] b_sdT6S [Occ=Once*!] ->
                          case j_sdT6R of {
                            GHC.Types.I# x_sdT6U ->
                                case ># [x_sdT6U wild_sdT6G] of {
                                  __DEFAULT ->
                                      case b_sdT6S of {
                                        GHC.MVar.MVar mvar#_sdT6X [Occ=Once] ->
                                            case
                                                tryPutMVar# [mvar#_sdT6X
                                                             GHC.Tuple.()
                                                             GHC.Prim.void#]
                                            of
                                            { Unit# ipv1_sdT70 [Occ=Once!] ->
                                                  case ipv1_sdT70 of {
                                                    __DEFAULT ->
                                                        case -# [wild_sdT6G x_sdT6U] of sat_sdT72 {
                                                          __DEFAULT ->
                                                              Control.Concurrent.QSemN.$wloop
                                                                  sat_sdT72
                                                                  bs_sdT6P
                                                                  w1_sdT6E
                                                                  GHC.Prim.void#;
                                                        };
                                                    0# ->
                                                        Control.Concurrent.QSemN.$wloop
                                                            wild_sdT6G
                                                            bs_sdT6P
                                                            w1_sdT6E
                                                            GHC.Prim.void#;
                                                  };
                                            };
                                      };
                                  1# ->
                                      case b_sdT6S of {
                                        GHC.MVar.MVar mv#_sdT74 [Occ=Once] ->
                                            case isEmptyMVar# [mv#_sdT74 GHC.Prim.void#] of {
                                              Unit# ipv1_sdT77 [Occ=Once!] ->
                                                  case ipv1_sdT77 of {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_sdT79 [Occ=Once] :: GHC.Types.Int
                                                          [LclId] =
                                                              CCCS GHC.Types.I#! [wild_sdT6G]; } in
                                                        let {
                                                          sat_sdT7a [Occ=Once]
                                                            :: (GHC.Types.Int,
                                                                [(GHC.Types.Int, GHC.MVar.MVar ())],
                                                                [(GHC.Types.Int, GHC.MVar.MVar ())])
                                                          [LclId] =
                                                              CCCS (,,)! [sat_sdT79
                                                                          wild1_sdT6H
                                                                          w1_sdT6E];
                                                        } in  Unit# [sat_sdT7a];
                                                    0# ->
                                                        Control.Concurrent.QSemN.$wloop
                                                            wild_sdT6G
                                                            bs_sdT6P
                                                            w1_sdT6E
                                                            GHC.Prim.void#;
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
          0# ->
              let {
                sat_sdT7b [Occ=Once]
                  :: (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
                      [(GHC.Types.Int, GHC.MVar.MVar ())])
                [LclId] =
                    CCCS (,,)! [lvl1_rdSvN w_sdT6D w1_sdT6E];
              } in  Unit# [sat_sdT7b];
        };

Control.Concurrent.QSemN.$wsignalQSemN [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdT7c ww1_sdT7d void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sdT7h [Occ=Once!] ->
              case ipv1_sdT7h of {
                __DEFAULT ->
                    let {
                      sat_sdT7y [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [ww_sdT7c ww1_sdT7d] \r [void_0E]
                              case takeMVar# [ww_sdT7c GHC.Prim.void#] of {
                                Unit# ipv3_sdT7m [Occ=Once!] ->
                                    case ipv3_sdT7m of {
                                      (,,) i_sdT7o [Occ=Once!]
                                           a1_sdT7p [Occ=Once]
                                           a2_sdT7q [Occ=Once] ->
                                          case i_sdT7o of {
                                            GHC.Types.I# y_sdT7s [Occ=Once] ->
                                                case +# [ww1_sdT7d y_sdT7s] of sat_sdT7t {
                                                  __DEFAULT ->
                                                      case
                                                          Control.Concurrent.QSemN.$wloop
                                                              sat_sdT7t
                                                              a1_sdT7p
                                                              a2_sdT7q
                                                              GHC.Prim.void#
                                                      of
                                                      { Unit# ipv5_sdT7w [Occ=Once] ->
                                                            case
                                                                putMVar# [ww_sdT7c
                                                                          ipv5_sdT7w
                                                                          GHC.Prim.void#]
                                                            of
                                                            s2#_sdT7x
                                                            { (##) -> Unit# [GHC.Tuple.()];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in  maskUninterruptible# [sat_sdT7y GHC.Prim.void#];
                1# ->
                    case takeMVar# [ww_sdT7c GHC.Prim.void#] of {
                      Unit# ipv3_sdT7B [Occ=Once!] ->
                          case ipv3_sdT7B of {
                            (,,) i_sdT7D [Occ=Once!] a1_sdT7E [Occ=Once] a2_sdT7F [Occ=Once] ->
                                case i_sdT7D of {
                                  GHC.Types.I# y_sdT7H [Occ=Once] ->
                                      case +# [ww1_sdT7d y_sdT7H] of sat_sdT7I {
                                        __DEFAULT ->
                                            case
                                                Control.Concurrent.QSemN.$wloop
                                                    sat_sdT7I a1_sdT7E a2_sdT7F GHC.Prim.void#
                                            of
                                            { Unit# ipv5_sdT7L [Occ=Once] ->
                                                  case
                                                      putMVar# [ww_sdT7c ipv5_sdT7L GHC.Prim.void#]
                                                  of
                                                  s2#_sdT7M
                                                  { (##) -> Unit# [GHC.Tuple.()];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Control.Concurrent.QSemN.signalQSemN1 [InlPrag=NOUSERINLINE[0]]
  :: Control.Concurrent.QSemN.QSemN
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sdT7N w1_sdT7O void_0E]
        case w_sdT7N of {
          Control.Concurrent.QSemN.QSemN ww1_sdT7R [Occ=Once] ->
              case w1_sdT7O of {
                GHC.Types.I# ww3_sdT7T [Occ=Once] ->
                    Control.Concurrent.QSemN.$wsignalQSemN
                        ww1_sdT7R ww3_sdT7T GHC.Prim.void#;
              };
        };

Control.Concurrent.QSemN.signalQSemN
  :: Control.Concurrent.QSemN.QSemN
     -> GHC.Types.Int -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        Control.Concurrent.QSemN.signalQSemN1 eta_B3 eta_B2 GHC.Prim.void#;

lvl2_rdSvO
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> GHC.Types.Int
     -> GHC.Prim.MVar# GHC.Prim.RealWorld ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Exception.SomeException
     -> GHC.Prim.Int#
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<S,U><S(S),1*U(U)><S,U><S,U><L,U><S,1*U>,
 Unf=OtherCon []] =
    sat-only [] \r [w_sdT7U
                    w1_sdT7V
                    ww_sdT7W
                    void_0E
                    w2_sdT7Y
                    ipv1_sdT7Z]
        case ipv1_sdT7Z of {
          __DEFAULT ->
              let {
                sat_sdT8p [Occ=Once]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId] =
                    [w_sdT7U w1_sdT7V ww_sdT7W] \r [void_0E]
                        case takeMVar# [w_sdT7U GHC.Prim.void#] of {
                          Unit# ipv3_sdT84 [Occ=Once!] ->
                              case ipv3_sdT84 of wild_sdT85 {
                                (,,) i_sdT86 [Occ=Once!] b1_sdT87 [Occ=Once] b2_sdT88 [Occ=Once] ->
                                    case tryTakeMVar# [ww_sdT7W GHC.Prim.void#] of {
                                      (#,#) ipv5_sdT8b [Occ=Once!] _ [Occ=Dead] ->
                                          case ipv5_sdT8b of {
                                            __DEFAULT ->
                                                case w1_sdT7V of {
                                                  GHC.Types.I# x_sdT8f [Occ=Once] ->
                                                      case i_sdT86 of {
                                                        GHC.Types.I# y_sdT8h [Occ=Once] ->
                                                            case +# [x_sdT8f y_sdT8h] of sat_sdT8i {
                                                              __DEFAULT ->
                                                                  case
                                                                      Control.Concurrent.QSemN.$wloop
                                                                          sat_sdT8i
                                                                          b1_sdT87
                                                                          b2_sdT88
                                                                          GHC.Prim.void#
                                                                  of
                                                                  { Unit# ipv8_sdT8l [Occ=Once] ->
                                                                        case
                                                                            putMVar# [w_sdT7U
                                                                                      ipv8_sdT8l
                                                                                      GHC.Prim.void#]
                                                                        of
                                                                        s2#_sdT8m
                                                                        { (##) ->
                                                                              Unit# [GHC.Tuple.()];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                            0# ->
                                                case
                                                    putMVar# [ww_sdT7W GHC.Tuple.() GHC.Prim.void#]
                                                of
                                                s2#_sdT8n
                                                { (##) ->
                                                      case
                                                          putMVar# [w_sdT7U
                                                                    wild_sdT85
                                                                    GHC.Prim.void#]
                                                      of
                                                      s2#1_sdT8o
                                                      { (##) -> Unit# [GHC.Tuple.()];
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case maskUninterruptible# [sat_sdT8p GHC.Prim.void#] of {
                  Unit# _ [Occ=Dead] -> raiseIO# [w2_sdT7Y GHC.Prim.void#];
                };
          1# ->
              case takeMVar# [w_sdT7U GHC.Prim.void#] of {
                Unit# ipv3_sdT8v [Occ=Once!] ->
                    case ipv3_sdT8v of wild_sdT8w {
                      (,,) i_sdT8x [Occ=Once!] b1_sdT8y [Occ=Once] b2_sdT8z [Occ=Once] ->
                          case tryTakeMVar# [ww_sdT7W GHC.Prim.void#] of {
                            (#,#) ipv5_sdT8C [Occ=Once!] _ [Occ=Dead] ->
                                case ipv5_sdT8C of {
                                  __DEFAULT ->
                                      case w1_sdT7V of {
                                        GHC.Types.I# x_sdT8G [Occ=Once] ->
                                            case i_sdT8x of {
                                              GHC.Types.I# y_sdT8I [Occ=Once] ->
                                                  case +# [x_sdT8G y_sdT8I] of sat_sdT8J {
                                                    __DEFAULT ->
                                                        case
                                                            Control.Concurrent.QSemN.$wloop
                                                                sat_sdT8J
                                                                b1_sdT8y
                                                                b2_sdT8z
                                                                GHC.Prim.void#
                                                        of
                                                        { Unit# ipv8_sdT8M [Occ=Once] ->
                                                              case
                                                                  putMVar# [w_sdT7U
                                                                            ipv8_sdT8M
                                                                            GHC.Prim.void#]
                                                              of
                                                              s2#_sdT8N
                                                              { (##) ->
                                                                    raiseIO# [w2_sdT7Y
                                                                              GHC.Prim.void#];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# ->
                                      case
                                          putMVar# [ww_sdT7W GHC.Tuple.() GHC.Prim.void#]
                                      of
                                      s2#_sdT8O
                                      { (##) ->
                                            case
                                                putMVar# [w_sdT7U wild_sdT8w GHC.Prim.void#]
                                            of
                                            s2#1_sdT8P
                                            { (##) -> raiseIO# [w2_sdT7Y GHC.Prim.void#];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Control.Concurrent.QSemN.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar# GHC.Prim.RealWorld ()
     -> GHC.Types.Int
     -> GHC.Prim.MVar#
          GHC.Prim.RealWorld
          (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
           [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Exception.SomeException
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S,U><S(S),1*U(U)><S,U><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdT8Q w_sdT8R w1_sdT8S void_0E w3_sdT8U]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sdT8X [Occ=Once] ->
              lvl2_rdSvO
                  w1_sdT8S w_sdT8R ww_sdT8Q GHC.Prim.void# w3_sdT8U ipv1_sdT8X;
        };

Control.Concurrent.QSemN.$wwaitQSemN [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdT8Y ww1_sdT8Z void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sdT93 [Occ=Once!] ->
              let {
                io_sdT94 [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                    [ww_sdT8Y ww1_sdT8Z] \r [void_0E]
                        case takeMVar# [ww_sdT8Y GHC.Prim.void#] of {
                          Unit# ipv3_sdT98 [Occ=Once!] ->
                              case ipv3_sdT98 of {
                                (,,) i_sdT9a [Occ=Once!]
                                     b1_sdT9b [Occ=Once*]
                                     b2_sdT9c [Occ=Once*] ->
                                    case i_sdT9a of wild1_sdT9d {
                                      GHC.Types.I# x_sdT9e [Occ=Once] ->
                                          case -# [x_sdT9e ww1_sdT8Z] of x1_sdT9f [Dmd=<S,U>] {
                                            __DEFAULT ->
                                                case <# [x1_sdT9f 0#] of {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sdT9h [Occ=Once] :: GHC.Types.Int
                                                        [LclId] =
                                                            CCCS GHC.Types.I#! [x1_sdT9f]; } in
                                                      let {
                                                        sat_sdT9i [Occ=Once]
                                                          :: (GHC.Types.Int,
                                                              [(GHC.Types.Int, GHC.MVar.MVar ())],
                                                              [(GHC.Types.Int, GHC.MVar.MVar ())])
                                                        [LclId] =
                                                            CCCS (,,)! [sat_sdT9h
                                                                        b1_sdT9b
                                                                        b2_sdT9c];
                                                      } in 
                                                        case
                                                            putMVar# [ww_sdT8Y
                                                                      sat_sdT9i
                                                                      GHC.Prim.void#]
                                                        of
                                                        s2#_sdT9j
                                                        { (##) -> Unit# [GHC.Tuple.()];
                                                        };
                                                  1# ->
                                                      case newMVar# [GHC.Prim.void#] of {
                                                        Unit# ipv5_sdT9m ->
                                                            let {
                                                              wild2_sdT9n [Dmd=<L,U(U)>]
                                                                :: GHC.Types.Int
                                                              [LclId, Unf=OtherCon []] =
                                                                  CCCS GHC.Types.I#! [ww1_sdT8Z]; } in
                                                            let {
                                                              sat_sdT9o [Occ=Once]
                                                                :: GHC.MVar.MVar ()
                                                              [LclId] =
                                                                  CCCS GHC.MVar.MVar! [ipv5_sdT9m]; } in
                                                            let {
                                                              sat_sdT9p [Occ=Once]
                                                                :: (GHC.Types.Int, GHC.MVar.MVar ())
                                                              [LclId] =
                                                                  CCCS (,)! [wild2_sdT9n
                                                                             sat_sdT9o]; } in
                                                            let {
                                                              sat_sdT9q [Occ=Once]
                                                                :: [(GHC.Types.Int,
                                                                     GHC.MVar.MVar ())]
                                                              [LclId] =
                                                                  CCCS :! [sat_sdT9p b2_sdT9c]; } in
                                                            let {
                                                              sat_sdT9r [Occ=Once]
                                                                :: (GHC.Types.Int,
                                                                    [(GHC.Types.Int,
                                                                      GHC.MVar.MVar ())],
                                                                    [(GHC.Types.Int,
                                                                      GHC.MVar.MVar ())])
                                                              [LclId] =
                                                                  CCCS (,,)! [wild1_sdT9d
                                                                              b1_sdT9b
                                                                              sat_sdT9q];
                                                            } in 
                                                              case
                                                                  putMVar# [ww_sdT8Y
                                                                            sat_sdT9r
                                                                            GHC.Prim.void#]
                                                              of
                                                              s2#_sdT9s
                                                              { (##) ->
                                                                    let {
                                                                      sat_sdT9x [Occ=Once]
                                                                        :: GHC.Exception.SomeException
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 () #)
                                                                      [LclId] =
                                                                          [ww_sdT8Y
                                                                           ipv5_sdT9m
                                                                           wild2_sdT9n] \r [e1_sdT9v
                                                                                            void_0E]
                                                                              Control.Concurrent.QSemN.$wlvl
                                                                                  ipv5_sdT9m
                                                                                  wild2_sdT9n
                                                                                  ww_sdT8Y
                                                                                  GHC.Prim.void#
                                                                                  e1_sdT9v; } in
                                                                    let {
                                                                      sat_sdT9u [Occ=Once]
                                                                        :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld,
                                                                                 () #)
                                                                      [LclId] =
                                                                          [ipv5_sdT9m] \r [void_0E]
                                                                              takeMVar# [ipv5_sdT9m
                                                                                         GHC.Prim.void#];
                                                                    } in 
                                                                      catch# [sat_sdT9u
                                                                              sat_sdT9x
                                                                              GHC.Prim.void#];
                                                              };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case ipv1_sdT93 of {
                  __DEFAULT -> io_sdT94 GHC.Prim.void#;
                  0# -> maskAsyncExceptions# [io_sdT94 GHC.Prim.void#];
                };
        };

Control.Concurrent.QSemN.waitQSemN1 [InlPrag=NOUSERINLINE[0]]
  :: Control.Concurrent.QSemN.QSemN
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sdT9z w1_sdT9A void_0E]
        case w_sdT9z of {
          Control.Concurrent.QSemN.QSemN ww1_sdT9D [Occ=Once] ->
              case w1_sdT9A of {
                GHC.Types.I# ww3_sdT9F [Occ=Once] ->
                    Control.Concurrent.QSemN.$wwaitQSemN
                        ww1_sdT9D ww3_sdT9F GHC.Prim.void#;
              };
        };

Control.Concurrent.QSemN.waitQSemN
  :: Control.Concurrent.QSemN.QSemN
     -> GHC.Types.Int -> GHC.Types.IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        Control.Concurrent.QSemN.waitQSemN1 eta_B3 eta_B2 GHC.Prim.void#;

Control.Concurrent.QSemN.QSemN
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [(GHC.Types.Int, GHC.MVar.MVar ())],
        [(GHC.Types.Int, GHC.MVar.MVar ())])
     -> Control.Concurrent.QSemN.QSemN
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] Control.Concurrent.QSemN.QSemN [eta_B1];

