
==================== Raw Cmm ====================
2018-03-16 16:09:10.767888642 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:09:10.77037589 UTC

[section ""data" . Control.Concurrent.Chan.$WChItem_closure" {
     Control.Concurrent.Chan.$WChItem_closure:
         const Control.Concurrent.Chan.$WChItem_info;
 },
 Control.Concurrent.Chan.$WChItem_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVkc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdVkg; else goto cdVkh;
       cdVkg: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.$WChItem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVkh: // global
           I64[Sp - 16] = block_cdVk9_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udVkl; else goto cdVka;
       udVkl: // global
           call _cdVk9(R1) args: 0, res: 0, upd: 0;
       cdVka: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.$WChItem_info" {
     Control.Concurrent.Chan.$WChItem_info:
         const Control.Concurrent.Chan.$WChItem_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdVk9() //  [R1]
         { []
         }
     {offset
       cdVk9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdVkk; else goto cdVkj;
       cdVkk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdVkj: // global
           _sdV15::P64 = P64[R1 + 7];
           I64[Hp - 16] = Control.Concurrent.Chan.ChItem_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sdV15::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVk9_info" {
     block_cdVk9_info:
         const _cdVk9;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.777663956 UTC

[section ""data" . Control.Concurrent.Chan.$WChan_closure" {
     Control.Concurrent.Chan.$WChan_closure:
         const Control.Concurrent.Chan.$WChan_info;
 },
 Control.Concurrent.Chan.$WChan_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVkE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdVkN; else goto cdVkO;
       cdVkN: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.$WChan_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVkO: // global
           I64[Sp - 16] = block_cdVkB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udVkU; else goto cdVkC;
       udVkU: // global
           call _cdVkB(R1) args: 0, res: 0, upd: 0;
       cdVkC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.$WChan_info" {
     Control.Concurrent.Chan.$WChan_info:
         const Control.Concurrent.Chan.$WChan_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdVkB() //  [R1]
         { []
         }
     {offset
       cdVkB: // global
           I64[Sp] = block_cdVkH_info;
           _sdV19::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sdV19::P64;
           if (R1 & 7 != 0) goto udVkT; else goto cdVkI;
       udVkT: // global
           call _cdVkH(R1) args: 0, res: 0, upd: 0;
       cdVkI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVkB_info" {
     block_cdVkB_info:
         const _cdVkB;
         const 1;
         const 30;
 },
 _cdVkH() //  [R1]
         { []
         }
     {offset
       cdVkH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdVkS; else goto cdVkR;
       cdVkS: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdVkR: // global
           _sdV1b::P64 = P64[R1 + 7];
           I64[Hp - 16] = Control.Concurrent.Chan.Chan_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sdV1b::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVkH_info" {
     block_cdVkH_info:
         const _cdVkH;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.78828631 UTC

[section ""data" . Control.Concurrent.Chan.$fEqChan_$c==_closure" {
     Control.Concurrent.Chan.$fEqChan_$c==_closure:
         const Control.Concurrent.Chan.$fEqChan_$c==_info;
 },
 Control.Concurrent.Chan.$fEqChan_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVlh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdVll; else goto cdVlm;
       cdVll: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.$fEqChan_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVlm: // global
           I64[Sp - 16] = block_cdVle_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udVlK; else goto cdVlf;
       udVlK: // global
           call _cdVle(R1) args: 0, res: 0, upd: 0;
       cdVlf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.$fEqChan_$c==_info" {
     Control.Concurrent.Chan.$fEqChan_$c==_info:
         const Control.Concurrent.Chan.$fEqChan_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdVle() //  [R1]
         { []
         }
     {offset
       cdVle: // global
           I64[Sp - 8] = block_cdVlk_info;
           _sdV1f::P64 = P64[R1 + 7];
           _sdV1g::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sdV1g::P64;
           P64[Sp + 8] = _sdV1f::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udVlJ; else goto cdVlo;
       udVlJ: // global
           call _cdVlk(R1) args: 0, res: 0, upd: 0;
       cdVlo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVle_info" {
     block_cdVle_info:
         const _cdVle;
         const 1;
         const 30;
 },
 _cdVlk() //  [R1]
         { []
         }
     {offset
       cdVlk: // global
           if (P64[Sp + 16] == P64[R1 + 7]) goto cdVlE; else goto cdVly;
       cdVlE: // global
           R1 = I64[((P64[Sp + 8] == P64[R1 + 15]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdVly: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVlk_info" {
     block_cdVlk_info:
         const _cdVlk;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.800637942 UTC

[section ""data" . Control.Concurrent.Chan.$fEqChan_$c/=_closure" {
     Control.Concurrent.Chan.$fEqChan_$c/=_closure:
         const Control.Concurrent.Chan.$fEqChan_$c/=_info;
 },
 Control.Concurrent.Chan.$fEqChan_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVmb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdVmf; else goto cdVmg;
       cdVmf: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.$fEqChan_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVmg: // global
           I64[Sp - 16] = block_cdVm8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udVmS; else goto cdVm9;
       udVmS: // global
           call _cdVm8(R1) args: 0, res: 0, upd: 0;
       cdVm9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.$fEqChan_$c/=_info" {
     Control.Concurrent.Chan.$fEqChan_$c/=_info:
         const Control.Concurrent.Chan.$fEqChan_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdVm8() //  [R1]
         { []
         }
     {offset
       cdVm8: // global
           I64[Sp - 8] = block_cdVme_info;
           _sdV1p::P64 = P64[R1 + 7];
           _sdV1q::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sdV1q::P64;
           P64[Sp + 8] = _sdV1p::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udVmR; else goto cdVmi;
       udVmR: // global
           call _cdVme(R1) args: 0, res: 0, upd: 0;
       cdVmi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVm8_info" {
     block_cdVm8_info:
         const _cdVm8;
         const 1;
         const 30;
 },
 _cdVme() //  [R1]
         { []
         }
     {offset
       cdVme: // global
           if (P64[Sp + 16] != P64[R1 + 7]) goto cdVmH; else goto cdVmy;
       cdVmy: // global
           if (P64[Sp + 8] != P64[R1 + 15]) goto cdVmH; else goto cdVmN;
       cdVmH: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdVmN: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVme_info" {
     block_cdVme_info:
         const _cdVme;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.810834466 UTC

[section ""data" . Control.Concurrent.Chan.$fEqChan_closure" {
     Control.Concurrent.Chan.$fEqChan_closure:
         const GHC.Classes.C:Eq_con_info;
         const Control.Concurrent.Chan.$fEqChan_$c==_closure+2;
         const Control.Concurrent.Chan.$fEqChan_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.816148864 UTC

[section ""data" . Control.Concurrent.Chan.newChan1_closure" {
     Control.Concurrent.Chan.newChan1_closure:
         const Control.Concurrent.Chan.newChan1_info;
 },
 Control.Concurrent.Chan.newChan1_entry() //  []
         { []
         }
     {offset
       cdVnr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdVns; else goto cdVnt;
       cdVns: // global
           R1 = Control.Concurrent.Chan.newChan1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdVnt: // global
           I64[Sp - 8] = block_cdVnf_info;
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.newChan1_info" {
     Control.Concurrent.Chan.newChan1_info:
         const Control.Concurrent.Chan.newChan1_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _cdVnf() //  [R1]
         { []
         }
     {offset
       cdVnf: // global
           I64[Sp - 8] = block_cdVnh_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVnf_info" {
     block_cdVnf_info:
         const _cdVnf;
         const 0;
         const 30;
 },
 _cdVnh() //  [R1]
         { []
         }
     {offset
       cdVnh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdVnx; else goto cdVnw;
       cdVnx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdVnw: // global
           I64[Hp - 8] = GHC.MVar.MVar_con_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_cdVnk_info;
           _cdVnj::P64 = Hp - 7;
           R2 = _cdVnj::P64;
           _sdV1C::P64 = R1;
           R1 = R1;
           P64[Sp] = _sdV1C::P64;
           P64[Sp + 8] = _cdVnj::P64;
           Sp = Sp - 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVnh_info" {
     block_cdVnh_info:
         const _cdVnh;
         const 1;
         const 30;
 },
 _cdVnk() //  []
         { []
         }
     {offset
       cdVnk: // global
           I64[Sp] = block_cdVnm_info;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVnk_info" {
     block_cdVnk_info:
         const _cdVnk;
         const 2;
         const 30;
 },
 _cdVnm() //  [R1]
         { []
         }
     {offset
       cdVnm: // global
           I64[Sp] = block_cdVno_info;
           R2 = P64[Sp + 16];
           _sdV1H::P64 = R1;
           R1 = R1;
           P64[Sp + 16] = _sdV1H::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVnm_info" {
     block_cdVnm_info:
         const _cdVnm;
         const 2;
         const 30;
 },
 _cdVno() //  []
         { []
         }
     {offset
       cdVno: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdVnC; else goto cdVnB;
       cdVnC: // global
           HpAlloc = 24;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdVnB: // global
           I64[Hp - 16] = Control.Concurrent.Chan.Chan_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVno_info" {
     block_cdVno_info:
         const _cdVno;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.833507284 UTC

[section ""data" . Control.Concurrent.Chan.newChan_closure" {
     Control.Concurrent.Chan.newChan_closure:
         const Control.Concurrent.Chan.newChan_info;
 },
 Control.Concurrent.Chan.newChan_entry() //  []
         { []
         }
     {offset
       cdVo5: // global
           call Control.Concurrent.Chan.newChan1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.newChan_info" {
     Control.Concurrent.Chan.newChan_info:
         const Control.Concurrent.Chan.newChan_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.846900216 UTC

[section ""data" . Control.Concurrent.Chan.$wwriteChan_closure" {
     Control.Concurrent.Chan.$wwriteChan_closure:
         const Control.Concurrent.Chan.$wwriteChan_info;
 },
 sat_sdV2e_entry() //  [R1]
         { []
         }
     {offset
       cdVox: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdVoF; else goto cdVoG;
       cdVoF: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdVoG: // global
           I64[Sp - 32] = block_cdVos_info;
           _sdV1L::P64 = P64[R1 + 7];
           _sdV1M::P64 = P64[R1 + 15];
           _sdV1Q::P64 = P64[R1 + 23];
           R1 = _sdV1L::P64;
           P64[Sp - 24] = _sdV1L::P64;
           P64[Sp - 16] = _sdV1M::P64;
           P64[Sp - 8] = _sdV1Q::P64;
           Sp = Sp - 32;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdV2e_info" {
     sat_sdV2e_info:
         const sat_sdV2e_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _cdVos() //  [R1]
         { []
         }
     {offset
       cdVos: // global
           I64[Sp] = block_cdVou_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udVoQ; else goto cdVov;
       udVoQ: // global
           call _cdVou(R1) args: 0, res: 0, upd: 0;
       cdVov: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVos_info" {
     block_cdVos_info:
         const _cdVos;
         const 3;
         const 30;
 },
 _cdVou() //  [R1]
         { []
         }
     {offset
       cdVou: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdVoK; else goto cdVoJ;
       cdVoK: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdVoJ: // global
           _sdV29::P64 = P64[R1 + 7];
           I64[Hp - 16] = Control.Concurrent.Chan.ChItem_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_cdVoB_info;
           R2 = Hp - 15;
           R1 = _sdV29::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVou_info" {
     block_cdVou_info:
         const _cdVou;
         const 3;
         const 30;
 },
 _cdVoB() //  []
         { []
         }
     {offset
       cdVoB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdVoN; else goto cdVoM;
       cdVoN: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdVoM: // global
           I64[Hp - 8] = GHC.MVar.MVar_con_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_cdVoE_info;
           R2 = Hp - 7;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVoB_info" {
     block_cdVoB_info:
         const _cdVoB;
         const 131;
         const 30;
 },
 _cdVoE() //  []
         { []
         }
     {offset
       cdVoE: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVoE_info" {
     block_cdVoE_info:
         const _cdVoE;
         const 0;
         const 30;
 },
 Control.Concurrent.Chan.$wwriteChan_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdVoU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdVoV; else goto cdVoW;
       cdVoV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.$wwriteChan_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVoW: // global
           I64[Sp - 24] = block_cdVog_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.$wwriteChan_info" {
     Control.Concurrent.Chan.$wwriteChan_info:
         const Control.Concurrent.Chan.$wwriteChan_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _cdVog() //  [R1]
         { []
         }
     {offset
       cdVog: // global
           I64[Sp - 8] = block_cdVoi_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVog_info" {
     block_cdVog_info:
         const _cdVog;
         const 2;
         const 30;
 },
 _cdVoi() //  [R1]
         { []
         }
     {offset
       cdVoi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdVp0; else goto cdVoZ;
       cdVp0: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdVoZ: // global
           _sdV1L::P64 = P64[Sp + 16];
           if (R1 == 0) goto cdVoT; else goto cdVoS;
       cdVoT: // global
           I64[Hp - 24] = sat_sdV2e_info;
           P64[Hp - 16] = _sdV1L::P64;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cdVoS: // global
           Hp = Hp - 32;
           I64[Sp] = block_cdVp1_info;
           R1 = _sdV1L::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVoi_info" {
     block_cdVoi_info:
         const _cdVoi;
         const 3;
         const 30;
 },
 _cdVp1() //  [R1]
         { []
         }
     {offset
       cdVp1: // global
           I64[Sp] = block_cdVp3_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udVpm; else goto cdVp4;
       udVpm: // global
           call _cdVp3(R1) args: 0, res: 0, upd: 0;
       cdVp4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVp1_info" {
     block_cdVp1_info:
         const _cdVp1;
         const 3;
         const 30;
 },
 _cdVp3() //  [R1]
         { []
         }
     {offset
       cdVp3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdVpg; else goto cdVpf;
       cdVpg: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdVpf: // global
           _sdV1Z::P64 = P64[R1 + 7];
           I64[Hp - 16] = Control.Concurrent.Chan.ChItem_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp] = block_cdVp9_info;
           R2 = Hp - 15;
           R1 = _sdV1Z::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVp3_info" {
     block_cdVp3_info:
         const _cdVp3;
         const 3;
         const 30;
 },
 _cdVp9() //  []
         { []
         }
     {offset
       cdVp9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdVpj; else goto cdVpi;
       cdVpj: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdVpi: // global
           I64[Hp - 8] = GHC.MVar.MVar_con_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 24] = block_cdVpc_info;
           R2 = Hp - 7;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVp9_info" {
     block_cdVp9_info:
         const _cdVp9;
         const 259;
         const 30;
 },
 _cdVpc() //  []
         { []
         }
     {offset
       cdVpc: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVpc_info" {
     block_cdVpc_info:
         const _cdVpc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.876472976 UTC

[section ""data" . Control.Concurrent.Chan.writeChan1_closure" {
     Control.Concurrent.Chan.writeChan1_closure:
         const Control.Concurrent.Chan.writeChan1_info;
 },
 Control.Concurrent.Chan.writeChan1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVqj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdVqk; else goto cdVql;
       cdVqk: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.writeChan1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVql: // global
           I64[Sp - 16] = block_cdVqg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udVqp; else goto cdVqh;
       udVqp: // global
           call _cdVqg(R1) args: 0, res: 0, upd: 0;
       cdVqh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.writeChan1_info" {
     Control.Concurrent.Chan.writeChan1_info:
         const Control.Concurrent.Chan.writeChan1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cdVqg() //  [R1]
         { []
         }
     {offset
       cdVqg: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call Control.Concurrent.Chan.$wwriteChan_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVqg_info" {
     block_cdVqg_info:
         const _cdVqg;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.8822737 UTC

[section ""data" . Control.Concurrent.Chan.writeChan_closure" {
     Control.Concurrent.Chan.writeChan_closure:
         const Control.Concurrent.Chan.writeChan_info;
 },
 Control.Concurrent.Chan.writeChan_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVqD: // global
           R3 = R3;
           R2 = R2;
           call Control.Concurrent.Chan.writeChan1_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.writeChan_info" {
     Control.Concurrent.Chan.writeChan_info:
         const Control.Concurrent.Chan.writeChan_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.888035686 UTC

[section ""data" . Control.Concurrent.Chan.writeList2Chan1_closure" {
     Control.Concurrent.Chan.writeList2Chan1_closure:
         const Control.Concurrent.Chan.writeList2Chan1_info;
 },
 Control.Concurrent.Chan.writeList2Chan1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVqQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdVqR; else goto cdVqS;
       cdVqR: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.writeList2Chan1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVqS: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cdVqU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.writeList2Chan1_info" {
     Control.Concurrent.Chan.writeList2Chan1_info:
         const Control.Concurrent.Chan.writeList2Chan1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cdVqU() //  []
         { []
         }
     {offset
       cdVqU: // global
           I64[Sp - 8] = block_cdVqW_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udVrm; else goto cdVqY;
       udVrm: // global
           call _cdVqW(R1) args: 0, res: 0, upd: 0;
       cdVqY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdVqW() //  [R1]
         { []
         }
     {offset
       cdVqW: // global
           if (R1 & 7 == 1) goto cdVr4; else goto cdVr9;
       cdVr4: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdVr9: // global
           I64[Sp - 8] = block_cdVr7_info;
           _sdV2s::P64 = P64[R1 + 6];
           _sdV2t::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sdV2t::P64;
           P64[Sp + 16] = _sdV2s::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udVrn; else goto cdVra;
       udVrn: // global
           call _cdVr7(R1) args: 0, res: 0, upd: 0;
       cdVra: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVqW_info" {
     block_cdVqW_info:
         const _cdVqW;
         const 130;
         const 30;
 },
 _cdVr7() //  [R1]
         { []
         }
     {offset
       cdVr7: // global
           I64[Sp] = block_cdVre_info;
           R4 = P64[Sp + 24];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Control.Concurrent.Chan.$wwriteChan_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVr7_info" {
     block_cdVr7_info:
         const _cdVr7;
         const 3;
         const 30;
 },
 _cdVre() //  []
         { []
         }
     {offset
       cdVre: // global
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cdVqU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdVre_info" {
     block_cdVre_info:
         const _cdVre;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.901885238 UTC

[section ""data" . Control.Concurrent.Chan.writeList2Chan_closure" {
     Control.Concurrent.Chan.writeList2Chan_closure:
         const Control.Concurrent.Chan.writeList2Chan_info;
 },
 Control.Concurrent.Chan.writeList2Chan_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVrP: // global
           R3 = R3;
           R2 = R2;
           call Control.Concurrent.Chan.writeList2Chan1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.writeList2Chan_info" {
     Control.Concurrent.Chan.writeList2Chan_info:
         const Control.Concurrent.Chan.writeList2Chan_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.913618914 UTC

[section ""data" . Control.Concurrent.Chan.$wreadChan_closure" {
     Control.Concurrent.Chan.$wreadChan_closure:
         const Control.Concurrent.Chan.$wreadChan_info;
 },
 sat_sdV30_entry() //  [R1, R2]
         { []
         }
     {offset
       cdVsg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdVsh; else goto cdVsi;
       cdVsh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdVsi: // global
           I64[Sp - 16] = block_cdVse_info;
           _sdV2X::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sdV2X::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdV30_info" {
     sat_sdV30_info:
         const sat_sdV30_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cdVse() //  []
         { []
         }
     {offset
       cdVse: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVse_info" {
     block_cdVse_info:
         const _cdVse;
         const 1;
         const 30;
 },
 sat_sdV2W_entry() //  [R1]
         { []
         }
     {offset
       cdVss: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdVsE; else goto cdVsF;
       cdVsE: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdVsF: // global
           I64[Sp - 8] = block_cdVsp_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udVsL; else goto cdVsq;
       udVsL: // global
           call _cdVsp(R1) args: 0, res: 0, upd: 0;
       cdVsq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdV2W_info" {
     sat_sdV2W_info:
         const sat_sdV2W_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _cdVsp() //  [R1]
         { []
         }
     {offset
       cdVsp: // global
           I64[Sp] = block_cdVsv_info;
           R1 = P64[R1 + 7];
           call stg_readMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVsp_info" {
     block_cdVsp_info:
         const _cdVsp;
         const 0;
         const 30;
 },
 _cdVsv() //  [R1]
         { []
         }
     {offset
       cdVsv: // global
           I64[Sp] = block_cdVsx_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udVsM; else goto cdVsy;
       udVsM: // global
           call _cdVsx(R1) args: 0, res: 0, upd: 0;
       cdVsy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVsv_info" {
     block_cdVsv_info:
         const _cdVsv;
         const 0;
         const 30;
 },
 _cdVsx() //  [R1]
         { []
         }
     {offset
       cdVsx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdVsK; else goto cdVsJ;
       cdVsK: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdVsJ: // global
           _sdV2S::P64 = P64[R1 + 7];
           _sdV2T::P64 = P64[R1 + 15];
           I64[Hp - 32] = GHC.MVar.MVar_con_info;
           P64[Hp - 24] = _sdV2T::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _sdV2S::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVsx_info" {
     block_cdVsx_info:
         const _cdVsx;
         const 0;
         const 30;
 },
 io1_sdV2G_entry() //  [R1]
         { []
         }
     {offset
       cdVsS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdVsW; else goto cdVsX;
       cdVsW: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdVsX: // global
           I64[Sp - 16] = block_cdVs7_info;
           _sdV2A::P64 = P64[R1 + 7];
           R1 = _sdV2A::P64;
           P64[Sp - 8] = _sdV2A::P64;
           Sp = Sp - 16;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io1_sdV2G_info" {
     io1_sdV2G_info:
         const io1_sdV2G_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _cdVs7() //  [R1]
         { []
         }
     {offset
       cdVs7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdVt0; else goto cdVsZ;
       cdVt0: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdVsZ: // global
           I64[Hp - 32] = sat_sdV30_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sdV2W_info;
           P64[Hp] = R1;
           I64[Sp] = block_cdVsN_info;
           R2 = Hp - 30;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVs7_info" {
     block_cdVs7_info:
         const _cdVs7;
         const 1;
         const 30;
 },
 _cdVsN() //  [R1]
         { []
         }
     {offset
       cdVsN: // global
           I64[Sp] = block_cdVsP_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udVt5; else goto cdVsQ;
       udVt5: // global
           call _cdVsP(R1) args: 0, res: 0, upd: 0;
       cdVsQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVsN_info" {
     block_cdVsN_info:
         const _cdVsN;
         const 1;
         const 30;
 },
 _cdVsP() //  [R1]
         { []
         }
     {offset
       cdVsP: // global
           I64[Sp] = block_cdVsV_info;
           R2 = P64[R1 + 7];
           _sdV36::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sdV36::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVsP_info" {
     block_cdVsP_info:
         const _cdVsP;
         const 1;
         const 30;
 },
 _cdVsV() //  []
         { []
         }
     {offset
       cdVsV: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVsV_info" {
     block_cdVsV_info:
         const _cdVsV;
         const 1;
         const 30;
 },
 Control.Concurrent.Chan.$wreadChan_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVta: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdVtb; else goto cdVtc;
       cdVtb: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.$wreadChan_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVtc: // global
           I64[Sp - 16] = block_cdVs0_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.$wreadChan_info" {
     Control.Concurrent.Chan.$wreadChan_info:
         const Control.Concurrent.Chan.$wreadChan_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cdVs0() //  [R1]
         { []
         }
     {offset
       cdVs0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdVtf; else goto cdVte;
       cdVtf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdVte: // global
           I64[Hp - 8] = io1_sdV2G_info;
           P64[Hp] = P64[Sp + 8];
           _cdVs2::P64 = Hp - 7;
           if (R1 == 0) goto cdVt9; else goto cdVt8;
       cdVt9: // global
           R1 = _cdVs2::P64;
           Sp = Sp + 16;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cdVt8: // global
           R1 = _cdVs2::P64;
           Sp = Sp + 16;
           call io1_sdV2G_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVs0_info" {
     block_cdVs0_info:
         const _cdVs0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.938898399 UTC

[section ""data" . Control.Concurrent.Chan.readChan1_closure" {
     Control.Concurrent.Chan.readChan1_closure:
         const Control.Concurrent.Chan.readChan1_info;
 },
 Control.Concurrent.Chan.readChan1_entry() //  [R2]
         { []
         }
     {offset
       cdVud: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdVue; else goto cdVuf;
       cdVue: // global
           R2 = R2;
           R1 = Control.Concurrent.Chan.readChan1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdVuf: // global
           I64[Sp - 8] = block_cdVua_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udVuj; else goto cdVub;
       udVuj: // global
           call _cdVua(R1) args: 0, res: 0, upd: 0;
       cdVub: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.readChan1_info" {
     Control.Concurrent.Chan.readChan1_info:
         const Control.Concurrent.Chan.readChan1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cdVua() //  [R1]
         { []
         }
     {offset
       cdVua: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Control.Concurrent.Chan.$wreadChan_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVua_info" {
     block_cdVua_info:
         const _cdVua;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.944346411 UTC

[section ""data" . Control.Concurrent.Chan.readChan_closure" {
     Control.Concurrent.Chan.readChan_closure:
         const Control.Concurrent.Chan.readChan_info;
 },
 Control.Concurrent.Chan.readChan_entry() //  [R2]
         { []
         }
     {offset
       cdVux: // global
           R2 = R2;
           call Control.Concurrent.Chan.readChan1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.readChan_info" {
     Control.Concurrent.Chan.readChan_info:
         const Control.Concurrent.Chan.readChan_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.949627175 UTC

[section ""data" . Control.Concurrent.Chan.getChanContents1_closure" {
     Control.Concurrent.Chan.getChanContents1_closure:
         const Control.Concurrent.Chan.getChanContents1_info;
 },
 sat_sdV3s_entry() //  [R1]
         { []
         }
     {offset
       cdVuS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdVv0; else goto cdVv1;
       cdVv0: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdVv1: // global
           I64[Sp - 16] = block_cdVuN_info;
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdV3s_info" {
     sat_sdV3s_info:
         const sat_sdV3s_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _cdVuN() //  []
         { []
         }
     {offset
       cdVuN: // global
           _sdV3e::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdVuP_info;
           R1 = _sdV3e::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udVv8; else goto cdVuQ;
       udVv8: // global
           call _cdVuP(R1) args: 0, res: 0, upd: 0;
       cdVuQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVuN_info" {
     block_cdVuN_info:
         const _cdVuN;
         const 1;
         const 30;
 },
 _cdVuP() //  [R1]
         { []
         }
     {offset
       cdVuP: // global
           I64[Sp - 8] = block_cdVuV_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call Control.Concurrent.Chan.$wreadChan_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVuP_info" {
     block_cdVuP_info:
         const _cdVuP;
         const 0;
         const 30;
 },
 _cdVuV() //  [R1]
         { []
         }
     {offset
       cdVuV: // global
           I64[Sp] = block_cdVuX_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call Control.Concurrent.Chan.getChanContents1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVuV_info" {
     block_cdVuV_info:
         const _cdVuV;
         const 1;
         const 30;
 },
 _cdVuX() //  [R1]
         { []
         }
     {offset
       cdVuX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdVv7; else goto cdVv6;
       cdVv7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdVv6: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVuX_info" {
     block_cdVuX_info:
         const _cdVuX;
         const 1;
         const 30;
 },
 Control.Concurrent.Chan.getChanContents1_entry() //  [R2]
         { []
         }
     {offset
       cdVv9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdVvd; else goto cdVvc;
       cdVvd: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Control.Concurrent.Chan.getChanContents1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdVvc: // global
           I64[Hp - 8] = sat_sdV3s_info;
           P64[Hp] = R2;
           R2 = Hp - 7;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.getChanContents1_info" {
     Control.Concurrent.Chan.getChanContents1_info:
         const Control.Concurrent.Chan.getChanContents1_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.962319297 UTC

[section ""data" . Control.Concurrent.Chan.getChanContents_closure" {
     Control.Concurrent.Chan.getChanContents_closure:
         const Control.Concurrent.Chan.getChanContents_info;
 },
 Control.Concurrent.Chan.getChanContents_entry() //  [R2]
         { []
         }
     {offset
       cdVvG: // global
           R2 = R2;
           call Control.Concurrent.Chan.getChanContents1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.getChanContents_info" {
     Control.Concurrent.Chan.getChanContents_info:
         const Control.Concurrent.Chan.getChanContents_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.967195253 UTC

[section ""data" . Control.Concurrent.Chan.dupChan1_closure" {
     Control.Concurrent.Chan.dupChan1_closure:
         const Control.Concurrent.Chan.dupChan1_info;
 },
 Control.Concurrent.Chan.dupChan1_entry() //  [R2]
         { []
         }
     {offset
       cdVvU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdVw4; else goto cdVw5;
       cdVw4: // global
           R2 = R2;
           R1 = Control.Concurrent.Chan.dupChan1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdVw5: // global
           I64[Sp - 8] = block_cdVvR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udVwc; else goto cdVvS;
       udVwc: // global
           call _cdVvR(R1) args: 0, res: 0, upd: 0;
       cdVvS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.dupChan1_info" {
     Control.Concurrent.Chan.dupChan1_info:
         const Control.Concurrent.Chan.dupChan1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cdVvR() //  [R1]
         { []
         }
     {offset
       cdVvR: // global
           I64[Sp - 8] = block_cdVvX_info;
           _sdV3x::P64 = P64[R1 + 15];
           R1 = _sdV3x::P64;
           P64[Sp] = _sdV3x::P64;
           Sp = Sp - 8;
           call stg_readMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVvR_info" {
     block_cdVvR_info:
         const _cdVvR;
         const 0;
         const 30;
 },
 _cdVvX() //  [R1]
         { []
         }
     {offset
       cdVvX: // global
           I64[Sp - 8] = block_cdVvZ_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVvX_info" {
     block_cdVvX_info:
         const _cdVvX;
         const 1;
         const 30;
 },
 _cdVvZ() //  [R1]
         { []
         }
     {offset
       cdVvZ: // global
           I64[Sp] = block_cdVw1_info;
           R2 = P64[Sp + 8];
           _sdV3D::P64 = R1;
           R1 = R1;
           P64[Sp + 8] = _sdV3D::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVvZ_info" {
     block_cdVvZ_info:
         const _cdVvZ;
         const 2;
         const 30;
 },
 _cdVw1() //  []
         { []
         }
     {offset
       cdVw1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdVwb; else goto cdVwa;
       cdVwb: // global
           HpAlloc = 24;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdVwa: // global
           I64[Hp - 16] = Control.Concurrent.Chan.Chan_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVw1_info" {
     block_cdVw1_info:
         const _cdVw1;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.98033535 UTC

[section ""data" . Control.Concurrent.Chan.dupChan_closure" {
     Control.Concurrent.Chan.dupChan_closure:
         const Control.Concurrent.Chan.dupChan_info;
 },
 Control.Concurrent.Chan.dupChan_entry() //  [R2]
         { []
         }
     {offset
       cdVwC: // global
           R2 = R2;
           call Control.Concurrent.Chan.dupChan1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.dupChan_info" {
     Control.Concurrent.Chan.dupChan_info:
         const Control.Concurrent.Chan.dupChan_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.984987911 UTC

[section ""cstring" . Control.Concurrent.Chan.$trModule4_bytes" {
     Control.Concurrent.Chan.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.98770353 UTC

[section ""data" . Control.Concurrent.Chan.$trModule3_closure" {
     Control.Concurrent.Chan.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.Chan.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.989969102 UTC

[section ""cstring" . Control.Concurrent.Chan.$trModule2_bytes" {
     Control.Concurrent.Chan.$trModule2_bytes:
         I8[] [67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,67,104,97,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.992785135 UTC

[section ""data" . Control.Concurrent.Chan.$trModule1_closure" {
     Control.Concurrent.Chan.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.Chan.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.99556548 UTC

[section ""data" . Control.Concurrent.Chan.$trModule_closure" {
     Control.Concurrent.Chan.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Control.Concurrent.Chan.$trModule3_closure+1;
         const Control.Concurrent.Chan.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:10.998446587 UTC

[section ""data" . $krep_rdV0R_closure" {
     $krep_rdV0R_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.001154844 UTC

[section ""cstring" . Control.Concurrent.Chan.$tcChItem2_bytes" {
     Control.Concurrent.Chan.$tcChItem2_bytes:
         I8[] [67,104,73,116,101,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.003737515 UTC

[section ""data" . Control.Concurrent.Chan.$tcChItem1_closure" {
     Control.Concurrent.Chan.$tcChItem1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.Chan.$tcChItem2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.006314159 UTC

[section ""data" . Control.Concurrent.Chan.$tcChItem_closure" {
     Control.Concurrent.Chan.$tcChItem_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Concurrent.Chan.$trModule_closure+1;
         const Control.Concurrent.Chan.$tcChItem1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 6476193138296826625;
         const 14259015418390681910;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.008327666 UTC

[section ""data" . $krep1_rdV0S_closure" {
     $krep1_rdV0S_closure:
         const :_con_info;
         const $krep_rdV0R_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.010555936 UTC

[section ""data" . $krep2_rdV0T_closure" {
     $krep2_rdV0T_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Concurrent.Chan.$tcChItem_closure+1;
         const $krep1_rdV0S_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.012414691 UTC

[section ""data" . $krep3_rdV0U_closure" {
     $krep3_rdV0U_closure:
         const :_con_info;
         const $krep2_rdV0T_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.014945666 UTC

[section ""data" . $krep4_rdV0V_closure" {
     $krep4_rdV0V_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep3_rdV0U_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.016785344 UTC

[section ""data" . $krep5_rdV0W_closure" {
     $krep5_rdV0W_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rdV0V_closure+1;
         const $krep2_rdV0T_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.018512814 UTC

[section ""data" . Control.Concurrent.Chan.$tc'ChItem1_closure" {
     Control.Concurrent.Chan.$tc'ChItem1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rdV0R_closure+2;
         const $krep5_rdV0W_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.020238044 UTC

[section ""cstring" . Control.Concurrent.Chan.$tc'ChItem3_bytes" {
     Control.Concurrent.Chan.$tc'ChItem3_bytes:
         I8[] [39,67,104,73,116,101,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.021922164 UTC

[section ""data" . Control.Concurrent.Chan.$tc'ChItem2_closure" {
     Control.Concurrent.Chan.$tc'ChItem2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.Chan.$tc'ChItem3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.023754693 UTC

[section ""data" . Control.Concurrent.Chan.$tc'ChItem_closure" {
     Control.Concurrent.Chan.$tc'ChItem_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Concurrent.Chan.$trModule_closure+1;
         const Control.Concurrent.Chan.$tc'ChItem2_closure+1;
         const Control.Concurrent.Chan.$tc'ChItem1_closure+4;
         const 10690021181819663847;
         const 14453345100680315478;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.025754966 UTC

[section ""data" . $krep6_rdV0X_closure" {
     $krep6_rdV0X_closure:
         const :_con_info;
         const $krep4_rdV0V_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.027681251 UTC

[section ""data" . $krep7_rdV0Y_closure" {
     $krep7_rdV0Y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep6_rdV0X_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.029730183 UTC

[section ""cstring" . Control.Concurrent.Chan.$tcChan2_bytes" {
     Control.Concurrent.Chan.$tcChan2_bytes:
         I8[] [67,104,97,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.031841962 UTC

[section ""data" . Control.Concurrent.Chan.$tcChan1_closure" {
     Control.Concurrent.Chan.$tcChan1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.Chan.$tcChan2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.033665105 UTC

[section ""data" . Control.Concurrent.Chan.$tcChan_closure" {
     Control.Concurrent.Chan.$tcChan_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Concurrent.Chan.$trModule_closure+1;
         const Control.Concurrent.Chan.$tcChan1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 8939098401262630739;
         const 12846644923708574499;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.035897774 UTC

[section ""data" . $krep8_rdV0Z_closure" {
     $krep8_rdV0Z_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Concurrent.Chan.$tcChan_closure+1;
         const $krep1_rdV0S_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.038016119 UTC

[section ""data" . $krep9_rdV10_closure" {
     $krep9_rdV10_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rdV0Y_closure+1;
         const $krep8_rdV0Z_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.040902857 UTC

[section ""data" . Control.Concurrent.Chan.$tc'Chan1_closure" {
     Control.Concurrent.Chan.$tc'Chan1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rdV0Y_closure+1;
         const $krep9_rdV10_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.04376083 UTC

[section ""cstring" . Control.Concurrent.Chan.$tc'Chan3_bytes" {
     Control.Concurrent.Chan.$tc'Chan3_bytes:
         I8[] [39,67,104,97,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.045719095 UTC

[section ""data" . Control.Concurrent.Chan.$tc'Chan2_closure" {
     Control.Concurrent.Chan.$tc'Chan2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.Chan.$tc'Chan3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.047558866 UTC

[section ""data" . Control.Concurrent.Chan.$tc'Chan_closure" {
     Control.Concurrent.Chan.$tc'Chan_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Concurrent.Chan.$trModule_closure+1;
         const Control.Concurrent.Chan.$tc'Chan2_closure+1;
         const Control.Concurrent.Chan.$tc'Chan1_closure+4;
         const 735828590425899369;
         const 13090399282914560069;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.050294947 UTC

[section ""data" . Control.Concurrent.Chan.ChItem_closure" {
     Control.Concurrent.Chan.ChItem_closure:
         const Control.Concurrent.Chan.ChItem_info;
 },
 Control.Concurrent.Chan.ChItem_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVxh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdVxl; else goto cdVxk;
       cdVxl: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.ChItem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVxk: // global
           I64[Hp - 16] = Control.Concurrent.Chan.ChItem_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.ChItem_info" {
     Control.Concurrent.Chan.ChItem_info:
         const Control.Concurrent.Chan.ChItem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.054574357 UTC

[section ""data" . Control.Concurrent.Chan.Chan_closure" {
     Control.Concurrent.Chan.Chan_closure:
         const Control.Concurrent.Chan.Chan_info;
 },
 Control.Concurrent.Chan.Chan_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVxw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdVxA; else goto cdVxz;
       cdVxA: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.Chan_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVxz: // global
           I64[Hp - 16] = Control.Concurrent.Chan.Chan_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.Chan_info" {
     Control.Concurrent.Chan.Chan_info:
         const Control.Concurrent.Chan.Chan_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.058733962 UTC

[section ""cstring" . idVk2_str" {
     idVk2_str:
         I8[] [98,97,115,101,58,67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,67,104,97,110,46,67,104,73,116,101,109]
 },
 Control.Concurrent.Chan.ChItem_con_entry() //  [R1]
         { []
         }
     {offset
       cdVxG: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.ChItem_con_info" {
     Control.Concurrent.Chan.ChItem_con_info:
         const Control.Concurrent.Chan.ChItem_con_entry;
         const 2;
         const 4;
         const idVk2_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.062775979 UTC

[section ""cstring" . idVk4_str" {
     idVk4_str:
         I8[] [98,97,115,101,58,67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,67,104,97,110,46,67,104,97,110]
 },
 Control.Concurrent.Chan.Chan_con_entry() //  [R1]
         { []
         }
     {offset
       cdVxM: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.Chan_con_info" {
     Control.Concurrent.Chan.Chan_con_info:
         const Control.Concurrent.Chan.Chan_con_entry;
         const 2;
         const 4;
         const idVk4_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.066723419 UTC

[section ""relreadonly" . SdVbR_srt" { SdVbR_srt:
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.594290123 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:09:11.59706121 UTC

[section ""data" . Control.Concurrent.Chan.$WChItem_closure" {
     Control.Concurrent.Chan.$WChItem_closure:
         const Control.Concurrent.Chan.$WChItem_info;
 },
 Control.Concurrent.Chan.$WChItem_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVAE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdVAI; else goto cdVAJ;
       cdVAI: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.$WChItem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVAJ: // global
           I64[Sp - 16] = block_cdVAB_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udVAN; else goto cdVAC;
       udVAN: // global
           call _cdVAB(R1) args: 0, res: 0, upd: 0;
       cdVAC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.$WChItem_info" {
     Control.Concurrent.Chan.$WChItem_info:
         const Control.Concurrent.Chan.$WChItem_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdVAB() //  [R1]
         { []
         }
     {offset
       cdVAB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdVAM; else goto cdVAL;
       cdVAM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdVAL: // global
           _sdVxW::P64 = P64[R1 + 7];
           I64[Hp - 16] = Control.Concurrent.Chan.ChItem_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sdVxW::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVAB_info" {
     block_cdVAB_info:
         const _cdVAB;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.604224253 UTC

[section ""data" . Control.Concurrent.Chan.$WChan_closure" {
     Control.Concurrent.Chan.$WChan_closure:
         const Control.Concurrent.Chan.$WChan_info;
 },
 Control.Concurrent.Chan.$WChan_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVB8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdVBh; else goto cdVBi;
       cdVBh: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.$WChan_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVBi: // global
           I64[Sp - 16] = block_cdVB5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udVBo; else goto cdVB6;
       udVBo: // global
           call _cdVB5(R1) args: 0, res: 0, upd: 0;
       cdVB6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.$WChan_info" {
     Control.Concurrent.Chan.$WChan_info:
         const Control.Concurrent.Chan.$WChan_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdVB5() //  [R1]
         { []
         }
     {offset
       cdVB5: // global
           I64[Sp] = block_cdVBb_info;
           _sdVy0::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sdVy0::P64;
           if (R1 & 7 != 0) goto udVBn; else goto cdVBc;
       udVBn: // global
           call _cdVBb(R1) args: 0, res: 0, upd: 0;
       cdVBc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVB5_info" {
     block_cdVB5_info:
         const _cdVB5;
         const 1;
         const 30;
 },
 _cdVBb() //  [R1]
         { []
         }
     {offset
       cdVBb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdVBm; else goto cdVBl;
       cdVBm: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdVBl: // global
           _sdVy2::P64 = P64[R1 + 7];
           I64[Hp - 16] = Control.Concurrent.Chan.Chan_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sdVy2::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVBb_info" {
     block_cdVBb_info:
         const _cdVBb;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.614028834 UTC

[section ""data" . Control.Concurrent.Chan.$fEqChan_$c==_closure" {
     Control.Concurrent.Chan.$fEqChan_$c==_closure:
         const Control.Concurrent.Chan.$fEqChan_$c==_info;
 },
 Control.Concurrent.Chan.$fEqChan_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVBO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdVBS; else goto cdVBT;
       cdVBS: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.$fEqChan_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVBT: // global
           I64[Sp - 16] = block_cdVBL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udVCh; else goto cdVBM;
       udVCh: // global
           call _cdVBL(R1) args: 0, res: 0, upd: 0;
       cdVBM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.$fEqChan_$c==_info" {
     Control.Concurrent.Chan.$fEqChan_$c==_info:
         const Control.Concurrent.Chan.$fEqChan_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdVBL() //  [R1]
         { []
         }
     {offset
       cdVBL: // global
           I64[Sp - 8] = block_cdVBR_info;
           _sdVy6::P64 = P64[R1 + 7];
           _sdVy7::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sdVy7::P64;
           P64[Sp + 8] = _sdVy6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udVCg; else goto cdVBV;
       udVCg: // global
           call _cdVBR(R1) args: 0, res: 0, upd: 0;
       cdVBV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVBL_info" {
     block_cdVBL_info:
         const _cdVBL;
         const 1;
         const 30;
 },
 _cdVBR() //  [R1]
         { []
         }
     {offset
       cdVBR: // global
           if (P64[Sp + 16] == P64[R1 + 7]) goto cdVCb; else goto cdVC5;
       cdVCb: // global
           R1 = I64[((P64[Sp + 8] == P64[R1 + 15]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdVC5: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVBR_info" {
     block_cdVBR_info:
         const _cdVBR;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.62466263 UTC

[section ""data" . Control.Concurrent.Chan.$fEqChan_$c/=_closure" {
     Control.Concurrent.Chan.$fEqChan_$c/=_closure:
         const Control.Concurrent.Chan.$fEqChan_$c/=_info;
 },
 Control.Concurrent.Chan.$fEqChan_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVCM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdVCQ; else goto cdVCR;
       cdVCQ: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.$fEqChan_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVCR: // global
           I64[Sp - 16] = block_cdVCJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udVDt; else goto cdVCK;
       udVDt: // global
           call _cdVCJ(R1) args: 0, res: 0, upd: 0;
       cdVCK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.$fEqChan_$c/=_info" {
     Control.Concurrent.Chan.$fEqChan_$c/=_info:
         const Control.Concurrent.Chan.$fEqChan_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdVCJ() //  [R1]
         { []
         }
     {offset
       cdVCJ: // global
           I64[Sp - 8] = block_cdVCP_info;
           _sdVyg::P64 = P64[R1 + 7];
           _sdVyh::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sdVyh::P64;
           P64[Sp + 8] = _sdVyg::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udVDs; else goto cdVCT;
       udVDs: // global
           call _cdVCP(R1) args: 0, res: 0, upd: 0;
       cdVCT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVCJ_info" {
     block_cdVCJ_info:
         const _cdVCJ;
         const 1;
         const 30;
 },
 _cdVCP() //  [R1]
         { []
         }
     {offset
       cdVCP: // global
           if (P64[Sp + 16] != P64[R1 + 7]) goto cdVDi; else goto cdVD9;
       cdVD9: // global
           if (P64[Sp + 8] != P64[R1 + 15]) goto cdVDi; else goto cdVDo;
       cdVDi: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdVDo: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVCP_info" {
     block_cdVCP_info:
         const _cdVCP;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.634924773 UTC

[section ""data" . Control.Concurrent.Chan.$fEqChan_closure" {
     Control.Concurrent.Chan.$fEqChan_closure:
         const GHC.Classes.C:Eq_con_info;
         const Control.Concurrent.Chan.$fEqChan_$c==_closure+2;
         const Control.Concurrent.Chan.$fEqChan_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.640519868 UTC

[section ""data" . Control.Concurrent.Chan.newChan1_closure" {
     Control.Concurrent.Chan.newChan1_closure:
         const Control.Concurrent.Chan.newChan1_info;
 },
 Control.Concurrent.Chan.newChan1_entry() //  []
         { []
         }
     {offset
       cdVE6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdVE7; else goto cdVE8;
       cdVE7: // global
           R1 = Control.Concurrent.Chan.newChan1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdVE8: // global
           I64[Sp - 8] = block_cdVDU_info;
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.newChan1_info" {
     Control.Concurrent.Chan.newChan1_info:
         const Control.Concurrent.Chan.newChan1_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _cdVDU() //  [R1]
         { []
         }
     {offset
       cdVDU: // global
           I64[Sp - 8] = block_cdVDW_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVDU_info" {
     block_cdVDU_info:
         const _cdVDU;
         const 0;
         const 30;
 },
 _cdVDW() //  [R1]
         { []
         }
     {offset
       cdVDW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdVEc; else goto cdVEb;
       cdVEc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdVEb: // global
           I64[Hp - 8] = GHC.MVar.MVar_con_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_cdVDZ_info;
           _cdVDY::P64 = Hp - 7;
           R2 = _cdVDY::P64;
           _sdVyt::P64 = R1;
           R1 = R1;
           P64[Sp] = _sdVyt::P64;
           P64[Sp + 8] = _cdVDY::P64;
           Sp = Sp - 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVDW_info" {
     block_cdVDW_info:
         const _cdVDW;
         const 1;
         const 30;
 },
 _cdVDZ() //  []
         { []
         }
     {offset
       cdVDZ: // global
           I64[Sp] = block_cdVE1_info;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVDZ_info" {
     block_cdVDZ_info:
         const _cdVDZ;
         const 2;
         const 30;
 },
 _cdVE1() //  [R1]
         { []
         }
     {offset
       cdVE1: // global
           I64[Sp] = block_cdVE3_info;
           R2 = P64[Sp + 16];
           _sdVyy::P64 = R1;
           R1 = R1;
           P64[Sp + 16] = _sdVyy::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVE1_info" {
     block_cdVE1_info:
         const _cdVE1;
         const 2;
         const 30;
 },
 _cdVE3() //  []
         { []
         }
     {offset
       cdVE3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdVEh; else goto cdVEg;
       cdVEh: // global
           HpAlloc = 24;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdVEg: // global
           I64[Hp - 16] = Control.Concurrent.Chan.Chan_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVE3_info" {
     block_cdVE3_info:
         const _cdVE3;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.657969866 UTC

[section ""data" . Control.Concurrent.Chan.newChan_closure" {
     Control.Concurrent.Chan.newChan_closure:
         const Control.Concurrent.Chan.newChan_info;
 },
 Control.Concurrent.Chan.newChan_entry() //  []
         { []
         }
     {offset
       cdVER: // global
           call Control.Concurrent.Chan.newChan1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.newChan_info" {
     Control.Concurrent.Chan.newChan_info:
         const Control.Concurrent.Chan.newChan_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.67051548 UTC

[section ""data" . Control.Concurrent.Chan.$wwriteChan_closure" {
     Control.Concurrent.Chan.$wwriteChan_closure:
         const Control.Concurrent.Chan.$wwriteChan_info;
 },
 sat_sdVz5_entry() //  [R1]
         { []
         }
     {offset
       cdVFj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdVFr; else goto cdVFs;
       cdVFr: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdVFs: // global
           I64[Sp - 32] = block_cdVFe_info;
           _sdVyC::P64 = P64[R1 + 7];
           _sdVyD::P64 = P64[R1 + 15];
           _sdVyH::P64 = P64[R1 + 23];
           R1 = _sdVyC::P64;
           P64[Sp - 24] = _sdVyC::P64;
           P64[Sp - 16] = _sdVyD::P64;
           P64[Sp - 8] = _sdVyH::P64;
           Sp = Sp - 32;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdVz5_info" {
     sat_sdVz5_info:
         const sat_sdVz5_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _cdVFe() //  [R1]
         { []
         }
     {offset
       cdVFe: // global
           I64[Sp] = block_cdVFg_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udVFC; else goto cdVFh;
       udVFC: // global
           call _cdVFg(R1) args: 0, res: 0, upd: 0;
       cdVFh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVFe_info" {
     block_cdVFe_info:
         const _cdVFe;
         const 3;
         const 30;
 },
 _cdVFg() //  [R1]
         { []
         }
     {offset
       cdVFg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdVFw; else goto cdVFv;
       cdVFw: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdVFv: // global
           _sdVz0::P64 = P64[R1 + 7];
           I64[Hp - 16] = Control.Concurrent.Chan.ChItem_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_cdVFn_info;
           R2 = Hp - 15;
           R1 = _sdVz0::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVFg_info" {
     block_cdVFg_info:
         const _cdVFg;
         const 3;
         const 30;
 },
 _cdVFn() //  []
         { []
         }
     {offset
       cdVFn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdVFz; else goto cdVFy;
       cdVFz: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdVFy: // global
           I64[Hp - 8] = GHC.MVar.MVar_con_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_cdVFq_info;
           R2 = Hp - 7;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVFn_info" {
     block_cdVFn_info:
         const _cdVFn;
         const 131;
         const 30;
 },
 _cdVFq() //  []
         { []
         }
     {offset
       cdVFq: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVFq_info" {
     block_cdVFq_info:
         const _cdVFq;
         const 0;
         const 30;
 },
 Control.Concurrent.Chan.$wwriteChan_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdVFG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdVFH; else goto cdVFI;
       cdVFH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.$wwriteChan_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVFI: // global
           I64[Sp - 24] = block_cdVF2_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.$wwriteChan_info" {
     Control.Concurrent.Chan.$wwriteChan_info:
         const Control.Concurrent.Chan.$wwriteChan_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _cdVF2() //  [R1]
         { []
         }
     {offset
       cdVF2: // global
           I64[Sp - 8] = block_cdVF4_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVF2_info" {
     block_cdVF2_info:
         const _cdVF2;
         const 2;
         const 30;
 },
 _cdVF4() //  [R1]
         { []
         }
     {offset
       cdVF4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdVFM; else goto cdVFL;
       cdVFM: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdVFL: // global
           _sdVyC::P64 = P64[Sp + 16];
           if (R1 == 0) goto cdVFF; else goto cdVFE;
       cdVFF: // global
           I64[Hp - 24] = sat_sdVz5_info;
           P64[Hp - 16] = _sdVyC::P64;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cdVFE: // global
           Hp = Hp - 32;
           I64[Sp] = block_cdVFN_info;
           R1 = _sdVyC::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVF4_info" {
     block_cdVF4_info:
         const _cdVF4;
         const 3;
         const 30;
 },
 _cdVFN() //  [R1]
         { []
         }
     {offset
       cdVFN: // global
           I64[Sp] = block_cdVFP_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udVG8; else goto cdVFQ;
       udVG8: // global
           call _cdVFP(R1) args: 0, res: 0, upd: 0;
       cdVFQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVFN_info" {
     block_cdVFN_info:
         const _cdVFN;
         const 3;
         const 30;
 },
 _cdVFP() //  [R1]
         { []
         }
     {offset
       cdVFP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdVG2; else goto cdVG1;
       cdVG2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdVG1: // global
           _sdVyQ::P64 = P64[R1 + 7];
           I64[Hp - 16] = Control.Concurrent.Chan.ChItem_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp] = block_cdVFV_info;
           R2 = Hp - 15;
           R1 = _sdVyQ::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVFP_info" {
     block_cdVFP_info:
         const _cdVFP;
         const 3;
         const 30;
 },
 _cdVFV() //  []
         { []
         }
     {offset
       cdVFV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdVG5; else goto cdVG4;
       cdVG5: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdVG4: // global
           I64[Hp - 8] = GHC.MVar.MVar_con_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 24] = block_cdVFY_info;
           R2 = Hp - 7;
           R1 = P64[Sp + 16];
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVFV_info" {
     block_cdVFV_info:
         const _cdVFV;
         const 259;
         const 30;
 },
 _cdVFY() //  []
         { []
         }
     {offset
       cdVFY: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVFY_info" {
     block_cdVFY_info:
         const _cdVFY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.70870315 UTC

[section ""data" . Control.Concurrent.Chan.writeChan1_closure" {
     Control.Concurrent.Chan.writeChan1_closure:
         const Control.Concurrent.Chan.writeChan1_info;
 },
 Control.Concurrent.Chan.writeChan1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVHm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdVHn; else goto cdVHo;
       cdVHn: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.writeChan1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVHo: // global
           I64[Sp - 16] = block_cdVHj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udVHs; else goto cdVHk;
       udVHs: // global
           call _cdVHj(R1) args: 0, res: 0, upd: 0;
       cdVHk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.writeChan1_info" {
     Control.Concurrent.Chan.writeChan1_info:
         const Control.Concurrent.Chan.writeChan1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cdVHj() //  [R1]
         { []
         }
     {offset
       cdVHj: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call Control.Concurrent.Chan.$wwriteChan_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVHj_info" {
     block_cdVHj_info:
         const _cdVHj;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.717045871 UTC

[section ""data" . Control.Concurrent.Chan.writeChan_closure" {
     Control.Concurrent.Chan.writeChan_closure:
         const Control.Concurrent.Chan.writeChan_info;
 },
 Control.Concurrent.Chan.writeChan_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVHH: // global
           R3 = R3;
           R2 = R2;
           call Control.Concurrent.Chan.writeChan1_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.writeChan_info" {
     Control.Concurrent.Chan.writeChan_info:
         const Control.Concurrent.Chan.writeChan_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.72382863 UTC

[section ""data" . Control.Concurrent.Chan.writeList2Chan1_closure" {
     Control.Concurrent.Chan.writeList2Chan1_closure:
         const Control.Concurrent.Chan.writeList2Chan1_info;
 },
 Control.Concurrent.Chan.writeList2Chan1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVHU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdVHV; else goto cdVHW;
       cdVHV: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.writeList2Chan1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVHW: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cdVHY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.writeList2Chan1_info" {
     Control.Concurrent.Chan.writeList2Chan1_info:
         const Control.Concurrent.Chan.writeList2Chan1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cdVHY() //  []
         { []
         }
     {offset
       cdVHY: // global
           I64[Sp - 8] = block_cdVI0_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udVIq; else goto cdVI2;
       udVIq: // global
           call _cdVI0(R1) args: 0, res: 0, upd: 0;
       cdVI2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdVI0() //  [R1]
         { []
         }
     {offset
       cdVI0: // global
           if (R1 & 7 == 1) goto cdVI8; else goto cdVId;
       cdVI8: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdVId: // global
           I64[Sp - 8] = block_cdVIb_info;
           _sdVzj::P64 = P64[R1 + 6];
           _sdVzk::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _sdVzk::P64;
           P64[Sp + 16] = _sdVzj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udVIr; else goto cdVIe;
       udVIr: // global
           call _cdVIb(R1) args: 0, res: 0, upd: 0;
       cdVIe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVI0_info" {
     block_cdVI0_info:
         const _cdVI0;
         const 130;
         const 30;
 },
 _cdVIb() //  [R1]
         { []
         }
     {offset
       cdVIb: // global
           I64[Sp] = block_cdVIi_info;
           R4 = P64[Sp + 24];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call Control.Concurrent.Chan.$wwriteChan_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVIb_info" {
     block_cdVIb_info:
         const _cdVIb;
         const 3;
         const 30;
 },
 _cdVIi() //  []
         { []
         }
     {offset
       cdVIi: // global
           P64[Sp + 24] = P64[Sp + 8];
           Sp = Sp + 16;
           call _cdVHY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdVIi_info" {
     block_cdVIi_info:
         const _cdVIi;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.735708346 UTC

[section ""data" . Control.Concurrent.Chan.writeList2Chan_closure" {
     Control.Concurrent.Chan.writeList2Chan_closure:
         const Control.Concurrent.Chan.writeList2Chan_info;
 },
 Control.Concurrent.Chan.writeList2Chan_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVIX: // global
           R3 = R3;
           R2 = R2;
           call Control.Concurrent.Chan.writeList2Chan1_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.writeList2Chan_info" {
     Control.Concurrent.Chan.writeList2Chan_info:
         const Control.Concurrent.Chan.writeList2Chan_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.748952693 UTC

[section ""data" . Control.Concurrent.Chan.$wreadChan_closure" {
     Control.Concurrent.Chan.$wreadChan_closure:
         const Control.Concurrent.Chan.$wreadChan_info;
 },
 sat_sdVzR_entry() //  [R1, R2]
         { []
         }
     {offset
       cdVJo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdVJp; else goto cdVJq;
       cdVJp: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdVJq: // global
           I64[Sp - 16] = block_cdVJm_info;
           _sdVzO::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sdVzO::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdVzR_info" {
     sat_sdVzR_info:
         const sat_sdVzR_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cdVJm() //  []
         { []
         }
     {offset
       cdVJm: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVJm_info" {
     block_cdVJm_info:
         const _cdVJm;
         const 1;
         const 30;
 },
 sat_sdVzN_entry() //  [R1]
         { []
         }
     {offset
       cdVJA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdVJM; else goto cdVJN;
       cdVJM: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdVJN: // global
           I64[Sp - 8] = block_cdVJx_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udVJT; else goto cdVJy;
       udVJT: // global
           call _cdVJx(R1) args: 0, res: 0, upd: 0;
       cdVJy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdVzN_info" {
     sat_sdVzN_info:
         const sat_sdVzN_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _cdVJx() //  [R1]
         { []
         }
     {offset
       cdVJx: // global
           I64[Sp] = block_cdVJD_info;
           R1 = P64[R1 + 7];
           call stg_readMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVJx_info" {
     block_cdVJx_info:
         const _cdVJx;
         const 0;
         const 30;
 },
 _cdVJD() //  [R1]
         { []
         }
     {offset
       cdVJD: // global
           I64[Sp] = block_cdVJF_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udVJU; else goto cdVJG;
       udVJU: // global
           call _cdVJF(R1) args: 0, res: 0, upd: 0;
       cdVJG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVJD_info" {
     block_cdVJD_info:
         const _cdVJD;
         const 0;
         const 30;
 },
 _cdVJF() //  [R1]
         { []
         }
     {offset
       cdVJF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdVJS; else goto cdVJR;
       cdVJS: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdVJR: // global
           _sdVzJ::P64 = P64[R1 + 7];
           _sdVzK::P64 = P64[R1 + 15];
           I64[Hp - 32] = GHC.MVar.MVar_con_info;
           P64[Hp - 24] = _sdVzK::P64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _sdVzJ::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVJF_info" {
     block_cdVJF_info:
         const _cdVJF;
         const 0;
         const 30;
 },
 io1_sdVzx_entry() //  [R1]
         { []
         }
     {offset
       cdVK0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdVK4; else goto cdVK5;
       cdVK4: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdVK5: // global
           I64[Sp - 16] = block_cdVJf_info;
           _sdVzr::P64 = P64[R1 + 7];
           R1 = _sdVzr::P64;
           P64[Sp - 8] = _sdVzr::P64;
           Sp = Sp - 16;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io1_sdVzx_info" {
     io1_sdVzx_info:
         const io1_sdVzx_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _cdVJf() //  [R1]
         { []
         }
     {offset
       cdVJf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdVK8; else goto cdVK7;
       cdVK8: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdVK7: // global
           I64[Hp - 32] = sat_sdVzR_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sdVzN_info;
           P64[Hp] = R1;
           I64[Sp] = block_cdVJV_info;
           R2 = Hp - 30;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVJf_info" {
     block_cdVJf_info:
         const _cdVJf;
         const 1;
         const 30;
 },
 _cdVJV() //  [R1]
         { []
         }
     {offset
       cdVJV: // global
           I64[Sp] = block_cdVJX_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udVKd; else goto cdVJY;
       udVKd: // global
           call _cdVJX(R1) args: 0, res: 0, upd: 0;
       cdVJY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVJV_info" {
     block_cdVJV_info:
         const _cdVJV;
         const 1;
         const 30;
 },
 _cdVJX() //  [R1]
         { []
         }
     {offset
       cdVJX: // global
           I64[Sp] = block_cdVK3_info;
           R2 = P64[R1 + 7];
           _sdVzX::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sdVzX::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVJX_info" {
     block_cdVJX_info:
         const _cdVJX;
         const 1;
         const 30;
 },
 _cdVK3() //  []
         { []
         }
     {offset
       cdVK3: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVK3_info" {
     block_cdVK3_info:
         const _cdVK3;
         const 1;
         const 30;
 },
 Control.Concurrent.Chan.$wreadChan_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVKi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdVKj; else goto cdVKk;
       cdVKj: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.$wreadChan_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVKk: // global
           I64[Sp - 16] = block_cdVJ8_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.$wreadChan_info" {
     Control.Concurrent.Chan.$wreadChan_info:
         const Control.Concurrent.Chan.$wreadChan_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cdVJ8() //  [R1]
         { []
         }
     {offset
       cdVJ8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdVKn; else goto cdVKm;
       cdVKn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdVKm: // global
           I64[Hp - 8] = io1_sdVzx_info;
           P64[Hp] = P64[Sp + 8];
           _cdVJa::P64 = Hp - 7;
           if (R1 == 0) goto cdVKh; else goto cdVKg;
       cdVKh: // global
           R1 = _cdVJa::P64;
           Sp = Sp + 16;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cdVKg: // global
           R1 = _cdVJa::P64;
           Sp = Sp + 16;
           call io1_sdVzx_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVJ8_info" {
     block_cdVJ8_info:
         const _cdVJ8;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.785866723 UTC

[section ""data" . Control.Concurrent.Chan.readChan1_closure" {
     Control.Concurrent.Chan.readChan1_closure:
         const Control.Concurrent.Chan.readChan1_info;
 },
 Control.Concurrent.Chan.readChan1_entry() //  [R2]
         { []
         }
     {offset
       cdVLz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdVLA; else goto cdVLB;
       cdVLA: // global
           R2 = R2;
           R1 = Control.Concurrent.Chan.readChan1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdVLB: // global
           I64[Sp - 8] = block_cdVLw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udVLF; else goto cdVLx;
       udVLF: // global
           call _cdVLw(R1) args: 0, res: 0, upd: 0;
       cdVLx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.readChan1_info" {
     Control.Concurrent.Chan.readChan1_info:
         const Control.Concurrent.Chan.readChan1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cdVLw() //  [R1]
         { []
         }
     {offset
       cdVLw: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Control.Concurrent.Chan.$wreadChan_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVLw_info" {
     block_cdVLw_info:
         const _cdVLw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.791489913 UTC

[section ""data" . Control.Concurrent.Chan.readChan_closure" {
     Control.Concurrent.Chan.readChan_closure:
         const Control.Concurrent.Chan.readChan_info;
 },
 Control.Concurrent.Chan.readChan_entry() //  [R2]
         { []
         }
     {offset
       cdVLU: // global
           R2 = R2;
           call Control.Concurrent.Chan.readChan1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.readChan_info" {
     Control.Concurrent.Chan.readChan_info:
         const Control.Concurrent.Chan.readChan_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.799080841 UTC

[section ""data" . Control.Concurrent.Chan.getChanContents1_closure" {
     Control.Concurrent.Chan.getChanContents1_closure:
         const Control.Concurrent.Chan.getChanContents1_info;
 },
 sat_sdVAj_entry() //  [R1]
         { []
         }
     {offset
       cdVMf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdVMn; else goto cdVMo;
       cdVMn: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdVMo: // global
           I64[Sp - 16] = block_cdVMa_info;
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdVAj_info" {
     sat_sdVAj_info:
         const sat_sdVAj_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _cdVMa() //  []
         { []
         }
     {offset
       cdVMa: // global
           _sdVA5::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdVMc_info;
           R1 = _sdVA5::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udVMv; else goto cdVMd;
       udVMv: // global
           call _cdVMc(R1) args: 0, res: 0, upd: 0;
       cdVMd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVMa_info" {
     block_cdVMa_info:
         const _cdVMa;
         const 1;
         const 30;
 },
 _cdVMc() //  [R1]
         { []
         }
     {offset
       cdVMc: // global
           I64[Sp - 8] = block_cdVMi_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call Control.Concurrent.Chan.$wreadChan_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVMc_info" {
     block_cdVMc_info:
         const _cdVMc;
         const 0;
         const 30;
 },
 _cdVMi() //  [R1]
         { []
         }
     {offset
       cdVMi: // global
           I64[Sp] = block_cdVMk_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call Control.Concurrent.Chan.getChanContents1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVMi_info" {
     block_cdVMi_info:
         const _cdVMi;
         const 1;
         const 30;
 },
 _cdVMk() //  [R1]
         { []
         }
     {offset
       cdVMk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdVMu; else goto cdVMt;
       cdVMu: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdVMt: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVMk_info" {
     block_cdVMk_info:
         const _cdVMk;
         const 1;
         const 30;
 },
 Control.Concurrent.Chan.getChanContents1_entry() //  [R2]
         { []
         }
     {offset
       cdVMw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdVMA; else goto cdVMz;
       cdVMA: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Control.Concurrent.Chan.getChanContents1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdVMz: // global
           I64[Hp - 8] = sat_sdVAj_info;
           P64[Hp] = R2;
           R2 = Hp - 7;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.getChanContents1_info" {
     Control.Concurrent.Chan.getChanContents1_info:
         const Control.Concurrent.Chan.getChanContents1_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.813991383 UTC

[section ""data" . Control.Concurrent.Chan.getChanContents_closure" {
     Control.Concurrent.Chan.getChanContents_closure:
         const Control.Concurrent.Chan.getChanContents_info;
 },
 Control.Concurrent.Chan.getChanContents_entry() //  [R2]
         { []
         }
     {offset
       cdVN9: // global
           R2 = R2;
           call Control.Concurrent.Chan.getChanContents1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.getChanContents_info" {
     Control.Concurrent.Chan.getChanContents_info:
         const Control.Concurrent.Chan.getChanContents_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.818757876 UTC

[section ""data" . Control.Concurrent.Chan.dupChan1_closure" {
     Control.Concurrent.Chan.dupChan1_closure:
         const Control.Concurrent.Chan.dupChan1_info;
 },
 Control.Concurrent.Chan.dupChan1_entry() //  [R2]
         { []
         }
     {offset
       cdVNn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdVNx; else goto cdVNy;
       cdVNx: // global
           R2 = R2;
           R1 = Control.Concurrent.Chan.dupChan1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdVNy: // global
           I64[Sp - 8] = block_cdVNk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udVNF; else goto cdVNl;
       udVNF: // global
           call _cdVNk(R1) args: 0, res: 0, upd: 0;
       cdVNl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.dupChan1_info" {
     Control.Concurrent.Chan.dupChan1_info:
         const Control.Concurrent.Chan.dupChan1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cdVNk() //  [R1]
         { []
         }
     {offset
       cdVNk: // global
           I64[Sp - 8] = block_cdVNq_info;
           _sdVAo::P64 = P64[R1 + 15];
           R1 = _sdVAo::P64;
           P64[Sp] = _sdVAo::P64;
           Sp = Sp - 8;
           call stg_readMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVNk_info" {
     block_cdVNk_info:
         const _cdVNk;
         const 0;
         const 30;
 },
 _cdVNq() //  [R1]
         { []
         }
     {offset
       cdVNq: // global
           I64[Sp - 8] = block_cdVNs_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVNq_info" {
     block_cdVNq_info:
         const _cdVNq;
         const 1;
         const 30;
 },
 _cdVNs() //  [R1]
         { []
         }
     {offset
       cdVNs: // global
           I64[Sp] = block_cdVNu_info;
           R2 = P64[Sp + 8];
           _sdVAu::P64 = R1;
           R1 = R1;
           P64[Sp + 8] = _sdVAu::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVNs_info" {
     block_cdVNs_info:
         const _cdVNs;
         const 2;
         const 30;
 },
 _cdVNu() //  []
         { []
         }
     {offset
       cdVNu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdVNE; else goto cdVND;
       cdVNE: // global
           HpAlloc = 24;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdVND: // global
           I64[Hp - 16] = Control.Concurrent.Chan.Chan_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdVNu_info" {
     block_cdVNu_info:
         const _cdVNu;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.829275764 UTC

[section ""data" . Control.Concurrent.Chan.dupChan_closure" {
     Control.Concurrent.Chan.dupChan_closure:
         const Control.Concurrent.Chan.dupChan_info;
 },
 Control.Concurrent.Chan.dupChan_entry() //  [R2]
         { []
         }
     {offset
       cdVOa: // global
           R2 = R2;
           call Control.Concurrent.Chan.dupChan1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.dupChan_info" {
     Control.Concurrent.Chan.dupChan_info:
         const Control.Concurrent.Chan.dupChan_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.832449659 UTC

[section ""cstring" . Control.Concurrent.Chan.$trModule4_bytes" {
     Control.Concurrent.Chan.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.834230309 UTC

[section ""data" . Control.Concurrent.Chan.$trModule3_closure" {
     Control.Concurrent.Chan.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.Chan.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.836040019 UTC

[section ""cstring" . Control.Concurrent.Chan.$trModule2_bytes" {
     Control.Concurrent.Chan.$trModule2_bytes:
         I8[] [67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,67,104,97,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.838329137 UTC

[section ""data" . Control.Concurrent.Chan.$trModule1_closure" {
     Control.Concurrent.Chan.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.Chan.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.840753206 UTC

[section ""data" . Control.Concurrent.Chan.$trModule_closure" {
     Control.Concurrent.Chan.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Control.Concurrent.Chan.$trModule3_closure+1;
         const Control.Concurrent.Chan.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.842588955 UTC

[section ""data" . $krep_rdV0R_closure" {
     $krep_rdV0R_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.844258229 UTC

[section ""cstring" . Control.Concurrent.Chan.$tcChItem2_bytes" {
     Control.Concurrent.Chan.$tcChItem2_bytes:
         I8[] [67,104,73,116,101,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.845973719 UTC

[section ""data" . Control.Concurrent.Chan.$tcChItem1_closure" {
     Control.Concurrent.Chan.$tcChItem1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.Chan.$tcChItem2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.847764027 UTC

[section ""data" . Control.Concurrent.Chan.$tcChItem_closure" {
     Control.Concurrent.Chan.$tcChItem_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Concurrent.Chan.$trModule_closure+1;
         const Control.Concurrent.Chan.$tcChItem1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 6476193138296826625;
         const 14259015418390681910;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.849726325 UTC

[section ""data" . $krep1_rdV0S_closure" {
     $krep1_rdV0S_closure:
         const :_con_info;
         const $krep_rdV0R_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.851586595 UTC

[section ""data" . $krep2_rdV0T_closure" {
     $krep2_rdV0T_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Concurrent.Chan.$tcChItem_closure+1;
         const $krep1_rdV0S_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.853510097 UTC

[section ""data" . $krep3_rdV0U_closure" {
     $krep3_rdV0U_closure:
         const :_con_info;
         const $krep2_rdV0T_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.855342473 UTC

[section ""data" . $krep4_rdV0V_closure" {
     $krep4_rdV0V_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep3_rdV0U_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.857186504 UTC

[section ""data" . $krep5_rdV0W_closure" {
     $krep5_rdV0W_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rdV0V_closure+1;
         const $krep2_rdV0T_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.859393638 UTC

[section ""data" . Control.Concurrent.Chan.$tc'ChItem1_closure" {
     Control.Concurrent.Chan.$tc'ChItem1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rdV0R_closure+2;
         const $krep5_rdV0W_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.861175437 UTC

[section ""cstring" . Control.Concurrent.Chan.$tc'ChItem3_bytes" {
     Control.Concurrent.Chan.$tc'ChItem3_bytes:
         I8[] [39,67,104,73,116,101,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.862994979 UTC

[section ""data" . Control.Concurrent.Chan.$tc'ChItem2_closure" {
     Control.Concurrent.Chan.$tc'ChItem2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.Chan.$tc'ChItem3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.864807908 UTC

[section ""data" . Control.Concurrent.Chan.$tc'ChItem_closure" {
     Control.Concurrent.Chan.$tc'ChItem_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Concurrent.Chan.$trModule_closure+1;
         const Control.Concurrent.Chan.$tc'ChItem2_closure+1;
         const Control.Concurrent.Chan.$tc'ChItem1_closure+4;
         const 10690021181819663847;
         const 14453345100680315478;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.867371294 UTC

[section ""data" . $krep6_rdV0X_closure" {
     $krep6_rdV0X_closure:
         const :_con_info;
         const $krep4_rdV0V_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.869209288 UTC

[section ""data" . $krep7_rdV0Y_closure" {
     $krep7_rdV0Y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep6_rdV0X_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.870935489 UTC

[section ""cstring" . Control.Concurrent.Chan.$tcChan2_bytes" {
     Control.Concurrent.Chan.$tcChan2_bytes:
         I8[] [67,104,97,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.872653546 UTC

[section ""data" . Control.Concurrent.Chan.$tcChan1_closure" {
     Control.Concurrent.Chan.$tcChan1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.Chan.$tcChan2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.875136267 UTC

[section ""data" . Control.Concurrent.Chan.$tcChan_closure" {
     Control.Concurrent.Chan.$tcChan_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Concurrent.Chan.$trModule_closure+1;
         const Control.Concurrent.Chan.$tcChan1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 8939098401262630739;
         const 12846644923708574499;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.877087824 UTC

[section ""data" . $krep8_rdV0Z_closure" {
     $krep8_rdV0Z_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Concurrent.Chan.$tcChan_closure+1;
         const $krep1_rdV0S_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.878929162 UTC

[section ""data" . $krep9_rdV10_closure" {
     $krep9_rdV10_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rdV0Y_closure+1;
         const $krep8_rdV0Z_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.880794817 UTC

[section ""data" . Control.Concurrent.Chan.$tc'Chan1_closure" {
     Control.Concurrent.Chan.$tc'Chan1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rdV0Y_closure+1;
         const $krep9_rdV10_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.882702818 UTC

[section ""cstring" . Control.Concurrent.Chan.$tc'Chan3_bytes" {
     Control.Concurrent.Chan.$tc'Chan3_bytes:
         I8[] [39,67,104,97,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.884488385 UTC

[section ""data" . Control.Concurrent.Chan.$tc'Chan2_closure" {
     Control.Concurrent.Chan.$tc'Chan2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.Chan.$tc'Chan3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.887033646 UTC

[section ""data" . Control.Concurrent.Chan.$tc'Chan_closure" {
     Control.Concurrent.Chan.$tc'Chan_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Concurrent.Chan.$trModule_closure+1;
         const Control.Concurrent.Chan.$tc'Chan2_closure+1;
         const Control.Concurrent.Chan.$tc'Chan1_closure+4;
         const 735828590425899369;
         const 13090399282914560069;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.889681459 UTC

[section ""data" . Control.Concurrent.Chan.ChItem_closure" {
     Control.Concurrent.Chan.ChItem_closure:
         const Control.Concurrent.Chan.ChItem_info;
 },
 Control.Concurrent.Chan.ChItem_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVOP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdVOT; else goto cdVOS;
       cdVOT: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.ChItem_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVOS: // global
           I64[Hp - 16] = Control.Concurrent.Chan.ChItem_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.ChItem_info" {
     Control.Concurrent.Chan.ChItem_info:
         const Control.Concurrent.Chan.ChItem_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.893671455 UTC

[section ""data" . Control.Concurrent.Chan.Chan_closure" {
     Control.Concurrent.Chan.Chan_closure:
         const Control.Concurrent.Chan.Chan_info;
 },
 Control.Concurrent.Chan.Chan_entry() //  [R2, R3]
         { []
         }
     {offset
       cdVP5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdVP9; else goto cdVP8;
       cdVP9: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.Chan.Chan_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdVP8: // global
           I64[Hp - 16] = Control.Concurrent.Chan.Chan_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.Chan_info" {
     Control.Concurrent.Chan.Chan_info:
         const Control.Concurrent.Chan.Chan_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.898112465 UTC

[section ""cstring" . idVPh_str" {
     idVPh_str:
         I8[] [98,97,115,101,58,67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,67,104,97,110,46,67,104,73,116,101,109]
 },
 Control.Concurrent.Chan.ChItem_con_entry() //  [R1]
         { []
         }
     {offset
       cdVPg: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.ChItem_con_info" {
     Control.Concurrent.Chan.ChItem_con_info:
         const Control.Concurrent.Chan.ChItem_con_entry;
         const 2;
         const 4;
         const idVPh_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.90145548 UTC

[section ""cstring" . idVPo_str" {
     idVPo_str:
         I8[] [98,97,115,101,58,67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,67,104,97,110,46,67,104,97,110]
 },
 Control.Concurrent.Chan.Chan_con_entry() //  [R1]
         { []
         }
     {offset
       cdVPn: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.Chan.Chan_con_info" {
     Control.Concurrent.Chan.Chan_con_info:
         const Control.Concurrent.Chan.Chan_con_entry;
         const 2;
         const 4;
         const idVPo_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:11.904590842 UTC

[section ""relreadonly" . SdVPu_srt" { SdVPu_srt:
 }]

