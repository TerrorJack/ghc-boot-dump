
==================== Raw Cmm ====================
2018-03-16 16:09:07.780603345 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:09:07.793940836 UTC

[section ""data" . Control.Concurrent.QSemN.$WQSemN_closure" {
     Control.Concurrent.QSemN.$WQSemN_closure:
         const Control.Concurrent.QSemN.$WQSemN_info;
 },
 Control.Concurrent.QSemN.$WQSemN_entry() //  [R2]
         { []
         }
     {offset
       cdSRx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdSRB; else goto cdSRC;
       cdSRB: // global
           R2 = R2;
           R1 = Control.Concurrent.QSemN.$WQSemN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdSRC: // global
           I64[Sp - 8] = block_cdSRu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udSRG; else goto cdSRv;
       udSRG: // global
           call _cdSRu(R1) args: 0, res: 0, upd: 0;
       cdSRv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.$WQSemN_info" {
     Control.Concurrent.QSemN.$WQSemN_info:
         const Control.Concurrent.QSemN.$WQSemN_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdSRu() //  [R1]
         { []
         }
     {offset
       cdSRu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdSRF; else goto cdSRE;
       cdSRF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdSRE: // global
           _sdSvS::P64 = P64[R1 + 7];
           I64[Hp - 8] = Control.Concurrent.QSemN.QSemN_con_info;
           P64[Hp] = _sdSvS::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSRu_info" {
     block_cdSRu_info:
         const _cdSRu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.802706991 UTC

[section ""cstring" . Control.Concurrent.QSemN.$trModule4_bytes" {
     Control.Concurrent.QSemN.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.805534534 UTC

[section ""data" . Control.Concurrent.QSemN.$trModule3_closure" {
     Control.Concurrent.QSemN.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.QSemN.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.808279485 UTC

[section ""cstring" . Control.Concurrent.QSemN.$trModule2_bytes" {
     Control.Concurrent.QSemN.$trModule2_bytes:
         I8[] [67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,81,83,101,109,78]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.810977194 UTC

[section ""data" . Control.Concurrent.QSemN.$trModule1_closure" {
     Control.Concurrent.QSemN.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.QSemN.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.812993229 UTC

[section ""data" . Control.Concurrent.QSemN.$trModule_closure" {
     Control.Concurrent.QSemN.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Control.Concurrent.QSemN.$trModule3_closure+1;
         const Control.Concurrent.QSemN.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.815154931 UTC

[section ""data" . $krep_rdSvw_closure" {
     $krep_rdSvw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.817080099 UTC

[section ""data" . $krep1_rdSvx_closure" {
     $krep1_rdSvx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.820887795 UTC

[section ""data" . $krep2_rdSvy_closure" {
     $krep2_rdSvy_closure:
         const :_con_info;
         const $krep_rdSvw_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.822854541 UTC

[section ""data" . $krep3_rdSvz_closure" {
     $krep3_rdSvz_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep2_rdSvy_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.824759365 UTC

[section ""data" . $krep4_rdSvA_closure" {
     $krep4_rdSvA_closure:
         const :_con_info;
         const $krep3_rdSvz_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.826993258 UTC

[section ""data" . $krep5_rdSvB_closure" {
     $krep5_rdSvB_closure:
         const :_con_info;
         const $krep1_rdSvx_closure+1;
         const $krep4_rdSvA_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.828939172 UTC

[section ""data" . $krep6_rdSvC_closure" {
     $krep6_rdSvC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep5_rdSvB_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.83092917 UTC

[section ""data" . $krep7_rdSvD_closure" {
     $krep7_rdSvD_closure:
         const :_con_info;
         const $krep6_rdSvC_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.832990096 UTC

[section ""data" . $krep8_rdSvE_closure" {
     $krep8_rdSvE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep7_rdSvD_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.834983596 UTC

[section ""data" . $krep9_rdSvF_closure" {
     $krep9_rdSvF_closure:
         const :_con_info;
         const $krep8_rdSvE_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.836944515 UTC

[section ""data" . $krep10_rdSvG_closure" {
     $krep10_rdSvG_closure:
         const :_con_info;
         const $krep8_rdSvE_closure+1;
         const $krep9_rdSvF_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.8388271 UTC

[section ""data" . $krep11_rdSvH_closure" {
     $krep11_rdSvH_closure:
         const :_con_info;
         const $krep1_rdSvx_closure+1;
         const $krep10_rdSvG_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.840694933 UTC

[section ""data" . $krep12_rdSvI_closure" {
     $krep12_rdSvI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,,)_closure;
         const $krep11_rdSvH_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.843062568 UTC

[section ""data" . $krep13_rdSvJ_closure" {
     $krep13_rdSvJ_closure:
         const :_con_info;
         const $krep12_rdSvI_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.845071163 UTC

[section ""data" . $krep14_rdSvK_closure" {
     $krep14_rdSvK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep13_rdSvJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.847469963 UTC

[section ""cstring" . Control.Concurrent.QSemN.$tcQSemN2_bytes" {
     Control.Concurrent.QSemN.$tcQSemN2_bytes:
         I8[] [81,83,101,109,78]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.85151806 UTC

[section ""data" . Control.Concurrent.QSemN.$tcQSemN1_closure" {
     Control.Concurrent.QSemN.$tcQSemN1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.QSemN.$tcQSemN2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.854012678 UTC

[section ""data" . Control.Concurrent.QSemN.$tcQSemN_closure" {
     Control.Concurrent.QSemN.$tcQSemN_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Concurrent.QSemN.$trModule_closure+1;
         const Control.Concurrent.QSemN.$tcQSemN1_closure+1;
         const GHC.Types.krep$*_closure;
         const 8650881979471817661;
         const 11033619023634057930;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.857091129 UTC

[section ""data" . $krep15_rdSvL_closure" {
     $krep15_rdSvL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Concurrent.QSemN.$tcQSemN_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.859674783 UTC

[section ""data" . Control.Concurrent.QSemN.$tc'QSemN1_closure" {
     Control.Concurrent.QSemN.$tc'QSemN1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_rdSvK_closure+1;
         const $krep15_rdSvL_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.861966631 UTC

[section ""cstring" . Control.Concurrent.QSemN.$tc'QSemN3_bytes" {
     Control.Concurrent.QSemN.$tc'QSemN3_bytes:
         I8[] [39,81,83,101,109,78]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.864158056 UTC

[section ""data" . Control.Concurrent.QSemN.$tc'QSemN2_closure" {
     Control.Concurrent.QSemN.$tc'QSemN2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.QSemN.$tc'QSemN3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.866193591 UTC

[section ""data" . Control.Concurrent.QSemN.$tc'QSemN_closure" {
     Control.Concurrent.QSemN.$tc'QSemN_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Concurrent.QSemN.$trModule_closure+1;
         const Control.Concurrent.QSemN.$tc'QSemN2_closure+1;
         const Control.Concurrent.QSemN.$tc'QSemN1_closure+4;
         const 15878277071781304355;
         const 273080421945023395;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.868281744 UTC

[section ""cstring" . lvl_rdSvM_bytes" {
     lvl_rdSvM_bytes:
         I8[] [110,101,119,81,83,101,109,78,58,32,73,110,105,116,105,97,108,32,113,117,97,110,116,105,116,121,32,109,117,115,116,32,98,101,32,110,111,110,45,110,101,103,97,116,105,118,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.871112269 UTC

[section ""data" . Control.Concurrent.QSemN.newQSemN2_closure" {
     Control.Concurrent.QSemN.newQSemN2_closure:
         const Control.Concurrent.QSemN.newQSemN2_info;
         const 0;
 },
 Control.Concurrent.QSemN.newQSemN2_entry() //  []
         { []
         }
     {offset
       cdSSq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdSSr; else goto cdSSs;
       cdSSr: // global
           R1 = Control.Concurrent.QSemN.newQSemN2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdSSs: // global
           I64[Sp - 8] = block_cdSSo_info;
           R2 = lvl_rdSvM_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.newQSemN2_info" {
     Control.Concurrent.QSemN.newQSemN2_info:
         const Control.Concurrent.QSemN.newQSemN2_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const SdSzD_srt;
 },
 _cdSSo() //  [R1]
         { []
         }
     {offset
       cdSSo: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSSo_info" {
     block_cdSSo_info:
         const _cdSSo;
         const 0;
         const 4294967326;
         const SdSzD_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.879904437 UTC

[section ""data" . Control.Concurrent.QSemN.newQSemN1_closure" {
     Control.Concurrent.QSemN.newQSemN1_closure:
         const Control.Concurrent.QSemN.newQSemN1_info;
         const 0;
 },
 Control.Concurrent.QSemN.newQSemN1_entry() //  [R2]
         { []
         }
     {offset
       cdSSL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdSSM; else goto cdSSN;
       cdSSM: // global
           R2 = R2;
           R1 = Control.Concurrent.QSemN.newQSemN1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdSSN: // global
           I64[Sp - 8] = block_cdSSI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udST9; else goto cdSSJ;
       udST9: // global
           call _cdSSI(R1) args: 0, res: 0, upd: 0;
       cdSSJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.newQSemN1_info" {
     Control.Concurrent.QSemN.newQSemN1_info:
         const Control.Concurrent.QSemN.newQSemN1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SdSzD_srt+8;
 },
 _cdSSI() //  [R1]
         { []
         }
     {offset
       cdSSI: // global
           if (%MO_S_Ge_W64(I64[R1 + 7], 0)) goto cdST1; else goto cdST8;
       cdST1: // global
           I64[Sp - 8] = block_cdSSU_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
       cdST8: // global
           Sp = Sp + 8;
           call Control.Concurrent.QSemN.newQSemN2_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSSI_info" {
     block_cdSSI_info:
         const _cdSSI;
         const 0;
         const 4294967326;
         const SdSzD_srt+8;
 },
 _cdSSU() //  [R1]
         { []
         }
     {offset
       cdSSU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdST4; else goto cdST3;
       cdST4: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdST3: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp] = block_cdSSX_info;
           R2 = Hp - 23;
           _sdSw2::P64 = R1;
           R1 = R1;
           P64[Sp + 8] = _sdSw2::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSSU_info" {
     block_cdSSU_info:
         const _cdSSU;
         const 1;
         const 30;
 },
 _cdSSX() //  []
         { []
         }
     {offset
       cdSSX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdST7; else goto cdST6;
       cdST7: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdST6: // global
           I64[Hp - 8] = Control.Concurrent.QSemN.QSemN_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSSX_info" {
     block_cdSSX_info:
         const _cdSSX;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.890490548 UTC

[section ""data" . Control.Concurrent.QSemN.newQSemN_closure" {
     Control.Concurrent.QSemN.newQSemN_closure:
         const Control.Concurrent.QSemN.newQSemN_info;
         const 0;
 },
 Control.Concurrent.QSemN.newQSemN_entry() //  [R2]
         { []
         }
     {offset
       cdSTw: // global
           R2 = R2;
           call Control.Concurrent.QSemN.newQSemN1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.newQSemN_info" {
     Control.Concurrent.QSemN.newQSemN_info:
         const Control.Concurrent.QSemN.newQSemN_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdSzD_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.894446619 UTC

[section ""data" . lvl1_rdSvN_closure" {
     lvl1_rdSvN_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.901730616 UTC

[section ""data" . Control.Concurrent.QSemN.$wloop_closure" {
     Control.Concurrent.QSemN.$wloop_closure:
         const Control.Concurrent.QSemN.$wloop_info;
 },
 sat_sdSwh_entry() //  [R1]
         { []
         }
     {offset
       cdSTZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdSU0; else goto cdSU1;
       cdSU0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdSU1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.List.reverse1_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdSwh_info" {
     sat_sdSwh_info:
         const sat_sdSwh_entry;
         const 1;
         const 16;
 },
 Control.Concurrent.QSemN.$wloop_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdSU5: // global
           if ((Sp + -48) < SpLim) (likely: False) goto udSVo; else goto udSVn;
       udSVo: // global
           I64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _cdSU6() args: 0, res: 0, upd: 0;
       udSVn: // global
           I64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _cdSTF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.$wloop_info" {
     Control.Concurrent.QSemN.$wloop_info:
         const Control.Concurrent.QSemN.$wloop_entry;
         const 0;
         const 14;
         const 17179869203;
 },
 _cdSTF() //  []
         { []
         }
     {offset
       cdSTF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdSU9; else goto cdSU8;
       cdSU9: // global
           HpAlloc = 32;
           call _cdSU6() args: 0, res: 0, upd: 0;
       cdSU8: // global
           _sdSw7::P64 = P64[Sp + 8];
           _sdSwa::I64 = I64[Sp];
           if (_sdSwa::I64 != 0) goto cdSU3; else goto cdSU4;
       cdSU3: // global
           Hp = Hp - 32;
           I64[Sp] = block_cdSTK_info;
           R1 = _sdSw7::P64;
           I64[Sp + 8] = _sdSwa::I64;
           if (R1 & 7 != 0) goto udSVt; else goto cdSTL;
       udSVt: // global
           call _cdSTK(R1) args: 0, res: 0, upd: 0;
       cdSTL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdSU4: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = lvl1_rdSvN_closure+1;
           P64[Hp - 8] = _sdSw7::P64;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cdSU6() //  []
         { []
         }
     {offset
       cdSU6: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = Control.Concurrent.QSemN.$wloop_closure;
           Sp = Sp + 24;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cdSTK() //  [R1]
         { []
         }
     {offset
       cdSTK: // global
           if (R1 & 7 == 1) goto cdSUc; else goto cdSUy;
       cdSUc: // global
           I64[Sp] = block_cdSTP_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto udSVv; else goto cdSTQ;
       udSVv: // global
           call _cdSTP(R1) args: 0, res: 0, upd: 0;
       cdSTQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdSUy: // global
           I64[Sp - 16] = block_cdSUr_info;
           _sdSwb::P64 = R1;
           _sdSwj::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sdSwj::P64;
           P64[Sp] = _sdSwb::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udSVw; else goto cdSUs;
       udSVw: // global
           call _cdSUr(R1) args: 0, res: 0, upd: 0;
       cdSUs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSTK_info" {
     block_cdSTK_info:
         const _cdSTK;
         const 66;
         const 30;
 },
 _cdSTP() //  [R1]
         { []
         }
     {offset
       cdSTP: // global
           _sdSwa::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto cdSUh; else goto cdSUl;
       cdSUh: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdSUk; else goto cdSUj;
       cdSUk: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdSUj: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sdSwa::I64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdSUl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdSUo; else goto cdSUn;
       cdSUo: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdSUn: // global
           I64[Hp - 16] = sat_sdSwh_info;
           P64[Hp] = R1;
           I64[Sp] = _sdSwa::I64;
           P64[Sp + 8] = Hp - 16;
           P64[Sp + 16] = GHC.Types.[]_closure+1;
           call _cdSTF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdSTP_info" {
     block_cdSTP_info:
         const _cdSTP;
         const 194;
         const 30;
 },
 _cdSUr() //  [R1]
         { []
         }
     {offset
       cdSUr: // global
           I64[Sp - 8] = block_cdSUw_info;
           _sdSwm::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sdSwm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udSVA; else goto cdSUA;
       udSVA: // global
           call _cdSUw(R1) args: 0, res: 0, upd: 0;
       cdSUA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSUr_info" {
     block_cdSUr_info:
         const _cdSUr;
         const 260;
         const 30;
 },
 _cdSUw() //  [R1]
         { []
         }
     {offset
       cdSUw: // global
           _sdSwm::P64 = P64[Sp + 8];
           _sdSwo::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_sdSwo::I64,
                            I64[Sp + 32])) goto cdSUK; else goto cdSUZ;
       cdSUK: // global
           I64[Sp + 8] = block_cdSUI_info;
           R1 = _sdSwm::P64;
           I64[Sp + 24] = _sdSwo::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udSVB; else goto cdSUL;
       udSVB: // global
           call _cdSUI(R1) args: 0, res: 0, upd: 0;
       cdSUL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdSUZ: // global
           I64[Sp + 8] = block_cdSUY_info;
           R1 = _sdSwm::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udSVC; else goto cdSV0;
       udSVC: // global
           call _cdSUY(R1) args: 0, res: 0, upd: 0;
       cdSV0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSUw_info" {
     block_cdSUw_info:
         const _cdSUw;
         const 517;
         const 30;
 },
 _cdSUI() //  [R1]
         { []
         }
     {offset
       cdSUI: // global
           I64[Sp] = block_cdSUP_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 7];
           call stg_tryPutMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSUI_info" {
     block_cdSUI_info:
         const _cdSUI;
         const 388;
         const 30;
 },
 _cdSUP() //  [R1]
         { []
         }
     {offset
       cdSUP: // global
           _sdSw8::P64 = P64[Sp + 32];
           _sdSwa::I64 = I64[Sp + 24];
           _sdSwj::P64 = P64[Sp + 8];
           if (R1 == 0) goto cdSUW; else goto cdSUV;
       cdSUW: // global
           I64[Sp + 16] = _sdSwa::I64;
           P64[Sp + 24] = _sdSwj::P64;
           P64[Sp + 32] = _sdSw8::P64;
           Sp = Sp + 16;
           goto udSVE;
       cdSUV: // global
           I64[Sp + 16] = _sdSwa::I64 - I64[Sp + 16];
           P64[Sp + 24] = _sdSwj::P64;
           P64[Sp + 32] = _sdSw8::P64;
           Sp = Sp + 16;
           goto udSVE;
       udSVE: // global
           call _cdSTF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdSUP_info" {
     block_cdSUP_info:
         const _cdSUP;
         const 388;
         const 30;
 },
 _cdSUY() //  [R1]
         { []
         }
     {offset
       cdSUY: // global
           I64[Sp] = block_cdSV4_info;
           R1 = P64[R1 + 7];
           call stg_isEmptyMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSUY_info" {
     block_cdSUY_info:
         const _cdSUY;
         const 260;
         const 30;
 },
 _cdSV4() //  [R1]
         { []
         }
     {offset
       cdSV4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdSV9; else goto cdSV8;
       cdSV9: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdSV8: // global
           _sdSw8::P64 = P64[Sp + 32];
           _sdSwa::I64 = I64[Sp + 24];
           if (R1 == 0) goto cdSVg; else goto cdSVf;
       cdSVg: // global
           Hp = Hp - 48;
           I64[Sp + 16] = _sdSwa::I64;
           P64[Sp + 24] = P64[Sp + 8];
           P64[Sp + 32] = _sdSw8::P64;
           Sp = Sp + 16;
           call _cdSTF() args: 0, res: 0, upd: 0;
       cdSVf: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sdSwa::I64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sdSw8::P64;
           R1 = Hp - 23;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSV4_info" {
     block_cdSV4_info:
         const _cdSV4;
         const 260;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.932891845 UTC

[section ""data" . Control.Concurrent.QSemN.$wsignalQSemN_closure" {
     Control.Concurrent.QSemN.$wsignalQSemN_closure:
         const Control.Concurrent.QSemN.$wsignalQSemN_info;
 },
 sat_sdSx2_entry() //  [R1]
         { []
         }
     {offset
       cdSWU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdSX8; else goto cdSX9;
       cdSX8: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdSX9: // global
           I64[Sp - 24] = block_cdSWP_info;
           _sdSwG::P64 = P64[R1 + 7];
           _sdSwH::I64 = I64[R1 + 15];
           R1 = _sdSwG::P64;
           P64[Sp - 16] = _sdSwG::P64;
           I64[Sp - 8] = _sdSwH::I64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdSx2_info" {
     sat_sdSx2_info:
         const sat_sdSx2_entry;
         const 4294967297;
         const 12;
         const 4294967299;
 },
 _cdSWP() //  [R1]
         { []
         }
     {offset
       cdSWP: // global
           I64[Sp] = block_cdSWR_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udSXg; else goto cdSWS;
       udSXg: // global
           call _cdSWR(R1) args: 0, res: 0, upd: 0;
       cdSWS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSWP_info" {
     block_cdSWP_info:
         const _cdSWP;
         const 130;
         const 30;
 },
 _cdSWR() //  [R1]
         { []
         }
     {offset
       cdSWR: // global
           I64[Sp - 16] = block_cdSWX_info;
           _sdSwT::P64 = P64[R1 + 15];
           _sdSwU::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sdSwU::P64;
           P64[Sp] = _sdSwT::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udSXh; else goto cdSWY;
       udSXh: // global
           call _cdSWX(R1) args: 0, res: 0, upd: 0;
       cdSWY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSWR_info" {
     block_cdSWR_info:
         const _cdSWR;
         const 130;
         const 30;
 },
 _cdSWX() //  [R1]
         { []
         }
     {offset
       cdSWX: // global
           _sdSwT::P64 = P64[Sp + 16];
           _sdSwX::I64 = I64[Sp + 32] + I64[R1 + 7];
           I64[Sp + 16] = block_cdSX5_info;
           R4 = P64[Sp + 8];
           R3 = _sdSwT::P64;
           R2 = _sdSwX::I64;
           Sp = Sp + 16;
           call Control.Concurrent.QSemN.$wloop_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSWX_info" {
     block_cdSWX_info:
         const _cdSWX;
         const 516;
         const 30;
 },
 _cdSX5() //  [R1]
         { []
         }
     {offset
       cdSX5: // global
           I64[Sp + 16] = block_cdSX7_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSX5_info" {
     block_cdSX5_info:
         const _cdSX5;
         const 130;
         const 30;
 },
 _cdSX7() //  []
         { []
         }
     {offset
       cdSX7: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSX7_info" {
     block_cdSX7_info:
         const _cdSX7;
         const 0;
         const 30;
 },
 Control.Concurrent.QSemN.$wsignalQSemN_entry() //  [R2, R3]
         { []
         }
     {offset
       cdSXl: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdSXm; else goto cdSXn;
       cdSXm: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.QSemN.$wsignalQSemN_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdSXn: // global
           I64[Sp - 24] = block_cdSWG_info;
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.$wsignalQSemN_info" {
     Control.Concurrent.QSemN.$wsignalQSemN_info:
         const Control.Concurrent.QSemN.$wsignalQSemN_entry;
         const 0;
         const 14;
         const 12884901902;
 },
 _cdSWG() //  [R1]
         { []
         }
     {offset
       cdSWG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdSXq; else goto cdSXp;
       cdSXq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdSXp: // global
           _sdSwG::P64 = P64[Sp + 8];
           if (R1 == 1) goto cdSXk; else goto cdSXj;
       cdSXk: // global
           Hp = Hp - 24;
           I64[Sp] = block_cdSXs_info;
           R1 = _sdSwG::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       cdSXj: // global
           I64[Hp - 16] = sat_sdSx2_info;
           P64[Hp - 8] = _sdSwG::P64;
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSWG_info" {
     block_cdSWG_info:
         const _cdSWG;
         const 130;
         const 30;
 },
 _cdSXs() //  [R1]
         { []
         }
     {offset
       cdSXs: // global
           I64[Sp] = block_cdSXu_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udSXQ; else goto cdSXv;
       udSXQ: // global
           call _cdSXu(R1) args: 0, res: 0, upd: 0;
       cdSXv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSXs_info" {
     block_cdSXs_info:
         const _cdSXs;
         const 130;
         const 30;
 },
 _cdSXu() //  [R1]
         { []
         }
     {offset
       cdSXu: // global
           I64[Sp - 16] = block_cdSXz_info;
           _sdSx8::P64 = P64[R1 + 15];
           _sdSx9::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sdSx9::P64;
           P64[Sp] = _sdSx8::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udSXR; else goto cdSXA;
       udSXR: // global
           call _cdSXz(R1) args: 0, res: 0, upd: 0;
       cdSXA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSXu_info" {
     block_cdSXu_info:
         const _cdSXu;
         const 130;
         const 30;
 },
 _cdSXz() //  [R1]
         { []
         }
     {offset
       cdSXz: // global
           _sdSx8::P64 = P64[Sp + 16];
           _sdSxc::I64 = I64[Sp + 32] + I64[R1 + 7];
           I64[Sp + 16] = block_cdSXH_info;
           R4 = P64[Sp + 8];
           R3 = _sdSx8::P64;
           R2 = _sdSxc::I64;
           Sp = Sp + 16;
           call Control.Concurrent.QSemN.$wloop_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSXz_info" {
     block_cdSXz_info:
         const _cdSXz;
         const 516;
         const 30;
 },
 _cdSXH() //  [R1]
         { []
         }
     {offset
       cdSXH: // global
           I64[Sp + 16] = block_cdSXJ_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSXH_info" {
     block_cdSXH_info:
         const _cdSXH;
         const 130;
         const 30;
 },
 _cdSXJ() //  []
         { []
         }
     {offset
       cdSXJ: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSXJ_info" {
     block_cdSXJ_info:
         const _cdSXJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.962066169 UTC

[section ""data" . Control.Concurrent.QSemN.signalQSemN1_closure" {
     Control.Concurrent.QSemN.signalQSemN1_closure:
         const Control.Concurrent.QSemN.signalQSemN1_info;
 },
 Control.Concurrent.QSemN.signalQSemN1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdSYQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdSYU; else goto cdSYV;
       cdSYU: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.QSemN.signalQSemN1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdSYV: // global
           I64[Sp - 16] = block_cdSYN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udSZ3; else goto cdSYO;
       udSZ3: // global
           call _cdSYN(R1) args: 0, res: 0, upd: 0;
       cdSYO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.signalQSemN1_info" {
     Control.Concurrent.QSemN.signalQSemN1_info:
         const Control.Concurrent.QSemN.signalQSemN1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cdSYN() //  [R1]
         { []
         }
     {offset
       cdSYN: // global
           I64[Sp] = block_cdSYT_info;
           _sdSxl::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sdSxl::P64;
           if (R1 & 7 != 0) goto udSZ2; else goto cdSYX;
       udSZ2: // global
           call _cdSYT(R1) args: 0, res: 0, upd: 0;
       cdSYX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSYN_info" {
     block_cdSYN_info:
         const _cdSYN;
         const 1;
         const 30;
 },
 _cdSYT() //  [R1]
         { []
         }
     {offset
       cdSYT: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Control.Concurrent.QSemN.$wsignalQSemN_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSYT_info" {
     block_cdSYT_info:
         const _cdSYT;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.972276193 UTC

[section ""data" . Control.Concurrent.QSemN.signalQSemN_closure" {
     Control.Concurrent.QSemN.signalQSemN_closure:
         const Control.Concurrent.QSemN.signalQSemN_info;
 },
 Control.Concurrent.QSemN.signalQSemN_entry() //  [R2, R3]
         { []
         }
     {offset
       cdSZl: // global
           R3 = R3;
           R2 = R2;
           call Control.Concurrent.QSemN.signalQSemN1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.signalQSemN_info" {
     Control.Concurrent.QSemN.signalQSemN_info:
         const Control.Concurrent.QSemN.signalQSemN_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.992974299 UTC

[section ""data" . lvl2_rdSvO_closure" {
     lvl2_rdSvO_closure:
         const lvl2_rdSvO_info;
 },
 lvl2_rdSvO_slow() //  [R1]
         { []
         }
     {offset
       cdSZt: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call lvl2_rdSvO_entry(R6,
                                 R5,
                                 R4,
                                 R3,
                                 R2,
                                 R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdSxT_entry() //  [R1]
         { []
         }
     {offset
       cdSZJ: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cdSZK; else goto cdSZL;
       cdSZK: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdSZL: // global
           I64[Sp - 32] = block_cdSZE_info;
           _sdSxo::P64 = P64[R1 + 7];
           _sdSxp::P64 = P64[R1 + 15];
           _sdSxq::P64 = P64[R1 + 23];
           R1 = _sdSxo::P64;
           P64[Sp - 24] = _sdSxo::P64;
           P64[Sp - 16] = _sdSxp::P64;
           P64[Sp - 8] = _sdSxq::P64;
           Sp = Sp - 32;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdSxT_info" {
     sat_sdSxT_info:
         const sat_sdSxT_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _cdSZE() //  [R1]
         { []
         }
     {offset
       cdSZE: // global
           I64[Sp] = block_cdSZG_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udT0s; else goto cdSZH;
       udT0s: // global
           call _cdSZG(R1) args: 0, res: 0, upd: 0;
       cdSZH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSZE_info" {
     block_cdSZE_info:
         const _cdSZE;
         const 3;
         const 30;
 },
 _cdSZG() //  [R1]
         { []
         }
     {offset
       cdSZG: // global
           I64[Sp - 32] = block_cdSZP_info;
           _sdSxz::P64 = R1;
           _sdSxA::P64 = P64[R1 + 7];
           _sdSxB::P64 = P64[R1 + 15];
           _sdSxC::P64 = P64[R1 + 23];
           R1 = P64[Sp + 24];
           P64[Sp - 24] = _sdSxA::P64;
           P64[Sp - 16] = _sdSxB::P64;
           P64[Sp - 8] = _sdSxC::P64;
           P64[Sp] = _sdSxz::P64;
           Sp = Sp - 32;
           call stg_tryTakeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSZG_info" {
     block_cdSZG_info:
         const _cdSZG;
         const 3;
         const 30;
 },
 _cdSZP() //  [R1]
         { []
         }
     {offset
       cdSZP: // global
           if (R1 == 0) goto cdT0o; else goto cdT0e;
       cdT0o: // global
           I64[Sp + 24] = block_cdT0l_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 56];
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cdT0e: // global
           I64[Sp] = block_cdSZX_info;
           R1 = P64[Sp + 48];
           if (R1 & 7 != 0) goto udT0t; else goto cdSZY;
       udT0t: // global
           call _cdSZX(R1) args: 0, res: 0, upd: 0;
       cdSZY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSZP_info" {
     block_cdSZP_info:
         const _cdSZP;
         const 7;
         const 30;
 },
 _cdT0l() //  []
         { []
         }
     {offset
       cdT0l: // global
           I64[Sp + 32] = block_cdT0n_info;
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT0l_info" {
     block_cdT0l_info:
         const _cdT0l;
         const 772;
         const 30;
 },
 _cdSZX() //  [R1]
         { []
         }
     {offset
       cdSZX: // global
           _sdSxA::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdT02_info;
           _sdSxJ::I64 = I64[R1 + 7];
           R1 = _sdSxA::P64;
           I64[Sp + 56] = _sdSxJ::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udT0u; else goto cdT03;
       udT0u: // global
           call _cdT02(R1) args: 0, res: 0, upd: 0;
       cdT03: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdSZX_info" {
     block_cdSZX_info:
         const _cdSZX;
         const 6663;
         const 30;
 },
 _cdT02() //  [R1]
         { []
         }
     {offset
       cdT02: // global
           _sdSxM::I64 = I64[Sp + 48] + I64[R1 + 7];
           I64[Sp + 24] = block_cdT0a_info;
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = _sdSxM::I64;
           Sp = Sp + 24;
           call Control.Concurrent.QSemN.$wloop_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT02_info" {
     block_cdT02_info:
         const _cdT02;
         const 3334;
         const 30;
 },
 _cdT0a() //  [R1]
         { []
         }
     {offset
       cdT0a: // global
           I64[Sp + 24] = block_cdT0n_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT0a_info" {
     block_cdT0a_info:
         const _cdT0a;
         const 387;
         const 30;
 },
 _cdT0n() //  []
         { []
         }
     {offset
       cdT0n: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT0n_info" {
     block_cdT0n_info:
         const _cdT0n;
         const 0;
         const 30;
 },
 lvl2_rdSvO_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdT0y: // global
           _sdSxt::I64 = R6;
           _sdSxs::P64 = R5;
           _sdSxq::P64 = R4;
           _sdSxp::P64 = R3;
           _sdSxo::P64 = R2;
           if ((Sp + -72) < SpLim) (likely: False) goto cdT0z; else goto cdT0A;
       cdT0A: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdT0C; else goto cdT0B;
       cdT0C: // global
           HpAlloc = 32;
           goto cdT0z;
       cdT0z: // global
           R1 = lvl2_rdSvO_closure;
           P64[Sp - 40] = _sdSxo::P64;
           P64[Sp - 32] = _sdSxp::P64;
           P64[Sp - 24] = _sdSxq::P64;
           P64[Sp - 16] = _sdSxs::P64;
           I64[Sp - 8] = _sdSxt::I64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cdT0B: // global
           if (_sdSxt::I64 == 1) goto cdT0x; else goto cdT0w;
       cdT0x: // global
           Hp = Hp - 32;
           I64[Sp - 40] = block_cdT0H_info;
           R1 = _sdSxo::P64;
           P64[Sp - 32] = _sdSxo::P64;
           P64[Sp - 24] = _sdSxp::P64;
           P64[Sp - 16] = _sdSxq::P64;
           P64[Sp - 8] = _sdSxs::P64;
           Sp = Sp - 40;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       cdT0w: // global
           I64[Hp - 24] = sat_sdSxT_info;
           P64[Hp - 16] = _sdSxo::P64;
           P64[Hp - 8] = _sdSxp::P64;
           P64[Hp] = _sdSxq::P64;
           I64[Sp - 16] = block_cdT0D_info;
           R1 = Hp - 23;
           P64[Sp - 8] = _sdSxs::P64;
           Sp = Sp - 16;
           call stg_maskUninterruptible#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_rdSvO_info" {
     lvl2_rdSvO_info:
         const lvl2_rdSvO_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 1029;
         const lvl2_rdSvO_slow;
 },
 _cdT0H() //  [R1]
         { []
         }
     {offset
       cdT0H: // global
           I64[Sp] = block_cdT0J_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udT1s; else goto cdT0L;
       udT1s: // global
           call _cdT0J(R1) args: 0, res: 0, upd: 0;
       cdT0L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT0H_info" {
     block_cdT0H_info:
         const _cdT0H;
         const 4;
         const 30;
 },
 _cdT0J() //  [R1]
         { []
         }
     {offset
       cdT0J: // global
           I64[Sp - 32] = block_cdT0P_info;
           _sdSy0::P64 = R1;
           _sdSy1::P64 = P64[R1 + 7];
           _sdSy2::P64 = P64[R1 + 15];
           _sdSy3::P64 = P64[R1 + 23];
           R1 = P64[Sp + 24];
           P64[Sp - 24] = _sdSy1::P64;
           P64[Sp - 16] = _sdSy2::P64;
           P64[Sp - 8] = _sdSy3::P64;
           P64[Sp] = _sdSy0::P64;
           Sp = Sp - 32;
           call stg_tryTakeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT0J_info" {
     block_cdT0J_info:
         const _cdT0J;
         const 4;
         const 30;
 },
 _cdT0P() //  [R1]
         { []
         }
     {offset
       cdT0P: // global
           if (R1 == 0) goto cdT1o; else goto cdT1e;
       cdT1o: // global
           I64[Sp + 24] = block_cdT1l_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 56];
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cdT1e: // global
           I64[Sp] = block_cdT0X_info;
           R1 = P64[Sp + 48];
           if (R1 & 7 != 0) goto udT1t; else goto cdT0Y;
       udT1t: // global
           call _cdT0X(R1) args: 0, res: 0, upd: 0;
       cdT0Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT0P_info" {
     block_cdT0P_info:
         const _cdT0P;
         const 8;
         const 30;
 },
 _cdT1l() //  []
         { []
         }
     {offset
       cdT1l: // global
           I64[Sp + 32] = block_cdT1n_info;
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT1l_info" {
     block_cdT1l_info:
         const _cdT1l;
         const 773;
         const 30;
 },
 _cdT0X() //  [R1]
         { []
         }
     {offset
       cdT0X: // global
           _sdSy1::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdT12_info;
           _sdSya::I64 = I64[R1 + 7];
           R1 = _sdSy1::P64;
           I64[Sp + 56] = _sdSya::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udT1u; else goto cdT13;
       udT1u: // global
           call _cdT12(R1) args: 0, res: 0, upd: 0;
       cdT13: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT0X_info" {
     block_cdT0X_info:
         const _cdT0X;
         const 6664;
         const 30;
 },
 _cdT12() //  [R1]
         { []
         }
     {offset
       cdT12: // global
           _sdSyd::I64 = I64[Sp + 48] + I64[R1 + 7];
           I64[Sp + 24] = block_cdT1a_info;
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = _sdSyd::I64;
           Sp = Sp + 24;
           call Control.Concurrent.QSemN.$wloop_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT12_info" {
     block_cdT12_info:
         const _cdT12;
         const 3335;
         const 30;
 },
 _cdT1a() //  [R1]
         { []
         }
     {offset
       cdT1a: // global
           I64[Sp + 24] = block_cdT1n_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT1a_info" {
     block_cdT1a_info:
         const _cdT1a;
         const 388;
         const 30;
 },
 _cdT1n() //  []
         { []
         }
     {offset
       cdT1n: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT1n_info" {
     block_cdT1n_info:
         const _cdT1n;
         const 1;
         const 30;
 },
 _cdT0D() //  []
         { []
         }
     {offset
       cdT0D: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT0D_info" {
     block_cdT0D_info:
         const _cdT0D;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.043852534 UTC

[section ""data" . Control.Concurrent.QSemN.$wlvl_closure" {
     Control.Concurrent.QSemN.$wlvl_closure:
         const Control.Concurrent.QSemN.$wlvl_info;
 },
 Control.Concurrent.QSemN.$wlvl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdT2M: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdT2N; else goto cdT2O;
       cdT2N: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.QSemN.$wlvl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdT2O: // global
           I64[Sp - 40] = block_cdT2K_info;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.$wlvl_info" {
     Control.Concurrent.QSemN.$wlvl_info:
         const Control.Concurrent.QSemN.$wlvl_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _cdT2K() //  [R1]
         { []
         }
     {offset
       cdT2K: // global
           R6 = R1;
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 24];
           Sp = Sp + 40;
           call lvl2_rdSvO_entry(R6, R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT2K_info" {
     block_cdT2K_info:
         const _cdT2K;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.054960625 UTC

[section ""data" . Control.Concurrent.QSemN.$wwaitQSemN_closure" {
     Control.Concurrent.QSemN.$wwaitQSemN_closure:
         const Control.Concurrent.QSemN.$wwaitQSemN_info;
 },
 sat_sdSz1_entry() //  [R1, R2]
         { []
         }
     {offset
       cdT3G: // global
           R5 = R2;
           R4 = P64[R1 + 6];
           R3 = P64[R1 + 22];
           R2 = P64[R1 + 14];
           call Control.Concurrent.QSemN.$wlvl_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdSz1_info" {
     sat_sdSz1_info:
         const sat_sdSz1_entry;
         const 3;
         const 8;
         const 8589934597;
 },
 sat_sdSyY_entry() //  [R1]
         { []
         }
     {offset
       cdT3O: // global
           R1 = P64[R1 + 7];
           call stg_takeMVar#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdSyY_info" {
     sat_sdSyY_info:
         const sat_sdSyY_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 io_sdSyy_entry() //  [R1]
         { []
         }
     {offset
       cdT3R: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdT3S; else goto cdT3T;
       cdT3S: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdT3T: // global
           I64[Sp - 24] = block_cdT39_info;
           _sdSys::P64 = P64[R1 + 7];
           _sdSyt::I64 = I64[R1 + 15];
           R1 = _sdSys::P64;
           P64[Sp - 16] = _sdSys::P64;
           I64[Sp - 8] = _sdSyt::I64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sdSyy_info" {
     io_sdSyy_info:
         const io_sdSyy_entry;
         const 4294967297;
         const 12;
         const 4294967299;
 },
 _cdT39() //  [R1]
         { []
         }
     {offset
       cdT39: // global
           I64[Sp] = block_cdT3b_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udT4d; else goto cdT3c;
       udT4d: // global
           call _cdT3b(R1) args: 0, res: 0, upd: 0;
       cdT3c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT39_info" {
     block_cdT39_info:
         const _cdT39;
         const 130;
         const 30;
 },
 _cdT3b() //  [R1]
         { []
         }
     {offset
       cdT3b: // global
           I64[Sp - 16] = block_cdT3g_info;
           _sdSyF::P64 = P64[R1 + 15];
           _sdSyG::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sdSyG::P64;
           P64[Sp] = _sdSyF::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udT4e; else goto cdT3h;
       udT4e: // global
           call _cdT3g(R1) args: 0, res: 0, upd: 0;
       cdT3h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT3b_info" {
     block_cdT3b_info:
         const _cdT3b;
         const 130;
         const 30;
 },
 _cdT3g() //  [R1]
         { []
         }
     {offset
       cdT3g: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdT3Y; else goto cdT3X;
       cdT3Y: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdT3X: // global
           _sdSyJ::I64 = I64[R1 + 7] - I64[Sp + 32];
           if (%MO_S_Ge_W64(_sdSyJ::I64, 0)) goto cdT43; else goto cdT46;
       cdT43: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sdSyJ::I64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 32] = block_cdT41_info;
           R2 = Hp - 23;
           R1 = P64[Sp + 24];
           Sp = Sp + 32;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cdT46: // global
           Hp = Hp - 48;
           I64[Sp - 8] = block_cdT3s_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT3g_info" {
     block_cdT3g_info:
         const _cdT3g;
         const 516;
         const 30;
 },
 _cdT41() //  []
         { []
         }
     {offset
       cdT41: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT41_info" {
     block_cdT41_info:
         const _cdT41;
         const 0;
         const 30;
 },
 _cdT3s() //  [R1]
         { []
         }
     {offset
       cdT3s: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdT49; else goto cdT48;
       cdT49: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdT48: // global
           I64[Hp - 104] = GHC.Types.I#_con_info;
           I64[Hp - 96] = I64[Sp + 40];
           I64[Hp - 88] = GHC.MVar.MVar_con_info;
           P64[Hp - 80] = R1;
           I64[Hp - 72] = (,)_con_info;
           _cdT3u::P64 = Hp - 103;
           P64[Hp - 64] = _cdT3u::P64;
           P64[Hp - 56] = Hp - 87;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 71;
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = Hp - 46;
           I64[Sp + 16] = block_cdT3z_info;
           R2 = Hp - 23;
           _sdSyQ::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 24] = _sdSyQ::P64;
           P64[Sp + 40] = _cdT3u::P64;
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT3s_info" {
     block_cdT3s_info:
         const _cdT3s;
         const 1029;
         const 30;
 },
 _cdT3z() //  []
         { []
         }
     {offset
       cdT3z: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdT4c; else goto cdT4b;
       cdT4c: // global
           HpAlloc = 48;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdT4b: // global
           I64[Hp - 40] = sat_sdSz1_info;
           P64[Hp - 32] = P64[Sp + 16];
           _sdSyQ::P64 = P64[Sp + 8];
           P64[Hp - 24] = _sdSyQ::P64;
           P64[Hp - 16] = P64[Sp + 24];
           I64[Hp - 8] = sat_sdSyY_info;
           P64[Hp] = _sdSyQ::P64;
           R2 = Hp - 38;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT3z_info" {
     block_cdT3z_info:
         const _cdT3z;
         const 3;
         const 30;
 },
 Control.Concurrent.QSemN.$wwaitQSemN_entry() //  [R2, R3]
         { []
         }
     {offset
       cdT4j: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdT4k; else goto cdT4l;
       cdT4k: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.QSemN.$wwaitQSemN_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdT4l: // global
           I64[Sp - 24] = block_cdT32_info;
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.$wwaitQSemN_info" {
     Control.Concurrent.QSemN.$wwaitQSemN_info:
         const Control.Concurrent.QSemN.$wwaitQSemN_entry;
         const 0;
         const 14;
         const 12884901902;
 },
 _cdT32() //  [R1]
         { []
         }
     {offset
       cdT32: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdT4o; else goto cdT4n;
       cdT4o: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdT4n: // global
           I64[Hp - 16] = io_sdSyy_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           _cdT34::P64 = Hp - 15;
           if (R1 == 0) goto cdT4i; else goto cdT4h;
       cdT4i: // global
           R1 = _cdT34::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cdT4h: // global
           R1 = _cdT34::P64;
           Sp = Sp + 24;
           call io_sdSyy_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT32_info" {
     block_cdT32_info:
         const _cdT32;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.078265388 UTC

[section ""data" . Control.Concurrent.QSemN.waitQSemN1_closure" {
     Control.Concurrent.QSemN.waitQSemN1_closure:
         const Control.Concurrent.QSemN.waitQSemN1_info;
 },
 Control.Concurrent.QSemN.waitQSemN1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdT5o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdT5s; else goto cdT5t;
       cdT5s: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.QSemN.waitQSemN1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdT5t: // global
           I64[Sp - 16] = block_cdT5l_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udT5B; else goto cdT5m;
       udT5B: // global
           call _cdT5l(R1) args: 0, res: 0, upd: 0;
       cdT5m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.waitQSemN1_info" {
     Control.Concurrent.QSemN.waitQSemN1_info:
         const Control.Concurrent.QSemN.waitQSemN1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cdT5l() //  [R1]
         { []
         }
     {offset
       cdT5l: // global
           I64[Sp] = block_cdT5r_info;
           _sdSz7::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sdSz7::P64;
           if (R1 & 7 != 0) goto udT5A; else goto cdT5v;
       udT5A: // global
           call _cdT5r(R1) args: 0, res: 0, upd: 0;
       cdT5v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT5l_info" {
     block_cdT5l_info:
         const _cdT5l;
         const 1;
         const 30;
 },
 _cdT5r() //  [R1]
         { []
         }
     {offset
       cdT5r: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Control.Concurrent.QSemN.$wwaitQSemN_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT5r_info" {
     block_cdT5r_info:
         const _cdT5r;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.085819169 UTC

[section ""data" . Control.Concurrent.QSemN.waitQSemN_closure" {
     Control.Concurrent.QSemN.waitQSemN_closure:
         const Control.Concurrent.QSemN.waitQSemN_info;
 },
 Control.Concurrent.QSemN.waitQSemN_entry() //  [R2, R3]
         { []
         }
     {offset
       cdT5T: // global
           R3 = R3;
           R2 = R2;
           call Control.Concurrent.QSemN.waitQSemN1_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.waitQSemN_info" {
     Control.Concurrent.QSemN.waitQSemN_info:
         const Control.Concurrent.QSemN.waitQSemN_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.089748534 UTC

[section ""data" . Control.Concurrent.QSemN.QSemN_closure" {
     Control.Concurrent.QSemN.QSemN_closure:
         const Control.Concurrent.QSemN.QSemN_info;
 },
 Control.Concurrent.QSemN.QSemN_entry() //  [R2]
         { []
         }
     {offset
       cdT65: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdT69; else goto cdT68;
       cdT69: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Control.Concurrent.QSemN.QSemN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdT68: // global
           I64[Hp - 8] = Control.Concurrent.QSemN.QSemN_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.QSemN_info" {
     Control.Concurrent.QSemN.QSemN_info:
         const Control.Concurrent.QSemN.QSemN_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.09353594 UTC

[section ""cstring" . idSRp_str" {
     idSRp_str:
         I8[] [98,97,115,101,58,67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,81,83,101,109,78,46,81,83,101,109,78]
 },
 Control.Concurrent.QSemN.QSemN_con_entry() //  [R1]
         { []
         }
     {offset
       cdT6f: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.QSemN_con_info" {
     Control.Concurrent.QSemN.QSemN_con_info:
         const Control.Concurrent.QSemN.QSemN_con_entry;
         const 1;
         const 2;
         const idSRp_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.097337939 UTC

[section ""relreadonly" . SdSzD_srt" {
     SdSzD_srt:
         const GHC.IO.failIO1_closure;
         const Control.Concurrent.QSemN.newQSemN2_closure;
         const Control.Concurrent.QSemN.newQSemN1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.774531335 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:09:08.776632416 UTC

[section ""data" . Control.Concurrent.QSemN.$WQSemN_closure" {
     Control.Concurrent.QSemN.$WQSemN_closure:
         const Control.Concurrent.QSemN.$WQSemN_info;
 },
 Control.Concurrent.QSemN.$WQSemN_entry() //  [R2]
         { []
         }
     {offset
       cdT9N: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdT9R; else goto cdT9S;
       cdT9R: // global
           R2 = R2;
           R1 = Control.Concurrent.QSemN.$WQSemN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdT9S: // global
           I64[Sp - 8] = block_cdT9K_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udT9W; else goto cdT9L;
       udT9W: // global
           call _cdT9K(R1) args: 0, res: 0, upd: 0;
       cdT9L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.$WQSemN_info" {
     Control.Concurrent.QSemN.$WQSemN_info:
         const Control.Concurrent.QSemN.$WQSemN_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdT9K() //  [R1]
         { []
         }
     {offset
       cdT9K: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdT9V; else goto cdT9U;
       cdT9V: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdT9U: // global
           _sdT6o::P64 = P64[R1 + 7];
           I64[Hp - 8] = Control.Concurrent.QSemN.QSemN_con_info;
           P64[Hp] = _sdT6o::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdT9K_info" {
     block_cdT9K_info:
         const _cdT9K;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.782007621 UTC

[section ""cstring" . Control.Concurrent.QSemN.$trModule4_bytes" {
     Control.Concurrent.QSemN.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.783813022 UTC

[section ""data" . Control.Concurrent.QSemN.$trModule3_closure" {
     Control.Concurrent.QSemN.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.QSemN.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.785702058 UTC

[section ""cstring" . Control.Concurrent.QSemN.$trModule2_bytes" {
     Control.Concurrent.QSemN.$trModule2_bytes:
         I8[] [67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,81,83,101,109,78]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.787471163 UTC

[section ""data" . Control.Concurrent.QSemN.$trModule1_closure" {
     Control.Concurrent.QSemN.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.QSemN.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.789366021 UTC

[section ""data" . Control.Concurrent.QSemN.$trModule_closure" {
     Control.Concurrent.QSemN.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Control.Concurrent.QSemN.$trModule3_closure+1;
         const Control.Concurrent.QSemN.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.791253573 UTC

[section ""data" . $krep_rdSvw_closure" {
     $krep_rdSvw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.793196899 UTC

[section ""data" . $krep1_rdSvx_closure" {
     $krep1_rdSvx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.79512869 UTC

[section ""data" . $krep2_rdSvy_closure" {
     $krep2_rdSvy_closure:
         const :_con_info;
         const $krep_rdSvw_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.797062228 UTC

[section ""data" . $krep3_rdSvz_closure" {
     $krep3_rdSvz_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep2_rdSvy_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.799178044 UTC

[section ""data" . $krep4_rdSvA_closure" {
     $krep4_rdSvA_closure:
         const :_con_info;
         const $krep3_rdSvz_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.800969755 UTC

[section ""data" . $krep5_rdSvB_closure" {
     $krep5_rdSvB_closure:
         const :_con_info;
         const $krep1_rdSvx_closure+1;
         const $krep4_rdSvA_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.803500408 UTC

[section ""data" . $krep6_rdSvC_closure" {
     $krep6_rdSvC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep5_rdSvB_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.805234937 UTC

[section ""data" . $krep7_rdSvD_closure" {
     $krep7_rdSvD_closure:
         const :_con_info;
         const $krep6_rdSvC_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.807066343 UTC

[section ""data" . $krep8_rdSvE_closure" {
     $krep8_rdSvE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep7_rdSvD_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.808919386 UTC

[section ""data" . $krep9_rdSvF_closure" {
     $krep9_rdSvF_closure:
         const :_con_info;
         const $krep8_rdSvE_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.811390661 UTC

[section ""data" . $krep10_rdSvG_closure" {
     $krep10_rdSvG_closure:
         const :_con_info;
         const $krep8_rdSvE_closure+1;
         const $krep9_rdSvF_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.813274135 UTC

[section ""data" . $krep11_rdSvH_closure" {
     $krep11_rdSvH_closure:
         const :_con_info;
         const $krep1_rdSvx_closure+1;
         const $krep10_rdSvG_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.815075477 UTC

[section ""data" . $krep12_rdSvI_closure" {
     $krep12_rdSvI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,,)_closure;
         const $krep11_rdSvH_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.816911373 UTC

[section ""data" . $krep13_rdSvJ_closure" {
     $krep13_rdSvJ_closure:
         const :_con_info;
         const $krep12_rdSvI_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.819065768 UTC

[section ""data" . $krep14_rdSvK_closure" {
     $krep14_rdSvK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep13_rdSvJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.821505838 UTC

[section ""cstring" . Control.Concurrent.QSemN.$tcQSemN2_bytes" {
     Control.Concurrent.QSemN.$tcQSemN2_bytes:
         I8[] [81,83,101,109,78]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.823912863 UTC

[section ""data" . Control.Concurrent.QSemN.$tcQSemN1_closure" {
     Control.Concurrent.QSemN.$tcQSemN1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.QSemN.$tcQSemN2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.826755712 UTC

[section ""data" . Control.Concurrent.QSemN.$tcQSemN_closure" {
     Control.Concurrent.QSemN.$tcQSemN_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Concurrent.QSemN.$trModule_closure+1;
         const Control.Concurrent.QSemN.$tcQSemN1_closure+1;
         const GHC.Types.krep$*_closure;
         const 8650881979471817661;
         const 11033619023634057930;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.828783267 UTC

[section ""data" . $krep15_rdSvL_closure" {
     $krep15_rdSvL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Control.Concurrent.QSemN.$tcQSemN_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.830885735 UTC

[section ""data" . Control.Concurrent.QSemN.$tc'QSemN1_closure" {
     Control.Concurrent.QSemN.$tc'QSemN1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_rdSvK_closure+1;
         const $krep15_rdSvL_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.833347094 UTC

[section ""cstring" . Control.Concurrent.QSemN.$tc'QSemN3_bytes" {
     Control.Concurrent.QSemN.$tc'QSemN3_bytes:
         I8[] [39,81,83,101,109,78]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.835031079 UTC

[section ""data" . Control.Concurrent.QSemN.$tc'QSemN2_closure" {
     Control.Concurrent.QSemN.$tc'QSemN2_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.QSemN.$tc'QSemN3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.836790063 UTC

[section ""data" . Control.Concurrent.QSemN.$tc'QSemN_closure" {
     Control.Concurrent.QSemN.$tc'QSemN_closure:
         const GHC.Types.TyCon_con_info;
         const Control.Concurrent.QSemN.$trModule_closure+1;
         const Control.Concurrent.QSemN.$tc'QSemN2_closure+1;
         const Control.Concurrent.QSemN.$tc'QSemN1_closure+4;
         const 15878277071781304355;
         const 273080421945023395;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.839325548 UTC

[section ""cstring" . lvl_rdSvM_bytes" {
     lvl_rdSvM_bytes:
         I8[] [110,101,119,81,83,101,109,78,58,32,73,110,105,116,105,97,108,32,113,117,97,110,116,105,116,121,32,109,117,115,116,32,98,101,32,110,111,110,45,110,101,103,97,116,105,118,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.842329446 UTC

[section ""data" . Control.Concurrent.QSemN.newQSemN2_closure" {
     Control.Concurrent.QSemN.newQSemN2_closure:
         const Control.Concurrent.QSemN.newQSemN2_info;
         const 0;
 },
 Control.Concurrent.QSemN.newQSemN2_entry() //  []
         { []
         }
     {offset
       cdTaI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdTaJ; else goto cdTaK;
       cdTaJ: // global
           R1 = Control.Concurrent.QSemN.newQSemN2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdTaK: // global
           I64[Sp - 8] = block_cdTaG_info;
           R2 = lvl_rdSvM_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.newQSemN2_info" {
     Control.Concurrent.QSemN.newQSemN2_info:
         const Control.Concurrent.QSemN.newQSemN2_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const SdTaO_srt;
 },
 _cdTaG() //  [R1]
         { []
         }
     {offset
       cdTaG: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTaG_info" {
     block_cdTaG_info:
         const _cdTaG;
         const 0;
         const 4294967326;
         const SdTaO_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.84914509 UTC

[section ""data" . Control.Concurrent.QSemN.newQSemN1_closure" {
     Control.Concurrent.QSemN.newQSemN1_closure:
         const Control.Concurrent.QSemN.newQSemN1_info;
         const 0;
 },
 Control.Concurrent.QSemN.newQSemN1_entry() //  [R2]
         { []
         }
     {offset
       cdTb5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdTb6; else goto cdTb7;
       cdTb6: // global
           R2 = R2;
           R1 = Control.Concurrent.QSemN.newQSemN1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdTb7: // global
           I64[Sp - 8] = block_cdTb2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udTbt; else goto cdTb3;
       udTbt: // global
           call _cdTb2(R1) args: 0, res: 0, upd: 0;
       cdTb3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.newQSemN1_info" {
     Control.Concurrent.QSemN.newQSemN1_info:
         const Control.Concurrent.QSemN.newQSemN1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SdTaO_srt+8;
 },
 _cdTb2() //  [R1]
         { []
         }
     {offset
       cdTb2: // global
           if (%MO_S_Ge_W64(I64[R1 + 7], 0)) goto cdTbl; else goto cdTbs;
       cdTbl: // global
           I64[Sp - 8] = block_cdTbe_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
       cdTbs: // global
           Sp = Sp + 8;
           call Control.Concurrent.QSemN.newQSemN2_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTb2_info" {
     block_cdTb2_info:
         const _cdTb2;
         const 0;
         const 4294967326;
         const SdTaO_srt+8;
 },
 _cdTbe() //  [R1]
         { []
         }
     {offset
       cdTbe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdTbo; else goto cdTbn;
       cdTbo: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdTbn: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp] = block_cdTbh_info;
           R2 = Hp - 23;
           _sdT6y::P64 = R1;
           R1 = R1;
           P64[Sp + 8] = _sdT6y::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTbe_info" {
     block_cdTbe_info:
         const _cdTbe;
         const 1;
         const 30;
 },
 _cdTbh() //  []
         { []
         }
     {offset
       cdTbh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdTbr; else goto cdTbq;
       cdTbr: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdTbq: // global
           I64[Hp - 8] = Control.Concurrent.QSemN.QSemN_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTbh_info" {
     block_cdTbh_info:
         const _cdTbh;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.8587034 UTC

[section ""data" . Control.Concurrent.QSemN.newQSemN_closure" {
     Control.Concurrent.QSemN.newQSemN_closure:
         const Control.Concurrent.QSemN.newQSemN_info;
         const 0;
 },
 Control.Concurrent.QSemN.newQSemN_entry() //  [R2]
         { []
         }
     {offset
       cdTbZ: // global
           R2 = R2;
           call Control.Concurrent.QSemN.newQSemN1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.newQSemN_info" {
     Control.Concurrent.QSemN.newQSemN_info:
         const Control.Concurrent.QSemN.newQSemN_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdTaO_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.862129741 UTC

[section ""data" . lvl1_rdSvN_closure" {
     lvl1_rdSvN_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.869584216 UTC

[section ""data" . Control.Concurrent.QSemN.$wloop_closure" {
     Control.Concurrent.QSemN.$wloop_closure:
         const Control.Concurrent.QSemN.$wloop_info;
 },
 sat_sdT6N_entry() //  [R1]
         { []
         }
     {offset
       cdTcs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdTct; else goto cdTcu;
       cdTct: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdTcu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.List.reverse1_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdT6N_info" {
     sat_sdT6N_info:
         const sat_sdT6N_entry;
         const 1;
         const 16;
 },
 Control.Concurrent.QSemN.$wloop_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdTcy: // global
           if ((Sp + -48) < SpLim) (likely: False) goto udTdR; else goto udTdQ;
       udTdR: // global
           I64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _cdTcz() args: 0, res: 0, upd: 0;
       udTdQ: // global
           I64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _cdTc8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.$wloop_info" {
     Control.Concurrent.QSemN.$wloop_info:
         const Control.Concurrent.QSemN.$wloop_entry;
         const 0;
         const 14;
         const 17179869203;
 },
 _cdTc8() //  []
         { []
         }
     {offset
       cdTc8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdTcC; else goto cdTcB;
       cdTcC: // global
           HpAlloc = 32;
           call _cdTcz() args: 0, res: 0, upd: 0;
       cdTcB: // global
           _sdT6D::P64 = P64[Sp + 8];
           _sdT6G::I64 = I64[Sp];
           if (_sdT6G::I64 != 0) goto cdTcw; else goto cdTcx;
       cdTcw: // global
           Hp = Hp - 32;
           I64[Sp] = block_cdTcd_info;
           R1 = _sdT6D::P64;
           I64[Sp + 8] = _sdT6G::I64;
           if (R1 & 7 != 0) goto udTdW; else goto cdTce;
       udTdW: // global
           call _cdTcd(R1) args: 0, res: 0, upd: 0;
       cdTce: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdTcx: // global
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = lvl1_rdSvN_closure+1;
           P64[Hp - 8] = _sdT6D::P64;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cdTcz() //  []
         { []
         }
     {offset
       cdTcz: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = Control.Concurrent.QSemN.$wloop_closure;
           Sp = Sp + 24;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cdTcd() //  [R1]
         { []
         }
     {offset
       cdTcd: // global
           if (R1 & 7 == 1) goto cdTcF; else goto cdTd1;
       cdTcF: // global
           I64[Sp] = block_cdTci_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto udTdY; else goto cdTcj;
       udTdY: // global
           call _cdTci(R1) args: 0, res: 0, upd: 0;
       cdTcj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdTd1: // global
           I64[Sp - 16] = block_cdTcU_info;
           _sdT6H::P64 = R1;
           _sdT6P::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sdT6P::P64;
           P64[Sp] = _sdT6H::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udTdZ; else goto cdTcV;
       udTdZ: // global
           call _cdTcU(R1) args: 0, res: 0, upd: 0;
       cdTcV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTcd_info" {
     block_cdTcd_info:
         const _cdTcd;
         const 66;
         const 30;
 },
 _cdTci() //  [R1]
         { []
         }
     {offset
       cdTci: // global
           _sdT6G::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto cdTcK; else goto cdTcO;
       cdTcK: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdTcN; else goto cdTcM;
       cdTcN: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdTcM: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sdT6G::I64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdTcO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdTcR; else goto cdTcQ;
       cdTcR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdTcQ: // global
           I64[Hp - 16] = sat_sdT6N_info;
           P64[Hp] = R1;
           I64[Sp] = _sdT6G::I64;
           P64[Sp + 8] = Hp - 16;
           P64[Sp + 16] = GHC.Types.[]_closure+1;
           call _cdTc8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdTci_info" {
     block_cdTci_info:
         const _cdTci;
         const 194;
         const 30;
 },
 _cdTcU() //  [R1]
         { []
         }
     {offset
       cdTcU: // global
           I64[Sp - 8] = block_cdTcZ_info;
           _sdT6S::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _sdT6S::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udTe3; else goto cdTd3;
       udTe3: // global
           call _cdTcZ(R1) args: 0, res: 0, upd: 0;
       cdTd3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTcU_info" {
     block_cdTcU_info:
         const _cdTcU;
         const 260;
         const 30;
 },
 _cdTcZ() //  [R1]
         { []
         }
     {offset
       cdTcZ: // global
           _sdT6S::P64 = P64[Sp + 8];
           _sdT6U::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_sdT6U::I64,
                            I64[Sp + 32])) goto cdTdd; else goto cdTds;
       cdTdd: // global
           I64[Sp + 8] = block_cdTdb_info;
           R1 = _sdT6S::P64;
           I64[Sp + 24] = _sdT6U::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udTe4; else goto cdTde;
       udTe4: // global
           call _cdTdb(R1) args: 0, res: 0, upd: 0;
       cdTde: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdTds: // global
           I64[Sp + 8] = block_cdTdr_info;
           R1 = _sdT6S::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udTe5; else goto cdTdt;
       udTe5: // global
           call _cdTdr(R1) args: 0, res: 0, upd: 0;
       cdTdt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTcZ_info" {
     block_cdTcZ_info:
         const _cdTcZ;
         const 517;
         const 30;
 },
 _cdTdb() //  [R1]
         { []
         }
     {offset
       cdTdb: // global
           I64[Sp] = block_cdTdi_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 7];
           call stg_tryPutMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTdb_info" {
     block_cdTdb_info:
         const _cdTdb;
         const 388;
         const 30;
 },
 _cdTdi() //  [R1]
         { []
         }
     {offset
       cdTdi: // global
           _sdT6E::P64 = P64[Sp + 32];
           _sdT6G::I64 = I64[Sp + 24];
           _sdT6P::P64 = P64[Sp + 8];
           if (R1 == 0) goto cdTdp; else goto cdTdo;
       cdTdp: // global
           I64[Sp + 16] = _sdT6G::I64;
           P64[Sp + 24] = _sdT6P::P64;
           P64[Sp + 32] = _sdT6E::P64;
           Sp = Sp + 16;
           goto udTe7;
       cdTdo: // global
           I64[Sp + 16] = _sdT6G::I64 - I64[Sp + 16];
           P64[Sp + 24] = _sdT6P::P64;
           P64[Sp + 32] = _sdT6E::P64;
           Sp = Sp + 16;
           goto udTe7;
       udTe7: // global
           call _cdTc8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdTdi_info" {
     block_cdTdi_info:
         const _cdTdi;
         const 388;
         const 30;
 },
 _cdTdr() //  [R1]
         { []
         }
     {offset
       cdTdr: // global
           I64[Sp] = block_cdTdx_info;
           R1 = P64[R1 + 7];
           call stg_isEmptyMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTdr_info" {
     block_cdTdr_info:
         const _cdTdr;
         const 260;
         const 30;
 },
 _cdTdx() //  [R1]
         { []
         }
     {offset
       cdTdx: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdTdC; else goto cdTdB;
       cdTdC: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdTdB: // global
           _sdT6E::P64 = P64[Sp + 32];
           _sdT6G::I64 = I64[Sp + 24];
           if (R1 == 0) goto cdTdJ; else goto cdTdI;
       cdTdJ: // global
           Hp = Hp - 48;
           I64[Sp + 16] = _sdT6G::I64;
           P64[Sp + 24] = P64[Sp + 8];
           P64[Sp + 32] = _sdT6E::P64;
           Sp = Sp + 16;
           call _cdTc8() args: 0, res: 0, upd: 0;
       cdTdI: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sdT6G::I64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sdT6E::P64;
           R1 = Hp - 23;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTdx_info" {
     block_cdTdx_info:
         const _cdTdx;
         const 260;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.896241181 UTC

[section ""data" . Control.Concurrent.QSemN.$wsignalQSemN_closure" {
     Control.Concurrent.QSemN.$wsignalQSemN_closure:
         const Control.Concurrent.QSemN.$wsignalQSemN_info;
 },
 sat_sdT7y_entry() //  [R1]
         { []
         }
     {offset
       cdTfL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdTfZ; else goto cdTg0;
       cdTfZ: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdTg0: // global
           I64[Sp - 24] = block_cdTfG_info;
           _sdT7c::P64 = P64[R1 + 7];
           _sdT7d::I64 = I64[R1 + 15];
           R1 = _sdT7c::P64;
           P64[Sp - 16] = _sdT7c::P64;
           I64[Sp - 8] = _sdT7d::I64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdT7y_info" {
     sat_sdT7y_info:
         const sat_sdT7y_entry;
         const 4294967297;
         const 12;
         const 4294967299;
 },
 _cdTfG() //  [R1]
         { []
         }
     {offset
       cdTfG: // global
           I64[Sp] = block_cdTfI_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udTg7; else goto cdTfJ;
       udTg7: // global
           call _cdTfI(R1) args: 0, res: 0, upd: 0;
       cdTfJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTfG_info" {
     block_cdTfG_info:
         const _cdTfG;
         const 130;
         const 30;
 },
 _cdTfI() //  [R1]
         { []
         }
     {offset
       cdTfI: // global
           I64[Sp - 16] = block_cdTfO_info;
           _sdT7p::P64 = P64[R1 + 15];
           _sdT7q::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sdT7q::P64;
           P64[Sp] = _sdT7p::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udTg8; else goto cdTfP;
       udTg8: // global
           call _cdTfO(R1) args: 0, res: 0, upd: 0;
       cdTfP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTfI_info" {
     block_cdTfI_info:
         const _cdTfI;
         const 130;
         const 30;
 },
 _cdTfO() //  [R1]
         { []
         }
     {offset
       cdTfO: // global
           _sdT7p::P64 = P64[Sp + 16];
           _sdT7t::I64 = I64[Sp + 32] + I64[R1 + 7];
           I64[Sp + 16] = block_cdTfW_info;
           R4 = P64[Sp + 8];
           R3 = _sdT7p::P64;
           R2 = _sdT7t::I64;
           Sp = Sp + 16;
           call Control.Concurrent.QSemN.$wloop_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTfO_info" {
     block_cdTfO_info:
         const _cdTfO;
         const 516;
         const 30;
 },
 _cdTfW() //  [R1]
         { []
         }
     {offset
       cdTfW: // global
           I64[Sp + 16] = block_cdTfY_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTfW_info" {
     block_cdTfW_info:
         const _cdTfW;
         const 130;
         const 30;
 },
 _cdTfY() //  []
         { []
         }
     {offset
       cdTfY: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTfY_info" {
     block_cdTfY_info:
         const _cdTfY;
         const 0;
         const 30;
 },
 Control.Concurrent.QSemN.$wsignalQSemN_entry() //  [R2, R3]
         { []
         }
     {offset
       cdTgc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdTgd; else goto cdTge;
       cdTgd: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.QSemN.$wsignalQSemN_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdTge: // global
           I64[Sp - 24] = block_cdTfx_info;
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.$wsignalQSemN_info" {
     Control.Concurrent.QSemN.$wsignalQSemN_info:
         const Control.Concurrent.QSemN.$wsignalQSemN_entry;
         const 0;
         const 14;
         const 12884901902;
 },
 _cdTfx() //  [R1]
         { []
         }
     {offset
       cdTfx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdTgh; else goto cdTgg;
       cdTgh: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdTgg: // global
           _sdT7c::P64 = P64[Sp + 8];
           if (R1 == 1) goto cdTgb; else goto cdTga;
       cdTgb: // global
           Hp = Hp - 24;
           I64[Sp] = block_cdTgj_info;
           R1 = _sdT7c::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       cdTga: // global
           I64[Hp - 16] = sat_sdT7y_info;
           P64[Hp - 8] = _sdT7c::P64;
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTfx_info" {
     block_cdTfx_info:
         const _cdTfx;
         const 130;
         const 30;
 },
 _cdTgj() //  [R1]
         { []
         }
     {offset
       cdTgj: // global
           I64[Sp] = block_cdTgl_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udTgH; else goto cdTgm;
       udTgH: // global
           call _cdTgl(R1) args: 0, res: 0, upd: 0;
       cdTgm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTgj_info" {
     block_cdTgj_info:
         const _cdTgj;
         const 130;
         const 30;
 },
 _cdTgl() //  [R1]
         { []
         }
     {offset
       cdTgl: // global
           I64[Sp - 16] = block_cdTgq_info;
           _sdT7E::P64 = P64[R1 + 15];
           _sdT7F::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sdT7F::P64;
           P64[Sp] = _sdT7E::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udTgI; else goto cdTgr;
       udTgI: // global
           call _cdTgq(R1) args: 0, res: 0, upd: 0;
       cdTgr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTgl_info" {
     block_cdTgl_info:
         const _cdTgl;
         const 130;
         const 30;
 },
 _cdTgq() //  [R1]
         { []
         }
     {offset
       cdTgq: // global
           _sdT7E::P64 = P64[Sp + 16];
           _sdT7I::I64 = I64[Sp + 32] + I64[R1 + 7];
           I64[Sp + 16] = block_cdTgy_info;
           R4 = P64[Sp + 8];
           R3 = _sdT7E::P64;
           R2 = _sdT7I::I64;
           Sp = Sp + 16;
           call Control.Concurrent.QSemN.$wloop_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTgq_info" {
     block_cdTgq_info:
         const _cdTgq;
         const 516;
         const 30;
 },
 _cdTgy() //  [R1]
         { []
         }
     {offset
       cdTgy: // global
           I64[Sp + 16] = block_cdTgA_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTgy_info" {
     block_cdTgy_info:
         const _cdTgy;
         const 130;
         const 30;
 },
 _cdTgA() //  []
         { []
         }
     {offset
       cdTgA: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTgA_info" {
     block_cdTgA_info:
         const _cdTgA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.921208095 UTC

[section ""data" . Control.Concurrent.QSemN.signalQSemN1_closure" {
     Control.Concurrent.QSemN.signalQSemN1_closure:
         const Control.Concurrent.QSemN.signalQSemN1_info;
 },
 Control.Concurrent.QSemN.signalQSemN1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdThV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdThZ; else goto cdTi0;
       cdThZ: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.QSemN.signalQSemN1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdTi0: // global
           I64[Sp - 16] = block_cdThS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udTi8; else goto cdThT;
       udTi8: // global
           call _cdThS(R1) args: 0, res: 0, upd: 0;
       cdThT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.signalQSemN1_info" {
     Control.Concurrent.QSemN.signalQSemN1_info:
         const Control.Concurrent.QSemN.signalQSemN1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cdThS() //  [R1]
         { []
         }
     {offset
       cdThS: // global
           I64[Sp] = block_cdThY_info;
           _sdT7R::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sdT7R::P64;
           if (R1 & 7 != 0) goto udTi7; else goto cdTi2;
       udTi7: // global
           call _cdThY(R1) args: 0, res: 0, upd: 0;
       cdTi2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdThS_info" {
     block_cdThS_info:
         const _cdThS;
         const 1;
         const 30;
 },
 _cdThY() //  [R1]
         { []
         }
     {offset
       cdThY: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Control.Concurrent.QSemN.$wsignalQSemN_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdThY_info" {
     block_cdThY_info:
         const _cdThY;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.928005933 UTC

[section ""data" . Control.Concurrent.QSemN.signalQSemN_closure" {
     Control.Concurrent.QSemN.signalQSemN_closure:
         const Control.Concurrent.QSemN.signalQSemN_info;
 },
 Control.Concurrent.QSemN.signalQSemN_entry() //  [R2, R3]
         { []
         }
     {offset
       cdTis: // global
           R3 = R3;
           R2 = R2;
           call Control.Concurrent.QSemN.signalQSemN1_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.signalQSemN_info" {
     Control.Concurrent.QSemN.signalQSemN_info:
         const Control.Concurrent.QSemN.signalQSemN_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.937339146 UTC

[section ""data" . lvl2_rdSvO_closure" {
     lvl2_rdSvO_closure:
         const lvl2_rdSvO_info;
 },
 lvl2_rdSvO_slow() //  [R1]
         { []
         }
     {offset
       cdTiA: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call lvl2_rdSvO_entry(R6,
                                 R5,
                                 R4,
                                 R3,
                                 R2,
                                 R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdT8p_entry() //  [R1]
         { []
         }
     {offset
       cdTiQ: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cdTiR; else goto cdTiS;
       cdTiR: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdTiS: // global
           I64[Sp - 32] = block_cdTiL_info;
           _sdT7U::P64 = P64[R1 + 7];
           _sdT7V::P64 = P64[R1 + 15];
           _sdT7W::P64 = P64[R1 + 23];
           R1 = _sdT7U::P64;
           P64[Sp - 24] = _sdT7U::P64;
           P64[Sp - 16] = _sdT7V::P64;
           P64[Sp - 8] = _sdT7W::P64;
           Sp = Sp - 32;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdT8p_info" {
     sat_sdT8p_info:
         const sat_sdT8p_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _cdTiL() //  [R1]
         { []
         }
     {offset
       cdTiL: // global
           I64[Sp] = block_cdTiN_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udTjz; else goto cdTiO;
       udTjz: // global
           call _cdTiN(R1) args: 0, res: 0, upd: 0;
       cdTiO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTiL_info" {
     block_cdTiL_info:
         const _cdTiL;
         const 3;
         const 30;
 },
 _cdTiN() //  [R1]
         { []
         }
     {offset
       cdTiN: // global
           I64[Sp - 32] = block_cdTiW_info;
           _sdT85::P64 = R1;
           _sdT86::P64 = P64[R1 + 7];
           _sdT87::P64 = P64[R1 + 15];
           _sdT88::P64 = P64[R1 + 23];
           R1 = P64[Sp + 24];
           P64[Sp - 24] = _sdT86::P64;
           P64[Sp - 16] = _sdT87::P64;
           P64[Sp - 8] = _sdT88::P64;
           P64[Sp] = _sdT85::P64;
           Sp = Sp - 32;
           call stg_tryTakeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTiN_info" {
     block_cdTiN_info:
         const _cdTiN;
         const 3;
         const 30;
 },
 _cdTiW() //  [R1]
         { []
         }
     {offset
       cdTiW: // global
           if (R1 == 0) goto cdTjv; else goto cdTjl;
       cdTjv: // global
           I64[Sp + 24] = block_cdTjs_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 56];
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cdTjl: // global
           I64[Sp] = block_cdTj4_info;
           R1 = P64[Sp + 48];
           if (R1 & 7 != 0) goto udTjA; else goto cdTj5;
       udTjA: // global
           call _cdTj4(R1) args: 0, res: 0, upd: 0;
       cdTj5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTiW_info" {
     block_cdTiW_info:
         const _cdTiW;
         const 7;
         const 30;
 },
 _cdTjs() //  []
         { []
         }
     {offset
       cdTjs: // global
           I64[Sp + 32] = block_cdTju_info;
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTjs_info" {
     block_cdTjs_info:
         const _cdTjs;
         const 772;
         const 30;
 },
 _cdTj4() //  [R1]
         { []
         }
     {offset
       cdTj4: // global
           _sdT86::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdTj9_info;
           _sdT8f::I64 = I64[R1 + 7];
           R1 = _sdT86::P64;
           I64[Sp + 56] = _sdT8f::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udTjB; else goto cdTja;
       udTjB: // global
           call _cdTj9(R1) args: 0, res: 0, upd: 0;
       cdTja: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTj4_info" {
     block_cdTj4_info:
         const _cdTj4;
         const 6663;
         const 30;
 },
 _cdTj9() //  [R1]
         { []
         }
     {offset
       cdTj9: // global
           _sdT8i::I64 = I64[Sp + 48] + I64[R1 + 7];
           I64[Sp + 24] = block_cdTjh_info;
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = _sdT8i::I64;
           Sp = Sp + 24;
           call Control.Concurrent.QSemN.$wloop_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTj9_info" {
     block_cdTj9_info:
         const _cdTj9;
         const 3334;
         const 30;
 },
 _cdTjh() //  [R1]
         { []
         }
     {offset
       cdTjh: // global
           I64[Sp + 24] = block_cdTju_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTjh_info" {
     block_cdTjh_info:
         const _cdTjh;
         const 387;
         const 30;
 },
 _cdTju() //  []
         { []
         }
     {offset
       cdTju: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTju_info" {
     block_cdTju_info:
         const _cdTju;
         const 0;
         const 30;
 },
 lvl2_rdSvO_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cdTjF: // global
           _sdT7Z::I64 = R6;
           _sdT7Y::P64 = R5;
           _sdT7W::P64 = R4;
           _sdT7V::P64 = R3;
           _sdT7U::P64 = R2;
           if ((Sp + -72) < SpLim) (likely: False) goto cdTjG; else goto cdTjH;
       cdTjH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdTjJ; else goto cdTjI;
       cdTjJ: // global
           HpAlloc = 32;
           goto cdTjG;
       cdTjG: // global
           R1 = lvl2_rdSvO_closure;
           P64[Sp - 40] = _sdT7U::P64;
           P64[Sp - 32] = _sdT7V::P64;
           P64[Sp - 24] = _sdT7W::P64;
           P64[Sp - 16] = _sdT7Y::P64;
           I64[Sp - 8] = _sdT7Z::I64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cdTjI: // global
           if (_sdT7Z::I64 == 1) goto cdTjE; else goto cdTjD;
       cdTjE: // global
           Hp = Hp - 32;
           I64[Sp - 40] = block_cdTjO_info;
           R1 = _sdT7U::P64;
           P64[Sp - 32] = _sdT7U::P64;
           P64[Sp - 24] = _sdT7V::P64;
           P64[Sp - 16] = _sdT7W::P64;
           P64[Sp - 8] = _sdT7Y::P64;
           Sp = Sp - 40;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       cdTjD: // global
           I64[Hp - 24] = sat_sdT8p_info;
           P64[Hp - 16] = _sdT7U::P64;
           P64[Hp - 8] = _sdT7V::P64;
           P64[Hp] = _sdT7W::P64;
           I64[Sp - 16] = block_cdTjK_info;
           R1 = Hp - 23;
           P64[Sp - 8] = _sdT7Y::P64;
           Sp = Sp - 16;
           call stg_maskUninterruptible#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_rdSvO_info" {
     lvl2_rdSvO_info:
         const lvl2_rdSvO_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 1029;
         const lvl2_rdSvO_slow;
 },
 _cdTjO() //  [R1]
         { []
         }
     {offset
       cdTjO: // global
           I64[Sp] = block_cdTjQ_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udTkz; else goto cdTjS;
       udTkz: // global
           call _cdTjQ(R1) args: 0, res: 0, upd: 0;
       cdTjS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTjO_info" {
     block_cdTjO_info:
         const _cdTjO;
         const 4;
         const 30;
 },
 _cdTjQ() //  [R1]
         { []
         }
     {offset
       cdTjQ: // global
           I64[Sp - 32] = block_cdTjW_info;
           _sdT8w::P64 = R1;
           _sdT8x::P64 = P64[R1 + 7];
           _sdT8y::P64 = P64[R1 + 15];
           _sdT8z::P64 = P64[R1 + 23];
           R1 = P64[Sp + 24];
           P64[Sp - 24] = _sdT8x::P64;
           P64[Sp - 16] = _sdT8y::P64;
           P64[Sp - 8] = _sdT8z::P64;
           P64[Sp] = _sdT8w::P64;
           Sp = Sp - 32;
           call stg_tryTakeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTjQ_info" {
     block_cdTjQ_info:
         const _cdTjQ;
         const 4;
         const 30;
 },
 _cdTjW() //  [R1]
         { []
         }
     {offset
       cdTjW: // global
           if (R1 == 0) goto cdTkv; else goto cdTkl;
       cdTkv: // global
           I64[Sp + 24] = block_cdTks_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 56];
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cdTkl: // global
           I64[Sp] = block_cdTk4_info;
           R1 = P64[Sp + 48];
           if (R1 & 7 != 0) goto udTkA; else goto cdTk5;
       udTkA: // global
           call _cdTk4(R1) args: 0, res: 0, upd: 0;
       cdTk5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTjW_info" {
     block_cdTjW_info:
         const _cdTjW;
         const 8;
         const 30;
 },
 _cdTks() //  []
         { []
         }
     {offset
       cdTks: // global
           I64[Sp + 32] = block_cdTku_info;
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTks_info" {
     block_cdTks_info:
         const _cdTks;
         const 773;
         const 30;
 },
 _cdTk4() //  [R1]
         { []
         }
     {offset
       cdTk4: // global
           _sdT8x::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdTk9_info;
           _sdT8G::I64 = I64[R1 + 7];
           R1 = _sdT8x::P64;
           I64[Sp + 56] = _sdT8G::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udTkB; else goto cdTka;
       udTkB: // global
           call _cdTk9(R1) args: 0, res: 0, upd: 0;
       cdTka: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTk4_info" {
     block_cdTk4_info:
         const _cdTk4;
         const 6664;
         const 30;
 },
 _cdTk9() //  [R1]
         { []
         }
     {offset
       cdTk9: // global
           _sdT8J::I64 = I64[Sp + 48] + I64[R1 + 7];
           I64[Sp + 24] = block_cdTkh_info;
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = _sdT8J::I64;
           Sp = Sp + 24;
           call Control.Concurrent.QSemN.$wloop_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTk9_info" {
     block_cdTk9_info:
         const _cdTk9;
         const 3335;
         const 30;
 },
 _cdTkh() //  [R1]
         { []
         }
     {offset
       cdTkh: // global
           I64[Sp + 24] = block_cdTku_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTkh_info" {
     block_cdTkh_info:
         const _cdTkh;
         const 388;
         const 30;
 },
 _cdTku() //  []
         { []
         }
     {offset
       cdTku: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTku_info" {
     block_cdTku_info:
         const _cdTku;
         const 1;
         const 30;
 },
 _cdTjK() //  []
         { []
         }
     {offset
       cdTjK: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTjK_info" {
     block_cdTjK_info:
         const _cdTjK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.972122855 UTC

[section ""data" . Control.Concurrent.QSemN.$wlvl_closure" {
     Control.Concurrent.QSemN.$wlvl_closure:
         const Control.Concurrent.QSemN.$wlvl_info;
 },
 Control.Concurrent.QSemN.$wlvl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdTmg: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdTmh; else goto cdTmi;
       cdTmh: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.QSemN.$wlvl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdTmi: // global
           I64[Sp - 40] = block_cdTme_info;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.$wlvl_info" {
     Control.Concurrent.QSemN.$wlvl_info:
         const Control.Concurrent.QSemN.$wlvl_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _cdTme() //  [R1]
         { []
         }
     {offset
       cdTme: // global
           R6 = R1;
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 24];
           Sp = Sp + 40;
           call lvl2_rdSvO_entry(R6, R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTme_info" {
     block_cdTme_info:
         const _cdTme;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:08.981964148 UTC

[section ""data" . Control.Concurrent.QSemN.$wwaitQSemN_closure" {
     Control.Concurrent.QSemN.$wwaitQSemN_closure:
         const Control.Concurrent.QSemN.$wwaitQSemN_info;
 },
 sat_sdT9x_entry() //  [R1, R2]
         { []
         }
     {offset
       cdTnb: // global
           R5 = R2;
           R4 = P64[R1 + 6];
           R3 = P64[R1 + 22];
           R2 = P64[R1 + 14];
           call Control.Concurrent.QSemN.$wlvl_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdT9x_info" {
     sat_sdT9x_info:
         const sat_sdT9x_entry;
         const 3;
         const 8;
         const 8589934597;
 },
 sat_sdT9u_entry() //  [R1]
         { []
         }
     {offset
       cdTnj: // global
           R1 = P64[R1 + 7];
           call stg_takeMVar#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdT9u_info" {
     sat_sdT9u_info:
         const sat_sdT9u_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 io_sdT94_entry() //  [R1]
         { []
         }
     {offset
       cdTnm: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cdTnn; else goto cdTno;
       cdTnn: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdTno: // global
           I64[Sp - 24] = block_cdTmE_info;
           _sdT8Y::P64 = P64[R1 + 7];
           _sdT8Z::I64 = I64[R1 + 15];
           R1 = _sdT8Y::P64;
           P64[Sp - 16] = _sdT8Y::P64;
           I64[Sp - 8] = _sdT8Z::I64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sdT94_info" {
     io_sdT94_info:
         const io_sdT94_entry;
         const 4294967297;
         const 12;
         const 4294967299;
 },
 _cdTmE() //  [R1]
         { []
         }
     {offset
       cdTmE: // global
           I64[Sp] = block_cdTmG_info;
           R1 = R1;
           if (R1 & 7 != 0) goto udTnI; else goto cdTmH;
       udTnI: // global
           call _cdTmG(R1) args: 0, res: 0, upd: 0;
       cdTmH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTmE_info" {
     block_cdTmE_info:
         const _cdTmE;
         const 130;
         const 30;
 },
 _cdTmG() //  [R1]
         { []
         }
     {offset
       cdTmG: // global
           I64[Sp - 16] = block_cdTmL_info;
           _sdT9b::P64 = P64[R1 + 15];
           _sdT9c::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sdT9c::P64;
           P64[Sp] = _sdT9b::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udTnJ; else goto cdTmM;
       udTnJ: // global
           call _cdTmL(R1) args: 0, res: 0, upd: 0;
       cdTmM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTmG_info" {
     block_cdTmG_info:
         const _cdTmG;
         const 130;
         const 30;
 },
 _cdTmL() //  [R1]
         { []
         }
     {offset
       cdTmL: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdTnt; else goto cdTns;
       cdTnt: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdTns: // global
           _sdT9f::I64 = I64[R1 + 7] - I64[Sp + 32];
           if (%MO_S_Ge_W64(_sdT9f::I64, 0)) goto cdTny; else goto cdTnB;
       cdTny: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = _sdT9f::I64;
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = Hp - 39;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 32] = block_cdTnw_info;
           R2 = Hp - 23;
           R1 = P64[Sp + 24];
           Sp = Sp + 32;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       cdTnB: // global
           Hp = Hp - 48;
           I64[Sp - 8] = block_cdTmX_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTmL_info" {
     block_cdTmL_info:
         const _cdTmL;
         const 516;
         const 30;
 },
 _cdTnw() //  []
         { []
         }
     {offset
       cdTnw: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTnw_info" {
     block_cdTnw_info:
         const _cdTnw;
         const 0;
         const 30;
 },
 _cdTmX() //  [R1]
         { []
         }
     {offset
       cdTmX: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto cdTnE; else goto cdTnD;
       cdTnE: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdTnD: // global
           I64[Hp - 104] = GHC.Types.I#_con_info;
           I64[Hp - 96] = I64[Sp + 40];
           I64[Hp - 88] = GHC.MVar.MVar_con_info;
           P64[Hp - 80] = R1;
           I64[Hp - 72] = (,)_con_info;
           _cdTmZ::P64 = Hp - 103;
           P64[Hp - 64] = _cdTmZ::P64;
           P64[Hp - 56] = Hp - 87;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 71;
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = (,,)_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = Hp - 46;
           I64[Sp + 16] = block_cdTn4_info;
           R2 = Hp - 23;
           _sdT9m::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 24] = _sdT9m::P64;
           P64[Sp + 40] = _cdTmZ::P64;
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTmX_info" {
     block_cdTmX_info:
         const _cdTmX;
         const 1029;
         const 30;
 },
 _cdTn4() //  []
         { []
         }
     {offset
       cdTn4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdTnH; else goto cdTnG;
       cdTnH: // global
           HpAlloc = 48;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdTnG: // global
           I64[Hp - 40] = sat_sdT9x_info;
           P64[Hp - 32] = P64[Sp + 16];
           _sdT9m::P64 = P64[Sp + 8];
           P64[Hp - 24] = _sdT9m::P64;
           P64[Hp - 16] = P64[Sp + 24];
           I64[Hp - 8] = sat_sdT9u_info;
           P64[Hp] = _sdT9m::P64;
           R2 = Hp - 38;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTn4_info" {
     block_cdTn4_info:
         const _cdTn4;
         const 3;
         const 30;
 },
 Control.Concurrent.QSemN.$wwaitQSemN_entry() //  [R2, R3]
         { []
         }
     {offset
       cdTnO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdTnP; else goto cdTnQ;
       cdTnP: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.QSemN.$wwaitQSemN_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdTnQ: // global
           I64[Sp - 24] = block_cdTmx_info;
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.$wwaitQSemN_info" {
     Control.Concurrent.QSemN.$wwaitQSemN_info:
         const Control.Concurrent.QSemN.$wwaitQSemN_entry;
         const 0;
         const 14;
         const 12884901902;
 },
 _cdTmx() //  [R1]
         { []
         }
     {offset
       cdTmx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdTnT; else goto cdTnS;
       cdTnT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdTnS: // global
           I64[Hp - 16] = io_sdT94_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           _cdTmz::P64 = Hp - 15;
           if (R1 == 0) goto cdTnN; else goto cdTnM;
       cdTnN: // global
           R1 = _cdTmz::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cdTnM: // global
           R1 = _cdTmz::P64;
           Sp = Sp + 24;
           call io_sdT94_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTmx_info" {
     block_cdTmx_info:
         const _cdTmx;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.004726123 UTC

[section ""data" . Control.Concurrent.QSemN.waitQSemN1_closure" {
     Control.Concurrent.QSemN.waitQSemN1_closure:
         const Control.Concurrent.QSemN.waitQSemN1_info;
 },
 Control.Concurrent.QSemN.waitQSemN1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdTpb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdTpf; else goto cdTpg;
       cdTpf: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.QSemN.waitQSemN1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdTpg: // global
           I64[Sp - 16] = block_cdTp8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udTpo; else goto cdTp9;
       udTpo: // global
           call _cdTp8(R1) args: 0, res: 0, upd: 0;
       cdTp9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.waitQSemN1_info" {
     Control.Concurrent.QSemN.waitQSemN1_info:
         const Control.Concurrent.QSemN.waitQSemN1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cdTp8() //  [R1]
         { []
         }
     {offset
       cdTp8: // global
           I64[Sp] = block_cdTpe_info;
           _sdT9D::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sdT9D::P64;
           if (R1 & 7 != 0) goto udTpn; else goto cdTpi;
       udTpn: // global
           call _cdTpe(R1) args: 0, res: 0, upd: 0;
       cdTpi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTp8_info" {
     block_cdTp8_info:
         const _cdTp8;
         const 1;
         const 30;
 },
 _cdTpe() //  [R1]
         { []
         }
     {offset
       cdTpe: // global
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Control.Concurrent.QSemN.$wwaitQSemN_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdTpe_info" {
     block_cdTpe_info:
         const _cdTpe;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.012082683 UTC

[section ""data" . Control.Concurrent.QSemN.waitQSemN_closure" {
     Control.Concurrent.QSemN.waitQSemN_closure:
         const Control.Concurrent.QSemN.waitQSemN_info;
 },
 Control.Concurrent.QSemN.waitQSemN_entry() //  [R2, R3]
         { []
         }
     {offset
       cdTpI: // global
           R3 = R3;
           R2 = R2;
           call Control.Concurrent.QSemN.waitQSemN1_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.waitQSemN_info" {
     Control.Concurrent.QSemN.waitQSemN_info:
         const Control.Concurrent.QSemN.waitQSemN_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.015655607 UTC

[section ""data" . Control.Concurrent.QSemN.QSemN_closure" {
     Control.Concurrent.QSemN.QSemN_closure:
         const Control.Concurrent.QSemN.QSemN_info;
 },
 Control.Concurrent.QSemN.QSemN_entry() //  [R2]
         { []
         }
     {offset
       cdTpU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdTpY; else goto cdTpX;
       cdTpY: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = Control.Concurrent.QSemN.QSemN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdTpX: // global
           I64[Hp - 8] = Control.Concurrent.QSemN.QSemN_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.QSemN_info" {
     Control.Concurrent.QSemN.QSemN_info:
         const Control.Concurrent.QSemN.QSemN_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.019386446 UTC

[section ""cstring" . idTq6_str" {
     idTq6_str:
         I8[] [98,97,115,101,58,67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,81,83,101,109,78,46,81,83,101,109,78]
 },
 Control.Concurrent.QSemN.QSemN_con_entry() //  [R1]
         { []
         }
     {offset
       cdTq5: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.QSemN.QSemN_con_info" {
     Control.Concurrent.QSemN.QSemN_con_info:
         const Control.Concurrent.QSemN.QSemN_con_entry;
         const 1;
         const 2;
         const idTq6_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:09.022608341 UTC

[section ""relreadonly" . SdTaO_srt" {
     SdTaO_srt:
         const GHC.IO.failIO1_closure;
         const Control.Concurrent.QSemN.newQSemN2_closure;
         const Control.Concurrent.QSemN.newQSemN1_closure;
 }]

