
==================== Pre unarise: ====================
2018-03-16 16:09:09.223147769 UTC

Control.Concurrent.QSem.$WQSem [InlPrag=INLINE[2]]
  :: GHC.MVar.MVar
       (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> Control.Concurrent.QSem.QSem
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m,
 Unf=OtherCon []] =
    [] \r [dt_sdTOX]
        case dt_sdTOX of {
          GHC.MVar.MVar dt_sdTOZ [Occ=Once] ->
              Control.Concurrent.QSem.QSem [dt_sdTOZ];
        };

Control.Concurrent.QSem.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Concurrent.QSem.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSem.$trModule4];

Control.Concurrent.QSem.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Concurrent.QSem"#;

Control.Concurrent.QSem.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSem.$trModule2];

Control.Concurrent.QSem.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Concurrent.QSem.$trModule3
                                     Control.Concurrent.QSem.$trModule1];

$krep_rdTOF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep1_rdTOG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rdTOH :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rdTOF GHC.Types.[]];

$krep3_rdTOI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep2_rdTOH];

$krep4_rdTOJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_rdTOI GHC.Types.[]];

$krep5_rdTOK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep4_rdTOJ];

$krep6_rdTOL :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_rdTOK GHC.Types.[]];

$krep7_rdTOM :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_rdTOK $krep6_rdTOL];

$krep8_rdTON :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rdTOG $krep7_rdTOM];

$krep9_rdTOO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,,)
                                              $krep8_rdTON];

$krep10_rdTOP :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_rdTOO GHC.Types.[]];

$krep11_rdTOQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep10_rdTOP];

Control.Concurrent.QSem.$tcQSem2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "QSem"#;

Control.Concurrent.QSem.$tcQSem1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSem.$tcQSem2];

Control.Concurrent.QSem.$tcQSem :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9564161763912145234##
                                    3945938196429110556##
                                    Control.Concurrent.QSem.$trModule
                                    Control.Concurrent.QSem.$tcQSem1
                                    0#
                                    GHC.Types.krep$*];

$krep12_rdTOR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Control.Concurrent.QSem.$tcQSem
                                              GHC.Types.[]];

Control.Concurrent.QSem.$tc'QSem1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_rdTOQ $krep12_rdTOR];

Control.Concurrent.QSem.$tc'QSem3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'QSem"#;

Control.Concurrent.QSem.$tc'QSem2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSem.$tc'QSem3];

Control.Concurrent.QSem.$tc'QSem :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16012040391974534726##
                                    6627878139257558952##
                                    Control.Concurrent.QSem.$trModule
                                    Control.Concurrent.QSem.$tc'QSem2
                                    0#
                                    Control.Concurrent.QSem.$tc'QSem1];

lvl_rdTOS :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "newQSem: Initial quantity must be non-negative"#;

Control.Concurrent.QSem.newQSem2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Control.Concurrent.QSem.QSem #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sdTP0]
        case GHC.CString.unpackCString# lvl_rdTOS of sat_sdTP1 {
          __DEFAULT -> GHC.IO.failIO1 sat_sdTP1 eta_sdTP0;
        };

Control.Concurrent.QSem.newQSem1
  :: GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Control.Concurrent.QSem.QSem #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [initial_sdTP2 eta_sdTP3]
        case initial_sdTP2 of wild_sdTP4 {
          GHC.Types.I# x_sdTP5 [Occ=Once] ->
              case <# [x_sdTP5 0#] of {
                __DEFAULT ->
                    case newMVar# [eta_sdTP3] of {
                      (#,#) ipv_sdTP8 [Occ=Once] ipv1_sdTP9 ->
                          let {
                            sat_sdTPa [Occ=Once]
                              :: (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
                            [LclId] =
                                CCCS (,,)! [wild_sdTP4 GHC.Types.[] GHC.Types.[]];
                          } in 
                            case putMVar# [ipv1_sdTP9 sat_sdTPa ipv_sdTP8] of s2#_sdTPb {
                              __DEFAULT ->
                                  let {
                                    sat_sdTPc [Occ=Once] :: Control.Concurrent.QSem.QSem
                                    [LclId] =
                                        CCCS Control.Concurrent.QSem.QSem! [ipv1_sdTP9];
                                  } in  (#,#) [s2#_sdTPb sat_sdTPc];
                            };
                    };
                1# -> Control.Concurrent.QSem.newQSem2 eta_sdTP3;
              };
        };

Control.Concurrent.QSem.newQSem
  :: GHC.Types.Int -> GHC.Types.IO Control.Concurrent.QSem.QSem
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Concurrent.QSem.newQSem1 eta_B2 eta_B1;

lvl1_rdTOT :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl2_rdTOU :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

lvl3_rdTOV
  :: (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,,)! [lvl2_rdTOU GHC.Types.[] GHC.Types.[]];

Control.Concurrent.QSem.signalQSem2 [Occ=LoopBreaker]
  :: [GHC.MVar.MVar ()]
     -> [GHC.MVar.MVar ()]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()]) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sdTPd ds1_sdTPe eta_sdTPf]
        case ds_sdTPd of {
          [] ->
              case ds1_sdTPe of wild1_sdTPh {
                [] -> (#,#) [eta_sdTPf lvl3_rdTOV];
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    case GHC.List.reverse1 wild1_sdTPh GHC.Types.[] of sat_sdTPk {
                      __DEFAULT ->
                          Control.Concurrent.QSem.signalQSem2
                              sat_sdTPk GHC.Types.[] eta_sdTPf;
                    };
              };
          : b_sdTPl [Occ=Once!] bs_sdTPm [Occ=Once*] ->
              case b_sdTPl of {
                GHC.MVar.MVar mvar#_sdTPo [Occ=Once] ->
                    case tryPutMVar# [mvar#_sdTPo GHC.Tuple.() eta_sdTPf] of {
                      (#,#) ipv_sdTPq [Occ=Once*] ipv1_sdTPr [Occ=Once!] ->
                          case ipv1_sdTPr of {
                            __DEFAULT ->
                                let {
                                  sat_sdTPt [Occ=Once]
                                    :: (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
                                  [LclId] =
                                      CCCS (,,)! [lvl1_rdTOT bs_sdTPm ds1_sdTPe];
                                } in  (#,#) [ipv_sdTPq sat_sdTPt];
                            0# ->
                                Control.Concurrent.QSem.signalQSem2 bs_sdTPm ds1_sdTPe ipv_sdTPq;
                          };
                    };
              };
        };

Control.Concurrent.QSem.$wsignalQSem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_sdTPu w_sdTPv]
        case getMaskingState# [w_sdTPv] of {
          (#,#) ipv_sdTPx [Occ=Once*] ipv1_sdTPy [Occ=Once!] ->
              case ipv1_sdTPy of {
                __DEFAULT ->
                    let {
                      sat_sdTPT [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [ww_sdTPu] \r [s_sdTPA]
                              case takeMVar# [ww_sdTPu s_sdTPA] of {
                                (#,#) ipv2_sdTPC [Occ=Once*] ipv3_sdTPD [Occ=Once!] ->
                                    case ipv3_sdTPD of {
                                      (,,) i_sdTPF [Occ=Once!]
                                           a1_sdTPG [Occ=Once*]
                                           a2_sdTPH [Occ=Once*] ->
                                          case i_sdTPF of {
                                            GHC.Types.I# x_sdTPJ [Occ=Once!] ->
                                                case x_sdTPJ of wild2_sdTPK {
                                                  __DEFAULT ->
                                                      case +# [wild2_sdTPK 1#] of sat_sdTPL {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_sdTPM [Occ=Once] :: GHC.Types.Int
                                                              [LclId] =
                                                                  CCCS GHC.Types.I#! [sat_sdTPL]; } in
                                                            let {
                                                              sat_sdTPN [Occ=Once]
                                                                :: (GHC.Types.Int,
                                                                    [GHC.MVar.MVar ()],
                                                                    [GHC.MVar.MVar ()])
                                                              [LclId] =
                                                                  CCCS (,,)! [sat_sdTPM
                                                                              a1_sdTPG
                                                                              a2_sdTPH];
                                                            } in 
                                                              case
                                                                  putMVar# [ww_sdTPu
                                                                            sat_sdTPN
                                                                            ipv2_sdTPC]
                                                              of
                                                              s2#_sdTPO
                                                              { __DEFAULT ->
                                                                    (#,#) [s2#_sdTPO GHC.Tuple.()];
                                                              };
                                                      };
                                                  0# ->
                                                      case
                                                          Control.Concurrent.QSem.signalQSem2
                                                              a1_sdTPG a2_sdTPH ipv2_sdTPC
                                                      of
                                                      { (#,#) ipv4_sdTPQ [Occ=Once]
                                                              ipv5_sdTPR [Occ=Once] ->
                                                            case
                                                                putMVar# [ww_sdTPu
                                                                          ipv5_sdTPR
                                                                          ipv4_sdTPQ]
                                                            of
                                                            s2#_sdTPS
                                                            { __DEFAULT ->
                                                                  (#,#) [s2#_sdTPS GHC.Tuple.()];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in  maskUninterruptible# [sat_sdTPT ipv_sdTPx];
                1# ->
                    case takeMVar# [ww_sdTPu ipv_sdTPx] of {
                      (#,#) ipv2_sdTPV [Occ=Once*] ipv3_sdTPW [Occ=Once!] ->
                          case ipv3_sdTPW of {
                            (,,) i_sdTPY [Occ=Once!]
                                 a1_sdTPZ [Occ=Once*]
                                 a2_sdTQ0 [Occ=Once*] ->
                                case i_sdTPY of {
                                  GHC.Types.I# x_sdTQ2 [Occ=Once!] ->
                                      case x_sdTQ2 of wild2_sdTQ3 {
                                        __DEFAULT ->
                                            case +# [wild2_sdTQ3 1#] of sat_sdTQ4 {
                                              __DEFAULT ->
                                                  let {
                                                    sat_sdTQ5 [Occ=Once] :: GHC.Types.Int
                                                    [LclId] =
                                                        CCCS GHC.Types.I#! [sat_sdTQ4]; } in
                                                  let {
                                                    sat_sdTQ6 [Occ=Once]
                                                      :: (GHC.Types.Int, [GHC.MVar.MVar ()],
                                                          [GHC.MVar.MVar ()])
                                                    [LclId] =
                                                        CCCS (,,)! [sat_sdTQ5 a1_sdTPZ a2_sdTQ0];
                                                  } in 
                                                    case
                                                        putMVar# [ww_sdTPu sat_sdTQ6 ipv2_sdTPV]
                                                    of
                                                    s2#_sdTQ7
                                                    { __DEFAULT -> (#,#) [s2#_sdTQ7 GHC.Tuple.()];
                                                    };
                                            };
                                        0# ->
                                            case
                                                Control.Concurrent.QSem.signalQSem2
                                                    a1_sdTPZ a2_sdTQ0 ipv2_sdTPV
                                            of
                                            { (#,#) ipv4_sdTQ9 [Occ=Once] ipv5_sdTQa [Occ=Once] ->
                                                  case
                                                      putMVar# [ww_sdTPu ipv5_sdTQa ipv4_sdTQ9]
                                                  of
                                                  s2#_sdTQb
                                                  { __DEFAULT -> (#,#) [s2#_sdTQb GHC.Tuple.()];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Control.Concurrent.QSem.signalQSem1 [InlPrag=NOUSERINLINE[0]]
  :: Control.Concurrent.QSem.QSem
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sdTQc w1_sdTQd]
        case w_sdTQc of {
          Control.Concurrent.QSem.QSem ww1_sdTQf [Occ=Once] ->
              Control.Concurrent.QSem.$wsignalQSem ww1_sdTQf w1_sdTQd;
        };

Control.Concurrent.QSem.signalQSem
  :: Control.Concurrent.QSem.QSem -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Concurrent.QSem.signalQSem1 eta_B2 eta_B1;

Control.Concurrent.QSem.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar# GHC.Prim.RealWorld ()
     -> GHC.Prim.MVar#
          GHC.Prim.RealWorld
          (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Exception.SomeException
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdTQg w_sdTQh w1_sdTQi w2_sdTQj]
        case getMaskingState# [w1_sdTQi] of {
          (#,#) ipv_sdTQl [Occ=Once*] ipv1_sdTQm [Occ=Once!] ->
              case ipv1_sdTQm of {
                __DEFAULT ->
                    let {
                      sat_sdTQO [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [ww_sdTQg w_sdTQh] \r [s_sdTQo]
                              case takeMVar# [w_sdTQh s_sdTQo] of {
                                (#,#) ipv2_sdTQq [Occ=Once] ipv3_sdTQr [Occ=Once!] ->
                                    case ipv3_sdTQr of wild_sdTQs {
                                      (,,) i_sdTQt [Occ=Once!]
                                           b1_sdTQu [Occ=Once*]
                                           b2_sdTQv [Occ=Once*] ->
                                          case tryTakeMVar# [ww_sdTQg ipv2_sdTQq] of {
                                            (#,,#) ipv4_sdTQx [Occ=Once*]
                                                   ipv5_sdTQy [Occ=Once!]
                                                   _ [Occ=Dead] ->
                                                case ipv5_sdTQy of {
                                                  __DEFAULT ->
                                                      case i_sdTQt of {
                                                        GHC.Types.I# x_sdTQC [Occ=Once!] ->
                                                            case x_sdTQC of wild2_sdTQD {
                                                              __DEFAULT ->
                                                                  case
                                                                      +# [wild2_sdTQD 1#]
                                                                  of
                                                                  sat_sdTQE
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_sdTQF [Occ=Once]
                                                                            :: GHC.Types.Int
                                                                          [LclId] =
                                                                              CCCS GHC.Types.I#! [sat_sdTQE]; } in
                                                                        let {
                                                                          sat_sdTQG [Occ=Once]
                                                                            :: (GHC.Types.Int,
                                                                                [GHC.MVar.MVar ()],
                                                                                [GHC.MVar.MVar ()])
                                                                          [LclId] =
                                                                              CCCS (,,)! [sat_sdTQF
                                                                                          b1_sdTQu
                                                                                          b2_sdTQv];
                                                                        } in 
                                                                          case
                                                                              putMVar# [w_sdTQh
                                                                                        sat_sdTQG
                                                                                        ipv4_sdTQx]
                                                                          of
                                                                          s2#_sdTQH
                                                                          { __DEFAULT ->
                                                                                (#,#) [s2#_sdTQH
                                                                                       GHC.Tuple.()];
                                                                          };
                                                                  };
                                                              0# ->
                                                                  case
                                                                      Control.Concurrent.QSem.signalQSem2
                                                                          b1_sdTQu
                                                                          b2_sdTQv
                                                                          ipv4_sdTQx
                                                                  of
                                                                  { (#,#) ipv7_sdTQJ [Occ=Once]
                                                                          ipv8_sdTQK [Occ=Once] ->
                                                                        case
                                                                            putMVar# [w_sdTQh
                                                                                      ipv8_sdTQK
                                                                                      ipv7_sdTQJ]
                                                                        of
                                                                        s2#_sdTQL
                                                                        { __DEFAULT ->
                                                                              (#,#) [s2#_sdTQL
                                                                                     GHC.Tuple.()];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                  0# ->
                                                      case
                                                          putMVar# [ww_sdTQg
                                                                    GHC.Tuple.()
                                                                    ipv4_sdTQx]
                                                      of
                                                      s2#_sdTQM
                                                      { __DEFAULT ->
                                                            case
                                                                putMVar# [w_sdTQh
                                                                          wild_sdTQs
                                                                          s2#_sdTQM]
                                                            of
                                                            s2#1_sdTQN
                                                            { __DEFAULT ->
                                                                  (#,#) [s2#1_sdTQN GHC.Tuple.()];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in 
                      case maskUninterruptible# [sat_sdTQO ipv_sdTQl] of {
                        (#,#) ipv2_sdTQQ [Occ=Once] _ [Occ=Dead] ->
                            raiseIO# [w2_sdTQj ipv2_sdTQQ];
                      };
                1# ->
                    case takeMVar# [w_sdTQh ipv_sdTQl] of {
                      (#,#) ipv2_sdTQT [Occ=Once] ipv3_sdTQU [Occ=Once!] ->
                          case ipv3_sdTQU of wild_sdTQV {
                            (,,) i_sdTQW [Occ=Once!]
                                 b1_sdTQX [Occ=Once*]
                                 b2_sdTQY [Occ=Once*] ->
                                case tryTakeMVar# [ww_sdTQg ipv2_sdTQT] of {
                                  (#,,#) ipv4_sdTR0 [Occ=Once*]
                                         ipv5_sdTR1 [Occ=Once!]
                                         _ [Occ=Dead] ->
                                      case ipv5_sdTR1 of {
                                        __DEFAULT ->
                                            case i_sdTQW of {
                                              GHC.Types.I# x_sdTR5 [Occ=Once!] ->
                                                  case x_sdTR5 of wild2_sdTR6 {
                                                    __DEFAULT ->
                                                        case +# [wild2_sdTR6 1#] of sat_sdTR7 {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_sdTR8 [Occ=Once]
                                                                  :: GHC.Types.Int
                                                                [LclId] =
                                                                    CCCS GHC.Types.I#! [sat_sdTR7]; } in
                                                              let {
                                                                sat_sdTR9 [Occ=Once]
                                                                  :: (GHC.Types.Int,
                                                                      [GHC.MVar.MVar ()],
                                                                      [GHC.MVar.MVar ()])
                                                                [LclId] =
                                                                    CCCS (,,)! [sat_sdTR8
                                                                                b1_sdTQX
                                                                                b2_sdTQY];
                                                              } in 
                                                                case
                                                                    putMVar# [w_sdTQh
                                                                              sat_sdTR9
                                                                              ipv4_sdTR0]
                                                                of
                                                                s2#_sdTRa
                                                                { __DEFAULT ->
                                                                      raiseIO# [w2_sdTQj s2#_sdTRa];
                                                                };
                                                        };
                                                    0# ->
                                                        case
                                                            Control.Concurrent.QSem.signalQSem2
                                                                b1_sdTQX b2_sdTQY ipv4_sdTR0
                                                        of
                                                        { (#,#) ipv7_sdTRc [Occ=Once]
                                                                ipv8_sdTRd [Occ=Once] ->
                                                              case
                                                                  putMVar# [w_sdTQh
                                                                            ipv8_sdTRd
                                                                            ipv7_sdTRc]
                                                              of
                                                              s2#_sdTRe
                                                              { __DEFAULT ->
                                                                    raiseIO# [w2_sdTQj s2#_sdTRe];
                                                              };
                                                        };
                                                  };
                                            };
                                        0# ->
                                            case
                                                putMVar# [ww_sdTQg GHC.Tuple.() ipv4_sdTR0]
                                            of
                                            s2#_sdTRf
                                            { __DEFAULT ->
                                                  case
                                                      putMVar# [w_sdTQh wild_sdTQV s2#_sdTRf]
                                                  of
                                                  s2#1_sdTRg
                                                  { __DEFAULT -> raiseIO# [w2_sdTQj s2#1_sdTRg];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Control.Concurrent.QSem.$wwaitQSem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_sdTRh w_sdTRi]
        case getMaskingState# [w_sdTRi] of {
          (#,#) ipv_sdTRk [Occ=Once*] ipv1_sdTRl [Occ=Once!] ->
              let {
                io_sdTRm [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                    [ww_sdTRh] \r [s_sdTRn]
                        case takeMVar# [ww_sdTRh s_sdTRn] of {
                          (#,#) ipv2_sdTRp [Occ=Once*] ipv3_sdTRq [Occ=Once!] ->
                              case ipv3_sdTRq of {
                                (,,) i_sdTRs [Occ=Once!]
                                     b1_sdTRt [Occ=Once*]
                                     b2_sdTRu [Occ=Once*] ->
                                    case i_sdTRs of wild1_sdTRv {
                                      GHC.Types.I# x_sdTRw [Occ=Once!] ->
                                          case x_sdTRw of wild2_sdTRx {
                                            __DEFAULT ->
                                                case -# [wild2_sdTRx 1#] of sat_sdTRy {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sdTRz [Occ=Once] :: GHC.Types.Int
                                                        [LclId] =
                                                            CCCS GHC.Types.I#! [sat_sdTRy]; } in
                                                      let {
                                                        sat_sdTRA [Occ=Once]
                                                          :: (GHC.Types.Int, [GHC.MVar.MVar ()],
                                                              [GHC.MVar.MVar ()])
                                                        [LclId] =
                                                            CCCS (,,)! [sat_sdTRz
                                                                        b1_sdTRt
                                                                        b2_sdTRu];
                                                      } in 
                                                        case
                                                            putMVar# [ww_sdTRh sat_sdTRA ipv2_sdTRp]
                                                        of
                                                        s2#_sdTRB
                                                        { __DEFAULT ->
                                                              (#,#) [s2#_sdTRB GHC.Tuple.()];
                                                        };
                                                };
                                            0# ->
                                                case newMVar# [ipv2_sdTRp] of {
                                                  (#,#) ipv4_sdTRD [Occ=Once] ipv5_sdTRE ->
                                                      let {
                                                        sat_sdTRF [Occ=Once] :: GHC.MVar.MVar ()
                                                        [LclId] =
                                                            CCCS GHC.MVar.MVar! [ipv5_sdTRE]; } in
                                                      let {
                                                        sat_sdTRG [Occ=Once] :: [GHC.MVar.MVar ()]
                                                        [LclId] =
                                                            CCCS :! [sat_sdTRF b2_sdTRu]; } in
                                                      let {
                                                        sat_sdTRH [Occ=Once]
                                                          :: (GHC.Types.Int, [GHC.MVar.MVar ()],
                                                              [GHC.MVar.MVar ()])
                                                        [LclId] =
                                                            CCCS (,,)! [wild1_sdTRv
                                                                        b1_sdTRt
                                                                        sat_sdTRG];
                                                      } in 
                                                        case
                                                            putMVar# [ww_sdTRh sat_sdTRH ipv4_sdTRD]
                                                        of
                                                        s2#_sdTRI
                                                        { __DEFAULT ->
                                                              let {
                                                                sat_sdTRN [Occ=Once]
                                                                  :: GHC.Exception.SomeException
                                                                     -> GHC.Prim.State#
                                                                          GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           () #)
                                                                [LclId] =
                                                                    [ww_sdTRh
                                                                     ipv5_sdTRE] \r [e1_sdTRL
                                                                                     s1_sdTRM]
                                                                        Control.Concurrent.QSem.$wlvl
                                                                            ipv5_sdTRE
                                                                            ww_sdTRh
                                                                            s1_sdTRM
                                                                            e1_sdTRL; } in
                                                              let {
                                                                sat_sdTRK [Occ=Once]
                                                                  :: GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           () #)
                                                                [LclId] =
                                                                    [ipv5_sdTRE] \r [eta_sdTRJ]
                                                                        takeMVar# [ipv5_sdTRE
                                                                                   eta_sdTRJ];
                                                              } in 
                                                                catch# [sat_sdTRK
                                                                        sat_sdTRN
                                                                        s2#_sdTRI];
                                                        };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case ipv1_sdTRl of {
                  __DEFAULT -> io_sdTRm ipv_sdTRk;
                  0# -> maskAsyncExceptions# [io_sdTRm ipv_sdTRk];
                };
        };

Control.Concurrent.QSem.waitQSem1 [InlPrag=NOUSERINLINE[0]]
  :: Control.Concurrent.QSem.QSem
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sdTRP w1_sdTRQ]
        case w_sdTRP of {
          Control.Concurrent.QSem.QSem ww1_sdTRS [Occ=Once] ->
              Control.Concurrent.QSem.$wwaitQSem ww1_sdTRS w1_sdTRQ;
        };

Control.Concurrent.QSem.waitQSem
  :: Control.Concurrent.QSem.QSem -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Concurrent.QSem.waitQSem1 eta_B2 eta_B1;

Control.Concurrent.QSem.QSem
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> Control.Concurrent.QSem.QSem
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] Control.Concurrent.QSem.QSem [eta_B1];


==================== STG syntax: ====================
2018-03-16 16:09:09.241195642 UTC

Control.Concurrent.QSem.$WQSem [InlPrag=INLINE[2]]
  :: GHC.MVar.MVar
       (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> Control.Concurrent.QSem.QSem
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m,
 Unf=OtherCon []] =
    [] \r [dt_sdTOX]
        case dt_sdTOX of {
          GHC.MVar.MVar dt_sdTOZ [Occ=Once] ->
              Control.Concurrent.QSem.QSem [dt_sdTOZ];
        };

Control.Concurrent.QSem.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Concurrent.QSem.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSem.$trModule4];

Control.Concurrent.QSem.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Concurrent.QSem"#;

Control.Concurrent.QSem.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSem.$trModule2];

Control.Concurrent.QSem.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Concurrent.QSem.$trModule3
                                     Control.Concurrent.QSem.$trModule1];

$krep_rdTOF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep1_rdTOG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rdTOH :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rdTOF GHC.Types.[]];

$krep3_rdTOI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep2_rdTOH];

$krep4_rdTOJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_rdTOI GHC.Types.[]];

$krep5_rdTOK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep4_rdTOJ];

$krep6_rdTOL :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_rdTOK GHC.Types.[]];

$krep7_rdTOM :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_rdTOK $krep6_rdTOL];

$krep8_rdTON :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rdTOG $krep7_rdTOM];

$krep9_rdTOO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,,)
                                              $krep8_rdTON];

$krep10_rdTOP :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_rdTOO GHC.Types.[]];

$krep11_rdTOQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep10_rdTOP];

Control.Concurrent.QSem.$tcQSem2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "QSem"#;

Control.Concurrent.QSem.$tcQSem1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSem.$tcQSem2];

Control.Concurrent.QSem.$tcQSem :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9564161763912145234##
                                    3945938196429110556##
                                    Control.Concurrent.QSem.$trModule
                                    Control.Concurrent.QSem.$tcQSem1
                                    0#
                                    GHC.Types.krep$*];

$krep12_rdTOR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Control.Concurrent.QSem.$tcQSem
                                              GHC.Types.[]];

Control.Concurrent.QSem.$tc'QSem1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_rdTOQ $krep12_rdTOR];

Control.Concurrent.QSem.$tc'QSem3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'QSem"#;

Control.Concurrent.QSem.$tc'QSem2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSem.$tc'QSem3];

Control.Concurrent.QSem.$tc'QSem :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16012040391974534726##
                                    6627878139257558952##
                                    Control.Concurrent.QSem.$trModule
                                    Control.Concurrent.QSem.$tc'QSem2
                                    0#
                                    Control.Concurrent.QSem.$tc'QSem1];

lvl_rdTOS :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "newQSem: Initial quantity must be non-negative"#;

Control.Concurrent.QSem.newQSem2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Control.Concurrent.QSem.QSem #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        case GHC.CString.unpackCString# lvl_rdTOS of sat_sdTP1 {
          __DEFAULT -> GHC.IO.failIO1 sat_sdTP1 GHC.Prim.void#;
        };

Control.Concurrent.QSem.newQSem1
  :: GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Control.Concurrent.QSem.QSem #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [initial_sdTP2 void_0E]
        case initial_sdTP2 of wild_sdTP4 {
          GHC.Types.I# x_sdTP5 [Occ=Once] ->
              case <# [x_sdTP5 0#] of {
                __DEFAULT ->
                    case newMVar# [GHC.Prim.void#] of {
                      Unit# ipv1_sdTP9 ->
                          let {
                            sat_sdTPa [Occ=Once]
                              :: (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
                            [LclId] =
                                CCCS (,,)! [wild_sdTP4 GHC.Types.[] GHC.Types.[]];
                          } in 
                            case putMVar# [ipv1_sdTP9 sat_sdTPa GHC.Prim.void#] of s2#_sdTPb {
                              (##) ->
                                  let {
                                    sat_sdTPc [Occ=Once] :: Control.Concurrent.QSem.QSem
                                    [LclId] =
                                        CCCS Control.Concurrent.QSem.QSem! [ipv1_sdTP9];
                                  } in  Unit# [sat_sdTPc];
                            };
                    };
                1# -> Control.Concurrent.QSem.newQSem2 GHC.Prim.void#;
              };
        };

Control.Concurrent.QSem.newQSem
  :: GHC.Types.Int -> GHC.Types.IO Control.Concurrent.QSem.QSem
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Control.Concurrent.QSem.newQSem1 eta_B2 GHC.Prim.void#;

lvl1_rdTOT :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl2_rdTOU :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

lvl3_rdTOV
  :: (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,,)! [lvl2_rdTOU GHC.Types.[] GHC.Types.[]];

Control.Concurrent.QSem.signalQSem2 [Occ=LoopBreaker]
  :: [GHC.MVar.MVar ()]
     -> [GHC.MVar.MVar ()]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()]) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sdTPd ds1_sdTPe void_0E]
        case ds_sdTPd of {
          [] ->
              case ds1_sdTPe of wild1_sdTPh {
                [] -> Unit# [lvl3_rdTOV];
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    case GHC.List.reverse1 wild1_sdTPh GHC.Types.[] of sat_sdTPk {
                      __DEFAULT ->
                          Control.Concurrent.QSem.signalQSem2
                              sat_sdTPk GHC.Types.[] GHC.Prim.void#;
                    };
              };
          : b_sdTPl [Occ=Once!] bs_sdTPm [Occ=Once*] ->
              case b_sdTPl of {
                GHC.MVar.MVar mvar#_sdTPo [Occ=Once] ->
                    case tryPutMVar# [mvar#_sdTPo GHC.Tuple.() GHC.Prim.void#] of {
                      Unit# ipv1_sdTPr [Occ=Once!] ->
                          case ipv1_sdTPr of {
                            __DEFAULT ->
                                let {
                                  sat_sdTPt [Occ=Once]
                                    :: (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
                                  [LclId] =
                                      CCCS (,,)! [lvl1_rdTOT bs_sdTPm ds1_sdTPe];
                                } in  Unit# [sat_sdTPt];
                            0# ->
                                Control.Concurrent.QSem.signalQSem2
                                    bs_sdTPm ds1_sdTPe GHC.Prim.void#;
                          };
                    };
              };
        };

Control.Concurrent.QSem.$wsignalQSem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_sdTPu void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sdTPy [Occ=Once!] ->
              case ipv1_sdTPy of {
                __DEFAULT ->
                    let {
                      sat_sdTPT [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [ww_sdTPu] \r [void_0E]
                              case takeMVar# [ww_sdTPu GHC.Prim.void#] of {
                                Unit# ipv3_sdTPD [Occ=Once!] ->
                                    case ipv3_sdTPD of {
                                      (,,) i_sdTPF [Occ=Once!]
                                           a1_sdTPG [Occ=Once*]
                                           a2_sdTPH [Occ=Once*] ->
                                          case i_sdTPF of {
                                            GHC.Types.I# x_sdTPJ [Occ=Once!] ->
                                                case x_sdTPJ of wild2_sdTPK {
                                                  __DEFAULT ->
                                                      case +# [wild2_sdTPK 1#] of sat_sdTPL {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_sdTPM [Occ=Once] :: GHC.Types.Int
                                                              [LclId] =
                                                                  CCCS GHC.Types.I#! [sat_sdTPL]; } in
                                                            let {
                                                              sat_sdTPN [Occ=Once]
                                                                :: (GHC.Types.Int,
                                                                    [GHC.MVar.MVar ()],
                                                                    [GHC.MVar.MVar ()])
                                                              [LclId] =
                                                                  CCCS (,,)! [sat_sdTPM
                                                                              a1_sdTPG
                                                                              a2_sdTPH];
                                                            } in 
                                                              case
                                                                  putMVar# [ww_sdTPu
                                                                            sat_sdTPN
                                                                            GHC.Prim.void#]
                                                              of
                                                              s2#_sdTPO
                                                              { (##) -> Unit# [GHC.Tuple.()];
                                                              };
                                                      };
                                                  0# ->
                                                      case
                                                          Control.Concurrent.QSem.signalQSem2
                                                              a1_sdTPG a2_sdTPH GHC.Prim.void#
                                                      of
                                                      { Unit# ipv5_sdTPR [Occ=Once] ->
                                                            case
                                                                putMVar# [ww_sdTPu
                                                                          ipv5_sdTPR
                                                                          GHC.Prim.void#]
                                                            of
                                                            s2#_sdTPS
                                                            { (##) -> Unit# [GHC.Tuple.()];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in  maskUninterruptible# [sat_sdTPT GHC.Prim.void#];
                1# ->
                    case takeMVar# [ww_sdTPu GHC.Prim.void#] of {
                      Unit# ipv3_sdTPW [Occ=Once!] ->
                          case ipv3_sdTPW of {
                            (,,) i_sdTPY [Occ=Once!]
                                 a1_sdTPZ [Occ=Once*]
                                 a2_sdTQ0 [Occ=Once*] ->
                                case i_sdTPY of {
                                  GHC.Types.I# x_sdTQ2 [Occ=Once!] ->
                                      case x_sdTQ2 of wild2_sdTQ3 {
                                        __DEFAULT ->
                                            case +# [wild2_sdTQ3 1#] of sat_sdTQ4 {
                                              __DEFAULT ->
                                                  let {
                                                    sat_sdTQ5 [Occ=Once] :: GHC.Types.Int
                                                    [LclId] =
                                                        CCCS GHC.Types.I#! [sat_sdTQ4]; } in
                                                  let {
                                                    sat_sdTQ6 [Occ=Once]
                                                      :: (GHC.Types.Int, [GHC.MVar.MVar ()],
                                                          [GHC.MVar.MVar ()])
                                                    [LclId] =
                                                        CCCS (,,)! [sat_sdTQ5 a1_sdTPZ a2_sdTQ0];
                                                  } in 
                                                    case
                                                        putMVar# [ww_sdTPu sat_sdTQ6 GHC.Prim.void#]
                                                    of
                                                    s2#_sdTQ7
                                                    { (##) -> Unit# [GHC.Tuple.()];
                                                    };
                                            };
                                        0# ->
                                            case
                                                Control.Concurrent.QSem.signalQSem2
                                                    a1_sdTPZ a2_sdTQ0 GHC.Prim.void#
                                            of
                                            { Unit# ipv5_sdTQa [Occ=Once] ->
                                                  case
                                                      putMVar# [ww_sdTPu ipv5_sdTQa GHC.Prim.void#]
                                                  of
                                                  s2#_sdTQb
                                                  { (##) -> Unit# [GHC.Tuple.()];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Control.Concurrent.QSem.signalQSem1 [InlPrag=NOUSERINLINE[0]]
  :: Control.Concurrent.QSem.QSem
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sdTQc void_0E]
        case w_sdTQc of {
          Control.Concurrent.QSem.QSem ww1_sdTQf [Occ=Once] ->
              Control.Concurrent.QSem.$wsignalQSem ww1_sdTQf GHC.Prim.void#;
        };

Control.Concurrent.QSem.signalQSem
  :: Control.Concurrent.QSem.QSem -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Control.Concurrent.QSem.signalQSem1 eta_B2 GHC.Prim.void#;

Control.Concurrent.QSem.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar# GHC.Prim.RealWorld ()
     -> GHC.Prim.MVar#
          GHC.Prim.RealWorld
          (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Exception.SomeException
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdTQg w_sdTQh void_0E w2_sdTQj]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sdTQm [Occ=Once!] ->
              case ipv1_sdTQm of {
                __DEFAULT ->
                    let {
                      sat_sdTQO [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [ww_sdTQg w_sdTQh] \r [void_0E]
                              case takeMVar# [w_sdTQh GHC.Prim.void#] of {
                                Unit# ipv3_sdTQr [Occ=Once!] ->
                                    case ipv3_sdTQr of wild_sdTQs {
                                      (,,) i_sdTQt [Occ=Once!]
                                           b1_sdTQu [Occ=Once*]
                                           b2_sdTQv [Occ=Once*] ->
                                          case tryTakeMVar# [ww_sdTQg GHC.Prim.void#] of {
                                            (#,#) ipv5_sdTQy [Occ=Once!] _ [Occ=Dead] ->
                                                case ipv5_sdTQy of {
                                                  __DEFAULT ->
                                                      case i_sdTQt of {
                                                        GHC.Types.I# x_sdTQC [Occ=Once!] ->
                                                            case x_sdTQC of wild2_sdTQD {
                                                              __DEFAULT ->
                                                                  case
                                                                      +# [wild2_sdTQD 1#]
                                                                  of
                                                                  sat_sdTQE
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_sdTQF [Occ=Once]
                                                                            :: GHC.Types.Int
                                                                          [LclId] =
                                                                              CCCS GHC.Types.I#! [sat_sdTQE]; } in
                                                                        let {
                                                                          sat_sdTQG [Occ=Once]
                                                                            :: (GHC.Types.Int,
                                                                                [GHC.MVar.MVar ()],
                                                                                [GHC.MVar.MVar ()])
                                                                          [LclId] =
                                                                              CCCS (,,)! [sat_sdTQF
                                                                                          b1_sdTQu
                                                                                          b2_sdTQv];
                                                                        } in 
                                                                          case
                                                                              putMVar# [w_sdTQh
                                                                                        sat_sdTQG
                                                                                        GHC.Prim.void#]
                                                                          of
                                                                          s2#_sdTQH
                                                                          { (##) ->
                                                                                Unit# [GHC.Tuple.()];
                                                                          };
                                                                  };
                                                              0# ->
                                                                  case
                                                                      Control.Concurrent.QSem.signalQSem2
                                                                          b1_sdTQu
                                                                          b2_sdTQv
                                                                          GHC.Prim.void#
                                                                  of
                                                                  { Unit# ipv8_sdTQK [Occ=Once] ->
                                                                        case
                                                                            putMVar# [w_sdTQh
                                                                                      ipv8_sdTQK
                                                                                      GHC.Prim.void#]
                                                                        of
                                                                        s2#_sdTQL
                                                                        { (##) ->
                                                                              Unit# [GHC.Tuple.()];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                  0# ->
                                                      case
                                                          putMVar# [ww_sdTQg
                                                                    GHC.Tuple.()
                                                                    GHC.Prim.void#]
                                                      of
                                                      s2#_sdTQM
                                                      { (##) ->
                                                            case
                                                                putMVar# [w_sdTQh
                                                                          wild_sdTQs
                                                                          GHC.Prim.void#]
                                                            of
                                                            s2#1_sdTQN
                                                            { (##) -> Unit# [GHC.Tuple.()];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in 
                      case maskUninterruptible# [sat_sdTQO GHC.Prim.void#] of {
                        Unit# _ [Occ=Dead] -> raiseIO# [w2_sdTQj GHC.Prim.void#];
                      };
                1# ->
                    case takeMVar# [w_sdTQh GHC.Prim.void#] of {
                      Unit# ipv3_sdTQU [Occ=Once!] ->
                          case ipv3_sdTQU of wild_sdTQV {
                            (,,) i_sdTQW [Occ=Once!]
                                 b1_sdTQX [Occ=Once*]
                                 b2_sdTQY [Occ=Once*] ->
                                case tryTakeMVar# [ww_sdTQg GHC.Prim.void#] of {
                                  (#,#) ipv5_sdTR1 [Occ=Once!] _ [Occ=Dead] ->
                                      case ipv5_sdTR1 of {
                                        __DEFAULT ->
                                            case i_sdTQW of {
                                              GHC.Types.I# x_sdTR5 [Occ=Once!] ->
                                                  case x_sdTR5 of wild2_sdTR6 {
                                                    __DEFAULT ->
                                                        case +# [wild2_sdTR6 1#] of sat_sdTR7 {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_sdTR8 [Occ=Once]
                                                                  :: GHC.Types.Int
                                                                [LclId] =
                                                                    CCCS GHC.Types.I#! [sat_sdTR7]; } in
                                                              let {
                                                                sat_sdTR9 [Occ=Once]
                                                                  :: (GHC.Types.Int,
                                                                      [GHC.MVar.MVar ()],
                                                                      [GHC.MVar.MVar ()])
                                                                [LclId] =
                                                                    CCCS (,,)! [sat_sdTR8
                                                                                b1_sdTQX
                                                                                b2_sdTQY];
                                                              } in 
                                                                case
                                                                    putMVar# [w_sdTQh
                                                                              sat_sdTR9
                                                                              GHC.Prim.void#]
                                                                of
                                                                s2#_sdTRa
                                                                { (##) ->
                                                                      raiseIO# [w2_sdTQj
                                                                                GHC.Prim.void#];
                                                                };
                                                        };
                                                    0# ->
                                                        case
                                                            Control.Concurrent.QSem.signalQSem2
                                                                b1_sdTQX b2_sdTQY GHC.Prim.void#
                                                        of
                                                        { Unit# ipv8_sdTRd [Occ=Once] ->
                                                              case
                                                                  putMVar# [w_sdTQh
                                                                            ipv8_sdTRd
                                                                            GHC.Prim.void#]
                                                              of
                                                              s2#_sdTRe
                                                              { (##) ->
                                                                    raiseIO# [w2_sdTQj
                                                                              GHC.Prim.void#];
                                                              };
                                                        };
                                                  };
                                            };
                                        0# ->
                                            case
                                                putMVar# [ww_sdTQg GHC.Tuple.() GHC.Prim.void#]
                                            of
                                            s2#_sdTRf
                                            { (##) ->
                                                  case
                                                      putMVar# [w_sdTQh wild_sdTQV GHC.Prim.void#]
                                                  of
                                                  s2#1_sdTRg
                                                  { (##) -> raiseIO# [w2_sdTQj GHC.Prim.void#];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Control.Concurrent.QSem.$wwaitQSem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_sdTRh void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sdTRl [Occ=Once!] ->
              let {
                io_sdTRm [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                    [ww_sdTRh] \r [void_0E]
                        case takeMVar# [ww_sdTRh GHC.Prim.void#] of {
                          Unit# ipv3_sdTRq [Occ=Once!] ->
                              case ipv3_sdTRq of {
                                (,,) i_sdTRs [Occ=Once!]
                                     b1_sdTRt [Occ=Once*]
                                     b2_sdTRu [Occ=Once*] ->
                                    case i_sdTRs of wild1_sdTRv {
                                      GHC.Types.I# x_sdTRw [Occ=Once!] ->
                                          case x_sdTRw of wild2_sdTRx {
                                            __DEFAULT ->
                                                case -# [wild2_sdTRx 1#] of sat_sdTRy {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sdTRz [Occ=Once] :: GHC.Types.Int
                                                        [LclId] =
                                                            CCCS GHC.Types.I#! [sat_sdTRy]; } in
                                                      let {
                                                        sat_sdTRA [Occ=Once]
                                                          :: (GHC.Types.Int, [GHC.MVar.MVar ()],
                                                              [GHC.MVar.MVar ()])
                                                        [LclId] =
                                                            CCCS (,,)! [sat_sdTRz
                                                                        b1_sdTRt
                                                                        b2_sdTRu];
                                                      } in 
                                                        case
                                                            putMVar# [ww_sdTRh
                                                                      sat_sdTRA
                                                                      GHC.Prim.void#]
                                                        of
                                                        s2#_sdTRB
                                                        { (##) -> Unit# [GHC.Tuple.()];
                                                        };
                                                };
                                            0# ->
                                                case newMVar# [GHC.Prim.void#] of {
                                                  Unit# ipv5_sdTRE ->
                                                      let {
                                                        sat_sdTRF [Occ=Once] :: GHC.MVar.MVar ()
                                                        [LclId] =
                                                            CCCS GHC.MVar.MVar! [ipv5_sdTRE]; } in
                                                      let {
                                                        sat_sdTRG [Occ=Once] :: [GHC.MVar.MVar ()]
                                                        [LclId] =
                                                            CCCS :! [sat_sdTRF b2_sdTRu]; } in
                                                      let {
                                                        sat_sdTRH [Occ=Once]
                                                          :: (GHC.Types.Int, [GHC.MVar.MVar ()],
                                                              [GHC.MVar.MVar ()])
                                                        [LclId] =
                                                            CCCS (,,)! [wild1_sdTRv
                                                                        b1_sdTRt
                                                                        sat_sdTRG];
                                                      } in 
                                                        case
                                                            putMVar# [ww_sdTRh
                                                                      sat_sdTRH
                                                                      GHC.Prim.void#]
                                                        of
                                                        s2#_sdTRI
                                                        { (##) ->
                                                              let {
                                                                sat_sdTRN [Occ=Once]
                                                                  :: GHC.Exception.SomeException
                                                                     -> GHC.Prim.State#
                                                                          GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           () #)
                                                                [LclId] =
                                                                    [ww_sdTRh
                                                                     ipv5_sdTRE] \r [e1_sdTRL
                                                                                     void_0E]
                                                                        Control.Concurrent.QSem.$wlvl
                                                                            ipv5_sdTRE
                                                                            ww_sdTRh
                                                                            GHC.Prim.void#
                                                                            e1_sdTRL; } in
                                                              let {
                                                                sat_sdTRK [Occ=Once]
                                                                  :: GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           () #)
                                                                [LclId] =
                                                                    [ipv5_sdTRE] \r [void_0E]
                                                                        takeMVar# [ipv5_sdTRE
                                                                                   GHC.Prim.void#];
                                                              } in 
                                                                catch# [sat_sdTRK
                                                                        sat_sdTRN
                                                                        GHC.Prim.void#];
                                                        };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case ipv1_sdTRl of {
                  __DEFAULT -> io_sdTRm GHC.Prim.void#;
                  0# -> maskAsyncExceptions# [io_sdTRm GHC.Prim.void#];
                };
        };

Control.Concurrent.QSem.waitQSem1 [InlPrag=NOUSERINLINE[0]]
  :: Control.Concurrent.QSem.QSem
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sdTRP void_0E]
        case w_sdTRP of {
          Control.Concurrent.QSem.QSem ww1_sdTRS [Occ=Once] ->
              Control.Concurrent.QSem.$wwaitQSem ww1_sdTRS GHC.Prim.void#;
        };

Control.Concurrent.QSem.waitQSem
  :: Control.Concurrent.QSem.QSem -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Control.Concurrent.QSem.waitQSem1 eta_B2 GHC.Prim.void#;

Control.Concurrent.QSem.QSem
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> Control.Concurrent.QSem.QSem
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] Control.Concurrent.QSem.QSem [eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:09:10.131393421 UTC

Control.Concurrent.QSem.$WQSem [InlPrag=INLINE[2]]
  :: GHC.MVar.MVar
       (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> Control.Concurrent.QSem.QSem
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m,
 Unf=OtherCon []] =
    [] \r [dt_sdUlP]
        case dt_sdUlP of {
          GHC.MVar.MVar dt_sdUlR [Occ=Once] ->
              Control.Concurrent.QSem.QSem [dt_sdUlR];
        };

Control.Concurrent.QSem.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Concurrent.QSem.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSem.$trModule4];

Control.Concurrent.QSem.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Concurrent.QSem"#;

Control.Concurrent.QSem.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSem.$trModule2];

Control.Concurrent.QSem.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Concurrent.QSem.$trModule3
                                     Control.Concurrent.QSem.$trModule1];

$krep_rdTOF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep1_rdTOG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rdTOH :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rdTOF GHC.Types.[]];

$krep3_rdTOI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep2_rdTOH];

$krep4_rdTOJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_rdTOI GHC.Types.[]];

$krep5_rdTOK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep4_rdTOJ];

$krep6_rdTOL :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_rdTOK GHC.Types.[]];

$krep7_rdTOM :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_rdTOK $krep6_rdTOL];

$krep8_rdTON :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rdTOG $krep7_rdTOM];

$krep9_rdTOO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,,)
                                              $krep8_rdTON];

$krep10_rdTOP :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_rdTOO GHC.Types.[]];

$krep11_rdTOQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep10_rdTOP];

Control.Concurrent.QSem.$tcQSem2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "QSem"#;

Control.Concurrent.QSem.$tcQSem1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSem.$tcQSem2];

Control.Concurrent.QSem.$tcQSem :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9564161763912145234##
                                    3945938196429110556##
                                    Control.Concurrent.QSem.$trModule
                                    Control.Concurrent.QSem.$tcQSem1
                                    0#
                                    GHC.Types.krep$*];

$krep12_rdTOR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Control.Concurrent.QSem.$tcQSem
                                              GHC.Types.[]];

Control.Concurrent.QSem.$tc'QSem1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_rdTOQ $krep12_rdTOR];

Control.Concurrent.QSem.$tc'QSem3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'QSem"#;

Control.Concurrent.QSem.$tc'QSem2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSem.$tc'QSem3];

Control.Concurrent.QSem.$tc'QSem :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16012040391974534726##
                                    6627878139257558952##
                                    Control.Concurrent.QSem.$trModule
                                    Control.Concurrent.QSem.$tc'QSem2
                                    0#
                                    Control.Concurrent.QSem.$tc'QSem1];

lvl_rdTOS :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "newQSem: Initial quantity must be non-negative"#;

Control.Concurrent.QSem.newQSem2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Control.Concurrent.QSem.QSem #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_sdUlS]
        case GHC.CString.unpackCString# lvl_rdTOS of sat_sdUlT {
          __DEFAULT -> GHC.IO.failIO1 sat_sdUlT eta_sdUlS;
        };

Control.Concurrent.QSem.newQSem1
  :: GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Control.Concurrent.QSem.QSem #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [initial_sdUlU eta_sdUlV]
        case initial_sdUlU of wild_sdUlW {
          GHC.Types.I# x_sdUlX [Occ=Once] ->
              case <# [x_sdUlX 0#] of {
                __DEFAULT ->
                    case newMVar# [eta_sdUlV] of {
                      (#,#) ipv_sdUm0 [Occ=Once] ipv1_sdUm1 ->
                          let {
                            sat_sdUm2 [Occ=Once]
                              :: (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
                            [LclId] =
                                CCCS (,,)! [wild_sdUlW GHC.Types.[] GHC.Types.[]];
                          } in 
                            case putMVar# [ipv1_sdUm1 sat_sdUm2 ipv_sdUm0] of s2#_sdUm3 {
                              __DEFAULT ->
                                  let {
                                    sat_sdUm4 [Occ=Once] :: Control.Concurrent.QSem.QSem
                                    [LclId] =
                                        CCCS Control.Concurrent.QSem.QSem! [ipv1_sdUm1];
                                  } in  (#,#) [s2#_sdUm3 sat_sdUm4];
                            };
                    };
                1# -> Control.Concurrent.QSem.newQSem2 eta_sdUlV;
              };
        };

Control.Concurrent.QSem.newQSem
  :: GHC.Types.Int -> GHC.Types.IO Control.Concurrent.QSem.QSem
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Concurrent.QSem.newQSem1 eta_B2 eta_B1;

lvl1_rdTOT :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl2_rdTOU :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

lvl3_rdTOV
  :: (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,,)! [lvl2_rdTOU GHC.Types.[] GHC.Types.[]];

Control.Concurrent.QSem.signalQSem2 [Occ=LoopBreaker]
  :: [GHC.MVar.MVar ()]
     -> [GHC.MVar.MVar ()]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()]) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sdUm5 ds1_sdUm6 eta_sdUm7]
        case ds_sdUm5 of {
          [] ->
              case ds1_sdUm6 of wild1_sdUm9 {
                [] -> (#,#) [eta_sdUm7 lvl3_rdTOV];
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    case GHC.List.reverse1 wild1_sdUm9 GHC.Types.[] of sat_sdUmc {
                      __DEFAULT ->
                          Control.Concurrent.QSem.signalQSem2
                              sat_sdUmc GHC.Types.[] eta_sdUm7;
                    };
              };
          : b_sdUmd [Occ=Once!] bs_sdUme [Occ=Once*] ->
              case b_sdUmd of {
                GHC.MVar.MVar mvar#_sdUmg [Occ=Once] ->
                    case tryPutMVar# [mvar#_sdUmg GHC.Tuple.() eta_sdUm7] of {
                      (#,#) ipv_sdUmi [Occ=Once*] ipv1_sdUmj [Occ=Once!] ->
                          case ipv1_sdUmj of {
                            __DEFAULT ->
                                let {
                                  sat_sdUml [Occ=Once]
                                    :: (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
                                  [LclId] =
                                      CCCS (,,)! [lvl1_rdTOT bs_sdUme ds1_sdUm6];
                                } in  (#,#) [ipv_sdUmi sat_sdUml];
                            0# ->
                                Control.Concurrent.QSem.signalQSem2 bs_sdUme ds1_sdUm6 ipv_sdUmi;
                          };
                    };
              };
        };

Control.Concurrent.QSem.$wsignalQSem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_sdUmm w_sdUmn]
        case getMaskingState# [w_sdUmn] of {
          (#,#) ipv_sdUmp [Occ=Once*] ipv1_sdUmq [Occ=Once!] ->
              case ipv1_sdUmq of {
                __DEFAULT ->
                    let {
                      sat_sdUmL [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [ww_sdUmm] \r [s_sdUms]
                              case takeMVar# [ww_sdUmm s_sdUms] of {
                                (#,#) ipv2_sdUmu [Occ=Once*] ipv3_sdUmv [Occ=Once!] ->
                                    case ipv3_sdUmv of {
                                      (,,) i_sdUmx [Occ=Once!]
                                           a1_sdUmy [Occ=Once*]
                                           a2_sdUmz [Occ=Once*] ->
                                          case i_sdUmx of {
                                            GHC.Types.I# x_sdUmB [Occ=Once!] ->
                                                case x_sdUmB of wild2_sdUmC {
                                                  __DEFAULT ->
                                                      case +# [wild2_sdUmC 1#] of sat_sdUmD {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_sdUmE [Occ=Once] :: GHC.Types.Int
                                                              [LclId] =
                                                                  CCCS GHC.Types.I#! [sat_sdUmD]; } in
                                                            let {
                                                              sat_sdUmF [Occ=Once]
                                                                :: (GHC.Types.Int,
                                                                    [GHC.MVar.MVar ()],
                                                                    [GHC.MVar.MVar ()])
                                                              [LclId] =
                                                                  CCCS (,,)! [sat_sdUmE
                                                                              a1_sdUmy
                                                                              a2_sdUmz];
                                                            } in 
                                                              case
                                                                  putMVar# [ww_sdUmm
                                                                            sat_sdUmF
                                                                            ipv2_sdUmu]
                                                              of
                                                              s2#_sdUmG
                                                              { __DEFAULT ->
                                                                    (#,#) [s2#_sdUmG GHC.Tuple.()];
                                                              };
                                                      };
                                                  0# ->
                                                      case
                                                          Control.Concurrent.QSem.signalQSem2
                                                              a1_sdUmy a2_sdUmz ipv2_sdUmu
                                                      of
                                                      { (#,#) ipv4_sdUmI [Occ=Once]
                                                              ipv5_sdUmJ [Occ=Once] ->
                                                            case
                                                                putMVar# [ww_sdUmm
                                                                          ipv5_sdUmJ
                                                                          ipv4_sdUmI]
                                                            of
                                                            s2#_sdUmK
                                                            { __DEFAULT ->
                                                                  (#,#) [s2#_sdUmK GHC.Tuple.()];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in  maskUninterruptible# [sat_sdUmL ipv_sdUmp];
                1# ->
                    case takeMVar# [ww_sdUmm ipv_sdUmp] of {
                      (#,#) ipv2_sdUmN [Occ=Once*] ipv3_sdUmO [Occ=Once!] ->
                          case ipv3_sdUmO of {
                            (,,) i_sdUmQ [Occ=Once!]
                                 a1_sdUmR [Occ=Once*]
                                 a2_sdUmS [Occ=Once*] ->
                                case i_sdUmQ of {
                                  GHC.Types.I# x_sdUmU [Occ=Once!] ->
                                      case x_sdUmU of wild2_sdUmV {
                                        __DEFAULT ->
                                            case +# [wild2_sdUmV 1#] of sat_sdUmW {
                                              __DEFAULT ->
                                                  let {
                                                    sat_sdUmX [Occ=Once] :: GHC.Types.Int
                                                    [LclId] =
                                                        CCCS GHC.Types.I#! [sat_sdUmW]; } in
                                                  let {
                                                    sat_sdUmY [Occ=Once]
                                                      :: (GHC.Types.Int, [GHC.MVar.MVar ()],
                                                          [GHC.MVar.MVar ()])
                                                    [LclId] =
                                                        CCCS (,,)! [sat_sdUmX a1_sdUmR a2_sdUmS];
                                                  } in 
                                                    case
                                                        putMVar# [ww_sdUmm sat_sdUmY ipv2_sdUmN]
                                                    of
                                                    s2#_sdUmZ
                                                    { __DEFAULT -> (#,#) [s2#_sdUmZ GHC.Tuple.()];
                                                    };
                                            };
                                        0# ->
                                            case
                                                Control.Concurrent.QSem.signalQSem2
                                                    a1_sdUmR a2_sdUmS ipv2_sdUmN
                                            of
                                            { (#,#) ipv4_sdUn1 [Occ=Once] ipv5_sdUn2 [Occ=Once] ->
                                                  case
                                                      putMVar# [ww_sdUmm ipv5_sdUn2 ipv4_sdUn1]
                                                  of
                                                  s2#_sdUn3
                                                  { __DEFAULT -> (#,#) [s2#_sdUn3 GHC.Tuple.()];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Control.Concurrent.QSem.signalQSem1 [InlPrag=NOUSERINLINE[0]]
  :: Control.Concurrent.QSem.QSem
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sdUn4 w1_sdUn5]
        case w_sdUn4 of {
          Control.Concurrent.QSem.QSem ww1_sdUn7 [Occ=Once] ->
              Control.Concurrent.QSem.$wsignalQSem ww1_sdUn7 w1_sdUn5;
        };

Control.Concurrent.QSem.signalQSem
  :: Control.Concurrent.QSem.QSem -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Concurrent.QSem.signalQSem1 eta_B2 eta_B1;

Control.Concurrent.QSem.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar# GHC.Prim.RealWorld ()
     -> GHC.Prim.MVar#
          GHC.Prim.RealWorld
          (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Exception.SomeException
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdUn8 w_sdUn9 w1_sdUna w2_sdUnb]
        case getMaskingState# [w1_sdUna] of {
          (#,#) ipv_sdUnd [Occ=Once*] ipv1_sdUne [Occ=Once!] ->
              case ipv1_sdUne of {
                __DEFAULT ->
                    let {
                      sat_sdUnG [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [ww_sdUn8 w_sdUn9] \r [s_sdUng]
                              case takeMVar# [w_sdUn9 s_sdUng] of {
                                (#,#) ipv2_sdUni [Occ=Once] ipv3_sdUnj [Occ=Once!] ->
                                    case ipv3_sdUnj of wild_sdUnk {
                                      (,,) i_sdUnl [Occ=Once!]
                                           b1_sdUnm [Occ=Once*]
                                           b2_sdUnn [Occ=Once*] ->
                                          case tryTakeMVar# [ww_sdUn8 ipv2_sdUni] of {
                                            (#,,#) ipv4_sdUnp [Occ=Once*]
                                                   ipv5_sdUnq [Occ=Once!]
                                                   _ [Occ=Dead] ->
                                                case ipv5_sdUnq of {
                                                  __DEFAULT ->
                                                      case i_sdUnl of {
                                                        GHC.Types.I# x_sdUnu [Occ=Once!] ->
                                                            case x_sdUnu of wild2_sdUnv {
                                                              __DEFAULT ->
                                                                  case
                                                                      +# [wild2_sdUnv 1#]
                                                                  of
                                                                  sat_sdUnw
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_sdUnx [Occ=Once]
                                                                            :: GHC.Types.Int
                                                                          [LclId] =
                                                                              CCCS GHC.Types.I#! [sat_sdUnw]; } in
                                                                        let {
                                                                          sat_sdUny [Occ=Once]
                                                                            :: (GHC.Types.Int,
                                                                                [GHC.MVar.MVar ()],
                                                                                [GHC.MVar.MVar ()])
                                                                          [LclId] =
                                                                              CCCS (,,)! [sat_sdUnx
                                                                                          b1_sdUnm
                                                                                          b2_sdUnn];
                                                                        } in 
                                                                          case
                                                                              putMVar# [w_sdUn9
                                                                                        sat_sdUny
                                                                                        ipv4_sdUnp]
                                                                          of
                                                                          s2#_sdUnz
                                                                          { __DEFAULT ->
                                                                                (#,#) [s2#_sdUnz
                                                                                       GHC.Tuple.()];
                                                                          };
                                                                  };
                                                              0# ->
                                                                  case
                                                                      Control.Concurrent.QSem.signalQSem2
                                                                          b1_sdUnm
                                                                          b2_sdUnn
                                                                          ipv4_sdUnp
                                                                  of
                                                                  { (#,#) ipv7_sdUnB [Occ=Once]
                                                                          ipv8_sdUnC [Occ=Once] ->
                                                                        case
                                                                            putMVar# [w_sdUn9
                                                                                      ipv8_sdUnC
                                                                                      ipv7_sdUnB]
                                                                        of
                                                                        s2#_sdUnD
                                                                        { __DEFAULT ->
                                                                              (#,#) [s2#_sdUnD
                                                                                     GHC.Tuple.()];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                  0# ->
                                                      case
                                                          putMVar# [ww_sdUn8
                                                                    GHC.Tuple.()
                                                                    ipv4_sdUnp]
                                                      of
                                                      s2#_sdUnE
                                                      { __DEFAULT ->
                                                            case
                                                                putMVar# [w_sdUn9
                                                                          wild_sdUnk
                                                                          s2#_sdUnE]
                                                            of
                                                            s2#1_sdUnF
                                                            { __DEFAULT ->
                                                                  (#,#) [s2#1_sdUnF GHC.Tuple.()];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in 
                      case maskUninterruptible# [sat_sdUnG ipv_sdUnd] of {
                        (#,#) ipv2_sdUnI [Occ=Once] _ [Occ=Dead] ->
                            raiseIO# [w2_sdUnb ipv2_sdUnI];
                      };
                1# ->
                    case takeMVar# [w_sdUn9 ipv_sdUnd] of {
                      (#,#) ipv2_sdUnL [Occ=Once] ipv3_sdUnM [Occ=Once!] ->
                          case ipv3_sdUnM of wild_sdUnN {
                            (,,) i_sdUnO [Occ=Once!]
                                 b1_sdUnP [Occ=Once*]
                                 b2_sdUnQ [Occ=Once*] ->
                                case tryTakeMVar# [ww_sdUn8 ipv2_sdUnL] of {
                                  (#,,#) ipv4_sdUnS [Occ=Once*]
                                         ipv5_sdUnT [Occ=Once!]
                                         _ [Occ=Dead] ->
                                      case ipv5_sdUnT of {
                                        __DEFAULT ->
                                            case i_sdUnO of {
                                              GHC.Types.I# x_sdUnX [Occ=Once!] ->
                                                  case x_sdUnX of wild2_sdUnY {
                                                    __DEFAULT ->
                                                        case +# [wild2_sdUnY 1#] of sat_sdUnZ {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_sdUo0 [Occ=Once]
                                                                  :: GHC.Types.Int
                                                                [LclId] =
                                                                    CCCS GHC.Types.I#! [sat_sdUnZ]; } in
                                                              let {
                                                                sat_sdUo1 [Occ=Once]
                                                                  :: (GHC.Types.Int,
                                                                      [GHC.MVar.MVar ()],
                                                                      [GHC.MVar.MVar ()])
                                                                [LclId] =
                                                                    CCCS (,,)! [sat_sdUo0
                                                                                b1_sdUnP
                                                                                b2_sdUnQ];
                                                              } in 
                                                                case
                                                                    putMVar# [w_sdUn9
                                                                              sat_sdUo1
                                                                              ipv4_sdUnS]
                                                                of
                                                                s2#_sdUo2
                                                                { __DEFAULT ->
                                                                      raiseIO# [w2_sdUnb s2#_sdUo2];
                                                                };
                                                        };
                                                    0# ->
                                                        case
                                                            Control.Concurrent.QSem.signalQSem2
                                                                b1_sdUnP b2_sdUnQ ipv4_sdUnS
                                                        of
                                                        { (#,#) ipv7_sdUo4 [Occ=Once]
                                                                ipv8_sdUo5 [Occ=Once] ->
                                                              case
                                                                  putMVar# [w_sdUn9
                                                                            ipv8_sdUo5
                                                                            ipv7_sdUo4]
                                                              of
                                                              s2#_sdUo6
                                                              { __DEFAULT ->
                                                                    raiseIO# [w2_sdUnb s2#_sdUo6];
                                                              };
                                                        };
                                                  };
                                            };
                                        0# ->
                                            case
                                                putMVar# [ww_sdUn8 GHC.Tuple.() ipv4_sdUnS]
                                            of
                                            s2#_sdUo7
                                            { __DEFAULT ->
                                                  case
                                                      putMVar# [w_sdUn9 wild_sdUnN s2#_sdUo7]
                                                  of
                                                  s2#1_sdUo8
                                                  { __DEFAULT -> raiseIO# [w2_sdUnb s2#1_sdUo8];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Control.Concurrent.QSem.$wwaitQSem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_sdUo9 w_sdUoa]
        case getMaskingState# [w_sdUoa] of {
          (#,#) ipv_sdUoc [Occ=Once*] ipv1_sdUod [Occ=Once!] ->
              let {
                io_sdUoe [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                    [ww_sdUo9] \r [s_sdUof]
                        case takeMVar# [ww_sdUo9 s_sdUof] of {
                          (#,#) ipv2_sdUoh [Occ=Once*] ipv3_sdUoi [Occ=Once!] ->
                              case ipv3_sdUoi of {
                                (,,) i_sdUok [Occ=Once!]
                                     b1_sdUol [Occ=Once*]
                                     b2_sdUom [Occ=Once*] ->
                                    case i_sdUok of wild1_sdUon {
                                      GHC.Types.I# x_sdUoo [Occ=Once!] ->
                                          case x_sdUoo of wild2_sdUop {
                                            __DEFAULT ->
                                                case -# [wild2_sdUop 1#] of sat_sdUoq {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sdUor [Occ=Once] :: GHC.Types.Int
                                                        [LclId] =
                                                            CCCS GHC.Types.I#! [sat_sdUoq]; } in
                                                      let {
                                                        sat_sdUos [Occ=Once]
                                                          :: (GHC.Types.Int, [GHC.MVar.MVar ()],
                                                              [GHC.MVar.MVar ()])
                                                        [LclId] =
                                                            CCCS (,,)! [sat_sdUor
                                                                        b1_sdUol
                                                                        b2_sdUom];
                                                      } in 
                                                        case
                                                            putMVar# [ww_sdUo9 sat_sdUos ipv2_sdUoh]
                                                        of
                                                        s2#_sdUot
                                                        { __DEFAULT ->
                                                              (#,#) [s2#_sdUot GHC.Tuple.()];
                                                        };
                                                };
                                            0# ->
                                                case newMVar# [ipv2_sdUoh] of {
                                                  (#,#) ipv4_sdUov [Occ=Once] ipv5_sdUow ->
                                                      let {
                                                        sat_sdUox [Occ=Once] :: GHC.MVar.MVar ()
                                                        [LclId] =
                                                            CCCS GHC.MVar.MVar! [ipv5_sdUow]; } in
                                                      let {
                                                        sat_sdUoy [Occ=Once] :: [GHC.MVar.MVar ()]
                                                        [LclId] =
                                                            CCCS :! [sat_sdUox b2_sdUom]; } in
                                                      let {
                                                        sat_sdUoz [Occ=Once]
                                                          :: (GHC.Types.Int, [GHC.MVar.MVar ()],
                                                              [GHC.MVar.MVar ()])
                                                        [LclId] =
                                                            CCCS (,,)! [wild1_sdUon
                                                                        b1_sdUol
                                                                        sat_sdUoy];
                                                      } in 
                                                        case
                                                            putMVar# [ww_sdUo9 sat_sdUoz ipv4_sdUov]
                                                        of
                                                        s2#_sdUoA
                                                        { __DEFAULT ->
                                                              let {
                                                                sat_sdUoF [Occ=Once]
                                                                  :: GHC.Exception.SomeException
                                                                     -> GHC.Prim.State#
                                                                          GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           () #)
                                                                [LclId] =
                                                                    [ww_sdUo9
                                                                     ipv5_sdUow] \r [e1_sdUoD
                                                                                     s1_sdUoE]
                                                                        Control.Concurrent.QSem.$wlvl
                                                                            ipv5_sdUow
                                                                            ww_sdUo9
                                                                            s1_sdUoE
                                                                            e1_sdUoD; } in
                                                              let {
                                                                sat_sdUoC [Occ=Once]
                                                                  :: GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           () #)
                                                                [LclId] =
                                                                    [ipv5_sdUow] \r [eta_sdUoB]
                                                                        takeMVar# [ipv5_sdUow
                                                                                   eta_sdUoB];
                                                              } in 
                                                                catch# [sat_sdUoC
                                                                        sat_sdUoF
                                                                        s2#_sdUoA];
                                                        };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case ipv1_sdUod of {
                  __DEFAULT -> io_sdUoe ipv_sdUoc;
                  0# -> maskAsyncExceptions# [io_sdUoe ipv_sdUoc];
                };
        };

Control.Concurrent.QSem.waitQSem1 [InlPrag=NOUSERINLINE[0]]
  :: Control.Concurrent.QSem.QSem
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sdUoH w1_sdUoI]
        case w_sdUoH of {
          Control.Concurrent.QSem.QSem ww1_sdUoK [Occ=Once] ->
              Control.Concurrent.QSem.$wwaitQSem ww1_sdUoK w1_sdUoI;
        };

Control.Concurrent.QSem.waitQSem
  :: Control.Concurrent.QSem.QSem -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Control.Concurrent.QSem.waitQSem1 eta_B2 eta_B1;

Control.Concurrent.QSem.QSem
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> Control.Concurrent.QSem.QSem
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] Control.Concurrent.QSem.QSem [eta_B1];


==================== STG syntax: ====================
2018-03-16 16:09:10.1496199 UTC

Control.Concurrent.QSem.$WQSem [InlPrag=INLINE[2]]
  :: GHC.MVar.MVar
       (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> Control.Concurrent.QSem.QSem
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m,
 Unf=OtherCon []] =
    [] \r [dt_sdUlP]
        case dt_sdUlP of {
          GHC.MVar.MVar dt_sdUlR [Occ=Once] ->
              Control.Concurrent.QSem.QSem [dt_sdUlR];
        };

Control.Concurrent.QSem.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Control.Concurrent.QSem.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSem.$trModule4];

Control.Concurrent.QSem.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control.Concurrent.QSem"#;

Control.Concurrent.QSem.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSem.$trModule2];

Control.Concurrent.QSem.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Control.Concurrent.QSem.$trModule3
                                     Control.Concurrent.QSem.$trModule1];

$krep_rdTOF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep1_rdTOG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rdTOH :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rdTOF GHC.Types.[]];

$krep3_rdTOI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep2_rdTOH];

$krep4_rdTOJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_rdTOI GHC.Types.[]];

$krep5_rdTOK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep4_rdTOJ];

$krep6_rdTOL :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_rdTOK GHC.Types.[]];

$krep7_rdTOM :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_rdTOK $krep6_rdTOL];

$krep8_rdTON :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rdTOG $krep7_rdTOM];

$krep9_rdTOO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,,)
                                              $krep8_rdTON];

$krep10_rdTOP :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_rdTOO GHC.Types.[]];

$krep11_rdTOQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.MVar.$tcMVar
                                              $krep10_rdTOP];

Control.Concurrent.QSem.$tcQSem2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "QSem"#;

Control.Concurrent.QSem.$tcQSem1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSem.$tcQSem2];

Control.Concurrent.QSem.$tcQSem :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9564161763912145234##
                                    3945938196429110556##
                                    Control.Concurrent.QSem.$trModule
                                    Control.Concurrent.QSem.$tcQSem1
                                    0#
                                    GHC.Types.krep$*];

$krep12_rdTOR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Control.Concurrent.QSem.$tcQSem
                                              GHC.Types.[]];

Control.Concurrent.QSem.$tc'QSem1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_rdTOQ $krep12_rdTOR];

Control.Concurrent.QSem.$tc'QSem3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'QSem"#;

Control.Concurrent.QSem.$tc'QSem2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Control.Concurrent.QSem.$tc'QSem3];

Control.Concurrent.QSem.$tc'QSem :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16012040391974534726##
                                    6627878139257558952##
                                    Control.Concurrent.QSem.$trModule
                                    Control.Concurrent.QSem.$tc'QSem2
                                    0#
                                    Control.Concurrent.QSem.$tc'QSem1];

lvl_rdTOS :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "newQSem: Initial quantity must be non-negative"#;

Control.Concurrent.QSem.newQSem2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Control.Concurrent.QSem.QSem #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        case GHC.CString.unpackCString# lvl_rdTOS of sat_sdUlT {
          __DEFAULT -> GHC.IO.failIO1 sat_sdUlT GHC.Prim.void#;
        };

Control.Concurrent.QSem.newQSem1
  :: GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Control.Concurrent.QSem.QSem #)
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [initial_sdUlU void_0E]
        case initial_sdUlU of wild_sdUlW {
          GHC.Types.I# x_sdUlX [Occ=Once] ->
              case <# [x_sdUlX 0#] of {
                __DEFAULT ->
                    case newMVar# [GHC.Prim.void#] of {
                      Unit# ipv1_sdUm1 ->
                          let {
                            sat_sdUm2 [Occ=Once]
                              :: (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
                            [LclId] =
                                CCCS (,,)! [wild_sdUlW GHC.Types.[] GHC.Types.[]];
                          } in 
                            case putMVar# [ipv1_sdUm1 sat_sdUm2 GHC.Prim.void#] of s2#_sdUm3 {
                              (##) ->
                                  let {
                                    sat_sdUm4 [Occ=Once] :: Control.Concurrent.QSem.QSem
                                    [LclId] =
                                        CCCS Control.Concurrent.QSem.QSem! [ipv1_sdUm1];
                                  } in  Unit# [sat_sdUm4];
                            };
                    };
                1# -> Control.Concurrent.QSem.newQSem2 GHC.Prim.void#;
              };
        };

Control.Concurrent.QSem.newQSem
  :: GHC.Types.Int -> GHC.Types.IO Control.Concurrent.QSem.QSem
[GblId, Arity=2, Str=<S(S),1*U(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Control.Concurrent.QSem.newQSem1 eta_B2 GHC.Prim.void#;

lvl1_rdTOT :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl2_rdTOU :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

lvl3_rdTOV
  :: (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,,)! [lvl2_rdTOU GHC.Types.[] GHC.Types.[]];

Control.Concurrent.QSem.signalQSem2 [Occ=LoopBreaker]
  :: [GHC.MVar.MVar ()]
     -> [GHC.MVar.MVar ()]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()]) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sdUm5 ds1_sdUm6 void_0E]
        case ds_sdUm5 of {
          [] ->
              case ds1_sdUm6 of wild1_sdUm9 {
                [] -> Unit# [lvl3_rdTOV];
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    case GHC.List.reverse1 wild1_sdUm9 GHC.Types.[] of sat_sdUmc {
                      __DEFAULT ->
                          Control.Concurrent.QSem.signalQSem2
                              sat_sdUmc GHC.Types.[] GHC.Prim.void#;
                    };
              };
          : b_sdUmd [Occ=Once!] bs_sdUme [Occ=Once*] ->
              case b_sdUmd of {
                GHC.MVar.MVar mvar#_sdUmg [Occ=Once] ->
                    case tryPutMVar# [mvar#_sdUmg GHC.Tuple.() GHC.Prim.void#] of {
                      Unit# ipv1_sdUmj [Occ=Once!] ->
                          case ipv1_sdUmj of {
                            __DEFAULT ->
                                let {
                                  sat_sdUml [Occ=Once]
                                    :: (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
                                  [LclId] =
                                      CCCS (,,)! [lvl1_rdTOT bs_sdUme ds1_sdUm6];
                                } in  Unit# [sat_sdUml];
                            0# ->
                                Control.Concurrent.QSem.signalQSem2
                                    bs_sdUme ds1_sdUm6 GHC.Prim.void#;
                          };
                    };
              };
        };

Control.Concurrent.QSem.$wsignalQSem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_sdUmm void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sdUmq [Occ=Once!] ->
              case ipv1_sdUmq of {
                __DEFAULT ->
                    let {
                      sat_sdUmL [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [ww_sdUmm] \r [void_0E]
                              case takeMVar# [ww_sdUmm GHC.Prim.void#] of {
                                Unit# ipv3_sdUmv [Occ=Once!] ->
                                    case ipv3_sdUmv of {
                                      (,,) i_sdUmx [Occ=Once!]
                                           a1_sdUmy [Occ=Once*]
                                           a2_sdUmz [Occ=Once*] ->
                                          case i_sdUmx of {
                                            GHC.Types.I# x_sdUmB [Occ=Once!] ->
                                                case x_sdUmB of wild2_sdUmC {
                                                  __DEFAULT ->
                                                      case +# [wild2_sdUmC 1#] of sat_sdUmD {
                                                        __DEFAULT ->
                                                            let {
                                                              sat_sdUmE [Occ=Once] :: GHC.Types.Int
                                                              [LclId] =
                                                                  CCCS GHC.Types.I#! [sat_sdUmD]; } in
                                                            let {
                                                              sat_sdUmF [Occ=Once]
                                                                :: (GHC.Types.Int,
                                                                    [GHC.MVar.MVar ()],
                                                                    [GHC.MVar.MVar ()])
                                                              [LclId] =
                                                                  CCCS (,,)! [sat_sdUmE
                                                                              a1_sdUmy
                                                                              a2_sdUmz];
                                                            } in 
                                                              case
                                                                  putMVar# [ww_sdUmm
                                                                            sat_sdUmF
                                                                            GHC.Prim.void#]
                                                              of
                                                              s2#_sdUmG
                                                              { (##) -> Unit# [GHC.Tuple.()];
                                                              };
                                                      };
                                                  0# ->
                                                      case
                                                          Control.Concurrent.QSem.signalQSem2
                                                              a1_sdUmy a2_sdUmz GHC.Prim.void#
                                                      of
                                                      { Unit# ipv5_sdUmJ [Occ=Once] ->
                                                            case
                                                                putMVar# [ww_sdUmm
                                                                          ipv5_sdUmJ
                                                                          GHC.Prim.void#]
                                                            of
                                                            s2#_sdUmK
                                                            { (##) -> Unit# [GHC.Tuple.()];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in  maskUninterruptible# [sat_sdUmL GHC.Prim.void#];
                1# ->
                    case takeMVar# [ww_sdUmm GHC.Prim.void#] of {
                      Unit# ipv3_sdUmO [Occ=Once!] ->
                          case ipv3_sdUmO of {
                            (,,) i_sdUmQ [Occ=Once!]
                                 a1_sdUmR [Occ=Once*]
                                 a2_sdUmS [Occ=Once*] ->
                                case i_sdUmQ of {
                                  GHC.Types.I# x_sdUmU [Occ=Once!] ->
                                      case x_sdUmU of wild2_sdUmV {
                                        __DEFAULT ->
                                            case +# [wild2_sdUmV 1#] of sat_sdUmW {
                                              __DEFAULT ->
                                                  let {
                                                    sat_sdUmX [Occ=Once] :: GHC.Types.Int
                                                    [LclId] =
                                                        CCCS GHC.Types.I#! [sat_sdUmW]; } in
                                                  let {
                                                    sat_sdUmY [Occ=Once]
                                                      :: (GHC.Types.Int, [GHC.MVar.MVar ()],
                                                          [GHC.MVar.MVar ()])
                                                    [LclId] =
                                                        CCCS (,,)! [sat_sdUmX a1_sdUmR a2_sdUmS];
                                                  } in 
                                                    case
                                                        putMVar# [ww_sdUmm sat_sdUmY GHC.Prim.void#]
                                                    of
                                                    s2#_sdUmZ
                                                    { (##) -> Unit# [GHC.Tuple.()];
                                                    };
                                            };
                                        0# ->
                                            case
                                                Control.Concurrent.QSem.signalQSem2
                                                    a1_sdUmR a2_sdUmS GHC.Prim.void#
                                            of
                                            { Unit# ipv5_sdUn2 [Occ=Once] ->
                                                  case
                                                      putMVar# [ww_sdUmm ipv5_sdUn2 GHC.Prim.void#]
                                                  of
                                                  s2#_sdUn3
                                                  { (##) -> Unit# [GHC.Tuple.()];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Control.Concurrent.QSem.signalQSem1 [InlPrag=NOUSERINLINE[0]]
  :: Control.Concurrent.QSem.QSem
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sdUn4 void_0E]
        case w_sdUn4 of {
          Control.Concurrent.QSem.QSem ww1_sdUn7 [Occ=Once] ->
              Control.Concurrent.QSem.$wsignalQSem ww1_sdUn7 GHC.Prim.void#;
        };

Control.Concurrent.QSem.signalQSem
  :: Control.Concurrent.QSem.QSem -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Control.Concurrent.QSem.signalQSem1 eta_B2 GHC.Prim.void#;

Control.Concurrent.QSem.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar# GHC.Prim.RealWorld ()
     -> GHC.Prim.MVar#
          GHC.Prim.RealWorld
          (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Exception.SomeException
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sdUn8 w_sdUn9 void_0E w2_sdUnb]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sdUne [Occ=Once!] ->
              case ipv1_sdUne of {
                __DEFAULT ->
                    let {
                      sat_sdUnG [Occ=Once]
                        :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      [LclId] =
                          [ww_sdUn8 w_sdUn9] \r [void_0E]
                              case takeMVar# [w_sdUn9 GHC.Prim.void#] of {
                                Unit# ipv3_sdUnj [Occ=Once!] ->
                                    case ipv3_sdUnj of wild_sdUnk {
                                      (,,) i_sdUnl [Occ=Once!]
                                           b1_sdUnm [Occ=Once*]
                                           b2_sdUnn [Occ=Once*] ->
                                          case tryTakeMVar# [ww_sdUn8 GHC.Prim.void#] of {
                                            (#,#) ipv5_sdUnq [Occ=Once!] _ [Occ=Dead] ->
                                                case ipv5_sdUnq of {
                                                  __DEFAULT ->
                                                      case i_sdUnl of {
                                                        GHC.Types.I# x_sdUnu [Occ=Once!] ->
                                                            case x_sdUnu of wild2_sdUnv {
                                                              __DEFAULT ->
                                                                  case
                                                                      +# [wild2_sdUnv 1#]
                                                                  of
                                                                  sat_sdUnw
                                                                  { __DEFAULT ->
                                                                        let {
                                                                          sat_sdUnx [Occ=Once]
                                                                            :: GHC.Types.Int
                                                                          [LclId] =
                                                                              CCCS GHC.Types.I#! [sat_sdUnw]; } in
                                                                        let {
                                                                          sat_sdUny [Occ=Once]
                                                                            :: (GHC.Types.Int,
                                                                                [GHC.MVar.MVar ()],
                                                                                [GHC.MVar.MVar ()])
                                                                          [LclId] =
                                                                              CCCS (,,)! [sat_sdUnx
                                                                                          b1_sdUnm
                                                                                          b2_sdUnn];
                                                                        } in 
                                                                          case
                                                                              putMVar# [w_sdUn9
                                                                                        sat_sdUny
                                                                                        GHC.Prim.void#]
                                                                          of
                                                                          s2#_sdUnz
                                                                          { (##) ->
                                                                                Unit# [GHC.Tuple.()];
                                                                          };
                                                                  };
                                                              0# ->
                                                                  case
                                                                      Control.Concurrent.QSem.signalQSem2
                                                                          b1_sdUnm
                                                                          b2_sdUnn
                                                                          GHC.Prim.void#
                                                                  of
                                                                  { Unit# ipv8_sdUnC [Occ=Once] ->
                                                                        case
                                                                            putMVar# [w_sdUn9
                                                                                      ipv8_sdUnC
                                                                                      GHC.Prim.void#]
                                                                        of
                                                                        s2#_sdUnD
                                                                        { (##) ->
                                                                              Unit# [GHC.Tuple.()];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                  0# ->
                                                      case
                                                          putMVar# [ww_sdUn8
                                                                    GHC.Tuple.()
                                                                    GHC.Prim.void#]
                                                      of
                                                      s2#_sdUnE
                                                      { (##) ->
                                                            case
                                                                putMVar# [w_sdUn9
                                                                          wild_sdUnk
                                                                          GHC.Prim.void#]
                                                            of
                                                            s2#1_sdUnF
                                                            { (##) -> Unit# [GHC.Tuple.()];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                    } in 
                      case maskUninterruptible# [sat_sdUnG GHC.Prim.void#] of {
                        Unit# _ [Occ=Dead] -> raiseIO# [w2_sdUnb GHC.Prim.void#];
                      };
                1# ->
                    case takeMVar# [w_sdUn9 GHC.Prim.void#] of {
                      Unit# ipv3_sdUnM [Occ=Once!] ->
                          case ipv3_sdUnM of wild_sdUnN {
                            (,,) i_sdUnO [Occ=Once!]
                                 b1_sdUnP [Occ=Once*]
                                 b2_sdUnQ [Occ=Once*] ->
                                case tryTakeMVar# [ww_sdUn8 GHC.Prim.void#] of {
                                  (#,#) ipv5_sdUnT [Occ=Once!] _ [Occ=Dead] ->
                                      case ipv5_sdUnT of {
                                        __DEFAULT ->
                                            case i_sdUnO of {
                                              GHC.Types.I# x_sdUnX [Occ=Once!] ->
                                                  case x_sdUnX of wild2_sdUnY {
                                                    __DEFAULT ->
                                                        case +# [wild2_sdUnY 1#] of sat_sdUnZ {
                                                          __DEFAULT ->
                                                              let {
                                                                sat_sdUo0 [Occ=Once]
                                                                  :: GHC.Types.Int
                                                                [LclId] =
                                                                    CCCS GHC.Types.I#! [sat_sdUnZ]; } in
                                                              let {
                                                                sat_sdUo1 [Occ=Once]
                                                                  :: (GHC.Types.Int,
                                                                      [GHC.MVar.MVar ()],
                                                                      [GHC.MVar.MVar ()])
                                                                [LclId] =
                                                                    CCCS (,,)! [sat_sdUo0
                                                                                b1_sdUnP
                                                                                b2_sdUnQ];
                                                              } in 
                                                                case
                                                                    putMVar# [w_sdUn9
                                                                              sat_sdUo1
                                                                              GHC.Prim.void#]
                                                                of
                                                                s2#_sdUo2
                                                                { (##) ->
                                                                      raiseIO# [w2_sdUnb
                                                                                GHC.Prim.void#];
                                                                };
                                                        };
                                                    0# ->
                                                        case
                                                            Control.Concurrent.QSem.signalQSem2
                                                                b1_sdUnP b2_sdUnQ GHC.Prim.void#
                                                        of
                                                        { Unit# ipv8_sdUo5 [Occ=Once] ->
                                                              case
                                                                  putMVar# [w_sdUn9
                                                                            ipv8_sdUo5
                                                                            GHC.Prim.void#]
                                                              of
                                                              s2#_sdUo6
                                                              { (##) ->
                                                                    raiseIO# [w2_sdUnb
                                                                              GHC.Prim.void#];
                                                              };
                                                        };
                                                  };
                                            };
                                        0# ->
                                            case
                                                putMVar# [ww_sdUn8 GHC.Tuple.() GHC.Prim.void#]
                                            of
                                            s2#_sdUo7
                                            { (##) ->
                                                  case
                                                      putMVar# [w_sdUn9 wild_sdUnN GHC.Prim.void#]
                                                  of
                                                  s2#1_sdUo8
                                                  { (##) -> raiseIO# [w2_sdUnb GHC.Prim.void#];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Control.Concurrent.QSem.$wwaitQSem [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_sdUo9 void_0E]
        case getMaskingState# [GHC.Prim.void#] of {
          Unit# ipv1_sdUod [Occ=Once!] ->
              let {
                io_sdUoe [Occ=Once*, Dmd=<C(S),C(U(U,U))>]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
                    [ww_sdUo9] \r [void_0E]
                        case takeMVar# [ww_sdUo9 GHC.Prim.void#] of {
                          Unit# ipv3_sdUoi [Occ=Once!] ->
                              case ipv3_sdUoi of {
                                (,,) i_sdUok [Occ=Once!]
                                     b1_sdUol [Occ=Once*]
                                     b2_sdUom [Occ=Once*] ->
                                    case i_sdUok of wild1_sdUon {
                                      GHC.Types.I# x_sdUoo [Occ=Once!] ->
                                          case x_sdUoo of wild2_sdUop {
                                            __DEFAULT ->
                                                case -# [wild2_sdUop 1#] of sat_sdUoq {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sdUor [Occ=Once] :: GHC.Types.Int
                                                        [LclId] =
                                                            CCCS GHC.Types.I#! [sat_sdUoq]; } in
                                                      let {
                                                        sat_sdUos [Occ=Once]
                                                          :: (GHC.Types.Int, [GHC.MVar.MVar ()],
                                                              [GHC.MVar.MVar ()])
                                                        [LclId] =
                                                            CCCS (,,)! [sat_sdUor
                                                                        b1_sdUol
                                                                        b2_sdUom];
                                                      } in 
                                                        case
                                                            putMVar# [ww_sdUo9
                                                                      sat_sdUos
                                                                      GHC.Prim.void#]
                                                        of
                                                        s2#_sdUot
                                                        { (##) -> Unit# [GHC.Tuple.()];
                                                        };
                                                };
                                            0# ->
                                                case newMVar# [GHC.Prim.void#] of {
                                                  Unit# ipv5_sdUow ->
                                                      let {
                                                        sat_sdUox [Occ=Once] :: GHC.MVar.MVar ()
                                                        [LclId] =
                                                            CCCS GHC.MVar.MVar! [ipv5_sdUow]; } in
                                                      let {
                                                        sat_sdUoy [Occ=Once] :: [GHC.MVar.MVar ()]
                                                        [LclId] =
                                                            CCCS :! [sat_sdUox b2_sdUom]; } in
                                                      let {
                                                        sat_sdUoz [Occ=Once]
                                                          :: (GHC.Types.Int, [GHC.MVar.MVar ()],
                                                              [GHC.MVar.MVar ()])
                                                        [LclId] =
                                                            CCCS (,,)! [wild1_sdUon
                                                                        b1_sdUol
                                                                        sat_sdUoy];
                                                      } in 
                                                        case
                                                            putMVar# [ww_sdUo9
                                                                      sat_sdUoz
                                                                      GHC.Prim.void#]
                                                        of
                                                        s2#_sdUoA
                                                        { (##) ->
                                                              let {
                                                                sat_sdUoF [Occ=Once]
                                                                  :: GHC.Exception.SomeException
                                                                     -> GHC.Prim.State#
                                                                          GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           () #)
                                                                [LclId] =
                                                                    [ww_sdUo9
                                                                     ipv5_sdUow] \r [e1_sdUoD
                                                                                     void_0E]
                                                                        Control.Concurrent.QSem.$wlvl
                                                                            ipv5_sdUow
                                                                            ww_sdUo9
                                                                            GHC.Prim.void#
                                                                            e1_sdUoD; } in
                                                              let {
                                                                sat_sdUoC [Occ=Once]
                                                                  :: GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           () #)
                                                                [LclId] =
                                                                    [ipv5_sdUow] \r [void_0E]
                                                                        takeMVar# [ipv5_sdUow
                                                                                   GHC.Prim.void#];
                                                              } in 
                                                                catch# [sat_sdUoC
                                                                        sat_sdUoF
                                                                        GHC.Prim.void#];
                                                        };
                                                };
                                          };
                                    };
                              };
                        };
              } in 
                case ipv1_sdUod of {
                  __DEFAULT -> io_sdUoe GHC.Prim.void#;
                  0# -> maskAsyncExceptions# [io_sdUoe GHC.Prim.void#];
                };
        };

Control.Concurrent.QSem.waitQSem1 [InlPrag=NOUSERINLINE[0]]
  :: Control.Concurrent.QSem.QSem
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_sdUoH void_0E]
        case w_sdUoH of {
          Control.Concurrent.QSem.QSem ww1_sdUoK [Occ=Once] ->
              Control.Concurrent.QSem.$wwaitQSem ww1_sdUoK GHC.Prim.void#;
        };

Control.Concurrent.QSem.waitQSem
  :: Control.Concurrent.QSem.QSem -> GHC.Types.IO ()
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Control.Concurrent.QSem.waitQSem1 eta_B2 GHC.Prim.void#;

Control.Concurrent.QSem.QSem
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld
       (GHC.Types.Int, [GHC.MVar.MVar ()], [GHC.MVar.MVar ()])
     -> Control.Concurrent.QSem.QSem
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] Control.Concurrent.QSem.QSem [eta_B1];

