
==================== Raw Cmm ====================
2018-03-16 16:05:17.262067077 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:05:17.265165991 UTC

[section ""data" . Control.Concurrent.MVar.$wswapMVar_closure" {
     Control.Concurrent.MVar.$wswapMVar_closure:
         const Control.Concurrent.MVar.$wswapMVar_info;
 },
 sat_sagkm_entry() //  [R1]
         { []
         }
     {offset
       cagPb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cagPc; else goto cagPd;
       cagPc: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cagPd: // global
           I64[Sp - 24] = block_cagP7_info;
           _sagk6::P64 = P64[R1 + 7];
           _sagk7::P64 = P64[R1 + 15];
           R1 = _sagk6::P64;
           P64[Sp - 16] = _sagk6::P64;
           P64[Sp - 8] = _sagk7::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagkm_info" {
     sat_sagkm_info:
         const sat_sagkm_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cagP7() //  [R1]
         { []
         }
     {offset
       cagP7: // global
           _sagk6::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cagP9_info;
           R2 = P64[Sp + 16];
           _sagkk::P64 = R1;
           R1 = _sagk6::P64;
           P64[Sp + 16] = _sagkk::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagP7_info" {
     block_cagP7_info:
         const _cagP7;
         const 2;
         const 30;
 },
 _cagP9() //  []
         { []
         }
     {offset
       cagP9: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagP9_info" {
     block_cagP9_info:
         const _cagP9;
         const 1;
         const 30;
 },
 Control.Concurrent.MVar.$wswapMVar_entry() //  [R2, R3]
         { []
         }
     {offset
       cagPj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cagPk; else goto cagPl;
       cagPk: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.MVar.$wswapMVar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cagPl: // global
           I64[Sp - 24] = block_cagOX_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.$wswapMVar_info" {
     Control.Concurrent.MVar.$wswapMVar_info:
         const Control.Concurrent.MVar.$wswapMVar_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cagOX() //  [R1]
         { []
         }
     {offset
       cagOX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cagPo; else goto cagPn;
       cagPo: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cagPn: // global
           _sagk6::P64 = P64[Sp + 8];
           if (R1 == 0) goto cagPi; else goto cagPh;
       cagPi: // global
           I64[Hp - 16] = sat_sagkm_info;
           P64[Hp - 8] = _sagk6::P64;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cagPh: // global
           Hp = Hp - 24;
           I64[Sp] = block_cagPp_info;
           R1 = _sagk6::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagOX_info" {
     block_cagOX_info:
         const _cagOX;
         const 2;
         const 30;
 },
 _cagPp() //  [R1]
         { []
         }
     {offset
       cagPp: // global
           _sagk6::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cagPr_info;
           R2 = P64[Sp + 16];
           _sagkf::P64 = R1;
           R1 = _sagk6::P64;
           P64[Sp + 16] = _sagkf::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagPp_info" {
     block_cagPp_info:
         const _cagPp;
         const 2;
         const 30;
 },
 _cagPr() //  []
         { []
         }
     {offset
       cagPr: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagPr_info" {
     block_cagPr_info:
         const _cagPr;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.278605131 UTC

[section ""data" . Control.Concurrent.MVar.swapMVar1_closure" {
     Control.Concurrent.MVar.swapMVar1_closure:
         const Control.Concurrent.MVar.swapMVar1_info;
 },
 Control.Concurrent.MVar.swapMVar1_entry() //  [R2, R3]
         { []
         }
     {offset
       cagQ3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cagQ4; else goto cagQ5;
       cagQ4: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.MVar.swapMVar1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cagQ5: // global
           I64[Sp - 16] = block_cagQ0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uagQ9; else goto cagQ1;
       uagQ9: // global
           call _cagQ0(R1) args: 0, res: 0, upd: 0;
       cagQ1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.swapMVar1_info" {
     Control.Concurrent.MVar.swapMVar1_info:
         const Control.Concurrent.MVar.swapMVar1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cagQ0() //  [R1]
         { []
         }
     {offset
       cagQ0: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call Control.Concurrent.MVar.$wswapMVar_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagQ0_info" {
     block_cagQ0_info:
         const _cagQ0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.283614531 UTC

[section ""data" . Control.Concurrent.MVar.swapMVar_closure" {
     Control.Concurrent.MVar.swapMVar_closure:
         const Control.Concurrent.MVar.swapMVar_info;
 },
 Control.Concurrent.MVar.swapMVar_entry() //  [R2, R3]
         { []
         }
     {offset
       cagQn: // global
           R3 = R3;
           R2 = R2;
           call Control.Concurrent.MVar.swapMVar1_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.swapMVar_info" {
     Control.Concurrent.MVar.swapMVar_info:
         const Control.Concurrent.MVar.swapMVar_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.292868348 UTC

[section ""data" . $wwithMVar_ragjT_closure" {
     $wwithMVar_ragjT_closure:
         const $wwithMVar_ragjT_info;
 },
 sat_sagkH_entry() //  [R1, R2]
         { []
         }
     {offset
       cagQL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cagQM; else goto cagQN;
       cagQM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cagQN: // global
           I64[Sp - 16] = block_cagQJ_info;
           _sagkE::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sagkE::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagkH_info" {
     sat_sagkH_info:
         const sat_sagkH_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cagQJ() //  []
         { []
         }
     {offset
       cagQJ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagQJ_info" {
     block_cagQJ_info:
         const _cagQJ;
         const 1;
         const 30;
 },
 sat_sagkD_entry() //  [R1]
         { []
         }
     {offset
       cagQV: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagkD_info" {
     sat_sagkD_info:
         const sat_sagkD_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sagkV_entry() //  [R1, R2]
         { []
         }
     {offset
       cagRd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cagRe; else goto cagRf;
       cagRe: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cagRf: // global
           I64[Sp - 16] = block_cagRb_info;
           _sagkS::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sagkS::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagkV_info" {
     sat_sagkV_info:
         const sat_sagkV_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cagRb() //  []
         { []
         }
     {offset
       cagRb: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagRb_info" {
     block_cagRb_info:
         const _cagRb;
         const 1;
         const 30;
 },
 sat_sagkR_entry() //  [R1]
         { []
         }
     {offset
       cagRn: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagkR_info" {
     sat_sagkR_info:
         const sat_sagkR_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sagl0_entry() //  [R1]
         { []
         }
     {offset
       cagRu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cagRv; else goto cagRw;
       cagRv: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cagRw: // global
           I64[Sp - 24] = block_cagR4_info;
           _sagks::P64 = P64[R1 + 7];
           _sagkt::P64 = P64[R1 + 15];
           R1 = _sagks::P64;
           P64[Sp - 16] = _sagks::P64;
           P64[Sp - 8] = _sagkt::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagl0_info" {
     sat_sagl0_info:
         const sat_sagl0_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cagR4() //  [R1]
         { []
         }
     {offset
       cagR4: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cagRz; else goto cagRy;
       cagRz: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cagRy: // global
           I64[Hp - 64] = sat_sagkV_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sagkR_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cagRq_info;
           R2 = Hp - 62;
           _sagkP::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _sagkP::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagR4_info" {
     block_cagR4_info:
         const _cagR4;
         const 2;
         const 30;
 },
 _cagRq() //  [R1]
         { []
         }
     {offset
       cagRq: // global
           _sagks::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cagRs_info;
           R2 = P64[Sp + 16];
           _sagkY::P64 = R1;
           R1 = _sagks::P64;
           P64[Sp + 16] = _sagkY::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagRq_info" {
     block_cagRq_info:
         const _cagRq;
         const 2;
         const 30;
 },
 _cagRs() //  []
         { []
         }
     {offset
       cagRs: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagRs_info" {
     block_cagRs_info:
         const _cagRs;
         const 1;
         const 30;
 },
 sat_sagl9_entry() //  [R1, R2]
         { []
         }
     {offset
       cagRM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cagRN; else goto cagRO;
       cagRN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cagRO: // global
           I64[Sp - 16] = block_cagRK_info;
           _sagl6::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sagl6::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagl9_info" {
     sat_sagl9_info:
         const sat_sagl9_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cagRK() //  []
         { []
         }
     {offset
       cagRK: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagRK_info" {
     block_cagRK_info:
         const _cagRK;
         const 1;
         const 30;
 },
 sat_sagl5_entry() //  [R1]
         { []
         }
     {offset
       cagRW: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagl5_info" {
     sat_sagl5_info:
         const sat_sagl5_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 $wwithMVar_ragjT_entry() //  [R2, R3]
         { []
         }
     {offset
       cagS3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cagS4; else goto cagS5;
       cagS4: // global
           R3 = R3;
           R2 = R2;
           R1 = $wwithMVar_ragjT_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cagS5: // global
           I64[Sp - 24] = block_cagQy_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wwithMVar_ragjT_info" {
     $wwithMVar_ragjT_info:
         const $wwithMVar_ragjT_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cagQy() //  [R1]
         { []
         }
     {offset
       cagQy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cagS8; else goto cagS7;
       cagS8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cagS7: // global
           _sagks::P64 = P64[Sp + 8];
           if (R1 == 0) goto cagS1; else goto uagSr;
       cagS1: // global
           I64[Hp - 16] = sat_sagl0_info;
           P64[Hp - 8] = _sagks::P64;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       uagSr: // global
           if (R1 == 1) goto cagS2; else goto cagS0;
       cagS2: // global
           Hp = Hp - 24;
           I64[Sp] = block_cagRD_info;
           R1 = _sagks::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       cagS0: // global
           Hp = Hp - 24;
           I64[Sp] = block_cagQC_info;
           R1 = _sagks::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagQy_info" {
     block_cagQy_info:
         const _cagQy;
         const 2;
         const 30;
 },
 _cagRD() //  [R1]
         { []
         }
     {offset
       cagRD: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cagSn; else goto cagSm;
       cagSn: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cagSm: // global
           I64[Hp - 64] = sat_sagl9_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sagl5_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cagSi_info;
           R2 = Hp - 62;
           _sagl3::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _sagl3::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagRD_info" {
     block_cagRD_info:
         const _cagRD;
         const 2;
         const 30;
 },
 _cagSi() //  [R1]
         { []
         }
     {offset
       cagSi: // global
           _sagks::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cagSk_info;
           R2 = P64[Sp + 16];
           _saglc::P64 = R1;
           R1 = _sagks::P64;
           P64[Sp + 16] = _saglc::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagSi_info" {
     block_cagSi_info:
         const _cagSi;
         const 2;
         const 30;
 },
 _cagSk() //  []
         { []
         }
     {offset
       cagSk: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagSk_info" {
     block_cagSk_info:
         const _cagSk;
         const 1;
         const 30;
 },
 _cagQC() //  [R1]
         { []
         }
     {offset
       cagQC: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cagSe; else goto cagSd;
       cagSe: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cagSd: // global
           I64[Hp - 64] = sat_sagkH_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sagkD_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cagS9_info;
           R2 = Hp - 62;
           _sagkB::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _sagkB::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagQC_info" {
     block_cagQC_info:
         const _cagQC;
         const 2;
         const 30;
 },
 _cagS9() //  [R1]
         { []
         }
     {offset
       cagS9: // global
           _sagks::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cagSb_info;
           R2 = P64[Sp + 16];
           _sagkK::P64 = R1;
           R1 = _sagks::P64;
           P64[Sp + 16] = _sagkK::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagS9_info" {
     block_cagS9_info:
         const _cagS9;
         const 2;
         const 30;
 },
 _cagSb() //  []
         { []
         }
     {offset
       cagSb: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagSb_info" {
     block_cagSb_info:
         const _cagSb;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.328392025 UTC

[section ""data" . withMVar1_ragjU_closure" {
     withMVar1_ragjU_closure:
         const withMVar1_ragjU_info;
 },
 withMVar1_ragjU_entry() //  [R2, R3]
         { []
         }
     {offset
       cagTT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cagTU; else goto cagTV;
       cagTU: // global
           R3 = R3;
           R2 = R2;
           R1 = withMVar1_ragjU_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cagTV: // global
           I64[Sp - 16] = block_cagTQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uagTZ; else goto cagTR;
       uagTZ: // global
           call _cagTQ(R1) args: 0, res: 0, upd: 0;
       cagTR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . withMVar1_ragjU_info" {
     withMVar1_ragjU_info:
         const withMVar1_ragjU_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cagTQ() //  [R1]
         { []
         }
     {offset
       cagTQ: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call $wwithMVar_ragjT_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagTQ_info" {
     block_cagTQ_info:
         const _cagTQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.333291844 UTC

[section ""data" . Control.Concurrent.MVar.withMVar_closure" {
     Control.Concurrent.MVar.withMVar_closure:
         const Control.Concurrent.MVar.withMVar_info;
 },
 Control.Concurrent.MVar.withMVar_entry() //  [R2, R3]
         { []
         }
     {offset
       cagUd: // global
           R3 = R3;
           R2 = R2;
           call withMVar1_ragjU_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.withMVar_info" {
     Control.Concurrent.MVar.withMVar_info:
         const Control.Concurrent.MVar.withMVar_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.339842326 UTC

[section ""data" . $wwithMVarMasked_ragjV_closure" {
     $wwithMVarMasked_ragjV_closure:
         const $wwithMVarMasked_ragjV_info;
 },
 sat_sagly_entry() //  [R1, R2]
         { []
         }
     {offset
       cagUE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cagUF; else goto cagUG;
       cagUF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cagUG: // global
           I64[Sp - 16] = block_cagUC_info;
           _saglv::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saglv::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagly_info" {
     sat_sagly_info:
         const sat_sagly_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cagUC() //  []
         { []
         }
     {offset
       cagUC: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagUC_info" {
     block_cagUC_info:
         const _cagUC;
         const 1;
         const 30;
 },
 sat_saglu_entry() //  [R1]
         { []
         }
     {offset
       cagUM: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saglu_info" {
     sat_saglu_info:
         const sat_saglu_entry;
         const 2;
         const 18;
 },
 io_saglp_entry() //  [R1]
         { []
         }
     {offset
       cagUT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cagUU; else goto cagUV;
       cagUU: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cagUV: // global
           I64[Sp - 24] = block_cagUv_info;
           _saglj::P64 = P64[R1 + 7];
           _saglk::P64 = P64[R1 + 15];
           R1 = _saglj::P64;
           P64[Sp - 16] = _saglj::P64;
           P64[Sp - 8] = _saglk::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saglp_info" {
     io_saglp_info:
         const io_saglp_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cagUv() //  [R1]
         { []
         }
     {offset
       cagUv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cagUY; else goto cagUX;
       cagUY: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cagUX: // global
           I64[Hp - 48] = sat_sagly_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_saglu_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp] = block_cagUP_info;
           R2 = Hp - 46;
           _saglt::P64 = R1;
           R1 = Hp - 24;
           P64[Sp + 16] = _saglt::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagUv_info" {
     block_cagUv_info:
         const _cagUv;
         const 2;
         const 30;
 },
 _cagUP() //  [R1]
         { []
         }
     {offset
       cagUP: // global
           _saglj::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cagUR_info;
           R2 = P64[Sp + 16];
           _saglB::P64 = R1;
           R1 = _saglj::P64;
           P64[Sp + 16] = _saglB::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagUP_info" {
     block_cagUP_info:
         const _cagUP;
         const 2;
         const 30;
 },
 _cagUR() //  []
         { []
         }
     {offset
       cagUR: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagUR_info" {
     block_cagUR_info:
         const _cagUR;
         const 1;
         const 30;
 },
 $wwithMVarMasked_ragjV_entry() //  [R2, R3]
         { []
         }
     {offset
       cagV5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cagV6; else goto cagV7;
       cagV6: // global
           R3 = R3;
           R2 = R2;
           R1 = $wwithMVarMasked_ragjV_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cagV7: // global
           I64[Sp - 24] = block_cagUo_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wwithMVarMasked_ragjV_info" {
     $wwithMVarMasked_ragjV_info:
         const $wwithMVarMasked_ragjV_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cagUo() //  [R1]
         { []
         }
     {offset
       cagUo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cagVa; else goto cagV9;
       cagVa: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cagV9: // global
           I64[Hp - 16] = io_saglp_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           _cagUq::P64 = Hp - 15;
           if (R1 == 0) goto cagV4; else goto cagV3;
       cagV4: // global
           R1 = _cagUq::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cagV3: // global
           R1 = _cagUq::P64;
           Sp = Sp + 24;
           call io_saglp_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagUo_info" {
     block_cagUo_info:
         const _cagUo;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.356128707 UTC

[section ""data" . withMVarMasked1_ragjW_closure" {
     withMVarMasked1_ragjW_closure:
         const withMVarMasked1_ragjW_info;
 },
 withMVarMasked1_ragjW_entry() //  [R2, R3]
         { []
         }
     {offset
       cagVS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cagVT; else goto cagVU;
       cagVT: // global
           R3 = R3;
           R2 = R2;
           R1 = withMVarMasked1_ragjW_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cagVU: // global
           I64[Sp - 16] = block_cagVP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uagVY; else goto cagVQ;
       uagVY: // global
           call _cagVP(R1) args: 0, res: 0, upd: 0;
       cagVQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . withMVarMasked1_ragjW_info" {
     withMVarMasked1_ragjW_info:
         const withMVarMasked1_ragjW_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cagVP() //  [R1]
         { []
         }
     {offset
       cagVP: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call $wwithMVarMasked_ragjV_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagVP_info" {
     block_cagVP_info:
         const _cagVP;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.361050509 UTC

[section ""data" . Control.Concurrent.MVar.withMVarMasked_closure" {
     Control.Concurrent.MVar.withMVarMasked_closure:
         const Control.Concurrent.MVar.withMVarMasked_info;
 },
 Control.Concurrent.MVar.withMVarMasked_entry() //  [R2, R3]
         { []
         }
     {offset
       cagWc: // global
           R3 = R3;
           R2 = R2;
           call withMVarMasked1_ragjW_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.withMVarMasked_info" {
     Control.Concurrent.MVar.withMVarMasked_info:
         const Control.Concurrent.MVar.withMVarMasked_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.370110127 UTC

[section ""data" . $wmodifyMVar__ragjX_closure" {
     $wmodifyMVar__ragjX_closure:
         const $wmodifyMVar__ragjX_info;
 },
 sat_saglY_entry() //  [R1, R2]
         { []
         }
     {offset
       cagWA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cagWB; else goto cagWC;
       cagWB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cagWC: // global
           I64[Sp - 16] = block_cagWy_info;
           _saglV::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saglV::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saglY_info" {
     sat_saglY_info:
         const sat_saglY_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cagWy() //  []
         { []
         }
     {offset
       cagWy: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagWy_info" {
     block_cagWy_info:
         const _cagWy;
         const 1;
         const 30;
 },
 sat_saglU_entry() //  [R1]
         { []
         }
     {offset
       cagWK: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saglU_info" {
     sat_saglU_info:
         const sat_saglU_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sagmc_entry() //  [R1, R2]
         { []
         }
     {offset
       cagX2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cagX3; else goto cagX4;
       cagX3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cagX4: // global
           I64[Sp - 16] = block_cagX0_info;
           _sagm9::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sagm9::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagmc_info" {
     sat_sagmc_info:
         const sat_sagmc_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cagX0() //  []
         { []
         }
     {offset
       cagX0: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagX0_info" {
     block_cagX0_info:
         const _cagX0;
         const 1;
         const 30;
 },
 sat_sagm8_entry() //  [R1]
         { []
         }
     {offset
       cagXc: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagm8_info" {
     sat_sagm8_info:
         const sat_sagm8_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sagmh_entry() //  [R1]
         { []
         }
     {offset
       cagXj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cagXk; else goto cagXl;
       cagXk: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cagXl: // global
           I64[Sp - 24] = block_cagWT_info;
           _saglJ::P64 = P64[R1 + 7];
           _saglK::P64 = P64[R1 + 15];
           R1 = _saglJ::P64;
           P64[Sp - 16] = _saglJ::P64;
           P64[Sp - 8] = _saglK::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagmh_info" {
     sat_sagmh_info:
         const sat_sagmh_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cagWT() //  [R1]
         { []
         }
     {offset
       cagWT: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cagXo; else goto cagXn;
       cagXo: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cagXn: // global
           I64[Hp - 64] = sat_sagmc_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sagm8_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cagXf_info;
           R2 = Hp - 62;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagWT_info" {
     block_cagWT_info:
         const _cagWT;
         const 2;
         const 30;
 },
 _cagXf() //  [R1]
         { []
         }
     {offset
       cagXf: // global
           I64[Sp + 16] = block_cagXh_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagXf_info" {
     block_cagXf_info:
         const _cagXf;
         const 130;
         const 30;
 },
 _cagXh() //  []
         { []
         }
     {offset
       cagXh: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagXh_info" {
     block_cagXh_info:
         const _cagXh;
         const 0;
         const 30;
 },
 sat_sagmq_entry() //  [R1, R2]
         { []
         }
     {offset
       cagXB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cagXC; else goto cagXD;
       cagXC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cagXD: // global
           I64[Sp - 16] = block_cagXz_info;
           _sagmn::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sagmn::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagmq_info" {
     sat_sagmq_info:
         const sat_sagmq_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cagXz() //  []
         { []
         }
     {offset
       cagXz: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagXz_info" {
     block_cagXz_info:
         const _cagXz;
         const 1;
         const 30;
 },
 sat_sagmm_entry() //  [R1]
         { []
         }
     {offset
       cagXL: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagmm_info" {
     sat_sagmm_info:
         const sat_sagmm_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 $wmodifyMVar__ragjX_entry() //  [R2, R3]
         { []
         }
     {offset
       cagXS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cagXT; else goto cagXU;
       cagXT: // global
           R3 = R3;
           R2 = R2;
           R1 = $wmodifyMVar__ragjX_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cagXU: // global
           I64[Sp - 24] = block_cagWn_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wmodifyMVar__ragjX_info" {
     $wmodifyMVar__ragjX_info:
         const $wmodifyMVar__ragjX_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cagWn() //  [R1]
         { []
         }
     {offset
       cagWn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cagXX; else goto cagXW;
       cagXX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cagXW: // global
           _saglJ::P64 = P64[Sp + 8];
           if (R1 == 0) goto cagXQ; else goto uagYg;
       cagXQ: // global
           I64[Hp - 16] = sat_sagmh_info;
           P64[Hp - 8] = _saglJ::P64;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       uagYg: // global
           if (R1 == 1) goto cagXR; else goto cagXP;
       cagXR: // global
           Hp = Hp - 24;
           I64[Sp] = block_cagXs_info;
           R1 = _saglJ::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       cagXP: // global
           Hp = Hp - 24;
           I64[Sp] = block_cagWr_info;
           R1 = _saglJ::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagWn_info" {
     block_cagWn_info:
         const _cagWn;
         const 2;
         const 30;
 },
 _cagXs() //  [R1]
         { []
         }
     {offset
       cagXs: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cagYc; else goto cagYb;
       cagYc: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cagYb: // global
           I64[Hp - 64] = sat_sagmq_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sagmm_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cagY7_info;
           R2 = Hp - 62;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagXs_info" {
     block_cagXs_info:
         const _cagXs;
         const 2;
         const 30;
 },
 _cagY7() //  [R1]
         { []
         }
     {offset
       cagY7: // global
           I64[Sp + 16] = block_cagY9_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagY7_info" {
     block_cagY7_info:
         const _cagY7;
         const 130;
         const 30;
 },
 _cagWr() //  [R1]
         { []
         }
     {offset
       cagWr: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cagY3; else goto cagY2;
       cagY3: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cagY2: // global
           I64[Hp - 64] = sat_saglY_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saglU_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cagXY_info;
           R2 = Hp - 62;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagWr_info" {
     block_cagWr_info:
         const _cagWr;
         const 2;
         const 30;
 },
 _cagXY() //  [R1]
         { []
         }
     {offset
       cagXY: // global
           I64[Sp + 16] = block_cagY9_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cagXY_info" {
     block_cagXY_info:
         const _cagXY;
         const 130;
         const 30;
 },
 _cagY9() //  []
         { []
         }
     {offset
       cagY9: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagY9_info" {
     block_cagY9_info:
         const _cagY9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.403817549 UTC

[section ""data" . modifyMVar_1_ragjY_closure" {
     modifyMVar_1_ragjY_closure:
         const modifyMVar_1_ragjY_info;
 },
 modifyMVar_1_ragjY_entry() //  [R2, R3]
         { []
         }
     {offset
       cagZE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cagZF; else goto cagZG;
       cagZF: // global
           R3 = R3;
           R2 = R2;
           R1 = modifyMVar_1_ragjY_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cagZG: // global
           I64[Sp - 16] = block_cagZB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uagZK; else goto cagZC;
       uagZK: // global
           call _cagZB(R1) args: 0, res: 0, upd: 0;
       cagZC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . modifyMVar_1_ragjY_info" {
     modifyMVar_1_ragjY_info:
         const modifyMVar_1_ragjY_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cagZB() //  [R1]
         { []
         }
     {offset
       cagZB: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call $wmodifyMVar__ragjX_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cagZB_info" {
     block_cagZB_info:
         const _cagZB;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.409156776 UTC

[section ""data" . Control.Concurrent.MVar.modifyMVar__closure" {
     Control.Concurrent.MVar.modifyMVar__closure:
         const Control.Concurrent.MVar.modifyMVar__info;
 },
 Control.Concurrent.MVar.modifyMVar__entry() //  [R2, R3]
         { []
         }
     {offset
       cagZY: // global
           R3 = R3;
           R2 = R2;
           call modifyMVar_1_ragjY_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.modifyMVar__info" {
     Control.Concurrent.MVar.modifyMVar__info:
         const Control.Concurrent.MVar.modifyMVar__entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.420495624 UTC

[section ""data" . $wmodifyMVar_ragjZ_closure" {
     $wmodifyMVar_ragjZ_closure:
         const $wmodifyMVar_ragjZ_info;
 },
 sat_sagmT_entry() //  [R1, R2]
         { []
         }
     {offset
       cah0m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cah0n; else goto cah0o;
       cah0n: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cah0o: // global
           I64[Sp - 16] = block_cah0k_info;
           _sagmQ::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sagmQ::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagmT_info" {
     sat_sagmT_info:
         const sat_sagmT_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cah0k() //  []
         { []
         }
     {offset
       cah0k: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah0k_info" {
     block_cah0k_info:
         const _cah0k;
         const 1;
         const 30;
 },
 sat_sagmO_entry() //  [R1]
         { []
         }
     {offset
       cah0x: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cah0y; else goto cah0z;
       cah0y: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cah0z: // global
           I64[Sp - 8] = block_cah0v_info;
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagmO_info" {
     sat_sagmO_info:
         const sat_sagmO_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cah0v() //  [R1]
         { []
         }
     {offset
       cah0v: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah0v_info" {
     block_cah0v_info:
         const _cah0v;
         const 0;
         const 30;
 },
 sat_sagmP_entry() //  [R1]
         { []
         }
     {offset
       cah0G: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagmP_info" {
     sat_sagmP_info:
         const sat_sagmP_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sagne_entry() //  [R1, R2]
         { []
         }
     {offset
       cah0Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cah0Z; else goto cah10;
       cah0Z: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cah10: // global
           I64[Sp - 16] = block_cah0W_info;
           _sagnb::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sagnb::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagne_info" {
     sat_sagne_info:
         const sat_sagne_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cah0W() //  []
         { []
         }
     {offset
       cah0W: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah0W_info" {
     block_cah0W_info:
         const _cah0W;
         const 1;
         const 30;
 },
 sat_sagn9_entry() //  [R1]
         { []
         }
     {offset
       cah19: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cah1a; else goto cah1b;
       cah1a: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cah1b: // global
           I64[Sp - 8] = block_cah17_info;
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagn9_info" {
     sat_sagn9_info:
         const sat_sagn9_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cah17() //  [R1]
         { []
         }
     {offset
       cah17: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah17_info" {
     block_cah17_info:
         const _cah17;
         const 0;
         const 30;
 },
 sat_sagna_entry() //  [R1]
         { []
         }
     {offset
       cah1i: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagna_info" {
     sat_sagna_info:
         const sat_sagna_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sagnm_entry() //  [R1]
         { []
         }
     {offset
       cah1q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cah1u; else goto cah1v;
       cah1u: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cah1v: // global
           I64[Sp - 24] = block_cah0P_info;
           _sagmA::P64 = P64[R1 + 7];
           _sagmB::P64 = P64[R1 + 15];
           R1 = _sagmA::P64;
           P64[Sp - 16] = _sagmA::P64;
           P64[Sp - 8] = _sagmB::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagnm_info" {
     sat_sagnm_info:
         const sat_sagnm_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cah0P() //  [R1]
         { []
         }
     {offset
       cah0P: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cah1y; else goto cah1x;
       cah1y: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cah1x: // global
           I64[Hp - 56] = sat_sagne_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_sagn9_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sagna_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_cah1l_info;
           R2 = Hp - 54;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cah0P_info" {
     block_cah0P_info:
         const _cah0P;
         const 2;
         const 30;
 },
 _cah1l() //  [R1]
         { []
         }
     {offset
       cah1l: // global
           I64[Sp] = block_cah1n_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uah1D; else goto cah1o;
       uah1D: // global
           call _cah1n(R1) args: 0, res: 0, upd: 0;
       cah1o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cah1l_info" {
     block_cah1l_info:
         const _cah1l;
         const 130;
         const 30;
 },
 _cah1n() //  [R1]
         { []
         }
     {offset
       cah1n: // global
           _sagmA::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cah1t_info;
           R2 = P64[R1 + 7];
           _sagnk::P64 = P64[R1 + 15];
           R1 = _sagmA::P64;
           P64[Sp + 16] = _sagnk::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cah1n_info" {
     block_cah1n_info:
         const _cah1n;
         const 130;
         const 30;
 },
 _cah1t() //  []
         { []
         }
     {offset
       cah1t: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah1t_info" {
     block_cah1t_info:
         const _cah1t;
         const 1;
         const 30;
 },
 sat_sagnz_entry() //  [R1, R2]
         { []
         }
     {offset
       cah1O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cah1P; else goto cah1Q;
       cah1P: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cah1Q: // global
           I64[Sp - 16] = block_cah1M_info;
           _sagnw::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sagnw::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagnz_info" {
     sat_sagnz_info:
         const sat_sagnz_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cah1M() //  []
         { []
         }
     {offset
       cah1M: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah1M_info" {
     block_cah1M_info:
         const _cah1M;
         const 1;
         const 30;
 },
 sat_sagnu_entry() //  [R1]
         { []
         }
     {offset
       cah1Z: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cah20; else goto cah21;
       cah20: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cah21: // global
           I64[Sp - 8] = block_cah1X_info;
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagnu_info" {
     sat_sagnu_info:
         const sat_sagnu_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cah1X() //  [R1]
         { []
         }
     {offset
       cah1X: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah1X_info" {
     block_cah1X_info:
         const _cah1X;
         const 0;
         const 30;
 },
 sat_sagnv_entry() //  [R1]
         { []
         }
     {offset
       cah28: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagnv_info" {
     sat_sagnv_info:
         const sat_sagnv_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 $wmodifyMVar_ragjZ_entry() //  [R2, R3]
         { []
         }
     {offset
       cah2f: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cah2g; else goto cah2h;
       cah2g: // global
           R3 = R3;
           R2 = R2;
           R1 = $wmodifyMVar_ragjZ_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cah2h: // global
           I64[Sp - 24] = block_cah09_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wmodifyMVar_ragjZ_info" {
     $wmodifyMVar_ragjZ_info:
         const $wmodifyMVar_ragjZ_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cah09() //  [R1]
         { []
         }
     {offset
       cah09: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cah2k; else goto cah2j;
       cah2k: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cah2j: // global
           _sagmA::P64 = P64[Sp + 8];
           if (R1 == 0) goto cah2d; else goto uah2P;
       cah2d: // global
           I64[Hp - 16] = sat_sagnm_info;
           P64[Hp - 8] = _sagmA::P64;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       uah2P: // global
           if (R1 == 1) goto cah2e; else goto cah2c;
       cah2e: // global
           Hp = Hp - 24;
           I64[Sp] = block_cah1F_info;
           R1 = _sagmA::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       cah2c: // global
           Hp = Hp - 24;
           I64[Sp] = block_cah0d_info;
           R1 = _sagmA::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cah09_info" {
     block_cah09_info:
         const _cah09;
         const 2;
         const 30;
 },
 _cah1F() //  [R1]
         { []
         }
     {offset
       cah1F: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cah2K; else goto cah2J;
       cah2K: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cah2J: // global
           I64[Hp - 56] = sat_sagnz_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_sagnu_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sagnv_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_cah2A_info;
           R2 = Hp - 54;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cah1F_info" {
     block_cah1F_info:
         const _cah1F;
         const 2;
         const 30;
 },
 _cah2A() //  [R1]
         { []
         }
     {offset
       cah2A: // global
           I64[Sp] = block_cah2C_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uah2R; else goto cah2D;
       uah2R: // global
           call _cah2C(R1) args: 0, res: 0, upd: 0;
       cah2D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cah2A_info" {
     block_cah2A_info:
         const _cah2A;
         const 130;
         const 30;
 },
 _cah2C() //  [R1]
         { []
         }
     {offset
       cah2C: // global
           _sagmA::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cah2H_info;
           R2 = P64[R1 + 7];
           _sagnF::P64 = P64[R1 + 15];
           R1 = _sagmA::P64;
           P64[Sp + 16] = _sagnF::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cah2C_info" {
     block_cah2C_info:
         const _cah2C;
         const 130;
         const 30;
 },
 _cah2H() //  []
         { []
         }
     {offset
       cah2H: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah2H_info" {
     block_cah2H_info:
         const _cah2H;
         const 1;
         const 30;
 },
 _cah0d() //  [R1]
         { []
         }
     {offset
       cah0d: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cah2v; else goto cah2u;
       cah2v: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cah2u: // global
           I64[Hp - 56] = sat_sagmT_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_sagmO_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sagmP_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_cah2l_info;
           R2 = Hp - 54;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cah0d_info" {
     block_cah0d_info:
         const _cah0d;
         const 2;
         const 30;
 },
 _cah2l() //  [R1]
         { []
         }
     {offset
       cah2l: // global
           I64[Sp] = block_cah2n_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uah2Q; else goto cah2o;
       uah2Q: // global
           call _cah2n(R1) args: 0, res: 0, upd: 0;
       cah2o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cah2l_info" {
     block_cah2l_info:
         const _cah2l;
         const 130;
         const 30;
 },
 _cah2n() //  [R1]
         { []
         }
     {offset
       cah2n: // global
           _sagmA::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cah2s_info;
           R2 = P64[R1 + 7];
           _sagmZ::P64 = P64[R1 + 15];
           R1 = _sagmA::P64;
           P64[Sp + 16] = _sagmZ::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cah2n_info" {
     block_cah2n_info:
         const _cah2n;
         const 130;
         const 30;
 },
 _cah2s() //  []
         { []
         }
     {offset
       cah2s: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah2s_info" {
     block_cah2s_info:
         const _cah2s;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.468312227 UTC

[section ""data" . modifyMVar1_ragk0_closure" {
     modifyMVar1_ragk0_closure:
         const modifyMVar1_ragk0_info;
 },
 modifyMVar1_ragk0_entry() //  [R2, R3]
         { []
         }
     {offset
       cah4W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cah4X; else goto cah4Y;
       cah4X: // global
           R3 = R3;
           R2 = R2;
           R1 = modifyMVar1_ragk0_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cah4Y: // global
           I64[Sp - 16] = block_cah4T_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uah52; else goto cah4U;
       uah52: // global
           call _cah4T(R1) args: 0, res: 0, upd: 0;
       cah4U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . modifyMVar1_ragk0_info" {
     modifyMVar1_ragk0_info:
         const modifyMVar1_ragk0_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cah4T() //  [R1]
         { []
         }
     {offset
       cah4T: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call $wmodifyMVar_ragjZ_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah4T_info" {
     block_cah4T_info:
         const _cah4T;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.473601505 UTC

[section ""data" . Control.Concurrent.MVar.modifyMVar_closure" {
     Control.Concurrent.MVar.modifyMVar_closure:
         const Control.Concurrent.MVar.modifyMVar_info;
 },
 Control.Concurrent.MVar.modifyMVar_entry() //  [R2, R3]
         { []
         }
     {offset
       cah5g: // global
           R3 = R3;
           R2 = R2;
           call modifyMVar1_ragk0_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.modifyMVar_info" {
     Control.Concurrent.MVar.modifyMVar_info:
         const Control.Concurrent.MVar.modifyMVar_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.479362202 UTC

[section ""data" . $wmodifyMVarMasked__ragk1_closure" {
     $wmodifyMVarMasked__ragk1_closure:
         const $wmodifyMVarMasked__ragk1_info;
 },
 sat_sago1_entry() //  [R1, R2]
         { []
         }
     {offset
       cah5H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cah5I; else goto cah5J;
       cah5I: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cah5J: // global
           I64[Sp - 16] = block_cah5F_info;
           _sagnY::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sagnY::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sago1_info" {
     sat_sago1_info:
         const sat_sago1_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cah5F() //  []
         { []
         }
     {offset
       cah5F: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah5F_info" {
     block_cah5F_info:
         const _cah5F;
         const 1;
         const 30;
 },
 sat_sagnX_entry() //  [R1]
         { []
         }
     {offset
       cah5P: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagnX_info" {
     sat_sagnX_info:
         const sat_sagnX_entry;
         const 2;
         const 18;
 },
 io_sagnS_entry() //  [R1]
         { []
         }
     {offset
       cah5W: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cah5X; else goto cah5Y;
       cah5X: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cah5Y: // global
           I64[Sp - 24] = block_cah5y_info;
           _sagnM::P64 = P64[R1 + 7];
           _sagnN::P64 = P64[R1 + 15];
           R1 = _sagnM::P64;
           P64[Sp - 16] = _sagnM::P64;
           P64[Sp - 8] = _sagnN::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sagnS_info" {
     io_sagnS_info:
         const io_sagnS_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cah5y() //  [R1]
         { []
         }
     {offset
       cah5y: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cah61; else goto cah60;
       cah61: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cah60: // global
           I64[Hp - 48] = sat_sago1_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_sagnX_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp] = block_cah5S_info;
           R2 = Hp - 46;
           R1 = Hp - 24;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cah5y_info" {
     block_cah5y_info:
         const _cah5y;
         const 2;
         const 30;
 },
 _cah5S() //  [R1]
         { []
         }
     {offset
       cah5S: // global
           I64[Sp + 16] = block_cah5U_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cah5S_info" {
     block_cah5S_info:
         const _cah5S;
         const 130;
         const 30;
 },
 _cah5U() //  []
         { []
         }
     {offset
       cah5U: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah5U_info" {
     block_cah5U_info:
         const _cah5U;
         const 0;
         const 30;
 },
 $wmodifyMVarMasked__ragk1_entry() //  [R2, R3]
         { []
         }
     {offset
       cah68: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cah69; else goto cah6a;
       cah69: // global
           R3 = R3;
           R2 = R2;
           R1 = $wmodifyMVarMasked__ragk1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cah6a: // global
           I64[Sp - 24] = block_cah5r_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wmodifyMVarMasked__ragk1_info" {
     $wmodifyMVarMasked__ragk1_info:
         const $wmodifyMVarMasked__ragk1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cah5r() //  [R1]
         { []
         }
     {offset
       cah5r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cah6d; else goto cah6c;
       cah6d: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cah6c: // global
           I64[Hp - 16] = io_sagnS_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           _cah5t::P64 = Hp - 15;
           if (R1 == 0) goto cah67; else goto cah66;
       cah67: // global
           R1 = _cah5t::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cah66: // global
           R1 = _cah5t::P64;
           Sp = Sp + 24;
           call io_sagnS_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah5r_info" {
     block_cah5r_info:
         const _cah5r;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.496288328 UTC

[section ""data" . modifyMVarMasked_1_ragk2_closure" {
     modifyMVarMasked_1_ragk2_closure:
         const modifyMVarMasked_1_ragk2_info;
 },
 modifyMVarMasked_1_ragk2_entry() //  [R2, R3]
         { []
         }
     {offset
       cah6V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cah6W; else goto cah6X;
       cah6W: // global
           R3 = R3;
           R2 = R2;
           R1 = modifyMVarMasked_1_ragk2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cah6X: // global
           I64[Sp - 16] = block_cah6S_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uah71; else goto cah6T;
       uah71: // global
           call _cah6S(R1) args: 0, res: 0, upd: 0;
       cah6T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . modifyMVarMasked_1_ragk2_info" {
     modifyMVarMasked_1_ragk2_info:
         const modifyMVarMasked_1_ragk2_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cah6S() //  [R1]
         { []
         }
     {offset
       cah6S: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call $wmodifyMVarMasked__ragk1_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah6S_info" {
     block_cah6S_info:
         const _cah6S;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.501093808 UTC

[section ""data" . Control.Concurrent.MVar.modifyMVarMasked__closure" {
     Control.Concurrent.MVar.modifyMVarMasked__closure:
         const Control.Concurrent.MVar.modifyMVarMasked__info;
 },
 Control.Concurrent.MVar.modifyMVarMasked__entry() //  [R2, R3]
         { []
         }
     {offset
       cah7f: // global
           R3 = R3;
           R2 = R2;
           call modifyMVarMasked_1_ragk2_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.modifyMVarMasked__info" {
     Control.Concurrent.MVar.modifyMVarMasked__info:
         const Control.Concurrent.MVar.modifyMVarMasked__entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.507358064 UTC

[section ""data" . $wmodifyMVarMasked_ragk3_closure" {
     $wmodifyMVarMasked_ragk3_closure:
         const $wmodifyMVarMasked_ragk3_info;
 },
 sat_sagov_entry() //  [R1, R2]
         { []
         }
     {offset
       cah7G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cah7H; else goto cah7I;
       cah7H: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cah7I: // global
           I64[Sp - 16] = block_cah7E_info;
           _sagos::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sagos::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagov_info" {
     sat_sagov_info:
         const sat_sagov_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cah7E() //  []
         { []
         }
     {offset
       cah7E: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah7E_info" {
     block_cah7E_info:
         const _cah7E;
         const 1;
         const 30;
 },
 sat_sagor_entry() //  [R1]
         { []
         }
     {offset
       cah7R: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cah7S; else goto cah7T;
       cah7S: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cah7T: // global
           I64[Sp - 8] = block_cah7P_info;
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sagor_info" {
     sat_sagor_info:
         const sat_sagor_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cah7P() //  [R1]
         { []
         }
     {offset
       cah7P: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah7P_info" {
     block_cah7P_info:
         const _cah7P;
         const 0;
         const 30;
 },
 io_sagoi_entry() //  [R1]
         { []
         }
     {offset
       cah80: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cah84; else goto cah85;
       cah84: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cah85: // global
           I64[Sp - 24] = block_cah7x_info;
           _sagoc::P64 = P64[R1 + 7];
           _sagod::P64 = P64[R1 + 15];
           R1 = _sagoc::P64;
           P64[Sp - 16] = _sagoc::P64;
           P64[Sp - 8] = _sagod::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sagoi_info" {
     io_sagoi_info:
         const io_sagoi_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cah7x() //  [R1]
         { []
         }
     {offset
       cah7x: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cah88; else goto cah87;
       cah88: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cah87: // global
           I64[Hp - 40] = sat_sagov_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_sagor_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp] = block_cah7V_info;
           R2 = Hp - 38;
           R1 = Hp - 15;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cah7x_info" {
     block_cah7x_info:
         const _cah7x;
         const 2;
         const 30;
 },
 _cah7V() //  [R1]
         { []
         }
     {offset
       cah7V: // global
           I64[Sp] = block_cah7X_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uah8d; else goto cah7Y;
       uah8d: // global
           call _cah7X(R1) args: 0, res: 0, upd: 0;
       cah7Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cah7V_info" {
     block_cah7V_info:
         const _cah7V;
         const 130;
         const 30;
 },
 _cah7X() //  [R1]
         { []
         }
     {offset
       cah7X: // global
           _sagoc::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cah83_info;
           R2 = P64[R1 + 7];
           _sagoB::P64 = P64[R1 + 15];
           R1 = _sagoc::P64;
           P64[Sp + 16] = _sagoB::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cah7X_info" {
     block_cah7X_info:
         const _cah7X;
         const 130;
         const 30;
 },
 _cah83() //  []
         { []
         }
     {offset
       cah83: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah83_info" {
     block_cah83_info:
         const _cah83;
         const 1;
         const 30;
 },
 $wmodifyMVarMasked_ragk3_entry() //  [R2, R3]
         { []
         }
     {offset
       cah8i: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cah8j; else goto cah8k;
       cah8j: // global
           R3 = R3;
           R2 = R2;
           R1 = $wmodifyMVarMasked_ragk3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cah8k: // global
           I64[Sp - 24] = block_cah7q_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wmodifyMVarMasked_ragk3_info" {
     $wmodifyMVarMasked_ragk3_info:
         const $wmodifyMVarMasked_ragk3_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cah7q() //  [R1]
         { []
         }
     {offset
       cah7q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cah8n; else goto cah8m;
       cah8n: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cah8m: // global
           I64[Hp - 16] = io_sagoi_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           _cah7s::P64 = Hp - 15;
           if (R1 == 0) goto cah8h; else goto cah8g;
       cah8h: // global
           R1 = _cah7s::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cah8g: // global
           R1 = _cah7s::P64;
           Sp = Sp + 24;
           call io_sagoi_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah7q_info" {
     block_cah7q_info:
         const _cah7q;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.527613189 UTC

[section ""data" . modifyMVarMasked1_ragk4_closure" {
     modifyMVarMasked1_ragk4_closure:
         const modifyMVarMasked1_ragk4_info;
 },
 modifyMVarMasked1_ragk4_entry() //  [R2, R3]
         { []
         }
     {offset
       cah9f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cah9g; else goto cah9h;
       cah9g: // global
           R3 = R3;
           R2 = R2;
           R1 = modifyMVarMasked1_ragk4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cah9h: // global
           I64[Sp - 16] = block_cah9c_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uah9l; else goto cah9d;
       uah9l: // global
           call _cah9c(R1) args: 0, res: 0, upd: 0;
       cah9d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . modifyMVarMasked1_ragk4_info" {
     modifyMVarMasked1_ragk4_info:
         const modifyMVarMasked1_ragk4_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cah9c() //  [R1]
         { []
         }
     {offset
       cah9c: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call $wmodifyMVarMasked_ragk3_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cah9c_info" {
     block_cah9c_info:
         const _cah9c;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.532976754 UTC

[section ""data" . Control.Concurrent.MVar.modifyMVarMasked_closure" {
     Control.Concurrent.MVar.modifyMVarMasked_closure:
         const Control.Concurrent.MVar.modifyMVarMasked_info;
 },
 Control.Concurrent.MVar.modifyMVarMasked_entry() //  [R2, R3]
         { []
         }
     {offset
       cah9z: // global
           R3 = R3;
           R2 = R2;
           call modifyMVarMasked1_ragk4_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.modifyMVarMasked_info" {
     Control.Concurrent.MVar.modifyMVarMasked_info:
         const Control.Concurrent.MVar.modifyMVarMasked_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.536398684 UTC

[section ""data" . Control.Concurrent.MVar.addMVarFinalizer_closure" {
     Control.Concurrent.MVar.addMVarFinalizer_closure:
         const Control.Concurrent.MVar.addMVarFinalizer_info;
 },
 Control.Concurrent.MVar.addMVarFinalizer_entry() //  [R2, R3]
         { []
         }
     {offset
       cah9K: // global
           R3 = R3;
           R2 = R2;
           call GHC.MVar.addMVarFinalizer1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.addMVarFinalizer_info" {
     Control.Concurrent.MVar.addMVarFinalizer_info:
         const Control.Concurrent.MVar.addMVarFinalizer_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.540478582 UTC

[section ""data" . Control.Concurrent.MVar.mkWeakMVar1_closure" {
     Control.Concurrent.MVar.mkWeakMVar1_closure:
         const Control.Concurrent.MVar.mkWeakMVar1_info;
 },
 Control.Concurrent.MVar.mkWeakMVar1_entry() //  [R2, R3]
         { []
         }
     {offset
       cah9Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caha4; else goto caha5;
       caha4: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.MVar.mkWeakMVar1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caha5: // global
           I64[Sp - 16] = block_cah9V_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uahaa; else goto cah9W;
       uahaa: // global
           call _cah9V(R1) args: 0, res: 0, upd: 0;
       cah9W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.mkWeakMVar1_info" {
     Control.Concurrent.MVar.mkWeakMVar1_info:
         const Control.Concurrent.MVar.mkWeakMVar1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cah9V() //  [R1]
         { []
         }
     {offset
       cah9V: // global
           _sagoK::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caha1_info;
           R3 = _sagoK::P64;
           R2 = R1;
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cah9V_info" {
     block_cah9V_info:
         const _cah9V;
         const 1;
         const 30;
 },
 _caha1() //  [R1]
         { []
         }
     {offset
       caha1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caha9; else goto caha8;
       caha9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caha8: // global
           I64[Hp - 8] = GHC.Weak.Weak_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caha1_info" {
     block_caha1_info:
         const _caha1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.547628646 UTC

[section ""data" . Control.Concurrent.MVar.mkWeakMVar_closure" {
     Control.Concurrent.MVar.mkWeakMVar_closure:
         const Control.Concurrent.MVar.mkWeakMVar_info;
 },
 Control.Concurrent.MVar.mkWeakMVar_entry() //  [R2, R3]
         { []
         }
     {offset
       cahas: // global
           R3 = R3;
           R2 = R2;
           call Control.Concurrent.MVar.mkWeakMVar1_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.mkWeakMVar_info" {
     Control.Concurrent.MVar.mkWeakMVar_info:
         const Control.Concurrent.MVar.mkWeakMVar_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.551213744 UTC

[section ""cstring" . Control.Concurrent.MVar.$trModule4_bytes" {
     Control.Concurrent.MVar.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.552957911 UTC

[section ""data" . Control.Concurrent.MVar.$trModule3_closure" {
     Control.Concurrent.MVar.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.MVar.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.555053843 UTC

[section ""cstring" . Control.Concurrent.MVar.$trModule2_bytes" {
     Control.Concurrent.MVar.$trModule2_bytes:
         I8[] [67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,77,86,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.556781342 UTC

[section ""data" . Control.Concurrent.MVar.$trModule1_closure" {
     Control.Concurrent.MVar.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.MVar.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.5584855 UTC

[section ""data" . Control.Concurrent.MVar.$trModule_closure" {
     Control.Concurrent.MVar.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Control.Concurrent.MVar.$trModule3_closure+1;
         const Control.Concurrent.MVar.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:17.560210001 UTC

[section ""relreadonly" . SagBS_srt" { SagBS_srt:
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.258468901 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:05:18.261745578 UTC

[section ""data" . Control.Concurrent.MVar.$wswapMVar_closure" {
     Control.Concurrent.MVar.$wswapMVar_closure:
         const Control.Concurrent.MVar.$wswapMVar_info;
 },
 sat_sahaV_entry() //  [R1]
         { []
         }
     {offset
       cahfJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cahfK; else goto cahfL;
       cahfK: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cahfL: // global
           I64[Sp - 24] = block_cahfF_info;
           _sahaF::P64 = P64[R1 + 7];
           _sahaG::P64 = P64[R1 + 15];
           R1 = _sahaF::P64;
           P64[Sp - 16] = _sahaF::P64;
           P64[Sp - 8] = _sahaG::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahaV_info" {
     sat_sahaV_info:
         const sat_sahaV_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cahfF() //  [R1]
         { []
         }
     {offset
       cahfF: // global
           _sahaF::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cahfH_info;
           R2 = P64[Sp + 16];
           _sahaT::P64 = R1;
           R1 = _sahaF::P64;
           P64[Sp + 16] = _sahaT::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahfF_info" {
     block_cahfF_info:
         const _cahfF;
         const 2;
         const 30;
 },
 _cahfH() //  []
         { []
         }
     {offset
       cahfH: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahfH_info" {
     block_cahfH_info:
         const _cahfH;
         const 1;
         const 30;
 },
 Control.Concurrent.MVar.$wswapMVar_entry() //  [R2, R3]
         { []
         }
     {offset
       cahfR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cahfS; else goto cahfT;
       cahfS: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.MVar.$wswapMVar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cahfT: // global
           I64[Sp - 24] = block_cahfv_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.$wswapMVar_info" {
     Control.Concurrent.MVar.$wswapMVar_info:
         const Control.Concurrent.MVar.$wswapMVar_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cahfv() //  [R1]
         { []
         }
     {offset
       cahfv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cahfW; else goto cahfV;
       cahfW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cahfV: // global
           _sahaF::P64 = P64[Sp + 8];
           if (R1 == 0) goto cahfQ; else goto cahfP;
       cahfQ: // global
           I64[Hp - 16] = sat_sahaV_info;
           P64[Hp - 8] = _sahaF::P64;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cahfP: // global
           Hp = Hp - 24;
           I64[Sp] = block_cahfX_info;
           R1 = _sahaF::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahfv_info" {
     block_cahfv_info:
         const _cahfv;
         const 2;
         const 30;
 },
 _cahfX() //  [R1]
         { []
         }
     {offset
       cahfX: // global
           _sahaF::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cahfZ_info;
           R2 = P64[Sp + 16];
           _sahaO::P64 = R1;
           R1 = _sahaF::P64;
           P64[Sp + 16] = _sahaO::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahfX_info" {
     block_cahfX_info:
         const _cahfX;
         const 2;
         const 30;
 },
 _cahfZ() //  []
         { []
         }
     {offset
       cahfZ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahfZ_info" {
     block_cahfZ_info:
         const _cahfZ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.274830809 UTC

[section ""data" . Control.Concurrent.MVar.swapMVar1_closure" {
     Control.Concurrent.MVar.swapMVar1_closure:
         const Control.Concurrent.MVar.swapMVar1_info;
 },
 Control.Concurrent.MVar.swapMVar1_entry() //  [R2, R3]
         { []
         }
     {offset
       cahgH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahgI; else goto cahgJ;
       cahgI: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.MVar.swapMVar1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cahgJ: // global
           I64[Sp - 16] = block_cahgE_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uahgN; else goto cahgF;
       uahgN: // global
           call _cahgE(R1) args: 0, res: 0, upd: 0;
       cahgF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.swapMVar1_info" {
     Control.Concurrent.MVar.swapMVar1_info:
         const Control.Concurrent.MVar.swapMVar1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cahgE() //  [R1]
         { []
         }
     {offset
       cahgE: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call Control.Concurrent.MVar.$wswapMVar_entry(R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahgE_info" {
     block_cahgE_info:
         const _cahgE;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.280040236 UTC

[section ""data" . Control.Concurrent.MVar.swapMVar_closure" {
     Control.Concurrent.MVar.swapMVar_closure:
         const Control.Concurrent.MVar.swapMVar_info;
 },
 Control.Concurrent.MVar.swapMVar_entry() //  [R2, R3]
         { []
         }
     {offset
       cahh2: // global
           R3 = R3;
           R2 = R2;
           call Control.Concurrent.MVar.swapMVar1_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.swapMVar_info" {
     Control.Concurrent.MVar.swapMVar_info:
         const Control.Concurrent.MVar.swapMVar_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.289371359 UTC

[section ""data" . $wwithMVar_ragjT_closure" {
     $wwithMVar_ragjT_closure:
         const $wwithMVar_ragjT_info;
 },
 sat_sahbg_entry() //  [R1, R2]
         { []
         }
     {offset
       cahhq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahhr; else goto cahhs;
       cahhr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cahhs: // global
           I64[Sp - 16] = block_cahho_info;
           _sahbd::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sahbd::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahbg_info" {
     sat_sahbg_info:
         const sat_sahbg_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cahho() //  []
         { []
         }
     {offset
       cahho: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahho_info" {
     block_cahho_info:
         const _cahho;
         const 1;
         const 30;
 },
 sat_sahbc_entry() //  [R1]
         { []
         }
     {offset
       cahhA: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahbc_info" {
     sat_sahbc_info:
         const sat_sahbc_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sahbu_entry() //  [R1, R2]
         { []
         }
     {offset
       cahhS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahhT; else goto cahhU;
       cahhT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cahhU: // global
           I64[Sp - 16] = block_cahhQ_info;
           _sahbr::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sahbr::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahbu_info" {
     sat_sahbu_info:
         const sat_sahbu_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cahhQ() //  []
         { []
         }
     {offset
       cahhQ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahhQ_info" {
     block_cahhQ_info:
         const _cahhQ;
         const 1;
         const 30;
 },
 sat_sahbq_entry() //  [R1]
         { []
         }
     {offset
       cahi2: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahbq_info" {
     sat_sahbq_info:
         const sat_sahbq_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sahbz_entry() //  [R1]
         { []
         }
     {offset
       cahi9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cahia; else goto cahib;
       cahia: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cahib: // global
           I64[Sp - 24] = block_cahhJ_info;
           _sahb1::P64 = P64[R1 + 7];
           _sahb2::P64 = P64[R1 + 15];
           R1 = _sahb1::P64;
           P64[Sp - 16] = _sahb1::P64;
           P64[Sp - 8] = _sahb2::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahbz_info" {
     sat_sahbz_info:
         const sat_sahbz_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cahhJ() //  [R1]
         { []
         }
     {offset
       cahhJ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cahie; else goto cahid;
       cahie: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cahid: // global
           I64[Hp - 64] = sat_sahbu_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sahbq_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cahi5_info;
           R2 = Hp - 62;
           _sahbo::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _sahbo::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahhJ_info" {
     block_cahhJ_info:
         const _cahhJ;
         const 2;
         const 30;
 },
 _cahi5() //  [R1]
         { []
         }
     {offset
       cahi5: // global
           _sahb1::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cahi7_info;
           R2 = P64[Sp + 16];
           _sahbx::P64 = R1;
           R1 = _sahb1::P64;
           P64[Sp + 16] = _sahbx::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahi5_info" {
     block_cahi5_info:
         const _cahi5;
         const 2;
         const 30;
 },
 _cahi7() //  []
         { []
         }
     {offset
       cahi7: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahi7_info" {
     block_cahi7_info:
         const _cahi7;
         const 1;
         const 30;
 },
 sat_sahbI_entry() //  [R1, R2]
         { []
         }
     {offset
       cahir: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahis; else goto cahit;
       cahis: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cahit: // global
           I64[Sp - 16] = block_cahip_info;
           _sahbF::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sahbF::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahbI_info" {
     sat_sahbI_info:
         const sat_sahbI_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cahip() //  []
         { []
         }
     {offset
       cahip: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahip_info" {
     block_cahip_info:
         const _cahip;
         const 1;
         const 30;
 },
 sat_sahbE_entry() //  [R1]
         { []
         }
     {offset
       cahiB: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahbE_info" {
     sat_sahbE_info:
         const sat_sahbE_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 $wwithMVar_ragjT_entry() //  [R2, R3]
         { []
         }
     {offset
       cahiI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cahiJ; else goto cahiK;
       cahiJ: // global
           R3 = R3;
           R2 = R2;
           R1 = $wwithMVar_ragjT_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cahiK: // global
           I64[Sp - 24] = block_cahhd_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wwithMVar_ragjT_info" {
     $wwithMVar_ragjT_info:
         const $wwithMVar_ragjT_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cahhd() //  [R1]
         { []
         }
     {offset
       cahhd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cahiN; else goto cahiM;
       cahiN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cahiM: // global
           _sahb1::P64 = P64[Sp + 8];
           if (R1 == 0) goto cahiG; else goto uahj6;
       cahiG: // global
           I64[Hp - 16] = sat_sahbz_info;
           P64[Hp - 8] = _sahb1::P64;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       uahj6: // global
           if (R1 == 1) goto cahiH; else goto cahiF;
       cahiH: // global
           Hp = Hp - 24;
           I64[Sp] = block_cahii_info;
           R1 = _sahb1::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       cahiF: // global
           Hp = Hp - 24;
           I64[Sp] = block_cahhh_info;
           R1 = _sahb1::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahhd_info" {
     block_cahhd_info:
         const _cahhd;
         const 2;
         const 30;
 },
 _cahii() //  [R1]
         { []
         }
     {offset
       cahii: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cahj2; else goto cahj1;
       cahj2: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cahj1: // global
           I64[Hp - 64] = sat_sahbI_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sahbE_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cahiX_info;
           R2 = Hp - 62;
           _sahbC::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _sahbC::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahii_info" {
     block_cahii_info:
         const _cahii;
         const 2;
         const 30;
 },
 _cahiX() //  [R1]
         { []
         }
     {offset
       cahiX: // global
           _sahb1::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cahiZ_info;
           R2 = P64[Sp + 16];
           _sahbL::P64 = R1;
           R1 = _sahb1::P64;
           P64[Sp + 16] = _sahbL::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahiX_info" {
     block_cahiX_info:
         const _cahiX;
         const 2;
         const 30;
 },
 _cahiZ() //  []
         { []
         }
     {offset
       cahiZ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahiZ_info" {
     block_cahiZ_info:
         const _cahiZ;
         const 1;
         const 30;
 },
 _cahhh() //  [R1]
         { []
         }
     {offset
       cahhh: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cahiT; else goto cahiS;
       cahiT: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cahiS: // global
           I64[Hp - 64] = sat_sahbg_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sahbc_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cahiO_info;
           R2 = Hp - 62;
           _sahba::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _sahba::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahhh_info" {
     block_cahhh_info:
         const _cahhh;
         const 2;
         const 30;
 },
 _cahiO() //  [R1]
         { []
         }
     {offset
       cahiO: // global
           _sahb1::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cahiQ_info;
           R2 = P64[Sp + 16];
           _sahbj::P64 = R1;
           R1 = _sahb1::P64;
           P64[Sp + 16] = _sahbj::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahiO_info" {
     block_cahiO_info:
         const _cahiO;
         const 2;
         const 30;
 },
 _cahiQ() //  []
         { []
         }
     {offset
       cahiQ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahiQ_info" {
     block_cahiQ_info:
         const _cahiQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.325282969 UTC

[section ""data" . withMVar1_ragjU_closure" {
     withMVar1_ragjU_closure:
         const withMVar1_ragjU_info;
 },
 withMVar1_ragjU_entry() //  [R2, R3]
         { []
         }
     {offset
       cahkV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahkW; else goto cahkX;
       cahkW: // global
           R3 = R3;
           R2 = R2;
           R1 = withMVar1_ragjU_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cahkX: // global
           I64[Sp - 16] = block_cahkS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uahl1; else goto cahkT;
       uahl1: // global
           call _cahkS(R1) args: 0, res: 0, upd: 0;
       cahkT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . withMVar1_ragjU_info" {
     withMVar1_ragjU_info:
         const withMVar1_ragjU_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cahkS() //  [R1]
         { []
         }
     {offset
       cahkS: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call $wwithMVar_ragjT_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahkS_info" {
     block_cahkS_info:
         const _cahkS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.330745985 UTC

[section ""data" . Control.Concurrent.MVar.withMVar_closure" {
     Control.Concurrent.MVar.withMVar_closure:
         const Control.Concurrent.MVar.withMVar_info;
 },
 Control.Concurrent.MVar.withMVar_entry() //  [R2, R3]
         { []
         }
     {offset
       cahlg: // global
           R3 = R3;
           R2 = R2;
           call withMVar1_ragjU_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.withMVar_info" {
     Control.Concurrent.MVar.withMVar_info:
         const Control.Concurrent.MVar.withMVar_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.336486281 UTC

[section ""data" . $wwithMVarMasked_ragjV_closure" {
     $wwithMVarMasked_ragjV_closure:
         const $wwithMVarMasked_ragjV_info;
 },
 sat_sahc7_entry() //  [R1, R2]
         { []
         }
     {offset
       cahlH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahlI; else goto cahlJ;
       cahlI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cahlJ: // global
           I64[Sp - 16] = block_cahlF_info;
           _sahc4::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sahc4::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahc7_info" {
     sat_sahc7_info:
         const sat_sahc7_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cahlF() //  []
         { []
         }
     {offset
       cahlF: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahlF_info" {
     block_cahlF_info:
         const _cahlF;
         const 1;
         const 30;
 },
 sat_sahc3_entry() //  [R1]
         { []
         }
     {offset
       cahlP: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahc3_info" {
     sat_sahc3_info:
         const sat_sahc3_entry;
         const 2;
         const 18;
 },
 io_sahbY_entry() //  [R1]
         { []
         }
     {offset
       cahlW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cahlX; else goto cahlY;
       cahlX: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cahlY: // global
           I64[Sp - 24] = block_cahly_info;
           _sahbS::P64 = P64[R1 + 7];
           _sahbT::P64 = P64[R1 + 15];
           R1 = _sahbS::P64;
           P64[Sp - 16] = _sahbS::P64;
           P64[Sp - 8] = _sahbT::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sahbY_info" {
     io_sahbY_info:
         const io_sahbY_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cahly() //  [R1]
         { []
         }
     {offset
       cahly: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cahm1; else goto cahm0;
       cahm1: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cahm0: // global
           I64[Hp - 48] = sat_sahc7_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_sahc3_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp] = block_cahlS_info;
           R2 = Hp - 46;
           _sahc2::P64 = R1;
           R1 = Hp - 24;
           P64[Sp + 16] = _sahc2::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahly_info" {
     block_cahly_info:
         const _cahly;
         const 2;
         const 30;
 },
 _cahlS() //  [R1]
         { []
         }
     {offset
       cahlS: // global
           _sahbS::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cahlU_info;
           R2 = P64[Sp + 16];
           _sahca::P64 = R1;
           R1 = _sahbS::P64;
           P64[Sp + 16] = _sahca::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahlS_info" {
     block_cahlS_info:
         const _cahlS;
         const 2;
         const 30;
 },
 _cahlU() //  []
         { []
         }
     {offset
       cahlU: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahlU_info" {
     block_cahlU_info:
         const _cahlU;
         const 1;
         const 30;
 },
 $wwithMVarMasked_ragjV_entry() //  [R2, R3]
         { []
         }
     {offset
       cahm8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cahm9; else goto cahma;
       cahm9: // global
           R3 = R3;
           R2 = R2;
           R1 = $wwithMVarMasked_ragjV_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cahma: // global
           I64[Sp - 24] = block_cahlr_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wwithMVarMasked_ragjV_info" {
     $wwithMVarMasked_ragjV_info:
         const $wwithMVarMasked_ragjV_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cahlr() //  [R1]
         { []
         }
     {offset
       cahlr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cahmd; else goto cahmc;
       cahmd: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cahmc: // global
           I64[Hp - 16] = io_sahbY_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           _cahlt::P64 = Hp - 15;
           if (R1 == 0) goto cahm7; else goto cahm6;
       cahm7: // global
           R1 = _cahlt::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cahm6: // global
           R1 = _cahlt::P64;
           Sp = Sp + 24;
           call io_sahbY_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahlr_info" {
     block_cahlr_info:
         const _cahlr;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.353433292 UTC

[section ""data" . withMVarMasked1_ragjW_closure" {
     withMVarMasked1_ragjW_closure:
         const withMVarMasked1_ragjW_info;
 },
 withMVarMasked1_ragjW_entry() //  [R2, R3]
         { []
         }
     {offset
       cahn3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahn4; else goto cahn5;
       cahn4: // global
           R3 = R3;
           R2 = R2;
           R1 = withMVarMasked1_ragjW_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cahn5: // global
           I64[Sp - 16] = block_cahn0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uahn9; else goto cahn1;
       uahn9: // global
           call _cahn0(R1) args: 0, res: 0, upd: 0;
       cahn1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . withMVarMasked1_ragjW_info" {
     withMVarMasked1_ragjW_info:
         const withMVarMasked1_ragjW_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cahn0() //  [R1]
         { []
         }
     {offset
       cahn0: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call $wwithMVarMasked_ragjV_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahn0_info" {
     block_cahn0_info:
         const _cahn0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.358888284 UTC

[section ""data" . Control.Concurrent.MVar.withMVarMasked_closure" {
     Control.Concurrent.MVar.withMVarMasked_closure:
         const Control.Concurrent.MVar.withMVarMasked_info;
 },
 Control.Concurrent.MVar.withMVarMasked_entry() //  [R2, R3]
         { []
         }
     {offset
       cahno: // global
           R3 = R3;
           R2 = R2;
           call withMVarMasked1_ragjW_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.withMVarMasked_info" {
     Control.Concurrent.MVar.withMVarMasked_info:
         const Control.Concurrent.MVar.withMVarMasked_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.368114901 UTC

[section ""data" . $wmodifyMVar__ragjX_closure" {
     $wmodifyMVar__ragjX_closure:
         const $wmodifyMVar__ragjX_info;
 },
 sat_sahcx_entry() //  [R1, R2]
         { []
         }
     {offset
       cahnM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahnN; else goto cahnO;
       cahnN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cahnO: // global
           I64[Sp - 16] = block_cahnK_info;
           _sahcu::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sahcu::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahcx_info" {
     sat_sahcx_info:
         const sat_sahcx_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cahnK() //  []
         { []
         }
     {offset
       cahnK: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahnK_info" {
     block_cahnK_info:
         const _cahnK;
         const 1;
         const 30;
 },
 sat_sahct_entry() //  [R1]
         { []
         }
     {offset
       cahnW: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahct_info" {
     sat_sahct_info:
         const sat_sahct_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sahcL_entry() //  [R1, R2]
         { []
         }
     {offset
       cahoe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahof; else goto cahog;
       cahof: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cahog: // global
           I64[Sp - 16] = block_cahoc_info;
           _sahcI::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sahcI::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahcL_info" {
     sat_sahcL_info:
         const sat_sahcL_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cahoc() //  []
         { []
         }
     {offset
       cahoc: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahoc_info" {
     block_cahoc_info:
         const _cahoc;
         const 1;
         const 30;
 },
 sat_sahcH_entry() //  [R1]
         { []
         }
     {offset
       cahoo: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahcH_info" {
     sat_sahcH_info:
         const sat_sahcH_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sahcQ_entry() //  [R1]
         { []
         }
     {offset
       cahov: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cahow; else goto cahox;
       cahow: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cahox: // global
           I64[Sp - 24] = block_caho5_info;
           _sahci::P64 = P64[R1 + 7];
           _sahcj::P64 = P64[R1 + 15];
           R1 = _sahci::P64;
           P64[Sp - 16] = _sahci::P64;
           P64[Sp - 8] = _sahcj::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahcQ_info" {
     sat_sahcQ_info:
         const sat_sahcQ_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _caho5() //  [R1]
         { []
         }
     {offset
       caho5: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cahoA; else goto cahoz;
       cahoA: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cahoz: // global
           I64[Hp - 64] = sat_sahcL_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sahcH_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cahor_info;
           R2 = Hp - 62;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caho5_info" {
     block_caho5_info:
         const _caho5;
         const 2;
         const 30;
 },
 _cahor() //  [R1]
         { []
         }
     {offset
       cahor: // global
           I64[Sp + 16] = block_cahot_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahor_info" {
     block_cahor_info:
         const _cahor;
         const 130;
         const 30;
 },
 _cahot() //  []
         { []
         }
     {offset
       cahot: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahot_info" {
     block_cahot_info:
         const _cahot;
         const 0;
         const 30;
 },
 sat_sahcZ_entry() //  [R1, R2]
         { []
         }
     {offset
       cahoN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahoO; else goto cahoP;
       cahoO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cahoP: // global
           I64[Sp - 16] = block_cahoL_info;
           _sahcW::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sahcW::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahcZ_info" {
     sat_sahcZ_info:
         const sat_sahcZ_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cahoL() //  []
         { []
         }
     {offset
       cahoL: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahoL_info" {
     block_cahoL_info:
         const _cahoL;
         const 1;
         const 30;
 },
 sat_sahcV_entry() //  [R1]
         { []
         }
     {offset
       cahoX: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahcV_info" {
     sat_sahcV_info:
         const sat_sahcV_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 $wmodifyMVar__ragjX_entry() //  [R2, R3]
         { []
         }
     {offset
       cahp4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cahp5; else goto cahp6;
       cahp5: // global
           R3 = R3;
           R2 = R2;
           R1 = $wmodifyMVar__ragjX_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cahp6: // global
           I64[Sp - 24] = block_cahnz_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wmodifyMVar__ragjX_info" {
     $wmodifyMVar__ragjX_info:
         const $wmodifyMVar__ragjX_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cahnz() //  [R1]
         { []
         }
     {offset
       cahnz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cahp9; else goto cahp8;
       cahp9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cahp8: // global
           _sahci::P64 = P64[Sp + 8];
           if (R1 == 0) goto cahp2; else goto uahps;
       cahp2: // global
           I64[Hp - 16] = sat_sahcQ_info;
           P64[Hp - 8] = _sahci::P64;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       uahps: // global
           if (R1 == 1) goto cahp3; else goto cahp1;
       cahp3: // global
           Hp = Hp - 24;
           I64[Sp] = block_cahoE_info;
           R1 = _sahci::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       cahp1: // global
           Hp = Hp - 24;
           I64[Sp] = block_cahnD_info;
           R1 = _sahci::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahnz_info" {
     block_cahnz_info:
         const _cahnz;
         const 2;
         const 30;
 },
 _cahoE() //  [R1]
         { []
         }
     {offset
       cahoE: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cahpo; else goto cahpn;
       cahpo: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cahpn: // global
           I64[Hp - 64] = sat_sahcZ_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sahcV_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cahpj_info;
           R2 = Hp - 62;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahoE_info" {
     block_cahoE_info:
         const _cahoE;
         const 2;
         const 30;
 },
 _cahpj() //  [R1]
         { []
         }
     {offset
       cahpj: // global
           I64[Sp + 16] = block_cahpl_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahpj_info" {
     block_cahpj_info:
         const _cahpj;
         const 130;
         const 30;
 },
 _cahnD() //  [R1]
         { []
         }
     {offset
       cahnD: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cahpf; else goto cahpe;
       cahpf: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cahpe: // global
           I64[Hp - 64] = sat_sahcx_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sahct_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_cahpa_info;
           R2 = Hp - 62;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahnD_info" {
     block_cahnD_info:
         const _cahnD;
         const 2;
         const 30;
 },
 _cahpa() //  [R1]
         { []
         }
     {offset
       cahpa: // global
           I64[Sp + 16] = block_cahpl_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahpa_info" {
     block_cahpa_info:
         const _cahpa;
         const 130;
         const 30;
 },
 _cahpl() //  []
         { []
         }
     {offset
       cahpl: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahpl_info" {
     block_cahpl_info:
         const _cahpl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.401729818 UTC

[section ""data" . modifyMVar_1_ragjY_closure" {
     modifyMVar_1_ragjY_closure:
         const modifyMVar_1_ragjY_info;
 },
 modifyMVar_1_ragjY_entry() //  [R2, R3]
         { []
         }
     {offset
       cahrf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahrg; else goto cahrh;
       cahrg: // global
           R3 = R3;
           R2 = R2;
           R1 = modifyMVar_1_ragjY_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cahrh: // global
           I64[Sp - 16] = block_cahrc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uahrl; else goto cahrd;
       uahrl: // global
           call _cahrc(R1) args: 0, res: 0, upd: 0;
       cahrd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . modifyMVar_1_ragjY_info" {
     modifyMVar_1_ragjY_info:
         const modifyMVar_1_ragjY_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cahrc() //  [R1]
         { []
         }
     {offset
       cahrc: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call $wmodifyMVar__ragjX_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahrc_info" {
     block_cahrc_info:
         const _cahrc;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.407706217 UTC

[section ""data" . Control.Concurrent.MVar.modifyMVar__closure" {
     Control.Concurrent.MVar.modifyMVar__closure:
         const Control.Concurrent.MVar.modifyMVar__info;
 },
 Control.Concurrent.MVar.modifyMVar__entry() //  [R2, R3]
         { []
         }
     {offset
       cahrA: // global
           R3 = R3;
           R2 = R2;
           call modifyMVar_1_ragjY_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.modifyMVar__info" {
     Control.Concurrent.MVar.modifyMVar__info:
         const Control.Concurrent.MVar.modifyMVar__entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.419084929 UTC

[section ""data" . $wmodifyMVar_ragjZ_closure" {
     $wmodifyMVar_ragjZ_closure:
         const $wmodifyMVar_ragjZ_info;
 },
 sat_sahds_entry() //  [R1, R2]
         { []
         }
     {offset
       cahrY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahrZ; else goto cahs0;
       cahrZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cahs0: // global
           I64[Sp - 16] = block_cahrW_info;
           _sahdp::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sahdp::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahds_info" {
     sat_sahds_info:
         const sat_sahds_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cahrW() //  []
         { []
         }
     {offset
       cahrW: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahrW_info" {
     block_cahrW_info:
         const _cahrW;
         const 1;
         const 30;
 },
 sat_sahdn_entry() //  [R1]
         { []
         }
     {offset
       cahs9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cahsa; else goto cahsb;
       cahsa: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cahsb: // global
           I64[Sp - 8] = block_cahs7_info;
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahdn_info" {
     sat_sahdn_info:
         const sat_sahdn_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cahs7() //  [R1]
         { []
         }
     {offset
       cahs7: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahs7_info" {
     block_cahs7_info:
         const _cahs7;
         const 0;
         const 30;
 },
 sat_sahdo_entry() //  [R1]
         { []
         }
     {offset
       cahsi: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahdo_info" {
     sat_sahdo_info:
         const sat_sahdo_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sahdN_entry() //  [R1, R2]
         { []
         }
     {offset
       cahsA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahsB; else goto cahsC;
       cahsB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cahsC: // global
           I64[Sp - 16] = block_cahsy_info;
           _sahdK::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sahdK::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahdN_info" {
     sat_sahdN_info:
         const sat_sahdN_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cahsy() //  []
         { []
         }
     {offset
       cahsy: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahsy_info" {
     block_cahsy_info:
         const _cahsy;
         const 1;
         const 30;
 },
 sat_sahdI_entry() //  [R1]
         { []
         }
     {offset
       cahsL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cahsM; else goto cahsN;
       cahsM: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cahsN: // global
           I64[Sp - 8] = block_cahsJ_info;
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahdI_info" {
     sat_sahdI_info:
         const sat_sahdI_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cahsJ() //  [R1]
         { []
         }
     {offset
       cahsJ: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahsJ_info" {
     block_cahsJ_info:
         const _cahsJ;
         const 0;
         const 30;
 },
 sat_sahdJ_entry() //  [R1]
         { []
         }
     {offset
       cahsU: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahdJ_info" {
     sat_sahdJ_info:
         const sat_sahdJ_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sahdV_entry() //  [R1]
         { []
         }
     {offset
       caht2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caht6; else goto caht7;
       caht6: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caht7: // global
           I64[Sp - 24] = block_cahsr_info;
           _sahd9::P64 = P64[R1 + 7];
           _sahda::P64 = P64[R1 + 15];
           R1 = _sahd9::P64;
           P64[Sp - 16] = _sahd9::P64;
           P64[Sp - 8] = _sahda::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahdV_info" {
     sat_sahdV_info:
         const sat_sahdV_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cahsr() //  [R1]
         { []
         }
     {offset
       cahsr: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cahta; else goto caht9;
       cahta: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caht9: // global
           I64[Hp - 56] = sat_sahdN_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_sahdI_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sahdJ_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_cahsX_info;
           R2 = Hp - 54;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahsr_info" {
     block_cahsr_info:
         const _cahsr;
         const 2;
         const 30;
 },
 _cahsX() //  [R1]
         { []
         }
     {offset
       cahsX: // global
           I64[Sp] = block_cahsZ_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uahtf; else goto caht0;
       uahtf: // global
           call _cahsZ(R1) args: 0, res: 0, upd: 0;
       caht0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahsX_info" {
     block_cahsX_info:
         const _cahsX;
         const 130;
         const 30;
 },
 _cahsZ() //  [R1]
         { []
         }
     {offset
       cahsZ: // global
           _sahd9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caht5_info;
           R2 = P64[R1 + 7];
           _sahdT::P64 = P64[R1 + 15];
           R1 = _sahd9::P64;
           P64[Sp + 16] = _sahdT::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahsZ_info" {
     block_cahsZ_info:
         const _cahsZ;
         const 130;
         const 30;
 },
 _caht5() //  []
         { []
         }
     {offset
       caht5: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caht5_info" {
     block_caht5_info:
         const _caht5;
         const 1;
         const 30;
 },
 sat_sahe8_entry() //  [R1, R2]
         { []
         }
     {offset
       cahtq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahtr; else goto cahts;
       cahtr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cahts: // global
           I64[Sp - 16] = block_cahto_info;
           _sahe5::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sahe5::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahe8_info" {
     sat_sahe8_info:
         const sat_sahe8_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cahto() //  []
         { []
         }
     {offset
       cahto: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahto_info" {
     block_cahto_info:
         const _cahto;
         const 1;
         const 30;
 },
 sat_sahe3_entry() //  [R1]
         { []
         }
     {offset
       cahtB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cahtC; else goto cahtD;
       cahtC: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cahtD: // global
           I64[Sp - 8] = block_cahtz_info;
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahe3_info" {
     sat_sahe3_info:
         const sat_sahe3_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cahtz() //  [R1]
         { []
         }
     {offset
       cahtz: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahtz_info" {
     block_cahtz_info:
         const _cahtz;
         const 0;
         const 30;
 },
 sat_sahe4_entry() //  [R1]
         { []
         }
     {offset
       cahtK: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahe4_info" {
     sat_sahe4_info:
         const sat_sahe4_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 $wmodifyMVar_ragjZ_entry() //  [R2, R3]
         { []
         }
     {offset
       cahtR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cahtS; else goto cahtT;
       cahtS: // global
           R3 = R3;
           R2 = R2;
           R1 = $wmodifyMVar_ragjZ_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cahtT: // global
           I64[Sp - 24] = block_cahrL_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wmodifyMVar_ragjZ_info" {
     $wmodifyMVar_ragjZ_info:
         const $wmodifyMVar_ragjZ_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cahrL() //  [R1]
         { []
         }
     {offset
       cahrL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cahtW; else goto cahtV;
       cahtW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cahtV: // global
           _sahd9::P64 = P64[Sp + 8];
           if (R1 == 0) goto cahtP; else goto uahur;
       cahtP: // global
           I64[Hp - 16] = sat_sahdV_info;
           P64[Hp - 8] = _sahd9::P64;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       uahur: // global
           if (R1 == 1) goto cahtQ; else goto cahtO;
       cahtQ: // global
           Hp = Hp - 24;
           I64[Sp] = block_cahth_info;
           R1 = _sahd9::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       cahtO: // global
           Hp = Hp - 24;
           I64[Sp] = block_cahrP_info;
           R1 = _sahd9::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahrL_info" {
     block_cahrL_info:
         const _cahrL;
         const 2;
         const 30;
 },
 _cahth() //  [R1]
         { []
         }
     {offset
       cahth: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cahum; else goto cahul;
       cahum: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cahul: // global
           I64[Hp - 56] = sat_sahe8_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_sahe3_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sahe4_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_cahuc_info;
           R2 = Hp - 54;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahth_info" {
     block_cahth_info:
         const _cahth;
         const 2;
         const 30;
 },
 _cahuc() //  [R1]
         { []
         }
     {offset
       cahuc: // global
           I64[Sp] = block_cahue_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uahut; else goto cahuf;
       uahut: // global
           call _cahue(R1) args: 0, res: 0, upd: 0;
       cahuf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahuc_info" {
     block_cahuc_info:
         const _cahuc;
         const 130;
         const 30;
 },
 _cahue() //  [R1]
         { []
         }
     {offset
       cahue: // global
           _sahd9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cahuj_info;
           R2 = P64[R1 + 7];
           _sahee::P64 = P64[R1 + 15];
           R1 = _sahd9::P64;
           P64[Sp + 16] = _sahee::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahue_info" {
     block_cahue_info:
         const _cahue;
         const 130;
         const 30;
 },
 _cahuj() //  []
         { []
         }
     {offset
       cahuj: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahuj_info" {
     block_cahuj_info:
         const _cahuj;
         const 1;
         const 30;
 },
 _cahrP() //  [R1]
         { []
         }
     {offset
       cahrP: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cahu7; else goto cahu6;
       cahu7: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cahu6: // global
           I64[Hp - 56] = sat_sahds_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_sahdn_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_sahdo_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_cahtX_info;
           R2 = Hp - 54;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahrP_info" {
     block_cahrP_info:
         const _cahrP;
         const 2;
         const 30;
 },
 _cahtX() //  [R1]
         { []
         }
     {offset
       cahtX: // global
           I64[Sp] = block_cahtZ_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uahus; else goto cahu0;
       uahus: // global
           call _cahtZ(R1) args: 0, res: 0, upd: 0;
       cahu0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahtX_info" {
     block_cahtX_info:
         const _cahtX;
         const 130;
         const 30;
 },
 _cahtZ() //  [R1]
         { []
         }
     {offset
       cahtZ: // global
           _sahd9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cahu4_info;
           R2 = P64[R1 + 7];
           _sahdy::P64 = P64[R1 + 15];
           R1 = _sahd9::P64;
           P64[Sp + 16] = _sahdy::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahtZ_info" {
     block_cahtZ_info:
         const _cahtZ;
         const 130;
         const 30;
 },
 _cahu4() //  []
         { []
         }
     {offset
       cahu4: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahu4_info" {
     block_cahu4_info:
         const _cahu4;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.467471986 UTC

[section ""data" . modifyMVar1_ragk0_closure" {
     modifyMVar1_ragk0_closure:
         const modifyMVar1_ragk0_info;
 },
 modifyMVar1_ragk0_entry() //  [R2, R3]
         { []
         }
     {offset
       cahx1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahx2; else goto cahx3;
       cahx2: // global
           R3 = R3;
           R2 = R2;
           R1 = modifyMVar1_ragk0_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cahx3: // global
           I64[Sp - 16] = block_cahwY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uahx7; else goto cahwZ;
       uahx7: // global
           call _cahwY(R1) args: 0, res: 0, upd: 0;
       cahwZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . modifyMVar1_ragk0_info" {
     modifyMVar1_ragk0_info:
         const modifyMVar1_ragk0_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cahwY() //  [R1]
         { []
         }
     {offset
       cahwY: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call $wmodifyMVar_ragjZ_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahwY_info" {
     block_cahwY_info:
         const _cahwY;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.47237344 UTC

[section ""data" . Control.Concurrent.MVar.modifyMVar_closure" {
     Control.Concurrent.MVar.modifyMVar_closure:
         const Control.Concurrent.MVar.modifyMVar_info;
 },
 Control.Concurrent.MVar.modifyMVar_entry() //  [R2, R3]
         { []
         }
     {offset
       cahxm: // global
           R3 = R3;
           R2 = R2;
           call modifyMVar1_ragk0_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.modifyMVar_info" {
     Control.Concurrent.MVar.modifyMVar_info:
         const Control.Concurrent.MVar.modifyMVar_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.478478646 UTC

[section ""data" . $wmodifyMVarMasked__ragk1_closure" {
     $wmodifyMVarMasked__ragk1_closure:
         const $wmodifyMVarMasked__ragk1_info;
 },
 sat_saheA_entry() //  [R1, R2]
         { []
         }
     {offset
       cahxN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahxO; else goto cahxP;
       cahxO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cahxP: // global
           I64[Sp - 16] = block_cahxL_info;
           _sahex::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sahex::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saheA_info" {
     sat_saheA_info:
         const sat_saheA_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cahxL() //  []
         { []
         }
     {offset
       cahxL: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahxL_info" {
     block_cahxL_info:
         const _cahxL;
         const 1;
         const 30;
 },
 sat_sahew_entry() //  [R1]
         { []
         }
     {offset
       cahxV: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahew_info" {
     sat_sahew_info:
         const sat_sahew_entry;
         const 2;
         const 18;
 },
 io_saher_entry() //  [R1]
         { []
         }
     {offset
       cahy2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cahy3; else goto cahy4;
       cahy3: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cahy4: // global
           I64[Sp - 24] = block_cahxE_info;
           _sahel::P64 = P64[R1 + 7];
           _sahem::P64 = P64[R1 + 15];
           R1 = _sahel::P64;
           P64[Sp - 16] = _sahel::P64;
           P64[Sp - 8] = _sahem::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saher_info" {
     io_saher_info:
         const io_saher_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cahxE() //  [R1]
         { []
         }
     {offset
       cahxE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cahy7; else goto cahy6;
       cahy7: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cahy6: // global
           I64[Hp - 48] = sat_saheA_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = R1;
           I64[Hp - 24] = sat_sahew_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp] = block_cahxY_info;
           R2 = Hp - 46;
           R1 = Hp - 24;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahxE_info" {
     block_cahxE_info:
         const _cahxE;
         const 2;
         const 30;
 },
 _cahxY() //  [R1]
         { []
         }
     {offset
       cahxY: // global
           I64[Sp + 16] = block_cahy0_info;
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahxY_info" {
     block_cahxY_info:
         const _cahxY;
         const 130;
         const 30;
 },
 _cahy0() //  []
         { []
         }
     {offset
       cahy0: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahy0_info" {
     block_cahy0_info:
         const _cahy0;
         const 0;
         const 30;
 },
 $wmodifyMVarMasked__ragk1_entry() //  [R2, R3]
         { []
         }
     {offset
       cahye: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cahyf; else goto cahyg;
       cahyf: // global
           R3 = R3;
           R2 = R2;
           R1 = $wmodifyMVarMasked__ragk1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cahyg: // global
           I64[Sp - 24] = block_cahxx_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wmodifyMVarMasked__ragk1_info" {
     $wmodifyMVarMasked__ragk1_info:
         const $wmodifyMVarMasked__ragk1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cahxx() //  [R1]
         { []
         }
     {offset
       cahxx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cahyj; else goto cahyi;
       cahyj: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cahyi: // global
           I64[Hp - 16] = io_saher_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           _cahxz::P64 = Hp - 15;
           if (R1 == 0) goto cahyd; else goto cahyc;
       cahyd: // global
           R1 = _cahxz::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cahyc: // global
           R1 = _cahxz::P64;
           Sp = Sp + 24;
           call io_saher_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahxx_info" {
     block_cahxx_info:
         const _cahxx;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.49555683 UTC

[section ""data" . modifyMVarMasked_1_ragk2_closure" {
     modifyMVarMasked_1_ragk2_closure:
         const modifyMVarMasked_1_ragk2_info;
 },
 modifyMVarMasked_1_ragk2_entry() //  [R2, R3]
         { []
         }
     {offset
       cahza: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahzb; else goto cahzc;
       cahzb: // global
           R3 = R3;
           R2 = R2;
           R1 = modifyMVarMasked_1_ragk2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cahzc: // global
           I64[Sp - 16] = block_cahz7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uahzg; else goto cahz8;
       uahzg: // global
           call _cahz7(R1) args: 0, res: 0, upd: 0;
       cahz8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . modifyMVarMasked_1_ragk2_info" {
     modifyMVarMasked_1_ragk2_info:
         const modifyMVarMasked_1_ragk2_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cahz7() //  [R1]
         { []
         }
     {offset
       cahz7: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call $wmodifyMVarMasked__ragk1_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahz7_info" {
     block_cahz7_info:
         const _cahz7;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.500288327 UTC

[section ""data" . Control.Concurrent.MVar.modifyMVarMasked__closure" {
     Control.Concurrent.MVar.modifyMVarMasked__closure:
         const Control.Concurrent.MVar.modifyMVarMasked__info;
 },
 Control.Concurrent.MVar.modifyMVarMasked__entry() //  [R2, R3]
         { []
         }
     {offset
       cahzv: // global
           R3 = R3;
           R2 = R2;
           call modifyMVarMasked_1_ragk2_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.modifyMVarMasked__info" {
     Control.Concurrent.MVar.modifyMVarMasked__info:
         const Control.Concurrent.MVar.modifyMVarMasked__entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.506891015 UTC

[section ""data" . $wmodifyMVarMasked_ragk3_closure" {
     $wmodifyMVarMasked_ragk3_closure:
         const $wmodifyMVarMasked_ragk3_info;
 },
 sat_sahf4_entry() //  [R1, R2]
         { []
         }
     {offset
       cahzW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahzX; else goto cahzY;
       cahzX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cahzY: // global
           I64[Sp - 16] = block_cahzU_info;
           _sahf1::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sahf1::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahf4_info" {
     sat_sahf4_info:
         const sat_sahf4_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _cahzU() //  []
         { []
         }
     {offset
       cahzU: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahzU_info" {
     block_cahzU_info:
         const _cahzU;
         const 1;
         const 30;
 },
 sat_sahf0_entry() //  [R1]
         { []
         }
     {offset
       cahA7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cahA8; else goto cahA9;
       cahA8: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cahA9: // global
           I64[Sp - 8] = block_cahA5_info;
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sahf0_info" {
     sat_sahf0_info:
         const sat_sahf0_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cahA5() //  [R1]
         { []
         }
     {offset
       cahA5: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahA5_info" {
     block_cahA5_info:
         const _cahA5;
         const 0;
         const 30;
 },
 io_saheR_entry() //  [R1]
         { []
         }
     {offset
       cahAg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cahAk; else goto cahAl;
       cahAk: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cahAl: // global
           I64[Sp - 24] = block_cahzN_info;
           _saheL::P64 = P64[R1 + 7];
           _saheM::P64 = P64[R1 + 15];
           R1 = _saheL::P64;
           P64[Sp - 16] = _saheL::P64;
           P64[Sp - 8] = _saheM::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saheR_info" {
     io_saheR_info:
         const io_saheR_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cahzN() //  [R1]
         { []
         }
     {offset
       cahzN: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cahAo; else goto cahAn;
       cahAo: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cahAn: // global
           I64[Hp - 40] = sat_sahf4_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_sahf0_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           I64[Sp] = block_cahAb_info;
           R2 = Hp - 38;
           R1 = Hp - 15;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahzN_info" {
     block_cahzN_info:
         const _cahzN;
         const 2;
         const 30;
 },
 _cahAb() //  [R1]
         { []
         }
     {offset
       cahAb: // global
           I64[Sp] = block_cahAd_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uahAt; else goto cahAe;
       uahAt: // global
           call _cahAd(R1) args: 0, res: 0, upd: 0;
       cahAe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahAb_info" {
     block_cahAb_info:
         const _cahAb;
         const 130;
         const 30;
 },
 _cahAd() //  [R1]
         { []
         }
     {offset
       cahAd: // global
           _saheL::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cahAj_info;
           R2 = P64[R1 + 7];
           _sahfa::P64 = P64[R1 + 15];
           R1 = _saheL::P64;
           P64[Sp + 16] = _sahfa::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahAd_info" {
     block_cahAd_info:
         const _cahAd;
         const 130;
         const 30;
 },
 _cahAj() //  []
         { []
         }
     {offset
       cahAj: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahAj_info" {
     block_cahAj_info:
         const _cahAj;
         const 1;
         const 30;
 },
 $wmodifyMVarMasked_ragk3_entry() //  [R2, R3]
         { []
         }
     {offset
       cahAy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cahAz; else goto cahAA;
       cahAz: // global
           R3 = R3;
           R2 = R2;
           R1 = $wmodifyMVarMasked_ragk3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cahAA: // global
           I64[Sp - 24] = block_cahzG_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wmodifyMVarMasked_ragk3_info" {
     $wmodifyMVarMasked_ragk3_info:
         const $wmodifyMVarMasked_ragk3_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cahzG() //  [R1]
         { []
         }
     {offset
       cahzG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cahAD; else goto cahAC;
       cahAD: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cahAC: // global
           I64[Hp - 16] = io_saheR_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           _cahzI::P64 = Hp - 15;
           if (R1 == 0) goto cahAx; else goto cahAw;
       cahAx: // global
           R1 = _cahzI::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cahAw: // global
           R1 = _cahzI::P64;
           Sp = Sp + 24;
           call io_saheR_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahzG_info" {
     block_cahzG_info:
         const _cahzG;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.526956592 UTC

[section ""data" . modifyMVarMasked1_ragk4_closure" {
     modifyMVarMasked1_ragk4_closure:
         const modifyMVarMasked1_ragk4_info;
 },
 modifyMVarMasked1_ragk4_entry() //  [R2, R3]
         { []
         }
     {offset
       cahBF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahBG; else goto cahBH;
       cahBG: // global
           R3 = R3;
           R2 = R2;
           R1 = modifyMVarMasked1_ragk4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cahBH: // global
           I64[Sp - 16] = block_cahBC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uahBL; else goto cahBD;
       uahBL: // global
           call _cahBC(R1) args: 0, res: 0, upd: 0;
       cahBD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . modifyMVarMasked1_ragk4_info" {
     modifyMVarMasked1_ragk4_info:
         const modifyMVarMasked1_ragk4_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cahBC() //  [R1]
         { []
         }
     {offset
       cahBC: // global
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call $wmodifyMVarMasked_ragk3_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahBC_info" {
     block_cahBC_info:
         const _cahBC;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.532113299 UTC

[section ""data" . Control.Concurrent.MVar.modifyMVarMasked_closure" {
     Control.Concurrent.MVar.modifyMVarMasked_closure:
         const Control.Concurrent.MVar.modifyMVarMasked_info;
 },
 Control.Concurrent.MVar.modifyMVarMasked_entry() //  [R2, R3]
         { []
         }
     {offset
       cahC0: // global
           R3 = R3;
           R2 = R2;
           call modifyMVarMasked1_ragk4_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.modifyMVarMasked_info" {
     Control.Concurrent.MVar.modifyMVarMasked_info:
         const Control.Concurrent.MVar.modifyMVarMasked_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.535423187 UTC

[section ""data" . Control.Concurrent.MVar.addMVarFinalizer_closure" {
     Control.Concurrent.MVar.addMVarFinalizer_closure:
         const Control.Concurrent.MVar.addMVarFinalizer_info;
 },
 Control.Concurrent.MVar.addMVarFinalizer_entry() //  [R2, R3]
         { []
         }
     {offset
       cahCb: // global
           R3 = R3;
           R2 = R2;
           call GHC.MVar.addMVarFinalizer1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.addMVarFinalizer_info" {
     Control.Concurrent.MVar.addMVarFinalizer_info:
         const Control.Concurrent.MVar.addMVarFinalizer_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.539603554 UTC

[section ""data" . Control.Concurrent.MVar.mkWeakMVar1_closure" {
     Control.Concurrent.MVar.mkWeakMVar1_closure:
         const Control.Concurrent.MVar.mkWeakMVar1_info;
 },
 Control.Concurrent.MVar.mkWeakMVar1_entry() //  [R2, R3]
         { []
         }
     {offset
       cahCp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cahCv; else goto cahCw;
       cahCv: // global
           R3 = R3;
           R2 = R2;
           R1 = Control.Concurrent.MVar.mkWeakMVar1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cahCw: // global
           I64[Sp - 16] = block_cahCm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uahCB; else goto cahCn;
       uahCB: // global
           call _cahCm(R1) args: 0, res: 0, upd: 0;
       cahCn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.mkWeakMVar1_info" {
     Control.Concurrent.MVar.mkWeakMVar1_info:
         const Control.Concurrent.MVar.mkWeakMVar1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cahCm() //  [R1]
         { []
         }
     {offset
       cahCm: // global
           _sahfj::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cahCs_info;
           R3 = _sahfj::P64;
           R2 = R1;
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cahCm_info" {
     block_cahCm_info:
         const _cahCm;
         const 1;
         const 30;
 },
 _cahCs() //  [R1]
         { []
         }
     {offset
       cahCs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cahCA; else goto cahCz;
       cahCA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cahCz: // global
           I64[Hp - 8] = GHC.Weak.Weak_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cahCs_info" {
     block_cahCs_info:
         const _cahCs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.546675665 UTC

[section ""data" . Control.Concurrent.MVar.mkWeakMVar_closure" {
     Control.Concurrent.MVar.mkWeakMVar_closure:
         const Control.Concurrent.MVar.mkWeakMVar_info;
 },
 Control.Concurrent.MVar.mkWeakMVar_entry() //  [R2, R3]
         { []
         }
     {offset
       cahCW: // global
           R3 = R3;
           R2 = R2;
           call Control.Concurrent.MVar.mkWeakMVar1_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Control.Concurrent.MVar.mkWeakMVar_info" {
     Control.Concurrent.MVar.mkWeakMVar_info:
         const Control.Concurrent.MVar.mkWeakMVar_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.550197791 UTC

[section ""cstring" . Control.Concurrent.MVar.$trModule4_bytes" {
     Control.Concurrent.MVar.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.551937539 UTC

[section ""data" . Control.Concurrent.MVar.$trModule3_closure" {
     Control.Concurrent.MVar.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.MVar.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.553731142 UTC

[section ""cstring" . Control.Concurrent.MVar.$trModule2_bytes" {
     Control.Concurrent.MVar.$trModule2_bytes:
         I8[] [67,111,110,116,114,111,108,46,67,111,110,99,117,114,114,101,110,116,46,77,86,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.5554029 UTC

[section ""data" . Control.Concurrent.MVar.$trModule1_closure" {
     Control.Concurrent.MVar.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Control.Concurrent.MVar.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.557061313 UTC

[section ""data" . Control.Concurrent.MVar.$trModule_closure" {
     Control.Concurrent.MVar.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Control.Concurrent.MVar.$trModule3_closure+1;
         const Control.Concurrent.MVar.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:18.558780331 UTC

[section ""relreadonly" . SahD8_srt" { SahD8_srt:
 }]

