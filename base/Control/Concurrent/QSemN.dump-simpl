
==================== Tidy Core ====================
2018-03-16 16:09:07.599640044 UTC

Result size of Tidy Core
  = {terms: 598, types: 1,540, coercions: 19, joins: 0/3}

-- RHS size: {terms: 6, types: 40, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.$WQSemN [InlPrag=INLINE[2]]
  :: MVar (Int, [(Int, MVar ())], [(Int, MVar ())]) -> QSemN
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (dt_adS3N [Occ=Once!]
                    :: MVar (Int, [(Int, MVar ())], [(Int, MVar ())])) ->
                 case dt_adS3N of { GHC.MVar.MVar dt_adS3O [Occ=Once] ->
                 Control.Concurrent.QSemN.QSemN dt_adS3O
                 }}]
Control.Concurrent.QSemN.$WQSemN
  = \ (dt_adS3N [Occ=Once!]
         :: MVar (Int, [(Int, MVar ())], [(Int, MVar ())])) ->
      case dt_adS3N of { GHC.MVar.MVar dt_adS3O [Occ=Once] ->
      Control.Concurrent.QSemN.QSemN dt_adS3O
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Control.Concurrent.QSemN.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Control.Concurrent.QSemN.$trModule3
  = GHC.Types.TrNameS Control.Concurrent.QSemN.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
Control.Concurrent.QSemN.$trModule2 = "Control.Concurrent.QSemN"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Control.Concurrent.QSemN.$trModule1
  = GHC.Types.TrNameS Control.Concurrent.QSemN.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Control.Concurrent.QSemN.$trModule
  = GHC.Types.Module
      Control.Concurrent.QSemN.$trModule3
      Control.Concurrent.QSemN.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_rdSvw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_rdSvw
  = GHC.Types.KindRepTyConApp
      GHC.Tuple.$tc() (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_rdSvx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_rdSvx
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcInt (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep2_rdSvy :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep2_rdSvy
  = GHC.Types.:
      @ GHC.Types.KindRep $krep_rdSvw (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3_rdSvz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep3_rdSvz
  = GHC.Types.KindRepTyConApp GHC.MVar.$tcMVar $krep2_rdSvy

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep4_rdSvA :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep4_rdSvA
  = GHC.Types.:
      @ GHC.Types.KindRep $krep3_rdSvz (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep5_rdSvB :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep5_rdSvB
  = GHC.Types.: @ GHC.Types.KindRep $krep1_rdSvx $krep4_rdSvA

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6_rdSvC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep6_rdSvC
  = GHC.Types.KindRepTyConApp GHC.Tuple.$tc(,) $krep5_rdSvB

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep7_rdSvD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep7_rdSvD
  = GHC.Types.:
      @ GHC.Types.KindRep $krep6_rdSvC (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_rdSvE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep8_rdSvE
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep7_rdSvD

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep9_rdSvF :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep9_rdSvF
  = GHC.Types.:
      @ GHC.Types.KindRep $krep8_rdSvE (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep10_rdSvG :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep10_rdSvG
  = GHC.Types.: @ GHC.Types.KindRep $krep8_rdSvE $krep9_rdSvF

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep11_rdSvH :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep11_rdSvH
  = GHC.Types.: @ GHC.Types.KindRep $krep1_rdSvx $krep10_rdSvG

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_rdSvI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep12_rdSvI
  = GHC.Types.KindRepTyConApp GHC.Tuple.$tc(,,) $krep11_rdSvH

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep13_rdSvJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep13_rdSvJ
  = GHC.Types.:
      @ GHC.Types.KindRep
      $krep12_rdSvI
      (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_rdSvK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep14_rdSvK
  = GHC.Types.KindRepTyConApp GHC.MVar.$tcMVar $krep13_rdSvJ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.$tcQSemN2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Control.Concurrent.QSemN.$tcQSemN2 = "QSemN"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.$tcQSemN1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Control.Concurrent.QSemN.$tcQSemN1
  = GHC.Types.TrNameS Control.Concurrent.QSemN.$tcQSemN2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.$tcQSemN :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Control.Concurrent.QSemN.$tcQSemN
  = GHC.Types.TyCon
      8650881979471817661##
      11033619023634057930##
      Control.Concurrent.QSemN.$trModule
      Control.Concurrent.QSemN.$tcQSemN1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep15_rdSvL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep15_rdSvL
  = GHC.Types.KindRepTyConApp
      Control.Concurrent.QSemN.$tcQSemN
      (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.$tc'QSemN1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
Control.Concurrent.QSemN.$tc'QSemN1
  = GHC.Types.KindRepFun $krep14_rdSvK $krep15_rdSvL

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.$tc'QSemN3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Control.Concurrent.QSemN.$tc'QSemN3 = "'QSemN"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.$tc'QSemN2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Control.Concurrent.QSemN.$tc'QSemN2
  = GHC.Types.TrNameS Control.Concurrent.QSemN.$tc'QSemN3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.$tc'QSemN :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Control.Concurrent.QSemN.$tc'QSemN
  = GHC.Types.TyCon
      15878277071781304355##
      273080421945023395##
      Control.Concurrent.QSemN.$trModule
      Control.Concurrent.QSemN.$tc'QSemN2
      0#
      Control.Concurrent.QSemN.$tc'QSemN1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_rdSvM :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_rdSvM = "newQSemN: Initial quantity must be non-negative"#

-- RHS size: {terms: 5, types: 3, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.newQSemN2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, QSemN #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
Control.Concurrent.QSemN.newQSemN2
  = \ (eta_B1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      GHC.IO.failIO1
        @ QSemN (GHC.CString.unpackCString# lvl_rdSvM) eta_B1

-- RHS size: {terms: 30, types: 97, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.newQSemN1
  :: Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, QSemN #)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (initial_adS2U [Occ=Once!] :: Int)
                 (eta_B1 [Occ=Once*] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case initial_adS2U of wild_alN7 { GHC.Types.I# x_alN9 [Occ=Once] ->
                 case GHC.Prim.<# x_alN9 0# of {
                   __DEFAULT ->
                     case GHC.Prim.newMVar#
                            @ GHC.Prim.RealWorld
                            @ (Int, [(Int, MVar ())], [(Int, MVar ())])
                            eta_B1
                     of
                     { (# ipv_ia50l [Occ=Once], ipv1_ia50m #) ->
                     case GHC.Prim.putMVar#
                            @ GHC.Prim.RealWorld
                            @ (Int, [(Int, MVar ())], [(Int, MVar ())])
                            ipv1_ia50m
                            (wild_alN7, GHC.Types.[] @ (Int, MVar ()),
                             GHC.Types.[] @ (Int, MVar ()))
                            ipv_ia50l
                     of s2#_ia50o
                     { __DEFAULT ->
                     (# s2#_ia50o, Control.Concurrent.QSemN.QSemN ipv1_ia50m #)
                     }
                     };
                   1# -> Control.Concurrent.QSemN.newQSemN2 eta_B1
                 }
                 }}]
Control.Concurrent.QSemN.newQSemN1
  = \ (initial_adS2U :: Int)
      (eta_B1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case initial_adS2U of wild_alN7 { GHC.Types.I# x_alN9 ->
      case GHC.Prim.<# x_alN9 0# of {
        __DEFAULT ->
          case GHC.Prim.newMVar#
                 @ GHC.Prim.RealWorld
                 @ (Int, [(Int, MVar ())], [(Int, MVar ())])
                 eta_B1
          of
          { (# ipv_ia50l, ipv1_ia50m #) ->
          case GHC.Prim.putMVar#
                 @ GHC.Prim.RealWorld
                 @ (Int, [(Int, MVar ())], [(Int, MVar ())])
                 ipv1_ia50m
                 (wild_alN7, GHC.Types.[] @ (Int, MVar ()),
                  GHC.Types.[] @ (Int, MVar ()))
                 ipv_ia50l
          of s2#_ia50o
          { __DEFAULT ->
          (# s2#_ia50o, Control.Concurrent.QSemN.QSemN ipv1_ia50m #)
          }
          };
        1# -> Control.Concurrent.QSemN.newQSemN2 eta_B1
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
newQSemN :: Int -> IO QSemN
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Control.Concurrent.QSemN.newQSemN1
               `cast` (<Int>_R ->_R Sym (GHC.Types.N:IO[0] <QSemN>_R)
                       :: (Int
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, QSemN #) :: *)
                          ~R# (Int -> IO QSemN :: *))}]
newQSemN
  = Control.Concurrent.QSemN.newQSemN1
    `cast` (<Int>_R ->_R Sym (GHC.Types.N:IO[0] <QSemN>_R)
            :: (Int
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, QSemN #) :: *)
               ~R# (Int -> IO QSemN :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1_rdSvN :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl1_rdSvN = GHC.Types.I# 0#

Rec {
-- RHS size: {terms: 97, types: 197, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.$wloop [InlPrag=NOUSERINLINE[0],
                                 Occ=LoopBreaker]
  :: GHC.Prim.Int#
     -> [(Int, MVar ())]
     -> [(Int, MVar ())]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (Int, [(Int, MVar ())], [(Int, MVar ())]) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,U><S,U>,
 Unf=OtherCon []]
Control.Concurrent.QSemN.$wloop
  = \ (ww_sdSmN :: GHC.Prim.Int#)
      (w_sdSmI :: [(Int, MVar ())])
      (w1_sdSmJ :: [(Int, MVar ())])
      (w2_sdSmK :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case ww_sdSmN of wild_X1p {
        __DEFAULT ->
          case w_sdSmI of wild1_Xq {
            [] ->
              case w1_sdSmJ of wild2_Xr {
                [] ->
                  (# w2_sdSmK,
                     (GHC.Types.I# wild_X1p, GHC.Types.[] @ (Int, MVar ()),
                      GHC.Types.[] @ (Int, MVar ())) #);
                : ipv_sdSa5 ipv1_sdSa6 ->
                  Control.Concurrent.QSemN.$wloop
                    wild_X1p
                    (GHC.List.reverse1
                       @ (Int, MVar ()) wild2_Xr (GHC.Types.[] @ (Int, MVar ())))
                    (GHC.Types.[] @ (Int, MVar ()))
                    w2_sdSmK
              };
            : ds_ddS8L bs_adS3r ->
              case ds_ddS8L of { (j_adS3p, b_adS3q) ->
              case j_adS3p of { GHC.Types.I# x_aA1E ->
              case GHC.Prim.># x_aA1E wild_X1p of {
                __DEFAULT ->
                  case b_adS3q of { GHC.MVar.MVar mvar#_iax3a ->
                  case GHC.Prim.tryPutMVar#
                         @ GHC.Prim.RealWorld @ () mvar#_iax3a GHC.Tuple.() w2_sdSmK
                  of
                  { (# ipv_iax3e, ipv1_iax3f #) ->
                  case ipv1_iax3f of {
                    __DEFAULT ->
                      Control.Concurrent.QSemN.$wloop
                        (GHC.Prim.-# wild_X1p x_aA1E) bs_adS3r w1_sdSmJ ipv_iax3e;
                    0# ->
                      Control.Concurrent.QSemN.$wloop
                        wild_X1p bs_adS3r w1_sdSmJ ipv_iax3e
                  }
                  }
                  };
                1# ->
                  case b_adS3q of { GHC.MVar.MVar mv#_idSak ->
                  case GHC.Prim.isEmptyMVar#
                         @ GHC.Prim.RealWorld @ () mv#_idSak w2_sdSmK
                  of
                  { (# ipv_idSao, ipv1_idSap #) ->
                  case ipv1_idSap of {
                    __DEFAULT ->
                      (# ipv_idSao, (GHC.Types.I# wild_X1p, wild1_Xq, w1_sdSmJ) #);
                    0# ->
                      Control.Concurrent.QSemN.$wloop
                        wild_X1p bs_adS3r w1_sdSmJ ipv_idSao
                  }
                  }
                  }
              }
              }
              }
          };
        0# -> (# w2_sdSmK, (lvl1_rdSvN, w_sdSmI, w1_sdSmJ) #)
      }
end Rec }

-- RHS size: {terms: 72, types: 284, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.$wsignalQSemN [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld (Int, [(Int, MVar ())], [(Int, MVar ())])
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 231 30}]
Control.Concurrent.QSemN.$wsignalQSemN
  = \ (ww_sdSmV
         :: GHC.Prim.MVar#
              GHC.Prim.RealWorld (Int, [(Int, MVar ())], [(Int, MVar ())]))
      (ww1_sdSmZ :: GHC.Prim.Int#)
      (w_sdSmS :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case GHC.Prim.getMaskingState# w_sdSmS of
      { (# ipv_idSaA, ipv1_idSaB #) ->
      case ipv1_idSaB of {
        __DEFAULT ->
          GHC.Prim.maskUninterruptible#
            @ ()
            (\ (s_i7IAv [OS=OneShot] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
               case GHC.Prim.takeMVar#
                      @ GHC.Prim.RealWorld
                      @ (Int, [(Int, MVar ())], [(Int, MVar ())])
                      ww_sdSmV
                      s_i7IAv
               of
               { (# ipv2_i7IAy, ipv3_i7IAz #) ->
               case ipv3_i7IAz of { (i_adS3f, a1_adS3g, a2_adS3h) ->
               case i_adS3f of { GHC.Types.I# y_i7MX5 ->
               case Control.Concurrent.QSemN.$wloop
                      (GHC.Prim.+# ww1_sdSmZ y_i7MX5) a1_adS3g a2_adS3h ipv2_i7IAy
               of
               { (# ipv4_X7IBC, ipv5_X7IBE #) ->
               case GHC.Prim.putMVar#
                      @ GHC.Prim.RealWorld
                      @ (Int, [(Int, MVar ())], [(Int, MVar ())])
                      ww_sdSmV
                      ipv5_X7IBE
                      ipv4_X7IBC
               of s2#_i9DsB
               { __DEFAULT ->
               (# s2#_i9DsB, GHC.Tuple.() #)
               }
               }
               }
               }
               })
            ipv_idSaA;
        1# ->
          case GHC.Prim.takeMVar#
                 @ GHC.Prim.RealWorld
                 @ (Int, [(Int, MVar ())], [(Int, MVar ())])
                 ww_sdSmV
                 ipv_idSaA
          of
          { (# ipv2_i7IAy, ipv3_i7IAz #) ->
          case ipv3_i7IAz of { (i_adS3f, a1_adS3g, a2_adS3h) ->
          case i_adS3f of { GHC.Types.I# y_i7MX5 ->
          case Control.Concurrent.QSemN.$wloop
                 (GHC.Prim.+# ww1_sdSmZ y_i7MX5) a1_adS3g a2_adS3h ipv2_i7IAy
          of
          { (# ipv4_X7IBC, ipv5_X7IBE #) ->
          case GHC.Prim.putMVar#
                 @ GHC.Prim.RealWorld
                 @ (Int, [(Int, MVar ())], [(Int, MVar ())])
                 ww_sdSmV
                 ipv5_X7IBE
                 ipv4_X7IBC
          of s2#_i9DsB
          { __DEFAULT ->
          (# s2#_i9DsB, GHC.Tuple.() #)
          }
          }
          }
          }
          }
      }
      }

-- RHS size: {terms: 13, types: 21, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.signalQSemN1 [InlPrag=NOUSERINLINE[0]]
  :: QSemN
     -> Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sdSmQ [Occ=Once!] :: QSemN)
                 (w1_sdSmR [Occ=Once!] :: Int)
                 (w2_sdSmS [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w_sdSmQ of { QSemN ww1_sdSmV [Occ=Once] ->
                 case w1_sdSmR of { GHC.Types.I# ww3_sdSmZ [Occ=Once] ->
                 Control.Concurrent.QSemN.$wsignalQSemN ww1_sdSmV ww3_sdSmZ w2_sdSmS
                 }
                 }}]
Control.Concurrent.QSemN.signalQSemN1
  = \ (w_sdSmQ :: QSemN)
      (w1_sdSmR :: Int)
      (w2_sdSmS :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case w_sdSmQ of { QSemN ww1_sdSmV ->
      case w1_sdSmR of { GHC.Types.I# ww3_sdSmZ ->
      Control.Concurrent.QSemN.$wsignalQSemN ww1_sdSmV ww3_sdSmZ w2_sdSmS
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
signalQSemN :: QSemN -> Int -> IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Control.Concurrent.QSemN.signalQSemN1
               `cast` (<QSemN>_R ->_R <Int>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (QSemN
                           -> Int
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #) :: *)
                          ~R# (QSemN -> Int -> IO () :: *))}]
signalQSemN
  = Control.Concurrent.QSemN.signalQSemN1
    `cast` (<QSemN>_R ->_R <Int>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (QSemN
                -> Int
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #) :: *)
               ~R# (QSemN -> Int -> IO () :: *))

-- RHS size: {terms: 130, types: 371, coercions: 0, joins: 0/0}
lvl2_rdSvO
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld (Int, [(Int, MVar ())], [(Int, MVar ())])
     -> Int
     -> GHC.Prim.MVar# GHC.Prim.RealWorld ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> SomeException
     -> GHC.Prim.Int#
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<S,U><S(S),1*U(U)><S,U><S,U><L,U><S,1*U>,
 Unf=OtherCon []]
lvl2_rdSvO
  = \ (w_sdSn5
         :: GHC.Prim.MVar#
              GHC.Prim.RealWorld (Int, [(Int, MVar ())], [(Int, MVar ())]))
      (w1_sdSn4 :: Int)
      (ww_sdSna :: GHC.Prim.MVar# GHC.Prim.RealWorld ())
      (ipv_idSaA :: GHC.Prim.State# GHC.Prim.RealWorld)
      (w2_sdSn7 :: SomeException)
      (ipv1_idSaB :: GHC.Prim.Int#) ->
      case ipv1_idSaB of {
        __DEFAULT ->
          case GHC.Prim.maskUninterruptible#
                 @ ()
                 (\ (s_X7IC1 [OS=OneShot] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case GHC.Prim.takeMVar#
                           @ GHC.Prim.RealWorld
                           @ (Int, [(Int, MVar ())], [(Int, MVar ())])
                           w_sdSn5
                           s_X7IC1
                    of
                    { (# ipv2_X7IC8, ipv3_X7ICa #) ->
                    case ipv3_X7ICa of wild_X20 { (i_adS30, b1_adS31, b2_adS32) ->
                    case GHC.Prim.tryTakeMVar#
                           @ GHC.Prim.RealWorld @ () ww_sdSna ipv2_X7IC8
                    of
                    { (# ipv4_idSbu, ipv5_idSbv, ipv6_idSbw #) ->
                    case ipv5_idSbv of {
                      __DEFAULT ->
                        case w1_sdSn4 of { GHC.Types.I# x_i7MX1 ->
                        case i_adS30 of { GHC.Types.I# y_i7MX5 ->
                        case Control.Concurrent.QSemN.$wloop
                               (GHC.Prim.+# x_i7MX1 y_i7MX5) b1_adS31 b2_adS32 ipv4_idSbu
                        of
                        { (# ipv7_X7ICq, ipv8_X7ICs #) ->
                        case GHC.Prim.putMVar#
                               @ GHC.Prim.RealWorld
                               @ (Int, [(Int, MVar ())], [(Int, MVar ())])
                               w_sdSn5
                               ipv8_X7ICs
                               ipv7_X7ICq
                        of s2#_i9DsB
                        { __DEFAULT ->
                        (# s2#_i9DsB, GHC.Tuple.() #)
                        }
                        }
                        }
                        };
                      0# ->
                        case GHC.Prim.putMVar#
                               @ GHC.Prim.RealWorld @ () ww_sdSna GHC.Tuple.() ipv4_idSbu
                        of s2#_i9DsB
                        { __DEFAULT ->
                        case GHC.Prim.putMVar#
                               @ GHC.Prim.RealWorld
                               @ (Int, [(Int, MVar ())], [(Int, MVar ())])
                               w_sdSn5
                               wild_X20
                               s2#_i9DsB
                        of s2#1_X9Duy
                        { __DEFAULT ->
                        (# s2#1_X9Duy, GHC.Tuple.() #)
                        }
                        }
                    }
                    }
                    }
                    })
                 ipv_idSaA
          of
          { (# ipv2_idSbg, ipv3_idSbh #) ->
          GHC.Prim.raiseIO# @ SomeException @ () w2_sdSn7 ipv2_idSbg
          };
        1# ->
          case GHC.Prim.takeMVar#
                 @ GHC.Prim.RealWorld
                 @ (Int, [(Int, MVar ())], [(Int, MVar ())])
                 w_sdSn5
                 ipv_idSaA
          of
          { (# ipv2_X7IC8, ipv3_X7ICa #) ->
          case ipv3_X7ICa of wild_X20 { (i_adS30, b1_adS31, b2_adS32) ->
          case GHC.Prim.tryTakeMVar#
                 @ GHC.Prim.RealWorld @ () ww_sdSna ipv2_X7IC8
          of
          { (# ipv4_idSbu, ipv5_idSbv, ipv6_idSbw #) ->
          case ipv5_idSbv of {
            __DEFAULT ->
              case w1_sdSn4 of { GHC.Types.I# x_i7MX1 ->
              case i_adS30 of { GHC.Types.I# y_i7MX5 ->
              case Control.Concurrent.QSemN.$wloop
                     (GHC.Prim.+# x_i7MX1 y_i7MX5) b1_adS31 b2_adS32 ipv4_idSbu
              of
              { (# ipv7_X7ICq, ipv8_X7ICs #) ->
              case GHC.Prim.putMVar#
                     @ GHC.Prim.RealWorld
                     @ (Int, [(Int, MVar ())], [(Int, MVar ())])
                     w_sdSn5
                     ipv8_X7ICs
                     ipv7_X7ICq
              of s2#_i9DsB
              { __DEFAULT ->
              GHC.Prim.raiseIO# @ SomeException @ () w2_sdSn7 s2#_i9DsB
              }
              }
              }
              };
            0# ->
              case GHC.Prim.putMVar#
                     @ GHC.Prim.RealWorld @ () ww_sdSna GHC.Tuple.() ipv4_idSbu
              of s2#_i9DsB
              { __DEFAULT ->
              case GHC.Prim.putMVar#
                     @ GHC.Prim.RealWorld
                     @ (Int, [(Int, MVar ())], [(Int, MVar ())])
                     w_sdSn5
                     wild_X20
                     s2#_i9DsB
              of s2#1_X9Duy
              { __DEFAULT ->
              GHC.Prim.raiseIO# @ SomeException @ () w2_sdSn7 s2#1_X9Duy
              }
              }
          }
          }
          }
          }
      }

-- RHS size: {terms: 16, types: 32, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar# GHC.Prim.RealWorld ()
     -> Int
     -> GHC.Prim.MVar#
          GHC.Prim.RealWorld (Int, [(Int, MVar ())], [(Int, MVar ())])
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> SomeException
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<S,U><S(S),1*U(U)><S,U><S,U><L,U>,
 Unf=OtherCon []]
Control.Concurrent.QSemN.$wlvl
  = \ (ww_sdSna :: GHC.Prim.MVar# GHC.Prim.RealWorld ())
      (w_sdSn4 :: Int)
      (w1_sdSn5
         :: GHC.Prim.MVar#
              GHC.Prim.RealWorld (Int, [(Int, MVar ())], [(Int, MVar ())]))
      (w2_sdSn6 :: GHC.Prim.State# GHC.Prim.RealWorld)
      (w3_sdSn7 :: SomeException) ->
      case GHC.Prim.getMaskingState# w2_sdSn6 of
      { (# ipv_idSaA, ipv1_idSaB #) ->
      lvl2_rdSvO w1_sdSn5 w_sdSn4 ww_sdSna ipv_idSaA w3_sdSn7 ipv1_idSaB
      }

-- RHS size: {terms: 87, types: 209, coercions: 0, joins: 0/3}
Control.Concurrent.QSemN.$wwaitQSemN [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.MVar#
       GHC.Prim.RealWorld (Int, [(Int, MVar ())], [(Int, MVar ())])
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 297 0}]
Control.Concurrent.QSemN.$wwaitQSemN
  = \ (ww_sdSnj
         :: GHC.Prim.MVar#
              GHC.Prim.RealWorld (Int, [(Int, MVar ())], [(Int, MVar ())]))
      (ww1_sdSnn :: GHC.Prim.Int#)
      (w_sdSng :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case GHC.Prim.getMaskingState# w_sdSng of
      { (# ipv_idSaT, ipv1_idSaU #) ->
      let {
        io_sdSep [Dmd=<C(S),C(U(U,U))>]
          :: GHC.Prim.State# GHC.Prim.RealWorld
             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
        [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
        io_sdSep
          = \ (s_i7IAv :: GHC.Prim.State# GHC.Prim.RealWorld) ->
              case GHC.Prim.takeMVar#
                     @ GHC.Prim.RealWorld
                     @ (Int, [(Int, MVar ())], [(Int, MVar ())])
                     ww_sdSnj
                     s_i7IAv
              of
              { (# ipv2_i7IAy, ipv3_i7IAz #) ->
              case ipv3_i7IAz of { (i_adS35, b1_adS36, b2_adS37) ->
              case i_adS35 of wild1_i7NWM { GHC.Types.I# x_i7NWO ->
              let {
                x1_alN9 [Dmd=<S,U>] :: GHC.Prim.Int#
                [LclId]
                x1_alN9 = GHC.Prim.-# x_i7NWO ww1_sdSnn } in
              case GHC.Prim.<# x1_alN9 0# of {
                __DEFAULT ->
                  case GHC.Prim.putMVar#
                         @ GHC.Prim.RealWorld
                         @ (Int, [(Int, MVar ())], [(Int, MVar ())])
                         ww_sdSnj
                         (GHC.Types.I# x1_alN9, b1_adS36, b2_adS37)
                         ipv2_i7IAy
                  of s2#_i9DsB
                  { __DEFAULT ->
                  (# s2#_i9DsB, GHC.Tuple.() #)
                  };
                1# ->
                  case GHC.Prim.newMVar# @ GHC.Prim.RealWorld @ () ipv2_i7IAy of
                  { (# ipv4_iaIyp, ipv5_iaIyq #) ->
                  let {
                    wild2_i7NWQ [Dmd=<L,U(U)>] :: Int
                    [LclId, Unf=OtherCon []]
                    wild2_i7NWQ = GHC.Types.I# ww1_sdSnn } in
                  case GHC.Prim.putMVar#
                         @ GHC.Prim.RealWorld
                         @ (Int, [(Int, MVar ())], [(Int, MVar ())])
                         ww_sdSnj
                         (wild1_i7NWM, b1_adS36,
                          GHC.Types.:
                            @ (Int, MVar ())
                            (wild2_i7NWQ, GHC.MVar.MVar @ () ipv5_iaIyq)
                            b2_adS37)
                         ipv4_iaIyp
                  of s2#_i9DsB
                  { __DEFAULT ->
                  GHC.Prim.catch#
                    @ ()
                    @ SomeException
                    (\ (eta_i9Dsl [OS=OneShot]
                          :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       GHC.Prim.takeMVar# @ GHC.Prim.RealWorld @ () ipv5_iaIyq eta_i9Dsl)
                    (\ (e1_idSbc [OS=OneShot] :: SomeException)
                       (s1_idSbd [OS=OneShot] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       Control.Concurrent.QSemN.$wlvl
                         ipv5_iaIyq wild2_i7NWQ ww_sdSnj s1_idSbd e1_idSbc)
                    s2#_i9DsB
                  }
                  }
              }
              }
              }
              } } in
      case ipv1_idSaU of {
        __DEFAULT -> io_sdSep ipv_idSaT;
        0# -> GHC.Prim.maskAsyncExceptions# @ () io_sdSep ipv_idSaT
      }
      }

-- RHS size: {terms: 13, types: 21, coercions: 0, joins: 0/0}
Control.Concurrent.QSemN.waitQSemN1 [InlPrag=NOUSERINLINE[0]]
  :: QSemN
     -> Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sdSne [Occ=Once!] :: QSemN)
                 (w1_sdSnf [Occ=Once!] :: Int)
                 (w2_sdSng [Occ=Once] :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w_sdSne of { QSemN ww1_sdSnj [Occ=Once] ->
                 case w1_sdSnf of { GHC.Types.I# ww3_sdSnn [Occ=Once] ->
                 Control.Concurrent.QSemN.$wwaitQSemN ww1_sdSnj ww3_sdSnn w2_sdSng
                 }
                 }}]
Control.Concurrent.QSemN.waitQSemN1
  = \ (w_sdSne :: QSemN)
      (w1_sdSnf :: Int)
      (w2_sdSng :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case w_sdSne of { QSemN ww1_sdSnj ->
      case w1_sdSnf of { GHC.Types.I# ww3_sdSnn ->
      Control.Concurrent.QSemN.$wwaitQSemN ww1_sdSnj ww3_sdSnn w2_sdSng
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
waitQSemN :: QSemN -> Int -> IO ()
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Control.Concurrent.QSemN.waitQSemN1
               `cast` (<QSemN>_R ->_R <Int>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (QSemN
                           -> Int
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #) :: *)
                          ~R# (QSemN -> Int -> IO () :: *))}]
waitQSemN
  = Control.Concurrent.QSemN.waitQSemN1
    `cast` (<QSemN>_R ->_R <Int>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (QSemN
                -> Int
                -> GHC.Prim.State# GHC.Prim.RealWorld
                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #) :: *)
               ~R# (QSemN -> Int -> IO () :: *))


