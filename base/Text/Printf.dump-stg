
==================== Pre unarise: ====================
2018-03-16 16:07:03.533522601 UTC

Text.Printf.toChar
  :: forall c. Text.Printf.IsChar c => c -> GHC.Types.Char
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_scccY]
        case v_scccY of {
          Text.Printf.C:IsChar v_sccd0 [Occ=Once] _ [Occ=Dead] -> v_sccd0;
        };

Text.Printf.fromChar
  :: forall c. Text.Printf.IsChar c => GHC.Types.Char -> c
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_sccd2]
        case v_sccd2 of {
          Text.Printf.C:IsChar _ [Occ=Dead] v_sccd5 [Occ=Once] -> v_sccd5;
        };

Text.Printf.formatArg
  :: forall a.
     Text.Printf.PrintfArg a =>
     a -> Text.Printf.FieldFormatter
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_sccd6]
        case v_sccd6 of {
          Text.Printf.C:PrintfArg v_sccd8 [Occ=Once] _ [Occ=Dead] -> v_sccd8;
        };

Text.Printf.parseFormat
  :: forall a.
     Text.Printf.PrintfArg a =>
     a -> Text.Printf.ModifierParser
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_sccda]
        case v_sccda of {
          Text.Printf.C:PrintfArg _ [Occ=Dead] v_sccdd [Occ=Once] -> v_sccdd;
        };

Text.Printf.hspr [InlPrag=INLINE]
  :: forall t.
     Text.Printf.HPrintfType t =>
     GHC.IO.Handle.Types.Handle
     -> GHC.Base.String -> [Text.Printf.UPrintf] -> t
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_sccde] v_sccde;

Text.Printf.spr [InlPrag=INLINE]
  :: forall t.
     Text.Printf.PrintfType t =>
     GHC.Base.String -> [Text.Printf.UPrintf] -> t
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_sccdf] v_sccdf;

Text.Printf.$fIsCharChar_$cfromChar
  :: GHC.Types.Char -> GHC.Types.Char
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [c_sccdg] c_sccdg;

Text.Printf.$fIsCharChar [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.IsChar GHC.Types.Char
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Text.Printf.C:IsChar! [Text.Printf.$fIsCharChar_$cfromChar
                                         Text.Printf.$fIsCharChar_$cfromChar];

Text.Printf.$fHPrintfType(->)_$chspr
  :: forall a r.
     (Text.Printf.PrintfArg a, Text.Printf.HPrintfType r) =>
     GHC.IO.Handle.Types.Handle
     -> GHC.Base.String -> [Text.Printf.UPrintf] -> a -> r
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(C(S))),1*C1(C1(C1(U)))><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dPrintfArg_sccdh
           $dHPrintfType_sccdi
           hdl_sccdj
           fmts_sccdk
           args_sccdl
           a1_sccdm]
        let {
          sat_sccdo [Occ=Once] :: Text.Printf.FieldFormatter
          [LclId] =
              [$dPrintfArg_sccdh a1_sccdm] \u []
                  Text.Printf.formatArg $dPrintfArg_sccdh a1_sccdm; } in
        let {
          sat_sccdn [Occ=Once] :: Text.Printf.ModifierParser
          [LclId] =
              [$dPrintfArg_sccdh a1_sccdm] \u []
                  Text.Printf.parseFormat $dPrintfArg_sccdh a1_sccdm; } in
        let {
          sat_sccdp [Occ=Once]
            :: (Text.Printf.ModifierParser, Text.Printf.FieldFormatter)
          [LclId] =
              CCCS (,)! [sat_sccdn sat_sccdo]; } in
        let {
          sat_sccdq [Occ=Once] :: [Text.Printf.UPrintf]
          [LclId] =
              CCCS :! [sat_sccdp args_sccdl];
        } in  $dHPrintfType_sccdi hdl_sccdj fmts_sccdk sat_sccdq;

Text.Printf.$fHPrintfType(->) [InlPrag=INLINE (sat-args=0)]
  :: forall a r.
     (Text.Printf.PrintfArg a, Text.Printf.HPrintfType r) =>
     Text.Printf.HPrintfType (a -> r)
[GblId[DFunId(nt)],
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(C(S))),1*C1(C1(C1(U)))><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Printf.$fHPrintfType(->)_$chspr
            eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

Text.Printf.$fPrintfType(->)_$cspr
  :: forall a r.
     (Text.Printf.PrintfArg a, Text.Printf.PrintfType r) =>
     GHC.Base.String -> [Text.Printf.UPrintf] -> a -> r
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(S)),1*C1(C1(U))><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dPrintfArg_sccdr
           $dPrintfType_sccds
           fmts_sccdt
           args_sccdu
           a1_sccdv]
        let {
          sat_sccdx [Occ=Once] :: Text.Printf.FieldFormatter
          [LclId] =
              [$dPrintfArg_sccdr a1_sccdv] \u []
                  Text.Printf.formatArg $dPrintfArg_sccdr a1_sccdv; } in
        let {
          sat_sccdw [Occ=Once] :: Text.Printf.ModifierParser
          [LclId] =
              [$dPrintfArg_sccdr a1_sccdv] \u []
                  Text.Printf.parseFormat $dPrintfArg_sccdr a1_sccdv; } in
        let {
          sat_sccdy [Occ=Once]
            :: (Text.Printf.ModifierParser, Text.Printf.FieldFormatter)
          [LclId] =
              CCCS (,)! [sat_sccdw sat_sccdx]; } in
        let {
          sat_sccdz [Occ=Once] :: [Text.Printf.UPrintf]
          [LclId] =
              CCCS :! [sat_sccdy args_sccdu];
        } in  $dPrintfType_sccds fmts_sccdt sat_sccdz;

Text.Printf.$fPrintfType(->) [InlPrag=INLINE (sat-args=0)]
  :: forall a r.
     (Text.Printf.PrintfArg a, Text.Printf.PrintfType r) =>
     Text.Printf.PrintfType (a -> r)
[GblId[DFunId(nt)],
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(S)),1*C1(C1(U))><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Printf.$fPrintfType(->)_$cspr
            eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

Text.Printf.fmtChar :: Text.Printf.FieldFormat -> GHC.Types.Char
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLS),1*U(A,A,A,A,A,A,1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [ds_sccdA]
        case ds_sccdA of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds7_sccdI [Occ=Once] ->
              ds7_sccdI;
        };

Text.Printf.fmtModifiers
  :: Text.Printf.FieldFormat -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sccdJ]
        case ds_sccdJ of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds6_sccdQ [Occ=Once]
                                  _ [Occ=Dead] ->
              ds6_sccdQ;
        };

Text.Printf.fmtAlternate
  :: Text.Printf.FieldFormat -> GHC.Types.Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sccdS]
        case ds_sccdS of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds5_sccdY [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds5_sccdY;
        };

Text.Printf.fmtSign
  :: Text.Printf.FieldFormat -> GHC.Base.Maybe Text.Printf.FormatSign
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_scce1]
        case ds_scce1 of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds4_scce6 [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds4_scce6;
        };

Text.Printf.fmtAdjust
  :: Text.Printf.FieldFormat
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sccea]
        case ds_sccea of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds3_sccee [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds3_sccee;
        };

Text.Printf.fmtPrecision
  :: Text.Printf.FieldFormat -> GHC.Base.Maybe GHC.Types.Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sccej]
        case ds_sccej of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  ds2_sccem [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds2_sccem;
        };

Text.Printf.fmtWidth
  :: Text.Printf.FieldFormat -> GHC.Base.Maybe GHC.Types.Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLL),1*U(1*U,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_scces]
        case ds_scces of {
          Text.Printf.FieldFormat ds1_scceu [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds1_scceu;
        };

Text.Printf.fpRest :: Text.Printf.FormatParse -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLS),1*U(A,A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_scceB]
        case ds_scceB of {
          Text.Printf.FormatParse _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds3_scceF [Occ=Once] ->
              ds3_scceF;
        };

Text.Printf.fpChar :: Text.Printf.FormatParse -> GHC.Types.Char
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),1*U(A,1*U(U),A)>m,
 Unf=OtherCon []] =
    [] \r [ds_scceG]
        case ds_scceG of {
          Text.Printf.FormatParse _ [Occ=Dead]
                                  ds2_scceJ [Occ=Once]
                                  _ [Occ=Dead] ->
              ds2_scceJ;
        };

Text.Printf.fpModifiers
  :: Text.Printf.FormatParse -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),1*U(1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_scceL]
        case ds_scceL of {
          Text.Printf.FormatParse ds1_scceN [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds1_scceN;
        };

Text.Printf.printf
  :: forall r. Text.Printf.PrintfType r => GHC.Base.String -> r
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(C(S)),1*C1(C1(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dPrintfType_scceQ fmts_scceR]
        $dPrintfType_scceQ fmts_scceR GHC.Types.[];

Text.Printf.hPrintf
  :: forall r.
     Text.Printf.HPrintfType r =>
     GHC.IO.Handle.Types.Handle -> GHC.Base.String -> r
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(C(C(S))),1*C1(C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dHPrintfType_scceS hdl_scceT fmts_scceU]
        $dHPrintfType_scceS hdl_scceT fmts_scceU GHC.Types.[];

Text.Printf.vFmt
  :: GHC.Types.Char
     -> Text.Printf.FieldFormat -> Text.Printf.FieldFormat
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S(LLLLLLS(S)),1*U(U,U,U,U,U,U,U(U))>m,
 Unf=OtherCon []] =
    [] \r [c_scceV ufmt_scceW]
        case ufmt_scceW of wild_scceX {
          Text.Printf.FieldFormat ds_scceY [Occ=Once]
                                  ds1_scceZ [Occ=Once]
                                  ds2_sccf0 [Occ=Once]
                                  ds3_sccf1 [Occ=Once]
                                  ds4_sccf2 [Occ=Once]
                                  ds5_sccf3 [Occ=Once]
                                  ds6_sccf4 [Occ=Once!] ->
              case ds6_sccf4 of {
                GHC.Types.C# ds7_sccf6 [Occ=Once!] ->
                    case ds7_sccf6 of {
                      __DEFAULT -> wild_scceX;
                      'v'# ->
                          Text.Printf.FieldFormat [ds_scceY
                                                   ds1_scceZ
                                                   ds2_sccf0
                                                   ds3_sccf1
                                                   ds4_sccf2
                                                   ds5_sccf3
                                                   c_scceV];
                    };
              };
        };

lvl_rccbg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: "#;

Text.Printf.perror :: forall a. GHC.Base.String -> a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [s_sccf8]
        case
            GHC.CString.unpackAppendCString# lvl_rccbg s_sccf8
        of
        sat_sccf9
        { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sccf9;
        };

lvl1_rccbh :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShowChar3 GHC.Types.[]];

lvl2_rccbi :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bad formatting char "#;

Text.Printf.$werrorBadFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Prim.Char# -> a
[GblId, Arity=1, Str=<B,1*U>x, Unf=OtherCon []] =
    [] \r [ww_sccfa]
        let {
          sat_sccfe [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sccfa] \u []
                  let {
                    sat_sccfd [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww_sccfa] \u []
                            case ww_sccfa of ds1_sccfb {
                              __DEFAULT ->
                                  let {
                                    sat_sccfc [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [ds1_sccfb] \u []
                                            GHC.Show.$wshowLitChar ds1_sccfb lvl1_rccbh;
                                  } in  : [GHC.Show.$fShowChar3 sat_sccfc];
                              '\''# -> GHC.Show.$fShowChar1;
                            };
                  } in  GHC.CString.unpackAppendCString# lvl2_rccbi sat_sccfd;
        } in 
          case
              GHC.CString.unpackAppendCString# lvl_rccbg sat_sccfe
          of
          sat_sccff
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sccff;
          };

Text.Printf.errorBadFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Types.Char -> a
[GblId, Arity=1, Str=<B,1*U(1*U)>x, Unf=OtherCon []] =
    [] \r [w_sccfg]
        case w_sccfg of {
          GHC.Types.C# ww1_sccfi [Occ=Once] ->
              Text.Printf.$werrorBadFormat ww1_sccfi;
        };

lvl3_rccbj :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: formatting string ended prematurely"#;

Text.Printf.errorShortFormat :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl3_rccbj of sat_sccfj {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sccfj;
        };

Text.Printf.$dmparseFormat
  :: forall a.
     Text.Printf.PrintfArg a =>
     a -> Text.Printf.ModifierParser
[GblId, Arity=3, Str=<L,A><L,A><S,1*U>m, Unf=OtherCon []] =
    [] \r [$dPrintfArg_sccfk ds_sccfl ds1_sccfm]
        case ds1_sccfm of {
          [] -> Text.Printf.errorShortFormat;
          : c_sccfo [Occ=Once] cs_sccfp [Occ=Once] ->
              Text.Printf.FormatParse [GHC.Types.[] c_sccfo cs_sccfp];
        };

lvl4_rccbk :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: argument list ended prematurely"#;

Text.Printf.errorMissingArgument :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl4_rccbk of sat_sccfq {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sccfq;
        };

lvl5_rccbl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: bad argument"#;

Text.Printf.errorBadArgument :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl5_rccbl of sat_sccfr {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sccfr;
        };

Text.Printf.$fPrintfArgDouble9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "-"#;

Text.Printf.$fPrintfArgDouble8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgDouble9;

lvl6_rccbm :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: internal error: impossible dfmt"#;

Text.Printf.$fPrintfArgDouble7
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Double -> GHC.Show.ShowS
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl6_rccbm of sat_sccfs {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sccfs;
        };

Text.Printf.$w$sdfmt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char#
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Bool
     -> GHC.Types.Double
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId,
 Arity=4,
 Str=<S,U><L,U><L,1*U><L,1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ww_sccft w_sccfu w1_sccfv w2_sccfw]
        case ord# [ww_sccft] of sat_sccfy {
          __DEFAULT ->
              case __pkg_ccall base-4.11.0.0 [sat_sccfy GHC.Prim.realWorld#] of {
                (#,#) _ [Occ=Dead] ds1_sccfB [Occ=Once!] ->
                    case ord# [ww_sccft] of sat_sccfD {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [sat_sccfD GHC.Prim.realWorld#] of {
                            (#,#) _ [Occ=Dead] ds3_sccfG ->
                                case int2Word# [ds3_sccfG] of sat_sccfH {
                                  __DEFAULT ->
                                      case leWord# [sat_sccfH 1114111##] of {
                                        __DEFAULT -> GHC.Char.$wlvl ds3_sccfG;
                                        1# ->
                                            let-no-escape {
                                              $j_sccfK [Occ=Once*!T[1], Dmd=<C(S),1*C1(U(U,U))>]
                                                :: [GHC.Types.Char]
                                                   -> (# GHC.Base.String, GHC.Base.String #)
                                              [LclId[JoinId(1)],
                                               Arity=1,
                                               Str=<S,1*U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ds1_sccfB] \r [karg_sccfL]
                                                      case ds1_sccfB of {
                                                        __DEFAULT ->
                                                            case
                                                                GHC.Base.map
                                                                    GHC.Unicode.toUpper karg_sccfL
                                                            of
                                                            wild4_sccfN
                                                            { [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sccfO [Occ=Once!]
                                                                cs_sccfP [Occ=Once] ->
                                                                  case ds4_sccfO of {
                                                                    GHC.Types.C# ds5_sccfR [Occ=Once!] ->
                                                                        case ds5_sccfR of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sccfN];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sccfP];
                                                                        };
                                                                  };
                                                            };
                                                        0# ->
                                                            case karg_sccfL of wild4_sccfT {
                                                              [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sccfU [Occ=Once!]
                                                                cs_sccfV [Occ=Once] ->
                                                                  case ds4_sccfU of {
                                                                    GHC.Types.C# ds5_sccfX [Occ=Once!] ->
                                                                        case ds5_sccfX of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sccfT];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sccfV];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              case chr# [ds3_sccfG] of {
                                                __DEFAULT -> Text.Printf.$fPrintfArgDouble7;
                                                'e'# ->
                                                    case w2_sccfw of {
                                                      GHC.Types.D# ww2_sccg2 [Occ=Once] ->
                                                          case
                                                              GHC.Float.$w$sformatRealFloatAlt
                                                                  GHC.Float.FFExponent
                                                                  w_sccfu
                                                                  GHC.Types.False
                                                                  ww2_sccg2
                                                          of
                                                          sat_sccg3
                                                          { __DEFAULT -> $j_sccfK sat_sccg3;
                                                          };
                                                    };
                                                'f'# ->
                                                    case w1_sccfv of {
                                                      GHC.Types.False ->
                                                          case w2_sccfw of {
                                                            GHC.Types.D# ww2_sccg6 [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt
                                                                        GHC.Float.FFFixed
                                                                        w_sccfu
                                                                        GHC.Types.False
                                                                        ww2_sccg6
                                                                of
                                                                sat_sccg7
                                                                { __DEFAULT -> $j_sccfK sat_sccg7;
                                                                };
                                                          };
                                                      GHC.Types.True ->
                                                          case w2_sccfw of {
                                                            GHC.Types.D# ww2_sccg9 [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt
                                                                        GHC.Float.FFFixed
                                                                        w_sccfu
                                                                        GHC.Types.True
                                                                        ww2_sccg9
                                                                of
                                                                sat_sccga
                                                                { __DEFAULT -> $j_sccfK sat_sccga;
                                                                };
                                                          };
                                                    };
                                                'g'# ->
                                                    case w1_sccfv of {
                                                      GHC.Types.False ->
                                                          case w2_sccfw of {
                                                            GHC.Types.D# ww2_sccgd [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt
                                                                        GHC.Float.FFGeneric
                                                                        w_sccfu
                                                                        GHC.Types.False
                                                                        ww2_sccgd
                                                                of
                                                                sat_sccge
                                                                { __DEFAULT -> $j_sccfK sat_sccge;
                                                                };
                                                          };
                                                      GHC.Types.True ->
                                                          case w2_sccfw of {
                                                            GHC.Types.D# ww2_sccgg [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt
                                                                        GHC.Float.FFGeneric
                                                                        w_sccfu
                                                                        GHC.Types.True
                                                                        ww2_sccgg
                                                                of
                                                                sat_sccgh
                                                                { __DEFAULT -> $j_sccfK sat_sccgh;
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

Text.Printf.$fPrintfArgFloat1
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Float -> GHC.Show.ShowS
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl6_rccbm of sat_sccgi {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sccgi;
        };

Text.Printf.$w$sdfmt1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char#
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Bool
     -> GHC.Types.Float
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId,
 Arity=4,
 Str=<S,U><L,U><L,1*U><L,1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ww_sccgj w_sccgk w1_sccgl w2_sccgm]
        case ord# [ww_sccgj] of sat_sccgo {
          __DEFAULT ->
              case __pkg_ccall base-4.11.0.0 [sat_sccgo GHC.Prim.realWorld#] of {
                (#,#) _ [Occ=Dead] ds1_sccgr [Occ=Once!] ->
                    case ord# [ww_sccgj] of sat_sccgt {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [sat_sccgt GHC.Prim.realWorld#] of {
                            (#,#) _ [Occ=Dead] ds3_sccgw ->
                                case int2Word# [ds3_sccgw] of sat_sccgx {
                                  __DEFAULT ->
                                      case leWord# [sat_sccgx 1114111##] of {
                                        __DEFAULT -> GHC.Char.$wlvl ds3_sccgw;
                                        1# ->
                                            let-no-escape {
                                              $j_sccgA [Occ=Once*!T[1], Dmd=<C(S),1*C1(U(U,U))>]
                                                :: [GHC.Types.Char]
                                                   -> (# GHC.Base.String, GHC.Base.String #)
                                              [LclId[JoinId(1)],
                                               Arity=1,
                                               Str=<S,1*U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ds1_sccgr] \r [karg_sccgB]
                                                      case ds1_sccgr of {
                                                        __DEFAULT ->
                                                            case
                                                                GHC.Base.map
                                                                    GHC.Unicode.toUpper karg_sccgB
                                                            of
                                                            wild4_sccgD
                                                            { [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sccgE [Occ=Once!]
                                                                cs_sccgF [Occ=Once] ->
                                                                  case ds4_sccgE of {
                                                                    GHC.Types.C# ds5_sccgH [Occ=Once!] ->
                                                                        case ds5_sccgH of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sccgD];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sccgF];
                                                                        };
                                                                  };
                                                            };
                                                        0# ->
                                                            case karg_sccgB of wild4_sccgJ {
                                                              [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sccgK [Occ=Once!]
                                                                cs_sccgL [Occ=Once] ->
                                                                  case ds4_sccgK of {
                                                                    GHC.Types.C# ds5_sccgN [Occ=Once!] ->
                                                                        case ds5_sccgN of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sccgJ];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sccgL];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              case chr# [ds3_sccgw] of {
                                                __DEFAULT -> Text.Printf.$fPrintfArgFloat1;
                                                'e'# ->
                                                    case w2_sccgm of {
                                                      GHC.Types.F# ww2_sccgS [Occ=Once] ->
                                                          case
                                                              GHC.Float.$w$sformatRealFloatAlt1
                                                                  GHC.Float.FFExponent
                                                                  w_sccgk
                                                                  GHC.Types.False
                                                                  ww2_sccgS
                                                          of
                                                          sat_sccgT
                                                          { __DEFAULT -> $j_sccgA sat_sccgT;
                                                          };
                                                    };
                                                'f'# ->
                                                    case w1_sccgl of {
                                                      GHC.Types.False ->
                                                          case w2_sccgm of {
                                                            GHC.Types.F# ww2_sccgW [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt1
                                                                        GHC.Float.FFFixed
                                                                        w_sccgk
                                                                        GHC.Types.False
                                                                        ww2_sccgW
                                                                of
                                                                sat_sccgX
                                                                { __DEFAULT -> $j_sccgA sat_sccgX;
                                                                };
                                                          };
                                                      GHC.Types.True ->
                                                          case w2_sccgm of {
                                                            GHC.Types.F# ww2_sccgZ [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt1
                                                                        GHC.Float.FFFixed
                                                                        w_sccgk
                                                                        GHC.Types.True
                                                                        ww2_sccgZ
                                                                of
                                                                sat_scch0
                                                                { __DEFAULT -> $j_sccgA sat_scch0;
                                                                };
                                                          };
                                                    };
                                                'g'# ->
                                                    case w1_sccgl of {
                                                      GHC.Types.False ->
                                                          case w2_sccgm of {
                                                            GHC.Types.F# ww2_scch3 [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt1
                                                                        GHC.Float.FFGeneric
                                                                        w_sccgk
                                                                        GHC.Types.False
                                                                        ww2_scch3
                                                                of
                                                                sat_scch4
                                                                { __DEFAULT -> $j_sccgA sat_scch4;
                                                                };
                                                          };
                                                      GHC.Types.True ->
                                                          case w2_sccgm of {
                                                            GHC.Types.F# ww2_scch6 [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt1
                                                                        GHC.Float.FFGeneric
                                                                        w_sccgk
                                                                        GHC.Types.True
                                                                        ww2_scch6
                                                                of
                                                                sat_scch7
                                                                { __DEFAULT -> $j_sccgA sat_scch7;
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

Text.Printf.formatRealFloat1
  :: forall a. GHC.Base.Maybe GHC.Types.Int -> a -> GHC.Show.ShowS
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl6_rccbm of sat_scch8 {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_scch8;
        };

Text.Printf.$wdfmt [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Float.RealFloat a =>
     GHC.Prim.Char#
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Bool
     -> a
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId,
 Arity=5,
 Str=<L,U(U(U(U(A,A,A,C(U),A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,A,A,A,A,A),A,C(U),C(U(U)),C(U(1*U(U),A)),C(U(U,U(U))),A,A,A,A,C(U),C(U),A,C(U),A,A)><S,U><L,U><L,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_scch9 ww_sccha w1_scchb w2_scchc w3_scchd]
        case ord# [ww_sccha] of sat_scchf {
          __DEFAULT ->
              case __pkg_ccall base-4.11.0.0 [sat_scchf GHC.Prim.realWorld#] of {
                (#,#) _ [Occ=Dead] ds1_scchi [Occ=Once!] ->
                    case ord# [ww_sccha] of sat_scchk {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [sat_scchk GHC.Prim.realWorld#] of {
                            (#,#) _ [Occ=Dead] ds3_scchn ->
                                case int2Word# [ds3_scchn] of sat_sccho {
                                  __DEFAULT ->
                                      case leWord# [sat_sccho 1114111##] of {
                                        __DEFAULT -> GHC.Char.$wlvl ds3_scchn;
                                        1# ->
                                            let-no-escape {
                                              $j_scchr [Occ=Once*!T[1], Dmd=<C(S),1*C1(U(U,U))>]
                                                :: [GHC.Types.Char]
                                                   -> (# GHC.Base.String, GHC.Base.String #)
                                              [LclId[JoinId(1)],
                                               Arity=1,
                                               Str=<S,1*U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ds1_scchi] \r [karg_scchs]
                                                      case ds1_scchi of {
                                                        __DEFAULT ->
                                                            case
                                                                GHC.Base.map
                                                                    GHC.Unicode.toUpper karg_scchs
                                                            of
                                                            wild4_scchu
                                                            { [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_scchv [Occ=Once!]
                                                                cs_scchw [Occ=Once] ->
                                                                  case ds4_scchv of {
                                                                    GHC.Types.C# ds5_scchy [Occ=Once!] ->
                                                                        case ds5_scchy of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_scchu];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_scchw];
                                                                        };
                                                                  };
                                                            };
                                                        0# ->
                                                            case karg_scchs of wild4_scchA {
                                                              [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_scchB [Occ=Once!]
                                                                cs_scchC [Occ=Once] ->
                                                                  case ds4_scchB of {
                                                                    GHC.Types.C# ds5_scchE [Occ=Once!] ->
                                                                        case ds5_scchE of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_scchA];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_scchC];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              case chr# [ds3_scchn] of {
                                                __DEFAULT -> Text.Printf.formatRealFloat1;
                                                'e'# ->
                                                    case
                                                        GHC.Float.formatRealFloatAlt
                                                            w_scch9
                                                            GHC.Float.FFExponent
                                                            w1_scchb
                                                            GHC.Types.False
                                                            w3_scchd
                                                    of
                                                    sat_scchI
                                                    { __DEFAULT -> $j_scchr sat_scchI;
                                                    };
                                                'f'# ->
                                                    case w2_scchc of {
                                                      GHC.Types.False ->
                                                          case
                                                              GHC.Float.formatRealFloatAlt
                                                                  w_scch9
                                                                  GHC.Float.FFFixed
                                                                  w1_scchb
                                                                  GHC.Types.False
                                                                  w3_scchd
                                                          of
                                                          sat_scchK
                                                          { __DEFAULT -> $j_scchr sat_scchK;
                                                          };
                                                      GHC.Types.True ->
                                                          case
                                                              GHC.Float.formatRealFloatAlt
                                                                  w_scch9
                                                                  GHC.Float.FFFixed
                                                                  w1_scchb
                                                                  GHC.Types.True
                                                                  w3_scchd
                                                          of
                                                          sat_scchL
                                                          { __DEFAULT -> $j_scchr sat_scchL;
                                                          };
                                                    };
                                                'g'# ->
                                                    case w2_scchc of {
                                                      GHC.Types.False ->
                                                          case
                                                              GHC.Float.formatRealFloatAlt
                                                                  w_scch9
                                                                  GHC.Float.FFGeneric
                                                                  w1_scchb
                                                                  GHC.Types.False
                                                                  w3_scchd
                                                          of
                                                          sat_scchN
                                                          { __DEFAULT -> $j_scchr sat_scchN;
                                                          };
                                                      GHC.Types.True ->
                                                          case
                                                              GHC.Float.formatRealFloatAlt
                                                                  w_scch9
                                                                  GHC.Float.FFGeneric
                                                                  w1_scchb
                                                                  GHC.Types.True
                                                                  w3_scchd
                                                          of
                                                          sat_scchO
                                                          { __DEFAULT -> $j_scchr sat_scchO;
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

Text.Printf.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Text.Printf.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$trModule4];

Text.Printf.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Text.Printf"#;

Text.Printf.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$trModule2];

Text.Printf.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Text.Printf.$trModule3
                                     Text.Printf.$trModule1];

$krep_rccbn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcBool
                                              GHC.Types.[]];

$krep1_rccbo :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rccbp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandle
                                              GHC.Types.[]];

$krep3_rccbq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep4_rccbr :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep5_rccbs :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rccbo GHC.Types.[]];

$krep6_rccbt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep5_rccbs];

$krep7_rccbu :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_rccbq GHC.Types.[]];

$krep8_rccbv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep7_rccbu];

$krep9_rccbw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep8_rccbv];

Text.Printf.$tcHPrintfType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep4_rccbr];

$krep10_rccbx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep11_rccby :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_rccbx $krep3_rccbq];

$krep12_rccbz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rccbq $krep10_rccbx];

Text.Printf.$tcIsChar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IsChar"#;

Text.Printf.$tcIsChar1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcIsChar2];

Text.Printf.$tcIsChar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [660225335504909605##
                                    5800397900948792736##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcIsChar1
                                    0#
                                    Text.Printf.$tcHPrintfType1];

$krep13_rccbA :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep10_rccbx GHC.Types.[]];

$krep14_rccbB :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcIsChar
                                              $krep13_rccbA];

$krep15_rccbC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_rccbz $krep14_rccbB];

Text.Printf.$tc'C:IsChar1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_rccby $krep15_rccbC];

Text.Printf.$tc'C:IsChar3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:IsChar"#;

Text.Printf.$tc'C:IsChar2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'C:IsChar3];

Text.Printf.$tc'C:IsChar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15586488259906363003##
                                    17643381548147423706##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'C:IsChar2
                                    1#
                                    Text.Printf.$tc'C:IsChar1];

Text.Printf.$tcFormatAdjustment2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FormatAdjustment"#;

Text.Printf.$tcFormatAdjustment1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcFormatAdjustment2];

Text.Printf.$tcFormatAdjustment :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7532892403054408380##
                                    17299592949916286280##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcFormatAdjustment1
                                    0#
                                    GHC.Types.krep$*];

Text.Printf.$tc'LeftAdjust1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcFormatAdjustment
                                              GHC.Types.[]];

Text.Printf.$tc'LeftAdjust3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'LeftAdjust"#;

Text.Printf.$tc'LeftAdjust2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'LeftAdjust3];

Text.Printf.$tc'LeftAdjust :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3724221440131574524##
                                    12430068224974793646##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'LeftAdjust2
                                    0#
                                    Text.Printf.$tc'LeftAdjust1];

Text.Printf.$tc'ZeroPad2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ZeroPad"#;

Text.Printf.$tc'ZeroPad1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'ZeroPad2];

Text.Printf.$tc'ZeroPad :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4688343247861108158##
                                    7307113320833774212##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'ZeroPad1
                                    0#
                                    Text.Printf.$tc'LeftAdjust1];

$krep16_rccbD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$tc'LeftAdjust1 GHC.Types.[]];

$krep17_rccbE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep16_rccbD];

Text.Printf.$tcFormatSign2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FormatSign"#;

Text.Printf.$tcFormatSign1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcFormatSign2];

Text.Printf.$tcFormatSign :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [35986971025498593##
                                    9833165860459639351##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcFormatSign1
                                    0#
                                    GHC.Types.krep$*];

Text.Printf.$tc'SignPlus1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcFormatSign
                                              GHC.Types.[]];

Text.Printf.$tc'SignPlus3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SignPlus"#;

Text.Printf.$tc'SignPlus2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'SignPlus3];

Text.Printf.$tc'SignPlus :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18302065795158432479##
                                    11830941225366619964##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'SignPlus2
                                    0#
                                    Text.Printf.$tc'SignPlus1];

Text.Printf.$tc'SignSpace2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SignSpace"#;

Text.Printf.$tc'SignSpace1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'SignSpace2];

Text.Printf.$tc'SignSpace :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [111286303843533919##
                                    13624428119758319457##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'SignSpace1
                                    0#
                                    Text.Printf.$tc'SignPlus1];

$krep18_rccbF :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$tc'SignPlus1 GHC.Types.[]];

$krep19_rccbG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep18_rccbF];

Text.Printf.$tcFieldFormat2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FieldFormat"#;

Text.Printf.$tcFieldFormat1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcFieldFormat2];

Text.Printf.$tcFieldFormat :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12330325036165183082##
                                    5846211506648458401##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcFieldFormat1
                                    0#
                                    GHC.Types.krep$*];

$krep20_rccbH :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcFieldFormat
                                              GHC.Types.[]];

$krep21_rccbI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep20_rccbH $krep9_rccbw];

$krep22_rccbJ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_rccbx $krep21_rccbI];

$krep23_rccbK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rccbq $krep20_rccbH];

$krep24_rccbL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep23_rccbK];

$krep25_rccbM :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rccbn $krep24_rccbL];

$krep26_rccbN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep19_rccbG $krep25_rccbM];

$krep27_rccbO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep17_rccbE $krep26_rccbN];

$krep28_rccbP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_rccbt $krep27_rccbO];

Text.Printf.$tc'FieldFormat1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_rccbt $krep28_rccbP];

Text.Printf.$tc'FieldFormat3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FieldFormat"#;

Text.Printf.$tc'FieldFormat2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'FieldFormat3];

Text.Printf.$tc'FieldFormat :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11348432599023007686##
                                    6814357301696130957##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'FieldFormat2
                                    0#
                                    Text.Printf.$tc'FieldFormat1];

Text.Printf.$tcFormatParse2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FormatParse"#;

Text.Printf.$tcFormatParse1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcFormatParse2];

Text.Printf.$tcFormatParse :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5517048358589873764##
                                    8326725038359313810##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcFormatParse1
                                    0#
                                    GHC.Types.krep$*];

$krep29_rccbQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcFormatParse
                                              GHC.Types.[]];

$krep30_rccbR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep29_rccbQ];

$krep31_rccbS :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_rccbx $krep30_rccbR];

$krep32_rccbT :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rccbq $krep30_rccbR];

Text.Printf.$tc'FormatParse1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep32_rccbT];

Text.Printf.$tc'FormatParse3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FormatParse"#;

Text.Printf.$tc'FormatParse2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'FormatParse3];

Text.Printf.$tc'FormatParse :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [549767054447046648##
                                    1116614444935710689##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'FormatParse2
                                    0#
                                    Text.Printf.$tc'FormatParse1];

$krep33_rccbU :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep21_rccbI GHC.Types.[]];

$krep34_rccbV :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep30_rccbR $krep33_rccbU];

$krep35_rccbW :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep34_rccbV];

$krep36_rccbX :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep35_rccbW GHC.Types.[]];

$krep37_rccbY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep36_rccbX];

$krep38_rccbZ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_rccbY $krep10_rccbx];

$krep39_rccc0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep38_rccbZ];

$krep40_rccc1 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_rccbp $krep39_rccc0];

Text.Printf.$tcPrintfArg2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "PrintfArg"#;

Text.Printf.$tcPrintfArg1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcPrintfArg2];

Text.Printf.$tcPrintfArg :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14684532792197610005##
                                    5760551473172190061##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcPrintfArg1
                                    0#
                                    Text.Printf.$tcHPrintfType1];

$krep41_rccc2 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcPrintfArg
                                              $krep13_rccbA];

$krep42_rccc3 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep31_rccbS $krep41_rccc2];

Text.Printf.$tc'C:PrintfArg1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_rccbJ $krep42_rccc3];

Text.Printf.$tc'C:PrintfArg3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:PrintfArg"#;

Text.Printf.$tc'C:PrintfArg2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'C:PrintfArg3];

Text.Printf.$tc'C:PrintfArg :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11923342243699112506##
                                    8346787778082712340##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'C:PrintfArg2
                                    1#
                                    Text.Printf.$tc'C:PrintfArg1];

Text.Printf.$tcHPrintfType3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HPrintfType"#;

Text.Printf.$tcHPrintfType2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcHPrintfType3];

Text.Printf.$tcHPrintfType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13104883804062546050##
                                    15477829653093370802##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcHPrintfType2
                                    0#
                                    Text.Printf.$tcHPrintfType1];

$krep43_rccc4 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcHPrintfType
                                              $krep13_rccbA];

Text.Printf.$tc'C:HPrintfType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep40_rccc1 $krep43_rccc4];

Text.Printf.$tc'C:HPrintfType3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:HPrintfType"#;

Text.Printf.$tc'C:HPrintfType2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'C:HPrintfType3];

Text.Printf.$tc'C:HPrintfType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16716104921226462095##
                                    4043378586122981700##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'C:HPrintfType2
                                    1#
                                    Text.Printf.$tc'C:HPrintfType1];

Text.Printf.$tcPrintfType2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "PrintfType"#;

Text.Printf.$tcPrintfType1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcPrintfType2];

Text.Printf.$tcPrintfType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16100185319445667829##
                                    10371264040433388740##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcPrintfType1
                                    0#
                                    Text.Printf.$tcHPrintfType1];

$krep44_rccc5 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcPrintfType
                                              $krep13_rccbA];

Text.Printf.$tc'C:PrintfType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep39_rccc0 $krep44_rccc5];

Text.Printf.$tc'C:PrintfType3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:PrintfType"#;

Text.Printf.$tc'C:PrintfType2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'C:PrintfType3];

Text.Printf.$tc'C:PrintfType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6199067271817529220##
                                    10070277982064886839##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'C:PrintfType2
                                    1#
                                    Text.Printf.$tc'C:PrintfType1];

Text.Printf.$fPrintfArgChar24 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hh"#;

Text.Printf.$fPrintfArgChar23 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar24;

sat_scchP :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [128#];

sat_scchQ :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scchP GHC.Types.[]];

Text.Printf.$fPrintfArgChar22 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_scchQ;

Text.Printf.$fPrintfArgChar21
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar23
                        Text.Printf.$fPrintfArgChar22];

Text.Printf.$fPrintfArgChar20 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "h"#;

Text.Printf.$fPrintfArgChar19 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar20;

sat_scchR :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [32768#];

sat_scchS :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scchR GHC.Types.[]];

Text.Printf.$fPrintfArgChar18 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_scchS;

Text.Printf.$fPrintfArgChar17
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar19
                        Text.Printf.$fPrintfArgChar18];

Text.Printf.$fPrintfArgChar16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "l"#;

Text.Printf.$fPrintfArgChar15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar16;

sat_scchU :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_scchV :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scchU GHC.Types.[]];

sat_scchT :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_scchW :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scchT sat_scchV];

Text.Printf.$fPrintfArgChar14 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_scchW;

Text.Printf.$fPrintfArgChar13
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar15
                        Text.Printf.$fPrintfArgChar14];

Text.Printf.$fPrintfArgChar12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ll"#;

Text.Printf.$fPrintfArgChar11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar12;

sat_scchZ :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

sat_scci0 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scchZ GHC.Types.[]];

sat_scchY :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_scci1 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scchY sat_scci0];

sat_scchX :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_scci2 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scchX sat_scci1];

Text.Printf.$fPrintfArgChar7 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_scci2;

Text.Printf.$fPrintfArgChar10
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar11
                        Text.Printf.$fPrintfArgChar7];

Text.Printf.$fPrintfArgChar9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "L"#;

Text.Printf.$fPrintfArgChar8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar9;

Text.Printf.$fPrintfArgChar6
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar8
                        Text.Printf.$fPrintfArgChar7];

Text.Printf.$fPrintfArgChar5
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar6 GHC.Types.[]];

Text.Printf.$fPrintfArgChar4
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar10
                      Text.Printf.$fPrintfArgChar5];

Text.Printf.$fPrintfArgChar3
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar13
                      Text.Printf.$fPrintfArgChar4];

Text.Printf.$fPrintfArgChar2
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar17
                      Text.Printf.$fPrintfArgChar3];

Text.Printf.intModifierMap
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar21
                      Text.Printf.$fPrintfArgChar2];

lvl7_rccc6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: unknown format modifier"#;

Text.Printf.$fPrintfArgInt2
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl7_rccc6 of sat_scci3 {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_scci3;
        };

Text.Printf.$wfixupMods [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.String
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ww_scci4 w_scci5]
        case ww_scci4 of wild_scci6 {
          [] -> w_scci5;
          : _ [Occ=Dead] _ [Occ=Dead] ->
              case
                  GHC.List.lookup
                      GHC.Classes.$fEq[]_$s$fEq[]1 wild_scci6 Text.Printf.intModifierMap
              of
              wild1_scci9
              { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                GHC.Base.Just _ [Occ=Dead] -> wild1_scci9;
              };
        };

Text.Printf.fixupMods [InlPrag=NOUSERINLINE[0]]
  :: Text.Printf.FieldFormat
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Str=<S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)><L,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccib w1_sccic]
        case w_sccib of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ww6_sccij [Occ=Once]
                                  _ [Occ=Dead] ->
              Text.Printf.$wfixupMods ww6_sccij w1_sccic;
        };

Text.Printf.$wparseIntFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Base.String -> Text.Printf.FormatParse
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_sccil]
        let {
          go_sccim [Occ=LoopBreaker]
            :: [([GHC.Types.Char], GHC.Integer.Type.Integer)]
               -> GHC.Base.Maybe Text.Printf.FormatParse
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [w_sccil go_sccim] \r [ds_sccin]
                  case ds_sccin of {
                    [] -> GHC.Base.Nothing [];
                    : y_sccip [Occ=Once!] ys_scciq [Occ=Once] ->
                        case y_sccip of {
                          (,) p_sccis _ [Occ=Dead] ->
                              case go_sccim ys_scciq of wild2_scciu {
                                GHC.Base.Nothing ->
                                    case
                                        Data.OldList.stripPrefix
                                            GHC.Classes.$fEqChar p_sccis w_sccil
                                    of
                                    { GHC.Base.Nothing -> GHC.Base.Nothing [];
                                      GHC.Base.Just x_scciw [Occ=Once!] ->
                                          case x_scciw of {
                                            [] -> Text.Printf.errorShortFormat;
                                            : c_scciy [Occ=Once] cs_scciz [Occ=Once] ->
                                                let {
                                                  sat_scciA [Occ=Once] :: Text.Printf.FormatParse
                                                  [LclId] =
                                                      CCCS Text.Printf.FormatParse! [p_sccis
                                                                                     c_scciy
                                                                                     cs_scciz];
                                                } in  GHC.Base.Just [sat_scciA];
                                          };
                                    };
                                GHC.Base.Just ds2_scciB [Occ=Once!] ->
                                    case ds2_scciB of {
                                      Text.Printf.FormatParse p0_scciD [Occ=Once]
                                                              _ [Occ=Dead]
                                                              _ [Occ=Dead] ->
                                          case GHC.List.$wlenAcc p0_scciD 0# of ww2_scciG {
                                            __DEFAULT ->
                                                case GHC.List.$wlenAcc p_sccis 0# of ww1_scciH {
                                                  __DEFAULT ->
                                                      case >=# [ww2_scciG ww1_scciH] of {
                                                        __DEFAULT ->
                                                            case
                                                                Data.OldList.stripPrefix
                                                                    GHC.Classes.$fEqChar
                                                                    p_sccis
                                                                    w_sccil
                                                            of
                                                            { GHC.Base.Nothing -> wild2_scciu;
                                                              GHC.Base.Just x_scciK [Occ=Once!] ->
                                                                  case x_scciK of {
                                                                    [] ->
                                                                        Text.Printf.errorShortFormat;
                                                                    : c_scciN [Occ=Once]
                                                                      cs_scciO [Occ=Once] ->
                                                                        let {
                                                                          sat_scciP [Occ=Once]
                                                                            :: Text.Printf.FormatParse
                                                                          [LclId] =
                                                                              CCCS Text.Printf.FormatParse! [p_sccis
                                                                                                             c_scciN
                                                                                                             cs_scciO];
                                                                        } in 
                                                                          GHC.Base.Just [sat_scciP];
                                                                  };
                                                            };
                                                        1# -> wild2_scciu;
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          case go_sccim Text.Printf.intModifierMap of {
            GHC.Base.Nothing ->
                case w_sccil of {
                  [] -> Text.Printf.errorShortFormat;
                  : c_scciS [Occ=Once] cs_scciT [Occ=Once] ->
                      Text.Printf.FormatParse [GHC.Types.[] c_scciS cs_scciT];
                };
            GHC.Base.Just m_scciU [Occ=Once] -> m_scciU;
          };

Text.Printf.parseIntFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. a -> GHC.Base.String -> Text.Printf.FormatParse
[GblId, Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
    [] \r [w_scciV w1_scciW] Text.Printf.$wparseIntFormat w1_scciW;

lvl8_rccc7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "undefined"#;

lvl9_rccc8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl8_rccc7;

lvl10_rccc9 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$trModule4;

lvl11_rccca :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$trModule2;

lvl12_rcccb :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./Text/Printf.hs"#;

lvl13_rcccc :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl12_rcccb;

lvl14_rcccd :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [323#];

lvl15_rccce :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [40#];

lvl16_rcccf :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [49#];

lvl17_rcccg :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl10_rccc9
                                           lvl11_rccca
                                           lvl13_rcccc
                                           lvl14_rcccd
                                           lvl15_rccce
                                           lvl14_rcccd
                                           lvl16_rcccf];

lvl18_rccch :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl9_rccc8
                                                  lvl17_rcccg
                                                  GHC.Stack.Types.EmptyCallStack];

Text.Printf.$fPrintfArgChar1 :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl18_rccch;

Text.Printf.$fPrintfArgChar_$cparseFormat
  :: GHC.Types.Char -> Text.Printf.ModifierParser
[GblId, Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
    [] \r [ds_scciX cf_scciY] Text.Printf.$wparseIntFormat cf_scciY;

Text.Printf.$fPrintfArgDouble5 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['0'#];

integral_prec_rc8qj
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_scciZ integral_sccj0]
        case ds_scciZ of {
          GHC.Base.Nothing -> integral_sccj0;
          GHC.Base.Just ds1_sccj2 [Occ=Once!] ->
              case ds1_sccj2 of {
                GHC.Types.I# ds2_sccj4 ->
                    let-no-escape {
                      fail_sccj5 [Occ=Once*!T[1], Dmd=<L,1*C1(U)>]
                        :: GHC.Prim.Void# -> GHC.Base.String
                      [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                          sat-only [integral_sccj0 ds2_sccj4] \r [ds3_sccj6]
                              case GHC.List.$wlenAcc integral_sccj0 0# of ww2_sccj7 {
                                __DEFAULT ->
                                    case -# [ds2_sccj4 ww2_sccj7] of y_sccj8 [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          case <# [0# y_sccj8] of {
                                            __DEFAULT -> integral_sccj0;
                                            1# ->
                                                let {
                                                  lvl55_sccja [Occ=OnceL] :: [GHC.Types.Char]
                                                  [LclId, Unf=OtherCon []] =
                                                      CCCS :! [Text.Printf.$fPrintfArgDouble5
                                                               integral_sccj0]; } in
                                                let {
                                                  $wxs_sccjb [InlPrag=NOUSERINLINE[0],
                                                              Occ=LoopBreaker]
                                                    :: GHC.Prim.Int# -> [GHC.Types.Char]
                                                  [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                                      sat-only [lvl55_sccja
                                                                $wxs_sccjb] \r [ww_sccjc]
                                                          case ww_sccjc of ds4_sccjd {
                                                            __DEFAULT ->
                                                                let {
                                                                  sat_sccjf [Occ=Once]
                                                                    :: [GHC.Types.Char]
                                                                  [LclId] =
                                                                      [$wxs_sccjb ds4_sccjd] \u []
                                                                          case
                                                                              -# [ds4_sccjd 1#]
                                                                          of
                                                                          sat_sccje
                                                                          { __DEFAULT ->
                                                                                $wxs_sccjb
                                                                                    sat_sccje;
                                                                          };
                                                                } in 
                                                                  : [Text.Printf.$fPrintfArgDouble5
                                                                     sat_sccjf];
                                                            1# -> lvl55_sccja;
                                                          };
                                                } in  $wxs_sccjb y_sccj8;
                                          };
                                    };
                              };
                    } in 
                      case ds2_sccj4 of {
                        __DEFAULT -> fail_sccj5 GHC.Prim.void#;
                        0# ->
                            case integral_sccj0 of {
                              [] -> fail_sccj5 GHC.Prim.void#;
                              : ds4_sccji [Occ=Once!] ds5_sccjj [Occ=Once!] ->
                                  case ds4_sccji of {
                                    GHC.Types.C# ds6_sccjl [Occ=Once!] ->
                                        case ds6_sccjl of {
                                          __DEFAULT -> fail_sccj5 GHC.Prim.void#;
                                          '0'# ->
                                              case ds5_sccjj of {
                                                [] -> [] [];
                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                    fail_sccj5 GHC.Prim.void#;
                                              };
                                        };
                                  };
                            };
                      };
              };
        };

lvl19_rccci :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Text/Printf.hs:714:7-39|(\"\", s)"#;

lvl20_rcccj :: (GHC.Base.String)
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.patError lvl19_rccci;

Text.Printf.formatChar2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

sat_sccjq :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

sat_sccjr :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sccjq GHC.Types.[]];

lvl21_rccck :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sccjr;

$wfmtu_rcccl
  :: GHC.Integer.Type.Integer
     -> GHC.Base.Maybe GHC.Base.String
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId,
 Arity=5,
 Str=<L,U><S,1*U><L,1*U><L,1*U><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [w_sccjs w1_sccjt w2_sccju w3_sccjv w4_sccjw]
        case w1_sccjt of {
          GHC.Base.Nothing ->
              let {
                fmtu'_sccjy [Occ=LoopBreaker]
                  :: GHC.Base.Maybe GHC.Types.Int
                     -> GHC.Base.Maybe GHC.Integer.Type.Integer
                     -> GHC.Integer.Type.Integer
                     -> GHC.Base.Maybe GHC.Base.String
                [LclId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
                    sat-only [w_sccjs fmtu'_sccjy] \r [prec_sccjz ds_sccjA i_sccjB]
                        let-no-escape {
                          fail_sccjC [Occ=Once*!T[1], Dmd=<L,1*C1(U)>]
                            :: GHC.Prim.Void# -> GHC.Base.Maybe GHC.Base.String
                          [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                              sat-only [w_sccjs fmtu'_sccjy prec_sccjz i_sccjB] \r [ds1_sccjD]
                                  case prec_sccjz of wild1_sccjE {
                                    GHC.Base.Nothing ->
                                        case
                                            GHC.Integer.Type.geInteger#
                                                i_sccjB Text.Printf.formatChar2
                                        of
                                        { __DEFAULT -> GHC.Base.Nothing [];
                                          1# ->
                                              let {
                                                sat_sccjG [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    [w_sccjs i_sccjB] \u []
                                                        Numeric.showIntAtBase
                                                            GHC.Real.$fIntegralInteger
                                                            GHC.Show.$fShowInteger
                                                            w_sccjs
                                                            GHC.Show.intToDigit
                                                            i_sccjB
                                                            GHC.Types.[];
                                              } in  GHC.Base.Just [sat_sccjG];
                                        };
                                    GHC.Base.Just _ [Occ=Dead] ->
                                        case
                                            GHC.Integer.Type.geInteger#
                                                i_sccjB Text.Printf.formatChar2
                                        of
                                        { __DEFAULT -> GHC.Base.Nothing [];
                                          1# ->
                                              case
                                                  fmtu'_sccjy
                                                      GHC.Base.Nothing GHC.Base.Nothing i_sccjB
                                              of
                                              { GHC.Base.Nothing -> GHC.Base.Nothing [];
                                                GHC.Base.Just a1_sccjK [Occ=Once] ->
                                                    let {
                                                      sat_sccjL [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [wild1_sccjE a1_sccjK] \u []
                                                              integral_prec_rc8qj
                                                                  wild1_sccjE a1_sccjK;
                                                    } in  GHC.Base.Just [sat_sccjL];
                                              };
                                        };
                                  };
                        } in 
                          case ds_sccjA of {
                            GHC.Base.Nothing -> fail_sccjC GHC.Prim.void#;
                            GHC.Base.Just m_sccjN [Occ=Once] ->
                                case
                                    GHC.Integer.Type.ltInteger# i_sccjB Text.Printf.formatChar2
                                of
                                { __DEFAULT -> fail_sccjC GHC.Prim.void#;
                                  1# ->
                                      case
                                          GHC.Integer.Type.timesInteger lvl21_rccck m_sccjN
                                      of
                                      sat_sccjP
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.negateInteger sat_sccjP
                                            of
                                            sat_sccjQ
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.plusInteger sat_sccjQ i_sccjB
                                                  of
                                                  sat_sccjR
                                                  { __DEFAULT ->
                                                        fmtu'_sccjy
                                                            prec_sccjz GHC.Base.Nothing sat_sccjR;
                                                  };
                                            };
                                      };
                                };
                          };
              } in 
                case fmtu'_sccjy w2_sccju w3_sccjv w4_sccjw of {
                  GHC.Base.Nothing -> Text.Printf.errorBadArgument;
                  GHC.Base.Just s_sccjU [Occ=Once] -> (#,#) [GHC.Types.[] s_sccjU];
                };
          GHC.Base.Just pre_sccjV [Occ=Once!] ->
              let {
                s_sccjW [Occ=Once*] :: GHC.Base.String
                [LclId] =
                    [w_sccjs w2_sccju w3_sccjv w4_sccjw] \u []
                        case
                            $wfmtu_rcccl w_sccjs GHC.Base.Nothing w2_sccju w3_sccjv w4_sccjw
                        of
                        { (#,#) ww1_sccjY [Occ=Once!] ww2_sccjZ [Occ=Once] ->
                              case ww1_sccjY of {
                                [] -> ww2_sccjZ;
                                : _ [Occ=Dead] _ [Occ=Dead] -> lvl20_rcccj;
                              };
                        };
              } in 
                case pre_sccjV of wild1_scck4 {
                  [] -> (#,#) [GHC.Types.[] s_sccjW];
                  : ds_scck5 [Occ=Once!] ds1_scck6 [Occ=Once!] ->
                      case ds_scck5 of {
                        GHC.Types.C# ds2_scck8 [Occ=Once!] ->
                            case ds2_scck8 of {
                              __DEFAULT -> (#,#) [wild1_scck4 s_sccjW];
                              '0'# ->
                                  case ds1_scck6 of {
                                    [] ->
                                        case s_sccjW of wild4_scckb {
                                          [] -> (#,#) [wild1_scck4 GHC.Types.[]];
                                          : ds4_scckc [Occ=Once!] _ [Occ=Dead] ->
                                              case ds4_scckc of {
                                                GHC.Types.C# ds6_scckf [Occ=Once!] ->
                                                    case ds6_scckf of {
                                                      __DEFAULT -> (#,#) [wild1_scck4 wild4_scckb];
                                                      '0'# -> (#,#) [GHC.Types.[] wild4_scckb];
                                                    };
                                              };
                                        };
                                    : _ [Occ=Dead] _ [Occ=Dead] -> (#,#) [wild1_scck4 s_sccjW];
                                  };
                            };
                      };
                };
        };

$wfmti_rcccm
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Integer.Type.Integer
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    sat-only [] \r [w_scckj w1_scckk]
        case
            GHC.Integer.Type.ltInteger# w1_scckk Text.Printf.formatChar2
        of
        { __DEFAULT ->
              let {
                sat_scckq [Occ=Once] :: GHC.Base.String
                [LclId] =
                    [w_scckj w1_scckk] \u []
                        case GHC.Show.$w$cshowsPrec4 0# w1_scckk GHC.Types.[] of {
                          (#,#) ww3_scckn [Occ=Once] ww4_sccko [Occ=Once] ->
                              let {
                                sat_scckp [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    CCCS :! [ww3_scckn ww4_sccko];
                              } in  integral_prec_rc8qj w_scckj sat_scckp;
                        };
              } in  (#,#) [GHC.Types.[] sat_scckq];
          1# ->
              let {
                sat_scckw [Occ=Once] :: GHC.Base.String
                [LclId] =
                    [w_scckj w1_scckk] \u []
                        case GHC.Integer.Type.negateInteger w1_scckk of sat_scckr {
                          __DEFAULT ->
                              case GHC.Show.$w$cshowsPrec4 0# sat_scckr GHC.Types.[] of {
                                (#,#) ww3_scckt [Occ=Once] ww4_sccku [Occ=Once] ->
                                    let {
                                      sat_scckv [Occ=Once] :: GHC.Base.String
                                      [LclId] =
                                          CCCS :! [ww3_scckt ww4_sccku];
                                    } in  integral_prec_rc8qj w_scckj sat_scckv;
                              };
                        };
              } in  (#,#) [Text.Printf.$fPrintfArgDouble8 sat_scckw];
        };

Text.Printf.$fPrintfArgDouble6 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [' '#];

Text.Printf.$wadjust [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Base.String
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U><S,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_scckx ww1_sccky ww2_scckz ww3_scckA]
        let {
          fill_scckB [Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [ww_scckx ww1_sccky ww2_scckz ww3_scckA] \s []
                  case ww_scckx of {
                    GHC.Base.Nothing -> [] [];
                    GHC.Base.Just width_scckD [Occ=Once!] ->
                        case GHC.List.$wlenAcc ww2_scckz 0# of ww4_scckE {
                          __DEFAULT ->
                              case GHC.List.$wlenAcc ww3_scckA 0# of ww5_scckF {
                                __DEFAULT ->
                                    case width_scckD of {
                                      GHC.Types.I# y_scckH ->
                                          case +# [ww4_scckE ww5_scckF] of x_scckI [Dmd=<S,U>] {
                                            __DEFAULT ->
                                                case <# [x_scckI y_scckH] of {
                                                  __DEFAULT -> [] [];
                                                  1# ->
                                                      case
                                                          -# [y_scckH x_scckI]
                                                      of
                                                      n_scckK [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            case <# [0# n_scckK] of {
                                                              __DEFAULT -> [] [];
                                                              1# ->
                                                                  let {
                                                                    x1_scckM :: GHC.Types.Char
                                                                    [LclId] =
                                                                        [ww1_sccky] \u []
                                                                            case ww1_sccky of {
                                                                              GHC.Base.Nothing ->
                                                                                  Text.Printf.$fPrintfArgDouble6;
                                                                              GHC.Base.Just ds_scckO [Occ=Once!] ->
                                                                                  case ds_scckO of {
                                                                                    Text.Printf.LeftAdjust ->
                                                                                        Text.Printf.$fPrintfArgDouble6;
                                                                                    Text.Printf.ZeroPad ->
                                                                                        Text.Printf.$fPrintfArgDouble5;
                                                                                  };
                                                                            }; } in
                                                                  let {
                                                                    lvl55_scckQ [Occ=OnceL]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId, Unf=OtherCon []] =
                                                                        CCCS :! [x1_scckM
                                                                                 GHC.Types.[]]; } in
                                                                  let {
                                                                    $wxs_scckR [InlPrag=NOUSERINLINE[0],
                                                                                Occ=LoopBreaker]
                                                                      :: GHC.Prim.Int#
                                                                         -> [GHC.Types.Char]
                                                                    [LclId,
                                                                     Arity=1,
                                                                     Str=<S,1*U>,
                                                                     Unf=OtherCon []] =
                                                                        sat-only [x1_scckM
                                                                                  lvl55_scckQ
                                                                                  $wxs_scckR] \r [ww6_scckS]
                                                                            case
                                                                                ww6_scckS
                                                                            of
                                                                            ds1_scckT
                                                                            { __DEFAULT ->
                                                                                  let {
                                                                                    sat_scckV [Occ=Once]
                                                                                      :: [GHC.Types.Char]
                                                                                    [LclId] =
                                                                                        [$wxs_scckR
                                                                                         ds1_scckT] \u []
                                                                                            case
                                                                                                -# [ds1_scckT
                                                                                                    1#]
                                                                                            of
                                                                                            sat_scckU
                                                                                            { __DEFAULT ->
                                                                                                  $wxs_scckR
                                                                                                      sat_scckU;
                                                                                            };
                                                                                  } in 
                                                                                    : [x1_scckM
                                                                                       sat_scckV];
                                                                              1# -> lvl55_scckQ;
                                                                            };
                                                                  } in  $wxs_scckR n_scckK;
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          let-no-escape {
            $j_scckW [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Base.String
            [LclId[JoinId(0)], Unf=OtherCon []] =
                [ww1_sccky ww2_scckz ww3_scckA fill_scckB] \r []
                    case ww1_sccky of {
                      GHC.Base.Nothing ->
                          let {
                            sat_scckY [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                            [LclId] =
                                [ww2_scckz ww3_scckA] \s [] GHC.Base.++ ww2_scckz ww3_scckA;
                          } in  GHC.Base.++ fill_scckB sat_scckY;
                      GHC.Base.Just ds_scckZ [Occ=Once!] ->
                          case ds_scckZ of {
                            Text.Printf.LeftAdjust ->
                                let {
                                  sat_sccl1 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [ww2_scckz ww3_scckA] \s [] GHC.Base.++ ww2_scckz ww3_scckA;
                                } in  GHC.Base.++ fill_scckB sat_sccl1;
                            Text.Printf.ZeroPad ->
                                let {
                                  sat_sccl2 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [ww3_scckA fill_scckB] \s [] GHC.Base.++ fill_scckB ww3_scckA;
                                } in  GHC.Base.++ ww2_scckz sat_sccl2;
                          };
                    };
          } in 
            case ww1_sccky of {
              GHC.Base.Nothing -> $j_scckW;
              GHC.Base.Just ds_sccl4 [Occ=Once!] ->
                  case ds_sccl4 of {
                    Text.Printf.LeftAdjust ->
                        let {
                          sat_sccl6 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [ww3_scckA fill_scckB] \s [] GHC.Base.++ ww3_scckA fill_scckB;
                        } in  GHC.Base.++ ww2_scckz sat_sccl6;
                    Text.Printf.ZeroPad -> $j_scckW;
                  };
            };

Text.Printf.$fPrintfArgDouble4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "+"#;

Text.Printf.$fPrintfArgDouble3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgDouble4;

Text.Printf.$fPrintfArgDouble2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " "#;

Text.Printf.$fPrintfArgDouble1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgDouble2;

Text.Printf.$wadjustSigned [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Base.String
[GblId,
 Arity=5,
 Str=<L,1*U><S,U><S,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sccl7 ww1_sccl8 ww2_sccl9 ww3_sccla ww4_scclb]
        case ww2_sccl9 of {
          GHC.Base.Nothing ->
              Text.Printf.$wadjust ww_sccl7 ww1_sccl8 ww3_sccla ww4_scclb;
          GHC.Base.Just ds_sccld [Occ=Once!] ->
              case ds_sccld of {
                Text.Printf.SignPlus ->
                    case ww3_sccla of wild2_scclf {
                      [] ->
                          Text.Printf.$wadjust
                              ww_sccl7 ww1_sccl8 Text.Printf.$fPrintfArgDouble3 ww4_scclb;
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          Text.Printf.$wadjust ww_sccl7 ww1_sccl8 wild2_scclf ww4_scclb;
                    };
                Text.Printf.SignSpace ->
                    case ww3_sccla of wild2_sccli {
                      [] ->
                          Text.Printf.$wadjust
                              ww_sccl7 ww1_sccl8 Text.Printf.$fPrintfArgDouble1 ww4_scclb;
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          Text.Printf.$wadjust ww_sccl7 ww1_sccl8 wild2_sccli ww4_scclb;
                    };
              };
        };

Text.Printf.$w$sformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Double
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=7,
 Str=<L,1*U(U)><L,1*U><L,U><L,U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccll
           ww_scclm
           ww1_sccln
           ww2_scclo
           ww3_scclp
           ww4_scclq
           ww5_scclr]
        case ww5_scclr of ds_sccls {
          __DEFAULT -> Text.Printf.$werrorBadFormat ds_sccls;
          'E'# ->
              let {
                sat_scclw [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccll ww_scclm ww1_sccln ww2_scclo ww3_scclp ww4_scclq] \u []
                        case Text.Printf.$w$sdfmt 'E'# ww1_sccln ww4_scclq w_sccll of {
                          (#,#) ww7_scclu [Occ=Once] ww8_scclv [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_scclm ww2_scclo ww3_scclp ww7_scclu ww8_scclv;
                        };
              } in  GHC.Base.++ sat_scclw;
          'F'# ->
              let {
                sat_scclA [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccll ww_scclm ww1_sccln ww2_scclo ww3_scclp ww4_scclq] \u []
                        case Text.Printf.$w$sdfmt 'F'# ww1_sccln ww4_scclq w_sccll of {
                          (#,#) ww7_sccly [Occ=Once] ww8_scclz [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_scclm ww2_scclo ww3_scclp ww7_sccly ww8_scclz;
                        };
              } in  GHC.Base.++ sat_scclA;
          'G'# ->
              let {
                sat_scclE [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccll ww_scclm ww1_sccln ww2_scclo ww3_scclp ww4_scclq] \u []
                        case Text.Printf.$w$sdfmt 'G'# ww1_sccln ww4_scclq w_sccll of {
                          (#,#) ww7_scclC [Occ=Once] ww8_scclD [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_scclm ww2_scclo ww3_scclp ww7_scclC ww8_scclD;
                        };
              } in  GHC.Base.++ sat_scclE;
          'e'# ->
              let {
                sat_scclI [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccll ww_scclm ww1_sccln ww2_scclo ww3_scclp ww4_scclq] \u []
                        case Text.Printf.$w$sdfmt 'e'# ww1_sccln ww4_scclq w_sccll of {
                          (#,#) ww7_scclG [Occ=Once] ww8_scclH [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_scclm ww2_scclo ww3_scclp ww7_scclG ww8_scclH;
                        };
              } in  GHC.Base.++ sat_scclI;
          'f'# ->
              let {
                sat_scclM [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccll ww_scclm ww1_sccln ww2_scclo ww3_scclp ww4_scclq] \u []
                        case Text.Printf.$w$sdfmt 'f'# ww1_sccln ww4_scclq w_sccll of {
                          (#,#) ww7_scclK [Occ=Once] ww8_scclL [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_scclm ww2_scclo ww3_scclp ww7_scclK ww8_scclL;
                        };
              } in  GHC.Base.++ sat_scclM;
          'g'# ->
              let {
                sat_scclQ [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccll ww_scclm ww1_sccln ww2_scclo ww3_scclp ww4_scclq] \u []
                        case Text.Printf.$w$sdfmt 'g'# ww1_sccln ww4_scclq w_sccll of {
                          (#,#) ww7_scclO [Occ=Once] ww8_scclP [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_scclm ww2_scclo ww3_scclp ww7_scclO ww8_scclP;
                        };
              } in  GHC.Base.++ sat_scclQ;
          'v'# ->
              let {
                sat_scclU [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccll ww_scclm ww1_sccln ww2_scclo ww3_scclp ww4_scclq] \u []
                        case Text.Printf.$w$sdfmt 'g'# ww1_sccln ww4_scclq w_sccll of {
                          (#,#) ww7_scclS [Occ=Once] ww8_scclT [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_scclm ww2_scclo ww3_scclp ww7_scclS ww8_scclT;
                        };
              } in  GHC.Base.++ sat_scclU;
        };

Text.Printf.$fPrintfArgDouble_$sformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Double -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LLLLLLS(S)),1*U(1*U,U,U,1*U,1*U,A,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_scclV w1_scclW]
        case w1_scclW of {
          Text.Printf.FieldFormat ww1_scclY [Occ=Once]
                                  ww2_scclZ [Occ=Once]
                                  ww3_sccm0 [Occ=Once]
                                  ww4_sccm1 [Occ=Once]
                                  ww5_sccm2 [Occ=Once]
                                  _ [Occ=Dead]
                                  ww7_sccm4 [Occ=Once!] ->
              case ww7_sccm4 of {
                GHC.Types.C# ww9_sccm6 [Occ=Once] ->
                    Text.Printf.$w$sformatRealFloat
                        w_scclV
                        ww1_scclY
                        ww2_scclZ
                        ww3_sccm0
                        ww4_sccm1
                        ww5_sccm2
                        ww9_sccm6;
              };
        };

Text.Printf.$w$sformatRealFloat1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Float
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=7,
 Str=<L,1*U(U)><L,1*U><L,U><L,U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccm7
           ww_sccm8
           ww1_sccm9
           ww2_sccma
           ww3_sccmb
           ww4_sccmc
           ww5_sccmd]
        case ww5_sccmd of ds_sccme {
          __DEFAULT -> Text.Printf.$werrorBadFormat ds_sccme;
          'E'# ->
              let {
                sat_sccmi [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccm7 ww_sccm8 ww1_sccm9 ww2_sccma ww3_sccmb ww4_sccmc] \u []
                        case Text.Printf.$w$sdfmt1 'E'# ww1_sccm9 ww4_sccmc w_sccm7 of {
                          (#,#) ww7_sccmg [Occ=Once] ww8_sccmh [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccm8 ww2_sccma ww3_sccmb ww7_sccmg ww8_sccmh;
                        };
              } in  GHC.Base.++ sat_sccmi;
          'F'# ->
              let {
                sat_sccmm [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccm7 ww_sccm8 ww1_sccm9 ww2_sccma ww3_sccmb ww4_sccmc] \u []
                        case Text.Printf.$w$sdfmt1 'F'# ww1_sccm9 ww4_sccmc w_sccm7 of {
                          (#,#) ww7_sccmk [Occ=Once] ww8_sccml [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccm8 ww2_sccma ww3_sccmb ww7_sccmk ww8_sccml;
                        };
              } in  GHC.Base.++ sat_sccmm;
          'G'# ->
              let {
                sat_sccmq [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccm7 ww_sccm8 ww1_sccm9 ww2_sccma ww3_sccmb ww4_sccmc] \u []
                        case Text.Printf.$w$sdfmt1 'G'# ww1_sccm9 ww4_sccmc w_sccm7 of {
                          (#,#) ww7_sccmo [Occ=Once] ww8_sccmp [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccm8 ww2_sccma ww3_sccmb ww7_sccmo ww8_sccmp;
                        };
              } in  GHC.Base.++ sat_sccmq;
          'e'# ->
              let {
                sat_sccmu [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccm7 ww_sccm8 ww1_sccm9 ww2_sccma ww3_sccmb ww4_sccmc] \u []
                        case Text.Printf.$w$sdfmt1 'e'# ww1_sccm9 ww4_sccmc w_sccm7 of {
                          (#,#) ww7_sccms [Occ=Once] ww8_sccmt [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccm8 ww2_sccma ww3_sccmb ww7_sccms ww8_sccmt;
                        };
              } in  GHC.Base.++ sat_sccmu;
          'f'# ->
              let {
                sat_sccmy [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccm7 ww_sccm8 ww1_sccm9 ww2_sccma ww3_sccmb ww4_sccmc] \u []
                        case Text.Printf.$w$sdfmt1 'f'# ww1_sccm9 ww4_sccmc w_sccm7 of {
                          (#,#) ww7_sccmw [Occ=Once] ww8_sccmx [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccm8 ww2_sccma ww3_sccmb ww7_sccmw ww8_sccmx;
                        };
              } in  GHC.Base.++ sat_sccmy;
          'g'# ->
              let {
                sat_sccmC [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccm7 ww_sccm8 ww1_sccm9 ww2_sccma ww3_sccmb ww4_sccmc] \u []
                        case Text.Printf.$w$sdfmt1 'g'# ww1_sccm9 ww4_sccmc w_sccm7 of {
                          (#,#) ww7_sccmA [Occ=Once] ww8_sccmB [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccm8 ww2_sccma ww3_sccmb ww7_sccmA ww8_sccmB;
                        };
              } in  GHC.Base.++ sat_sccmC;
          'v'# ->
              let {
                sat_sccmG [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccm7 ww_sccm8 ww1_sccm9 ww2_sccma ww3_sccmb ww4_sccmc] \u []
                        case Text.Printf.$w$sdfmt1 'g'# ww1_sccm9 ww4_sccmc w_sccm7 of {
                          (#,#) ww7_sccmE [Occ=Once] ww8_sccmF [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccm8 ww2_sccma ww3_sccmb ww7_sccmE ww8_sccmF;
                        };
              } in  GHC.Base.++ sat_sccmG;
        };

Text.Printf.$fPrintfArgFloat_$sformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Float -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LLLLLLS(S)),1*U(1*U,U,U,1*U,1*U,A,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccmH w1_sccmI]
        case w1_sccmI of {
          Text.Printf.FieldFormat ww1_sccmK [Occ=Once]
                                  ww2_sccmL [Occ=Once]
                                  ww3_sccmM [Occ=Once]
                                  ww4_sccmN [Occ=Once]
                                  ww5_sccmO [Occ=Once]
                                  _ [Occ=Dead]
                                  ww7_sccmQ [Occ=Once!] ->
              case ww7_sccmQ of {
                GHC.Types.C# ww9_sccmS [Occ=Once] ->
                    Text.Printf.$w$sformatRealFloat1
                        w_sccmH
                        ww1_sccmK
                        ww2_sccmL
                        ww3_sccmM
                        ww4_sccmN
                        ww5_sccmO
                        ww9_sccmS;
              };
        };

Text.Printf.$wformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Float.RealFloat a =>
     a
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,U(U(U(U(A,A,A,C(U),A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,A,A,A,A,A),A,C(U),C(U(U)),C(U(1*U(U),A)),C(U(U,U(U))),A,A,A,A,C(U),C(U),A,C(U),A,A)><L,U><L,1*U><L,U><L,U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccmT
           w1_sccmU
           ww_sccmV
           ww1_sccmW
           ww2_sccmX
           ww3_sccmY
           ww4_sccmZ
           ww5_sccn0]
        case ww5_sccn0 of ds_sccn1 {
          __DEFAULT -> Text.Printf.$werrorBadFormat ds_sccn1;
          'E'# ->
              let {
                sat_sccn5 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccmT
                     w1_sccmU
                     ww_sccmV
                     ww1_sccmW
                     ww2_sccmX
                     ww3_sccmY
                     ww4_sccmZ] \u []
                        case
                            Text.Printf.$wdfmt w_sccmT 'E'# ww1_sccmW ww4_sccmZ w1_sccmU
                        of
                        { (#,#) ww7_sccn3 [Occ=Once] ww8_sccn4 [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccmV ww2_sccmX ww3_sccmY ww7_sccn3 ww8_sccn4;
                        };
              } in  GHC.Base.++ sat_sccn5;
          'F'# ->
              let {
                sat_sccn9 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccmT
                     w1_sccmU
                     ww_sccmV
                     ww1_sccmW
                     ww2_sccmX
                     ww3_sccmY
                     ww4_sccmZ] \u []
                        case
                            Text.Printf.$wdfmt w_sccmT 'F'# ww1_sccmW ww4_sccmZ w1_sccmU
                        of
                        { (#,#) ww7_sccn7 [Occ=Once] ww8_sccn8 [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccmV ww2_sccmX ww3_sccmY ww7_sccn7 ww8_sccn8;
                        };
              } in  GHC.Base.++ sat_sccn9;
          'G'# ->
              let {
                sat_sccnd [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccmT
                     w1_sccmU
                     ww_sccmV
                     ww1_sccmW
                     ww2_sccmX
                     ww3_sccmY
                     ww4_sccmZ] \u []
                        case
                            Text.Printf.$wdfmt w_sccmT 'G'# ww1_sccmW ww4_sccmZ w1_sccmU
                        of
                        { (#,#) ww7_sccnb [Occ=Once] ww8_sccnc [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccmV ww2_sccmX ww3_sccmY ww7_sccnb ww8_sccnc;
                        };
              } in  GHC.Base.++ sat_sccnd;
          'e'# ->
              let {
                sat_sccnh [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccmT
                     w1_sccmU
                     ww_sccmV
                     ww1_sccmW
                     ww2_sccmX
                     ww3_sccmY
                     ww4_sccmZ] \u []
                        case
                            Text.Printf.$wdfmt w_sccmT 'e'# ww1_sccmW ww4_sccmZ w1_sccmU
                        of
                        { (#,#) ww7_sccnf [Occ=Once] ww8_sccng [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccmV ww2_sccmX ww3_sccmY ww7_sccnf ww8_sccng;
                        };
              } in  GHC.Base.++ sat_sccnh;
          'f'# ->
              let {
                sat_sccnl [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccmT
                     w1_sccmU
                     ww_sccmV
                     ww1_sccmW
                     ww2_sccmX
                     ww3_sccmY
                     ww4_sccmZ] \u []
                        case
                            Text.Printf.$wdfmt w_sccmT 'f'# ww1_sccmW ww4_sccmZ w1_sccmU
                        of
                        { (#,#) ww7_sccnj [Occ=Once] ww8_sccnk [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccmV ww2_sccmX ww3_sccmY ww7_sccnj ww8_sccnk;
                        };
              } in  GHC.Base.++ sat_sccnl;
          'g'# ->
              let {
                sat_sccnp [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccmT
                     w1_sccmU
                     ww_sccmV
                     ww1_sccmW
                     ww2_sccmX
                     ww3_sccmY
                     ww4_sccmZ] \u []
                        case
                            Text.Printf.$wdfmt w_sccmT 'g'# ww1_sccmW ww4_sccmZ w1_sccmU
                        of
                        { (#,#) ww7_sccnn [Occ=Once] ww8_sccno [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccmV ww2_sccmX ww3_sccmY ww7_sccnn ww8_sccno;
                        };
              } in  GHC.Base.++ sat_sccnp;
          'v'# ->
              let {
                sat_sccnt [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccmT
                     w1_sccmU
                     ww_sccmV
                     ww1_sccmW
                     ww2_sccmX
                     ww3_sccmY
                     ww4_sccmZ] \u []
                        case
                            Text.Printf.$wdfmt w_sccmT 'g'# ww1_sccmW ww4_sccmZ w1_sccmU
                        of
                        { (#,#) ww7_sccnr [Occ=Once] ww8_sccns [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccmV ww2_sccmX ww3_sccmY ww7_sccnr ww8_sccns;
                        };
              } in  GHC.Base.++ sat_sccnt;
        };

Text.Printf.formatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Float.RealFloat a =>
     a -> Text.Printf.FieldFormatter
[GblId,
 Arity=3,
 Str=<L,U(U(U(U(A,A,A,C(U),A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,A,A,A,A,A),A,C(U),C(U(U)),C(U(1*U(U),A)),C(U(U,U(U))),A,A,A,A,C(U),C(U),A,C(U),A,A)><L,U><S(LLLLLLS(S)),1*U(1*U,U,U,1*U,1*U,A,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccnu w1_sccnv w2_sccnw]
        case w2_sccnw of {
          Text.Printf.FieldFormat ww1_sccny [Occ=Once]
                                  ww2_sccnz [Occ=Once]
                                  ww3_sccnA [Occ=Once]
                                  ww4_sccnB [Occ=Once]
                                  ww5_sccnC [Occ=Once]
                                  _ [Occ=Dead]
                                  ww7_sccnE [Occ=Once!] ->
              case ww7_sccnE of {
                GHC.Types.C# ww9_sccnG [Occ=Once] ->
                    Text.Printf.$wformatRealFloat
                        w_sccnu
                        w1_sccnv
                        ww1_sccny
                        ww2_sccnz
                        ww3_sccnA
                        ww4_sccnB
                        ww5_sccnC
                        ww9_sccnG;
              };
        };

Text.Printf.$fPrintfArgDouble_$cparseFormat
  :: GHC.Types.Double -> Text.Printf.ModifierParser
[GblId, Arity=2, Str=<L,A><S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_sccnH ds1_sccnI]
        case ds1_sccnI of {
          [] -> Text.Printf.errorShortFormat;
          : c_sccnK [Occ=Once] cs_sccnL [Occ=Once] ->
              Text.Printf.FormatParse [GHC.Types.[] c_sccnK cs_sccnL];
        };

Text.Printf.$fPrintfArgDouble [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Double
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgDouble_$sformatRealFloat
                                            Text.Printf.$fPrintfArgDouble_$cparseFormat];

Text.Printf.$fPrintfArgFloat_$cparseFormat
  :: GHC.Types.Float -> Text.Printf.ModifierParser
[GblId, Arity=2, Str=<L,A><S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_sccnM ds1_sccnN]
        case ds1_sccnN of {
          [] -> Text.Printf.errorShortFormat;
          : c_sccnP [Occ=Once] cs_sccnQ [Occ=Once] ->
              Text.Printf.FormatParse [GHC.Types.[] c_sccnP cs_sccnQ];
        };

Text.Printf.$fPrintfArgFloat [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Float
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgFloat_$sformatRealFloat
                                            Text.Printf.$fPrintfArgFloat_$cparseFormat];

Text.Printf.$w$sformatString [InlPrag=NOUSERINLINE[0]]
  :: [GHC.Types.Char]
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=5,
 Str=<L,1*U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccnR ww_sccnS ww1_sccnT ww2_sccnU ww3_sccnV]
        let-no-escape {
          $w$j_sccnW [InlPrag=NOUSERINLINE[0],
                      Occ=Once*!T[1],
                      Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Char# -> GHC.Show.ShowS
          [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [w_sccnR ww_sccnS ww1_sccnT ww2_sccnU] \r [ww4_sccnX]
                  case ww4_sccnX of ds_sccnY {
                    __DEFAULT -> Text.Printf.$werrorBadFormat ds_sccnY;
                    's'# ->
                        let {
                          g_sccnZ [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [w_sccnR ww_sccnS ww1_sccnT ww2_sccnU] \u []
                                  let {
                                    sat_scco5 [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [w_sccnR ww1_sccnT] \u []
                                            case ww1_sccnT of {
                                              GHC.Base.Nothing -> w_sccnR;
                                              GHC.Base.Just n_scco1 [Occ=Once!] ->
                                                  case n_scco1 of {
                                                    GHC.Types.I# y_scco3 ->
                                                        case <# [0# y_scco3] of {
                                                          __DEFAULT -> [] [];
                                                          1# ->
                                                              GHC.List.$wunsafeTake y_scco3 w_sccnR;
                                                        };
                                                  };
                                            };
                                  } in 
                                    Text.Printf.$wadjust ww_sccnS ww2_sccnU GHC.Types.[] sat_scco5;
                        } in  GHC.Base.++ g_sccnZ;
                  };
        } in 
          case ww3_sccnV of ds_scco7 {
            __DEFAULT -> $w$j_sccnW ds_scco7;
            'v'# -> $w$j_sccnW 's'#;
          };

Text.Printf.$wformatString [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.Printf.IsChar a =>
     [a]
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=6,
 Str=<L,U(C(U),A)><L,1*U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_scco8 w1_scco9 ww_sccoa ww1_sccob ww2_sccoc ww3_sccod]
        let-no-escape {
          $w$j_sccoe [InlPrag=NOUSERINLINE[0],
                      Occ=Once*!T[1],
                      Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Char# -> GHC.Show.ShowS
          [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [w_scco8
                        w1_scco9
                        ww_sccoa
                        ww1_sccob
                        ww2_sccoc] \r [ww4_sccof]
                  case ww4_sccof of ds_sccog {
                    __DEFAULT -> Text.Printf.$werrorBadFormat ds_sccog;
                    's'# ->
                        let {
                          g_sccoh [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [w_scco8 w1_scco9 ww_sccoa ww1_sccob ww2_sccoc] \u []
                                  let {
                                    sat_sccoz [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [w_scco8 w1_scco9 ww1_sccob] \u []
                                            case ww1_sccob of {
                                              GHC.Base.Nothing ->
                                                  let {
                                                    sat_sccoj [Occ=Once, Dmd=<L,C(U)>]
                                                      :: a_scbaN -> GHC.Types.Char
                                                    [LclId] =
                                                        [w_scco8] \u [] Text.Printf.toChar w_scco8;
                                                  } in  GHC.Base.map sat_sccoj w1_scco9;
                                              GHC.Base.Just n_sccok [Occ=Once!] ->
                                                  case n_sccok of {
                                                    GHC.Types.I# y_sccom ->
                                                        case <# [0# y_sccom] of {
                                                          __DEFAULT -> [] [];
                                                          1# ->
                                                              let {
                                                                $wgo_sccoo [InlPrag=NOUSERINLINE[0],
                                                                            Occ=LoopBreaker]
                                                                  :: [a_scbaN]
                                                                     -> GHC.Prim.Int#
                                                                     -> [GHC.Types.Char]
                                                                [LclId,
                                                                 Arity=2,
                                                                 Str=<S,1*U><L,1*U>,
                                                                 Unf=OtherCon []] =
                                                                    sat-only [w_scco8
                                                                              $wgo_sccoo] \r [w2_sccop
                                                                                              ww5_sccoq]
                                                                        case w2_sccop of {
                                                                          [] -> [] [];
                                                                          : y1_sccos [Occ=Once*]
                                                                            ys_sccot [Occ=Once] ->
                                                                              case
                                                                                  ww5_sccoq
                                                                              of
                                                                              ds1_sccou
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_sccox [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          [$wgo_sccoo
                                                                                           ys_sccot
                                                                                           ds1_sccou] \u []
                                                                                              case
                                                                                                  -# [ds1_sccou
                                                                                                      1#]
                                                                                              of
                                                                                              sat_sccow
                                                                                              { __DEFAULT ->
                                                                                                    $wgo_sccoo
                                                                                                        ys_sccot
                                                                                                        sat_sccow;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_sccov [Occ=Once]
                                                                                        :: GHC.Types.Char
                                                                                      [LclId] =
                                                                                          [w_scco8
                                                                                           y1_sccos] \u []
                                                                                              Text.Printf.toChar
                                                                                                  w_scco8
                                                                                                  y1_sccos;
                                                                                    } in 
                                                                                      : [sat_sccov
                                                                                         sat_sccox];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_sccoy [Occ=Once]
                                                                                        :: GHC.Types.Char
                                                                                      [LclId] =
                                                                                          [w_scco8
                                                                                           y1_sccos] \u []
                                                                                              Text.Printf.toChar
                                                                                                  w_scco8
                                                                                                  y1_sccos;
                                                                                    } in 
                                                                                      : [sat_sccoy
                                                                                         GHC.Types.[]];
                                                                              };
                                                                        };
                                                              } in  $wgo_sccoo w1_scco9 y_sccom;
                                                        };
                                                  };
                                            };
                                  } in 
                                    Text.Printf.$wadjust ww_sccoa ww2_sccoc GHC.Types.[] sat_sccoz;
                        } in  GHC.Base.++ g_sccoh;
                  };
        } in 
          case ww3_sccod of ds_sccoB {
            __DEFAULT -> $w$j_sccoe ds_sccoB;
            'v'# -> $w$j_sccoe 's'#;
          };

Text.Printf.formatString [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.Printf.IsChar a =>
     [a] -> Text.Printf.FieldFormatter
[GblId,
 Arity=3,
 Str=<L,U(C(U),A)><L,1*U><S(LLLLLLS(S)),1*U(1*U,1*U,U,A,A,A,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccoC w1_sccoD w2_sccoE]
        case w2_sccoE of {
          Text.Printf.FieldFormat ww1_sccoG [Occ=Once]
                                  ww2_sccoH [Occ=Once]
                                  ww3_sccoI [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ww7_sccoM [Occ=Once!] ->
              case ww7_sccoM of {
                GHC.Types.C# ww9_sccoO [Occ=Once] ->
                    Text.Printf.$wformatString
                        w_sccoC w1_sccoD ww1_sccoG ww2_sccoH ww3_sccoI ww9_sccoO;
              };
        };

lvl22_rcccn
  :: forall c. [c] -> [GHC.Types.Char] -> Text.Printf.FormatParse
[GblId, Arity=2, Str=<L,A><S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_sccoP ds1_sccoQ]
        case ds1_sccoQ of {
          [] -> Text.Printf.errorShortFormat;
          : c1_sccoS [Occ=Once] cs_sccoT [Occ=Once] ->
              Text.Printf.FormatParse [GHC.Types.[] c1_sccoS cs_sccoT];
        };

Text.Printf.$fPrintfArg[] [InlPrag=NOUSERINLINE CONLIKE]
  :: forall c. Text.Printf.IsChar c => Text.Printf.PrintfArg [c]
[GblId[DFunId], Arity=1, Str=<L,U(C(U),A)>m] =
    [] \r [$dIsChar_sccoU]
        let {
          sat_sccoV [Occ=Once] :: [c_ac8Zj] -> Text.Printf.FieldFormatter
          [LclId] =
              [$dIsChar_sccoU] \r [eta_B2 eta_B1]
                  Text.Printf.formatString $dIsChar_sccoU eta_B2 eta_B1;
        } in  Text.Printf.C:PrintfArg [sat_sccoV lvl22_rcccn];

lvl23_rccco :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['d'#];

sat_sccoW :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

sat_sccoX :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sccoW GHC.Types.[]];

lvl24_rcccp :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sccoX;

lvl25_rcccq :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "0X"#;

lvl26_rcccr :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl25_rcccq;

lvl27_rcccs :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "0b"#;

lvl28_rccct :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl27_rcccs;

lvl29_rcccu :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: illegal char conversion"#;

lvl30_rcccv :: GHC.Show.ShowS
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl29_rcccu of sat_sccoY {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sccoY;
        };

sat_sccoZ :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1114111#];

sat_sccp0 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sccoZ GHC.Types.[]];

lvl31_rcccw :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sccp0;

sat_sccp1 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

sat_sccp2 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sccp1 GHC.Types.[]];

lvl32_rcccx :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sccp2;

lvl33_rcccy :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "0"#;

lvl34_rcccz :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl33_rcccy;

sat_sccp3 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [10#];

sat_sccp4 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sccp3 GHC.Types.[]];

lvl35_rcccA :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sccp4;

lvl36_rcccB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "0x"#;

lvl37_rcccC :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl36_rcccB;

lvl38_rcccD :: GHC.Base.Maybe [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl26_rcccr];

lvl39_rcccE :: GHC.Base.Maybe [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl28_rccct];

lvl40_rcccF :: GHC.Base.Maybe [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl34_rcccz];

lvl41_rcccG :: GHC.Base.Maybe [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl37_rcccC];

Text.Printf.$wformatIntegral [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=9,
 Str=<L,1*U><L,U><L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccp5
           w1_sccp6
           ww_sccp7
           ww1_sccp8
           ww2_sccp9
           ww3_sccpa
           ww4_sccpb
           ww5_sccpc
           ww6_sccpd]
        let-no-escape {
          $w$j_sccpe [InlPrag=NOUSERINLINE[0],
                      Occ=Once*!T[8],
                      Dmd=<C(C(C(C(C(C(C(C(S)))))))),1*C1(C1(C1(C1(C1(C1(C1(C1(U))))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Prim.Char#
               -> Text.Printf.FieldFormat
               -> GHC.Show.ShowS
          [LclId[JoinId(8)],
           Arity=8,
           Str=<L,1*U><L,1*U><L,U><L,1*U><L,1*U><L,1*U><S,1*U><L,A>,
           Unf=OtherCon []] =
              sat-only [w_sccp5 w1_sccp6 ww1_sccp8] \r [w2_sccpf
                                                        w3_sccpg
                                                        w4_sccph
                                                        w5_sccpi
                                                        w6_sccpj
                                                        w7_sccpk
                                                        ww7_sccpl
                                                        w8_sccpm]
                  case ww7_sccpl of ds_sccpn {
                    __DEFAULT -> Text.Printf.$werrorBadFormat ds_sccpn;
                    'X'# ->
                        let {
                          sat_sccpC [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sccp5 w1_sccp6 ww1_sccp8 w2_sccpf w4_sccph w6_sccpj] \u []
                                  case
                                      GHC.Integer.Type.eqInteger# w1_sccp6 Text.Printf.formatChar2
                                  of
                                  { __DEFAULT ->
                                        case w6_sccpj of {
                                          GHC.Types.False ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl24_rcccp
                                                      GHC.Base.Nothing
                                                      ww1_sccp8
                                                      w_sccp5
                                                      w1_sccp6
                                              of
                                              { (#,#) ww9_sccpr [Occ=Once] ww10_sccps [Occ=Once] ->
                                                    let {
                                                      sat_sccpt [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [ww10_sccps] \u []
                                                              GHC.Base.map
                                                                  GHC.Unicode.toUpper ww10_sccps;
                                                    } in 
                                                      Text.Printf.$wadjust
                                                          w2_sccpf w4_sccph ww9_sccpr sat_sccpt;
                                              };
                                          GHC.Types.True ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl24_rcccp
                                                      lvl38_rcccD
                                                      ww1_sccp8
                                                      w_sccp5
                                                      w1_sccp6
                                              of
                                              { (#,#) ww9_sccpv [Occ=Once] ww10_sccpw [Occ=Once] ->
                                                    let {
                                                      sat_sccpx [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [ww10_sccpw] \u []
                                                              GHC.Base.map
                                                                  GHC.Unicode.toUpper ww10_sccpw;
                                                    } in 
                                                      Text.Printf.$wadjust
                                                          w2_sccpf w4_sccph ww9_sccpv sat_sccpx;
                                              };
                                        };
                                    1# ->
                                        case
                                            $wfmtu_rcccl
                                                lvl24_rcccp
                                                GHC.Base.Nothing
                                                ww1_sccp8
                                                w_sccp5
                                                w1_sccp6
                                        of
                                        { (#,#) ww9_sccpz [Occ=Once] ww10_sccpA [Occ=Once] ->
                                              let {
                                                sat_sccpB [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    [ww10_sccpA] \u []
                                                        GHC.Base.map GHC.Unicode.toUpper ww10_sccpA;
                                              } in 
                                                Text.Printf.$wadjust
                                                    w2_sccpf w4_sccph ww9_sccpz sat_sccpB;
                                        };
                                  };
                        } in  GHC.Base.++ sat_sccpC;
                    'b'# ->
                        let {
                          sat_sccpO [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sccp5 w1_sccp6 ww1_sccp8 w2_sccpf w4_sccph w6_sccpj] \u []
                                  case
                                      GHC.Integer.Type.eqInteger# w1_sccp6 Text.Printf.formatChar2
                                  of
                                  { __DEFAULT ->
                                        case w6_sccpj of {
                                          GHC.Types.False ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl21_rccck
                                                      GHC.Base.Nothing
                                                      ww1_sccp8
                                                      w_sccp5
                                                      w1_sccp6
                                              of
                                              { (#,#) ww9_sccpG [Occ=Once] ww10_sccpH [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sccpf w4_sccph ww9_sccpG ww10_sccpH;
                                              };
                                          GHC.Types.True ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl21_rccck
                                                      lvl39_rcccE
                                                      ww1_sccp8
                                                      w_sccp5
                                                      w1_sccp6
                                              of
                                              { (#,#) ww9_sccpJ [Occ=Once] ww10_sccpK [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sccpf w4_sccph ww9_sccpJ ww10_sccpK;
                                              };
                                        };
                                    1# ->
                                        case
                                            $wfmtu_rcccl
                                                lvl21_rccck
                                                GHC.Base.Nothing
                                                ww1_sccp8
                                                w_sccp5
                                                w1_sccp6
                                        of
                                        { (#,#) ww9_sccpM [Occ=Once] ww10_sccpN [Occ=Once] ->
                                              Text.Printf.$wadjust
                                                  w2_sccpf w4_sccph ww9_sccpM ww10_sccpN;
                                        };
                                  };
                        } in  GHC.Base.++ sat_sccpO;
                    'c'# ->
                        case
                            GHC.Integer.Type.geInteger# w1_sccp6 Text.Printf.formatChar2
                        of
                        { __DEFAULT -> lvl30_rcccv;
                          1# ->
                              case GHC.Integer.Type.leInteger# w1_sccp6 lvl31_rcccw of {
                                __DEFAULT -> lvl30_rcccv;
                                1# ->
                                    case w3_sccpg of {
                                      GHC.Base.Nothing ->
                                          case GHC.Base.eqString w7_sccpk GHC.Types.[] of {
                                            GHC.Types.False -> lvl30_rcccv;
                                            GHC.Types.True ->
                                                let {
                                                  sat_sccpX [Occ=Once] :: GHC.Types.Char
                                                  [LclId] =
                                                      [w1_sccp6] \u []
                                                          case
                                                              GHC.Integer.Type.integerToInt w1_sccp6
                                                          of
                                                          wild4_sccpT
                                                          { __DEFAULT ->
                                                                case
                                                                    int2Word# [wild4_sccpT]
                                                                of
                                                                sat_sccpU
                                                                { __DEFAULT ->
                                                                      case
                                                                          leWord# [sat_sccpU
                                                                                   1114111##]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            GHC.Char.$wlvl
                                                                                wild4_sccpT;
                                                                        1# ->
                                                                            case
                                                                                chr# [wild4_sccpT]
                                                                            of
                                                                            sat_sccpW
                                                                            { __DEFAULT ->
                                                                                  GHC.Types.C# [sat_sccpW];
                                                                            };
                                                                      };
                                                                };
                                                          }; } in
                                                let {
                                                  sat_sccpY [Occ=Once] :: [GHC.Types.Char]
                                                  [LclId] =
                                                      CCCS :! [sat_sccpX GHC.Types.[]];
                                                } in 
                                                  Text.Printf.$w$sformatString
                                                      sat_sccpY
                                                      w2_sccpf
                                                      GHC.Base.Nothing
                                                      w4_sccph
                                                      's'#;
                                          };
                                      GHC.Base.Just _ [Occ=Dead] -> lvl30_rcccv;
                                    };
                              };
                        };
                    'd'# ->
                        let {
                          sat_sccq3 [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w1_sccp6 ww1_sccp8 w2_sccpf w4_sccph w5_sccpi] \u []
                                  case $wfmti_rcccm ww1_sccp8 w1_sccp6 of {
                                    (#,#) ww9_sccq1 [Occ=Once] ww10_sccq2 [Occ=Once] ->
                                        Text.Printf.$wadjustSigned
                                            w2_sccpf w4_sccph w5_sccpi ww9_sccq1 ww10_sccq2;
                                  };
                        } in  GHC.Base.++ sat_sccq3;
                    'i'# ->
                        let {
                          sat_sccq7 [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w1_sccp6 ww1_sccp8 w2_sccpf w4_sccph w5_sccpi] \u []
                                  case $wfmti_rcccm ww1_sccp8 w1_sccp6 of {
                                    (#,#) ww9_sccq5 [Occ=Once] ww10_sccq6 [Occ=Once] ->
                                        Text.Printf.$wadjustSigned
                                            w2_sccpf w4_sccph w5_sccpi ww9_sccq5 ww10_sccq6;
                                  };
                        } in  GHC.Base.++ sat_sccq7;
                    'o'# ->
                        let {
                          sat_sccqj [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sccp5 w1_sccp6 ww1_sccp8 w2_sccpf w4_sccph w6_sccpj] \u []
                                  case
                                      GHC.Integer.Type.eqInteger# w1_sccp6 Text.Printf.formatChar2
                                  of
                                  { __DEFAULT ->
                                        case w6_sccpj of {
                                          GHC.Types.False ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl32_rcccx
                                                      GHC.Base.Nothing
                                                      ww1_sccp8
                                                      w_sccp5
                                                      w1_sccp6
                                              of
                                              { (#,#) ww9_sccqb [Occ=Once] ww10_sccqc [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sccpf w4_sccph ww9_sccqb ww10_sccqc;
                                              };
                                          GHC.Types.True ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl32_rcccx
                                                      lvl40_rcccF
                                                      ww1_sccp8
                                                      w_sccp5
                                                      w1_sccp6
                                              of
                                              { (#,#) ww9_sccqe [Occ=Once] ww10_sccqf [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sccpf w4_sccph ww9_sccqe ww10_sccqf;
                                              };
                                        };
                                    1# ->
                                        case
                                            $wfmtu_rcccl
                                                lvl32_rcccx
                                                GHC.Base.Nothing
                                                ww1_sccp8
                                                w_sccp5
                                                w1_sccp6
                                        of
                                        { (#,#) ww9_sccqh [Occ=Once] ww10_sccqi [Occ=Once] ->
                                              Text.Printf.$wadjust
                                                  w2_sccpf w4_sccph ww9_sccqh ww10_sccqi;
                                        };
                                  };
                        } in  GHC.Base.++ sat_sccqj;
                    'u'# ->
                        let {
                          sat_sccqn [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sccp5 w1_sccp6 ww1_sccp8 w2_sccpf w4_sccph] \u []
                                  case
                                      $wfmtu_rcccl
                                          lvl35_rcccA GHC.Base.Nothing ww1_sccp8 w_sccp5 w1_sccp6
                                  of
                                  { (#,#) ww9_sccql [Occ=Once] ww10_sccqm [Occ=Once] ->
                                        Text.Printf.$wadjust w2_sccpf w4_sccph ww9_sccql ww10_sccqm;
                                  };
                        } in  GHC.Base.++ sat_sccqn;
                    'x'# ->
                        let {
                          sat_sccqz [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sccp5 w1_sccp6 ww1_sccp8 w2_sccpf w4_sccph w6_sccpj] \u []
                                  case
                                      GHC.Integer.Type.eqInteger# w1_sccp6 Text.Printf.formatChar2
                                  of
                                  { __DEFAULT ->
                                        case w6_sccpj of {
                                          GHC.Types.False ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl24_rcccp
                                                      GHC.Base.Nothing
                                                      ww1_sccp8
                                                      w_sccp5
                                                      w1_sccp6
                                              of
                                              { (#,#) ww9_sccqr [Occ=Once] ww10_sccqs [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sccpf w4_sccph ww9_sccqr ww10_sccqs;
                                              };
                                          GHC.Types.True ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl24_rcccp
                                                      lvl41_rcccG
                                                      ww1_sccp8
                                                      w_sccp5
                                                      w1_sccp6
                                              of
                                              { (#,#) ww9_sccqu [Occ=Once] ww10_sccqv [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sccpf w4_sccph ww9_sccqu ww10_sccqv;
                                              };
                                        };
                                    1# ->
                                        case
                                            $wfmtu_rcccl
                                                lvl24_rcccp
                                                GHC.Base.Nothing
                                                ww1_sccp8
                                                w_sccp5
                                                w1_sccp6
                                        of
                                        { (#,#) ww9_sccqx [Occ=Once] ww10_sccqy [Occ=Once] ->
                                              Text.Printf.$wadjust
                                                  w2_sccpf w4_sccph ww9_sccqx ww10_sccqy;
                                        };
                                  };
                        } in  GHC.Base.++ sat_sccqz;
                  };
        } in 
          case ww1_sccp8 of wild_sccqA {
            GHC.Base.Nothing ->
                case ww6_sccpd of ds_sccqB {
                  __DEFAULT ->
                      let {
                        sat_sccqC [Occ=Once] :: GHC.Types.Char
                        [LclId] =
                            CCCS GHC.Types.C#! [ds_sccqB]; } in
                      let {
                        sat_sccqD [Occ=Once] :: Text.Printf.FieldFormat
                        [LclId] =
                            CCCS Text.Printf.FieldFormat! [ww_sccp7
                                                           GHC.Base.Nothing
                                                           ww2_sccp9
                                                           ww3_sccpa
                                                           ww4_sccpb
                                                           ww5_sccpc
                                                           sat_sccqC];
                      } in 
                        $w$j_sccpe
                            ww_sccp7
                            GHC.Base.Nothing
                            ww2_sccp9
                            ww3_sccpa
                            ww4_sccpb
                            ww5_sccpc
                            ds_sccqB
                            sat_sccqD;
                  'v'# ->
                      let {
                        sat_sccqE [Occ=Once] :: Text.Printf.FieldFormat
                        [LclId] =
                            CCCS Text.Printf.FieldFormat! [ww_sccp7
                                                           GHC.Base.Nothing
                                                           ww2_sccp9
                                                           ww3_sccpa
                                                           ww4_sccpb
                                                           ww5_sccpc
                                                           lvl23_rccco];
                      } in 
                        $w$j_sccpe
                            ww_sccp7
                            GHC.Base.Nothing
                            ww2_sccp9
                            ww3_sccpa
                            ww4_sccpb
                            ww5_sccpc
                            'd'#
                            sat_sccqE;
                };
            GHC.Base.Just _ [Occ=Dead] ->
                case ww2_sccp9 of wild1_sccqG {
                  GHC.Base.Nothing ->
                      case ww6_sccpd of ds1_sccqH {
                        __DEFAULT ->
                            let {
                              sat_sccqI [Occ=Once] :: GHC.Types.Char
                              [LclId] =
                                  CCCS GHC.Types.C#! [ds1_sccqH]; } in
                            let {
                              sat_sccqJ [Occ=Once] :: Text.Printf.FieldFormat
                              [LclId] =
                                  CCCS Text.Printf.FieldFormat! [ww_sccp7
                                                                 wild_sccqA
                                                                 GHC.Base.Nothing
                                                                 ww3_sccpa
                                                                 ww4_sccpb
                                                                 ww5_sccpc
                                                                 sat_sccqI];
                            } in 
                              $w$j_sccpe
                                  ww_sccp7
                                  wild_sccqA
                                  GHC.Base.Nothing
                                  ww3_sccpa
                                  ww4_sccpb
                                  ww5_sccpc
                                  ds1_sccqH
                                  sat_sccqJ;
                        'v'# ->
                            let {
                              sat_sccqK [Occ=Once] :: Text.Printf.FieldFormat
                              [LclId] =
                                  CCCS Text.Printf.FieldFormat! [ww_sccp7
                                                                 wild_sccqA
                                                                 GHC.Base.Nothing
                                                                 ww3_sccpa
                                                                 ww4_sccpb
                                                                 ww5_sccpc
                                                                 lvl23_rccco];
                            } in 
                              $w$j_sccpe
                                  ww_sccp7
                                  wild_sccqA
                                  GHC.Base.Nothing
                                  ww3_sccpa
                                  ww4_sccpb
                                  ww5_sccpc
                                  'd'#
                                  sat_sccqK;
                      };
                  GHC.Base.Just ds1_sccqL [Occ=Once!] ->
                      case ds1_sccqL of {
                        Text.Printf.LeftAdjust ->
                            case ww6_sccpd of ds2_sccqN {
                              __DEFAULT ->
                                  let {
                                    sat_sccqO [Occ=Once] :: GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.Types.C#! [ds2_sccqN]; } in
                                  let {
                                    sat_sccqP [Occ=Once] :: Text.Printf.FieldFormat
                                    [LclId] =
                                        CCCS Text.Printf.FieldFormat! [ww_sccp7
                                                                       wild_sccqA
                                                                       wild1_sccqG
                                                                       ww3_sccpa
                                                                       ww4_sccpb
                                                                       ww5_sccpc
                                                                       sat_sccqO];
                                  } in 
                                    $w$j_sccpe
                                        ww_sccp7
                                        wild_sccqA
                                        wild1_sccqG
                                        ww3_sccpa
                                        ww4_sccpb
                                        ww5_sccpc
                                        ds2_sccqN
                                        sat_sccqP;
                              'v'# ->
                                  let {
                                    sat_sccqQ [Occ=Once] :: Text.Printf.FieldFormat
                                    [LclId] =
                                        CCCS Text.Printf.FieldFormat! [ww_sccp7
                                                                       wild_sccqA
                                                                       wild1_sccqG
                                                                       ww3_sccpa
                                                                       ww4_sccpb
                                                                       ww5_sccpc
                                                                       lvl23_rccco];
                                  } in 
                                    $w$j_sccpe
                                        ww_sccp7
                                        wild_sccqA
                                        wild1_sccqG
                                        ww3_sccpa
                                        ww4_sccpb
                                        ww5_sccpc
                                        'd'#
                                        sat_sccqQ;
                            };
                        Text.Printf.ZeroPad ->
                            case ww6_sccpd of ds2_sccqR {
                              __DEFAULT ->
                                  let {
                                    sat_sccqS [Occ=Once] :: GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.Types.C#! [ds2_sccqR]; } in
                                  let {
                                    sat_sccqT [Occ=Once] :: Text.Printf.FieldFormat
                                    [LclId] =
                                        CCCS Text.Printf.FieldFormat! [ww_sccp7
                                                                       wild_sccqA
                                                                       GHC.Base.Nothing
                                                                       ww3_sccpa
                                                                       ww4_sccpb
                                                                       ww5_sccpc
                                                                       sat_sccqS];
                                  } in 
                                    $w$j_sccpe
                                        ww_sccp7
                                        wild_sccqA
                                        GHC.Base.Nothing
                                        ww3_sccpa
                                        ww4_sccpb
                                        ww5_sccpc
                                        ds2_sccqR
                                        sat_sccqT;
                              'v'# ->
                                  let {
                                    sat_sccqU [Occ=Once] :: Text.Printf.FieldFormat
                                    [LclId] =
                                        CCCS Text.Printf.FieldFormat! [ww_sccp7
                                                                       wild_sccqA
                                                                       GHC.Base.Nothing
                                                                       ww3_sccpa
                                                                       ww4_sccpb
                                                                       ww5_sccpc
                                                                       lvl23_rccco];
                                  } in 
                                    $w$j_sccpe
                                        ww_sccp7
                                        wild_sccqA
                                        GHC.Base.Nothing
                                        ww3_sccpa
                                        ww4_sccpb
                                        ww5_sccpc
                                        'd'#
                                        sat_sccqU;
                            };
                      };
                };
          };

Text.Printf.formatIntegral [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> Text.Printf.FieldFormatter
[GblId,
 Arity=3,
 Str=<L,1*U><L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,1*U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccqV w1_sccqW w2_sccqX]
        case w2_sccqX of {
          Text.Printf.FieldFormat ww1_sccqZ [Occ=Once]
                                  ww2_sccr0 [Occ=Once]
                                  ww3_sccr1 [Occ=Once]
                                  ww4_sccr2 [Occ=Once]
                                  ww5_sccr3 [Occ=Once]
                                  ww6_sccr4 [Occ=Once]
                                  ww7_sccr5 [Occ=Once!] ->
              case ww7_sccr5 of {
                GHC.Types.C# ww9_sccr7 [Occ=Once] ->
                    Text.Printf.$wformatIntegral
                        w_sccqV
                        w1_sccqW
                        ww1_sccqZ
                        ww2_sccr0
                        ww3_sccr1
                        ww4_sccr2
                        ww5_sccr3
                        ww6_sccr4
                        ww9_sccr7;
              };
        };

Text.Printf.formatChar1 :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.formatChar2];

Text.Printf.$wformatChar [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccr8
           ww_sccr9
           ww1_sccra
           ww2_sccrb
           ww3_sccrc
           ww4_sccrd
           ww5_sccre
           ww6_sccrf]
        case ww6_sccrf of ds_sccrg {
          __DEFAULT ->
              let {
                sat_sccrk [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [w_sccr8] \u []
                        case w_sccr8 of {
                          GHC.Types.C# c#_sccri [Occ=Once] ->
                              case ord# [c#_sccri] of sat_sccrj {
                                __DEFAULT -> GHC.Integer.Type.smallInteger sat_sccrj;
                              };
                        };
              } in 
                Text.Printf.$wformatIntegral
                    Text.Printf.formatChar1
                    sat_sccrk
                    ww_sccr9
                    ww1_sccra
                    ww2_sccrb
                    ww3_sccrc
                    ww4_sccrd
                    ww5_sccre
                    ds_sccrg;
          'v'# ->
              let {
                sat_sccro [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [w_sccr8] \u []
                        case w_sccr8 of {
                          GHC.Types.C# c#_sccrm [Occ=Once] ->
                              case ord# [c#_sccrm] of sat_sccrn {
                                __DEFAULT -> GHC.Integer.Type.smallInteger sat_sccrn;
                              };
                        };
              } in 
                Text.Printf.$wformatIntegral
                    Text.Printf.formatChar1
                    sat_sccro
                    ww_sccr9
                    ww1_sccra
                    ww2_sccrb
                    ww3_sccrc
                    ww4_sccrd
                    ww5_sccre
                    'c'#;
        };

Text.Printf.formatChar [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,1*U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccrp w1_sccrq]
        case w1_sccrq of {
          Text.Printf.FieldFormat ww1_sccrs [Occ=Once]
                                  ww2_sccrt [Occ=Once]
                                  ww3_sccru [Occ=Once]
                                  ww4_sccrv [Occ=Once]
                                  ww5_sccrw [Occ=Once]
                                  ww6_sccrx [Occ=Once]
                                  ww7_sccry [Occ=Once!] ->
              case ww7_sccry of {
                GHC.Types.C# ww9_sccrA [Occ=Once] ->
                    Text.Printf.$wformatChar
                        w_sccrp
                        ww1_sccrs
                        ww2_sccrt
                        ww3_sccru
                        ww4_sccrv
                        ww5_sccrw
                        ww6_sccrx
                        ww9_sccrA;
              };
        };

Text.Printf.$fPrintfArgChar [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Char
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.formatChar
                                            Text.Printf.$fPrintfArgChar_$cparseFormat];

Text.Printf.$fPrintfArgWord1 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['u'#];

Text.Printf.$w$sformatInt3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word64
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccrB
           ww_sccrC
           ww1_sccrD
           ww2_sccrE
           ww3_sccrF
           ww4_sccrG
           ww5_sccrH
           ww6_sccrI]
        let-no-escape {
          $j_sccrJ [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_sccrB ww5_sccrH] \r [ww7_sccrK
                                               ww8_sccrL
                                               ww9_sccrM
                                               ww10_sccrN
                                               ww11_sccrO
                                               ww12_sccrP
                                               ww13_sccrQ]
                  case ww13_sccrQ of {
                    GHC.Types.C# ww15_sccrS [Occ=Once] ->
                        let {
                          sat_sccrZ [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_sccrB] \u [] GHC.Word.$fIntegralWord64_$ctoInteger w_sccrB; } in
                        let {
                          sat_sccrY [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_sccrH] \s []
                                  case ww5_sccrH of wild_sccrT {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_sccrT
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_sccrW
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_sccrW;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_sccrY
                              sat_sccrZ
                              ww7_sccrK
                              ww8_sccrL
                              ww9_sccrM
                              ww10_sccrN
                              ww11_sccrO
                              ww12_sccrP
                              ww15_sccrS;
                  };
        } in 
          case ww6_sccrI of ds_sccs0 {
            __DEFAULT ->
                let {
                  sat_sccs1 [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_sccs0];
                } in 
                  $j_sccrJ
                      ww_sccrC
                      ww1_sccrD
                      ww2_sccrE
                      ww3_sccrF
                      ww4_sccrG
                      ww5_sccrH
                      sat_sccs1;
            'v'# ->
                $j_sccrJ
                    ww_sccrC
                    ww1_sccrD
                    ww2_sccrE
                    ww3_sccrF
                    ww4_sccrG
                    ww5_sccrH
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord64_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word64 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccs2 w1_sccs3]
        case w1_sccs3 of {
          Text.Printf.FieldFormat ww1_sccs5 [Occ=Once]
                                  ww2_sccs6 [Occ=Once]
                                  ww3_sccs7 [Occ=Once]
                                  ww4_sccs8 [Occ=Once]
                                  ww5_sccs9 [Occ=Once]
                                  ww6_sccsa [Occ=Once]
                                  ww7_sccsb [Occ=Once!] ->
              case ww7_sccsb of {
                GHC.Types.C# ww9_sccsd [Occ=Once] ->
                    Text.Printf.$w$sformatInt3
                        w_sccs2
                        ww1_sccs5
                        ww2_sccs6
                        ww3_sccs7
                        ww4_sccs8
                        ww5_sccs9
                        ww6_sccsa
                        ww9_sccsd;
              };
        };

Text.Printf.$w$sformatInt2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccse
           ww_sccsf
           ww1_sccsg
           ww2_sccsh
           ww3_sccsi
           ww4_sccsj
           ww5_sccsk
           ww6_sccsl]
        let-no-escape {
          $j_sccsm [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_sccse ww5_sccsk] \r [ww7_sccsn
                                               ww8_sccso
                                               ww9_sccsp
                                               ww10_sccsq
                                               ww11_sccsr
                                               ww12_sccss
                                               ww13_sccst]
                  case ww13_sccst of {
                    GHC.Types.C# ww15_sccsv [Occ=Once] ->
                        let {
                          sat_sccsC [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_sccse] \u [] GHC.Word.$ctoInteger2 w_sccse; } in
                        let {
                          sat_sccsB [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_sccsk] \s []
                                  case ww5_sccsk of wild_sccsw {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_sccsw
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_sccsz
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_sccsz;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_sccsB
                              sat_sccsC
                              ww7_sccsn
                              ww8_sccso
                              ww9_sccsp
                              ww10_sccsq
                              ww11_sccsr
                              ww12_sccss
                              ww15_sccsv;
                  };
        } in 
          case ww6_sccsl of ds_sccsD {
            __DEFAULT ->
                let {
                  sat_sccsE [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_sccsD];
                } in 
                  $j_sccsm
                      ww_sccsf
                      ww1_sccsg
                      ww2_sccsh
                      ww3_sccsi
                      ww4_sccsj
                      ww5_sccsk
                      sat_sccsE;
            'v'# ->
                $j_sccsm
                    ww_sccsf
                    ww1_sccsg
                    ww2_sccsh
                    ww3_sccsi
                    ww4_sccsj
                    ww5_sccsk
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord32_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccsF w1_sccsG]
        case w1_sccsG of {
          Text.Printf.FieldFormat ww1_sccsI [Occ=Once]
                                  ww2_sccsJ [Occ=Once]
                                  ww3_sccsK [Occ=Once]
                                  ww4_sccsL [Occ=Once]
                                  ww5_sccsM [Occ=Once]
                                  ww6_sccsN [Occ=Once]
                                  ww7_sccsO [Occ=Once!] ->
              case ww7_sccsO of {
                GHC.Types.C# ww9_sccsQ [Occ=Once] ->
                    Text.Printf.$w$sformatInt2
                        w_sccsF
                        ww1_sccsI
                        ww2_sccsJ
                        ww3_sccsK
                        ww4_sccsL
                        ww5_sccsM
                        ww6_sccsN
                        ww9_sccsQ;
              };
        };

Text.Printf.$w$sformatInt1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccsR
           ww_sccsS
           ww1_sccsT
           ww2_sccsU
           ww3_sccsV
           ww4_sccsW
           ww5_sccsX
           ww6_sccsY]
        let-no-escape {
          $j_sccsZ [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_sccsR ww5_sccsX] \r [ww7_scct0
                                               ww8_scct1
                                               ww9_scct2
                                               ww10_scct3
                                               ww11_scct4
                                               ww12_scct5
                                               ww13_scct6]
                  case ww13_scct6 of {
                    GHC.Types.C# ww15_scct8 [Occ=Once] ->
                        let {
                          sat_scctf [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_sccsR] \u [] GHC.Word.$ctoInteger1 w_sccsR; } in
                        let {
                          sat_sccte [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_sccsX] \s []
                                  case ww5_sccsX of wild_scct9 {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_scct9
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_scctc
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_scctc;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_sccte
                              sat_scctf
                              ww7_scct0
                              ww8_scct1
                              ww9_scct2
                              ww10_scct3
                              ww11_scct4
                              ww12_scct5
                              ww15_scct8;
                  };
        } in 
          case ww6_sccsY of ds_scctg {
            __DEFAULT ->
                let {
                  sat_sccth [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_scctg];
                } in 
                  $j_sccsZ
                      ww_sccsS
                      ww1_sccsT
                      ww2_sccsU
                      ww3_sccsV
                      ww4_sccsW
                      ww5_sccsX
                      sat_sccth;
            'v'# ->
                $j_sccsZ
                    ww_sccsS
                    ww1_sccsT
                    ww2_sccsU
                    ww3_sccsV
                    ww4_sccsW
                    ww5_sccsX
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord16_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccti w1_scctj]
        case w1_scctj of {
          Text.Printf.FieldFormat ww1_scctl [Occ=Once]
                                  ww2_scctm [Occ=Once]
                                  ww3_scctn [Occ=Once]
                                  ww4_sccto [Occ=Once]
                                  ww5_scctp [Occ=Once]
                                  ww6_scctq [Occ=Once]
                                  ww7_scctr [Occ=Once!] ->
              case ww7_scctr of {
                GHC.Types.C# ww9_scctt [Occ=Once] ->
                    Text.Printf.$w$sformatInt1
                        w_sccti
                        ww1_scctl
                        ww2_scctm
                        ww3_scctn
                        ww4_sccto
                        ww5_scctp
                        ww6_scctq
                        ww9_scctt;
              };
        };

Text.Printf.$w$sformatInt4 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_scctu
           ww_scctv
           ww1_scctw
           ww2_scctx
           ww3_sccty
           ww4_scctz
           ww5_scctA
           ww6_scctB]
        let-no-escape {
          $j_scctC [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_scctu ww5_scctA] \r [ww7_scctD
                                               ww8_scctE
                                               ww9_scctF
                                               ww10_scctG
                                               ww11_scctH
                                               ww12_scctI
                                               ww13_scctJ]
                  case ww13_scctJ of {
                    GHC.Types.C# ww15_scctL [Occ=Once] ->
                        let {
                          sat_scctS [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_scctu] \u [] GHC.Word.$ctoInteger w_scctu; } in
                        let {
                          sat_scctR [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_scctA] \s []
                                  case ww5_scctA of wild_scctM {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_scctM
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_scctP
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_scctP;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_scctR
                              sat_scctS
                              ww7_scctD
                              ww8_scctE
                              ww9_scctF
                              ww10_scctG
                              ww11_scctH
                              ww12_scctI
                              ww15_scctL;
                  };
        } in 
          case ww6_scctB of ds_scctT {
            __DEFAULT ->
                let {
                  sat_scctU [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_scctT];
                } in 
                  $j_scctC
                      ww_scctv
                      ww1_scctw
                      ww2_scctx
                      ww3_sccty
                      ww4_scctz
                      ww5_scctA
                      sat_scctU;
            'v'# ->
                $j_scctC
                    ww_scctv
                    ww1_scctw
                    ww2_scctx
                    ww3_sccty
                    ww4_scctz
                    ww5_scctA
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord8_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_scctV w1_scctW]
        case w1_scctW of {
          Text.Printf.FieldFormat ww1_scctY [Occ=Once]
                                  ww2_scctZ [Occ=Once]
                                  ww3_sccu0 [Occ=Once]
                                  ww4_sccu1 [Occ=Once]
                                  ww5_sccu2 [Occ=Once]
                                  ww6_sccu3 [Occ=Once]
                                  ww7_sccu4 [Occ=Once!] ->
              case ww7_sccu4 of {
                GHC.Types.C# ww9_sccu6 [Occ=Once] ->
                    Text.Printf.$w$sformatInt4
                        w_scctV
                        ww1_scctY
                        ww2_scctZ
                        ww3_sccu0
                        ww4_sccu1
                        ww5_sccu2
                        ww6_sccu3
                        ww9_sccu6;
              };
        };

Text.Printf.$w$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Word
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(1*U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccu7
           ww_sccu8
           ww1_sccu9
           ww2_sccua
           ww3_sccub
           ww4_sccuc
           ww5_sccud
           ww6_sccue]
        let-no-escape {
          $j_sccuf [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_sccu7 ww5_sccud] \r [ww7_sccug
                                               ww8_sccuh
                                               ww9_sccui
                                               ww10_sccuj
                                               ww11_sccuk
                                               ww12_sccul
                                               ww13_sccum]
                  case ww13_sccum of {
                    GHC.Types.C# ww15_sccuo [Occ=Once] ->
                        let {
                          sat_sccuv [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_sccu7] \u [] GHC.Real.$fIntegralWord_$ctoInteger w_sccu7; } in
                        let {
                          sat_sccuu [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_sccud] \s []
                                  case ww5_sccud of wild_sccup {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_sccup
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_sccus
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_sccus;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_sccuu
                              sat_sccuv
                              ww7_sccug
                              ww8_sccuh
                              ww9_sccui
                              ww10_sccuj
                              ww11_sccuk
                              ww12_sccul
                              ww15_sccuo;
                  };
        } in 
          case ww6_sccue of ds_sccuw {
            __DEFAULT ->
                let {
                  sat_sccux [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_sccuw];
                } in 
                  $j_sccuf
                      ww_sccu8
                      ww1_sccu9
                      ww2_sccua
                      ww3_sccub
                      ww4_sccuc
                      ww5_sccud
                      sat_sccux;
            'v'# ->
                $j_sccuf
                    ww_sccu8
                    ww1_sccu9
                    ww2_sccua
                    ww3_sccub
                    ww4_sccuc
                    ww5_sccud
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Word -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(1*U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccuy w1_sccuz]
        case w1_sccuz of {
          Text.Printf.FieldFormat ww1_sccuB [Occ=Once]
                                  ww2_sccuC [Occ=Once]
                                  ww3_sccuD [Occ=Once]
                                  ww4_sccuE [Occ=Once]
                                  ww5_sccuF [Occ=Once]
                                  ww6_sccuG [Occ=Once]
                                  ww7_sccuH [Occ=Once!] ->
              case ww7_sccuH of {
                GHC.Types.C# ww9_sccuJ [Occ=Once] ->
                    Text.Printf.$w$sformatInt
                        w_sccuy
                        ww1_sccuB
                        ww2_sccuC
                        ww3_sccuD
                        ww4_sccuE
                        ww5_sccuF
                        ww6_sccuG
                        ww9_sccuJ;
              };
        };

Text.Printf.$fPrintfArgInt1
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.$fPrintfArgChar7];

Text.Printf.$fPrintfArgInt64_$sformatInt
  :: GHC.Int.Int64 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sccuK ufmt_sccuL]
        case ufmt_sccuL of {
          Text.Printf.FieldFormat ww1_sccuN [Occ=Once]
                                  ww2_sccuO [Occ=Once]
                                  ww3_sccuP [Occ=Once]
                                  ww4_sccuQ [Occ=Once]
                                  ww5_sccuR [Occ=Once]
                                  ww6_sccuS
                                  ww7_sccuT [Occ=Once!] ->
              case ww7_sccuT of {
                GHC.Types.C# ww9_sccuV [Occ=Once] ->
                    let {
                      sat_sccv2 [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sccuK] \u [] GHC.Int.$fIntegralInt64_$ctoInteger x_sccuK; } in
                    let {
                      sat_sccv1 [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sccuS] \s []
                              case ww6_sccuS of wild_sccuW {
                                [] -> Text.Printf.$fPrintfArgInt1;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sccuW
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sccuZ
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sccuZ;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sccv1
                          sat_sccv2
                          ww1_sccuN
                          ww2_sccuO
                          ww3_sccuP
                          ww4_sccuQ
                          ww5_sccuR
                          ww6_sccuS
                          ww9_sccuV;
              };
        };

Text.Printf.$fPrintfArgInt4
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.$fPrintfArgChar14];

Text.Printf.$fPrintfArgInt32_$sformatInt
  :: GHC.Int.Int32 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sccv3 ufmt_sccv4]
        case ufmt_sccv4 of {
          Text.Printf.FieldFormat ww1_sccv6 [Occ=Once]
                                  ww2_sccv7 [Occ=Once]
                                  ww3_sccv8 [Occ=Once]
                                  ww4_sccv9 [Occ=Once]
                                  ww5_sccva [Occ=Once]
                                  ww6_sccvb
                                  ww7_sccvc [Occ=Once!] ->
              case ww7_sccvc of {
                GHC.Types.C# ww9_sccve [Occ=Once] ->
                    let {
                      sat_sccvl [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sccv3] \u [] GHC.Int.$fIntegralInt32_$ctoInteger x_sccv3; } in
                    let {
                      sat_sccvk [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sccvb] \s []
                              case ww6_sccvb of wild_sccvf {
                                [] -> Text.Printf.$fPrintfArgInt4;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sccvf
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sccvi
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sccvi;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sccvk
                          sat_sccvl
                          ww1_sccv6
                          ww2_sccv7
                          ww3_sccv8
                          ww4_sccv9
                          ww5_sccva
                          ww6_sccvb
                          ww9_sccve;
              };
        };

Text.Printf.$fPrintfArgInt3
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.$fPrintfArgChar18];

Text.Printf.$fPrintfArgInt16_$sformatInt
  :: GHC.Int.Int16 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sccvm ufmt_sccvn]
        case ufmt_sccvn of {
          Text.Printf.FieldFormat ww1_sccvp [Occ=Once]
                                  ww2_sccvq [Occ=Once]
                                  ww3_sccvr [Occ=Once]
                                  ww4_sccvs [Occ=Once]
                                  ww5_sccvt [Occ=Once]
                                  ww6_sccvu
                                  ww7_sccvv [Occ=Once!] ->
              case ww7_sccvv of {
                GHC.Types.C# ww9_sccvx [Occ=Once] ->
                    let {
                      sat_sccvE [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sccvm] \u [] GHC.Int.$fIntegralInt16_$ctoInteger x_sccvm; } in
                    let {
                      sat_sccvD [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sccvu] \s []
                              case ww6_sccvu of wild_sccvy {
                                [] -> Text.Printf.$fPrintfArgInt3;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sccvy
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sccvB
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sccvB;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sccvD
                          sat_sccvE
                          ww1_sccvp
                          ww2_sccvq
                          ww3_sccvr
                          ww4_sccvs
                          ww5_sccvt
                          ww6_sccvu
                          ww9_sccvx;
              };
        };

Text.Printf.$fPrintfArgInt5
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.$fPrintfArgChar22];

Text.Printf.$fPrintfArgInt8_$sformatInt
  :: GHC.Int.Int8 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sccvF ufmt_sccvG]
        case ufmt_sccvG of {
          Text.Printf.FieldFormat ww1_sccvI [Occ=Once]
                                  ww2_sccvJ [Occ=Once]
                                  ww3_sccvK [Occ=Once]
                                  ww4_sccvL [Occ=Once]
                                  ww5_sccvM [Occ=Once]
                                  ww6_sccvN
                                  ww7_sccvO [Occ=Once!] ->
              case ww7_sccvO of {
                GHC.Types.C# ww9_sccvQ [Occ=Once] ->
                    let {
                      sat_sccvX [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sccvF] \u [] GHC.Int.$fIntegralInt8_$ctoInteger x_sccvF; } in
                    let {
                      sat_sccvW [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sccvN] \s []
                              case ww6_sccvN of wild_sccvR {
                                [] -> Text.Printf.$fPrintfArgInt5;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sccvR
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sccvU
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sccvU;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sccvW
                          sat_sccvX
                          ww1_sccvI
                          ww2_sccvJ
                          ww3_sccvK
                          ww4_sccvL
                          ww5_sccvM
                          ww6_sccvN
                          ww9_sccvQ;
              };
        };

Text.Printf.$fPrintfArgInt_$sformatInt
  :: GHC.Types.Int -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sccvY ufmt_sccvZ]
        case ufmt_sccvZ of {
          Text.Printf.FieldFormat ww1_sccw1 [Occ=Once]
                                  ww2_sccw2 [Occ=Once]
                                  ww3_sccw3 [Occ=Once]
                                  ww4_sccw4 [Occ=Once]
                                  ww5_sccw5 [Occ=Once]
                                  ww6_sccw6
                                  ww7_sccw7 [Occ=Once!] ->
              case ww7_sccw7 of {
                GHC.Types.C# ww9_sccw9 [Occ=Once] ->
                    let {
                      sat_sccwg [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sccvY] \u [] GHC.Real.$fIntegralInt_$ctoInteger x_sccvY; } in
                    let {
                      sat_sccwf [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sccw6] \s []
                              case ww6_sccw6 of wild_sccwa {
                                [] -> Text.Printf.$fPrintfArgInt1;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sccwa
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sccwd
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sccwd;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sccwf
                          sat_sccwg
                          ww1_sccw1
                          ww2_sccw2
                          ww3_sccw3
                          ww4_sccw4
                          ww5_sccw5
                          ww6_sccw6
                          ww9_sccw9;
              };
        };

Text.Printf.$wformatInt [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Real.Integral a, GHC.Enum.Bounded a) =>
     a
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=10,
 Str=<S(LLLLLLLLC(S)),U(A,A,A,A,A,A,A,A,C(U))><L,1*U(1*U,A)><L,U><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccwh
           w1_sccwi
           w2_sccwj
           ww_sccwk
           ww1_sccwl
           ww2_sccwm
           ww3_sccwn
           ww4_sccwo
           ww5_sccwp
           ww6_sccwq]
        let {
          sat_sccws [Occ=Once] :: a_scbdf
          [LclId] =
              [w1_sccwi] \u [] GHC.Enum.minBound w1_sccwi;
        } in 
          case GHC.Real.toInteger w_sccwh sat_sccws of lb_sccwr [Dmd=<S,U>] {
            __DEFAULT ->
                let-no-escape {
                  $j_sccwt [Occ=Once*!T[7],
                            Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
                    :: GHC.Base.Maybe GHC.Types.Int
                       -> GHC.Base.Maybe GHC.Types.Int
                       -> GHC.Base.Maybe Text.Printf.FormatAdjustment
                       -> GHC.Base.Maybe Text.Printf.FormatSign
                       -> GHC.Types.Bool
                       -> GHC.Base.String
                       -> GHC.Types.Char
                       -> GHC.Show.ShowS
                  [LclId[JoinId(7)],
                   Arity=7,
                   Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
                   Unf=OtherCon []] =
                      sat-only [w_sccwh w2_sccwj ww5_sccwp lb_sccwr] \r [ww7_sccwu
                                                                         ww8_sccwv
                                                                         ww9_sccww
                                                                         ww10_sccwx
                                                                         ww11_sccwy
                                                                         ww12_sccwz
                                                                         ww13_sccwA]
                          case ww13_sccwA of {
                            GHC.Types.C# ww15_sccwC [Occ=Once] ->
                                let {
                                  sat_sccwJ [Occ=Once] :: GHC.Integer.Type.Integer
                                  [LclId] =
                                      [w_sccwh w2_sccwj] \u []
                                          GHC.Real.toInteger w_sccwh w2_sccwj; } in
                                let {
                                  sat_sccwI [Occ=Once, Dmd=<L,1*U>]
                                    :: GHC.Base.Maybe GHC.Integer.Type.Integer
                                  [LclId] =
                                      [ww5_sccwp lb_sccwr] \s []
                                          case ww5_sccwp of wild_sccwD {
                                            [] -> GHC.Base.Just [lb_sccwr];
                                            : _ [Occ=Dead] _ [Occ=Dead] ->
                                                case
                                                    GHC.List.lookup
                                                        GHC.Classes.$fEq[]_$s$fEq[]1
                                                        wild_sccwD
                                                        Text.Printf.intModifierMap
                                                of
                                                wild1_sccwG
                                                { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                                  GHC.Base.Just _ [Occ=Dead] -> wild1_sccwG;
                                                };
                                          };
                                } in 
                                  Text.Printf.$wformatIntegral
                                      sat_sccwI
                                      sat_sccwJ
                                      ww7_sccwu
                                      ww8_sccwv
                                      ww9_sccww
                                      ww10_sccwx
                                      ww11_sccwy
                                      ww12_sccwz
                                      ww15_sccwC;
                          };
                } in 
                  case
                      GHC.Integer.Type.eqInteger# lb_sccwr Text.Printf.formatChar2
                  of
                  { __DEFAULT ->
                        let {
                          sat_sccwL [Occ=Once] :: GHC.Types.Char
                          [LclId] =
                              CCCS GHC.Types.C#! [ww6_sccwq];
                        } in 
                          $j_sccwt
                              ww_sccwk
                              ww1_sccwl
                              ww2_sccwm
                              ww3_sccwn
                              ww4_sccwo
                              ww5_sccwp
                              sat_sccwL;
                    1# ->
                        case ww6_sccwq of ds_sccwM {
                          __DEFAULT ->
                              let {
                                sat_sccwN [Occ=Once] :: GHC.Types.Char
                                [LclId] =
                                    CCCS GHC.Types.C#! [ds_sccwM];
                              } in 
                                $j_sccwt
                                    ww_sccwk
                                    ww1_sccwl
                                    ww2_sccwm
                                    ww3_sccwn
                                    ww4_sccwo
                                    ww5_sccwp
                                    sat_sccwN;
                          'v'# ->
                              $j_sccwt
                                  ww_sccwk
                                  ww1_sccwl
                                  ww2_sccwm
                                  ww3_sccwn
                                  ww4_sccwo
                                  ww5_sccwp
                                  Text.Printf.$fPrintfArgWord1;
                        };
                  };
          };

Text.Printf.formatInt [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Real.Integral a, GHC.Enum.Bounded a) =>
     a -> Text.Printf.FieldFormatter
[GblId,
 Arity=4,
 Str=<S(LLLLLLLLC(S)),U(A,A,A,A,A,A,A,A,C(U))><L,1*U(1*U,A)><L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccwO w1_sccwP w2_sccwQ w3_sccwR]
        case w3_sccwR of {
          Text.Printf.FieldFormat ww1_sccwT [Occ=Once]
                                  ww2_sccwU [Occ=Once]
                                  ww3_sccwV [Occ=Once]
                                  ww4_sccwW [Occ=Once]
                                  ww5_sccwX [Occ=Once]
                                  ww6_sccwY [Occ=Once]
                                  ww7_sccwZ [Occ=Once!] ->
              case ww7_sccwZ of {
                GHC.Types.C# ww9_sccx1 [Occ=Once] ->
                    Text.Printf.$wformatInt
                        w_sccwO
                        w1_sccwP
                        w2_sccwQ
                        ww1_sccwT
                        ww2_sccwU
                        ww3_sccwV
                        ww4_sccwW
                        ww5_sccwX
                        ww6_sccwY
                        ww9_sccx1;
              };
        };

Text.Printf.$fPrintfArgWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord64_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord32_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord16_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord8_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgWord [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Word
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt64_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt32_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt16_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt8_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Int
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.formatInteger
  :: GHC.Integer.Type.Integer -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sccx2 ufmt_sccx3]
        case ufmt_sccx3 of {
          Text.Printf.FieldFormat ww1_sccx5 [Occ=Once]
                                  ww2_sccx6 [Occ=Once]
                                  ww3_sccx7 [Occ=Once]
                                  ww4_sccx8 [Occ=Once]
                                  ww5_sccx9 [Occ=Once]
                                  ww6_sccxa
                                  ww7_sccxb [Occ=Once!] ->
              case ww7_sccxb of {
                GHC.Types.C# ww9_sccxd [Occ=Once] ->
                    let {
                      sat_sccxj [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sccxa] \s []
                              case ww6_sccxa of wild_sccxe {
                                [] -> GHC.Base.Nothing [];
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sccxe
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sccxh
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sccxh;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sccxj
                          x_sccx2
                          ww1_sccx5
                          ww2_sccx6
                          ww3_sccx7
                          ww4_sccx8
                          ww5_sccx9
                          ww6_sccxa
                          ww9_sccxd;
              };
        };

Text.Printf.$fPrintfArgNatural_$cformatArg
  :: GHC.Natural.Natural -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sccxk ufmt_sccxl]
        case ufmt_sccxl of {
          Text.Printf.FieldFormat ww1_sccxn [Occ=Once]
                                  ww2_sccxo [Occ=Once]
                                  ww3_sccxp [Occ=Once]
                                  ww4_sccxq [Occ=Once]
                                  ww5_sccxr [Occ=Once]
                                  ww6_sccxs
                                  ww7_sccxt [Occ=Once!] ->
              case ww7_sccxt of {
                GHC.Types.C# ww9_sccxv [Occ=Once] ->
                    let {
                      sat_sccxB [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sccxs] \s []
                              case ww6_sccxs of wild_sccxw {
                                [] -> GHC.Base.Nothing [];
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sccxw
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sccxz
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sccxz;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sccxB
                          x_sccxk
                          ww1_sccxn
                          ww2_sccxo
                          ww3_sccxp
                          ww4_sccxq
                          ww5_sccxr
                          ww6_sccxs
                          ww9_sccxv;
              };
        };

Text.Printf.$fPrintfArgNatural [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Natural.Natural
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgNatural_$cformatArg
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Integer.Type.Integer
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.formatInteger
                                            Text.Printf.parseIntFormat];

lvl42_rcccH :: Text.ParserCombinators.ReadP.P GHC.Types.Int
[GblId] =
    [] \u []
        GHC.Read.$fReadInt_$sreadNumber
            GHC.Read.$fReadInt2
            Text.ParserCombinators.ReadPrec.minPrec
            Text.Read.readEither7;

lvl43_rcccI :: Text.Printf.FieldFormat
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.FieldFormat! [GHC.Base.Nothing
                                            GHC.Base.Nothing
                                            GHC.Base.Nothing
                                            GHC.Base.Nothing
                                            GHC.Types.False
                                            GHC.Types.[]
                                            lvl23_rccco];

lvl44_rcccJ :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.errorWithoutStackTrace Text.Read.readEither5;

lvl45_rcccK :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.errorWithoutStackTrace Text.Read.readEither2;

$wgetStar_rcccL
  :: [Text.Printf.UPrintf]
     -> (# [Text.Printf.UPrintf], GHC.Types.Int #)
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [w_sccxC]
        case w_sccxC of {
          [] -> Text.Printf.errorMissingArgument;
          : ds_sccxF [Occ=Once!] us'_sccxG [Occ=Once] ->
              case ds_sccxF of {
                (,) _ [Occ=Dead] nu_sccxJ [Occ=Once!] ->
                    let {
                      sat_sccxS [Occ=Once] :: GHC.Types.Int
                      [LclId] =
                          [nu_sccxJ] \u []
                              let {
                                sat_sccxK [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    [nu_sccxJ] \u [] nu_sccxJ lvl43_rcccI GHC.Types.[];
                              } in 
                                case
                                    Text.ParserCombinators.ReadP.run lvl42_rcccH sat_sccxK
                                of
                                sat_sccxL
                                { __DEFAULT ->
                                      case Text.Read.readEither8 sat_sccxL of {
                                        [] -> lvl44_rcccJ;
                                        : x_sccxN [Occ=Once] ds2_sccxO [Occ=Once!] ->
                                            case ds2_sccxO of {
                                              [] -> x_sccxN;
                                              : _ [Occ=Dead] _ [Occ=Dead] -> lvl45_rcccK;
                                            };
                                      };
                                };
                    } in  (#,#) [us'_sccxG sat_sccxS];
              };
        };

lvl46_rcccM :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl47_rcccN :: GHC.Base.Maybe Text.Printf.FormatAdjustment
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.LeftAdjust];

lvl48_rcccO :: GHC.Base.Maybe Text.Printf.FormatAdjustment
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.ZeroPad];

lvl49_rcccP :: (GHC.Types.Int, GHC.Base.String)
[GblId] =
    [] \u []
        case GHC.List.$wspan GHC.Unicode.isDigit GHC.Types.[] of {
          (#,#) ww1_sccxU [Occ=Once!] ww2_sccxV [Occ=Once*] ->
              case ww1_sccxU of wild_sccxW {
                [] -> (,) [lvl46_rcccM ww2_sccxV];
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sccy6 [Occ=Once] :: GHC.Types.Int
                      [LclId] =
                          [wild_sccxW] \u []
                              case
                                  Text.ParserCombinators.ReadP.run lvl42_rcccH wild_sccxW
                              of
                              sat_sccxZ
                              { __DEFAULT ->
                                    case Text.Read.readEither8 sat_sccxZ of {
                                      [] -> lvl44_rcccJ;
                                      : x_sccy1 [Occ=Once] ds_sccy2 [Occ=Once!] ->
                                          case ds_sccy2 of {
                                            [] -> x_sccy1;
                                            : _ [Occ=Dead] _ [Occ=Dead] -> lvl45_rcccK;
                                          };
                                    };
                              };
                    } in  (,) [sat_sccy6 ww2_sccxV];
              };
        };

lvl50_rcccQ :: GHC.Base.Maybe Text.Printf.FormatSign
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.SignPlus];

lvl51_rcccR :: GHC.Types.Int
[GblId] =
    [] \u []
        case lvl49_rcccP of {
          (,) p'_sccy8 [Occ=Once] _ [Occ=Dead] -> p'_sccy8;
        };

lvl52_rcccS :: GHC.Base.Maybe GHC.Types.Int
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl51_rcccR];

lvl53_rcccT :: GHC.Base.String
[GblId] =
    [] \u []
        case lvl49_rcccP of {
          (,) _ [Occ=Dead] r'_sccyc [Occ=Once] -> r'_sccyc;
        };

lvl54_rcccU :: GHC.Base.Maybe Text.Printf.FormatSign
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.SignSpace];

$wgetSpecs_rcccV
  :: GHC.Types.Bool
     -> GHC.Types.Bool
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> [Text.Printf.UPrintf]
     -> (# Text.Printf.FieldFormat, GHC.Base.String,
           [Text.Printf.UPrintf] #)
[GblId,
 Arity=6,
 Str=<L,1*U><L,1*U><L,U><L,U><S,1*U><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [w_sccyd
                    w1_sccye
                    w2_sccyf
                    w3_sccyg
                    w4_sccyh
                    w5_sccyi]
        case w4_sccyh of wild_sccyj {
          [] -> Text.Printf.errorShortFormat;
          : ds_sccyl [Occ=Once!] cs0_sccym [Occ=Once*] ->
              case ds_sccyl of {
                GHC.Types.C# ds1_sccyo [Occ=Once!] ->
                    case ds1_sccyo of ds2_sccyp {
                      __DEFAULT ->
                          case ord# [ds2_sccyp] of sat_sccyq {
                            __DEFAULT ->
                                case -# [sat_sccyq 48#] of sat_sccyr {
                                  __DEFAULT ->
                                      case int2Word# [sat_sccyr] of sat_sccys {
                                        __DEFAULT ->
                                            case leWord# [sat_sccys 9##] of {
                                              __DEFAULT ->
                                                  let {
                                                    ds3_sccyu [Dmd=<L,U(1*U,1*U,1*U)>]
                                                      :: Text.Printf.FormatParse
                                                    [LclId] =
                                                        [w5_sccyi wild_sccyj] \u []
                                                            case w5_sccyi of {
                                                              [] ->
                                                                  Text.Printf.errorMissingArgument;
                                                              : ds4_sccyw [Occ=Once!]
                                                                _ [Occ=Dead] ->
                                                                  case ds4_sccyw of {
                                                                    (,) ufmt_sccyz [Occ=Once!]
                                                                        _ [Occ=Dead] ->
                                                                        ufmt_sccyz wild_sccyj;
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_sccyT [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        [ds3_sccyu] \u []
                                                            case ds3_sccyu of {
                                                              Text.Printf.FormatParse _ [Occ=Dead]
                                                                                      _ [Occ=Dead]
                                                                                      cs_sccyS [Occ=Once] ->
                                                                  cs_sccyS;
                                                            }; } in
                                                  let {
                                                    sat_sccyN [Occ=Once] :: GHC.Types.Char
                                                    [LclId] =
                                                        [ds3_sccyu] \u []
                                                            case ds3_sccyu of {
                                                              Text.Printf.FormatParse _ [Occ=Dead]
                                                                                      c_sccyL [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                  c_sccyL;
                                                            }; } in
                                                  let {
                                                    sat_sccyI [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        [ds3_sccyu] \u []
                                                            case ds3_sccyu of {
                                                              Text.Printf.FormatParse ms_sccyF [Occ=Once]
                                                                                      _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                                                  ms_sccyF;
                                                            }; } in
                                                  let {
                                                    sat_sccyD [Occ=Once]
                                                      :: GHC.Base.Maybe Text.Printf.FormatAdjustment
                                                    [LclId] =
                                                        [w_sccyd w1_sccye] \u []
                                                            case w_sccyd of {
                                                              GHC.Types.False ->
                                                                  case w1_sccye of {
                                                                    GHC.Types.False ->
                                                                        GHC.Base.Nothing [];
                                                                    GHC.Types.True -> lvl48_rcccO;
                                                                  };
                                                              GHC.Types.True -> lvl47_rcccN;
                                                            }; } in
                                                  let {
                                                    sat_sccyO [Occ=Once] :: Text.Printf.FieldFormat
                                                    [LclId] =
                                                        CCCS Text.Printf.FieldFormat! [GHC.Base.Nothing
                                                                                       GHC.Base.Nothing
                                                                                       sat_sccyD
                                                                                       w2_sccyf
                                                                                       w3_sccyg
                                                                                       sat_sccyI
                                                                                       sat_sccyN];
                                                  } in  (#,,#) [sat_sccyO sat_sccyT w5_sccyi];
                                              1# ->
                                                  let {
                                                    ds3_sccyU [Dmd=<L,U(U(U),1*U)>]
                                                      :: (GHC.Types.Int, GHC.Base.String)
                                                    [LclId] =
                                                        [wild_sccyj] \u []
                                                            case
                                                                GHC.List.$wspan
                                                                    GHC.Unicode.isDigit wild_sccyj
                                                            of
                                                            { (#,#) ww1_sccyW [Occ=Once!]
                                                                    ww2_sccyX [Occ=Once*] ->
                                                                  case ww1_sccyW of wild2_sccyY {
                                                                    [] ->
                                                                        (,) [lvl46_rcccM ww2_sccyX];
                                                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                        let {
                                                                          sat_sccz8 [Occ=Once]
                                                                            :: GHC.Types.Int
                                                                          [LclId] =
                                                                              [wild2_sccyY] \u []
                                                                                  case
                                                                                      Text.ParserCombinators.ReadP.run
                                                                                          lvl42_rcccH
                                                                                          wild2_sccyY
                                                                                  of
                                                                                  sat_sccz1
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            Text.Read.readEither8
                                                                                                sat_sccz1
                                                                                        of
                                                                                        { [] ->
                                                                                              lvl44_rcccJ;
                                                                                          : x_sccz3 [Occ=Once]
                                                                                            ds4_sccz4 [Occ=Once!] ->
                                                                                              case
                                                                                                  ds4_sccz4
                                                                                              of
                                                                                              { [] ->
                                                                                                    x_sccz3;
                                                                                                : _ [Occ=Dead]
                                                                                                  _ [Occ=Dead] ->
                                                                                                    lvl45_rcccK;
                                                                                              };
                                                                                        };
                                                                                  };
                                                                        } in 
                                                                          (,) [sat_sccz8 ww2_sccyX];
                                                                  };
                                                            }; } in
                                                  let {
                                                    ds4_sccz9 [Dmd=<L,U(1*U,U,U)>]
                                                      :: (GHC.Base.Maybe GHC.Types.Int,
                                                          [GHC.Types.Char], [Text.Printf.UPrintf])
                                                    [LclId] =
                                                        [w5_sccyi ds3_sccyU] \u []
                                                            case ds3_sccyU of {
                                                              (,) _ [Occ=Dead]
                                                                  cs'_scczc [Occ=Once!] ->
                                                                  case cs'_scczc of wild3_scczd {
                                                                    [] ->
                                                                        (,,) [GHC.Base.Nothing
                                                                              GHC.Types.[]
                                                                              w5_sccyi];
                                                                    : ds5_sccze [Occ=Once!]
                                                                      ds6_scczf [Occ=Once!] ->
                                                                        case ds5_sccze of {
                                                                          GHC.Types.C# ds7_scczh [Occ=Once!] ->
                                                                              case ds7_scczh of {
                                                                                __DEFAULT ->
                                                                                    (,,) [GHC.Base.Nothing
                                                                                          wild3_scczd
                                                                                          w5_sccyi];
                                                                                '.'# ->
                                                                                    case
                                                                                        ds6_scczf
                                                                                    of
                                                                                    wild5_scczj
                                                                                    { [] ->
                                                                                          (,,) [lvl52_rcccS
                                                                                                lvl53_rcccT
                                                                                                w5_sccyi];
                                                                                      : ds9_scczk [Occ=Once!]
                                                                                        r_scczl [Occ=Once] ->
                                                                                          case
                                                                                              ds9_scczk
                                                                                          of
                                                                                          { GHC.Types.C# ds10_scczn [Occ=Once!] ->
                                                                                                case
                                                                                                    ds10_scczn
                                                                                                of
                                                                                                { __DEFAULT ->
                                                                                                      let {
                                                                                                        ds12_scczp [Dmd=<L,U(1*U,1*U)>]
                                                                                                          :: (GHC.Types.Int,
                                                                                                              GHC.Base.String)
                                                                                                        [LclId] =
                                                                                                            [wild5_scczj] \u []
                                                                                                                case
                                                                                                                    GHC.List.$wspan
                                                                                                                        GHC.Unicode.isDigit
                                                                                                                        wild5_scczj
                                                                                                                of
                                                                                                                { (#,#) ww1_scczr [Occ=Once!]
                                                                                                                        ww2_scczs [Occ=Once*] ->
                                                                                                                      case
                                                                                                                          ww1_scczr
                                                                                                                      of
                                                                                                                      wild7_scczt
                                                                                                                      { [] ->
                                                                                                                            (,) [lvl46_rcccM
                                                                                                                                 ww2_scczs];
                                                                                                                        : _ [Occ=Dead]
                                                                                                                          _ [Occ=Dead] ->
                                                                                                                            let {
                                                                                                                              sat_scczD [Occ=Once]
                                                                                                                                :: GHC.Types.Int
                                                                                                                              [LclId] =
                                                                                                                                  [wild7_scczt] \u []
                                                                                                                                      case
                                                                                                                                          Text.ParserCombinators.ReadP.run
                                                                                                                                              lvl42_rcccH
                                                                                                                                              wild7_scczt
                                                                                                                                      of
                                                                                                                                      sat_scczw
                                                                                                                                      { __DEFAULT ->
                                                                                                                                            case
                                                                                                                                                Text.Read.readEither8
                                                                                                                                                    sat_scczw
                                                                                                                                            of
                                                                                                                                            { [] ->
                                                                                                                                                  lvl44_rcccJ;
                                                                                                                                              : x_scczy [Occ=Once]
                                                                                                                                                ds13_scczz [Occ=Once!] ->
                                                                                                                                                  case
                                                                                                                                                      ds13_scczz
                                                                                                                                                  of
                                                                                                                                                  { [] ->
                                                                                                                                                        x_scczy;
                                                                                                                                                    : _ [Occ=Dead]
                                                                                                                                                      _ [Occ=Dead] ->
                                                                                                                                                        lvl45_rcccK;
                                                                                                                                                  };
                                                                                                                                            };
                                                                                                                                      };
                                                                                                                            } in 
                                                                                                                              (,) [sat_scczD
                                                                                                                                   ww2_scczs];
                                                                                                                      };
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_scczM [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            [ds12_scczp] \u []
                                                                                                                case
                                                                                                                    ds12_scczp
                                                                                                                of
                                                                                                                { (,) _ [Occ=Dead]
                                                                                                                      r'_scczL [Occ=Once] ->
                                                                                                                      r'_scczL;
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_scczH [Occ=Once]
                                                                                                          :: GHC.Types.Int
                                                                                                        [LclId] =
                                                                                                            [ds12_scczp] \u []
                                                                                                                case
                                                                                                                    ds12_scczp
                                                                                                                of
                                                                                                                { (,) p'_scczF [Occ=Once]
                                                                                                                      _ [Occ=Dead] ->
                                                                                                                      p'_scczF;
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_scczI [Occ=Once]
                                                                                                          :: GHC.Base.Maybe
                                                                                                               GHC.Types.Int
                                                                                                        [LclId] =
                                                                                                            CCCS GHC.Base.Just! [sat_scczH];
                                                                                                      } in 
                                                                                                        (,,) [sat_scczI
                                                                                                              sat_scczM
                                                                                                              w5_sccyi];
                                                                                                  '*'# ->
                                                                                                      let {
                                                                                                        ds12_scczN [Dmd=<L,U(1*U,1*U)>]
                                                                                                          :: ([Text.Printf.UPrintf],
                                                                                                              GHC.Types.Int)
                                                                                                        [LclId] =
                                                                                                            [w5_sccyi] \u []
                                                                                                                case
                                                                                                                    $wgetStar_rcccL
                                                                                                                        w5_sccyi
                                                                                                                of
                                                                                                                { (#,#) ww1_scczP [Occ=Once]
                                                                                                                        ww2_scczQ [Occ=Once] ->
                                                                                                                      (,) [ww1_scczP
                                                                                                                           ww2_scczQ];
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_scczZ [Occ=Once]
                                                                                                          :: [Text.Printf.UPrintf]
                                                                                                        [LclId] =
                                                                                                            [ds12_scczN] \u []
                                                                                                                case
                                                                                                                    ds12_scczN
                                                                                                                of
                                                                                                                { (,) us''_scczX [Occ=Once]
                                                                                                                      _ [Occ=Dead] ->
                                                                                                                      us''_scczX;
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_scczU [Occ=Once]
                                                                                                          :: GHC.Types.Int
                                                                                                        [LclId] =
                                                                                                            [ds12_scczN] \u []
                                                                                                                case
                                                                                                                    ds12_scczN
                                                                                                                of
                                                                                                                { (,) _ [Occ=Dead]
                                                                                                                      p'_scczT [Occ=Once] ->
                                                                                                                      p'_scczT;
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_scczV [Occ=Once]
                                                                                                          :: GHC.Base.Maybe
                                                                                                               GHC.Types.Int
                                                                                                        [LclId] =
                                                                                                            CCCS GHC.Base.Just! [sat_scczU];
                                                                                                      } in 
                                                                                                        (,,) [sat_scczV
                                                                                                              r_scczl
                                                                                                              sat_scczZ];
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    ds5_sccA0 [Dmd=<L,U(1*U,1*U,1*U)>]
                                                      :: Text.Printf.FormatParse
                                                    [LclId] =
                                                        [ds4_sccz9] \u []
                                                            case ds4_sccz9 of {
                                                              (,,) _ [Occ=Dead]
                                                                   cs''_sccA3 [Occ=Once]
                                                                   us'_sccA4 [Occ=Once!] ->
                                                                  case us'_sccA4 of {
                                                                    [] ->
                                                                        Text.Printf.errorMissingArgument;
                                                                    : ds7_sccA6 [Occ=Once!]
                                                                      _ [Occ=Dead] ->
                                                                        case ds7_sccA6 of {
                                                                          (,) ufmt_sccA9 [Occ=Once!]
                                                                              _ [Occ=Dead] ->
                                                                              ufmt_sccA9 cs''_sccA3;
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_sccAS [Occ=Once] :: [Text.Printf.UPrintf]
                                                    [LclId] =
                                                        [ds4_sccz9] \u []
                                                            case ds4_sccz9 of {
                                                              (,,) _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   us'_sccAR [Occ=Once] ->
                                                                  us'_sccAR;
                                                            }; } in
                                                  let {
                                                    sat_sccAN [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        [ds5_sccA0] \u []
                                                            case ds5_sccA0 of {
                                                              Text.Printf.FormatParse _ [Occ=Dead]
                                                                                      _ [Occ=Dead]
                                                                                      cs_sccAM [Occ=Once] ->
                                                                  cs_sccAM;
                                                            }; } in
                                                  let {
                                                    sat_sccAH [Occ=Once] :: GHC.Types.Char
                                                    [LclId] =
                                                        [ds5_sccA0] \u []
                                                            case ds5_sccA0 of {
                                                              Text.Printf.FormatParse _ [Occ=Dead]
                                                                                      c_sccAF [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                  c_sccAF;
                                                            }; } in
                                                  let {
                                                    sat_sccAC [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        [ds5_sccA0] \u []
                                                            case ds5_sccA0 of {
                                                              Text.Printf.FormatParse ms_sccAz [Occ=Once]
                                                                                      _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                                                  ms_sccAz;
                                                            }; } in
                                                  let {
                                                    sat_sccAx [Occ=Once]
                                                      :: GHC.Base.Maybe Text.Printf.FormatAdjustment
                                                    [LclId] =
                                                        [w_sccyd w1_sccye ds3_sccyU] \u []
                                                            case ds3_sccyU of {
                                                              (,) n_sccAq [Occ=Once!]
                                                                  _ [Occ=Dead] ->
                                                                  case n_sccAq of {
                                                                    GHC.Types.I# x_sccAt [Occ=Once] ->
                                                                        case <# [x_sccAt 0#] of {
                                                                          __DEFAULT ->
                                                                              case w_sccyd of {
                                                                                GHC.Types.False ->
                                                                                    case
                                                                                        w1_sccye
                                                                                    of
                                                                                    { GHC.Types.False ->
                                                                                          GHC.Base.Nothing [];
                                                                                      GHC.Types.True ->
                                                                                          lvl48_rcccO;
                                                                                    };
                                                                                GHC.Types.True ->
                                                                                    lvl47_rcccN;
                                                                              };
                                                                          1# -> lvl47_rcccN;
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_sccAo [Occ=Once]
                                                      :: GHC.Base.Maybe GHC.Types.Int
                                                    [LclId] =
                                                        [ds4_sccz9] \u []
                                                            case ds4_sccz9 of {
                                                              (,,) p_sccAl [Occ=Once]
                                                                   _ [Occ=Dead]
                                                                   _ [Occ=Dead] ->
                                                                  p_sccAl;
                                                            }; } in
                                                  let {
                                                    sat_sccAi [Occ=Once] :: GHC.Types.Int
                                                    [LclId] =
                                                        [ds3_sccyU] \u []
                                                            case ds3_sccyU of {
                                                              (,) n_sccAc [Occ=Once!]
                                                                  _ [Occ=Dead] ->
                                                                  case n_sccAc of wild3_sccAe {
                                                                    GHC.Types.I# x_sccAf ->
                                                                        case >=# [x_sccAf 0#] of {
                                                                          __DEFAULT ->
                                                                              case
                                                                                  negateInt# [x_sccAf]
                                                                              of
                                                                              sat_sccAh
                                                                              { __DEFAULT ->
                                                                                    GHC.Types.I# [sat_sccAh];
                                                                              };
                                                                          1# -> wild3_sccAe;
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_sccAj [Occ=Once]
                                                      :: GHC.Base.Maybe GHC.Types.Int
                                                    [LclId] =
                                                        CCCS GHC.Base.Just! [sat_sccAi]; } in
                                                  let {
                                                    sat_sccAI [Occ=Once] :: Text.Printf.FieldFormat
                                                    [LclId] =
                                                        CCCS Text.Printf.FieldFormat! [sat_sccAj
                                                                                       sat_sccAo
                                                                                       sat_sccAx
                                                                                       w2_sccyf
                                                                                       w3_sccyg
                                                                                       sat_sccAC
                                                                                       sat_sccAH];
                                                  } in  (#,,#) [sat_sccAI sat_sccAN sat_sccAS];
                                            };
                                      };
                                };
                          };
                      ' '# ->
                          let {
                            sat_sccAW [Occ=Once] :: GHC.Base.Maybe Text.Printf.FormatSign
                            [LclId] =
                                [w2_sccyf] \u []
                                    case w2_sccyf of {
                                      GHC.Base.Nothing -> lvl54_rcccU;
                                      GHC.Base.Just ds3_sccAU [Occ=Once!] ->
                                          case ds3_sccAU of {
                                            Text.Printf.SignPlus -> lvl50_rcccQ;
                                            Text.Printf.SignSpace -> lvl54_rcccU;
                                          };
                                    };
                          } in 
                            $wgetSpecs_rcccV
                                w_sccyd w1_sccye sat_sccAW w3_sccyg cs0_sccym w5_sccyi;
                      '#'# ->
                          $wgetSpecs_rcccV
                              w_sccyd w1_sccye w2_sccyf GHC.Types.True cs0_sccym w5_sccyi;
                      '*'# ->
                          let {
                            ds3_sccAX [Dmd=<L,U(1*U,U(U))>]
                              :: ([Text.Printf.UPrintf], GHC.Types.Int)
                            [LclId] =
                                [w5_sccyi] \u []
                                    case $wgetStar_rcccL w5_sccyi of {
                                      (#,#) ww1_sccAZ [Occ=Once] ww2_sccB0 [Occ=Once] ->
                                          (,) [ww1_sccAZ ww2_sccB0];
                                    }; } in
                          let {
                            ds4_sccB1 [Dmd=<L,U(1*U,U,U)>]
                              :: (GHC.Base.Maybe GHC.Types.Int, [GHC.Types.Char],
                                  [Text.Printf.UPrintf])
                            [LclId] =
                                [cs0_sccym ds3_sccAX] \u []
                                    case cs0_sccym of wild2_sccB2 {
                                      [] ->
                                          let {
                                            sat_sccB6 [Occ=Once] :: [Text.Printf.UPrintf]
                                            [LclId] =
                                                [ds3_sccAX] \u []
                                                    case ds3_sccAX of {
                                                      (,) us'_sccB4 [Occ=Once] _ [Occ=Dead] ->
                                                          us'_sccB4;
                                                    };
                                          } in  (,,) [GHC.Base.Nothing GHC.Types.[] sat_sccB6];
                                      : ds5_sccB7 [Occ=Once!] ds6_sccB8 [Occ=Once!] ->
                                          case ds5_sccB7 of {
                                            GHC.Types.C# ds7_sccBa [Occ=Once!] ->
                                                case ds7_sccBa of {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sccBf [Occ=Once]
                                                          :: [Text.Printf.UPrintf]
                                                        [LclId] =
                                                            [ds3_sccAX] \u []
                                                                case ds3_sccAX of {
                                                                  (,) us'_sccBd [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                      us'_sccBd;
                                                                };
                                                      } in 
                                                        (,,) [GHC.Base.Nothing
                                                              wild2_sccB2
                                                              sat_sccBf];
                                                  '.'# ->
                                                      case ds6_sccB8 of wild4_sccBg {
                                                        [] ->
                                                            let {
                                                              sat_sccBk [Occ=Once]
                                                                :: [Text.Printf.UPrintf]
                                                              [LclId] =
                                                                  [ds3_sccAX] \u []
                                                                      case ds3_sccAX of {
                                                                        (,) us'_sccBi [Occ=Once]
                                                                            _ [Occ=Dead] ->
                                                                            us'_sccBi;
                                                                      };
                                                            } in 
                                                              (,,) [lvl52_rcccS
                                                                    lvl53_rcccT
                                                                    sat_sccBk];
                                                        : ds9_sccBl [Occ=Once!]
                                                          r_sccBm [Occ=Once] ->
                                                            case ds9_sccBl of {
                                                              GHC.Types.C# ds10_sccBo [Occ=Once!] ->
                                                                  case ds10_sccBo of {
                                                                    __DEFAULT ->
                                                                        let {
                                                                          ds12_sccBq [Dmd=<L,U(1*U,1*U)>]
                                                                            :: (GHC.Types.Int,
                                                                                GHC.Base.String)
                                                                          [LclId] =
                                                                              [wild4_sccBg] \u []
                                                                                  case
                                                                                      GHC.List.$wspan
                                                                                          GHC.Unicode.isDigit
                                                                                          wild4_sccBg
                                                                                  of
                                                                                  { (#,#) ww1_sccBs [Occ=Once!]
                                                                                          ww2_sccBt [Occ=Once*] ->
                                                                                        case
                                                                                            ww1_sccBs
                                                                                        of
                                                                                        wild6_sccBu
                                                                                        { [] ->
                                                                                              (,) [lvl46_rcccM
                                                                                                   ww2_sccBt];
                                                                                          : _ [Occ=Dead]
                                                                                            _ [Occ=Dead] ->
                                                                                              let {
                                                                                                sat_sccBE [Occ=Once]
                                                                                                  :: GHC.Types.Int
                                                                                                [LclId] =
                                                                                                    [wild6_sccBu] \u []
                                                                                                        case
                                                                                                            Text.ParserCombinators.ReadP.run
                                                                                                                lvl42_rcccH
                                                                                                                wild6_sccBu
                                                                                                        of
                                                                                                        sat_sccBx
                                                                                                        { __DEFAULT ->
                                                                                                              case
                                                                                                                  Text.Read.readEither8
                                                                                                                      sat_sccBx
                                                                                                              of
                                                                                                              { [] ->
                                                                                                                    lvl44_rcccJ;
                                                                                                                : x_sccBz [Occ=Once]
                                                                                                                  ds13_sccBA [Occ=Once!] ->
                                                                                                                    case
                                                                                                                        ds13_sccBA
                                                                                                                    of
                                                                                                                    { [] ->
                                                                                                                          x_sccBz;
                                                                                                                      : _ [Occ=Dead]
                                                                                                                        _ [Occ=Dead] ->
                                                                                                                          lvl45_rcccK;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                              } in 
                                                                                                (,) [sat_sccBE
                                                                                                     ww2_sccBt];
                                                                                        };
                                                                                  }; } in
                                                                        let {
                                                                          sat_sccBR [Occ=Once]
                                                                            :: [Text.Printf.UPrintf]
                                                                          [LclId] =
                                                                              [ds3_sccAX] \u []
                                                                                  case
                                                                                      ds3_sccAX
                                                                                  of
                                                                                  { (,) us'_sccBP [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                                        us'_sccBP;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sccBN [Occ=Once]
                                                                            :: [GHC.Types.Char]
                                                                          [LclId] =
                                                                              [ds12_sccBq] \u []
                                                                                  case
                                                                                      ds12_sccBq
                                                                                  of
                                                                                  { (,) _ [Occ=Dead]
                                                                                        r'_sccBM [Occ=Once] ->
                                                                                        r'_sccBM;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sccBI [Occ=Once]
                                                                            :: GHC.Types.Int
                                                                          [LclId] =
                                                                              [ds12_sccBq] \u []
                                                                                  case
                                                                                      ds12_sccBq
                                                                                  of
                                                                                  { (,) p'_sccBG [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                                        p'_sccBG;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sccBJ [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 GHC.Types.Int
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [sat_sccBI];
                                                                        } in 
                                                                          (,,) [sat_sccBJ
                                                                                sat_sccBN
                                                                                sat_sccBR];
                                                                    '*'# ->
                                                                        let {
                                                                          ds12_sccBS [Dmd=<L,U(1*U,1*U)>]
                                                                            :: ([Text.Printf.UPrintf],
                                                                                GHC.Types.Int)
                                                                          [LclId] =
                                                                              [ds3_sccAX] \u []
                                                                                  case
                                                                                      ds3_sccAX
                                                                                  of
                                                                                  { (,) us'_sccBU [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                                        case
                                                                                            $wgetStar_rcccL
                                                                                                us'_sccBU
                                                                                        of
                                                                                        { (#,#) ww1_sccBX [Occ=Once]
                                                                                                ww2_sccBY [Occ=Once] ->
                                                                                              (,) [ww1_sccBX
                                                                                                   ww2_sccBY];
                                                                                        };
                                                                                  }; } in
                                                                        let {
                                                                          sat_sccC7 [Occ=Once]
                                                                            :: [Text.Printf.UPrintf]
                                                                          [LclId] =
                                                                              [ds12_sccBS] \u []
                                                                                  case
                                                                                      ds12_sccBS
                                                                                  of
                                                                                  { (,) us'''_sccC5 [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                                        us'''_sccC5;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sccC2 [Occ=Once]
                                                                            :: GHC.Types.Int
                                                                          [LclId] =
                                                                              [ds12_sccBS] \u []
                                                                                  case
                                                                                      ds12_sccBS
                                                                                  of
                                                                                  { (,) _ [Occ=Dead]
                                                                                        p'_sccC1 [Occ=Once] ->
                                                                                        p'_sccC1;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sccC3 [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 GHC.Types.Int
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [sat_sccC2];
                                                                        } in 
                                                                          (,,) [sat_sccC3
                                                                                r_sccBm
                                                                                sat_sccC7];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    }; } in
                          let {
                            ds5_sccC8 [Dmd=<L,U(1*U,1*U,1*U)>] :: Text.Printf.FormatParse
                            [LclId] =
                                [ds4_sccB1] \u []
                                    case ds4_sccB1 of {
                                      (,,) _ [Occ=Dead]
                                           cs''_sccCb [Occ=Once]
                                           us''_sccCc [Occ=Once!] ->
                                          case us''_sccCc of {
                                            [] -> Text.Printf.errorMissingArgument;
                                            : ds7_sccCe [Occ=Once!] _ [Occ=Dead] ->
                                                case ds7_sccCe of {
                                                  (,) ufmt_sccCh [Occ=Once!] _ [Occ=Dead] ->
                                                      ufmt_sccCh cs''_sccCb;
                                                };
                                          };
                                    }; } in
                          let {
                            sat_sccD0 [Occ=Once] :: [Text.Printf.UPrintf]
                            [LclId] =
                                [ds4_sccB1] \u []
                                    case ds4_sccB1 of {
                                      (,,) _ [Occ=Dead] _ [Occ=Dead] us''_sccCZ [Occ=Once] ->
                                          us''_sccCZ;
                                    }; } in
                          let {
                            sat_sccCV [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [ds5_sccC8] \u []
                                    case ds5_sccC8 of {
                                      Text.Printf.FormatParse _ [Occ=Dead]
                                                              _ [Occ=Dead]
                                                              cs_sccCU [Occ=Once] ->
                                          cs_sccCU;
                                    }; } in
                          let {
                            sat_sccCP [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                [ds5_sccC8] \u []
                                    case ds5_sccC8 of {
                                      Text.Printf.FormatParse _ [Occ=Dead]
                                                              c_sccCN [Occ=Once]
                                                              _ [Occ=Dead] ->
                                          c_sccCN;
                                    }; } in
                          let {
                            sat_sccCK [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [ds5_sccC8] \u []
                                    case ds5_sccC8 of {
                                      Text.Printf.FormatParse ms_sccCH [Occ=Once]
                                                              _ [Occ=Dead]
                                                              _ [Occ=Dead] ->
                                          ms_sccCH;
                                    }; } in
                          let {
                            sat_sccCF [Occ=Once] :: GHC.Base.Maybe Text.Printf.FormatAdjustment
                            [LclId] =
                                [w_sccyd w1_sccye ds3_sccAX] \u []
                                    case ds3_sccAX of {
                                      (,) _ [Occ=Dead] n_sccCz [Occ=Once!] ->
                                          case n_sccCz of {
                                            GHC.Types.I# x_sccCB [Occ=Once] ->
                                                case <# [x_sccCB 0#] of {
                                                  __DEFAULT ->
                                                      case w_sccyd of {
                                                        GHC.Types.False ->
                                                            case w1_sccye of {
                                                              GHC.Types.False ->
                                                                  GHC.Base.Nothing [];
                                                              GHC.Types.True -> lvl48_rcccO;
                                                            };
                                                        GHC.Types.True -> lvl47_rcccN;
                                                      };
                                                  1# -> lvl47_rcccN;
                                                };
                                          };
                                    }; } in
                          let {
                            sat_sccCw [Occ=Once] :: GHC.Base.Maybe GHC.Types.Int
                            [LclId] =
                                [ds4_sccB1] \u []
                                    case ds4_sccB1 of {
                                      (,,) p_sccCt [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] -> p_sccCt;
                                    }; } in
                          let {
                            sat_sccCq [Occ=Once] :: GHC.Types.Int
                            [LclId] =
                                [ds3_sccAX] \u []
                                    case ds3_sccAX of {
                                      (,) _ [Occ=Dead] n_sccCl [Occ=Once!] ->
                                          case n_sccCl of wild3_sccCm {
                                            GHC.Types.I# x_sccCn ->
                                                case >=# [x_sccCn 0#] of {
                                                  __DEFAULT ->
                                                      case negateInt# [x_sccCn] of sat_sccCp {
                                                        __DEFAULT -> GHC.Types.I# [sat_sccCp];
                                                      };
                                                  1# -> wild3_sccCm;
                                                };
                                          };
                                    }; } in
                          let {
                            sat_sccCr [Occ=Once] :: GHC.Base.Maybe GHC.Types.Int
                            [LclId] =
                                CCCS GHC.Base.Just! [sat_sccCq]; } in
                          let {
                            sat_sccCQ [Occ=Once] :: Text.Printf.FieldFormat
                            [LclId] =
                                CCCS Text.Printf.FieldFormat! [sat_sccCr
                                                               sat_sccCw
                                                               sat_sccCF
                                                               w2_sccyf
                                                               w3_sccyg
                                                               sat_sccCK
                                                               sat_sccCP];
                          } in  (#,,#) [sat_sccCQ sat_sccCV sat_sccD0];
                      '+'# ->
                          $wgetSpecs_rcccV
                              w_sccyd w1_sccye lvl50_rcccQ w3_sccyg cs0_sccym w5_sccyi;
                      '-'# ->
                          $wgetSpecs_rcccV
                              GHC.Types.True w1_sccye w2_sccyf w3_sccyg cs0_sccym w5_sccyi;
                      '.'# ->
                          let {
                            ds3_sccD1 [Dmd=<L,U(1*U,U,U)>]
                              :: (GHC.Types.Int, [GHC.Types.Char], [Text.Printf.UPrintf])
                            [LclId] =
                                [w5_sccyi cs0_sccym] \u []
                                    case cs0_sccym of wild2_sccD2 {
                                      [] ->
                                          case lvl49_rcccP of {
                                            (,) p_sccD4 [Occ=Once] cs'_sccD5 [Occ=Once] ->
                                                (,,) [p_sccD4 cs'_sccD5 w5_sccyi];
                                          };
                                      : ds4_sccD6 [Occ=Once!] cs''_sccD7 [Occ=Once] ->
                                          case ds4_sccD6 of {
                                            GHC.Types.C# ds5_sccD9 [Occ=Once!] ->
                                                case ds5_sccD9 of {
                                                  __DEFAULT ->
                                                      case
                                                          GHC.List.$wspan
                                                              GHC.Unicode.isDigit wild2_sccD2
                                                      of
                                                      { (#,#) ww1_sccDc [Occ=Once!]
                                                              ww2_sccDd [Occ=Once*] ->
                                                            case ww1_sccDc of wild4_sccDe {
                                                              [] ->
                                                                  (,,) [lvl46_rcccM
                                                                        ww2_sccDd
                                                                        w5_sccyi];
                                                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                  let {
                                                                    sat_sccDo [Occ=Once]
                                                                      :: GHC.Types.Int
                                                                    [LclId] =
                                                                        [wild4_sccDe] \u []
                                                                            case
                                                                                Text.ParserCombinators.ReadP.run
                                                                                    lvl42_rcccH
                                                                                    wild4_sccDe
                                                                            of
                                                                            sat_sccDh
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      Text.Read.readEither8
                                                                                          sat_sccDh
                                                                                  of
                                                                                  { [] ->
                                                                                        lvl44_rcccJ;
                                                                                    : x_sccDj [Occ=Once]
                                                                                      ds7_sccDk [Occ=Once!] ->
                                                                                        case
                                                                                            ds7_sccDk
                                                                                        of
                                                                                        { [] ->
                                                                                              x_sccDj;
                                                                                          : _ [Occ=Dead]
                                                                                            _ [Occ=Dead] ->
                                                                                              lvl45_rcccK;
                                                                                        };
                                                                                  };
                                                                            };
                                                                  } in 
                                                                    (,,) [sat_sccDo
                                                                          ww2_sccDd
                                                                          w5_sccyi];
                                                            };
                                                      };
                                                  '*'# ->
                                                      let {
                                                        ds7_sccDp [Dmd=<L,U(1*U,1*U)>]
                                                          :: ([Text.Printf.UPrintf], GHC.Types.Int)
                                                        [LclId] =
                                                            [w5_sccyi] \u []
                                                                case $wgetStar_rcccL w5_sccyi of {
                                                                  (#,#) ww1_sccDr [Occ=Once]
                                                                        ww2_sccDs [Occ=Once] ->
                                                                      (,) [ww1_sccDr ww2_sccDs];
                                                                }; } in
                                                      let {
                                                        sat_sccDA [Occ=Once]
                                                          :: [Text.Printf.UPrintf]
                                                        [LclId] =
                                                            [ds7_sccDp] \u []
                                                                case ds7_sccDp of {
                                                                  (,) us''_sccDy [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                      us''_sccDy;
                                                                }; } in
                                                      let {
                                                        sat_sccDw [Occ=Once] :: GHC.Types.Int
                                                        [LclId] =
                                                            [ds7_sccDp] \u []
                                                                case ds7_sccDp of {
                                                                  (,) _ [Occ=Dead]
                                                                      p'_sccDv [Occ=Once] ->
                                                                      p'_sccDv;
                                                                };
                                                      } in  (,,) [sat_sccDw cs''_sccD7 sat_sccDA];
                                                };
                                          };
                                    }; } in
                          let {
                            ds4_sccDB [Dmd=<L,U(1*U,1*U,1*U)>] :: Text.Printf.FormatParse
                            [LclId] =
                                [ds3_sccD1] \u []
                                    case ds3_sccD1 of {
                                      (,,) _ [Occ=Dead]
                                           cs'_sccDE [Occ=Once]
                                           us'_sccDF [Occ=Once!] ->
                                          case us'_sccDF of {
                                            [] -> Text.Printf.errorMissingArgument;
                                            : ds6_sccDH [Occ=Once!] _ [Occ=Dead] ->
                                                case ds6_sccDH of {
                                                  (,) ufmt_sccDK [Occ=Once!] _ [Occ=Dead] ->
                                                      ufmt_sccDK cs'_sccDE;
                                                };
                                          };
                                    }; } in
                          let {
                            sat_sccEf [Occ=Once] :: [Text.Printf.UPrintf]
                            [LclId] =
                                [ds3_sccD1] \u []
                                    case ds3_sccD1 of {
                                      (,,) _ [Occ=Dead] _ [Occ=Dead] us'_sccEe [Occ=Once] ->
                                          us'_sccEe;
                                    }; } in
                          let {
                            sat_sccEa [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [ds4_sccDB] \u []
                                    case ds4_sccDB of {
                                      Text.Printf.FormatParse _ [Occ=Dead]
                                                              _ [Occ=Dead]
                                                              cs_sccE9 [Occ=Once] ->
                                          cs_sccE9;
                                    }; } in
                          let {
                            sat_sccE4 [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                [ds4_sccDB] \u []
                                    case ds4_sccDB of {
                                      Text.Printf.FormatParse _ [Occ=Dead]
                                                              c_sccE2 [Occ=Once]
                                                              _ [Occ=Dead] ->
                                          c_sccE2;
                                    }; } in
                          let {
                            sat_sccDZ [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [ds4_sccDB] \u []
                                    case ds4_sccDB of {
                                      Text.Printf.FormatParse ms_sccDW [Occ=Once]
                                                              _ [Occ=Dead]
                                                              _ [Occ=Dead] ->
                                          ms_sccDW;
                                    }; } in
                          let {
                            sat_sccDU [Occ=Once] :: GHC.Base.Maybe Text.Printf.FormatAdjustment
                            [LclId] =
                                [w_sccyd w1_sccye] \u []
                                    case w_sccyd of {
                                      GHC.Types.False ->
                                          case w1_sccye of {
                                            GHC.Types.False -> GHC.Base.Nothing [];
                                            GHC.Types.True -> lvl48_rcccO;
                                          };
                                      GHC.Types.True -> lvl47_rcccN;
                                    }; } in
                          let {
                            sat_sccDQ [Occ=Once] :: GHC.Types.Int
                            [LclId] =
                                [ds3_sccD1] \u []
                                    case ds3_sccD1 of {
                                      (,,) p_sccDN [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] -> p_sccDN;
                                    }; } in
                          let {
                            sat_sccDR [Occ=Once] :: GHC.Base.Maybe GHC.Types.Int
                            [LclId] =
                                CCCS GHC.Base.Just! [sat_sccDQ]; } in
                          let {
                            sat_sccE5 [Occ=Once] :: Text.Printf.FieldFormat
                            [LclId] =
                                CCCS Text.Printf.FieldFormat! [GHC.Base.Nothing
                                                               sat_sccDR
                                                               sat_sccDU
                                                               w2_sccyf
                                                               w3_sccyg
                                                               sat_sccDZ
                                                               sat_sccE4];
                          } in  (#,,#) [sat_sccE5 sat_sccEa sat_sccEf];
                      '0'# ->
                          $wgetSpecs_rcccV
                              w_sccyd GHC.Types.True w2_sccyf w3_sccyg cs0_sccym w5_sccyi;
                    };
              };
        };

f_rcccW :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['%'#];

Text.Printf.uprintfs [Occ=LoopBreaker]
  :: GHC.Base.String -> [Text.Printf.UPrintf] -> GHC.Show.ShowS
[GblId, Arity=3, Str=<S,1*U><L,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sccEg ds1_sccEh eta_sccEi]
        case ds_sccEg of {
          [] ->
              case ds1_sccEh of {
                [] -> eta_sccEi;
                : _ [Occ=Dead] _ [Occ=Dead] -> Text.Printf.errorShortFormat;
              };
          : ds2_sccEo [Occ=Once!] ds3_sccEp ->
              case ds2_sccEo of wild1_sccEq {
                GHC.Types.C# ds4_sccEr [Occ=Once!] ->
                    case ds4_sccEr of {
                      __DEFAULT ->
                          let {
                            sat_sccEt [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [ds1_sccEh eta_sccEi ds3_sccEp] \u []
                                    Text.Printf.uprintfs ds3_sccEp ds1_sccEh eta_sccEi;
                          } in  : [wild1_sccEq sat_sccEt];
                      '%'# ->
                          let-no-escape {
                            fail_sccEu [Occ=Once*!T[1], Dmd=<L,1*C1(U)>]
                              :: GHC.Prim.Void# -> GHC.Base.String
                            [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                sat-only [ds1_sccEh eta_sccEi ds3_sccEp] \r [ds6_sccEv]
                                    case ds1_sccEh of wild2_sccEw {
                                      [] -> Text.Printf.errorMissingArgument;
                                      : _ [Occ=Dead] _ [Occ=Dead] ->
                                          case
                                              $wgetSpecs_rcccV
                                                  GHC.Types.False
                                                  GHC.Types.False
                                                  GHC.Base.Nothing
                                                  GHC.Types.False
                                                  ds3_sccEp
                                                  wild2_sccEw
                                          of
                                          { (#,,#) ww1_sccEB [Occ=Once]
                                                   ww2_sccEC [Occ=Once]
                                                   ww3_sccED [Occ=Once!] ->
                                                case ww3_sccED of {
                                                  [] -> Text.Printf.errorMissingArgument;
                                                  : ds9_sccEG [Occ=Once!] us_sccEH [Occ=Once] ->
                                                      case ds9_sccEG of {
                                                        (,) _ [Occ=Dead] u_sccEK [Occ=Once!] ->
                                                            let {
                                                              sat_sccEL [Occ=Once]
                                                                :: GHC.Base.String
                                                              [LclId] =
                                                                  [eta_sccEi
                                                                   ww2_sccEC
                                                                   us_sccEH] \u []
                                                                      Text.Printf.uprintfs
                                                                          ww2_sccEC
                                                                          us_sccEH
                                                                          eta_sccEi;
                                                            } in  u_sccEK ww1_sccEB sat_sccEL;
                                                      };
                                                };
                                          };
                                    };
                          } in 
                            case ds3_sccEp of {
                              [] -> fail_sccEu GHC.Prim.void#;
                              : ds6_sccEN [Occ=Once!] cs_sccEO [Occ=Once] ->
                                  case ds6_sccEN of {
                                    GHC.Types.C# ds7_sccEQ [Occ=Once!] ->
                                        case ds7_sccEQ of {
                                          __DEFAULT -> fail_sccEu GHC.Prim.void#;
                                          '%'# ->
                                              let {
                                                sat_sccES [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [ds1_sccEh eta_sccEi cs_sccEO] \u []
                                                        Text.Printf.uprintfs
                                                            cs_sccEO ds1_sccEh eta_sccEi;
                                              } in  : [f_rcccW sat_sccES];
                                        };
                                  };
                            };
                    };
              };
        };

Text.Printf.$fPrintfTypeIO_$cspr
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (() :: *)) =>
     GHC.Base.String -> [Text.Printf.UPrintf] -> GHC.Types.IO a
[GblId,
 Arity=3,
 Str=<S(S),1*U(1*U)><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$d~_sccET eta_sccEU eta1_sccEV]
        case GHC.Types.heq_sel $d~_sccET of {
          __DEFAULT ->
              let {
                sat_sccEX [Occ=Once] :: GHC.Base.String
                [LclId] =
                    [eta_sccEU eta1_sccEV] \u []
                        let {
                          sat_sccEW [Occ=Once, Dmd=<L,1*U>] :: [Text.Printf.UPrintf]
                          [LclId] =
                              [eta1_sccEV] \s [] GHC.List.reverse1 eta1_sccEV GHC.Types.[];
                        } in  Text.Printf.uprintfs eta_sccEU sat_sccEW GHC.Types.[];
              } in 
                GHC.IO.Handle.Text.hPutStr'
                    GHC.IO.Handle.FD.stdout sat_sccEX GHC.Types.False;
        };

Text.Printf.$fPrintfTypeIO [InlPrag=INLINE (sat-args=0)]
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (() :: *)) =>
     Text.Printf.PrintfType (GHC.Types.IO a)
[GblId[DFunId(nt)],
 Arity=3,
 Str=<S(S),1*U(1*U)><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Text.Printf.$fPrintfTypeIO_$cspr eta_B3 eta_B2 eta_B1;

Text.Printf.$fPrintfType[]_$cspr
  :: forall c.
     Text.Printf.IsChar c =>
     GHC.Base.String -> [Text.Printf.UPrintf] -> [c]
[GblId,
 Arity=3,
 Str=<L,1*U(A,1*C(U))><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dIsChar_sccEY fmts_sccEZ args_sccF0]
        let {
          sat_sccF2 [Occ=Once, Dmd=<L,1*U>] :: [Text.Printf.UPrintf]
          [LclId] =
              [args_sccF0] \s [] GHC.List.reverse1 args_sccF0 GHC.Types.[];
        } in 
          case
              Text.Printf.uprintfs fmts_sccEZ sat_sccF2 GHC.Types.[]
          of
          sat_sccF3
          { __DEFAULT ->
                let {
                  sat_sccF1 [Occ=Once, Dmd=<L,C(U)>] :: GHC.Types.Char -> c_ac8Vv
                  [LclId] =
                      [$dIsChar_sccEY] \u [] Text.Printf.fromChar $dIsChar_sccEY;
                } in  GHC.Base.map sat_sccF1 sat_sccF3;
          };

Text.Printf.$fPrintfType[] [InlPrag=INLINE (sat-args=0)]
  :: forall c. Text.Printf.IsChar c => Text.Printf.PrintfType [c]
[GblId[DFunId(nt)],
 Arity=3,
 Str=<L,1*U(A,1*C(U))><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Text.Printf.$fPrintfType[]_$cspr eta_B3 eta_B2 eta_B1;

Text.Printf.$fHPrintfTypeIO_$chspr
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (() :: *)) =>
     GHC.IO.Handle.Types.Handle
     -> GHC.Base.String -> [Text.Printf.UPrintf] -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<S(S),1*U(1*U)><L,U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$d~_sccF4 eta_sccF5 eta1_sccF6 eta2_sccF7]
        case GHC.Types.heq_sel $d~_sccF4 of {
          __DEFAULT ->
              let {
                sat_sccF9 [Occ=Once] :: GHC.Base.String
                [LclId] =
                    [eta1_sccF6 eta2_sccF7] \u []
                        let {
                          sat_sccF8 [Occ=Once, Dmd=<L,1*U>] :: [Text.Printf.UPrintf]
                          [LclId] =
                              [eta2_sccF7] \s [] GHC.List.reverse eta2_sccF7;
                        } in  Text.Printf.uprintfs eta1_sccF6 sat_sccF8 GHC.Types.[];
              } in 
                GHC.IO.Handle.Text.hPutStr' eta_sccF5 sat_sccF9 GHC.Types.False;
        };

Text.Printf.$fHPrintfTypeIO [InlPrag=INLINE (sat-args=0)]
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (() :: *)) =>
     Text.Printf.HPrintfType (GHC.Types.IO a)
[GblId[DFunId(nt)],
 Arity=4,
 Str=<S(S),1*U(1*U)><L,U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Printf.$fHPrintfTypeIO_$chspr eta_B4 eta_B3 eta_B2 eta_B1;

Text.Printf.FormatParse
  :: GHC.Base.String
     -> GHC.Types.Char -> GHC.Base.String -> Text.Printf.FormatParse
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Text.Printf.FormatParse [eta_B3 eta_B2 eta_B1];

Text.Printf.FieldFormat
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Types.Char
     -> Text.Printf.FieldFormat
[GblId[DataCon],
 Arity=7,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Printf.FieldFormat [eta_B7
                                 eta_B6
                                 eta_B5
                                 eta_B4
                                 eta_B3
                                 eta_B2
                                 eta_B1];

Text.Printf.SignPlus :: Text.Printf.FormatSign
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.SignPlus! [];

Text.Printf.SignSpace :: Text.Printf.FormatSign
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.SignSpace! [];

Text.Printf.LeftAdjust :: Text.Printf.FormatAdjustment
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.LeftAdjust! [];

Text.Printf.ZeroPad :: Text.Printf.FormatAdjustment
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.ZeroPad! [];

Text.Printf.C:IsChar
  :: forall c.
     (c -> GHC.Types.Char)
     -> (GHC.Types.Char -> c) -> Text.Printf.IsChar c
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Printf.C:IsChar [eta_B2 eta_B1];

Text.Printf.C:PrintfArg
  :: forall a.
     (a -> Text.Printf.FieldFormatter)
     -> (a -> Text.Printf.ModifierParser) -> Text.Printf.PrintfArg a
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Printf.C:PrintfArg [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:07:03.632409088 UTC

Text.Printf.toChar
  :: forall c. Text.Printf.IsChar c => c -> GHC.Types.Char
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_scccY]
        case v_scccY of {
          Text.Printf.C:IsChar v_sccd0 [Occ=Once] _ [Occ=Dead] -> v_sccd0;
        };

Text.Printf.fromChar
  :: forall c. Text.Printf.IsChar c => GHC.Types.Char -> c
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_sccd2]
        case v_sccd2 of {
          Text.Printf.C:IsChar _ [Occ=Dead] v_sccd5 [Occ=Once] -> v_sccd5;
        };

Text.Printf.formatArg
  :: forall a.
     Text.Printf.PrintfArg a =>
     a -> Text.Printf.FieldFormatter
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_sccd6]
        case v_sccd6 of {
          Text.Printf.C:PrintfArg v_sccd8 [Occ=Once] _ [Occ=Dead] -> v_sccd8;
        };

Text.Printf.parseFormat
  :: forall a.
     Text.Printf.PrintfArg a =>
     a -> Text.Printf.ModifierParser
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_sccda]
        case v_sccda of {
          Text.Printf.C:PrintfArg _ [Occ=Dead] v_sccdd [Occ=Once] -> v_sccdd;
        };

Text.Printf.hspr [InlPrag=INLINE]
  :: forall t.
     Text.Printf.HPrintfType t =>
     GHC.IO.Handle.Types.Handle
     -> GHC.Base.String -> [Text.Printf.UPrintf] -> t
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_sccde] v_sccde;

Text.Printf.spr [InlPrag=INLINE]
  :: forall t.
     Text.Printf.PrintfType t =>
     GHC.Base.String -> [Text.Printf.UPrintf] -> t
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_sccdf] v_sccdf;

Text.Printf.$fIsCharChar_$cfromChar
  :: GHC.Types.Char -> GHC.Types.Char
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [c_sccdg] c_sccdg;

Text.Printf.$fIsCharChar [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.IsChar GHC.Types.Char
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Text.Printf.C:IsChar! [Text.Printf.$fIsCharChar_$cfromChar
                                         Text.Printf.$fIsCharChar_$cfromChar];

Text.Printf.$fHPrintfType(->)_$chspr
  :: forall a r.
     (Text.Printf.PrintfArg a, Text.Printf.HPrintfType r) =>
     GHC.IO.Handle.Types.Handle
     -> GHC.Base.String -> [Text.Printf.UPrintf] -> a -> r
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(C(S))),1*C1(C1(C1(U)))><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dPrintfArg_sccdh
           $dHPrintfType_sccdi
           hdl_sccdj
           fmts_sccdk
           args_sccdl
           a1_sccdm]
        let {
          sat_sccdo [Occ=Once] :: Text.Printf.FieldFormatter
          [LclId] =
              [$dPrintfArg_sccdh a1_sccdm] \u []
                  Text.Printf.formatArg $dPrintfArg_sccdh a1_sccdm; } in
        let {
          sat_sccdn [Occ=Once] :: Text.Printf.ModifierParser
          [LclId] =
              [$dPrintfArg_sccdh a1_sccdm] \u []
                  Text.Printf.parseFormat $dPrintfArg_sccdh a1_sccdm; } in
        let {
          sat_sccdp [Occ=Once]
            :: (Text.Printf.ModifierParser, Text.Printf.FieldFormatter)
          [LclId] =
              CCCS (,)! [sat_sccdn sat_sccdo]; } in
        let {
          sat_sccdq [Occ=Once] :: [Text.Printf.UPrintf]
          [LclId] =
              CCCS :! [sat_sccdp args_sccdl];
        } in  $dHPrintfType_sccdi hdl_sccdj fmts_sccdk sat_sccdq;

Text.Printf.$fHPrintfType(->) [InlPrag=INLINE (sat-args=0)]
  :: forall a r.
     (Text.Printf.PrintfArg a, Text.Printf.HPrintfType r) =>
     Text.Printf.HPrintfType (a -> r)
[GblId[DFunId(nt)],
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(C(S))),1*C1(C1(C1(U)))><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Printf.$fHPrintfType(->)_$chspr
            eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

Text.Printf.$fPrintfType(->)_$cspr
  :: forall a r.
     (Text.Printf.PrintfArg a, Text.Printf.PrintfType r) =>
     GHC.Base.String -> [Text.Printf.UPrintf] -> a -> r
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(S)),1*C1(C1(U))><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dPrintfArg_sccdr
           $dPrintfType_sccds
           fmts_sccdt
           args_sccdu
           a1_sccdv]
        let {
          sat_sccdx [Occ=Once] :: Text.Printf.FieldFormatter
          [LclId] =
              [$dPrintfArg_sccdr a1_sccdv] \u []
                  Text.Printf.formatArg $dPrintfArg_sccdr a1_sccdv; } in
        let {
          sat_sccdw [Occ=Once] :: Text.Printf.ModifierParser
          [LclId] =
              [$dPrintfArg_sccdr a1_sccdv] \u []
                  Text.Printf.parseFormat $dPrintfArg_sccdr a1_sccdv; } in
        let {
          sat_sccdy [Occ=Once]
            :: (Text.Printf.ModifierParser, Text.Printf.FieldFormatter)
          [LclId] =
              CCCS (,)! [sat_sccdw sat_sccdx]; } in
        let {
          sat_sccdz [Occ=Once] :: [Text.Printf.UPrintf]
          [LclId] =
              CCCS :! [sat_sccdy args_sccdu];
        } in  $dPrintfType_sccds fmts_sccdt sat_sccdz;

Text.Printf.$fPrintfType(->) [InlPrag=INLINE (sat-args=0)]
  :: forall a r.
     (Text.Printf.PrintfArg a, Text.Printf.PrintfType r) =>
     Text.Printf.PrintfType (a -> r)
[GblId[DFunId(nt)],
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(S)),1*C1(C1(U))><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Printf.$fPrintfType(->)_$cspr
            eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

Text.Printf.fmtChar :: Text.Printf.FieldFormat -> GHC.Types.Char
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLS),1*U(A,A,A,A,A,A,1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [ds_sccdA]
        case ds_sccdA of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds7_sccdI [Occ=Once] ->
              ds7_sccdI;
        };

Text.Printf.fmtModifiers
  :: Text.Printf.FieldFormat -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sccdJ]
        case ds_sccdJ of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds6_sccdQ [Occ=Once]
                                  _ [Occ=Dead] ->
              ds6_sccdQ;
        };

Text.Printf.fmtAlternate
  :: Text.Printf.FieldFormat -> GHC.Types.Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sccdS]
        case ds_sccdS of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds5_sccdY [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds5_sccdY;
        };

Text.Printf.fmtSign
  :: Text.Printf.FieldFormat -> GHC.Base.Maybe Text.Printf.FormatSign
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_scce1]
        case ds_scce1 of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds4_scce6 [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds4_scce6;
        };

Text.Printf.fmtAdjust
  :: Text.Printf.FieldFormat
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sccea]
        case ds_sccea of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds3_sccee [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds3_sccee;
        };

Text.Printf.fmtPrecision
  :: Text.Printf.FieldFormat -> GHC.Base.Maybe GHC.Types.Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sccej]
        case ds_sccej of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  ds2_sccem [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds2_sccem;
        };

Text.Printf.fmtWidth
  :: Text.Printf.FieldFormat -> GHC.Base.Maybe GHC.Types.Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLL),1*U(1*U,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_scces]
        case ds_scces of {
          Text.Printf.FieldFormat ds1_scceu [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds1_scceu;
        };

Text.Printf.fpRest :: Text.Printf.FormatParse -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLS),1*U(A,A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_scceB]
        case ds_scceB of {
          Text.Printf.FormatParse _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds3_scceF [Occ=Once] ->
              ds3_scceF;
        };

Text.Printf.fpChar :: Text.Printf.FormatParse -> GHC.Types.Char
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),1*U(A,1*U(U),A)>m,
 Unf=OtherCon []] =
    [] \r [ds_scceG]
        case ds_scceG of {
          Text.Printf.FormatParse _ [Occ=Dead]
                                  ds2_scceJ [Occ=Once]
                                  _ [Occ=Dead] ->
              ds2_scceJ;
        };

Text.Printf.fpModifiers
  :: Text.Printf.FormatParse -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),1*U(1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_scceL]
        case ds_scceL of {
          Text.Printf.FormatParse ds1_scceN [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds1_scceN;
        };

Text.Printf.printf
  :: forall r. Text.Printf.PrintfType r => GHC.Base.String -> r
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(C(S)),1*C1(C1(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dPrintfType_scceQ fmts_scceR]
        $dPrintfType_scceQ fmts_scceR GHC.Types.[];

Text.Printf.hPrintf
  :: forall r.
     Text.Printf.HPrintfType r =>
     GHC.IO.Handle.Types.Handle -> GHC.Base.String -> r
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(C(C(S))),1*C1(C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dHPrintfType_scceS hdl_scceT fmts_scceU]
        $dHPrintfType_scceS hdl_scceT fmts_scceU GHC.Types.[];

Text.Printf.vFmt
  :: GHC.Types.Char
     -> Text.Printf.FieldFormat -> Text.Printf.FieldFormat
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S(LLLLLLS(S)),1*U(U,U,U,U,U,U,U(U))>m,
 Unf=OtherCon []] =
    [] \r [c_scceV ufmt_scceW]
        case ufmt_scceW of wild_scceX {
          Text.Printf.FieldFormat ds_scceY [Occ=Once]
                                  ds1_scceZ [Occ=Once]
                                  ds2_sccf0 [Occ=Once]
                                  ds3_sccf1 [Occ=Once]
                                  ds4_sccf2 [Occ=Once]
                                  ds5_sccf3 [Occ=Once]
                                  ds6_sccf4 [Occ=Once!] ->
              case ds6_sccf4 of {
                GHC.Types.C# ds7_sccf6 [Occ=Once!] ->
                    case ds7_sccf6 of {
                      __DEFAULT -> wild_scceX;
                      'v'# ->
                          Text.Printf.FieldFormat [ds_scceY
                                                   ds1_scceZ
                                                   ds2_sccf0
                                                   ds3_sccf1
                                                   ds4_sccf2
                                                   ds5_sccf3
                                                   c_scceV];
                    };
              };
        };

lvl_rccbg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: "#;

Text.Printf.perror :: forall a. GHC.Base.String -> a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [s_sccf8]
        case
            GHC.CString.unpackAppendCString# lvl_rccbg s_sccf8
        of
        sat_sccf9
        { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sccf9;
        };

lvl1_rccbh :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShowChar3 GHC.Types.[]];

lvl2_rccbi :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bad formatting char "#;

Text.Printf.$werrorBadFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Prim.Char# -> a
[GblId, Arity=1, Str=<B,1*U>x, Unf=OtherCon []] =
    [] \r [ww_sccfa]
        let {
          sat_sccfe [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sccfa] \u []
                  let {
                    sat_sccfd [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww_sccfa] \u []
                            case ww_sccfa of ds1_sccfb {
                              __DEFAULT ->
                                  let {
                                    sat_sccfc [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [ds1_sccfb] \u []
                                            GHC.Show.$wshowLitChar ds1_sccfb lvl1_rccbh;
                                  } in  : [GHC.Show.$fShowChar3 sat_sccfc];
                              '\''# -> GHC.Show.$fShowChar1;
                            };
                  } in  GHC.CString.unpackAppendCString# lvl2_rccbi sat_sccfd;
        } in 
          case
              GHC.CString.unpackAppendCString# lvl_rccbg sat_sccfe
          of
          sat_sccff
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sccff;
          };

Text.Printf.errorBadFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Types.Char -> a
[GblId, Arity=1, Str=<B,1*U(1*U)>x, Unf=OtherCon []] =
    [] \r [w_sccfg]
        case w_sccfg of {
          GHC.Types.C# ww1_sccfi [Occ=Once] ->
              Text.Printf.$werrorBadFormat ww1_sccfi;
        };

lvl3_rccbj :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: formatting string ended prematurely"#;

Text.Printf.errorShortFormat :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl3_rccbj of sat_sccfj {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sccfj;
        };

Text.Printf.$dmparseFormat
  :: forall a.
     Text.Printf.PrintfArg a =>
     a -> Text.Printf.ModifierParser
[GblId, Arity=3, Str=<L,A><L,A><S,1*U>m, Unf=OtherCon []] =
    [] \r [$dPrintfArg_sccfk ds_sccfl ds1_sccfm]
        case ds1_sccfm of {
          [] -> Text.Printf.errorShortFormat;
          : c_sccfo [Occ=Once] cs_sccfp [Occ=Once] ->
              Text.Printf.FormatParse [GHC.Types.[] c_sccfo cs_sccfp];
        };

lvl4_rccbk :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: argument list ended prematurely"#;

Text.Printf.errorMissingArgument :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl4_rccbk of sat_sccfq {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sccfq;
        };

lvl5_rccbl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: bad argument"#;

Text.Printf.errorBadArgument :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl5_rccbl of sat_sccfr {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sccfr;
        };

Text.Printf.$fPrintfArgDouble9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "-"#;

Text.Printf.$fPrintfArgDouble8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgDouble9;

lvl6_rccbm :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: internal error: impossible dfmt"#;

Text.Printf.$fPrintfArgDouble7
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Double -> GHC.Show.ShowS
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl6_rccbm of sat_sccfs {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sccfs;
        };

Text.Printf.$w$sdfmt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char#
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Bool
     -> GHC.Types.Double
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId,
 Arity=4,
 Str=<S,U><L,U><L,1*U><L,1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ww_sccft w_sccfu w1_sccfv w2_sccfw]
        case ord# [ww_sccft] of sat_sccfy {
          __DEFAULT ->
              case __pkg_ccall base-4.11.0.0 [sat_sccfy GHC.Prim.realWorld#] of {
                Unit# ds1_sccfB [Occ=Once!] ->
                    case ord# [ww_sccft] of sat_sccfD {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [sat_sccfD GHC.Prim.realWorld#] of {
                            Unit# ds3_sccfG ->
                                case int2Word# [ds3_sccfG] of sat_sccfH {
                                  __DEFAULT ->
                                      case leWord# [sat_sccfH 1114111##] of {
                                        __DEFAULT -> GHC.Char.$wlvl ds3_sccfG;
                                        1# ->
                                            let-no-escape {
                                              $j_sccfK [Occ=Once*!T[1], Dmd=<C(S),1*C1(U(U,U))>]
                                                :: [GHC.Types.Char]
                                                   -> (# GHC.Base.String, GHC.Base.String #)
                                              [LclId[JoinId(1)],
                                               Arity=1,
                                               Str=<S,1*U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ds1_sccfB] \r [karg_sccfL]
                                                      case ds1_sccfB of {
                                                        __DEFAULT ->
                                                            case
                                                                GHC.Base.map
                                                                    GHC.Unicode.toUpper karg_sccfL
                                                            of
                                                            wild4_sccfN
                                                            { [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sccfO [Occ=Once!]
                                                                cs_sccfP [Occ=Once] ->
                                                                  case ds4_sccfO of {
                                                                    GHC.Types.C# ds5_sccfR [Occ=Once!] ->
                                                                        case ds5_sccfR of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sccfN];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sccfP];
                                                                        };
                                                                  };
                                                            };
                                                        0# ->
                                                            case karg_sccfL of wild4_sccfT {
                                                              [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sccfU [Occ=Once!]
                                                                cs_sccfV [Occ=Once] ->
                                                                  case ds4_sccfU of {
                                                                    GHC.Types.C# ds5_sccfX [Occ=Once!] ->
                                                                        case ds5_sccfX of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sccfT];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sccfV];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              case chr# [ds3_sccfG] of {
                                                __DEFAULT -> Text.Printf.$fPrintfArgDouble7;
                                                'e'# ->
                                                    case w2_sccfw of {
                                                      GHC.Types.D# ww2_sccg2 [Occ=Once] ->
                                                          case
                                                              GHC.Float.$w$sformatRealFloatAlt
                                                                  GHC.Float.FFExponent
                                                                  w_sccfu
                                                                  GHC.Types.False
                                                                  ww2_sccg2
                                                          of
                                                          sat_sccg3
                                                          { __DEFAULT -> $j_sccfK sat_sccg3;
                                                          };
                                                    };
                                                'f'# ->
                                                    case w1_sccfv of {
                                                      GHC.Types.False ->
                                                          case w2_sccfw of {
                                                            GHC.Types.D# ww2_sccg6 [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt
                                                                        GHC.Float.FFFixed
                                                                        w_sccfu
                                                                        GHC.Types.False
                                                                        ww2_sccg6
                                                                of
                                                                sat_sccg7
                                                                { __DEFAULT -> $j_sccfK sat_sccg7;
                                                                };
                                                          };
                                                      GHC.Types.True ->
                                                          case w2_sccfw of {
                                                            GHC.Types.D# ww2_sccg9 [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt
                                                                        GHC.Float.FFFixed
                                                                        w_sccfu
                                                                        GHC.Types.True
                                                                        ww2_sccg9
                                                                of
                                                                sat_sccga
                                                                { __DEFAULT -> $j_sccfK sat_sccga;
                                                                };
                                                          };
                                                    };
                                                'g'# ->
                                                    case w1_sccfv of {
                                                      GHC.Types.False ->
                                                          case w2_sccfw of {
                                                            GHC.Types.D# ww2_sccgd [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt
                                                                        GHC.Float.FFGeneric
                                                                        w_sccfu
                                                                        GHC.Types.False
                                                                        ww2_sccgd
                                                                of
                                                                sat_sccge
                                                                { __DEFAULT -> $j_sccfK sat_sccge;
                                                                };
                                                          };
                                                      GHC.Types.True ->
                                                          case w2_sccfw of {
                                                            GHC.Types.D# ww2_sccgg [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt
                                                                        GHC.Float.FFGeneric
                                                                        w_sccfu
                                                                        GHC.Types.True
                                                                        ww2_sccgg
                                                                of
                                                                sat_sccgh
                                                                { __DEFAULT -> $j_sccfK sat_sccgh;
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

Text.Printf.$fPrintfArgFloat1
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Float -> GHC.Show.ShowS
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl6_rccbm of sat_sccgi {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sccgi;
        };

Text.Printf.$w$sdfmt1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char#
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Bool
     -> GHC.Types.Float
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId,
 Arity=4,
 Str=<S,U><L,U><L,1*U><L,1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ww_sccgj w_sccgk w1_sccgl w2_sccgm]
        case ord# [ww_sccgj] of sat_sccgo {
          __DEFAULT ->
              case __pkg_ccall base-4.11.0.0 [sat_sccgo GHC.Prim.realWorld#] of {
                Unit# ds1_sccgr [Occ=Once!] ->
                    case ord# [ww_sccgj] of sat_sccgt {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [sat_sccgt GHC.Prim.realWorld#] of {
                            Unit# ds3_sccgw ->
                                case int2Word# [ds3_sccgw] of sat_sccgx {
                                  __DEFAULT ->
                                      case leWord# [sat_sccgx 1114111##] of {
                                        __DEFAULT -> GHC.Char.$wlvl ds3_sccgw;
                                        1# ->
                                            let-no-escape {
                                              $j_sccgA [Occ=Once*!T[1], Dmd=<C(S),1*C1(U(U,U))>]
                                                :: [GHC.Types.Char]
                                                   -> (# GHC.Base.String, GHC.Base.String #)
                                              [LclId[JoinId(1)],
                                               Arity=1,
                                               Str=<S,1*U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ds1_sccgr] \r [karg_sccgB]
                                                      case ds1_sccgr of {
                                                        __DEFAULT ->
                                                            case
                                                                GHC.Base.map
                                                                    GHC.Unicode.toUpper karg_sccgB
                                                            of
                                                            wild4_sccgD
                                                            { [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sccgE [Occ=Once!]
                                                                cs_sccgF [Occ=Once] ->
                                                                  case ds4_sccgE of {
                                                                    GHC.Types.C# ds5_sccgH [Occ=Once!] ->
                                                                        case ds5_sccgH of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sccgD];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sccgF];
                                                                        };
                                                                  };
                                                            };
                                                        0# ->
                                                            case karg_sccgB of wild4_sccgJ {
                                                              [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sccgK [Occ=Once!]
                                                                cs_sccgL [Occ=Once] ->
                                                                  case ds4_sccgK of {
                                                                    GHC.Types.C# ds5_sccgN [Occ=Once!] ->
                                                                        case ds5_sccgN of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sccgJ];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sccgL];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              case chr# [ds3_sccgw] of {
                                                __DEFAULT -> Text.Printf.$fPrintfArgFloat1;
                                                'e'# ->
                                                    case w2_sccgm of {
                                                      GHC.Types.F# ww2_sccgS [Occ=Once] ->
                                                          case
                                                              GHC.Float.$w$sformatRealFloatAlt1
                                                                  GHC.Float.FFExponent
                                                                  w_sccgk
                                                                  GHC.Types.False
                                                                  ww2_sccgS
                                                          of
                                                          sat_sccgT
                                                          { __DEFAULT -> $j_sccgA sat_sccgT;
                                                          };
                                                    };
                                                'f'# ->
                                                    case w1_sccgl of {
                                                      GHC.Types.False ->
                                                          case w2_sccgm of {
                                                            GHC.Types.F# ww2_sccgW [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt1
                                                                        GHC.Float.FFFixed
                                                                        w_sccgk
                                                                        GHC.Types.False
                                                                        ww2_sccgW
                                                                of
                                                                sat_sccgX
                                                                { __DEFAULT -> $j_sccgA sat_sccgX;
                                                                };
                                                          };
                                                      GHC.Types.True ->
                                                          case w2_sccgm of {
                                                            GHC.Types.F# ww2_sccgZ [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt1
                                                                        GHC.Float.FFFixed
                                                                        w_sccgk
                                                                        GHC.Types.True
                                                                        ww2_sccgZ
                                                                of
                                                                sat_scch0
                                                                { __DEFAULT -> $j_sccgA sat_scch0;
                                                                };
                                                          };
                                                    };
                                                'g'# ->
                                                    case w1_sccgl of {
                                                      GHC.Types.False ->
                                                          case w2_sccgm of {
                                                            GHC.Types.F# ww2_scch3 [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt1
                                                                        GHC.Float.FFGeneric
                                                                        w_sccgk
                                                                        GHC.Types.False
                                                                        ww2_scch3
                                                                of
                                                                sat_scch4
                                                                { __DEFAULT -> $j_sccgA sat_scch4;
                                                                };
                                                          };
                                                      GHC.Types.True ->
                                                          case w2_sccgm of {
                                                            GHC.Types.F# ww2_scch6 [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt1
                                                                        GHC.Float.FFGeneric
                                                                        w_sccgk
                                                                        GHC.Types.True
                                                                        ww2_scch6
                                                                of
                                                                sat_scch7
                                                                { __DEFAULT -> $j_sccgA sat_scch7;
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

Text.Printf.formatRealFloat1
  :: forall a. GHC.Base.Maybe GHC.Types.Int -> a -> GHC.Show.ShowS
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl6_rccbm of sat_scch8 {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_scch8;
        };

Text.Printf.$wdfmt [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Float.RealFloat a =>
     GHC.Prim.Char#
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Bool
     -> a
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId,
 Arity=5,
 Str=<L,U(U(U(U(A,A,A,C(U),A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,A,A,A,A,A),A,C(U),C(U(U)),C(U(1*U(U),A)),C(U(U,U(U))),A,A,A,A,C(U),C(U),A,C(U),A,A)><S,U><L,U><L,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_scch9 ww_sccha w1_scchb w2_scchc w3_scchd]
        case ord# [ww_sccha] of sat_scchf {
          __DEFAULT ->
              case __pkg_ccall base-4.11.0.0 [sat_scchf GHC.Prim.realWorld#] of {
                Unit# ds1_scchi [Occ=Once!] ->
                    case ord# [ww_sccha] of sat_scchk {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [sat_scchk GHC.Prim.realWorld#] of {
                            Unit# ds3_scchn ->
                                case int2Word# [ds3_scchn] of sat_sccho {
                                  __DEFAULT ->
                                      case leWord# [sat_sccho 1114111##] of {
                                        __DEFAULT -> GHC.Char.$wlvl ds3_scchn;
                                        1# ->
                                            let-no-escape {
                                              $j_scchr [Occ=Once*!T[1], Dmd=<C(S),1*C1(U(U,U))>]
                                                :: [GHC.Types.Char]
                                                   -> (# GHC.Base.String, GHC.Base.String #)
                                              [LclId[JoinId(1)],
                                               Arity=1,
                                               Str=<S,1*U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ds1_scchi] \r [karg_scchs]
                                                      case ds1_scchi of {
                                                        __DEFAULT ->
                                                            case
                                                                GHC.Base.map
                                                                    GHC.Unicode.toUpper karg_scchs
                                                            of
                                                            wild4_scchu
                                                            { [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_scchv [Occ=Once!]
                                                                cs_scchw [Occ=Once] ->
                                                                  case ds4_scchv of {
                                                                    GHC.Types.C# ds5_scchy [Occ=Once!] ->
                                                                        case ds5_scchy of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_scchu];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_scchw];
                                                                        };
                                                                  };
                                                            };
                                                        0# ->
                                                            case karg_scchs of wild4_scchA {
                                                              [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_scchB [Occ=Once!]
                                                                cs_scchC [Occ=Once] ->
                                                                  case ds4_scchB of {
                                                                    GHC.Types.C# ds5_scchE [Occ=Once!] ->
                                                                        case ds5_scchE of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_scchA];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_scchC];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              case chr# [ds3_scchn] of {
                                                __DEFAULT -> Text.Printf.formatRealFloat1;
                                                'e'# ->
                                                    case
                                                        GHC.Float.formatRealFloatAlt
                                                            w_scch9
                                                            GHC.Float.FFExponent
                                                            w1_scchb
                                                            GHC.Types.False
                                                            w3_scchd
                                                    of
                                                    sat_scchI
                                                    { __DEFAULT -> $j_scchr sat_scchI;
                                                    };
                                                'f'# ->
                                                    case w2_scchc of {
                                                      GHC.Types.False ->
                                                          case
                                                              GHC.Float.formatRealFloatAlt
                                                                  w_scch9
                                                                  GHC.Float.FFFixed
                                                                  w1_scchb
                                                                  GHC.Types.False
                                                                  w3_scchd
                                                          of
                                                          sat_scchK
                                                          { __DEFAULT -> $j_scchr sat_scchK;
                                                          };
                                                      GHC.Types.True ->
                                                          case
                                                              GHC.Float.formatRealFloatAlt
                                                                  w_scch9
                                                                  GHC.Float.FFFixed
                                                                  w1_scchb
                                                                  GHC.Types.True
                                                                  w3_scchd
                                                          of
                                                          sat_scchL
                                                          { __DEFAULT -> $j_scchr sat_scchL;
                                                          };
                                                    };
                                                'g'# ->
                                                    case w2_scchc of {
                                                      GHC.Types.False ->
                                                          case
                                                              GHC.Float.formatRealFloatAlt
                                                                  w_scch9
                                                                  GHC.Float.FFGeneric
                                                                  w1_scchb
                                                                  GHC.Types.False
                                                                  w3_scchd
                                                          of
                                                          sat_scchN
                                                          { __DEFAULT -> $j_scchr sat_scchN;
                                                          };
                                                      GHC.Types.True ->
                                                          case
                                                              GHC.Float.formatRealFloatAlt
                                                                  w_scch9
                                                                  GHC.Float.FFGeneric
                                                                  w1_scchb
                                                                  GHC.Types.True
                                                                  w3_scchd
                                                          of
                                                          sat_scchO
                                                          { __DEFAULT -> $j_scchr sat_scchO;
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

Text.Printf.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Text.Printf.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$trModule4];

Text.Printf.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Text.Printf"#;

Text.Printf.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$trModule2];

Text.Printf.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Text.Printf.$trModule3
                                     Text.Printf.$trModule1];

$krep_rccbn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcBool
                                              GHC.Types.[]];

$krep1_rccbo :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rccbp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandle
                                              GHC.Types.[]];

$krep3_rccbq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep4_rccbr :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep5_rccbs :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rccbo GHC.Types.[]];

$krep6_rccbt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep5_rccbs];

$krep7_rccbu :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_rccbq GHC.Types.[]];

$krep8_rccbv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep7_rccbu];

$krep9_rccbw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep8_rccbv];

Text.Printf.$tcHPrintfType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep4_rccbr];

$krep10_rccbx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep11_rccby :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_rccbx $krep3_rccbq];

$krep12_rccbz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rccbq $krep10_rccbx];

Text.Printf.$tcIsChar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IsChar"#;

Text.Printf.$tcIsChar1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcIsChar2];

Text.Printf.$tcIsChar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [660225335504909605##
                                    5800397900948792736##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcIsChar1
                                    0#
                                    Text.Printf.$tcHPrintfType1];

$krep13_rccbA :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep10_rccbx GHC.Types.[]];

$krep14_rccbB :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcIsChar
                                              $krep13_rccbA];

$krep15_rccbC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_rccbz $krep14_rccbB];

Text.Printf.$tc'C:IsChar1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_rccby $krep15_rccbC];

Text.Printf.$tc'C:IsChar3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:IsChar"#;

Text.Printf.$tc'C:IsChar2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'C:IsChar3];

Text.Printf.$tc'C:IsChar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15586488259906363003##
                                    17643381548147423706##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'C:IsChar2
                                    1#
                                    Text.Printf.$tc'C:IsChar1];

Text.Printf.$tcFormatAdjustment2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FormatAdjustment"#;

Text.Printf.$tcFormatAdjustment1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcFormatAdjustment2];

Text.Printf.$tcFormatAdjustment :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7532892403054408380##
                                    17299592949916286280##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcFormatAdjustment1
                                    0#
                                    GHC.Types.krep$*];

Text.Printf.$tc'LeftAdjust1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcFormatAdjustment
                                              GHC.Types.[]];

Text.Printf.$tc'LeftAdjust3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'LeftAdjust"#;

Text.Printf.$tc'LeftAdjust2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'LeftAdjust3];

Text.Printf.$tc'LeftAdjust :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3724221440131574524##
                                    12430068224974793646##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'LeftAdjust2
                                    0#
                                    Text.Printf.$tc'LeftAdjust1];

Text.Printf.$tc'ZeroPad2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ZeroPad"#;

Text.Printf.$tc'ZeroPad1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'ZeroPad2];

Text.Printf.$tc'ZeroPad :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4688343247861108158##
                                    7307113320833774212##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'ZeroPad1
                                    0#
                                    Text.Printf.$tc'LeftAdjust1];

$krep16_rccbD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$tc'LeftAdjust1 GHC.Types.[]];

$krep17_rccbE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep16_rccbD];

Text.Printf.$tcFormatSign2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FormatSign"#;

Text.Printf.$tcFormatSign1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcFormatSign2];

Text.Printf.$tcFormatSign :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [35986971025498593##
                                    9833165860459639351##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcFormatSign1
                                    0#
                                    GHC.Types.krep$*];

Text.Printf.$tc'SignPlus1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcFormatSign
                                              GHC.Types.[]];

Text.Printf.$tc'SignPlus3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SignPlus"#;

Text.Printf.$tc'SignPlus2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'SignPlus3];

Text.Printf.$tc'SignPlus :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18302065795158432479##
                                    11830941225366619964##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'SignPlus2
                                    0#
                                    Text.Printf.$tc'SignPlus1];

Text.Printf.$tc'SignSpace2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SignSpace"#;

Text.Printf.$tc'SignSpace1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'SignSpace2];

Text.Printf.$tc'SignSpace :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [111286303843533919##
                                    13624428119758319457##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'SignSpace1
                                    0#
                                    Text.Printf.$tc'SignPlus1];

$krep18_rccbF :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$tc'SignPlus1 GHC.Types.[]];

$krep19_rccbG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep18_rccbF];

Text.Printf.$tcFieldFormat2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FieldFormat"#;

Text.Printf.$tcFieldFormat1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcFieldFormat2];

Text.Printf.$tcFieldFormat :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12330325036165183082##
                                    5846211506648458401##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcFieldFormat1
                                    0#
                                    GHC.Types.krep$*];

$krep20_rccbH :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcFieldFormat
                                              GHC.Types.[]];

$krep21_rccbI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep20_rccbH $krep9_rccbw];

$krep22_rccbJ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_rccbx $krep21_rccbI];

$krep23_rccbK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rccbq $krep20_rccbH];

$krep24_rccbL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep23_rccbK];

$krep25_rccbM :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rccbn $krep24_rccbL];

$krep26_rccbN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep19_rccbG $krep25_rccbM];

$krep27_rccbO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep17_rccbE $krep26_rccbN];

$krep28_rccbP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_rccbt $krep27_rccbO];

Text.Printf.$tc'FieldFormat1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_rccbt $krep28_rccbP];

Text.Printf.$tc'FieldFormat3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FieldFormat"#;

Text.Printf.$tc'FieldFormat2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'FieldFormat3];

Text.Printf.$tc'FieldFormat :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11348432599023007686##
                                    6814357301696130957##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'FieldFormat2
                                    0#
                                    Text.Printf.$tc'FieldFormat1];

Text.Printf.$tcFormatParse2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FormatParse"#;

Text.Printf.$tcFormatParse1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcFormatParse2];

Text.Printf.$tcFormatParse :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5517048358589873764##
                                    8326725038359313810##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcFormatParse1
                                    0#
                                    GHC.Types.krep$*];

$krep29_rccbQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcFormatParse
                                              GHC.Types.[]];

$krep30_rccbR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep29_rccbQ];

$krep31_rccbS :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_rccbx $krep30_rccbR];

$krep32_rccbT :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rccbq $krep30_rccbR];

Text.Printf.$tc'FormatParse1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep32_rccbT];

Text.Printf.$tc'FormatParse3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FormatParse"#;

Text.Printf.$tc'FormatParse2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'FormatParse3];

Text.Printf.$tc'FormatParse :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [549767054447046648##
                                    1116614444935710689##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'FormatParse2
                                    0#
                                    Text.Printf.$tc'FormatParse1];

$krep33_rccbU :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep21_rccbI GHC.Types.[]];

$krep34_rccbV :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep30_rccbR $krep33_rccbU];

$krep35_rccbW :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep34_rccbV];

$krep36_rccbX :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep35_rccbW GHC.Types.[]];

$krep37_rccbY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep36_rccbX];

$krep38_rccbZ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_rccbY $krep10_rccbx];

$krep39_rccc0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep38_rccbZ];

$krep40_rccc1 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_rccbp $krep39_rccc0];

Text.Printf.$tcPrintfArg2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "PrintfArg"#;

Text.Printf.$tcPrintfArg1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcPrintfArg2];

Text.Printf.$tcPrintfArg :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14684532792197610005##
                                    5760551473172190061##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcPrintfArg1
                                    0#
                                    Text.Printf.$tcHPrintfType1];

$krep41_rccc2 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcPrintfArg
                                              $krep13_rccbA];

$krep42_rccc3 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep31_rccbS $krep41_rccc2];

Text.Printf.$tc'C:PrintfArg1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_rccbJ $krep42_rccc3];

Text.Printf.$tc'C:PrintfArg3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:PrintfArg"#;

Text.Printf.$tc'C:PrintfArg2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'C:PrintfArg3];

Text.Printf.$tc'C:PrintfArg :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11923342243699112506##
                                    8346787778082712340##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'C:PrintfArg2
                                    1#
                                    Text.Printf.$tc'C:PrintfArg1];

Text.Printf.$tcHPrintfType3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HPrintfType"#;

Text.Printf.$tcHPrintfType2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcHPrintfType3];

Text.Printf.$tcHPrintfType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13104883804062546050##
                                    15477829653093370802##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcHPrintfType2
                                    0#
                                    Text.Printf.$tcHPrintfType1];

$krep43_rccc4 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcHPrintfType
                                              $krep13_rccbA];

Text.Printf.$tc'C:HPrintfType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep40_rccc1 $krep43_rccc4];

Text.Printf.$tc'C:HPrintfType3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:HPrintfType"#;

Text.Printf.$tc'C:HPrintfType2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'C:HPrintfType3];

Text.Printf.$tc'C:HPrintfType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16716104921226462095##
                                    4043378586122981700##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'C:HPrintfType2
                                    1#
                                    Text.Printf.$tc'C:HPrintfType1];

Text.Printf.$tcPrintfType2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "PrintfType"#;

Text.Printf.$tcPrintfType1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcPrintfType2];

Text.Printf.$tcPrintfType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16100185319445667829##
                                    10371264040433388740##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcPrintfType1
                                    0#
                                    Text.Printf.$tcHPrintfType1];

$krep44_rccc5 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcPrintfType
                                              $krep13_rccbA];

Text.Printf.$tc'C:PrintfType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep39_rccc0 $krep44_rccc5];

Text.Printf.$tc'C:PrintfType3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:PrintfType"#;

Text.Printf.$tc'C:PrintfType2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'C:PrintfType3];

Text.Printf.$tc'C:PrintfType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6199067271817529220##
                                    10070277982064886839##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'C:PrintfType2
                                    1#
                                    Text.Printf.$tc'C:PrintfType1];

Text.Printf.$fPrintfArgChar24 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hh"#;

Text.Printf.$fPrintfArgChar23 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar24;

sat_scchP :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [128#];

sat_scchQ :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scchP GHC.Types.[]];

Text.Printf.$fPrintfArgChar22 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_scchQ;

Text.Printf.$fPrintfArgChar21
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar23
                        Text.Printf.$fPrintfArgChar22];

Text.Printf.$fPrintfArgChar20 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "h"#;

Text.Printf.$fPrintfArgChar19 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar20;

sat_scchR :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [32768#];

sat_scchS :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scchR GHC.Types.[]];

Text.Printf.$fPrintfArgChar18 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_scchS;

Text.Printf.$fPrintfArgChar17
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar19
                        Text.Printf.$fPrintfArgChar18];

Text.Printf.$fPrintfArgChar16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "l"#;

Text.Printf.$fPrintfArgChar15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar16;

sat_scchU :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_scchV :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scchU GHC.Types.[]];

sat_scchT :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_scchW :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scchT sat_scchV];

Text.Printf.$fPrintfArgChar14 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_scchW;

Text.Printf.$fPrintfArgChar13
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar15
                        Text.Printf.$fPrintfArgChar14];

Text.Printf.$fPrintfArgChar12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ll"#;

Text.Printf.$fPrintfArgChar11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar12;

sat_scchZ :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

sat_scci0 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scchZ GHC.Types.[]];

sat_scchY :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_scci1 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scchY sat_scci0];

sat_scchX :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_scci2 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_scchX sat_scci1];

Text.Printf.$fPrintfArgChar7 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_scci2;

Text.Printf.$fPrintfArgChar10
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar11
                        Text.Printf.$fPrintfArgChar7];

Text.Printf.$fPrintfArgChar9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "L"#;

Text.Printf.$fPrintfArgChar8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar9;

Text.Printf.$fPrintfArgChar6
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar8
                        Text.Printf.$fPrintfArgChar7];

Text.Printf.$fPrintfArgChar5
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar6 GHC.Types.[]];

Text.Printf.$fPrintfArgChar4
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar10
                      Text.Printf.$fPrintfArgChar5];

Text.Printf.$fPrintfArgChar3
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar13
                      Text.Printf.$fPrintfArgChar4];

Text.Printf.$fPrintfArgChar2
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar17
                      Text.Printf.$fPrintfArgChar3];

Text.Printf.intModifierMap
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar21
                      Text.Printf.$fPrintfArgChar2];

lvl7_rccc6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: unknown format modifier"#;

Text.Printf.$fPrintfArgInt2
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl7_rccc6 of sat_scci3 {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_scci3;
        };

Text.Printf.$wfixupMods [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.String
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ww_scci4 w_scci5]
        case ww_scci4 of wild_scci6 {
          [] -> w_scci5;
          : _ [Occ=Dead] _ [Occ=Dead] ->
              case
                  GHC.List.lookup
                      GHC.Classes.$fEq[]_$s$fEq[]1 wild_scci6 Text.Printf.intModifierMap
              of
              wild1_scci9
              { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                GHC.Base.Just _ [Occ=Dead] -> wild1_scci9;
              };
        };

Text.Printf.fixupMods [InlPrag=NOUSERINLINE[0]]
  :: Text.Printf.FieldFormat
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Str=<S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)><L,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccib w1_sccic]
        case w_sccib of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ww6_sccij [Occ=Once]
                                  _ [Occ=Dead] ->
              Text.Printf.$wfixupMods ww6_sccij w1_sccic;
        };

Text.Printf.$wparseIntFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Base.String -> Text.Printf.FormatParse
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_sccil]
        let {
          go_sccim [Occ=LoopBreaker]
            :: [([GHC.Types.Char], GHC.Integer.Type.Integer)]
               -> GHC.Base.Maybe Text.Printf.FormatParse
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [w_sccil go_sccim] \r [ds_sccin]
                  case ds_sccin of {
                    [] -> GHC.Base.Nothing [];
                    : y_sccip [Occ=Once!] ys_scciq [Occ=Once] ->
                        case y_sccip of {
                          (,) p_sccis _ [Occ=Dead] ->
                              case go_sccim ys_scciq of wild2_scciu {
                                GHC.Base.Nothing ->
                                    case
                                        Data.OldList.stripPrefix
                                            GHC.Classes.$fEqChar p_sccis w_sccil
                                    of
                                    { GHC.Base.Nothing -> GHC.Base.Nothing [];
                                      GHC.Base.Just x_scciw [Occ=Once!] ->
                                          case x_scciw of {
                                            [] -> Text.Printf.errorShortFormat;
                                            : c_scciy [Occ=Once] cs_scciz [Occ=Once] ->
                                                let {
                                                  sat_scciA [Occ=Once] :: Text.Printf.FormatParse
                                                  [LclId] =
                                                      CCCS Text.Printf.FormatParse! [p_sccis
                                                                                     c_scciy
                                                                                     cs_scciz];
                                                } in  GHC.Base.Just [sat_scciA];
                                          };
                                    };
                                GHC.Base.Just ds2_scciB [Occ=Once!] ->
                                    case ds2_scciB of {
                                      Text.Printf.FormatParse p0_scciD [Occ=Once]
                                                              _ [Occ=Dead]
                                                              _ [Occ=Dead] ->
                                          case GHC.List.$wlenAcc p0_scciD 0# of ww2_scciG {
                                            __DEFAULT ->
                                                case GHC.List.$wlenAcc p_sccis 0# of ww1_scciH {
                                                  __DEFAULT ->
                                                      case >=# [ww2_scciG ww1_scciH] of {
                                                        __DEFAULT ->
                                                            case
                                                                Data.OldList.stripPrefix
                                                                    GHC.Classes.$fEqChar
                                                                    p_sccis
                                                                    w_sccil
                                                            of
                                                            { GHC.Base.Nothing -> wild2_scciu;
                                                              GHC.Base.Just x_scciK [Occ=Once!] ->
                                                                  case x_scciK of {
                                                                    [] ->
                                                                        Text.Printf.errorShortFormat;
                                                                    : c_scciN [Occ=Once]
                                                                      cs_scciO [Occ=Once] ->
                                                                        let {
                                                                          sat_scciP [Occ=Once]
                                                                            :: Text.Printf.FormatParse
                                                                          [LclId] =
                                                                              CCCS Text.Printf.FormatParse! [p_sccis
                                                                                                             c_scciN
                                                                                                             cs_scciO];
                                                                        } in 
                                                                          GHC.Base.Just [sat_scciP];
                                                                  };
                                                            };
                                                        1# -> wild2_scciu;
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          case go_sccim Text.Printf.intModifierMap of {
            GHC.Base.Nothing ->
                case w_sccil of {
                  [] -> Text.Printf.errorShortFormat;
                  : c_scciS [Occ=Once] cs_scciT [Occ=Once] ->
                      Text.Printf.FormatParse [GHC.Types.[] c_scciS cs_scciT];
                };
            GHC.Base.Just m_scciU [Occ=Once] -> m_scciU;
          };

Text.Printf.parseIntFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. a -> GHC.Base.String -> Text.Printf.FormatParse
[GblId, Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
    [] \r [w_scciV w1_scciW] Text.Printf.$wparseIntFormat w1_scciW;

lvl8_rccc7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "undefined"#;

lvl9_rccc8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl8_rccc7;

lvl10_rccc9 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$trModule4;

lvl11_rccca :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$trModule2;

lvl12_rcccb :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./Text/Printf.hs"#;

lvl13_rcccc :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl12_rcccb;

lvl14_rcccd :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [323#];

lvl15_rccce :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [40#];

lvl16_rcccf :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [49#];

lvl17_rcccg :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl10_rccc9
                                           lvl11_rccca
                                           lvl13_rcccc
                                           lvl14_rcccd
                                           lvl15_rccce
                                           lvl14_rcccd
                                           lvl16_rcccf];

lvl18_rccch :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl9_rccc8
                                                  lvl17_rcccg
                                                  GHC.Stack.Types.EmptyCallStack];

Text.Printf.$fPrintfArgChar1 :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl18_rccch;

Text.Printf.$fPrintfArgChar_$cparseFormat
  :: GHC.Types.Char -> Text.Printf.ModifierParser
[GblId, Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
    [] \r [ds_scciX cf_scciY] Text.Printf.$wparseIntFormat cf_scciY;

Text.Printf.$fPrintfArgDouble5 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['0'#];

integral_prec_rc8qj
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_scciZ integral_sccj0]
        case ds_scciZ of {
          GHC.Base.Nothing -> integral_sccj0;
          GHC.Base.Just ds1_sccj2 [Occ=Once!] ->
              case ds1_sccj2 of {
                GHC.Types.I# ds2_sccj4 ->
                    let-no-escape {
                      fail_sccj5 [Occ=Once*!T[1], Dmd=<L,1*C1(U)>]
                        :: GHC.Prim.Void# -> GHC.Base.String
                      [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                          sat-only [integral_sccj0 ds2_sccj4] \r [void_0E]
                              case GHC.List.$wlenAcc integral_sccj0 0# of ww2_sccj7 {
                                __DEFAULT ->
                                    case -# [ds2_sccj4 ww2_sccj7] of y_sccj8 [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          case <# [0# y_sccj8] of {
                                            __DEFAULT -> integral_sccj0;
                                            1# ->
                                                let {
                                                  lvl55_sccja [Occ=OnceL] :: [GHC.Types.Char]
                                                  [LclId, Unf=OtherCon []] =
                                                      CCCS :! [Text.Printf.$fPrintfArgDouble5
                                                               integral_sccj0]; } in
                                                let {
                                                  $wxs_sccjb [InlPrag=NOUSERINLINE[0],
                                                              Occ=LoopBreaker]
                                                    :: GHC.Prim.Int# -> [GHC.Types.Char]
                                                  [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                                      sat-only [lvl55_sccja
                                                                $wxs_sccjb] \r [ww_sccjc]
                                                          case ww_sccjc of ds4_sccjd {
                                                            __DEFAULT ->
                                                                let {
                                                                  sat_sccjf [Occ=Once]
                                                                    :: [GHC.Types.Char]
                                                                  [LclId] =
                                                                      [$wxs_sccjb ds4_sccjd] \u []
                                                                          case
                                                                              -# [ds4_sccjd 1#]
                                                                          of
                                                                          sat_sccje
                                                                          { __DEFAULT ->
                                                                                $wxs_sccjb
                                                                                    sat_sccje;
                                                                          };
                                                                } in 
                                                                  : [Text.Printf.$fPrintfArgDouble5
                                                                     sat_sccjf];
                                                            1# -> lvl55_sccja;
                                                          };
                                                } in  $wxs_sccjb y_sccj8;
                                          };
                                    };
                              };
                    } in 
                      case ds2_sccj4 of {
                        __DEFAULT -> fail_sccj5 GHC.Prim.void#;
                        0# ->
                            case integral_sccj0 of {
                              [] -> fail_sccj5 GHC.Prim.void#;
                              : ds4_sccji [Occ=Once!] ds5_sccjj [Occ=Once!] ->
                                  case ds4_sccji of {
                                    GHC.Types.C# ds6_sccjl [Occ=Once!] ->
                                        case ds6_sccjl of {
                                          __DEFAULT -> fail_sccj5 GHC.Prim.void#;
                                          '0'# ->
                                              case ds5_sccjj of {
                                                [] -> [] [];
                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                    fail_sccj5 GHC.Prim.void#;
                                              };
                                        };
                                  };
                            };
                      };
              };
        };

lvl19_rccci :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Text/Printf.hs:714:7-39|(\"\", s)"#;

lvl20_rcccj :: (GHC.Base.String)
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.patError lvl19_rccci;

Text.Printf.formatChar2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

sat_sccjq :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

sat_sccjr :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sccjq GHC.Types.[]];

lvl21_rccck :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sccjr;

$wfmtu_rcccl
  :: GHC.Integer.Type.Integer
     -> GHC.Base.Maybe GHC.Base.String
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId,
 Arity=5,
 Str=<L,U><S,1*U><L,1*U><L,1*U><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [w_sccjs w1_sccjt w2_sccju w3_sccjv w4_sccjw]
        case w1_sccjt of {
          GHC.Base.Nothing ->
              let {
                fmtu'_sccjy [Occ=LoopBreaker]
                  :: GHC.Base.Maybe GHC.Types.Int
                     -> GHC.Base.Maybe GHC.Integer.Type.Integer
                     -> GHC.Integer.Type.Integer
                     -> GHC.Base.Maybe GHC.Base.String
                [LclId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
                    sat-only [w_sccjs fmtu'_sccjy] \r [prec_sccjz ds_sccjA i_sccjB]
                        let-no-escape {
                          fail_sccjC [Occ=Once*!T[1], Dmd=<L,1*C1(U)>]
                            :: GHC.Prim.Void# -> GHC.Base.Maybe GHC.Base.String
                          [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                              sat-only [w_sccjs fmtu'_sccjy prec_sccjz i_sccjB] \r [void_0E]
                                  case prec_sccjz of wild1_sccjE {
                                    GHC.Base.Nothing ->
                                        case
                                            GHC.Integer.Type.geInteger#
                                                i_sccjB Text.Printf.formatChar2
                                        of
                                        { __DEFAULT -> GHC.Base.Nothing [];
                                          1# ->
                                              let {
                                                sat_sccjG [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    [w_sccjs i_sccjB] \u []
                                                        Numeric.showIntAtBase
                                                            GHC.Real.$fIntegralInteger
                                                            GHC.Show.$fShowInteger
                                                            w_sccjs
                                                            GHC.Show.intToDigit
                                                            i_sccjB
                                                            GHC.Types.[];
                                              } in  GHC.Base.Just [sat_sccjG];
                                        };
                                    GHC.Base.Just _ [Occ=Dead] ->
                                        case
                                            GHC.Integer.Type.geInteger#
                                                i_sccjB Text.Printf.formatChar2
                                        of
                                        { __DEFAULT -> GHC.Base.Nothing [];
                                          1# ->
                                              case
                                                  fmtu'_sccjy
                                                      GHC.Base.Nothing GHC.Base.Nothing i_sccjB
                                              of
                                              { GHC.Base.Nothing -> GHC.Base.Nothing [];
                                                GHC.Base.Just a1_sccjK [Occ=Once] ->
                                                    let {
                                                      sat_sccjL [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [wild1_sccjE a1_sccjK] \u []
                                                              integral_prec_rc8qj
                                                                  wild1_sccjE a1_sccjK;
                                                    } in  GHC.Base.Just [sat_sccjL];
                                              };
                                        };
                                  };
                        } in 
                          case ds_sccjA of {
                            GHC.Base.Nothing -> fail_sccjC GHC.Prim.void#;
                            GHC.Base.Just m_sccjN [Occ=Once] ->
                                case
                                    GHC.Integer.Type.ltInteger# i_sccjB Text.Printf.formatChar2
                                of
                                { __DEFAULT -> fail_sccjC GHC.Prim.void#;
                                  1# ->
                                      case
                                          GHC.Integer.Type.timesInteger lvl21_rccck m_sccjN
                                      of
                                      sat_sccjP
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.negateInteger sat_sccjP
                                            of
                                            sat_sccjQ
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.plusInteger sat_sccjQ i_sccjB
                                                  of
                                                  sat_sccjR
                                                  { __DEFAULT ->
                                                        fmtu'_sccjy
                                                            prec_sccjz GHC.Base.Nothing sat_sccjR;
                                                  };
                                            };
                                      };
                                };
                          };
              } in 
                case fmtu'_sccjy w2_sccju w3_sccjv w4_sccjw of {
                  GHC.Base.Nothing -> Text.Printf.errorBadArgument;
                  GHC.Base.Just s_sccjU [Occ=Once] -> (#,#) [GHC.Types.[] s_sccjU];
                };
          GHC.Base.Just pre_sccjV [Occ=Once!] ->
              let {
                s_sccjW [Occ=Once*] :: GHC.Base.String
                [LclId] =
                    [w_sccjs w2_sccju w3_sccjv w4_sccjw] \u []
                        case
                            $wfmtu_rcccl w_sccjs GHC.Base.Nothing w2_sccju w3_sccjv w4_sccjw
                        of
                        { (#,#) ww1_sccjY [Occ=Once!] ww2_sccjZ [Occ=Once] ->
                              case ww1_sccjY of {
                                [] -> ww2_sccjZ;
                                : _ [Occ=Dead] _ [Occ=Dead] -> lvl20_rcccj;
                              };
                        };
              } in 
                case pre_sccjV of wild1_scck4 {
                  [] -> (#,#) [GHC.Types.[] s_sccjW];
                  : ds_scck5 [Occ=Once!] ds1_scck6 [Occ=Once!] ->
                      case ds_scck5 of {
                        GHC.Types.C# ds2_scck8 [Occ=Once!] ->
                            case ds2_scck8 of {
                              __DEFAULT -> (#,#) [wild1_scck4 s_sccjW];
                              '0'# ->
                                  case ds1_scck6 of {
                                    [] ->
                                        case s_sccjW of wild4_scckb {
                                          [] -> (#,#) [wild1_scck4 GHC.Types.[]];
                                          : ds4_scckc [Occ=Once!] _ [Occ=Dead] ->
                                              case ds4_scckc of {
                                                GHC.Types.C# ds6_scckf [Occ=Once!] ->
                                                    case ds6_scckf of {
                                                      __DEFAULT -> (#,#) [wild1_scck4 wild4_scckb];
                                                      '0'# -> (#,#) [GHC.Types.[] wild4_scckb];
                                                    };
                                              };
                                        };
                                    : _ [Occ=Dead] _ [Occ=Dead] -> (#,#) [wild1_scck4 s_sccjW];
                                  };
                            };
                      };
                };
        };

$wfmti_rcccm
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Integer.Type.Integer
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    sat-only [] \r [w_scckj w1_scckk]
        case
            GHC.Integer.Type.ltInteger# w1_scckk Text.Printf.formatChar2
        of
        { __DEFAULT ->
              let {
                sat_scckq [Occ=Once] :: GHC.Base.String
                [LclId] =
                    [w_scckj w1_scckk] \u []
                        case GHC.Show.$w$cshowsPrec4 0# w1_scckk GHC.Types.[] of {
                          (#,#) ww3_scckn [Occ=Once] ww4_sccko [Occ=Once] ->
                              let {
                                sat_scckp [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    CCCS :! [ww3_scckn ww4_sccko];
                              } in  integral_prec_rc8qj w_scckj sat_scckp;
                        };
              } in  (#,#) [GHC.Types.[] sat_scckq];
          1# ->
              let {
                sat_scckw [Occ=Once] :: GHC.Base.String
                [LclId] =
                    [w_scckj w1_scckk] \u []
                        case GHC.Integer.Type.negateInteger w1_scckk of sat_scckr {
                          __DEFAULT ->
                              case GHC.Show.$w$cshowsPrec4 0# sat_scckr GHC.Types.[] of {
                                (#,#) ww3_scckt [Occ=Once] ww4_sccku [Occ=Once] ->
                                    let {
                                      sat_scckv [Occ=Once] :: GHC.Base.String
                                      [LclId] =
                                          CCCS :! [ww3_scckt ww4_sccku];
                                    } in  integral_prec_rc8qj w_scckj sat_scckv;
                              };
                        };
              } in  (#,#) [Text.Printf.$fPrintfArgDouble8 sat_scckw];
        };

Text.Printf.$fPrintfArgDouble6 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [' '#];

Text.Printf.$wadjust [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Base.String
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U><S,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_scckx ww1_sccky ww2_scckz ww3_scckA]
        let {
          fill_scckB [Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [ww_scckx ww1_sccky ww2_scckz ww3_scckA] \s []
                  case ww_scckx of {
                    GHC.Base.Nothing -> [] [];
                    GHC.Base.Just width_scckD [Occ=Once!] ->
                        case GHC.List.$wlenAcc ww2_scckz 0# of ww4_scckE {
                          __DEFAULT ->
                              case GHC.List.$wlenAcc ww3_scckA 0# of ww5_scckF {
                                __DEFAULT ->
                                    case width_scckD of {
                                      GHC.Types.I# y_scckH ->
                                          case +# [ww4_scckE ww5_scckF] of x_scckI [Dmd=<S,U>] {
                                            __DEFAULT ->
                                                case <# [x_scckI y_scckH] of {
                                                  __DEFAULT -> [] [];
                                                  1# ->
                                                      case
                                                          -# [y_scckH x_scckI]
                                                      of
                                                      n_scckK [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            case <# [0# n_scckK] of {
                                                              __DEFAULT -> [] [];
                                                              1# ->
                                                                  let {
                                                                    x1_scckM :: GHC.Types.Char
                                                                    [LclId] =
                                                                        [ww1_sccky] \u []
                                                                            case ww1_sccky of {
                                                                              GHC.Base.Nothing ->
                                                                                  Text.Printf.$fPrintfArgDouble6;
                                                                              GHC.Base.Just ds_scckO [Occ=Once!] ->
                                                                                  case ds_scckO of {
                                                                                    Text.Printf.LeftAdjust ->
                                                                                        Text.Printf.$fPrintfArgDouble6;
                                                                                    Text.Printf.ZeroPad ->
                                                                                        Text.Printf.$fPrintfArgDouble5;
                                                                                  };
                                                                            }; } in
                                                                  let {
                                                                    lvl55_scckQ [Occ=OnceL]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId, Unf=OtherCon []] =
                                                                        CCCS :! [x1_scckM
                                                                                 GHC.Types.[]]; } in
                                                                  let {
                                                                    $wxs_scckR [InlPrag=NOUSERINLINE[0],
                                                                                Occ=LoopBreaker]
                                                                      :: GHC.Prim.Int#
                                                                         -> [GHC.Types.Char]
                                                                    [LclId,
                                                                     Arity=1,
                                                                     Str=<S,1*U>,
                                                                     Unf=OtherCon []] =
                                                                        sat-only [x1_scckM
                                                                                  lvl55_scckQ
                                                                                  $wxs_scckR] \r [ww6_scckS]
                                                                            case
                                                                                ww6_scckS
                                                                            of
                                                                            ds1_scckT
                                                                            { __DEFAULT ->
                                                                                  let {
                                                                                    sat_scckV [Occ=Once]
                                                                                      :: [GHC.Types.Char]
                                                                                    [LclId] =
                                                                                        [$wxs_scckR
                                                                                         ds1_scckT] \u []
                                                                                            case
                                                                                                -# [ds1_scckT
                                                                                                    1#]
                                                                                            of
                                                                                            sat_scckU
                                                                                            { __DEFAULT ->
                                                                                                  $wxs_scckR
                                                                                                      sat_scckU;
                                                                                            };
                                                                                  } in 
                                                                                    : [x1_scckM
                                                                                       sat_scckV];
                                                                              1# -> lvl55_scckQ;
                                                                            };
                                                                  } in  $wxs_scckR n_scckK;
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          let-no-escape {
            $j_scckW [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Base.String
            [LclId[JoinId(0)], Unf=OtherCon []] =
                [ww1_sccky ww2_scckz ww3_scckA fill_scckB] \r []
                    case ww1_sccky of {
                      GHC.Base.Nothing ->
                          let {
                            sat_scckY [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                            [LclId] =
                                [ww2_scckz ww3_scckA] \s [] GHC.Base.++ ww2_scckz ww3_scckA;
                          } in  GHC.Base.++ fill_scckB sat_scckY;
                      GHC.Base.Just ds_scckZ [Occ=Once!] ->
                          case ds_scckZ of {
                            Text.Printf.LeftAdjust ->
                                let {
                                  sat_sccl1 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [ww2_scckz ww3_scckA] \s [] GHC.Base.++ ww2_scckz ww3_scckA;
                                } in  GHC.Base.++ fill_scckB sat_sccl1;
                            Text.Printf.ZeroPad ->
                                let {
                                  sat_sccl2 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [ww3_scckA fill_scckB] \s [] GHC.Base.++ fill_scckB ww3_scckA;
                                } in  GHC.Base.++ ww2_scckz sat_sccl2;
                          };
                    };
          } in 
            case ww1_sccky of {
              GHC.Base.Nothing -> $j_scckW;
              GHC.Base.Just ds_sccl4 [Occ=Once!] ->
                  case ds_sccl4 of {
                    Text.Printf.LeftAdjust ->
                        let {
                          sat_sccl6 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [ww3_scckA fill_scckB] \s [] GHC.Base.++ ww3_scckA fill_scckB;
                        } in  GHC.Base.++ ww2_scckz sat_sccl6;
                    Text.Printf.ZeroPad -> $j_scckW;
                  };
            };

Text.Printf.$fPrintfArgDouble4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "+"#;

Text.Printf.$fPrintfArgDouble3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgDouble4;

Text.Printf.$fPrintfArgDouble2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " "#;

Text.Printf.$fPrintfArgDouble1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgDouble2;

Text.Printf.$wadjustSigned [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Base.String
[GblId,
 Arity=5,
 Str=<L,1*U><S,U><S,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sccl7 ww1_sccl8 ww2_sccl9 ww3_sccla ww4_scclb]
        case ww2_sccl9 of {
          GHC.Base.Nothing ->
              Text.Printf.$wadjust ww_sccl7 ww1_sccl8 ww3_sccla ww4_scclb;
          GHC.Base.Just ds_sccld [Occ=Once!] ->
              case ds_sccld of {
                Text.Printf.SignPlus ->
                    case ww3_sccla of wild2_scclf {
                      [] ->
                          Text.Printf.$wadjust
                              ww_sccl7 ww1_sccl8 Text.Printf.$fPrintfArgDouble3 ww4_scclb;
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          Text.Printf.$wadjust ww_sccl7 ww1_sccl8 wild2_scclf ww4_scclb;
                    };
                Text.Printf.SignSpace ->
                    case ww3_sccla of wild2_sccli {
                      [] ->
                          Text.Printf.$wadjust
                              ww_sccl7 ww1_sccl8 Text.Printf.$fPrintfArgDouble1 ww4_scclb;
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          Text.Printf.$wadjust ww_sccl7 ww1_sccl8 wild2_sccli ww4_scclb;
                    };
              };
        };

Text.Printf.$w$sformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Double
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=7,
 Str=<L,1*U(U)><L,1*U><L,U><L,U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccll
           ww_scclm
           ww1_sccln
           ww2_scclo
           ww3_scclp
           ww4_scclq
           ww5_scclr]
        case ww5_scclr of ds_sccls {
          __DEFAULT -> Text.Printf.$werrorBadFormat ds_sccls;
          'E'# ->
              let {
                sat_scclw [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccll ww_scclm ww1_sccln ww2_scclo ww3_scclp ww4_scclq] \u []
                        case Text.Printf.$w$sdfmt 'E'# ww1_sccln ww4_scclq w_sccll of {
                          (#,#) ww7_scclu [Occ=Once] ww8_scclv [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_scclm ww2_scclo ww3_scclp ww7_scclu ww8_scclv;
                        };
              } in  GHC.Base.++ sat_scclw;
          'F'# ->
              let {
                sat_scclA [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccll ww_scclm ww1_sccln ww2_scclo ww3_scclp ww4_scclq] \u []
                        case Text.Printf.$w$sdfmt 'F'# ww1_sccln ww4_scclq w_sccll of {
                          (#,#) ww7_sccly [Occ=Once] ww8_scclz [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_scclm ww2_scclo ww3_scclp ww7_sccly ww8_scclz;
                        };
              } in  GHC.Base.++ sat_scclA;
          'G'# ->
              let {
                sat_scclE [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccll ww_scclm ww1_sccln ww2_scclo ww3_scclp ww4_scclq] \u []
                        case Text.Printf.$w$sdfmt 'G'# ww1_sccln ww4_scclq w_sccll of {
                          (#,#) ww7_scclC [Occ=Once] ww8_scclD [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_scclm ww2_scclo ww3_scclp ww7_scclC ww8_scclD;
                        };
              } in  GHC.Base.++ sat_scclE;
          'e'# ->
              let {
                sat_scclI [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccll ww_scclm ww1_sccln ww2_scclo ww3_scclp ww4_scclq] \u []
                        case Text.Printf.$w$sdfmt 'e'# ww1_sccln ww4_scclq w_sccll of {
                          (#,#) ww7_scclG [Occ=Once] ww8_scclH [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_scclm ww2_scclo ww3_scclp ww7_scclG ww8_scclH;
                        };
              } in  GHC.Base.++ sat_scclI;
          'f'# ->
              let {
                sat_scclM [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccll ww_scclm ww1_sccln ww2_scclo ww3_scclp ww4_scclq] \u []
                        case Text.Printf.$w$sdfmt 'f'# ww1_sccln ww4_scclq w_sccll of {
                          (#,#) ww7_scclK [Occ=Once] ww8_scclL [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_scclm ww2_scclo ww3_scclp ww7_scclK ww8_scclL;
                        };
              } in  GHC.Base.++ sat_scclM;
          'g'# ->
              let {
                sat_scclQ [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccll ww_scclm ww1_sccln ww2_scclo ww3_scclp ww4_scclq] \u []
                        case Text.Printf.$w$sdfmt 'g'# ww1_sccln ww4_scclq w_sccll of {
                          (#,#) ww7_scclO [Occ=Once] ww8_scclP [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_scclm ww2_scclo ww3_scclp ww7_scclO ww8_scclP;
                        };
              } in  GHC.Base.++ sat_scclQ;
          'v'# ->
              let {
                sat_scclU [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccll ww_scclm ww1_sccln ww2_scclo ww3_scclp ww4_scclq] \u []
                        case Text.Printf.$w$sdfmt 'g'# ww1_sccln ww4_scclq w_sccll of {
                          (#,#) ww7_scclS [Occ=Once] ww8_scclT [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_scclm ww2_scclo ww3_scclp ww7_scclS ww8_scclT;
                        };
              } in  GHC.Base.++ sat_scclU;
        };

Text.Printf.$fPrintfArgDouble_$sformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Double -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LLLLLLS(S)),1*U(1*U,U,U,1*U,1*U,A,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_scclV w1_scclW]
        case w1_scclW of {
          Text.Printf.FieldFormat ww1_scclY [Occ=Once]
                                  ww2_scclZ [Occ=Once]
                                  ww3_sccm0 [Occ=Once]
                                  ww4_sccm1 [Occ=Once]
                                  ww5_sccm2 [Occ=Once]
                                  _ [Occ=Dead]
                                  ww7_sccm4 [Occ=Once!] ->
              case ww7_sccm4 of {
                GHC.Types.C# ww9_sccm6 [Occ=Once] ->
                    Text.Printf.$w$sformatRealFloat
                        w_scclV
                        ww1_scclY
                        ww2_scclZ
                        ww3_sccm0
                        ww4_sccm1
                        ww5_sccm2
                        ww9_sccm6;
              };
        };

Text.Printf.$w$sformatRealFloat1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Float
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=7,
 Str=<L,1*U(U)><L,1*U><L,U><L,U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccm7
           ww_sccm8
           ww1_sccm9
           ww2_sccma
           ww3_sccmb
           ww4_sccmc
           ww5_sccmd]
        case ww5_sccmd of ds_sccme {
          __DEFAULT -> Text.Printf.$werrorBadFormat ds_sccme;
          'E'# ->
              let {
                sat_sccmi [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccm7 ww_sccm8 ww1_sccm9 ww2_sccma ww3_sccmb ww4_sccmc] \u []
                        case Text.Printf.$w$sdfmt1 'E'# ww1_sccm9 ww4_sccmc w_sccm7 of {
                          (#,#) ww7_sccmg [Occ=Once] ww8_sccmh [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccm8 ww2_sccma ww3_sccmb ww7_sccmg ww8_sccmh;
                        };
              } in  GHC.Base.++ sat_sccmi;
          'F'# ->
              let {
                sat_sccmm [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccm7 ww_sccm8 ww1_sccm9 ww2_sccma ww3_sccmb ww4_sccmc] \u []
                        case Text.Printf.$w$sdfmt1 'F'# ww1_sccm9 ww4_sccmc w_sccm7 of {
                          (#,#) ww7_sccmk [Occ=Once] ww8_sccml [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccm8 ww2_sccma ww3_sccmb ww7_sccmk ww8_sccml;
                        };
              } in  GHC.Base.++ sat_sccmm;
          'G'# ->
              let {
                sat_sccmq [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccm7 ww_sccm8 ww1_sccm9 ww2_sccma ww3_sccmb ww4_sccmc] \u []
                        case Text.Printf.$w$sdfmt1 'G'# ww1_sccm9 ww4_sccmc w_sccm7 of {
                          (#,#) ww7_sccmo [Occ=Once] ww8_sccmp [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccm8 ww2_sccma ww3_sccmb ww7_sccmo ww8_sccmp;
                        };
              } in  GHC.Base.++ sat_sccmq;
          'e'# ->
              let {
                sat_sccmu [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccm7 ww_sccm8 ww1_sccm9 ww2_sccma ww3_sccmb ww4_sccmc] \u []
                        case Text.Printf.$w$sdfmt1 'e'# ww1_sccm9 ww4_sccmc w_sccm7 of {
                          (#,#) ww7_sccms [Occ=Once] ww8_sccmt [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccm8 ww2_sccma ww3_sccmb ww7_sccms ww8_sccmt;
                        };
              } in  GHC.Base.++ sat_sccmu;
          'f'# ->
              let {
                sat_sccmy [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccm7 ww_sccm8 ww1_sccm9 ww2_sccma ww3_sccmb ww4_sccmc] \u []
                        case Text.Printf.$w$sdfmt1 'f'# ww1_sccm9 ww4_sccmc w_sccm7 of {
                          (#,#) ww7_sccmw [Occ=Once] ww8_sccmx [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccm8 ww2_sccma ww3_sccmb ww7_sccmw ww8_sccmx;
                        };
              } in  GHC.Base.++ sat_sccmy;
          'g'# ->
              let {
                sat_sccmC [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccm7 ww_sccm8 ww1_sccm9 ww2_sccma ww3_sccmb ww4_sccmc] \u []
                        case Text.Printf.$w$sdfmt1 'g'# ww1_sccm9 ww4_sccmc w_sccm7 of {
                          (#,#) ww7_sccmA [Occ=Once] ww8_sccmB [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccm8 ww2_sccma ww3_sccmb ww7_sccmA ww8_sccmB;
                        };
              } in  GHC.Base.++ sat_sccmC;
          'v'# ->
              let {
                sat_sccmG [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccm7 ww_sccm8 ww1_sccm9 ww2_sccma ww3_sccmb ww4_sccmc] \u []
                        case Text.Printf.$w$sdfmt1 'g'# ww1_sccm9 ww4_sccmc w_sccm7 of {
                          (#,#) ww7_sccmE [Occ=Once] ww8_sccmF [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccm8 ww2_sccma ww3_sccmb ww7_sccmE ww8_sccmF;
                        };
              } in  GHC.Base.++ sat_sccmG;
        };

Text.Printf.$fPrintfArgFloat_$sformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Float -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LLLLLLS(S)),1*U(1*U,U,U,1*U,1*U,A,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccmH w1_sccmI]
        case w1_sccmI of {
          Text.Printf.FieldFormat ww1_sccmK [Occ=Once]
                                  ww2_sccmL [Occ=Once]
                                  ww3_sccmM [Occ=Once]
                                  ww4_sccmN [Occ=Once]
                                  ww5_sccmO [Occ=Once]
                                  _ [Occ=Dead]
                                  ww7_sccmQ [Occ=Once!] ->
              case ww7_sccmQ of {
                GHC.Types.C# ww9_sccmS [Occ=Once] ->
                    Text.Printf.$w$sformatRealFloat1
                        w_sccmH
                        ww1_sccmK
                        ww2_sccmL
                        ww3_sccmM
                        ww4_sccmN
                        ww5_sccmO
                        ww9_sccmS;
              };
        };

Text.Printf.$wformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Float.RealFloat a =>
     a
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,U(U(U(U(A,A,A,C(U),A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,A,A,A,A,A),A,C(U),C(U(U)),C(U(1*U(U),A)),C(U(U,U(U))),A,A,A,A,C(U),C(U),A,C(U),A,A)><L,U><L,1*U><L,U><L,U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccmT
           w1_sccmU
           ww_sccmV
           ww1_sccmW
           ww2_sccmX
           ww3_sccmY
           ww4_sccmZ
           ww5_sccn0]
        case ww5_sccn0 of ds_sccn1 {
          __DEFAULT -> Text.Printf.$werrorBadFormat ds_sccn1;
          'E'# ->
              let {
                sat_sccn5 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccmT
                     w1_sccmU
                     ww_sccmV
                     ww1_sccmW
                     ww2_sccmX
                     ww3_sccmY
                     ww4_sccmZ] \u []
                        case
                            Text.Printf.$wdfmt w_sccmT 'E'# ww1_sccmW ww4_sccmZ w1_sccmU
                        of
                        { (#,#) ww7_sccn3 [Occ=Once] ww8_sccn4 [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccmV ww2_sccmX ww3_sccmY ww7_sccn3 ww8_sccn4;
                        };
              } in  GHC.Base.++ sat_sccn5;
          'F'# ->
              let {
                sat_sccn9 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccmT
                     w1_sccmU
                     ww_sccmV
                     ww1_sccmW
                     ww2_sccmX
                     ww3_sccmY
                     ww4_sccmZ] \u []
                        case
                            Text.Printf.$wdfmt w_sccmT 'F'# ww1_sccmW ww4_sccmZ w1_sccmU
                        of
                        { (#,#) ww7_sccn7 [Occ=Once] ww8_sccn8 [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccmV ww2_sccmX ww3_sccmY ww7_sccn7 ww8_sccn8;
                        };
              } in  GHC.Base.++ sat_sccn9;
          'G'# ->
              let {
                sat_sccnd [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccmT
                     w1_sccmU
                     ww_sccmV
                     ww1_sccmW
                     ww2_sccmX
                     ww3_sccmY
                     ww4_sccmZ] \u []
                        case
                            Text.Printf.$wdfmt w_sccmT 'G'# ww1_sccmW ww4_sccmZ w1_sccmU
                        of
                        { (#,#) ww7_sccnb [Occ=Once] ww8_sccnc [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccmV ww2_sccmX ww3_sccmY ww7_sccnb ww8_sccnc;
                        };
              } in  GHC.Base.++ sat_sccnd;
          'e'# ->
              let {
                sat_sccnh [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccmT
                     w1_sccmU
                     ww_sccmV
                     ww1_sccmW
                     ww2_sccmX
                     ww3_sccmY
                     ww4_sccmZ] \u []
                        case
                            Text.Printf.$wdfmt w_sccmT 'e'# ww1_sccmW ww4_sccmZ w1_sccmU
                        of
                        { (#,#) ww7_sccnf [Occ=Once] ww8_sccng [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccmV ww2_sccmX ww3_sccmY ww7_sccnf ww8_sccng;
                        };
              } in  GHC.Base.++ sat_sccnh;
          'f'# ->
              let {
                sat_sccnl [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccmT
                     w1_sccmU
                     ww_sccmV
                     ww1_sccmW
                     ww2_sccmX
                     ww3_sccmY
                     ww4_sccmZ] \u []
                        case
                            Text.Printf.$wdfmt w_sccmT 'f'# ww1_sccmW ww4_sccmZ w1_sccmU
                        of
                        { (#,#) ww7_sccnj [Occ=Once] ww8_sccnk [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccmV ww2_sccmX ww3_sccmY ww7_sccnj ww8_sccnk;
                        };
              } in  GHC.Base.++ sat_sccnl;
          'g'# ->
              let {
                sat_sccnp [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccmT
                     w1_sccmU
                     ww_sccmV
                     ww1_sccmW
                     ww2_sccmX
                     ww3_sccmY
                     ww4_sccmZ] \u []
                        case
                            Text.Printf.$wdfmt w_sccmT 'g'# ww1_sccmW ww4_sccmZ w1_sccmU
                        of
                        { (#,#) ww7_sccnn [Occ=Once] ww8_sccno [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccmV ww2_sccmX ww3_sccmY ww7_sccnn ww8_sccno;
                        };
              } in  GHC.Base.++ sat_sccnp;
          'v'# ->
              let {
                sat_sccnt [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sccmT
                     w1_sccmU
                     ww_sccmV
                     ww1_sccmW
                     ww2_sccmX
                     ww3_sccmY
                     ww4_sccmZ] \u []
                        case
                            Text.Printf.$wdfmt w_sccmT 'g'# ww1_sccmW ww4_sccmZ w1_sccmU
                        of
                        { (#,#) ww7_sccnr [Occ=Once] ww8_sccns [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sccmV ww2_sccmX ww3_sccmY ww7_sccnr ww8_sccns;
                        };
              } in  GHC.Base.++ sat_sccnt;
        };

Text.Printf.formatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Float.RealFloat a =>
     a -> Text.Printf.FieldFormatter
[GblId,
 Arity=3,
 Str=<L,U(U(U(U(A,A,A,C(U),A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,A,A,A,A,A),A,C(U),C(U(U)),C(U(1*U(U),A)),C(U(U,U(U))),A,A,A,A,C(U),C(U),A,C(U),A,A)><L,U><S(LLLLLLS(S)),1*U(1*U,U,U,1*U,1*U,A,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccnu w1_sccnv w2_sccnw]
        case w2_sccnw of {
          Text.Printf.FieldFormat ww1_sccny [Occ=Once]
                                  ww2_sccnz [Occ=Once]
                                  ww3_sccnA [Occ=Once]
                                  ww4_sccnB [Occ=Once]
                                  ww5_sccnC [Occ=Once]
                                  _ [Occ=Dead]
                                  ww7_sccnE [Occ=Once!] ->
              case ww7_sccnE of {
                GHC.Types.C# ww9_sccnG [Occ=Once] ->
                    Text.Printf.$wformatRealFloat
                        w_sccnu
                        w1_sccnv
                        ww1_sccny
                        ww2_sccnz
                        ww3_sccnA
                        ww4_sccnB
                        ww5_sccnC
                        ww9_sccnG;
              };
        };

Text.Printf.$fPrintfArgDouble_$cparseFormat
  :: GHC.Types.Double -> Text.Printf.ModifierParser
[GblId, Arity=2, Str=<L,A><S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_sccnH ds1_sccnI]
        case ds1_sccnI of {
          [] -> Text.Printf.errorShortFormat;
          : c_sccnK [Occ=Once] cs_sccnL [Occ=Once] ->
              Text.Printf.FormatParse [GHC.Types.[] c_sccnK cs_sccnL];
        };

Text.Printf.$fPrintfArgDouble [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Double
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgDouble_$sformatRealFloat
                                            Text.Printf.$fPrintfArgDouble_$cparseFormat];

Text.Printf.$fPrintfArgFloat_$cparseFormat
  :: GHC.Types.Float -> Text.Printf.ModifierParser
[GblId, Arity=2, Str=<L,A><S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_sccnM ds1_sccnN]
        case ds1_sccnN of {
          [] -> Text.Printf.errorShortFormat;
          : c_sccnP [Occ=Once] cs_sccnQ [Occ=Once] ->
              Text.Printf.FormatParse [GHC.Types.[] c_sccnP cs_sccnQ];
        };

Text.Printf.$fPrintfArgFloat [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Float
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgFloat_$sformatRealFloat
                                            Text.Printf.$fPrintfArgFloat_$cparseFormat];

Text.Printf.$w$sformatString [InlPrag=NOUSERINLINE[0]]
  :: [GHC.Types.Char]
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=5,
 Str=<L,1*U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccnR ww_sccnS ww1_sccnT ww2_sccnU ww3_sccnV]
        let-no-escape {
          $w$j_sccnW [InlPrag=NOUSERINLINE[0],
                      Occ=Once*!T[1],
                      Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Char# -> GHC.Show.ShowS
          [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [w_sccnR ww_sccnS ww1_sccnT ww2_sccnU] \r [ww4_sccnX]
                  case ww4_sccnX of ds_sccnY {
                    __DEFAULT -> Text.Printf.$werrorBadFormat ds_sccnY;
                    's'# ->
                        let {
                          g_sccnZ [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [w_sccnR ww_sccnS ww1_sccnT ww2_sccnU] \u []
                                  let {
                                    sat_scco5 [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [w_sccnR ww1_sccnT] \u []
                                            case ww1_sccnT of {
                                              GHC.Base.Nothing -> w_sccnR;
                                              GHC.Base.Just n_scco1 [Occ=Once!] ->
                                                  case n_scco1 of {
                                                    GHC.Types.I# y_scco3 ->
                                                        case <# [0# y_scco3] of {
                                                          __DEFAULT -> [] [];
                                                          1# ->
                                                              GHC.List.$wunsafeTake y_scco3 w_sccnR;
                                                        };
                                                  };
                                            };
                                  } in 
                                    Text.Printf.$wadjust ww_sccnS ww2_sccnU GHC.Types.[] sat_scco5;
                        } in  GHC.Base.++ g_sccnZ;
                  };
        } in 
          case ww3_sccnV of ds_scco7 {
            __DEFAULT -> $w$j_sccnW ds_scco7;
            'v'# -> $w$j_sccnW 's'#;
          };

Text.Printf.$wformatString [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.Printf.IsChar a =>
     [a]
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=6,
 Str=<L,U(C(U),A)><L,1*U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_scco8 w1_scco9 ww_sccoa ww1_sccob ww2_sccoc ww3_sccod]
        let-no-escape {
          $w$j_sccoe [InlPrag=NOUSERINLINE[0],
                      Occ=Once*!T[1],
                      Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Char# -> GHC.Show.ShowS
          [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [w_scco8
                        w1_scco9
                        ww_sccoa
                        ww1_sccob
                        ww2_sccoc] \r [ww4_sccof]
                  case ww4_sccof of ds_sccog {
                    __DEFAULT -> Text.Printf.$werrorBadFormat ds_sccog;
                    's'# ->
                        let {
                          g_sccoh [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [w_scco8 w1_scco9 ww_sccoa ww1_sccob ww2_sccoc] \u []
                                  let {
                                    sat_sccoz [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [w_scco8 w1_scco9 ww1_sccob] \u []
                                            case ww1_sccob of {
                                              GHC.Base.Nothing ->
                                                  let {
                                                    sat_sccoj [Occ=Once, Dmd=<L,C(U)>]
                                                      :: a_scbaN -> GHC.Types.Char
                                                    [LclId] =
                                                        [w_scco8] \u [] Text.Printf.toChar w_scco8;
                                                  } in  GHC.Base.map sat_sccoj w1_scco9;
                                              GHC.Base.Just n_sccok [Occ=Once!] ->
                                                  case n_sccok of {
                                                    GHC.Types.I# y_sccom ->
                                                        case <# [0# y_sccom] of {
                                                          __DEFAULT -> [] [];
                                                          1# ->
                                                              let {
                                                                $wgo_sccoo [InlPrag=NOUSERINLINE[0],
                                                                            Occ=LoopBreaker]
                                                                  :: [a_scbaN]
                                                                     -> GHC.Prim.Int#
                                                                     -> [GHC.Types.Char]
                                                                [LclId,
                                                                 Arity=2,
                                                                 Str=<S,1*U><L,1*U>,
                                                                 Unf=OtherCon []] =
                                                                    sat-only [w_scco8
                                                                              $wgo_sccoo] \r [w2_sccop
                                                                                              ww5_sccoq]
                                                                        case w2_sccop of {
                                                                          [] -> [] [];
                                                                          : y1_sccos [Occ=Once*]
                                                                            ys_sccot [Occ=Once] ->
                                                                              case
                                                                                  ww5_sccoq
                                                                              of
                                                                              ds1_sccou
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_sccox [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          [$wgo_sccoo
                                                                                           ys_sccot
                                                                                           ds1_sccou] \u []
                                                                                              case
                                                                                                  -# [ds1_sccou
                                                                                                      1#]
                                                                                              of
                                                                                              sat_sccow
                                                                                              { __DEFAULT ->
                                                                                                    $wgo_sccoo
                                                                                                        ys_sccot
                                                                                                        sat_sccow;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_sccov [Occ=Once]
                                                                                        :: GHC.Types.Char
                                                                                      [LclId] =
                                                                                          [w_scco8
                                                                                           y1_sccos] \u []
                                                                                              Text.Printf.toChar
                                                                                                  w_scco8
                                                                                                  y1_sccos;
                                                                                    } in 
                                                                                      : [sat_sccov
                                                                                         sat_sccox];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_sccoy [Occ=Once]
                                                                                        :: GHC.Types.Char
                                                                                      [LclId] =
                                                                                          [w_scco8
                                                                                           y1_sccos] \u []
                                                                                              Text.Printf.toChar
                                                                                                  w_scco8
                                                                                                  y1_sccos;
                                                                                    } in 
                                                                                      : [sat_sccoy
                                                                                         GHC.Types.[]];
                                                                              };
                                                                        };
                                                              } in  $wgo_sccoo w1_scco9 y_sccom;
                                                        };
                                                  };
                                            };
                                  } in 
                                    Text.Printf.$wadjust ww_sccoa ww2_sccoc GHC.Types.[] sat_sccoz;
                        } in  GHC.Base.++ g_sccoh;
                  };
        } in 
          case ww3_sccod of ds_sccoB {
            __DEFAULT -> $w$j_sccoe ds_sccoB;
            'v'# -> $w$j_sccoe 's'#;
          };

Text.Printf.formatString [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.Printf.IsChar a =>
     [a] -> Text.Printf.FieldFormatter
[GblId,
 Arity=3,
 Str=<L,U(C(U),A)><L,1*U><S(LLLLLLS(S)),1*U(1*U,1*U,U,A,A,A,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccoC w1_sccoD w2_sccoE]
        case w2_sccoE of {
          Text.Printf.FieldFormat ww1_sccoG [Occ=Once]
                                  ww2_sccoH [Occ=Once]
                                  ww3_sccoI [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ww7_sccoM [Occ=Once!] ->
              case ww7_sccoM of {
                GHC.Types.C# ww9_sccoO [Occ=Once] ->
                    Text.Printf.$wformatString
                        w_sccoC w1_sccoD ww1_sccoG ww2_sccoH ww3_sccoI ww9_sccoO;
              };
        };

lvl22_rcccn
  :: forall c. [c] -> [GHC.Types.Char] -> Text.Printf.FormatParse
[GblId, Arity=2, Str=<L,A><S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_sccoP ds1_sccoQ]
        case ds1_sccoQ of {
          [] -> Text.Printf.errorShortFormat;
          : c1_sccoS [Occ=Once] cs_sccoT [Occ=Once] ->
              Text.Printf.FormatParse [GHC.Types.[] c1_sccoS cs_sccoT];
        };

Text.Printf.$fPrintfArg[] [InlPrag=NOUSERINLINE CONLIKE]
  :: forall c. Text.Printf.IsChar c => Text.Printf.PrintfArg [c]
[GblId[DFunId], Arity=1, Str=<L,U(C(U),A)>m] =
    [] \r [$dIsChar_sccoU]
        let {
          sat_sccoV [Occ=Once] :: [c_ac8Zj] -> Text.Printf.FieldFormatter
          [LclId] =
              [$dIsChar_sccoU] \r [eta_B2 eta_B1]
                  Text.Printf.formatString $dIsChar_sccoU eta_B2 eta_B1;
        } in  Text.Printf.C:PrintfArg [sat_sccoV lvl22_rcccn];

lvl23_rccco :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['d'#];

sat_sccoW :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

sat_sccoX :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sccoW GHC.Types.[]];

lvl24_rcccp :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sccoX;

lvl25_rcccq :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "0X"#;

lvl26_rcccr :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl25_rcccq;

lvl27_rcccs :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "0b"#;

lvl28_rccct :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl27_rcccs;

lvl29_rcccu :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: illegal char conversion"#;

lvl30_rcccv :: GHC.Show.ShowS
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl29_rcccu of sat_sccoY {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sccoY;
        };

sat_sccoZ :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1114111#];

sat_sccp0 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sccoZ GHC.Types.[]];

lvl31_rcccw :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sccp0;

sat_sccp1 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

sat_sccp2 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sccp1 GHC.Types.[]];

lvl32_rcccx :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sccp2;

lvl33_rcccy :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "0"#;

lvl34_rcccz :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl33_rcccy;

sat_sccp3 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [10#];

sat_sccp4 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sccp3 GHC.Types.[]];

lvl35_rcccA :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sccp4;

lvl36_rcccB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "0x"#;

lvl37_rcccC :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl36_rcccB;

lvl38_rcccD :: GHC.Base.Maybe [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl26_rcccr];

lvl39_rcccE :: GHC.Base.Maybe [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl28_rccct];

lvl40_rcccF :: GHC.Base.Maybe [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl34_rcccz];

lvl41_rcccG :: GHC.Base.Maybe [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl37_rcccC];

Text.Printf.$wformatIntegral [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=9,
 Str=<L,1*U><L,U><L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccp5
           w1_sccp6
           ww_sccp7
           ww1_sccp8
           ww2_sccp9
           ww3_sccpa
           ww4_sccpb
           ww5_sccpc
           ww6_sccpd]
        let-no-escape {
          $w$j_sccpe [InlPrag=NOUSERINLINE[0],
                      Occ=Once*!T[8],
                      Dmd=<C(C(C(C(C(C(C(C(S)))))))),1*C1(C1(C1(C1(C1(C1(C1(C1(U))))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Prim.Char#
               -> Text.Printf.FieldFormat
               -> GHC.Show.ShowS
          [LclId[JoinId(8)],
           Arity=8,
           Str=<L,1*U><L,1*U><L,U><L,1*U><L,1*U><L,1*U><S,1*U><L,A>,
           Unf=OtherCon []] =
              sat-only [w_sccp5 w1_sccp6 ww1_sccp8] \r [w2_sccpf
                                                        w3_sccpg
                                                        w4_sccph
                                                        w5_sccpi
                                                        w6_sccpj
                                                        w7_sccpk
                                                        ww7_sccpl
                                                        w8_sccpm]
                  case ww7_sccpl of ds_sccpn {
                    __DEFAULT -> Text.Printf.$werrorBadFormat ds_sccpn;
                    'X'# ->
                        let {
                          sat_sccpC [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sccp5 w1_sccp6 ww1_sccp8 w2_sccpf w4_sccph w6_sccpj] \u []
                                  case
                                      GHC.Integer.Type.eqInteger# w1_sccp6 Text.Printf.formatChar2
                                  of
                                  { __DEFAULT ->
                                        case w6_sccpj of {
                                          GHC.Types.False ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl24_rcccp
                                                      GHC.Base.Nothing
                                                      ww1_sccp8
                                                      w_sccp5
                                                      w1_sccp6
                                              of
                                              { (#,#) ww9_sccpr [Occ=Once] ww10_sccps [Occ=Once] ->
                                                    let {
                                                      sat_sccpt [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [ww10_sccps] \u []
                                                              GHC.Base.map
                                                                  GHC.Unicode.toUpper ww10_sccps;
                                                    } in 
                                                      Text.Printf.$wadjust
                                                          w2_sccpf w4_sccph ww9_sccpr sat_sccpt;
                                              };
                                          GHC.Types.True ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl24_rcccp
                                                      lvl38_rcccD
                                                      ww1_sccp8
                                                      w_sccp5
                                                      w1_sccp6
                                              of
                                              { (#,#) ww9_sccpv [Occ=Once] ww10_sccpw [Occ=Once] ->
                                                    let {
                                                      sat_sccpx [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [ww10_sccpw] \u []
                                                              GHC.Base.map
                                                                  GHC.Unicode.toUpper ww10_sccpw;
                                                    } in 
                                                      Text.Printf.$wadjust
                                                          w2_sccpf w4_sccph ww9_sccpv sat_sccpx;
                                              };
                                        };
                                    1# ->
                                        case
                                            $wfmtu_rcccl
                                                lvl24_rcccp
                                                GHC.Base.Nothing
                                                ww1_sccp8
                                                w_sccp5
                                                w1_sccp6
                                        of
                                        { (#,#) ww9_sccpz [Occ=Once] ww10_sccpA [Occ=Once] ->
                                              let {
                                                sat_sccpB [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    [ww10_sccpA] \u []
                                                        GHC.Base.map GHC.Unicode.toUpper ww10_sccpA;
                                              } in 
                                                Text.Printf.$wadjust
                                                    w2_sccpf w4_sccph ww9_sccpz sat_sccpB;
                                        };
                                  };
                        } in  GHC.Base.++ sat_sccpC;
                    'b'# ->
                        let {
                          sat_sccpO [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sccp5 w1_sccp6 ww1_sccp8 w2_sccpf w4_sccph w6_sccpj] \u []
                                  case
                                      GHC.Integer.Type.eqInteger# w1_sccp6 Text.Printf.formatChar2
                                  of
                                  { __DEFAULT ->
                                        case w6_sccpj of {
                                          GHC.Types.False ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl21_rccck
                                                      GHC.Base.Nothing
                                                      ww1_sccp8
                                                      w_sccp5
                                                      w1_sccp6
                                              of
                                              { (#,#) ww9_sccpG [Occ=Once] ww10_sccpH [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sccpf w4_sccph ww9_sccpG ww10_sccpH;
                                              };
                                          GHC.Types.True ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl21_rccck
                                                      lvl39_rcccE
                                                      ww1_sccp8
                                                      w_sccp5
                                                      w1_sccp6
                                              of
                                              { (#,#) ww9_sccpJ [Occ=Once] ww10_sccpK [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sccpf w4_sccph ww9_sccpJ ww10_sccpK;
                                              };
                                        };
                                    1# ->
                                        case
                                            $wfmtu_rcccl
                                                lvl21_rccck
                                                GHC.Base.Nothing
                                                ww1_sccp8
                                                w_sccp5
                                                w1_sccp6
                                        of
                                        { (#,#) ww9_sccpM [Occ=Once] ww10_sccpN [Occ=Once] ->
                                              Text.Printf.$wadjust
                                                  w2_sccpf w4_sccph ww9_sccpM ww10_sccpN;
                                        };
                                  };
                        } in  GHC.Base.++ sat_sccpO;
                    'c'# ->
                        case
                            GHC.Integer.Type.geInteger# w1_sccp6 Text.Printf.formatChar2
                        of
                        { __DEFAULT -> lvl30_rcccv;
                          1# ->
                              case GHC.Integer.Type.leInteger# w1_sccp6 lvl31_rcccw of {
                                __DEFAULT -> lvl30_rcccv;
                                1# ->
                                    case w3_sccpg of {
                                      GHC.Base.Nothing ->
                                          case GHC.Base.eqString w7_sccpk GHC.Types.[] of {
                                            GHC.Types.False -> lvl30_rcccv;
                                            GHC.Types.True ->
                                                let {
                                                  sat_sccpX [Occ=Once] :: GHC.Types.Char
                                                  [LclId] =
                                                      [w1_sccp6] \u []
                                                          case
                                                              GHC.Integer.Type.integerToInt w1_sccp6
                                                          of
                                                          wild4_sccpT
                                                          { __DEFAULT ->
                                                                case
                                                                    int2Word# [wild4_sccpT]
                                                                of
                                                                sat_sccpU
                                                                { __DEFAULT ->
                                                                      case
                                                                          leWord# [sat_sccpU
                                                                                   1114111##]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            GHC.Char.$wlvl
                                                                                wild4_sccpT;
                                                                        1# ->
                                                                            case
                                                                                chr# [wild4_sccpT]
                                                                            of
                                                                            sat_sccpW
                                                                            { __DEFAULT ->
                                                                                  GHC.Types.C# [sat_sccpW];
                                                                            };
                                                                      };
                                                                };
                                                          }; } in
                                                let {
                                                  sat_sccpY [Occ=Once] :: [GHC.Types.Char]
                                                  [LclId] =
                                                      CCCS :! [sat_sccpX GHC.Types.[]];
                                                } in 
                                                  Text.Printf.$w$sformatString
                                                      sat_sccpY
                                                      w2_sccpf
                                                      GHC.Base.Nothing
                                                      w4_sccph
                                                      's'#;
                                          };
                                      GHC.Base.Just _ [Occ=Dead] -> lvl30_rcccv;
                                    };
                              };
                        };
                    'd'# ->
                        let {
                          sat_sccq3 [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w1_sccp6 ww1_sccp8 w2_sccpf w4_sccph w5_sccpi] \u []
                                  case $wfmti_rcccm ww1_sccp8 w1_sccp6 of {
                                    (#,#) ww9_sccq1 [Occ=Once] ww10_sccq2 [Occ=Once] ->
                                        Text.Printf.$wadjustSigned
                                            w2_sccpf w4_sccph w5_sccpi ww9_sccq1 ww10_sccq2;
                                  };
                        } in  GHC.Base.++ sat_sccq3;
                    'i'# ->
                        let {
                          sat_sccq7 [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w1_sccp6 ww1_sccp8 w2_sccpf w4_sccph w5_sccpi] \u []
                                  case $wfmti_rcccm ww1_sccp8 w1_sccp6 of {
                                    (#,#) ww9_sccq5 [Occ=Once] ww10_sccq6 [Occ=Once] ->
                                        Text.Printf.$wadjustSigned
                                            w2_sccpf w4_sccph w5_sccpi ww9_sccq5 ww10_sccq6;
                                  };
                        } in  GHC.Base.++ sat_sccq7;
                    'o'# ->
                        let {
                          sat_sccqj [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sccp5 w1_sccp6 ww1_sccp8 w2_sccpf w4_sccph w6_sccpj] \u []
                                  case
                                      GHC.Integer.Type.eqInteger# w1_sccp6 Text.Printf.formatChar2
                                  of
                                  { __DEFAULT ->
                                        case w6_sccpj of {
                                          GHC.Types.False ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl32_rcccx
                                                      GHC.Base.Nothing
                                                      ww1_sccp8
                                                      w_sccp5
                                                      w1_sccp6
                                              of
                                              { (#,#) ww9_sccqb [Occ=Once] ww10_sccqc [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sccpf w4_sccph ww9_sccqb ww10_sccqc;
                                              };
                                          GHC.Types.True ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl32_rcccx
                                                      lvl40_rcccF
                                                      ww1_sccp8
                                                      w_sccp5
                                                      w1_sccp6
                                              of
                                              { (#,#) ww9_sccqe [Occ=Once] ww10_sccqf [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sccpf w4_sccph ww9_sccqe ww10_sccqf;
                                              };
                                        };
                                    1# ->
                                        case
                                            $wfmtu_rcccl
                                                lvl32_rcccx
                                                GHC.Base.Nothing
                                                ww1_sccp8
                                                w_sccp5
                                                w1_sccp6
                                        of
                                        { (#,#) ww9_sccqh [Occ=Once] ww10_sccqi [Occ=Once] ->
                                              Text.Printf.$wadjust
                                                  w2_sccpf w4_sccph ww9_sccqh ww10_sccqi;
                                        };
                                  };
                        } in  GHC.Base.++ sat_sccqj;
                    'u'# ->
                        let {
                          sat_sccqn [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sccp5 w1_sccp6 ww1_sccp8 w2_sccpf w4_sccph] \u []
                                  case
                                      $wfmtu_rcccl
                                          lvl35_rcccA GHC.Base.Nothing ww1_sccp8 w_sccp5 w1_sccp6
                                  of
                                  { (#,#) ww9_sccql [Occ=Once] ww10_sccqm [Occ=Once] ->
                                        Text.Printf.$wadjust w2_sccpf w4_sccph ww9_sccql ww10_sccqm;
                                  };
                        } in  GHC.Base.++ sat_sccqn;
                    'x'# ->
                        let {
                          sat_sccqz [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sccp5 w1_sccp6 ww1_sccp8 w2_sccpf w4_sccph w6_sccpj] \u []
                                  case
                                      GHC.Integer.Type.eqInteger# w1_sccp6 Text.Printf.formatChar2
                                  of
                                  { __DEFAULT ->
                                        case w6_sccpj of {
                                          GHC.Types.False ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl24_rcccp
                                                      GHC.Base.Nothing
                                                      ww1_sccp8
                                                      w_sccp5
                                                      w1_sccp6
                                              of
                                              { (#,#) ww9_sccqr [Occ=Once] ww10_sccqs [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sccpf w4_sccph ww9_sccqr ww10_sccqs;
                                              };
                                          GHC.Types.True ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl24_rcccp
                                                      lvl41_rcccG
                                                      ww1_sccp8
                                                      w_sccp5
                                                      w1_sccp6
                                              of
                                              { (#,#) ww9_sccqu [Occ=Once] ww10_sccqv [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sccpf w4_sccph ww9_sccqu ww10_sccqv;
                                              };
                                        };
                                    1# ->
                                        case
                                            $wfmtu_rcccl
                                                lvl24_rcccp
                                                GHC.Base.Nothing
                                                ww1_sccp8
                                                w_sccp5
                                                w1_sccp6
                                        of
                                        { (#,#) ww9_sccqx [Occ=Once] ww10_sccqy [Occ=Once] ->
                                              Text.Printf.$wadjust
                                                  w2_sccpf w4_sccph ww9_sccqx ww10_sccqy;
                                        };
                                  };
                        } in  GHC.Base.++ sat_sccqz;
                  };
        } in 
          case ww1_sccp8 of wild_sccqA {
            GHC.Base.Nothing ->
                case ww6_sccpd of ds_sccqB {
                  __DEFAULT ->
                      let {
                        sat_sccqC [Occ=Once] :: GHC.Types.Char
                        [LclId] =
                            CCCS GHC.Types.C#! [ds_sccqB]; } in
                      let {
                        sat_sccqD [Occ=Once] :: Text.Printf.FieldFormat
                        [LclId] =
                            CCCS Text.Printf.FieldFormat! [ww_sccp7
                                                           GHC.Base.Nothing
                                                           ww2_sccp9
                                                           ww3_sccpa
                                                           ww4_sccpb
                                                           ww5_sccpc
                                                           sat_sccqC];
                      } in 
                        $w$j_sccpe
                            ww_sccp7
                            GHC.Base.Nothing
                            ww2_sccp9
                            ww3_sccpa
                            ww4_sccpb
                            ww5_sccpc
                            ds_sccqB
                            sat_sccqD;
                  'v'# ->
                      let {
                        sat_sccqE [Occ=Once] :: Text.Printf.FieldFormat
                        [LclId] =
                            CCCS Text.Printf.FieldFormat! [ww_sccp7
                                                           GHC.Base.Nothing
                                                           ww2_sccp9
                                                           ww3_sccpa
                                                           ww4_sccpb
                                                           ww5_sccpc
                                                           lvl23_rccco];
                      } in 
                        $w$j_sccpe
                            ww_sccp7
                            GHC.Base.Nothing
                            ww2_sccp9
                            ww3_sccpa
                            ww4_sccpb
                            ww5_sccpc
                            'd'#
                            sat_sccqE;
                };
            GHC.Base.Just _ [Occ=Dead] ->
                case ww2_sccp9 of wild1_sccqG {
                  GHC.Base.Nothing ->
                      case ww6_sccpd of ds1_sccqH {
                        __DEFAULT ->
                            let {
                              sat_sccqI [Occ=Once] :: GHC.Types.Char
                              [LclId] =
                                  CCCS GHC.Types.C#! [ds1_sccqH]; } in
                            let {
                              sat_sccqJ [Occ=Once] :: Text.Printf.FieldFormat
                              [LclId] =
                                  CCCS Text.Printf.FieldFormat! [ww_sccp7
                                                                 wild_sccqA
                                                                 GHC.Base.Nothing
                                                                 ww3_sccpa
                                                                 ww4_sccpb
                                                                 ww5_sccpc
                                                                 sat_sccqI];
                            } in 
                              $w$j_sccpe
                                  ww_sccp7
                                  wild_sccqA
                                  GHC.Base.Nothing
                                  ww3_sccpa
                                  ww4_sccpb
                                  ww5_sccpc
                                  ds1_sccqH
                                  sat_sccqJ;
                        'v'# ->
                            let {
                              sat_sccqK [Occ=Once] :: Text.Printf.FieldFormat
                              [LclId] =
                                  CCCS Text.Printf.FieldFormat! [ww_sccp7
                                                                 wild_sccqA
                                                                 GHC.Base.Nothing
                                                                 ww3_sccpa
                                                                 ww4_sccpb
                                                                 ww5_sccpc
                                                                 lvl23_rccco];
                            } in 
                              $w$j_sccpe
                                  ww_sccp7
                                  wild_sccqA
                                  GHC.Base.Nothing
                                  ww3_sccpa
                                  ww4_sccpb
                                  ww5_sccpc
                                  'd'#
                                  sat_sccqK;
                      };
                  GHC.Base.Just ds1_sccqL [Occ=Once!] ->
                      case ds1_sccqL of {
                        Text.Printf.LeftAdjust ->
                            case ww6_sccpd of ds2_sccqN {
                              __DEFAULT ->
                                  let {
                                    sat_sccqO [Occ=Once] :: GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.Types.C#! [ds2_sccqN]; } in
                                  let {
                                    sat_sccqP [Occ=Once] :: Text.Printf.FieldFormat
                                    [LclId] =
                                        CCCS Text.Printf.FieldFormat! [ww_sccp7
                                                                       wild_sccqA
                                                                       wild1_sccqG
                                                                       ww3_sccpa
                                                                       ww4_sccpb
                                                                       ww5_sccpc
                                                                       sat_sccqO];
                                  } in 
                                    $w$j_sccpe
                                        ww_sccp7
                                        wild_sccqA
                                        wild1_sccqG
                                        ww3_sccpa
                                        ww4_sccpb
                                        ww5_sccpc
                                        ds2_sccqN
                                        sat_sccqP;
                              'v'# ->
                                  let {
                                    sat_sccqQ [Occ=Once] :: Text.Printf.FieldFormat
                                    [LclId] =
                                        CCCS Text.Printf.FieldFormat! [ww_sccp7
                                                                       wild_sccqA
                                                                       wild1_sccqG
                                                                       ww3_sccpa
                                                                       ww4_sccpb
                                                                       ww5_sccpc
                                                                       lvl23_rccco];
                                  } in 
                                    $w$j_sccpe
                                        ww_sccp7
                                        wild_sccqA
                                        wild1_sccqG
                                        ww3_sccpa
                                        ww4_sccpb
                                        ww5_sccpc
                                        'd'#
                                        sat_sccqQ;
                            };
                        Text.Printf.ZeroPad ->
                            case ww6_sccpd of ds2_sccqR {
                              __DEFAULT ->
                                  let {
                                    sat_sccqS [Occ=Once] :: GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.Types.C#! [ds2_sccqR]; } in
                                  let {
                                    sat_sccqT [Occ=Once] :: Text.Printf.FieldFormat
                                    [LclId] =
                                        CCCS Text.Printf.FieldFormat! [ww_sccp7
                                                                       wild_sccqA
                                                                       GHC.Base.Nothing
                                                                       ww3_sccpa
                                                                       ww4_sccpb
                                                                       ww5_sccpc
                                                                       sat_sccqS];
                                  } in 
                                    $w$j_sccpe
                                        ww_sccp7
                                        wild_sccqA
                                        GHC.Base.Nothing
                                        ww3_sccpa
                                        ww4_sccpb
                                        ww5_sccpc
                                        ds2_sccqR
                                        sat_sccqT;
                              'v'# ->
                                  let {
                                    sat_sccqU [Occ=Once] :: Text.Printf.FieldFormat
                                    [LclId] =
                                        CCCS Text.Printf.FieldFormat! [ww_sccp7
                                                                       wild_sccqA
                                                                       GHC.Base.Nothing
                                                                       ww3_sccpa
                                                                       ww4_sccpb
                                                                       ww5_sccpc
                                                                       lvl23_rccco];
                                  } in 
                                    $w$j_sccpe
                                        ww_sccp7
                                        wild_sccqA
                                        GHC.Base.Nothing
                                        ww3_sccpa
                                        ww4_sccpb
                                        ww5_sccpc
                                        'd'#
                                        sat_sccqU;
                            };
                      };
                };
          };

Text.Printf.formatIntegral [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> Text.Printf.FieldFormatter
[GblId,
 Arity=3,
 Str=<L,1*U><L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,1*U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccqV w1_sccqW w2_sccqX]
        case w2_sccqX of {
          Text.Printf.FieldFormat ww1_sccqZ [Occ=Once]
                                  ww2_sccr0 [Occ=Once]
                                  ww3_sccr1 [Occ=Once]
                                  ww4_sccr2 [Occ=Once]
                                  ww5_sccr3 [Occ=Once]
                                  ww6_sccr4 [Occ=Once]
                                  ww7_sccr5 [Occ=Once!] ->
              case ww7_sccr5 of {
                GHC.Types.C# ww9_sccr7 [Occ=Once] ->
                    Text.Printf.$wformatIntegral
                        w_sccqV
                        w1_sccqW
                        ww1_sccqZ
                        ww2_sccr0
                        ww3_sccr1
                        ww4_sccr2
                        ww5_sccr3
                        ww6_sccr4
                        ww9_sccr7;
              };
        };

Text.Printf.formatChar1 :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.formatChar2];

Text.Printf.$wformatChar [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccr8
           ww_sccr9
           ww1_sccra
           ww2_sccrb
           ww3_sccrc
           ww4_sccrd
           ww5_sccre
           ww6_sccrf]
        case ww6_sccrf of ds_sccrg {
          __DEFAULT ->
              let {
                sat_sccrk [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [w_sccr8] \u []
                        case w_sccr8 of {
                          GHC.Types.C# c#_sccri [Occ=Once] ->
                              case ord# [c#_sccri] of sat_sccrj {
                                __DEFAULT -> GHC.Integer.Type.smallInteger sat_sccrj;
                              };
                        };
              } in 
                Text.Printf.$wformatIntegral
                    Text.Printf.formatChar1
                    sat_sccrk
                    ww_sccr9
                    ww1_sccra
                    ww2_sccrb
                    ww3_sccrc
                    ww4_sccrd
                    ww5_sccre
                    ds_sccrg;
          'v'# ->
              let {
                sat_sccro [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [w_sccr8] \u []
                        case w_sccr8 of {
                          GHC.Types.C# c#_sccrm [Occ=Once] ->
                              case ord# [c#_sccrm] of sat_sccrn {
                                __DEFAULT -> GHC.Integer.Type.smallInteger sat_sccrn;
                              };
                        };
              } in 
                Text.Printf.$wformatIntegral
                    Text.Printf.formatChar1
                    sat_sccro
                    ww_sccr9
                    ww1_sccra
                    ww2_sccrb
                    ww3_sccrc
                    ww4_sccrd
                    ww5_sccre
                    'c'#;
        };

Text.Printf.formatChar [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,1*U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccrp w1_sccrq]
        case w1_sccrq of {
          Text.Printf.FieldFormat ww1_sccrs [Occ=Once]
                                  ww2_sccrt [Occ=Once]
                                  ww3_sccru [Occ=Once]
                                  ww4_sccrv [Occ=Once]
                                  ww5_sccrw [Occ=Once]
                                  ww6_sccrx [Occ=Once]
                                  ww7_sccry [Occ=Once!] ->
              case ww7_sccry of {
                GHC.Types.C# ww9_sccrA [Occ=Once] ->
                    Text.Printf.$wformatChar
                        w_sccrp
                        ww1_sccrs
                        ww2_sccrt
                        ww3_sccru
                        ww4_sccrv
                        ww5_sccrw
                        ww6_sccrx
                        ww9_sccrA;
              };
        };

Text.Printf.$fPrintfArgChar [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Char
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.formatChar
                                            Text.Printf.$fPrintfArgChar_$cparseFormat];

Text.Printf.$fPrintfArgWord1 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['u'#];

Text.Printf.$w$sformatInt3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word64
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccrB
           ww_sccrC
           ww1_sccrD
           ww2_sccrE
           ww3_sccrF
           ww4_sccrG
           ww5_sccrH
           ww6_sccrI]
        let-no-escape {
          $j_sccrJ [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_sccrB ww5_sccrH] \r [ww7_sccrK
                                               ww8_sccrL
                                               ww9_sccrM
                                               ww10_sccrN
                                               ww11_sccrO
                                               ww12_sccrP
                                               ww13_sccrQ]
                  case ww13_sccrQ of {
                    GHC.Types.C# ww15_sccrS [Occ=Once] ->
                        let {
                          sat_sccrZ [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_sccrB] \u [] GHC.Word.$fIntegralWord64_$ctoInteger w_sccrB; } in
                        let {
                          sat_sccrY [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_sccrH] \s []
                                  case ww5_sccrH of wild_sccrT {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_sccrT
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_sccrW
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_sccrW;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_sccrY
                              sat_sccrZ
                              ww7_sccrK
                              ww8_sccrL
                              ww9_sccrM
                              ww10_sccrN
                              ww11_sccrO
                              ww12_sccrP
                              ww15_sccrS;
                  };
        } in 
          case ww6_sccrI of ds_sccs0 {
            __DEFAULT ->
                let {
                  sat_sccs1 [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_sccs0];
                } in 
                  $j_sccrJ
                      ww_sccrC
                      ww1_sccrD
                      ww2_sccrE
                      ww3_sccrF
                      ww4_sccrG
                      ww5_sccrH
                      sat_sccs1;
            'v'# ->
                $j_sccrJ
                    ww_sccrC
                    ww1_sccrD
                    ww2_sccrE
                    ww3_sccrF
                    ww4_sccrG
                    ww5_sccrH
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord64_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word64 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccs2 w1_sccs3]
        case w1_sccs3 of {
          Text.Printf.FieldFormat ww1_sccs5 [Occ=Once]
                                  ww2_sccs6 [Occ=Once]
                                  ww3_sccs7 [Occ=Once]
                                  ww4_sccs8 [Occ=Once]
                                  ww5_sccs9 [Occ=Once]
                                  ww6_sccsa [Occ=Once]
                                  ww7_sccsb [Occ=Once!] ->
              case ww7_sccsb of {
                GHC.Types.C# ww9_sccsd [Occ=Once] ->
                    Text.Printf.$w$sformatInt3
                        w_sccs2
                        ww1_sccs5
                        ww2_sccs6
                        ww3_sccs7
                        ww4_sccs8
                        ww5_sccs9
                        ww6_sccsa
                        ww9_sccsd;
              };
        };

Text.Printf.$w$sformatInt2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccse
           ww_sccsf
           ww1_sccsg
           ww2_sccsh
           ww3_sccsi
           ww4_sccsj
           ww5_sccsk
           ww6_sccsl]
        let-no-escape {
          $j_sccsm [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_sccse ww5_sccsk] \r [ww7_sccsn
                                               ww8_sccso
                                               ww9_sccsp
                                               ww10_sccsq
                                               ww11_sccsr
                                               ww12_sccss
                                               ww13_sccst]
                  case ww13_sccst of {
                    GHC.Types.C# ww15_sccsv [Occ=Once] ->
                        let {
                          sat_sccsC [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_sccse] \u [] GHC.Word.$ctoInteger2 w_sccse; } in
                        let {
                          sat_sccsB [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_sccsk] \s []
                                  case ww5_sccsk of wild_sccsw {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_sccsw
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_sccsz
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_sccsz;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_sccsB
                              sat_sccsC
                              ww7_sccsn
                              ww8_sccso
                              ww9_sccsp
                              ww10_sccsq
                              ww11_sccsr
                              ww12_sccss
                              ww15_sccsv;
                  };
        } in 
          case ww6_sccsl of ds_sccsD {
            __DEFAULT ->
                let {
                  sat_sccsE [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_sccsD];
                } in 
                  $j_sccsm
                      ww_sccsf
                      ww1_sccsg
                      ww2_sccsh
                      ww3_sccsi
                      ww4_sccsj
                      ww5_sccsk
                      sat_sccsE;
            'v'# ->
                $j_sccsm
                    ww_sccsf
                    ww1_sccsg
                    ww2_sccsh
                    ww3_sccsi
                    ww4_sccsj
                    ww5_sccsk
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord32_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccsF w1_sccsG]
        case w1_sccsG of {
          Text.Printf.FieldFormat ww1_sccsI [Occ=Once]
                                  ww2_sccsJ [Occ=Once]
                                  ww3_sccsK [Occ=Once]
                                  ww4_sccsL [Occ=Once]
                                  ww5_sccsM [Occ=Once]
                                  ww6_sccsN [Occ=Once]
                                  ww7_sccsO [Occ=Once!] ->
              case ww7_sccsO of {
                GHC.Types.C# ww9_sccsQ [Occ=Once] ->
                    Text.Printf.$w$sformatInt2
                        w_sccsF
                        ww1_sccsI
                        ww2_sccsJ
                        ww3_sccsK
                        ww4_sccsL
                        ww5_sccsM
                        ww6_sccsN
                        ww9_sccsQ;
              };
        };

Text.Printf.$w$sformatInt1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccsR
           ww_sccsS
           ww1_sccsT
           ww2_sccsU
           ww3_sccsV
           ww4_sccsW
           ww5_sccsX
           ww6_sccsY]
        let-no-escape {
          $j_sccsZ [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_sccsR ww5_sccsX] \r [ww7_scct0
                                               ww8_scct1
                                               ww9_scct2
                                               ww10_scct3
                                               ww11_scct4
                                               ww12_scct5
                                               ww13_scct6]
                  case ww13_scct6 of {
                    GHC.Types.C# ww15_scct8 [Occ=Once] ->
                        let {
                          sat_scctf [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_sccsR] \u [] GHC.Word.$ctoInteger1 w_sccsR; } in
                        let {
                          sat_sccte [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_sccsX] \s []
                                  case ww5_sccsX of wild_scct9 {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_scct9
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_scctc
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_scctc;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_sccte
                              sat_scctf
                              ww7_scct0
                              ww8_scct1
                              ww9_scct2
                              ww10_scct3
                              ww11_scct4
                              ww12_scct5
                              ww15_scct8;
                  };
        } in 
          case ww6_sccsY of ds_scctg {
            __DEFAULT ->
                let {
                  sat_sccth [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_scctg];
                } in 
                  $j_sccsZ
                      ww_sccsS
                      ww1_sccsT
                      ww2_sccsU
                      ww3_sccsV
                      ww4_sccsW
                      ww5_sccsX
                      sat_sccth;
            'v'# ->
                $j_sccsZ
                    ww_sccsS
                    ww1_sccsT
                    ww2_sccsU
                    ww3_sccsV
                    ww4_sccsW
                    ww5_sccsX
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord16_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccti w1_scctj]
        case w1_scctj of {
          Text.Printf.FieldFormat ww1_scctl [Occ=Once]
                                  ww2_scctm [Occ=Once]
                                  ww3_scctn [Occ=Once]
                                  ww4_sccto [Occ=Once]
                                  ww5_scctp [Occ=Once]
                                  ww6_scctq [Occ=Once]
                                  ww7_scctr [Occ=Once!] ->
              case ww7_scctr of {
                GHC.Types.C# ww9_scctt [Occ=Once] ->
                    Text.Printf.$w$sformatInt1
                        w_sccti
                        ww1_scctl
                        ww2_scctm
                        ww3_scctn
                        ww4_sccto
                        ww5_scctp
                        ww6_scctq
                        ww9_scctt;
              };
        };

Text.Printf.$w$sformatInt4 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_scctu
           ww_scctv
           ww1_scctw
           ww2_scctx
           ww3_sccty
           ww4_scctz
           ww5_scctA
           ww6_scctB]
        let-no-escape {
          $j_scctC [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_scctu ww5_scctA] \r [ww7_scctD
                                               ww8_scctE
                                               ww9_scctF
                                               ww10_scctG
                                               ww11_scctH
                                               ww12_scctI
                                               ww13_scctJ]
                  case ww13_scctJ of {
                    GHC.Types.C# ww15_scctL [Occ=Once] ->
                        let {
                          sat_scctS [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_scctu] \u [] GHC.Word.$ctoInteger w_scctu; } in
                        let {
                          sat_scctR [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_scctA] \s []
                                  case ww5_scctA of wild_scctM {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_scctM
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_scctP
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_scctP;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_scctR
                              sat_scctS
                              ww7_scctD
                              ww8_scctE
                              ww9_scctF
                              ww10_scctG
                              ww11_scctH
                              ww12_scctI
                              ww15_scctL;
                  };
        } in 
          case ww6_scctB of ds_scctT {
            __DEFAULT ->
                let {
                  sat_scctU [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_scctT];
                } in 
                  $j_scctC
                      ww_scctv
                      ww1_scctw
                      ww2_scctx
                      ww3_sccty
                      ww4_scctz
                      ww5_scctA
                      sat_scctU;
            'v'# ->
                $j_scctC
                    ww_scctv
                    ww1_scctw
                    ww2_scctx
                    ww3_sccty
                    ww4_scctz
                    ww5_scctA
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord8_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_scctV w1_scctW]
        case w1_scctW of {
          Text.Printf.FieldFormat ww1_scctY [Occ=Once]
                                  ww2_scctZ [Occ=Once]
                                  ww3_sccu0 [Occ=Once]
                                  ww4_sccu1 [Occ=Once]
                                  ww5_sccu2 [Occ=Once]
                                  ww6_sccu3 [Occ=Once]
                                  ww7_sccu4 [Occ=Once!] ->
              case ww7_sccu4 of {
                GHC.Types.C# ww9_sccu6 [Occ=Once] ->
                    Text.Printf.$w$sformatInt4
                        w_scctV
                        ww1_scctY
                        ww2_scctZ
                        ww3_sccu0
                        ww4_sccu1
                        ww5_sccu2
                        ww6_sccu3
                        ww9_sccu6;
              };
        };

Text.Printf.$w$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Word
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(1*U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccu7
           ww_sccu8
           ww1_sccu9
           ww2_sccua
           ww3_sccub
           ww4_sccuc
           ww5_sccud
           ww6_sccue]
        let-no-escape {
          $j_sccuf [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_sccu7 ww5_sccud] \r [ww7_sccug
                                               ww8_sccuh
                                               ww9_sccui
                                               ww10_sccuj
                                               ww11_sccuk
                                               ww12_sccul
                                               ww13_sccum]
                  case ww13_sccum of {
                    GHC.Types.C# ww15_sccuo [Occ=Once] ->
                        let {
                          sat_sccuv [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_sccu7] \u [] GHC.Real.$fIntegralWord_$ctoInteger w_sccu7; } in
                        let {
                          sat_sccuu [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_sccud] \s []
                                  case ww5_sccud of wild_sccup {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_sccup
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_sccus
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_sccus;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_sccuu
                              sat_sccuv
                              ww7_sccug
                              ww8_sccuh
                              ww9_sccui
                              ww10_sccuj
                              ww11_sccuk
                              ww12_sccul
                              ww15_sccuo;
                  };
        } in 
          case ww6_sccue of ds_sccuw {
            __DEFAULT ->
                let {
                  sat_sccux [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_sccuw];
                } in 
                  $j_sccuf
                      ww_sccu8
                      ww1_sccu9
                      ww2_sccua
                      ww3_sccub
                      ww4_sccuc
                      ww5_sccud
                      sat_sccux;
            'v'# ->
                $j_sccuf
                    ww_sccu8
                    ww1_sccu9
                    ww2_sccua
                    ww3_sccub
                    ww4_sccuc
                    ww5_sccud
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Word -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(1*U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccuy w1_sccuz]
        case w1_sccuz of {
          Text.Printf.FieldFormat ww1_sccuB [Occ=Once]
                                  ww2_sccuC [Occ=Once]
                                  ww3_sccuD [Occ=Once]
                                  ww4_sccuE [Occ=Once]
                                  ww5_sccuF [Occ=Once]
                                  ww6_sccuG [Occ=Once]
                                  ww7_sccuH [Occ=Once!] ->
              case ww7_sccuH of {
                GHC.Types.C# ww9_sccuJ [Occ=Once] ->
                    Text.Printf.$w$sformatInt
                        w_sccuy
                        ww1_sccuB
                        ww2_sccuC
                        ww3_sccuD
                        ww4_sccuE
                        ww5_sccuF
                        ww6_sccuG
                        ww9_sccuJ;
              };
        };

Text.Printf.$fPrintfArgInt1
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.$fPrintfArgChar7];

Text.Printf.$fPrintfArgInt64_$sformatInt
  :: GHC.Int.Int64 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sccuK ufmt_sccuL]
        case ufmt_sccuL of {
          Text.Printf.FieldFormat ww1_sccuN [Occ=Once]
                                  ww2_sccuO [Occ=Once]
                                  ww3_sccuP [Occ=Once]
                                  ww4_sccuQ [Occ=Once]
                                  ww5_sccuR [Occ=Once]
                                  ww6_sccuS
                                  ww7_sccuT [Occ=Once!] ->
              case ww7_sccuT of {
                GHC.Types.C# ww9_sccuV [Occ=Once] ->
                    let {
                      sat_sccv2 [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sccuK] \u [] GHC.Int.$fIntegralInt64_$ctoInteger x_sccuK; } in
                    let {
                      sat_sccv1 [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sccuS] \s []
                              case ww6_sccuS of wild_sccuW {
                                [] -> Text.Printf.$fPrintfArgInt1;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sccuW
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sccuZ
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sccuZ;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sccv1
                          sat_sccv2
                          ww1_sccuN
                          ww2_sccuO
                          ww3_sccuP
                          ww4_sccuQ
                          ww5_sccuR
                          ww6_sccuS
                          ww9_sccuV;
              };
        };

Text.Printf.$fPrintfArgInt4
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.$fPrintfArgChar14];

Text.Printf.$fPrintfArgInt32_$sformatInt
  :: GHC.Int.Int32 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sccv3 ufmt_sccv4]
        case ufmt_sccv4 of {
          Text.Printf.FieldFormat ww1_sccv6 [Occ=Once]
                                  ww2_sccv7 [Occ=Once]
                                  ww3_sccv8 [Occ=Once]
                                  ww4_sccv9 [Occ=Once]
                                  ww5_sccva [Occ=Once]
                                  ww6_sccvb
                                  ww7_sccvc [Occ=Once!] ->
              case ww7_sccvc of {
                GHC.Types.C# ww9_sccve [Occ=Once] ->
                    let {
                      sat_sccvl [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sccv3] \u [] GHC.Int.$fIntegralInt32_$ctoInteger x_sccv3; } in
                    let {
                      sat_sccvk [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sccvb] \s []
                              case ww6_sccvb of wild_sccvf {
                                [] -> Text.Printf.$fPrintfArgInt4;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sccvf
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sccvi
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sccvi;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sccvk
                          sat_sccvl
                          ww1_sccv6
                          ww2_sccv7
                          ww3_sccv8
                          ww4_sccv9
                          ww5_sccva
                          ww6_sccvb
                          ww9_sccve;
              };
        };

Text.Printf.$fPrintfArgInt3
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.$fPrintfArgChar18];

Text.Printf.$fPrintfArgInt16_$sformatInt
  :: GHC.Int.Int16 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sccvm ufmt_sccvn]
        case ufmt_sccvn of {
          Text.Printf.FieldFormat ww1_sccvp [Occ=Once]
                                  ww2_sccvq [Occ=Once]
                                  ww3_sccvr [Occ=Once]
                                  ww4_sccvs [Occ=Once]
                                  ww5_sccvt [Occ=Once]
                                  ww6_sccvu
                                  ww7_sccvv [Occ=Once!] ->
              case ww7_sccvv of {
                GHC.Types.C# ww9_sccvx [Occ=Once] ->
                    let {
                      sat_sccvE [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sccvm] \u [] GHC.Int.$fIntegralInt16_$ctoInteger x_sccvm; } in
                    let {
                      sat_sccvD [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sccvu] \s []
                              case ww6_sccvu of wild_sccvy {
                                [] -> Text.Printf.$fPrintfArgInt3;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sccvy
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sccvB
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sccvB;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sccvD
                          sat_sccvE
                          ww1_sccvp
                          ww2_sccvq
                          ww3_sccvr
                          ww4_sccvs
                          ww5_sccvt
                          ww6_sccvu
                          ww9_sccvx;
              };
        };

Text.Printf.$fPrintfArgInt5
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.$fPrintfArgChar22];

Text.Printf.$fPrintfArgInt8_$sformatInt
  :: GHC.Int.Int8 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sccvF ufmt_sccvG]
        case ufmt_sccvG of {
          Text.Printf.FieldFormat ww1_sccvI [Occ=Once]
                                  ww2_sccvJ [Occ=Once]
                                  ww3_sccvK [Occ=Once]
                                  ww4_sccvL [Occ=Once]
                                  ww5_sccvM [Occ=Once]
                                  ww6_sccvN
                                  ww7_sccvO [Occ=Once!] ->
              case ww7_sccvO of {
                GHC.Types.C# ww9_sccvQ [Occ=Once] ->
                    let {
                      sat_sccvX [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sccvF] \u [] GHC.Int.$fIntegralInt8_$ctoInteger x_sccvF; } in
                    let {
                      sat_sccvW [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sccvN] \s []
                              case ww6_sccvN of wild_sccvR {
                                [] -> Text.Printf.$fPrintfArgInt5;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sccvR
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sccvU
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sccvU;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sccvW
                          sat_sccvX
                          ww1_sccvI
                          ww2_sccvJ
                          ww3_sccvK
                          ww4_sccvL
                          ww5_sccvM
                          ww6_sccvN
                          ww9_sccvQ;
              };
        };

Text.Printf.$fPrintfArgInt_$sformatInt
  :: GHC.Types.Int -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sccvY ufmt_sccvZ]
        case ufmt_sccvZ of {
          Text.Printf.FieldFormat ww1_sccw1 [Occ=Once]
                                  ww2_sccw2 [Occ=Once]
                                  ww3_sccw3 [Occ=Once]
                                  ww4_sccw4 [Occ=Once]
                                  ww5_sccw5 [Occ=Once]
                                  ww6_sccw6
                                  ww7_sccw7 [Occ=Once!] ->
              case ww7_sccw7 of {
                GHC.Types.C# ww9_sccw9 [Occ=Once] ->
                    let {
                      sat_sccwg [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sccvY] \u [] GHC.Real.$fIntegralInt_$ctoInteger x_sccvY; } in
                    let {
                      sat_sccwf [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sccw6] \s []
                              case ww6_sccw6 of wild_sccwa {
                                [] -> Text.Printf.$fPrintfArgInt1;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sccwa
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sccwd
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sccwd;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sccwf
                          sat_sccwg
                          ww1_sccw1
                          ww2_sccw2
                          ww3_sccw3
                          ww4_sccw4
                          ww5_sccw5
                          ww6_sccw6
                          ww9_sccw9;
              };
        };

Text.Printf.$wformatInt [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Real.Integral a, GHC.Enum.Bounded a) =>
     a
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=10,
 Str=<S(LLLLLLLLC(S)),U(A,A,A,A,A,A,A,A,C(U))><L,1*U(1*U,A)><L,U><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sccwh
           w1_sccwi
           w2_sccwj
           ww_sccwk
           ww1_sccwl
           ww2_sccwm
           ww3_sccwn
           ww4_sccwo
           ww5_sccwp
           ww6_sccwq]
        let {
          sat_sccws [Occ=Once] :: a_scbdf
          [LclId] =
              [w1_sccwi] \u [] GHC.Enum.minBound w1_sccwi;
        } in 
          case GHC.Real.toInteger w_sccwh sat_sccws of lb_sccwr [Dmd=<S,U>] {
            __DEFAULT ->
                let-no-escape {
                  $j_sccwt [Occ=Once*!T[7],
                            Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
                    :: GHC.Base.Maybe GHC.Types.Int
                       -> GHC.Base.Maybe GHC.Types.Int
                       -> GHC.Base.Maybe Text.Printf.FormatAdjustment
                       -> GHC.Base.Maybe Text.Printf.FormatSign
                       -> GHC.Types.Bool
                       -> GHC.Base.String
                       -> GHC.Types.Char
                       -> GHC.Show.ShowS
                  [LclId[JoinId(7)],
                   Arity=7,
                   Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
                   Unf=OtherCon []] =
                      sat-only [w_sccwh w2_sccwj ww5_sccwp lb_sccwr] \r [ww7_sccwu
                                                                         ww8_sccwv
                                                                         ww9_sccww
                                                                         ww10_sccwx
                                                                         ww11_sccwy
                                                                         ww12_sccwz
                                                                         ww13_sccwA]
                          case ww13_sccwA of {
                            GHC.Types.C# ww15_sccwC [Occ=Once] ->
                                let {
                                  sat_sccwJ [Occ=Once] :: GHC.Integer.Type.Integer
                                  [LclId] =
                                      [w_sccwh w2_sccwj] \u []
                                          GHC.Real.toInteger w_sccwh w2_sccwj; } in
                                let {
                                  sat_sccwI [Occ=Once, Dmd=<L,1*U>]
                                    :: GHC.Base.Maybe GHC.Integer.Type.Integer
                                  [LclId] =
                                      [ww5_sccwp lb_sccwr] \s []
                                          case ww5_sccwp of wild_sccwD {
                                            [] -> GHC.Base.Just [lb_sccwr];
                                            : _ [Occ=Dead] _ [Occ=Dead] ->
                                                case
                                                    GHC.List.lookup
                                                        GHC.Classes.$fEq[]_$s$fEq[]1
                                                        wild_sccwD
                                                        Text.Printf.intModifierMap
                                                of
                                                wild1_sccwG
                                                { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                                  GHC.Base.Just _ [Occ=Dead] -> wild1_sccwG;
                                                };
                                          };
                                } in 
                                  Text.Printf.$wformatIntegral
                                      sat_sccwI
                                      sat_sccwJ
                                      ww7_sccwu
                                      ww8_sccwv
                                      ww9_sccww
                                      ww10_sccwx
                                      ww11_sccwy
                                      ww12_sccwz
                                      ww15_sccwC;
                          };
                } in 
                  case
                      GHC.Integer.Type.eqInteger# lb_sccwr Text.Printf.formatChar2
                  of
                  { __DEFAULT ->
                        let {
                          sat_sccwL [Occ=Once] :: GHC.Types.Char
                          [LclId] =
                              CCCS GHC.Types.C#! [ww6_sccwq];
                        } in 
                          $j_sccwt
                              ww_sccwk
                              ww1_sccwl
                              ww2_sccwm
                              ww3_sccwn
                              ww4_sccwo
                              ww5_sccwp
                              sat_sccwL;
                    1# ->
                        case ww6_sccwq of ds_sccwM {
                          __DEFAULT ->
                              let {
                                sat_sccwN [Occ=Once] :: GHC.Types.Char
                                [LclId] =
                                    CCCS GHC.Types.C#! [ds_sccwM];
                              } in 
                                $j_sccwt
                                    ww_sccwk
                                    ww1_sccwl
                                    ww2_sccwm
                                    ww3_sccwn
                                    ww4_sccwo
                                    ww5_sccwp
                                    sat_sccwN;
                          'v'# ->
                              $j_sccwt
                                  ww_sccwk
                                  ww1_sccwl
                                  ww2_sccwm
                                  ww3_sccwn
                                  ww4_sccwo
                                  ww5_sccwp
                                  Text.Printf.$fPrintfArgWord1;
                        };
                  };
          };

Text.Printf.formatInt [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Real.Integral a, GHC.Enum.Bounded a) =>
     a -> Text.Printf.FieldFormatter
[GblId,
 Arity=4,
 Str=<S(LLLLLLLLC(S)),U(A,A,A,A,A,A,A,A,C(U))><L,1*U(1*U,A)><L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sccwO w1_sccwP w2_sccwQ w3_sccwR]
        case w3_sccwR of {
          Text.Printf.FieldFormat ww1_sccwT [Occ=Once]
                                  ww2_sccwU [Occ=Once]
                                  ww3_sccwV [Occ=Once]
                                  ww4_sccwW [Occ=Once]
                                  ww5_sccwX [Occ=Once]
                                  ww6_sccwY [Occ=Once]
                                  ww7_sccwZ [Occ=Once!] ->
              case ww7_sccwZ of {
                GHC.Types.C# ww9_sccx1 [Occ=Once] ->
                    Text.Printf.$wformatInt
                        w_sccwO
                        w1_sccwP
                        w2_sccwQ
                        ww1_sccwT
                        ww2_sccwU
                        ww3_sccwV
                        ww4_sccwW
                        ww5_sccwX
                        ww6_sccwY
                        ww9_sccx1;
              };
        };

Text.Printf.$fPrintfArgWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord64_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord32_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord16_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord8_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgWord [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Word
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt64_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt32_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt16_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt8_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Int
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.formatInteger
  :: GHC.Integer.Type.Integer -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sccx2 ufmt_sccx3]
        case ufmt_sccx3 of {
          Text.Printf.FieldFormat ww1_sccx5 [Occ=Once]
                                  ww2_sccx6 [Occ=Once]
                                  ww3_sccx7 [Occ=Once]
                                  ww4_sccx8 [Occ=Once]
                                  ww5_sccx9 [Occ=Once]
                                  ww6_sccxa
                                  ww7_sccxb [Occ=Once!] ->
              case ww7_sccxb of {
                GHC.Types.C# ww9_sccxd [Occ=Once] ->
                    let {
                      sat_sccxj [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sccxa] \s []
                              case ww6_sccxa of wild_sccxe {
                                [] -> GHC.Base.Nothing [];
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sccxe
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sccxh
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sccxh;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sccxj
                          x_sccx2
                          ww1_sccx5
                          ww2_sccx6
                          ww3_sccx7
                          ww4_sccx8
                          ww5_sccx9
                          ww6_sccxa
                          ww9_sccxd;
              };
        };

Text.Printf.$fPrintfArgNatural_$cformatArg
  :: GHC.Natural.Natural -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sccxk ufmt_sccxl]
        case ufmt_sccxl of {
          Text.Printf.FieldFormat ww1_sccxn [Occ=Once]
                                  ww2_sccxo [Occ=Once]
                                  ww3_sccxp [Occ=Once]
                                  ww4_sccxq [Occ=Once]
                                  ww5_sccxr [Occ=Once]
                                  ww6_sccxs
                                  ww7_sccxt [Occ=Once!] ->
              case ww7_sccxt of {
                GHC.Types.C# ww9_sccxv [Occ=Once] ->
                    let {
                      sat_sccxB [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sccxs] \s []
                              case ww6_sccxs of wild_sccxw {
                                [] -> GHC.Base.Nothing [];
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sccxw
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sccxz
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sccxz;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sccxB
                          x_sccxk
                          ww1_sccxn
                          ww2_sccxo
                          ww3_sccxp
                          ww4_sccxq
                          ww5_sccxr
                          ww6_sccxs
                          ww9_sccxv;
              };
        };

Text.Printf.$fPrintfArgNatural [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Natural.Natural
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgNatural_$cformatArg
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Integer.Type.Integer
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.formatInteger
                                            Text.Printf.parseIntFormat];

lvl42_rcccH :: Text.ParserCombinators.ReadP.P GHC.Types.Int
[GblId] =
    [] \u []
        GHC.Read.$fReadInt_$sreadNumber
            GHC.Read.$fReadInt2
            Text.ParserCombinators.ReadPrec.minPrec
            Text.Read.readEither7;

lvl43_rcccI :: Text.Printf.FieldFormat
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.FieldFormat! [GHC.Base.Nothing
                                            GHC.Base.Nothing
                                            GHC.Base.Nothing
                                            GHC.Base.Nothing
                                            GHC.Types.False
                                            GHC.Types.[]
                                            lvl23_rccco];

lvl44_rcccJ :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.errorWithoutStackTrace Text.Read.readEither5;

lvl45_rcccK :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.errorWithoutStackTrace Text.Read.readEither2;

$wgetStar_rcccL
  :: [Text.Printf.UPrintf]
     -> (# [Text.Printf.UPrintf], GHC.Types.Int #)
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [w_sccxC]
        case w_sccxC of {
          [] -> Text.Printf.errorMissingArgument;
          : ds_sccxF [Occ=Once!] us'_sccxG [Occ=Once] ->
              case ds_sccxF of {
                (,) _ [Occ=Dead] nu_sccxJ [Occ=Once!] ->
                    let {
                      sat_sccxS [Occ=Once] :: GHC.Types.Int
                      [LclId] =
                          [nu_sccxJ] \u []
                              let {
                                sat_sccxK [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    [nu_sccxJ] \u [] nu_sccxJ lvl43_rcccI GHC.Types.[];
                              } in 
                                case
                                    Text.ParserCombinators.ReadP.run lvl42_rcccH sat_sccxK
                                of
                                sat_sccxL
                                { __DEFAULT ->
                                      case Text.Read.readEither8 sat_sccxL of {
                                        [] -> lvl44_rcccJ;
                                        : x_sccxN [Occ=Once] ds2_sccxO [Occ=Once!] ->
                                            case ds2_sccxO of {
                                              [] -> x_sccxN;
                                              : _ [Occ=Dead] _ [Occ=Dead] -> lvl45_rcccK;
                                            };
                                      };
                                };
                    } in  (#,#) [us'_sccxG sat_sccxS];
              };
        };

lvl46_rcccM :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl47_rcccN :: GHC.Base.Maybe Text.Printf.FormatAdjustment
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.LeftAdjust];

lvl48_rcccO :: GHC.Base.Maybe Text.Printf.FormatAdjustment
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.ZeroPad];

lvl49_rcccP :: (GHC.Types.Int, GHC.Base.String)
[GblId] =
    [] \u []
        case GHC.List.$wspan GHC.Unicode.isDigit GHC.Types.[] of {
          (#,#) ww1_sccxU [Occ=Once!] ww2_sccxV [Occ=Once*] ->
              case ww1_sccxU of wild_sccxW {
                [] -> (,) [lvl46_rcccM ww2_sccxV];
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sccy6 [Occ=Once] :: GHC.Types.Int
                      [LclId] =
                          [wild_sccxW] \u []
                              case
                                  Text.ParserCombinators.ReadP.run lvl42_rcccH wild_sccxW
                              of
                              sat_sccxZ
                              { __DEFAULT ->
                                    case Text.Read.readEither8 sat_sccxZ of {
                                      [] -> lvl44_rcccJ;
                                      : x_sccy1 [Occ=Once] ds_sccy2 [Occ=Once!] ->
                                          case ds_sccy2 of {
                                            [] -> x_sccy1;
                                            : _ [Occ=Dead] _ [Occ=Dead] -> lvl45_rcccK;
                                          };
                                    };
                              };
                    } in  (,) [sat_sccy6 ww2_sccxV];
              };
        };

lvl50_rcccQ :: GHC.Base.Maybe Text.Printf.FormatSign
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.SignPlus];

lvl51_rcccR :: GHC.Types.Int
[GblId] =
    [] \u []
        case lvl49_rcccP of {
          (,) p'_sccy8 [Occ=Once] _ [Occ=Dead] -> p'_sccy8;
        };

lvl52_rcccS :: GHC.Base.Maybe GHC.Types.Int
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl51_rcccR];

lvl53_rcccT :: GHC.Base.String
[GblId] =
    [] \u []
        case lvl49_rcccP of {
          (,) _ [Occ=Dead] r'_sccyc [Occ=Once] -> r'_sccyc;
        };

lvl54_rcccU :: GHC.Base.Maybe Text.Printf.FormatSign
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.SignSpace];

$wgetSpecs_rcccV
  :: GHC.Types.Bool
     -> GHC.Types.Bool
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> [Text.Printf.UPrintf]
     -> (# Text.Printf.FieldFormat, GHC.Base.String,
           [Text.Printf.UPrintf] #)
[GblId,
 Arity=6,
 Str=<L,1*U><L,1*U><L,U><L,U><S,1*U><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [w_sccyd
                    w1_sccye
                    w2_sccyf
                    w3_sccyg
                    w4_sccyh
                    w5_sccyi]
        case w4_sccyh of wild_sccyj {
          [] -> Text.Printf.errorShortFormat;
          : ds_sccyl [Occ=Once!] cs0_sccym [Occ=Once*] ->
              case ds_sccyl of {
                GHC.Types.C# ds1_sccyo [Occ=Once!] ->
                    case ds1_sccyo of ds2_sccyp {
                      __DEFAULT ->
                          case ord# [ds2_sccyp] of sat_sccyq {
                            __DEFAULT ->
                                case -# [sat_sccyq 48#] of sat_sccyr {
                                  __DEFAULT ->
                                      case int2Word# [sat_sccyr] of sat_sccys {
                                        __DEFAULT ->
                                            case leWord# [sat_sccys 9##] of {
                                              __DEFAULT ->
                                                  let {
                                                    ds3_sccyu [Dmd=<L,U(1*U,1*U,1*U)>]
                                                      :: Text.Printf.FormatParse
                                                    [LclId] =
                                                        [w5_sccyi wild_sccyj] \u []
                                                            case w5_sccyi of {
                                                              [] ->
                                                                  Text.Printf.errorMissingArgument;
                                                              : ds4_sccyw [Occ=Once!]
                                                                _ [Occ=Dead] ->
                                                                  case ds4_sccyw of {
                                                                    (,) ufmt_sccyz [Occ=Once!]
                                                                        _ [Occ=Dead] ->
                                                                        ufmt_sccyz wild_sccyj;
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_sccyT [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        [ds3_sccyu] \u []
                                                            case ds3_sccyu of {
                                                              Text.Printf.FormatParse _ [Occ=Dead]
                                                                                      _ [Occ=Dead]
                                                                                      cs_sccyS [Occ=Once] ->
                                                                  cs_sccyS;
                                                            }; } in
                                                  let {
                                                    sat_sccyN [Occ=Once] :: GHC.Types.Char
                                                    [LclId] =
                                                        [ds3_sccyu] \u []
                                                            case ds3_sccyu of {
                                                              Text.Printf.FormatParse _ [Occ=Dead]
                                                                                      c_sccyL [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                  c_sccyL;
                                                            }; } in
                                                  let {
                                                    sat_sccyI [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        [ds3_sccyu] \u []
                                                            case ds3_sccyu of {
                                                              Text.Printf.FormatParse ms_sccyF [Occ=Once]
                                                                                      _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                                                  ms_sccyF;
                                                            }; } in
                                                  let {
                                                    sat_sccyD [Occ=Once]
                                                      :: GHC.Base.Maybe Text.Printf.FormatAdjustment
                                                    [LclId] =
                                                        [w_sccyd w1_sccye] \u []
                                                            case w_sccyd of {
                                                              GHC.Types.False ->
                                                                  case w1_sccye of {
                                                                    GHC.Types.False ->
                                                                        GHC.Base.Nothing [];
                                                                    GHC.Types.True -> lvl48_rcccO;
                                                                  };
                                                              GHC.Types.True -> lvl47_rcccN;
                                                            }; } in
                                                  let {
                                                    sat_sccyO [Occ=Once] :: Text.Printf.FieldFormat
                                                    [LclId] =
                                                        CCCS Text.Printf.FieldFormat! [GHC.Base.Nothing
                                                                                       GHC.Base.Nothing
                                                                                       sat_sccyD
                                                                                       w2_sccyf
                                                                                       w3_sccyg
                                                                                       sat_sccyI
                                                                                       sat_sccyN];
                                                  } in  (#,,#) [sat_sccyO sat_sccyT w5_sccyi];
                                              1# ->
                                                  let {
                                                    ds3_sccyU [Dmd=<L,U(U(U),1*U)>]
                                                      :: (GHC.Types.Int, GHC.Base.String)
                                                    [LclId] =
                                                        [wild_sccyj] \u []
                                                            case
                                                                GHC.List.$wspan
                                                                    GHC.Unicode.isDigit wild_sccyj
                                                            of
                                                            { (#,#) ww1_sccyW [Occ=Once!]
                                                                    ww2_sccyX [Occ=Once*] ->
                                                                  case ww1_sccyW of wild2_sccyY {
                                                                    [] ->
                                                                        (,) [lvl46_rcccM ww2_sccyX];
                                                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                        let {
                                                                          sat_sccz8 [Occ=Once]
                                                                            :: GHC.Types.Int
                                                                          [LclId] =
                                                                              [wild2_sccyY] \u []
                                                                                  case
                                                                                      Text.ParserCombinators.ReadP.run
                                                                                          lvl42_rcccH
                                                                                          wild2_sccyY
                                                                                  of
                                                                                  sat_sccz1
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            Text.Read.readEither8
                                                                                                sat_sccz1
                                                                                        of
                                                                                        { [] ->
                                                                                              lvl44_rcccJ;
                                                                                          : x_sccz3 [Occ=Once]
                                                                                            ds4_sccz4 [Occ=Once!] ->
                                                                                              case
                                                                                                  ds4_sccz4
                                                                                              of
                                                                                              { [] ->
                                                                                                    x_sccz3;
                                                                                                : _ [Occ=Dead]
                                                                                                  _ [Occ=Dead] ->
                                                                                                    lvl45_rcccK;
                                                                                              };
                                                                                        };
                                                                                  };
                                                                        } in 
                                                                          (,) [sat_sccz8 ww2_sccyX];
                                                                  };
                                                            }; } in
                                                  let {
                                                    ds4_sccz9 [Dmd=<L,U(1*U,U,U)>]
                                                      :: (GHC.Base.Maybe GHC.Types.Int,
                                                          [GHC.Types.Char], [Text.Printf.UPrintf])
                                                    [LclId] =
                                                        [w5_sccyi ds3_sccyU] \u []
                                                            case ds3_sccyU of {
                                                              (,) _ [Occ=Dead]
                                                                  cs'_scczc [Occ=Once!] ->
                                                                  case cs'_scczc of wild3_scczd {
                                                                    [] ->
                                                                        (,,) [GHC.Base.Nothing
                                                                              GHC.Types.[]
                                                                              w5_sccyi];
                                                                    : ds5_sccze [Occ=Once!]
                                                                      ds6_scczf [Occ=Once!] ->
                                                                        case ds5_sccze of {
                                                                          GHC.Types.C# ds7_scczh [Occ=Once!] ->
                                                                              case ds7_scczh of {
                                                                                __DEFAULT ->
                                                                                    (,,) [GHC.Base.Nothing
                                                                                          wild3_scczd
                                                                                          w5_sccyi];
                                                                                '.'# ->
                                                                                    case
                                                                                        ds6_scczf
                                                                                    of
                                                                                    wild5_scczj
                                                                                    { [] ->
                                                                                          (,,) [lvl52_rcccS
                                                                                                lvl53_rcccT
                                                                                                w5_sccyi];
                                                                                      : ds9_scczk [Occ=Once!]
                                                                                        r_scczl [Occ=Once] ->
                                                                                          case
                                                                                              ds9_scczk
                                                                                          of
                                                                                          { GHC.Types.C# ds10_scczn [Occ=Once!] ->
                                                                                                case
                                                                                                    ds10_scczn
                                                                                                of
                                                                                                { __DEFAULT ->
                                                                                                      let {
                                                                                                        ds12_scczp [Dmd=<L,U(1*U,1*U)>]
                                                                                                          :: (GHC.Types.Int,
                                                                                                              GHC.Base.String)
                                                                                                        [LclId] =
                                                                                                            [wild5_scczj] \u []
                                                                                                                case
                                                                                                                    GHC.List.$wspan
                                                                                                                        GHC.Unicode.isDigit
                                                                                                                        wild5_scczj
                                                                                                                of
                                                                                                                { (#,#) ww1_scczr [Occ=Once!]
                                                                                                                        ww2_scczs [Occ=Once*] ->
                                                                                                                      case
                                                                                                                          ww1_scczr
                                                                                                                      of
                                                                                                                      wild7_scczt
                                                                                                                      { [] ->
                                                                                                                            (,) [lvl46_rcccM
                                                                                                                                 ww2_scczs];
                                                                                                                        : _ [Occ=Dead]
                                                                                                                          _ [Occ=Dead] ->
                                                                                                                            let {
                                                                                                                              sat_scczD [Occ=Once]
                                                                                                                                :: GHC.Types.Int
                                                                                                                              [LclId] =
                                                                                                                                  [wild7_scczt] \u []
                                                                                                                                      case
                                                                                                                                          Text.ParserCombinators.ReadP.run
                                                                                                                                              lvl42_rcccH
                                                                                                                                              wild7_scczt
                                                                                                                                      of
                                                                                                                                      sat_scczw
                                                                                                                                      { __DEFAULT ->
                                                                                                                                            case
                                                                                                                                                Text.Read.readEither8
                                                                                                                                                    sat_scczw
                                                                                                                                            of
                                                                                                                                            { [] ->
                                                                                                                                                  lvl44_rcccJ;
                                                                                                                                              : x_scczy [Occ=Once]
                                                                                                                                                ds13_scczz [Occ=Once!] ->
                                                                                                                                                  case
                                                                                                                                                      ds13_scczz
                                                                                                                                                  of
                                                                                                                                                  { [] ->
                                                                                                                                                        x_scczy;
                                                                                                                                                    : _ [Occ=Dead]
                                                                                                                                                      _ [Occ=Dead] ->
                                                                                                                                                        lvl45_rcccK;
                                                                                                                                                  };
                                                                                                                                            };
                                                                                                                                      };
                                                                                                                            } in 
                                                                                                                              (,) [sat_scczD
                                                                                                                                   ww2_scczs];
                                                                                                                      };
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_scczM [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            [ds12_scczp] \u []
                                                                                                                case
                                                                                                                    ds12_scczp
                                                                                                                of
                                                                                                                { (,) _ [Occ=Dead]
                                                                                                                      r'_scczL [Occ=Once] ->
                                                                                                                      r'_scczL;
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_scczH [Occ=Once]
                                                                                                          :: GHC.Types.Int
                                                                                                        [LclId] =
                                                                                                            [ds12_scczp] \u []
                                                                                                                case
                                                                                                                    ds12_scczp
                                                                                                                of
                                                                                                                { (,) p'_scczF [Occ=Once]
                                                                                                                      _ [Occ=Dead] ->
                                                                                                                      p'_scczF;
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_scczI [Occ=Once]
                                                                                                          :: GHC.Base.Maybe
                                                                                                               GHC.Types.Int
                                                                                                        [LclId] =
                                                                                                            CCCS GHC.Base.Just! [sat_scczH];
                                                                                                      } in 
                                                                                                        (,,) [sat_scczI
                                                                                                              sat_scczM
                                                                                                              w5_sccyi];
                                                                                                  '*'# ->
                                                                                                      let {
                                                                                                        ds12_scczN [Dmd=<L,U(1*U,1*U)>]
                                                                                                          :: ([Text.Printf.UPrintf],
                                                                                                              GHC.Types.Int)
                                                                                                        [LclId] =
                                                                                                            [w5_sccyi] \u []
                                                                                                                case
                                                                                                                    $wgetStar_rcccL
                                                                                                                        w5_sccyi
                                                                                                                of
                                                                                                                { (#,#) ww1_scczP [Occ=Once]
                                                                                                                        ww2_scczQ [Occ=Once] ->
                                                                                                                      (,) [ww1_scczP
                                                                                                                           ww2_scczQ];
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_scczZ [Occ=Once]
                                                                                                          :: [Text.Printf.UPrintf]
                                                                                                        [LclId] =
                                                                                                            [ds12_scczN] \u []
                                                                                                                case
                                                                                                                    ds12_scczN
                                                                                                                of
                                                                                                                { (,) us''_scczX [Occ=Once]
                                                                                                                      _ [Occ=Dead] ->
                                                                                                                      us''_scczX;
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_scczU [Occ=Once]
                                                                                                          :: GHC.Types.Int
                                                                                                        [LclId] =
                                                                                                            [ds12_scczN] \u []
                                                                                                                case
                                                                                                                    ds12_scczN
                                                                                                                of
                                                                                                                { (,) _ [Occ=Dead]
                                                                                                                      p'_scczT [Occ=Once] ->
                                                                                                                      p'_scczT;
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_scczV [Occ=Once]
                                                                                                          :: GHC.Base.Maybe
                                                                                                               GHC.Types.Int
                                                                                                        [LclId] =
                                                                                                            CCCS GHC.Base.Just! [sat_scczU];
                                                                                                      } in 
                                                                                                        (,,) [sat_scczV
                                                                                                              r_scczl
                                                                                                              sat_scczZ];
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    ds5_sccA0 [Dmd=<L,U(1*U,1*U,1*U)>]
                                                      :: Text.Printf.FormatParse
                                                    [LclId] =
                                                        [ds4_sccz9] \u []
                                                            case ds4_sccz9 of {
                                                              (,,) _ [Occ=Dead]
                                                                   cs''_sccA3 [Occ=Once]
                                                                   us'_sccA4 [Occ=Once!] ->
                                                                  case us'_sccA4 of {
                                                                    [] ->
                                                                        Text.Printf.errorMissingArgument;
                                                                    : ds7_sccA6 [Occ=Once!]
                                                                      _ [Occ=Dead] ->
                                                                        case ds7_sccA6 of {
                                                                          (,) ufmt_sccA9 [Occ=Once!]
                                                                              _ [Occ=Dead] ->
                                                                              ufmt_sccA9 cs''_sccA3;
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_sccAS [Occ=Once] :: [Text.Printf.UPrintf]
                                                    [LclId] =
                                                        [ds4_sccz9] \u []
                                                            case ds4_sccz9 of {
                                                              (,,) _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   us'_sccAR [Occ=Once] ->
                                                                  us'_sccAR;
                                                            }; } in
                                                  let {
                                                    sat_sccAN [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        [ds5_sccA0] \u []
                                                            case ds5_sccA0 of {
                                                              Text.Printf.FormatParse _ [Occ=Dead]
                                                                                      _ [Occ=Dead]
                                                                                      cs_sccAM [Occ=Once] ->
                                                                  cs_sccAM;
                                                            }; } in
                                                  let {
                                                    sat_sccAH [Occ=Once] :: GHC.Types.Char
                                                    [LclId] =
                                                        [ds5_sccA0] \u []
                                                            case ds5_sccA0 of {
                                                              Text.Printf.FormatParse _ [Occ=Dead]
                                                                                      c_sccAF [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                  c_sccAF;
                                                            }; } in
                                                  let {
                                                    sat_sccAC [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        [ds5_sccA0] \u []
                                                            case ds5_sccA0 of {
                                                              Text.Printf.FormatParse ms_sccAz [Occ=Once]
                                                                                      _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                                                  ms_sccAz;
                                                            }; } in
                                                  let {
                                                    sat_sccAx [Occ=Once]
                                                      :: GHC.Base.Maybe Text.Printf.FormatAdjustment
                                                    [LclId] =
                                                        [w_sccyd w1_sccye ds3_sccyU] \u []
                                                            case ds3_sccyU of {
                                                              (,) n_sccAq [Occ=Once!]
                                                                  _ [Occ=Dead] ->
                                                                  case n_sccAq of {
                                                                    GHC.Types.I# x_sccAt [Occ=Once] ->
                                                                        case <# [x_sccAt 0#] of {
                                                                          __DEFAULT ->
                                                                              case w_sccyd of {
                                                                                GHC.Types.False ->
                                                                                    case
                                                                                        w1_sccye
                                                                                    of
                                                                                    { GHC.Types.False ->
                                                                                          GHC.Base.Nothing [];
                                                                                      GHC.Types.True ->
                                                                                          lvl48_rcccO;
                                                                                    };
                                                                                GHC.Types.True ->
                                                                                    lvl47_rcccN;
                                                                              };
                                                                          1# -> lvl47_rcccN;
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_sccAo [Occ=Once]
                                                      :: GHC.Base.Maybe GHC.Types.Int
                                                    [LclId] =
                                                        [ds4_sccz9] \u []
                                                            case ds4_sccz9 of {
                                                              (,,) p_sccAl [Occ=Once]
                                                                   _ [Occ=Dead]
                                                                   _ [Occ=Dead] ->
                                                                  p_sccAl;
                                                            }; } in
                                                  let {
                                                    sat_sccAi [Occ=Once] :: GHC.Types.Int
                                                    [LclId] =
                                                        [ds3_sccyU] \u []
                                                            case ds3_sccyU of {
                                                              (,) n_sccAc [Occ=Once!]
                                                                  _ [Occ=Dead] ->
                                                                  case n_sccAc of wild3_sccAe {
                                                                    GHC.Types.I# x_sccAf ->
                                                                        case >=# [x_sccAf 0#] of {
                                                                          __DEFAULT ->
                                                                              case
                                                                                  negateInt# [x_sccAf]
                                                                              of
                                                                              sat_sccAh
                                                                              { __DEFAULT ->
                                                                                    GHC.Types.I# [sat_sccAh];
                                                                              };
                                                                          1# -> wild3_sccAe;
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_sccAj [Occ=Once]
                                                      :: GHC.Base.Maybe GHC.Types.Int
                                                    [LclId] =
                                                        CCCS GHC.Base.Just! [sat_sccAi]; } in
                                                  let {
                                                    sat_sccAI [Occ=Once] :: Text.Printf.FieldFormat
                                                    [LclId] =
                                                        CCCS Text.Printf.FieldFormat! [sat_sccAj
                                                                                       sat_sccAo
                                                                                       sat_sccAx
                                                                                       w2_sccyf
                                                                                       w3_sccyg
                                                                                       sat_sccAC
                                                                                       sat_sccAH];
                                                  } in  (#,,#) [sat_sccAI sat_sccAN sat_sccAS];
                                            };
                                      };
                                };
                          };
                      ' '# ->
                          let {
                            sat_sccAW [Occ=Once] :: GHC.Base.Maybe Text.Printf.FormatSign
                            [LclId] =
                                [w2_sccyf] \u []
                                    case w2_sccyf of {
                                      GHC.Base.Nothing -> lvl54_rcccU;
                                      GHC.Base.Just ds3_sccAU [Occ=Once!] ->
                                          case ds3_sccAU of {
                                            Text.Printf.SignPlus -> lvl50_rcccQ;
                                            Text.Printf.SignSpace -> lvl54_rcccU;
                                          };
                                    };
                          } in 
                            $wgetSpecs_rcccV
                                w_sccyd w1_sccye sat_sccAW w3_sccyg cs0_sccym w5_sccyi;
                      '#'# ->
                          $wgetSpecs_rcccV
                              w_sccyd w1_sccye w2_sccyf GHC.Types.True cs0_sccym w5_sccyi;
                      '*'# ->
                          let {
                            ds3_sccAX [Dmd=<L,U(1*U,U(U))>]
                              :: ([Text.Printf.UPrintf], GHC.Types.Int)
                            [LclId] =
                                [w5_sccyi] \u []
                                    case $wgetStar_rcccL w5_sccyi of {
                                      (#,#) ww1_sccAZ [Occ=Once] ww2_sccB0 [Occ=Once] ->
                                          (,) [ww1_sccAZ ww2_sccB0];
                                    }; } in
                          let {
                            ds4_sccB1 [Dmd=<L,U(1*U,U,U)>]
                              :: (GHC.Base.Maybe GHC.Types.Int, [GHC.Types.Char],
                                  [Text.Printf.UPrintf])
                            [LclId] =
                                [cs0_sccym ds3_sccAX] \u []
                                    case cs0_sccym of wild2_sccB2 {
                                      [] ->
                                          let {
                                            sat_sccB6 [Occ=Once] :: [Text.Printf.UPrintf]
                                            [LclId] =
                                                [ds3_sccAX] \u []
                                                    case ds3_sccAX of {
                                                      (,) us'_sccB4 [Occ=Once] _ [Occ=Dead] ->
                                                          us'_sccB4;
                                                    };
                                          } in  (,,) [GHC.Base.Nothing GHC.Types.[] sat_sccB6];
                                      : ds5_sccB7 [Occ=Once!] ds6_sccB8 [Occ=Once!] ->
                                          case ds5_sccB7 of {
                                            GHC.Types.C# ds7_sccBa [Occ=Once!] ->
                                                case ds7_sccBa of {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sccBf [Occ=Once]
                                                          :: [Text.Printf.UPrintf]
                                                        [LclId] =
                                                            [ds3_sccAX] \u []
                                                                case ds3_sccAX of {
                                                                  (,) us'_sccBd [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                      us'_sccBd;
                                                                };
                                                      } in 
                                                        (,,) [GHC.Base.Nothing
                                                              wild2_sccB2
                                                              sat_sccBf];
                                                  '.'# ->
                                                      case ds6_sccB8 of wild4_sccBg {
                                                        [] ->
                                                            let {
                                                              sat_sccBk [Occ=Once]
                                                                :: [Text.Printf.UPrintf]
                                                              [LclId] =
                                                                  [ds3_sccAX] \u []
                                                                      case ds3_sccAX of {
                                                                        (,) us'_sccBi [Occ=Once]
                                                                            _ [Occ=Dead] ->
                                                                            us'_sccBi;
                                                                      };
                                                            } in 
                                                              (,,) [lvl52_rcccS
                                                                    lvl53_rcccT
                                                                    sat_sccBk];
                                                        : ds9_sccBl [Occ=Once!]
                                                          r_sccBm [Occ=Once] ->
                                                            case ds9_sccBl of {
                                                              GHC.Types.C# ds10_sccBo [Occ=Once!] ->
                                                                  case ds10_sccBo of {
                                                                    __DEFAULT ->
                                                                        let {
                                                                          ds12_sccBq [Dmd=<L,U(1*U,1*U)>]
                                                                            :: (GHC.Types.Int,
                                                                                GHC.Base.String)
                                                                          [LclId] =
                                                                              [wild4_sccBg] \u []
                                                                                  case
                                                                                      GHC.List.$wspan
                                                                                          GHC.Unicode.isDigit
                                                                                          wild4_sccBg
                                                                                  of
                                                                                  { (#,#) ww1_sccBs [Occ=Once!]
                                                                                          ww2_sccBt [Occ=Once*] ->
                                                                                        case
                                                                                            ww1_sccBs
                                                                                        of
                                                                                        wild6_sccBu
                                                                                        { [] ->
                                                                                              (,) [lvl46_rcccM
                                                                                                   ww2_sccBt];
                                                                                          : _ [Occ=Dead]
                                                                                            _ [Occ=Dead] ->
                                                                                              let {
                                                                                                sat_sccBE [Occ=Once]
                                                                                                  :: GHC.Types.Int
                                                                                                [LclId] =
                                                                                                    [wild6_sccBu] \u []
                                                                                                        case
                                                                                                            Text.ParserCombinators.ReadP.run
                                                                                                                lvl42_rcccH
                                                                                                                wild6_sccBu
                                                                                                        of
                                                                                                        sat_sccBx
                                                                                                        { __DEFAULT ->
                                                                                                              case
                                                                                                                  Text.Read.readEither8
                                                                                                                      sat_sccBx
                                                                                                              of
                                                                                                              { [] ->
                                                                                                                    lvl44_rcccJ;
                                                                                                                : x_sccBz [Occ=Once]
                                                                                                                  ds13_sccBA [Occ=Once!] ->
                                                                                                                    case
                                                                                                                        ds13_sccBA
                                                                                                                    of
                                                                                                                    { [] ->
                                                                                                                          x_sccBz;
                                                                                                                      : _ [Occ=Dead]
                                                                                                                        _ [Occ=Dead] ->
                                                                                                                          lvl45_rcccK;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                              } in 
                                                                                                (,) [sat_sccBE
                                                                                                     ww2_sccBt];
                                                                                        };
                                                                                  }; } in
                                                                        let {
                                                                          sat_sccBR [Occ=Once]
                                                                            :: [Text.Printf.UPrintf]
                                                                          [LclId] =
                                                                              [ds3_sccAX] \u []
                                                                                  case
                                                                                      ds3_sccAX
                                                                                  of
                                                                                  { (,) us'_sccBP [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                                        us'_sccBP;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sccBN [Occ=Once]
                                                                            :: [GHC.Types.Char]
                                                                          [LclId] =
                                                                              [ds12_sccBq] \u []
                                                                                  case
                                                                                      ds12_sccBq
                                                                                  of
                                                                                  { (,) _ [Occ=Dead]
                                                                                        r'_sccBM [Occ=Once] ->
                                                                                        r'_sccBM;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sccBI [Occ=Once]
                                                                            :: GHC.Types.Int
                                                                          [LclId] =
                                                                              [ds12_sccBq] \u []
                                                                                  case
                                                                                      ds12_sccBq
                                                                                  of
                                                                                  { (,) p'_sccBG [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                                        p'_sccBG;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sccBJ [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 GHC.Types.Int
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [sat_sccBI];
                                                                        } in 
                                                                          (,,) [sat_sccBJ
                                                                                sat_sccBN
                                                                                sat_sccBR];
                                                                    '*'# ->
                                                                        let {
                                                                          ds12_sccBS [Dmd=<L,U(1*U,1*U)>]
                                                                            :: ([Text.Printf.UPrintf],
                                                                                GHC.Types.Int)
                                                                          [LclId] =
                                                                              [ds3_sccAX] \u []
                                                                                  case
                                                                                      ds3_sccAX
                                                                                  of
                                                                                  { (,) us'_sccBU [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                                        case
                                                                                            $wgetStar_rcccL
                                                                                                us'_sccBU
                                                                                        of
                                                                                        { (#,#) ww1_sccBX [Occ=Once]
                                                                                                ww2_sccBY [Occ=Once] ->
                                                                                              (,) [ww1_sccBX
                                                                                                   ww2_sccBY];
                                                                                        };
                                                                                  }; } in
                                                                        let {
                                                                          sat_sccC7 [Occ=Once]
                                                                            :: [Text.Printf.UPrintf]
                                                                          [LclId] =
                                                                              [ds12_sccBS] \u []
                                                                                  case
                                                                                      ds12_sccBS
                                                                                  of
                                                                                  { (,) us'''_sccC5 [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                                        us'''_sccC5;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sccC2 [Occ=Once]
                                                                            :: GHC.Types.Int
                                                                          [LclId] =
                                                                              [ds12_sccBS] \u []
                                                                                  case
                                                                                      ds12_sccBS
                                                                                  of
                                                                                  { (,) _ [Occ=Dead]
                                                                                        p'_sccC1 [Occ=Once] ->
                                                                                        p'_sccC1;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sccC3 [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 GHC.Types.Int
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [sat_sccC2];
                                                                        } in 
                                                                          (,,) [sat_sccC3
                                                                                r_sccBm
                                                                                sat_sccC7];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    }; } in
                          let {
                            ds5_sccC8 [Dmd=<L,U(1*U,1*U,1*U)>] :: Text.Printf.FormatParse
                            [LclId] =
                                [ds4_sccB1] \u []
                                    case ds4_sccB1 of {
                                      (,,) _ [Occ=Dead]
                                           cs''_sccCb [Occ=Once]
                                           us''_sccCc [Occ=Once!] ->
                                          case us''_sccCc of {
                                            [] -> Text.Printf.errorMissingArgument;
                                            : ds7_sccCe [Occ=Once!] _ [Occ=Dead] ->
                                                case ds7_sccCe of {
                                                  (,) ufmt_sccCh [Occ=Once!] _ [Occ=Dead] ->
                                                      ufmt_sccCh cs''_sccCb;
                                                };
                                          };
                                    }; } in
                          let {
                            sat_sccD0 [Occ=Once] :: [Text.Printf.UPrintf]
                            [LclId] =
                                [ds4_sccB1] \u []
                                    case ds4_sccB1 of {
                                      (,,) _ [Occ=Dead] _ [Occ=Dead] us''_sccCZ [Occ=Once] ->
                                          us''_sccCZ;
                                    }; } in
                          let {
                            sat_sccCV [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [ds5_sccC8] \u []
                                    case ds5_sccC8 of {
                                      Text.Printf.FormatParse _ [Occ=Dead]
                                                              _ [Occ=Dead]
                                                              cs_sccCU [Occ=Once] ->
                                          cs_sccCU;
                                    }; } in
                          let {
                            sat_sccCP [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                [ds5_sccC8] \u []
                                    case ds5_sccC8 of {
                                      Text.Printf.FormatParse _ [Occ=Dead]
                                                              c_sccCN [Occ=Once]
                                                              _ [Occ=Dead] ->
                                          c_sccCN;
                                    }; } in
                          let {
                            sat_sccCK [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [ds5_sccC8] \u []
                                    case ds5_sccC8 of {
                                      Text.Printf.FormatParse ms_sccCH [Occ=Once]
                                                              _ [Occ=Dead]
                                                              _ [Occ=Dead] ->
                                          ms_sccCH;
                                    }; } in
                          let {
                            sat_sccCF [Occ=Once] :: GHC.Base.Maybe Text.Printf.FormatAdjustment
                            [LclId] =
                                [w_sccyd w1_sccye ds3_sccAX] \u []
                                    case ds3_sccAX of {
                                      (,) _ [Occ=Dead] n_sccCz [Occ=Once!] ->
                                          case n_sccCz of {
                                            GHC.Types.I# x_sccCB [Occ=Once] ->
                                                case <# [x_sccCB 0#] of {
                                                  __DEFAULT ->
                                                      case w_sccyd of {
                                                        GHC.Types.False ->
                                                            case w1_sccye of {
                                                              GHC.Types.False ->
                                                                  GHC.Base.Nothing [];
                                                              GHC.Types.True -> lvl48_rcccO;
                                                            };
                                                        GHC.Types.True -> lvl47_rcccN;
                                                      };
                                                  1# -> lvl47_rcccN;
                                                };
                                          };
                                    }; } in
                          let {
                            sat_sccCw [Occ=Once] :: GHC.Base.Maybe GHC.Types.Int
                            [LclId] =
                                [ds4_sccB1] \u []
                                    case ds4_sccB1 of {
                                      (,,) p_sccCt [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] -> p_sccCt;
                                    }; } in
                          let {
                            sat_sccCq [Occ=Once] :: GHC.Types.Int
                            [LclId] =
                                [ds3_sccAX] \u []
                                    case ds3_sccAX of {
                                      (,) _ [Occ=Dead] n_sccCl [Occ=Once!] ->
                                          case n_sccCl of wild3_sccCm {
                                            GHC.Types.I# x_sccCn ->
                                                case >=# [x_sccCn 0#] of {
                                                  __DEFAULT ->
                                                      case negateInt# [x_sccCn] of sat_sccCp {
                                                        __DEFAULT -> GHC.Types.I# [sat_sccCp];
                                                      };
                                                  1# -> wild3_sccCm;
                                                };
                                          };
                                    }; } in
                          let {
                            sat_sccCr [Occ=Once] :: GHC.Base.Maybe GHC.Types.Int
                            [LclId] =
                                CCCS GHC.Base.Just! [sat_sccCq]; } in
                          let {
                            sat_sccCQ [Occ=Once] :: Text.Printf.FieldFormat
                            [LclId] =
                                CCCS Text.Printf.FieldFormat! [sat_sccCr
                                                               sat_sccCw
                                                               sat_sccCF
                                                               w2_sccyf
                                                               w3_sccyg
                                                               sat_sccCK
                                                               sat_sccCP];
                          } in  (#,,#) [sat_sccCQ sat_sccCV sat_sccD0];
                      '+'# ->
                          $wgetSpecs_rcccV
                              w_sccyd w1_sccye lvl50_rcccQ w3_sccyg cs0_sccym w5_sccyi;
                      '-'# ->
                          $wgetSpecs_rcccV
                              GHC.Types.True w1_sccye w2_sccyf w3_sccyg cs0_sccym w5_sccyi;
                      '.'# ->
                          let {
                            ds3_sccD1 [Dmd=<L,U(1*U,U,U)>]
                              :: (GHC.Types.Int, [GHC.Types.Char], [Text.Printf.UPrintf])
                            [LclId] =
                                [w5_sccyi cs0_sccym] \u []
                                    case cs0_sccym of wild2_sccD2 {
                                      [] ->
                                          case lvl49_rcccP of {
                                            (,) p_sccD4 [Occ=Once] cs'_sccD5 [Occ=Once] ->
                                                (,,) [p_sccD4 cs'_sccD5 w5_sccyi];
                                          };
                                      : ds4_sccD6 [Occ=Once!] cs''_sccD7 [Occ=Once] ->
                                          case ds4_sccD6 of {
                                            GHC.Types.C# ds5_sccD9 [Occ=Once!] ->
                                                case ds5_sccD9 of {
                                                  __DEFAULT ->
                                                      case
                                                          GHC.List.$wspan
                                                              GHC.Unicode.isDigit wild2_sccD2
                                                      of
                                                      { (#,#) ww1_sccDc [Occ=Once!]
                                                              ww2_sccDd [Occ=Once*] ->
                                                            case ww1_sccDc of wild4_sccDe {
                                                              [] ->
                                                                  (,,) [lvl46_rcccM
                                                                        ww2_sccDd
                                                                        w5_sccyi];
                                                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                  let {
                                                                    sat_sccDo [Occ=Once]
                                                                      :: GHC.Types.Int
                                                                    [LclId] =
                                                                        [wild4_sccDe] \u []
                                                                            case
                                                                                Text.ParserCombinators.ReadP.run
                                                                                    lvl42_rcccH
                                                                                    wild4_sccDe
                                                                            of
                                                                            sat_sccDh
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      Text.Read.readEither8
                                                                                          sat_sccDh
                                                                                  of
                                                                                  { [] ->
                                                                                        lvl44_rcccJ;
                                                                                    : x_sccDj [Occ=Once]
                                                                                      ds7_sccDk [Occ=Once!] ->
                                                                                        case
                                                                                            ds7_sccDk
                                                                                        of
                                                                                        { [] ->
                                                                                              x_sccDj;
                                                                                          : _ [Occ=Dead]
                                                                                            _ [Occ=Dead] ->
                                                                                              lvl45_rcccK;
                                                                                        };
                                                                                  };
                                                                            };
                                                                  } in 
                                                                    (,,) [sat_sccDo
                                                                          ww2_sccDd
                                                                          w5_sccyi];
                                                            };
                                                      };
                                                  '*'# ->
                                                      let {
                                                        ds7_sccDp [Dmd=<L,U(1*U,1*U)>]
                                                          :: ([Text.Printf.UPrintf], GHC.Types.Int)
                                                        [LclId] =
                                                            [w5_sccyi] \u []
                                                                case $wgetStar_rcccL w5_sccyi of {
                                                                  (#,#) ww1_sccDr [Occ=Once]
                                                                        ww2_sccDs [Occ=Once] ->
                                                                      (,) [ww1_sccDr ww2_sccDs];
                                                                }; } in
                                                      let {
                                                        sat_sccDA [Occ=Once]
                                                          :: [Text.Printf.UPrintf]
                                                        [LclId] =
                                                            [ds7_sccDp] \u []
                                                                case ds7_sccDp of {
                                                                  (,) us''_sccDy [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                      us''_sccDy;
                                                                }; } in
                                                      let {
                                                        sat_sccDw [Occ=Once] :: GHC.Types.Int
                                                        [LclId] =
                                                            [ds7_sccDp] \u []
                                                                case ds7_sccDp of {
                                                                  (,) _ [Occ=Dead]
                                                                      p'_sccDv [Occ=Once] ->
                                                                      p'_sccDv;
                                                                };
                                                      } in  (,,) [sat_sccDw cs''_sccD7 sat_sccDA];
                                                };
                                          };
                                    }; } in
                          let {
                            ds4_sccDB [Dmd=<L,U(1*U,1*U,1*U)>] :: Text.Printf.FormatParse
                            [LclId] =
                                [ds3_sccD1] \u []
                                    case ds3_sccD1 of {
                                      (,,) _ [Occ=Dead]
                                           cs'_sccDE [Occ=Once]
                                           us'_sccDF [Occ=Once!] ->
                                          case us'_sccDF of {
                                            [] -> Text.Printf.errorMissingArgument;
                                            : ds6_sccDH [Occ=Once!] _ [Occ=Dead] ->
                                                case ds6_sccDH of {
                                                  (,) ufmt_sccDK [Occ=Once!] _ [Occ=Dead] ->
                                                      ufmt_sccDK cs'_sccDE;
                                                };
                                          };
                                    }; } in
                          let {
                            sat_sccEf [Occ=Once] :: [Text.Printf.UPrintf]
                            [LclId] =
                                [ds3_sccD1] \u []
                                    case ds3_sccD1 of {
                                      (,,) _ [Occ=Dead] _ [Occ=Dead] us'_sccEe [Occ=Once] ->
                                          us'_sccEe;
                                    }; } in
                          let {
                            sat_sccEa [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [ds4_sccDB] \u []
                                    case ds4_sccDB of {
                                      Text.Printf.FormatParse _ [Occ=Dead]
                                                              _ [Occ=Dead]
                                                              cs_sccE9 [Occ=Once] ->
                                          cs_sccE9;
                                    }; } in
                          let {
                            sat_sccE4 [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                [ds4_sccDB] \u []
                                    case ds4_sccDB of {
                                      Text.Printf.FormatParse _ [Occ=Dead]
                                                              c_sccE2 [Occ=Once]
                                                              _ [Occ=Dead] ->
                                          c_sccE2;
                                    }; } in
                          let {
                            sat_sccDZ [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [ds4_sccDB] \u []
                                    case ds4_sccDB of {
                                      Text.Printf.FormatParse ms_sccDW [Occ=Once]
                                                              _ [Occ=Dead]
                                                              _ [Occ=Dead] ->
                                          ms_sccDW;
                                    }; } in
                          let {
                            sat_sccDU [Occ=Once] :: GHC.Base.Maybe Text.Printf.FormatAdjustment
                            [LclId] =
                                [w_sccyd w1_sccye] \u []
                                    case w_sccyd of {
                                      GHC.Types.False ->
                                          case w1_sccye of {
                                            GHC.Types.False -> GHC.Base.Nothing [];
                                            GHC.Types.True -> lvl48_rcccO;
                                          };
                                      GHC.Types.True -> lvl47_rcccN;
                                    }; } in
                          let {
                            sat_sccDQ [Occ=Once] :: GHC.Types.Int
                            [LclId] =
                                [ds3_sccD1] \u []
                                    case ds3_sccD1 of {
                                      (,,) p_sccDN [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] -> p_sccDN;
                                    }; } in
                          let {
                            sat_sccDR [Occ=Once] :: GHC.Base.Maybe GHC.Types.Int
                            [LclId] =
                                CCCS GHC.Base.Just! [sat_sccDQ]; } in
                          let {
                            sat_sccE5 [Occ=Once] :: Text.Printf.FieldFormat
                            [LclId] =
                                CCCS Text.Printf.FieldFormat! [GHC.Base.Nothing
                                                               sat_sccDR
                                                               sat_sccDU
                                                               w2_sccyf
                                                               w3_sccyg
                                                               sat_sccDZ
                                                               sat_sccE4];
                          } in  (#,,#) [sat_sccE5 sat_sccEa sat_sccEf];
                      '0'# ->
                          $wgetSpecs_rcccV
                              w_sccyd GHC.Types.True w2_sccyf w3_sccyg cs0_sccym w5_sccyi;
                    };
              };
        };

f_rcccW :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['%'#];

Text.Printf.uprintfs [Occ=LoopBreaker]
  :: GHC.Base.String -> [Text.Printf.UPrintf] -> GHC.Show.ShowS
[GblId, Arity=3, Str=<S,1*U><L,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sccEg ds1_sccEh eta_sccEi]
        case ds_sccEg of {
          [] ->
              case ds1_sccEh of {
                [] -> eta_sccEi;
                : _ [Occ=Dead] _ [Occ=Dead] -> Text.Printf.errorShortFormat;
              };
          : ds2_sccEo [Occ=Once!] ds3_sccEp ->
              case ds2_sccEo of wild1_sccEq {
                GHC.Types.C# ds4_sccEr [Occ=Once!] ->
                    case ds4_sccEr of {
                      __DEFAULT ->
                          let {
                            sat_sccEt [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [ds1_sccEh eta_sccEi ds3_sccEp] \u []
                                    Text.Printf.uprintfs ds3_sccEp ds1_sccEh eta_sccEi;
                          } in  : [wild1_sccEq sat_sccEt];
                      '%'# ->
                          let-no-escape {
                            fail_sccEu [Occ=Once*!T[1], Dmd=<L,1*C1(U)>]
                              :: GHC.Prim.Void# -> GHC.Base.String
                            [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                sat-only [ds1_sccEh eta_sccEi ds3_sccEp] \r [void_0E]
                                    case ds1_sccEh of wild2_sccEw {
                                      [] -> Text.Printf.errorMissingArgument;
                                      : _ [Occ=Dead] _ [Occ=Dead] ->
                                          case
                                              $wgetSpecs_rcccV
                                                  GHC.Types.False
                                                  GHC.Types.False
                                                  GHC.Base.Nothing
                                                  GHC.Types.False
                                                  ds3_sccEp
                                                  wild2_sccEw
                                          of
                                          { (#,,#) ww1_sccEB [Occ=Once]
                                                   ww2_sccEC [Occ=Once]
                                                   ww3_sccED [Occ=Once!] ->
                                                case ww3_sccED of {
                                                  [] -> Text.Printf.errorMissingArgument;
                                                  : ds9_sccEG [Occ=Once!] us_sccEH [Occ=Once] ->
                                                      case ds9_sccEG of {
                                                        (,) _ [Occ=Dead] u_sccEK [Occ=Once!] ->
                                                            let {
                                                              sat_sccEL [Occ=Once]
                                                                :: GHC.Base.String
                                                              [LclId] =
                                                                  [eta_sccEi
                                                                   ww2_sccEC
                                                                   us_sccEH] \u []
                                                                      Text.Printf.uprintfs
                                                                          ww2_sccEC
                                                                          us_sccEH
                                                                          eta_sccEi;
                                                            } in  u_sccEK ww1_sccEB sat_sccEL;
                                                      };
                                                };
                                          };
                                    };
                          } in 
                            case ds3_sccEp of {
                              [] -> fail_sccEu GHC.Prim.void#;
                              : ds6_sccEN [Occ=Once!] cs_sccEO [Occ=Once] ->
                                  case ds6_sccEN of {
                                    GHC.Types.C# ds7_sccEQ [Occ=Once!] ->
                                        case ds7_sccEQ of {
                                          __DEFAULT -> fail_sccEu GHC.Prim.void#;
                                          '%'# ->
                                              let {
                                                sat_sccES [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [ds1_sccEh eta_sccEi cs_sccEO] \u []
                                                        Text.Printf.uprintfs
                                                            cs_sccEO ds1_sccEh eta_sccEi;
                                              } in  : [f_rcccW sat_sccES];
                                        };
                                  };
                            };
                    };
              };
        };

Text.Printf.$fPrintfTypeIO_$cspr
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (() :: *)) =>
     GHC.Base.String -> [Text.Printf.UPrintf] -> GHC.Types.IO a
[GblId,
 Arity=3,
 Str=<S(S),1*U(1*U)><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$d~_sccET eta_sccEU eta1_sccEV]
        case GHC.Types.heq_sel $d~_sccET of {
          (##) ->
              let {
                sat_sccEX [Occ=Once] :: GHC.Base.String
                [LclId] =
                    [eta_sccEU eta1_sccEV] \u []
                        let {
                          sat_sccEW [Occ=Once, Dmd=<L,1*U>] :: [Text.Printf.UPrintf]
                          [LclId] =
                              [eta1_sccEV] \s [] GHC.List.reverse1 eta1_sccEV GHC.Types.[];
                        } in  Text.Printf.uprintfs eta_sccEU sat_sccEW GHC.Types.[];
              } in 
                GHC.IO.Handle.Text.hPutStr'
                    GHC.IO.Handle.FD.stdout sat_sccEX GHC.Types.False;
        };

Text.Printf.$fPrintfTypeIO [InlPrag=INLINE (sat-args=0)]
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (() :: *)) =>
     Text.Printf.PrintfType (GHC.Types.IO a)
[GblId[DFunId(nt)],
 Arity=3,
 Str=<S(S),1*U(1*U)><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Text.Printf.$fPrintfTypeIO_$cspr eta_B3 eta_B2 eta_B1;

Text.Printf.$fPrintfType[]_$cspr
  :: forall c.
     Text.Printf.IsChar c =>
     GHC.Base.String -> [Text.Printf.UPrintf] -> [c]
[GblId,
 Arity=3,
 Str=<L,1*U(A,1*C(U))><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dIsChar_sccEY fmts_sccEZ args_sccF0]
        let {
          sat_sccF2 [Occ=Once, Dmd=<L,1*U>] :: [Text.Printf.UPrintf]
          [LclId] =
              [args_sccF0] \s [] GHC.List.reverse1 args_sccF0 GHC.Types.[];
        } in 
          case
              Text.Printf.uprintfs fmts_sccEZ sat_sccF2 GHC.Types.[]
          of
          sat_sccF3
          { __DEFAULT ->
                let {
                  sat_sccF1 [Occ=Once, Dmd=<L,C(U)>] :: GHC.Types.Char -> c_ac8Vv
                  [LclId] =
                      [$dIsChar_sccEY] \u [] Text.Printf.fromChar $dIsChar_sccEY;
                } in  GHC.Base.map sat_sccF1 sat_sccF3;
          };

Text.Printf.$fPrintfType[] [InlPrag=INLINE (sat-args=0)]
  :: forall c. Text.Printf.IsChar c => Text.Printf.PrintfType [c]
[GblId[DFunId(nt)],
 Arity=3,
 Str=<L,1*U(A,1*C(U))><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Text.Printf.$fPrintfType[]_$cspr eta_B3 eta_B2 eta_B1;

Text.Printf.$fHPrintfTypeIO_$chspr
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (() :: *)) =>
     GHC.IO.Handle.Types.Handle
     -> GHC.Base.String -> [Text.Printf.UPrintf] -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<S(S),1*U(1*U)><L,U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$d~_sccF4 eta_sccF5 eta1_sccF6 eta2_sccF7]
        case GHC.Types.heq_sel $d~_sccF4 of {
          (##) ->
              let {
                sat_sccF9 [Occ=Once] :: GHC.Base.String
                [LclId] =
                    [eta1_sccF6 eta2_sccF7] \u []
                        let {
                          sat_sccF8 [Occ=Once, Dmd=<L,1*U>] :: [Text.Printf.UPrintf]
                          [LclId] =
                              [eta2_sccF7] \s [] GHC.List.reverse eta2_sccF7;
                        } in  Text.Printf.uprintfs eta1_sccF6 sat_sccF8 GHC.Types.[];
              } in 
                GHC.IO.Handle.Text.hPutStr' eta_sccF5 sat_sccF9 GHC.Types.False;
        };

Text.Printf.$fHPrintfTypeIO [InlPrag=INLINE (sat-args=0)]
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (() :: *)) =>
     Text.Printf.HPrintfType (GHC.Types.IO a)
[GblId[DFunId(nt)],
 Arity=4,
 Str=<S(S),1*U(1*U)><L,U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Printf.$fHPrintfTypeIO_$chspr eta_B4 eta_B3 eta_B2 eta_B1;

Text.Printf.FormatParse
  :: GHC.Base.String
     -> GHC.Types.Char -> GHC.Base.String -> Text.Printf.FormatParse
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Text.Printf.FormatParse [eta_B3 eta_B2 eta_B1];

Text.Printf.FieldFormat
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Types.Char
     -> Text.Printf.FieldFormat
[GblId[DataCon],
 Arity=7,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Printf.FieldFormat [eta_B7
                                 eta_B6
                                 eta_B5
                                 eta_B4
                                 eta_B3
                                 eta_B2
                                 eta_B1];

Text.Printf.SignPlus :: Text.Printf.FormatSign
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.SignPlus! [];

Text.Printf.SignSpace :: Text.Printf.FormatSign
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.SignSpace! [];

Text.Printf.LeftAdjust :: Text.Printf.FormatAdjustment
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.LeftAdjust! [];

Text.Printf.ZeroPad :: Text.Printf.FormatAdjustment
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.ZeroPad! [];

Text.Printf.C:IsChar
  :: forall c.
     (c -> GHC.Types.Char)
     -> (GHC.Types.Char -> c) -> Text.Printf.IsChar c
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Printf.C:IsChar [eta_B2 eta_B1];

Text.Printf.C:PrintfArg
  :: forall a.
     (a -> Text.Printf.FieldFormatter)
     -> (a -> Text.Printf.ModifierParser) -> Text.Printf.PrintfArg a
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Printf.C:PrintfArg [eta_B2 eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:07:12.472748929 UTC

Text.Printf.toChar
  :: forall c. Text.Printf.IsChar c => c -> GHC.Types.Char
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_sciA5]
        case v_sciA5 of {
          Text.Printf.C:IsChar v_sciA7 [Occ=Once] _ [Occ=Dead] -> v_sciA7;
        };

Text.Printf.fromChar
  :: forall c. Text.Printf.IsChar c => GHC.Types.Char -> c
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_sciA9]
        case v_sciA9 of {
          Text.Printf.C:IsChar _ [Occ=Dead] v_sciAc [Occ=Once] -> v_sciAc;
        };

Text.Printf.formatArg
  :: forall a.
     Text.Printf.PrintfArg a =>
     a -> Text.Printf.FieldFormatter
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_sciAd]
        case v_sciAd of {
          Text.Printf.C:PrintfArg v_sciAf [Occ=Once] _ [Occ=Dead] -> v_sciAf;
        };

Text.Printf.parseFormat
  :: forall a.
     Text.Printf.PrintfArg a =>
     a -> Text.Printf.ModifierParser
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_sciAh]
        case v_sciAh of {
          Text.Printf.C:PrintfArg _ [Occ=Dead] v_sciAk [Occ=Once] -> v_sciAk;
        };

Text.Printf.hspr [InlPrag=INLINE]
  :: forall t.
     Text.Printf.HPrintfType t =>
     GHC.IO.Handle.Types.Handle
     -> GHC.Base.String -> [Text.Printf.UPrintf] -> t
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_sciAl] v_sciAl;

Text.Printf.spr [InlPrag=INLINE]
  :: forall t.
     Text.Printf.PrintfType t =>
     GHC.Base.String -> [Text.Printf.UPrintf] -> t
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_sciAm] v_sciAm;

Text.Printf.$fIsCharChar_$cfromChar
  :: GHC.Types.Char -> GHC.Types.Char
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [c_sciAn] c_sciAn;

Text.Printf.$fIsCharChar [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.IsChar GHC.Types.Char
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Text.Printf.C:IsChar! [Text.Printf.$fIsCharChar_$cfromChar
                                         Text.Printf.$fIsCharChar_$cfromChar];

Text.Printf.$fHPrintfType(->)_$chspr
  :: forall a r.
     (Text.Printf.PrintfArg a, Text.Printf.HPrintfType r) =>
     GHC.IO.Handle.Types.Handle
     -> GHC.Base.String -> [Text.Printf.UPrintf] -> a -> r
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(C(S))),1*C1(C1(C1(U)))><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dPrintfArg_sciAo
           $dHPrintfType_sciAp
           hdl_sciAq
           fmts_sciAr
           args_sciAs
           a1_sciAt]
        let {
          sat_sciAv [Occ=Once] :: Text.Printf.FieldFormatter
          [LclId] =
              [$dPrintfArg_sciAo a1_sciAt] \u []
                  Text.Printf.formatArg $dPrintfArg_sciAo a1_sciAt; } in
        let {
          sat_sciAu [Occ=Once] :: Text.Printf.ModifierParser
          [LclId] =
              [$dPrintfArg_sciAo a1_sciAt] \u []
                  Text.Printf.parseFormat $dPrintfArg_sciAo a1_sciAt; } in
        let {
          sat_sciAw [Occ=Once]
            :: (Text.Printf.ModifierParser, Text.Printf.FieldFormatter)
          [LclId] =
              CCCS (,)! [sat_sciAu sat_sciAv]; } in
        let {
          sat_sciAx [Occ=Once] :: [Text.Printf.UPrintf]
          [LclId] =
              CCCS :! [sat_sciAw args_sciAs];
        } in  $dHPrintfType_sciAp hdl_sciAq fmts_sciAr sat_sciAx;

Text.Printf.$fHPrintfType(->) [InlPrag=INLINE (sat-args=0)]
  :: forall a r.
     (Text.Printf.PrintfArg a, Text.Printf.HPrintfType r) =>
     Text.Printf.HPrintfType (a -> r)
[GblId[DFunId(nt)],
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(C(S))),1*C1(C1(C1(U)))><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Printf.$fHPrintfType(->)_$chspr
            eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

Text.Printf.$fPrintfType(->)_$cspr
  :: forall a r.
     (Text.Printf.PrintfArg a, Text.Printf.PrintfType r) =>
     GHC.Base.String -> [Text.Printf.UPrintf] -> a -> r
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(S)),1*C1(C1(U))><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dPrintfArg_sciAy
           $dPrintfType_sciAz
           fmts_sciAA
           args_sciAB
           a1_sciAC]
        let {
          sat_sciAE [Occ=Once] :: Text.Printf.FieldFormatter
          [LclId] =
              [$dPrintfArg_sciAy a1_sciAC] \u []
                  Text.Printf.formatArg $dPrintfArg_sciAy a1_sciAC; } in
        let {
          sat_sciAD [Occ=Once] :: Text.Printf.ModifierParser
          [LclId] =
              [$dPrintfArg_sciAy a1_sciAC] \u []
                  Text.Printf.parseFormat $dPrintfArg_sciAy a1_sciAC; } in
        let {
          sat_sciAF [Occ=Once]
            :: (Text.Printf.ModifierParser, Text.Printf.FieldFormatter)
          [LclId] =
              CCCS (,)! [sat_sciAD sat_sciAE]; } in
        let {
          sat_sciAG [Occ=Once] :: [Text.Printf.UPrintf]
          [LclId] =
              CCCS :! [sat_sciAF args_sciAB];
        } in  $dPrintfType_sciAz fmts_sciAA sat_sciAG;

Text.Printf.$fPrintfType(->) [InlPrag=INLINE (sat-args=0)]
  :: forall a r.
     (Text.Printf.PrintfArg a, Text.Printf.PrintfType r) =>
     Text.Printf.PrintfType (a -> r)
[GblId[DFunId(nt)],
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(S)),1*C1(C1(U))><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Printf.$fPrintfType(->)_$cspr
            eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

Text.Printf.fmtChar :: Text.Printf.FieldFormat -> GHC.Types.Char
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLS),1*U(A,A,A,A,A,A,1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [ds_sciAH]
        case ds_sciAH of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds7_sciAP [Occ=Once] ->
              ds7_sciAP;
        };

Text.Printf.fmtModifiers
  :: Text.Printf.FieldFormat -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sciAQ]
        case ds_sciAQ of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds6_sciAX [Occ=Once]
                                  _ [Occ=Dead] ->
              ds6_sciAX;
        };

Text.Printf.fmtAlternate
  :: Text.Printf.FieldFormat -> GHC.Types.Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sciAZ]
        case ds_sciAZ of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds5_sciB5 [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds5_sciB5;
        };

Text.Printf.fmtSign
  :: Text.Printf.FieldFormat -> GHC.Base.Maybe Text.Printf.FormatSign
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sciB8]
        case ds_sciB8 of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds4_sciBd [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds4_sciBd;
        };

Text.Printf.fmtAdjust
  :: Text.Printf.FieldFormat
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sciBh]
        case ds_sciBh of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds3_sciBl [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds3_sciBl;
        };

Text.Printf.fmtPrecision
  :: Text.Printf.FieldFormat -> GHC.Base.Maybe GHC.Types.Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sciBq]
        case ds_sciBq of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  ds2_sciBt [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds2_sciBt;
        };

Text.Printf.fmtWidth
  :: Text.Printf.FieldFormat -> GHC.Base.Maybe GHC.Types.Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLL),1*U(1*U,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sciBz]
        case ds_sciBz of {
          Text.Printf.FieldFormat ds1_sciBB [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds1_sciBB;
        };

Text.Printf.fpRest :: Text.Printf.FormatParse -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLS),1*U(A,A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_sciBI]
        case ds_sciBI of {
          Text.Printf.FormatParse _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds3_sciBM [Occ=Once] ->
              ds3_sciBM;
        };

Text.Printf.fpChar :: Text.Printf.FormatParse -> GHC.Types.Char
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),1*U(A,1*U(U),A)>m,
 Unf=OtherCon []] =
    [] \r [ds_sciBN]
        case ds_sciBN of {
          Text.Printf.FormatParse _ [Occ=Dead]
                                  ds2_sciBQ [Occ=Once]
                                  _ [Occ=Dead] ->
              ds2_sciBQ;
        };

Text.Printf.fpModifiers
  :: Text.Printf.FormatParse -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),1*U(1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sciBS]
        case ds_sciBS of {
          Text.Printf.FormatParse ds1_sciBU [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds1_sciBU;
        };

Text.Printf.printf
  :: forall r. Text.Printf.PrintfType r => GHC.Base.String -> r
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(C(S)),1*C1(C1(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dPrintfType_sciBX fmts_sciBY]
        $dPrintfType_sciBX fmts_sciBY GHC.Types.[];

Text.Printf.hPrintf
  :: forall r.
     Text.Printf.HPrintfType r =>
     GHC.IO.Handle.Types.Handle -> GHC.Base.String -> r
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(C(C(S))),1*C1(C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dHPrintfType_sciBZ hdl_sciC0 fmts_sciC1]
        $dHPrintfType_sciBZ hdl_sciC0 fmts_sciC1 GHC.Types.[];

Text.Printf.vFmt
  :: GHC.Types.Char
     -> Text.Printf.FieldFormat -> Text.Printf.FieldFormat
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S(LLLLLLS(S)),1*U(U,U,U,U,U,U,U(U))>m,
 Unf=OtherCon []] =
    [] \r [c_sciC2 ufmt_sciC3]
        case ufmt_sciC3 of wild_sciC4 {
          Text.Printf.FieldFormat ds_sciC5 [Occ=Once]
                                  ds1_sciC6 [Occ=Once]
                                  ds2_sciC7 [Occ=Once]
                                  ds3_sciC8 [Occ=Once]
                                  ds4_sciC9 [Occ=Once]
                                  ds5_sciCa [Occ=Once]
                                  ds6_sciCb [Occ=Once!] ->
              case ds6_sciCb of {
                GHC.Types.C# ds7_sciCd [Occ=Once!] ->
                    case ds7_sciCd of {
                      __DEFAULT -> wild_sciC4;
                      'v'# ->
                          Text.Printf.FieldFormat [ds_sciC5
                                                   ds1_sciC6
                                                   ds2_sciC7
                                                   ds3_sciC8
                                                   ds4_sciC9
                                                   ds5_sciCa
                                                   c_sciC2];
                    };
              };
        };

lvl_rccbg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: "#;

Text.Printf.perror :: forall a. GHC.Base.String -> a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [s_sciCf]
        case
            GHC.CString.unpackAppendCString# lvl_rccbg s_sciCf
        of
        sat_sciCg
        { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciCg;
        };

lvl1_rccbh :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShowChar3 GHC.Types.[]];

lvl2_rccbi :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bad formatting char "#;

Text.Printf.$werrorBadFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Prim.Char# -> a
[GblId, Arity=1, Str=<B,1*U>x, Unf=OtherCon []] =
    [] \r [ww_sciCh]
        let {
          sat_sciCl [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sciCh] \u []
                  let {
                    sat_sciCk [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww_sciCh] \u []
                            case ww_sciCh of ds1_sciCi {
                              __DEFAULT ->
                                  let {
                                    sat_sciCj [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [ds1_sciCi] \u []
                                            GHC.Show.$wshowLitChar ds1_sciCi lvl1_rccbh;
                                  } in  : [GHC.Show.$fShowChar3 sat_sciCj];
                              '\''# -> GHC.Show.$fShowChar1;
                            };
                  } in  GHC.CString.unpackAppendCString# lvl2_rccbi sat_sciCk;
        } in 
          case
              GHC.CString.unpackAppendCString# lvl_rccbg sat_sciCl
          of
          sat_sciCm
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciCm;
          };

Text.Printf.errorBadFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Types.Char -> a
[GblId, Arity=1, Str=<B,1*U(1*U)>x, Unf=OtherCon []] =
    [] \r [w_sciCn]
        case w_sciCn of {
          GHC.Types.C# ww1_sciCp [Occ=Once] ->
              Text.Printf.$werrorBadFormat ww1_sciCp;
        };

lvl3_rccbj :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: formatting string ended prematurely"#;

Text.Printf.errorShortFormat :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl3_rccbj of sat_sciCq {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciCq;
        };

Text.Printf.$dmparseFormat
  :: forall a.
     Text.Printf.PrintfArg a =>
     a -> Text.Printf.ModifierParser
[GblId, Arity=3, Str=<L,A><L,A><S,1*U>m, Unf=OtherCon []] =
    [] \r [$dPrintfArg_sciCr ds_sciCs ds1_sciCt]
        case ds1_sciCt of {
          [] -> Text.Printf.errorShortFormat;
          : c_sciCv [Occ=Once] cs_sciCw [Occ=Once] ->
              Text.Printf.FormatParse [GHC.Types.[] c_sciCv cs_sciCw];
        };

lvl4_rccbk :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: argument list ended prematurely"#;

Text.Printf.errorMissingArgument :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl4_rccbk of sat_sciCx {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciCx;
        };

lvl5_rccbl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: bad argument"#;

Text.Printf.errorBadArgument :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl5_rccbl of sat_sciCy {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciCy;
        };

Text.Printf.$fPrintfArgDouble9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "-"#;

Text.Printf.$fPrintfArgDouble8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgDouble9;

lvl6_rccbm :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: internal error: impossible dfmt"#;

Text.Printf.$fPrintfArgDouble7
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Double -> GHC.Show.ShowS
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl6_rccbm of sat_sciCz {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciCz;
        };

Text.Printf.$w$sdfmt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char#
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Bool
     -> GHC.Types.Double
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId,
 Arity=4,
 Str=<S,U><L,U><L,1*U><L,1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ww_sciCA w_sciCB w1_sciCC w2_sciCD]
        case ord# [ww_sciCA] of sat_sciCF {
          __DEFAULT ->
              case __pkg_ccall base-4.11.0.0 [sat_sciCF GHC.Prim.realWorld#] of {
                (#,#) _ [Occ=Dead] ds1_sciCI [Occ=Once!] ->
                    case ord# [ww_sciCA] of sat_sciCK {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [sat_sciCK GHC.Prim.realWorld#] of {
                            (#,#) _ [Occ=Dead] ds3_sciCN ->
                                case int2Word# [ds3_sciCN] of sat_sciCO {
                                  __DEFAULT ->
                                      case leWord# [sat_sciCO 1114111##] of {
                                        __DEFAULT -> GHC.Char.$wlvl ds3_sciCN;
                                        1# ->
                                            let-no-escape {
                                              $j_sciCR [Occ=Once*!T[1], Dmd=<C(S),1*C1(U(U,U))>]
                                                :: [GHC.Types.Char]
                                                   -> (# GHC.Base.String, GHC.Base.String #)
                                              [LclId[JoinId(1)],
                                               Arity=1,
                                               Str=<S,1*U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ds1_sciCI] \r [karg_sciCS]
                                                      case ds1_sciCI of {
                                                        __DEFAULT ->
                                                            case
                                                                GHC.Base.map
                                                                    GHC.Unicode.toUpper karg_sciCS
                                                            of
                                                            wild4_sciCU
                                                            { [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sciCV [Occ=Once!]
                                                                cs_sciCW [Occ=Once] ->
                                                                  case ds4_sciCV of {
                                                                    GHC.Types.C# ds5_sciCY [Occ=Once!] ->
                                                                        case ds5_sciCY of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sciCU];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sciCW];
                                                                        };
                                                                  };
                                                            };
                                                        0# ->
                                                            case karg_sciCS of wild4_sciD0 {
                                                              [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sciD1 [Occ=Once!]
                                                                cs_sciD2 [Occ=Once] ->
                                                                  case ds4_sciD1 of {
                                                                    GHC.Types.C# ds5_sciD4 [Occ=Once!] ->
                                                                        case ds5_sciD4 of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sciD0];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sciD2];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              case chr# [ds3_sciCN] of {
                                                __DEFAULT -> Text.Printf.$fPrintfArgDouble7;
                                                'e'# ->
                                                    case w2_sciCD of {
                                                      GHC.Types.D# ww2_sciD9 [Occ=Once] ->
                                                          case
                                                              GHC.Float.$w$sformatRealFloatAlt
                                                                  GHC.Float.FFExponent
                                                                  w_sciCB
                                                                  GHC.Types.False
                                                                  ww2_sciD9
                                                          of
                                                          sat_sciDa
                                                          { __DEFAULT -> $j_sciCR sat_sciDa;
                                                          };
                                                    };
                                                'f'# ->
                                                    case w1_sciCC of {
                                                      GHC.Types.False ->
                                                          case w2_sciCD of {
                                                            GHC.Types.D# ww2_sciDd [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt
                                                                        GHC.Float.FFFixed
                                                                        w_sciCB
                                                                        GHC.Types.False
                                                                        ww2_sciDd
                                                                of
                                                                sat_sciDe
                                                                { __DEFAULT -> $j_sciCR sat_sciDe;
                                                                };
                                                          };
                                                      GHC.Types.True ->
                                                          case w2_sciCD of {
                                                            GHC.Types.D# ww2_sciDg [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt
                                                                        GHC.Float.FFFixed
                                                                        w_sciCB
                                                                        GHC.Types.True
                                                                        ww2_sciDg
                                                                of
                                                                sat_sciDh
                                                                { __DEFAULT -> $j_sciCR sat_sciDh;
                                                                };
                                                          };
                                                    };
                                                'g'# ->
                                                    case w1_sciCC of {
                                                      GHC.Types.False ->
                                                          case w2_sciCD of {
                                                            GHC.Types.D# ww2_sciDk [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt
                                                                        GHC.Float.FFGeneric
                                                                        w_sciCB
                                                                        GHC.Types.False
                                                                        ww2_sciDk
                                                                of
                                                                sat_sciDl
                                                                { __DEFAULT -> $j_sciCR sat_sciDl;
                                                                };
                                                          };
                                                      GHC.Types.True ->
                                                          case w2_sciCD of {
                                                            GHC.Types.D# ww2_sciDn [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt
                                                                        GHC.Float.FFGeneric
                                                                        w_sciCB
                                                                        GHC.Types.True
                                                                        ww2_sciDn
                                                                of
                                                                sat_sciDo
                                                                { __DEFAULT -> $j_sciCR sat_sciDo;
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

Text.Printf.$fPrintfArgFloat1
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Float -> GHC.Show.ShowS
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl6_rccbm of sat_sciDp {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciDp;
        };

Text.Printf.$w$sdfmt1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char#
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Bool
     -> GHC.Types.Float
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId,
 Arity=4,
 Str=<S,U><L,U><L,1*U><L,1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ww_sciDq w_sciDr w1_sciDs w2_sciDt]
        case ord# [ww_sciDq] of sat_sciDv {
          __DEFAULT ->
              case __pkg_ccall base-4.11.0.0 [sat_sciDv GHC.Prim.realWorld#] of {
                (#,#) _ [Occ=Dead] ds1_sciDy [Occ=Once!] ->
                    case ord# [ww_sciDq] of sat_sciDA {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [sat_sciDA GHC.Prim.realWorld#] of {
                            (#,#) _ [Occ=Dead] ds3_sciDD ->
                                case int2Word# [ds3_sciDD] of sat_sciDE {
                                  __DEFAULT ->
                                      case leWord# [sat_sciDE 1114111##] of {
                                        __DEFAULT -> GHC.Char.$wlvl ds3_sciDD;
                                        1# ->
                                            let-no-escape {
                                              $j_sciDH [Occ=Once*!T[1], Dmd=<C(S),1*C1(U(U,U))>]
                                                :: [GHC.Types.Char]
                                                   -> (# GHC.Base.String, GHC.Base.String #)
                                              [LclId[JoinId(1)],
                                               Arity=1,
                                               Str=<S,1*U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ds1_sciDy] \r [karg_sciDI]
                                                      case ds1_sciDy of {
                                                        __DEFAULT ->
                                                            case
                                                                GHC.Base.map
                                                                    GHC.Unicode.toUpper karg_sciDI
                                                            of
                                                            wild4_sciDK
                                                            { [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sciDL [Occ=Once!]
                                                                cs_sciDM [Occ=Once] ->
                                                                  case ds4_sciDL of {
                                                                    GHC.Types.C# ds5_sciDO [Occ=Once!] ->
                                                                        case ds5_sciDO of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sciDK];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sciDM];
                                                                        };
                                                                  };
                                                            };
                                                        0# ->
                                                            case karg_sciDI of wild4_sciDQ {
                                                              [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sciDR [Occ=Once!]
                                                                cs_sciDS [Occ=Once] ->
                                                                  case ds4_sciDR of {
                                                                    GHC.Types.C# ds5_sciDU [Occ=Once!] ->
                                                                        case ds5_sciDU of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sciDQ];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sciDS];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              case chr# [ds3_sciDD] of {
                                                __DEFAULT -> Text.Printf.$fPrintfArgFloat1;
                                                'e'# ->
                                                    case w2_sciDt of {
                                                      GHC.Types.F# ww2_sciDZ [Occ=Once] ->
                                                          case
                                                              GHC.Float.$w$sformatRealFloatAlt1
                                                                  GHC.Float.FFExponent
                                                                  w_sciDr
                                                                  GHC.Types.False
                                                                  ww2_sciDZ
                                                          of
                                                          sat_sciE0
                                                          { __DEFAULT -> $j_sciDH sat_sciE0;
                                                          };
                                                    };
                                                'f'# ->
                                                    case w1_sciDs of {
                                                      GHC.Types.False ->
                                                          case w2_sciDt of {
                                                            GHC.Types.F# ww2_sciE3 [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt1
                                                                        GHC.Float.FFFixed
                                                                        w_sciDr
                                                                        GHC.Types.False
                                                                        ww2_sciE3
                                                                of
                                                                sat_sciE4
                                                                { __DEFAULT -> $j_sciDH sat_sciE4;
                                                                };
                                                          };
                                                      GHC.Types.True ->
                                                          case w2_sciDt of {
                                                            GHC.Types.F# ww2_sciE6 [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt1
                                                                        GHC.Float.FFFixed
                                                                        w_sciDr
                                                                        GHC.Types.True
                                                                        ww2_sciE6
                                                                of
                                                                sat_sciE7
                                                                { __DEFAULT -> $j_sciDH sat_sciE7;
                                                                };
                                                          };
                                                    };
                                                'g'# ->
                                                    case w1_sciDs of {
                                                      GHC.Types.False ->
                                                          case w2_sciDt of {
                                                            GHC.Types.F# ww2_sciEa [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt1
                                                                        GHC.Float.FFGeneric
                                                                        w_sciDr
                                                                        GHC.Types.False
                                                                        ww2_sciEa
                                                                of
                                                                sat_sciEb
                                                                { __DEFAULT -> $j_sciDH sat_sciEb;
                                                                };
                                                          };
                                                      GHC.Types.True ->
                                                          case w2_sciDt of {
                                                            GHC.Types.F# ww2_sciEd [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt1
                                                                        GHC.Float.FFGeneric
                                                                        w_sciDr
                                                                        GHC.Types.True
                                                                        ww2_sciEd
                                                                of
                                                                sat_sciEe
                                                                { __DEFAULT -> $j_sciDH sat_sciEe;
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

Text.Printf.formatRealFloat1
  :: forall a. GHC.Base.Maybe GHC.Types.Int -> a -> GHC.Show.ShowS
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl6_rccbm of sat_sciEf {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciEf;
        };

Text.Printf.$wdfmt [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Float.RealFloat a =>
     GHC.Prim.Char#
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Bool
     -> a
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId,
 Arity=5,
 Str=<L,U(U(U(U(A,A,A,C(U),A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,A,A,A,A,A),A,C(U),C(U(U)),C(U(1*U(U),A)),C(U(U,U(U))),A,A,A,A,C(U),C(U),A,C(U),A,A)><S,U><L,U><L,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sciEg ww_sciEh w1_sciEi w2_sciEj w3_sciEk]
        case ord# [ww_sciEh] of sat_sciEm {
          __DEFAULT ->
              case __pkg_ccall base-4.11.0.0 [sat_sciEm GHC.Prim.realWorld#] of {
                (#,#) _ [Occ=Dead] ds1_sciEp [Occ=Once!] ->
                    case ord# [ww_sciEh] of sat_sciEr {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [sat_sciEr GHC.Prim.realWorld#] of {
                            (#,#) _ [Occ=Dead] ds3_sciEu ->
                                case int2Word# [ds3_sciEu] of sat_sciEv {
                                  __DEFAULT ->
                                      case leWord# [sat_sciEv 1114111##] of {
                                        __DEFAULT -> GHC.Char.$wlvl ds3_sciEu;
                                        1# ->
                                            let-no-escape {
                                              $j_sciEy [Occ=Once*!T[1], Dmd=<C(S),1*C1(U(U,U))>]
                                                :: [GHC.Types.Char]
                                                   -> (# GHC.Base.String, GHC.Base.String #)
                                              [LclId[JoinId(1)],
                                               Arity=1,
                                               Str=<S,1*U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ds1_sciEp] \r [karg_sciEz]
                                                      case ds1_sciEp of {
                                                        __DEFAULT ->
                                                            case
                                                                GHC.Base.map
                                                                    GHC.Unicode.toUpper karg_sciEz
                                                            of
                                                            wild4_sciEB
                                                            { [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sciEC [Occ=Once!]
                                                                cs_sciED [Occ=Once] ->
                                                                  case ds4_sciEC of {
                                                                    GHC.Types.C# ds5_sciEF [Occ=Once!] ->
                                                                        case ds5_sciEF of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sciEB];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sciED];
                                                                        };
                                                                  };
                                                            };
                                                        0# ->
                                                            case karg_sciEz of wild4_sciEH {
                                                              [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sciEI [Occ=Once!]
                                                                cs_sciEJ [Occ=Once] ->
                                                                  case ds4_sciEI of {
                                                                    GHC.Types.C# ds5_sciEL [Occ=Once!] ->
                                                                        case ds5_sciEL of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sciEH];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sciEJ];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              case chr# [ds3_sciEu] of {
                                                __DEFAULT -> Text.Printf.formatRealFloat1;
                                                'e'# ->
                                                    case
                                                        GHC.Float.formatRealFloatAlt
                                                            w_sciEg
                                                            GHC.Float.FFExponent
                                                            w1_sciEi
                                                            GHC.Types.False
                                                            w3_sciEk
                                                    of
                                                    sat_sciEP
                                                    { __DEFAULT -> $j_sciEy sat_sciEP;
                                                    };
                                                'f'# ->
                                                    case w2_sciEj of {
                                                      GHC.Types.False ->
                                                          case
                                                              GHC.Float.formatRealFloatAlt
                                                                  w_sciEg
                                                                  GHC.Float.FFFixed
                                                                  w1_sciEi
                                                                  GHC.Types.False
                                                                  w3_sciEk
                                                          of
                                                          sat_sciER
                                                          { __DEFAULT -> $j_sciEy sat_sciER;
                                                          };
                                                      GHC.Types.True ->
                                                          case
                                                              GHC.Float.formatRealFloatAlt
                                                                  w_sciEg
                                                                  GHC.Float.FFFixed
                                                                  w1_sciEi
                                                                  GHC.Types.True
                                                                  w3_sciEk
                                                          of
                                                          sat_sciES
                                                          { __DEFAULT -> $j_sciEy sat_sciES;
                                                          };
                                                    };
                                                'g'# ->
                                                    case w2_sciEj of {
                                                      GHC.Types.False ->
                                                          case
                                                              GHC.Float.formatRealFloatAlt
                                                                  w_sciEg
                                                                  GHC.Float.FFGeneric
                                                                  w1_sciEi
                                                                  GHC.Types.False
                                                                  w3_sciEk
                                                          of
                                                          sat_sciEU
                                                          { __DEFAULT -> $j_sciEy sat_sciEU;
                                                          };
                                                      GHC.Types.True ->
                                                          case
                                                              GHC.Float.formatRealFloatAlt
                                                                  w_sciEg
                                                                  GHC.Float.FFGeneric
                                                                  w1_sciEi
                                                                  GHC.Types.True
                                                                  w3_sciEk
                                                          of
                                                          sat_sciEV
                                                          { __DEFAULT -> $j_sciEy sat_sciEV;
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

Text.Printf.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Text.Printf.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$trModule4];

Text.Printf.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Text.Printf"#;

Text.Printf.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$trModule2];

Text.Printf.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Text.Printf.$trModule3
                                     Text.Printf.$trModule1];

$krep_rccbn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcBool
                                              GHC.Types.[]];

$krep1_rccbo :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rccbp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandle
                                              GHC.Types.[]];

$krep3_rccbq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep4_rccbr :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep5_rccbs :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rccbo GHC.Types.[]];

$krep6_rccbt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep5_rccbs];

$krep7_rccbu :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_rccbq GHC.Types.[]];

$krep8_rccbv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep7_rccbu];

$krep9_rccbw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep8_rccbv];

Text.Printf.$tcHPrintfType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep4_rccbr];

$krep10_rccbx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep11_rccby :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_rccbx $krep3_rccbq];

$krep12_rccbz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rccbq $krep10_rccbx];

Text.Printf.$tcIsChar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IsChar"#;

Text.Printf.$tcIsChar1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcIsChar2];

Text.Printf.$tcIsChar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [660225335504909605##
                                    5800397900948792736##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcIsChar1
                                    0#
                                    Text.Printf.$tcHPrintfType1];

$krep13_rccbA :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep10_rccbx GHC.Types.[]];

$krep14_rccbB :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcIsChar
                                              $krep13_rccbA];

$krep15_rccbC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_rccbz $krep14_rccbB];

Text.Printf.$tc'C:IsChar1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_rccby $krep15_rccbC];

Text.Printf.$tc'C:IsChar3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:IsChar"#;

Text.Printf.$tc'C:IsChar2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'C:IsChar3];

Text.Printf.$tc'C:IsChar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15586488259906363003##
                                    17643381548147423706##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'C:IsChar2
                                    1#
                                    Text.Printf.$tc'C:IsChar1];

Text.Printf.$tcFormatAdjustment2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FormatAdjustment"#;

Text.Printf.$tcFormatAdjustment1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcFormatAdjustment2];

Text.Printf.$tcFormatAdjustment :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7532892403054408380##
                                    17299592949916286280##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcFormatAdjustment1
                                    0#
                                    GHC.Types.krep$*];

Text.Printf.$tc'LeftAdjust1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcFormatAdjustment
                                              GHC.Types.[]];

Text.Printf.$tc'LeftAdjust3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'LeftAdjust"#;

Text.Printf.$tc'LeftAdjust2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'LeftAdjust3];

Text.Printf.$tc'LeftAdjust :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3724221440131574524##
                                    12430068224974793646##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'LeftAdjust2
                                    0#
                                    Text.Printf.$tc'LeftAdjust1];

Text.Printf.$tc'ZeroPad2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ZeroPad"#;

Text.Printf.$tc'ZeroPad1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'ZeroPad2];

Text.Printf.$tc'ZeroPad :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4688343247861108158##
                                    7307113320833774212##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'ZeroPad1
                                    0#
                                    Text.Printf.$tc'LeftAdjust1];

$krep16_rccbD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$tc'LeftAdjust1 GHC.Types.[]];

$krep17_rccbE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep16_rccbD];

Text.Printf.$tcFormatSign2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FormatSign"#;

Text.Printf.$tcFormatSign1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcFormatSign2];

Text.Printf.$tcFormatSign :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [35986971025498593##
                                    9833165860459639351##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcFormatSign1
                                    0#
                                    GHC.Types.krep$*];

Text.Printf.$tc'SignPlus1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcFormatSign
                                              GHC.Types.[]];

Text.Printf.$tc'SignPlus3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SignPlus"#;

Text.Printf.$tc'SignPlus2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'SignPlus3];

Text.Printf.$tc'SignPlus :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18302065795158432479##
                                    11830941225366619964##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'SignPlus2
                                    0#
                                    Text.Printf.$tc'SignPlus1];

Text.Printf.$tc'SignSpace2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SignSpace"#;

Text.Printf.$tc'SignSpace1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'SignSpace2];

Text.Printf.$tc'SignSpace :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [111286303843533919##
                                    13624428119758319457##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'SignSpace1
                                    0#
                                    Text.Printf.$tc'SignPlus1];

$krep18_rccbF :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$tc'SignPlus1 GHC.Types.[]];

$krep19_rccbG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep18_rccbF];

Text.Printf.$tcFieldFormat2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FieldFormat"#;

Text.Printf.$tcFieldFormat1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcFieldFormat2];

Text.Printf.$tcFieldFormat :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12330325036165183082##
                                    5846211506648458401##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcFieldFormat1
                                    0#
                                    GHC.Types.krep$*];

$krep20_rccbH :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcFieldFormat
                                              GHC.Types.[]];

$krep21_rccbI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep20_rccbH $krep9_rccbw];

$krep22_rccbJ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_rccbx $krep21_rccbI];

$krep23_rccbK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rccbq $krep20_rccbH];

$krep24_rccbL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep23_rccbK];

$krep25_rccbM :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rccbn $krep24_rccbL];

$krep26_rccbN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep19_rccbG $krep25_rccbM];

$krep27_rccbO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep17_rccbE $krep26_rccbN];

$krep28_rccbP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_rccbt $krep27_rccbO];

Text.Printf.$tc'FieldFormat1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_rccbt $krep28_rccbP];

Text.Printf.$tc'FieldFormat3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FieldFormat"#;

Text.Printf.$tc'FieldFormat2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'FieldFormat3];

Text.Printf.$tc'FieldFormat :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11348432599023007686##
                                    6814357301696130957##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'FieldFormat2
                                    0#
                                    Text.Printf.$tc'FieldFormat1];

Text.Printf.$tcFormatParse2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FormatParse"#;

Text.Printf.$tcFormatParse1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcFormatParse2];

Text.Printf.$tcFormatParse :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5517048358589873764##
                                    8326725038359313810##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcFormatParse1
                                    0#
                                    GHC.Types.krep$*];

$krep29_rccbQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcFormatParse
                                              GHC.Types.[]];

$krep30_rccbR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep29_rccbQ];

$krep31_rccbS :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_rccbx $krep30_rccbR];

$krep32_rccbT :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rccbq $krep30_rccbR];

Text.Printf.$tc'FormatParse1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep32_rccbT];

Text.Printf.$tc'FormatParse3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FormatParse"#;

Text.Printf.$tc'FormatParse2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'FormatParse3];

Text.Printf.$tc'FormatParse :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [549767054447046648##
                                    1116614444935710689##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'FormatParse2
                                    0#
                                    Text.Printf.$tc'FormatParse1];

$krep33_rccbU :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep21_rccbI GHC.Types.[]];

$krep34_rccbV :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep30_rccbR $krep33_rccbU];

$krep35_rccbW :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep34_rccbV];

$krep36_rccbX :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep35_rccbW GHC.Types.[]];

$krep37_rccbY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep36_rccbX];

$krep38_rccbZ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_rccbY $krep10_rccbx];

$krep39_rccc0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep38_rccbZ];

$krep40_rccc1 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_rccbp $krep39_rccc0];

Text.Printf.$tcPrintfArg2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "PrintfArg"#;

Text.Printf.$tcPrintfArg1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcPrintfArg2];

Text.Printf.$tcPrintfArg :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14684532792197610005##
                                    5760551473172190061##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcPrintfArg1
                                    0#
                                    Text.Printf.$tcHPrintfType1];

$krep41_rccc2 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcPrintfArg
                                              $krep13_rccbA];

$krep42_rccc3 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep31_rccbS $krep41_rccc2];

Text.Printf.$tc'C:PrintfArg1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_rccbJ $krep42_rccc3];

Text.Printf.$tc'C:PrintfArg3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:PrintfArg"#;

Text.Printf.$tc'C:PrintfArg2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'C:PrintfArg3];

Text.Printf.$tc'C:PrintfArg :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11923342243699112506##
                                    8346787778082712340##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'C:PrintfArg2
                                    1#
                                    Text.Printf.$tc'C:PrintfArg1];

Text.Printf.$tcHPrintfType3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HPrintfType"#;

Text.Printf.$tcHPrintfType2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcHPrintfType3];

Text.Printf.$tcHPrintfType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13104883804062546050##
                                    15477829653093370802##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcHPrintfType2
                                    0#
                                    Text.Printf.$tcHPrintfType1];

$krep43_rccc4 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcHPrintfType
                                              $krep13_rccbA];

Text.Printf.$tc'C:HPrintfType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep40_rccc1 $krep43_rccc4];

Text.Printf.$tc'C:HPrintfType3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:HPrintfType"#;

Text.Printf.$tc'C:HPrintfType2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'C:HPrintfType3];

Text.Printf.$tc'C:HPrintfType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16716104921226462095##
                                    4043378586122981700##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'C:HPrintfType2
                                    1#
                                    Text.Printf.$tc'C:HPrintfType1];

Text.Printf.$tcPrintfType2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "PrintfType"#;

Text.Printf.$tcPrintfType1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcPrintfType2];

Text.Printf.$tcPrintfType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16100185319445667829##
                                    10371264040433388740##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcPrintfType1
                                    0#
                                    Text.Printf.$tcHPrintfType1];

$krep44_rccc5 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcPrintfType
                                              $krep13_rccbA];

Text.Printf.$tc'C:PrintfType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep39_rccc0 $krep44_rccc5];

Text.Printf.$tc'C:PrintfType3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:PrintfType"#;

Text.Printf.$tc'C:PrintfType2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'C:PrintfType3];

Text.Printf.$tc'C:PrintfType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6199067271817529220##
                                    10070277982064886839##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'C:PrintfType2
                                    1#
                                    Text.Printf.$tc'C:PrintfType1];

Text.Printf.$fPrintfArgChar24 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hh"#;

Text.Printf.$fPrintfArgChar23 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar24;

sat_sciEW :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [128#];

sat_sciEX :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciEW GHC.Types.[]];

Text.Printf.$fPrintfArgChar22 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_sciEX;

Text.Printf.$fPrintfArgChar21
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar23
                        Text.Printf.$fPrintfArgChar22];

Text.Printf.$fPrintfArgChar20 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "h"#;

Text.Printf.$fPrintfArgChar19 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar20;

sat_sciEY :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [32768#];

sat_sciEZ :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciEY GHC.Types.[]];

Text.Printf.$fPrintfArgChar18 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_sciEZ;

Text.Printf.$fPrintfArgChar17
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar19
                        Text.Printf.$fPrintfArgChar18];

Text.Printf.$fPrintfArgChar16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "l"#;

Text.Printf.$fPrintfArgChar15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar16;

sat_sciF1 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_sciF2 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciF1 GHC.Types.[]];

sat_sciF0 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_sciF3 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciF0 sat_sciF2];

Text.Printf.$fPrintfArgChar14 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_sciF3;

Text.Printf.$fPrintfArgChar13
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar15
                        Text.Printf.$fPrintfArgChar14];

Text.Printf.$fPrintfArgChar12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ll"#;

Text.Printf.$fPrintfArgChar11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar12;

sat_sciF6 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

sat_sciF7 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciF6 GHC.Types.[]];

sat_sciF5 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_sciF8 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciF5 sat_sciF7];

sat_sciF4 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_sciF9 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciF4 sat_sciF8];

Text.Printf.$fPrintfArgChar7 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_sciF9;

Text.Printf.$fPrintfArgChar10
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar11
                        Text.Printf.$fPrintfArgChar7];

Text.Printf.$fPrintfArgChar9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "L"#;

Text.Printf.$fPrintfArgChar8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar9;

Text.Printf.$fPrintfArgChar6
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar8
                        Text.Printf.$fPrintfArgChar7];

Text.Printf.$fPrintfArgChar5
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar6 GHC.Types.[]];

Text.Printf.$fPrintfArgChar4
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar10
                      Text.Printf.$fPrintfArgChar5];

Text.Printf.$fPrintfArgChar3
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar13
                      Text.Printf.$fPrintfArgChar4];

Text.Printf.$fPrintfArgChar2
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar17
                      Text.Printf.$fPrintfArgChar3];

Text.Printf.intModifierMap
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar21
                      Text.Printf.$fPrintfArgChar2];

lvl7_rccc6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: unknown format modifier"#;

Text.Printf.$fPrintfArgInt2
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl7_rccc6 of sat_sciFa {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciFa;
        };

Text.Printf.$wfixupMods [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.String
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ww_sciFb w_sciFc]
        case ww_sciFb of wild_sciFd {
          [] -> w_sciFc;
          : _ [Occ=Dead] _ [Occ=Dead] ->
              case
                  GHC.List.lookup
                      GHC.Classes.$fEq[]_$s$fEq[]1 wild_sciFd Text.Printf.intModifierMap
              of
              wild1_sciFg
              { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                GHC.Base.Just _ [Occ=Dead] -> wild1_sciFg;
              };
        };

Text.Printf.fixupMods [InlPrag=NOUSERINLINE[0]]
  :: Text.Printf.FieldFormat
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Str=<S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)><L,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciFi w1_sciFj]
        case w_sciFi of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ww6_sciFq [Occ=Once]
                                  _ [Occ=Dead] ->
              Text.Printf.$wfixupMods ww6_sciFq w1_sciFj;
        };

Text.Printf.$wparseIntFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Base.String -> Text.Printf.FormatParse
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_sciFs]
        let {
          go_sciFt [Occ=LoopBreaker]
            :: [([GHC.Types.Char], GHC.Integer.Type.Integer)]
               -> GHC.Base.Maybe Text.Printf.FormatParse
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [w_sciFs go_sciFt] \r [ds_sciFu]
                  case ds_sciFu of {
                    [] -> GHC.Base.Nothing [];
                    : y_sciFw [Occ=Once!] ys_sciFx [Occ=Once] ->
                        case y_sciFw of {
                          (,) p_sciFz _ [Occ=Dead] ->
                              case go_sciFt ys_sciFx of wild2_sciFB {
                                GHC.Base.Nothing ->
                                    case
                                        Data.OldList.stripPrefix
                                            GHC.Classes.$fEqChar p_sciFz w_sciFs
                                    of
                                    { GHC.Base.Nothing -> GHC.Base.Nothing [];
                                      GHC.Base.Just x_sciFD [Occ=Once!] ->
                                          case x_sciFD of {
                                            [] -> Text.Printf.errorShortFormat;
                                            : c_sciFF [Occ=Once] cs_sciFG [Occ=Once] ->
                                                let {
                                                  sat_sciFH [Occ=Once] :: Text.Printf.FormatParse
                                                  [LclId] =
                                                      CCCS Text.Printf.FormatParse! [p_sciFz
                                                                                     c_sciFF
                                                                                     cs_sciFG];
                                                } in  GHC.Base.Just [sat_sciFH];
                                          };
                                    };
                                GHC.Base.Just ds2_sciFI [Occ=Once!] ->
                                    case ds2_sciFI of {
                                      Text.Printf.FormatParse p0_sciFK [Occ=Once]
                                                              _ [Occ=Dead]
                                                              _ [Occ=Dead] ->
                                          case GHC.List.$wlenAcc p0_sciFK 0# of ww2_sciFN {
                                            __DEFAULT ->
                                                case GHC.List.$wlenAcc p_sciFz 0# of ww1_sciFO {
                                                  __DEFAULT ->
                                                      case >=# [ww2_sciFN ww1_sciFO] of {
                                                        __DEFAULT ->
                                                            case
                                                                Data.OldList.stripPrefix
                                                                    GHC.Classes.$fEqChar
                                                                    p_sciFz
                                                                    w_sciFs
                                                            of
                                                            { GHC.Base.Nothing -> wild2_sciFB;
                                                              GHC.Base.Just x_sciFR [Occ=Once!] ->
                                                                  case x_sciFR of {
                                                                    [] ->
                                                                        Text.Printf.errorShortFormat;
                                                                    : c_sciFU [Occ=Once]
                                                                      cs_sciFV [Occ=Once] ->
                                                                        let {
                                                                          sat_sciFW [Occ=Once]
                                                                            :: Text.Printf.FormatParse
                                                                          [LclId] =
                                                                              CCCS Text.Printf.FormatParse! [p_sciFz
                                                                                                             c_sciFU
                                                                                                             cs_sciFV];
                                                                        } in 
                                                                          GHC.Base.Just [sat_sciFW];
                                                                  };
                                                            };
                                                        1# -> wild2_sciFB;
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          case go_sciFt Text.Printf.intModifierMap of {
            GHC.Base.Nothing ->
                case w_sciFs of {
                  [] -> Text.Printf.errorShortFormat;
                  : c_sciFZ [Occ=Once] cs_sciG0 [Occ=Once] ->
                      Text.Printf.FormatParse [GHC.Types.[] c_sciFZ cs_sciG0];
                };
            GHC.Base.Just m_sciG1 [Occ=Once] -> m_sciG1;
          };

Text.Printf.parseIntFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. a -> GHC.Base.String -> Text.Printf.FormatParse
[GblId, Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
    [] \r [w_sciG2 w1_sciG3] Text.Printf.$wparseIntFormat w1_sciG3;

lvl8_rccc7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "undefined"#;

lvl9_rccc8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl8_rccc7;

lvl10_rccc9 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$trModule4;

lvl11_rccca :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$trModule2;

lvl12_rcccb :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./Text/Printf.hs"#;

lvl13_rcccc :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl12_rcccb;

lvl14_rcccd :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [323#];

lvl15_rccce :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [40#];

lvl16_rcccf :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [49#];

lvl17_rcccg :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl10_rccc9
                                           lvl11_rccca
                                           lvl13_rcccc
                                           lvl14_rcccd
                                           lvl15_rccce
                                           lvl14_rcccd
                                           lvl16_rcccf];

lvl18_rccch :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl9_rccc8
                                                  lvl17_rcccg
                                                  GHC.Stack.Types.EmptyCallStack];

Text.Printf.$fPrintfArgChar1 :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl18_rccch;

Text.Printf.$fPrintfArgChar_$cparseFormat
  :: GHC.Types.Char -> Text.Printf.ModifierParser
[GblId, Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
    [] \r [ds_sciG4 cf_sciG5] Text.Printf.$wparseIntFormat cf_sciG5;

Text.Printf.$fPrintfArgDouble5 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['0'#];

integral_prec_rc8qj
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_sciG6 integral_sciG7]
        case ds_sciG6 of {
          GHC.Base.Nothing -> integral_sciG7;
          GHC.Base.Just ds1_sciG9 [Occ=Once!] ->
              case ds1_sciG9 of {
                GHC.Types.I# ds2_sciGb ->
                    let-no-escape {
                      fail_sciGc [Occ=Once*!T[1], Dmd=<L,1*C1(U)>]
                        :: GHC.Prim.Void# -> GHC.Base.String
                      [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                          sat-only [integral_sciG7 ds2_sciGb] \r [ds3_sciGd]
                              case GHC.List.$wlenAcc integral_sciG7 0# of ww2_sciGe {
                                __DEFAULT ->
                                    case -# [ds2_sciGb ww2_sciGe] of y_sciGf [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          case <# [0# y_sciGf] of {
                                            __DEFAULT -> integral_sciG7;
                                            1# ->
                                                let {
                                                  lvl55_sciGh [Occ=OnceL] :: [GHC.Types.Char]
                                                  [LclId, Unf=OtherCon []] =
                                                      CCCS :! [Text.Printf.$fPrintfArgDouble5
                                                               integral_sciG7]; } in
                                                let {
                                                  $wxs_sciGi [InlPrag=NOUSERINLINE[0],
                                                              Occ=LoopBreaker]
                                                    :: GHC.Prim.Int# -> [GHC.Types.Char]
                                                  [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                                      sat-only [lvl55_sciGh
                                                                $wxs_sciGi] \r [ww_sciGj]
                                                          case ww_sciGj of ds4_sciGk {
                                                            __DEFAULT ->
                                                                let {
                                                                  sat_sciGm [Occ=Once]
                                                                    :: [GHC.Types.Char]
                                                                  [LclId] =
                                                                      [$wxs_sciGi ds4_sciGk] \u []
                                                                          case
                                                                              -# [ds4_sciGk 1#]
                                                                          of
                                                                          sat_sciGl
                                                                          { __DEFAULT ->
                                                                                $wxs_sciGi
                                                                                    sat_sciGl;
                                                                          };
                                                                } in 
                                                                  : [Text.Printf.$fPrintfArgDouble5
                                                                     sat_sciGm];
                                                            1# -> lvl55_sciGh;
                                                          };
                                                } in  $wxs_sciGi y_sciGf;
                                          };
                                    };
                              };
                    } in 
                      case ds2_sciGb of {
                        __DEFAULT -> fail_sciGc GHC.Prim.void#;
                        0# ->
                            case integral_sciG7 of {
                              [] -> fail_sciGc GHC.Prim.void#;
                              : ds4_sciGp [Occ=Once!] ds5_sciGq [Occ=Once!] ->
                                  case ds4_sciGp of {
                                    GHC.Types.C# ds6_sciGs [Occ=Once!] ->
                                        case ds6_sciGs of {
                                          __DEFAULT -> fail_sciGc GHC.Prim.void#;
                                          '0'# ->
                                              case ds5_sciGq of {
                                                [] -> [] [];
                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                    fail_sciGc GHC.Prim.void#;
                                              };
                                        };
                                  };
                            };
                      };
              };
        };

lvl19_rccci :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Text/Printf.hs:714:7-39|(\"\", s)"#;

lvl20_rcccj :: (GHC.Base.String)
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.patError lvl19_rccci;

Text.Printf.formatChar2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

sat_sciGx :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

sat_sciGy :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciGx GHC.Types.[]];

lvl21_rccck :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sciGy;

$wfmtu_rcccl
  :: GHC.Integer.Type.Integer
     -> GHC.Base.Maybe GHC.Base.String
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId,
 Arity=5,
 Str=<L,U><S,1*U><L,1*U><L,1*U><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [w_sciGz w1_sciGA w2_sciGB w3_sciGC w4_sciGD]
        case w1_sciGA of {
          GHC.Base.Nothing ->
              let {
                fmtu'_sciGF [Occ=LoopBreaker]
                  :: GHC.Base.Maybe GHC.Types.Int
                     -> GHC.Base.Maybe GHC.Integer.Type.Integer
                     -> GHC.Integer.Type.Integer
                     -> GHC.Base.Maybe GHC.Base.String
                [LclId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
                    sat-only [w_sciGz fmtu'_sciGF] \r [prec_sciGG ds_sciGH i_sciGI]
                        let-no-escape {
                          fail_sciGJ [Occ=Once*!T[1], Dmd=<L,1*C1(U)>]
                            :: GHC.Prim.Void# -> GHC.Base.Maybe GHC.Base.String
                          [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                              sat-only [w_sciGz fmtu'_sciGF prec_sciGG i_sciGI] \r [ds1_sciGK]
                                  case prec_sciGG of wild1_sciGL {
                                    GHC.Base.Nothing ->
                                        case
                                            GHC.Integer.Type.geInteger#
                                                i_sciGI Text.Printf.formatChar2
                                        of
                                        { __DEFAULT -> GHC.Base.Nothing [];
                                          1# ->
                                              let {
                                                sat_sciGN [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    [w_sciGz i_sciGI] \u []
                                                        Numeric.showIntAtBase
                                                            GHC.Real.$fIntegralInteger
                                                            GHC.Show.$fShowInteger
                                                            w_sciGz
                                                            GHC.Show.intToDigit
                                                            i_sciGI
                                                            GHC.Types.[];
                                              } in  GHC.Base.Just [sat_sciGN];
                                        };
                                    GHC.Base.Just _ [Occ=Dead] ->
                                        case
                                            GHC.Integer.Type.geInteger#
                                                i_sciGI Text.Printf.formatChar2
                                        of
                                        { __DEFAULT -> GHC.Base.Nothing [];
                                          1# ->
                                              case
                                                  fmtu'_sciGF
                                                      GHC.Base.Nothing GHC.Base.Nothing i_sciGI
                                              of
                                              { GHC.Base.Nothing -> GHC.Base.Nothing [];
                                                GHC.Base.Just a1_sciGR [Occ=Once] ->
                                                    let {
                                                      sat_sciGS [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [wild1_sciGL a1_sciGR] \u []
                                                              integral_prec_rc8qj
                                                                  wild1_sciGL a1_sciGR;
                                                    } in  GHC.Base.Just [sat_sciGS];
                                              };
                                        };
                                  };
                        } in 
                          case ds_sciGH of {
                            GHC.Base.Nothing -> fail_sciGJ GHC.Prim.void#;
                            GHC.Base.Just m_sciGU [Occ=Once] ->
                                case
                                    GHC.Integer.Type.ltInteger# i_sciGI Text.Printf.formatChar2
                                of
                                { __DEFAULT -> fail_sciGJ GHC.Prim.void#;
                                  1# ->
                                      case
                                          GHC.Integer.Type.timesInteger lvl21_rccck m_sciGU
                                      of
                                      sat_sciGW
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.negateInteger sat_sciGW
                                            of
                                            sat_sciGX
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.plusInteger sat_sciGX i_sciGI
                                                  of
                                                  sat_sciGY
                                                  { __DEFAULT ->
                                                        fmtu'_sciGF
                                                            prec_sciGG GHC.Base.Nothing sat_sciGY;
                                                  };
                                            };
                                      };
                                };
                          };
              } in 
                case fmtu'_sciGF w2_sciGB w3_sciGC w4_sciGD of {
                  GHC.Base.Nothing -> Text.Printf.errorBadArgument;
                  GHC.Base.Just s_sciH1 [Occ=Once] -> (#,#) [GHC.Types.[] s_sciH1];
                };
          GHC.Base.Just pre_sciH2 [Occ=Once!] ->
              let {
                s_sciH3 [Occ=Once*] :: GHC.Base.String
                [LclId] =
                    [w_sciGz w2_sciGB w3_sciGC w4_sciGD] \u []
                        case
                            $wfmtu_rcccl w_sciGz GHC.Base.Nothing w2_sciGB w3_sciGC w4_sciGD
                        of
                        { (#,#) ww1_sciH5 [Occ=Once!] ww2_sciH6 [Occ=Once] ->
                              case ww1_sciH5 of {
                                [] -> ww2_sciH6;
                                : _ [Occ=Dead] _ [Occ=Dead] -> lvl20_rcccj;
                              };
                        };
              } in 
                case pre_sciH2 of wild1_sciHb {
                  [] -> (#,#) [GHC.Types.[] s_sciH3];
                  : ds_sciHc [Occ=Once!] ds1_sciHd [Occ=Once!] ->
                      case ds_sciHc of {
                        GHC.Types.C# ds2_sciHf [Occ=Once!] ->
                            case ds2_sciHf of {
                              __DEFAULT -> (#,#) [wild1_sciHb s_sciH3];
                              '0'# ->
                                  case ds1_sciHd of {
                                    [] ->
                                        case s_sciH3 of wild4_sciHi {
                                          [] -> (#,#) [wild1_sciHb GHC.Types.[]];
                                          : ds4_sciHj [Occ=Once!] _ [Occ=Dead] ->
                                              case ds4_sciHj of {
                                                GHC.Types.C# ds6_sciHm [Occ=Once!] ->
                                                    case ds6_sciHm of {
                                                      __DEFAULT -> (#,#) [wild1_sciHb wild4_sciHi];
                                                      '0'# -> (#,#) [GHC.Types.[] wild4_sciHi];
                                                    };
                                              };
                                        };
                                    : _ [Occ=Dead] _ [Occ=Dead] -> (#,#) [wild1_sciHb s_sciH3];
                                  };
                            };
                      };
                };
        };

$wfmti_rcccm
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Integer.Type.Integer
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    sat-only [] \r [w_sciHq w1_sciHr]
        case
            GHC.Integer.Type.ltInteger# w1_sciHr Text.Printf.formatChar2
        of
        { __DEFAULT ->
              let {
                sat_sciHx [Occ=Once] :: GHC.Base.String
                [LclId] =
                    [w_sciHq w1_sciHr] \u []
                        case GHC.Show.$w$cshowsPrec4 0# w1_sciHr GHC.Types.[] of {
                          (#,#) ww3_sciHu [Occ=Once] ww4_sciHv [Occ=Once] ->
                              let {
                                sat_sciHw [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    CCCS :! [ww3_sciHu ww4_sciHv];
                              } in  integral_prec_rc8qj w_sciHq sat_sciHw;
                        };
              } in  (#,#) [GHC.Types.[] sat_sciHx];
          1# ->
              let {
                sat_sciHD [Occ=Once] :: GHC.Base.String
                [LclId] =
                    [w_sciHq w1_sciHr] \u []
                        case GHC.Integer.Type.negateInteger w1_sciHr of sat_sciHy {
                          __DEFAULT ->
                              case GHC.Show.$w$cshowsPrec4 0# sat_sciHy GHC.Types.[] of {
                                (#,#) ww3_sciHA [Occ=Once] ww4_sciHB [Occ=Once] ->
                                    let {
                                      sat_sciHC [Occ=Once] :: GHC.Base.String
                                      [LclId] =
                                          CCCS :! [ww3_sciHA ww4_sciHB];
                                    } in  integral_prec_rc8qj w_sciHq sat_sciHC;
                              };
                        };
              } in  (#,#) [Text.Printf.$fPrintfArgDouble8 sat_sciHD];
        };

Text.Printf.$fPrintfArgDouble6 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [' '#];

Text.Printf.$wadjust [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Base.String
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U><S,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sciHE ww1_sciHF ww2_sciHG ww3_sciHH]
        let {
          fill_sciHI [Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [ww_sciHE ww1_sciHF ww2_sciHG ww3_sciHH] \s []
                  case ww_sciHE of {
                    GHC.Base.Nothing -> [] [];
                    GHC.Base.Just width_sciHK [Occ=Once!] ->
                        case GHC.List.$wlenAcc ww2_sciHG 0# of ww4_sciHL {
                          __DEFAULT ->
                              case GHC.List.$wlenAcc ww3_sciHH 0# of ww5_sciHM {
                                __DEFAULT ->
                                    case width_sciHK of {
                                      GHC.Types.I# y_sciHO ->
                                          case +# [ww4_sciHL ww5_sciHM] of x_sciHP [Dmd=<S,U>] {
                                            __DEFAULT ->
                                                case <# [x_sciHP y_sciHO] of {
                                                  __DEFAULT -> [] [];
                                                  1# ->
                                                      case
                                                          -# [y_sciHO x_sciHP]
                                                      of
                                                      n_sciHR [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            case <# [0# n_sciHR] of {
                                                              __DEFAULT -> [] [];
                                                              1# ->
                                                                  let {
                                                                    x1_sciHT :: GHC.Types.Char
                                                                    [LclId] =
                                                                        [ww1_sciHF] \u []
                                                                            case ww1_sciHF of {
                                                                              GHC.Base.Nothing ->
                                                                                  Text.Printf.$fPrintfArgDouble6;
                                                                              GHC.Base.Just ds_sciHV [Occ=Once!] ->
                                                                                  case ds_sciHV of {
                                                                                    Text.Printf.LeftAdjust ->
                                                                                        Text.Printf.$fPrintfArgDouble6;
                                                                                    Text.Printf.ZeroPad ->
                                                                                        Text.Printf.$fPrintfArgDouble5;
                                                                                  };
                                                                            }; } in
                                                                  let {
                                                                    lvl55_sciHX [Occ=OnceL]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId, Unf=OtherCon []] =
                                                                        CCCS :! [x1_sciHT
                                                                                 GHC.Types.[]]; } in
                                                                  let {
                                                                    $wxs_sciHY [InlPrag=NOUSERINLINE[0],
                                                                                Occ=LoopBreaker]
                                                                      :: GHC.Prim.Int#
                                                                         -> [GHC.Types.Char]
                                                                    [LclId,
                                                                     Arity=1,
                                                                     Str=<S,1*U>,
                                                                     Unf=OtherCon []] =
                                                                        sat-only [x1_sciHT
                                                                                  lvl55_sciHX
                                                                                  $wxs_sciHY] \r [ww6_sciHZ]
                                                                            case
                                                                                ww6_sciHZ
                                                                            of
                                                                            ds1_sciI0
                                                                            { __DEFAULT ->
                                                                                  let {
                                                                                    sat_sciI2 [Occ=Once]
                                                                                      :: [GHC.Types.Char]
                                                                                    [LclId] =
                                                                                        [$wxs_sciHY
                                                                                         ds1_sciI0] \u []
                                                                                            case
                                                                                                -# [ds1_sciI0
                                                                                                    1#]
                                                                                            of
                                                                                            sat_sciI1
                                                                                            { __DEFAULT ->
                                                                                                  $wxs_sciHY
                                                                                                      sat_sciI1;
                                                                                            };
                                                                                  } in 
                                                                                    : [x1_sciHT
                                                                                       sat_sciI2];
                                                                              1# -> lvl55_sciHX;
                                                                            };
                                                                  } in  $wxs_sciHY n_sciHR;
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          let-no-escape {
            $j_sciI3 [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Base.String
            [LclId[JoinId(0)], Unf=OtherCon []] =
                [ww1_sciHF ww2_sciHG ww3_sciHH fill_sciHI] \r []
                    case ww1_sciHF of {
                      GHC.Base.Nothing ->
                          let {
                            sat_sciI5 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                            [LclId] =
                                [ww2_sciHG ww3_sciHH] \s [] GHC.Base.++ ww2_sciHG ww3_sciHH;
                          } in  GHC.Base.++ fill_sciHI sat_sciI5;
                      GHC.Base.Just ds_sciI6 [Occ=Once!] ->
                          case ds_sciI6 of {
                            Text.Printf.LeftAdjust ->
                                let {
                                  sat_sciI8 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [ww2_sciHG ww3_sciHH] \s [] GHC.Base.++ ww2_sciHG ww3_sciHH;
                                } in  GHC.Base.++ fill_sciHI sat_sciI8;
                            Text.Printf.ZeroPad ->
                                let {
                                  sat_sciI9 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [ww3_sciHH fill_sciHI] \s [] GHC.Base.++ fill_sciHI ww3_sciHH;
                                } in  GHC.Base.++ ww2_sciHG sat_sciI9;
                          };
                    };
          } in 
            case ww1_sciHF of {
              GHC.Base.Nothing -> $j_sciI3;
              GHC.Base.Just ds_sciIb [Occ=Once!] ->
                  case ds_sciIb of {
                    Text.Printf.LeftAdjust ->
                        let {
                          sat_sciId [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [ww3_sciHH fill_sciHI] \s [] GHC.Base.++ ww3_sciHH fill_sciHI;
                        } in  GHC.Base.++ ww2_sciHG sat_sciId;
                    Text.Printf.ZeroPad -> $j_sciI3;
                  };
            };

Text.Printf.$fPrintfArgDouble4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "+"#;

Text.Printf.$fPrintfArgDouble3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgDouble4;

Text.Printf.$fPrintfArgDouble2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " "#;

Text.Printf.$fPrintfArgDouble1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgDouble2;

Text.Printf.$wadjustSigned [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Base.String
[GblId,
 Arity=5,
 Str=<L,1*U><S,U><S,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sciIe ww1_sciIf ww2_sciIg ww3_sciIh ww4_sciIi]
        case ww2_sciIg of {
          GHC.Base.Nothing ->
              Text.Printf.$wadjust ww_sciIe ww1_sciIf ww3_sciIh ww4_sciIi;
          GHC.Base.Just ds_sciIk [Occ=Once!] ->
              case ds_sciIk of {
                Text.Printf.SignPlus ->
                    case ww3_sciIh of wild2_sciIm {
                      [] ->
                          Text.Printf.$wadjust
                              ww_sciIe ww1_sciIf Text.Printf.$fPrintfArgDouble3 ww4_sciIi;
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          Text.Printf.$wadjust ww_sciIe ww1_sciIf wild2_sciIm ww4_sciIi;
                    };
                Text.Printf.SignSpace ->
                    case ww3_sciIh of wild2_sciIp {
                      [] ->
                          Text.Printf.$wadjust
                              ww_sciIe ww1_sciIf Text.Printf.$fPrintfArgDouble1 ww4_sciIi;
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          Text.Printf.$wadjust ww_sciIe ww1_sciIf wild2_sciIp ww4_sciIi;
                    };
              };
        };

Text.Printf.$w$sformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Double
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=7,
 Str=<L,1*U(U)><L,1*U><L,U><L,U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciIs
           ww_sciIt
           ww1_sciIu
           ww2_sciIv
           ww3_sciIw
           ww4_sciIx
           ww5_sciIy]
        case ww5_sciIy of ds_sciIz {
          __DEFAULT -> Text.Printf.$werrorBadFormat ds_sciIz;
          'E'# ->
              let {
                sat_sciID [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciIs ww_sciIt ww1_sciIu ww2_sciIv ww3_sciIw ww4_sciIx] \u []
                        case Text.Printf.$w$sdfmt 'E'# ww1_sciIu ww4_sciIx w_sciIs of {
                          (#,#) ww7_sciIB [Occ=Once] ww8_sciIC [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciIt ww2_sciIv ww3_sciIw ww7_sciIB ww8_sciIC;
                        };
              } in  GHC.Base.++ sat_sciID;
          'F'# ->
              let {
                sat_sciIH [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciIs ww_sciIt ww1_sciIu ww2_sciIv ww3_sciIw ww4_sciIx] \u []
                        case Text.Printf.$w$sdfmt 'F'# ww1_sciIu ww4_sciIx w_sciIs of {
                          (#,#) ww7_sciIF [Occ=Once] ww8_sciIG [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciIt ww2_sciIv ww3_sciIw ww7_sciIF ww8_sciIG;
                        };
              } in  GHC.Base.++ sat_sciIH;
          'G'# ->
              let {
                sat_sciIL [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciIs ww_sciIt ww1_sciIu ww2_sciIv ww3_sciIw ww4_sciIx] \u []
                        case Text.Printf.$w$sdfmt 'G'# ww1_sciIu ww4_sciIx w_sciIs of {
                          (#,#) ww7_sciIJ [Occ=Once] ww8_sciIK [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciIt ww2_sciIv ww3_sciIw ww7_sciIJ ww8_sciIK;
                        };
              } in  GHC.Base.++ sat_sciIL;
          'e'# ->
              let {
                sat_sciIP [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciIs ww_sciIt ww1_sciIu ww2_sciIv ww3_sciIw ww4_sciIx] \u []
                        case Text.Printf.$w$sdfmt 'e'# ww1_sciIu ww4_sciIx w_sciIs of {
                          (#,#) ww7_sciIN [Occ=Once] ww8_sciIO [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciIt ww2_sciIv ww3_sciIw ww7_sciIN ww8_sciIO;
                        };
              } in  GHC.Base.++ sat_sciIP;
          'f'# ->
              let {
                sat_sciIT [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciIs ww_sciIt ww1_sciIu ww2_sciIv ww3_sciIw ww4_sciIx] \u []
                        case Text.Printf.$w$sdfmt 'f'# ww1_sciIu ww4_sciIx w_sciIs of {
                          (#,#) ww7_sciIR [Occ=Once] ww8_sciIS [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciIt ww2_sciIv ww3_sciIw ww7_sciIR ww8_sciIS;
                        };
              } in  GHC.Base.++ sat_sciIT;
          'g'# ->
              let {
                sat_sciIX [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciIs ww_sciIt ww1_sciIu ww2_sciIv ww3_sciIw ww4_sciIx] \u []
                        case Text.Printf.$w$sdfmt 'g'# ww1_sciIu ww4_sciIx w_sciIs of {
                          (#,#) ww7_sciIV [Occ=Once] ww8_sciIW [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciIt ww2_sciIv ww3_sciIw ww7_sciIV ww8_sciIW;
                        };
              } in  GHC.Base.++ sat_sciIX;
          'v'# ->
              let {
                sat_sciJ1 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciIs ww_sciIt ww1_sciIu ww2_sciIv ww3_sciIw ww4_sciIx] \u []
                        case Text.Printf.$w$sdfmt 'g'# ww1_sciIu ww4_sciIx w_sciIs of {
                          (#,#) ww7_sciIZ [Occ=Once] ww8_sciJ0 [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciIt ww2_sciIv ww3_sciIw ww7_sciIZ ww8_sciJ0;
                        };
              } in  GHC.Base.++ sat_sciJ1;
        };

Text.Printf.$fPrintfArgDouble_$sformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Double -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LLLLLLS(S)),1*U(1*U,U,U,1*U,1*U,A,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciJ2 w1_sciJ3]
        case w1_sciJ3 of {
          Text.Printf.FieldFormat ww1_sciJ5 [Occ=Once]
                                  ww2_sciJ6 [Occ=Once]
                                  ww3_sciJ7 [Occ=Once]
                                  ww4_sciJ8 [Occ=Once]
                                  ww5_sciJ9 [Occ=Once]
                                  _ [Occ=Dead]
                                  ww7_sciJb [Occ=Once!] ->
              case ww7_sciJb of {
                GHC.Types.C# ww9_sciJd [Occ=Once] ->
                    Text.Printf.$w$sformatRealFloat
                        w_sciJ2
                        ww1_sciJ5
                        ww2_sciJ6
                        ww3_sciJ7
                        ww4_sciJ8
                        ww5_sciJ9
                        ww9_sciJd;
              };
        };

Text.Printf.$w$sformatRealFloat1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Float
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=7,
 Str=<L,1*U(U)><L,1*U><L,U><L,U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciJe
           ww_sciJf
           ww1_sciJg
           ww2_sciJh
           ww3_sciJi
           ww4_sciJj
           ww5_sciJk]
        case ww5_sciJk of ds_sciJl {
          __DEFAULT -> Text.Printf.$werrorBadFormat ds_sciJl;
          'E'# ->
              let {
                sat_sciJp [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciJe ww_sciJf ww1_sciJg ww2_sciJh ww3_sciJi ww4_sciJj] \u []
                        case Text.Printf.$w$sdfmt1 'E'# ww1_sciJg ww4_sciJj w_sciJe of {
                          (#,#) ww7_sciJn [Occ=Once] ww8_sciJo [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciJf ww2_sciJh ww3_sciJi ww7_sciJn ww8_sciJo;
                        };
              } in  GHC.Base.++ sat_sciJp;
          'F'# ->
              let {
                sat_sciJt [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciJe ww_sciJf ww1_sciJg ww2_sciJh ww3_sciJi ww4_sciJj] \u []
                        case Text.Printf.$w$sdfmt1 'F'# ww1_sciJg ww4_sciJj w_sciJe of {
                          (#,#) ww7_sciJr [Occ=Once] ww8_sciJs [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciJf ww2_sciJh ww3_sciJi ww7_sciJr ww8_sciJs;
                        };
              } in  GHC.Base.++ sat_sciJt;
          'G'# ->
              let {
                sat_sciJx [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciJe ww_sciJf ww1_sciJg ww2_sciJh ww3_sciJi ww4_sciJj] \u []
                        case Text.Printf.$w$sdfmt1 'G'# ww1_sciJg ww4_sciJj w_sciJe of {
                          (#,#) ww7_sciJv [Occ=Once] ww8_sciJw [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciJf ww2_sciJh ww3_sciJi ww7_sciJv ww8_sciJw;
                        };
              } in  GHC.Base.++ sat_sciJx;
          'e'# ->
              let {
                sat_sciJB [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciJe ww_sciJf ww1_sciJg ww2_sciJh ww3_sciJi ww4_sciJj] \u []
                        case Text.Printf.$w$sdfmt1 'e'# ww1_sciJg ww4_sciJj w_sciJe of {
                          (#,#) ww7_sciJz [Occ=Once] ww8_sciJA [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciJf ww2_sciJh ww3_sciJi ww7_sciJz ww8_sciJA;
                        };
              } in  GHC.Base.++ sat_sciJB;
          'f'# ->
              let {
                sat_sciJF [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciJe ww_sciJf ww1_sciJg ww2_sciJh ww3_sciJi ww4_sciJj] \u []
                        case Text.Printf.$w$sdfmt1 'f'# ww1_sciJg ww4_sciJj w_sciJe of {
                          (#,#) ww7_sciJD [Occ=Once] ww8_sciJE [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciJf ww2_sciJh ww3_sciJi ww7_sciJD ww8_sciJE;
                        };
              } in  GHC.Base.++ sat_sciJF;
          'g'# ->
              let {
                sat_sciJJ [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciJe ww_sciJf ww1_sciJg ww2_sciJh ww3_sciJi ww4_sciJj] \u []
                        case Text.Printf.$w$sdfmt1 'g'# ww1_sciJg ww4_sciJj w_sciJe of {
                          (#,#) ww7_sciJH [Occ=Once] ww8_sciJI [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciJf ww2_sciJh ww3_sciJi ww7_sciJH ww8_sciJI;
                        };
              } in  GHC.Base.++ sat_sciJJ;
          'v'# ->
              let {
                sat_sciJN [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciJe ww_sciJf ww1_sciJg ww2_sciJh ww3_sciJi ww4_sciJj] \u []
                        case Text.Printf.$w$sdfmt1 'g'# ww1_sciJg ww4_sciJj w_sciJe of {
                          (#,#) ww7_sciJL [Occ=Once] ww8_sciJM [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciJf ww2_sciJh ww3_sciJi ww7_sciJL ww8_sciJM;
                        };
              } in  GHC.Base.++ sat_sciJN;
        };

Text.Printf.$fPrintfArgFloat_$sformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Float -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LLLLLLS(S)),1*U(1*U,U,U,1*U,1*U,A,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciJO w1_sciJP]
        case w1_sciJP of {
          Text.Printf.FieldFormat ww1_sciJR [Occ=Once]
                                  ww2_sciJS [Occ=Once]
                                  ww3_sciJT [Occ=Once]
                                  ww4_sciJU [Occ=Once]
                                  ww5_sciJV [Occ=Once]
                                  _ [Occ=Dead]
                                  ww7_sciJX [Occ=Once!] ->
              case ww7_sciJX of {
                GHC.Types.C# ww9_sciJZ [Occ=Once] ->
                    Text.Printf.$w$sformatRealFloat1
                        w_sciJO
                        ww1_sciJR
                        ww2_sciJS
                        ww3_sciJT
                        ww4_sciJU
                        ww5_sciJV
                        ww9_sciJZ;
              };
        };

Text.Printf.$wformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Float.RealFloat a =>
     a
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,U(U(U(U(A,A,A,C(U),A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,A,A,A,A,A),A,C(U),C(U(U)),C(U(1*U(U),A)),C(U(U,U(U))),A,A,A,A,C(U),C(U),A,C(U),A,A)><L,U><L,1*U><L,U><L,U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciK0
           w1_sciK1
           ww_sciK2
           ww1_sciK3
           ww2_sciK4
           ww3_sciK5
           ww4_sciK6
           ww5_sciK7]
        case ww5_sciK7 of ds_sciK8 {
          __DEFAULT -> Text.Printf.$werrorBadFormat ds_sciK8;
          'E'# ->
              let {
                sat_sciKc [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciK0
                     w1_sciK1
                     ww_sciK2
                     ww1_sciK3
                     ww2_sciK4
                     ww3_sciK5
                     ww4_sciK6] \u []
                        case
                            Text.Printf.$wdfmt w_sciK0 'E'# ww1_sciK3 ww4_sciK6 w1_sciK1
                        of
                        { (#,#) ww7_sciKa [Occ=Once] ww8_sciKb [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciK2 ww2_sciK4 ww3_sciK5 ww7_sciKa ww8_sciKb;
                        };
              } in  GHC.Base.++ sat_sciKc;
          'F'# ->
              let {
                sat_sciKg [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciK0
                     w1_sciK1
                     ww_sciK2
                     ww1_sciK3
                     ww2_sciK4
                     ww3_sciK5
                     ww4_sciK6] \u []
                        case
                            Text.Printf.$wdfmt w_sciK0 'F'# ww1_sciK3 ww4_sciK6 w1_sciK1
                        of
                        { (#,#) ww7_sciKe [Occ=Once] ww8_sciKf [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciK2 ww2_sciK4 ww3_sciK5 ww7_sciKe ww8_sciKf;
                        };
              } in  GHC.Base.++ sat_sciKg;
          'G'# ->
              let {
                sat_sciKk [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciK0
                     w1_sciK1
                     ww_sciK2
                     ww1_sciK3
                     ww2_sciK4
                     ww3_sciK5
                     ww4_sciK6] \u []
                        case
                            Text.Printf.$wdfmt w_sciK0 'G'# ww1_sciK3 ww4_sciK6 w1_sciK1
                        of
                        { (#,#) ww7_sciKi [Occ=Once] ww8_sciKj [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciK2 ww2_sciK4 ww3_sciK5 ww7_sciKi ww8_sciKj;
                        };
              } in  GHC.Base.++ sat_sciKk;
          'e'# ->
              let {
                sat_sciKo [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciK0
                     w1_sciK1
                     ww_sciK2
                     ww1_sciK3
                     ww2_sciK4
                     ww3_sciK5
                     ww4_sciK6] \u []
                        case
                            Text.Printf.$wdfmt w_sciK0 'e'# ww1_sciK3 ww4_sciK6 w1_sciK1
                        of
                        { (#,#) ww7_sciKm [Occ=Once] ww8_sciKn [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciK2 ww2_sciK4 ww3_sciK5 ww7_sciKm ww8_sciKn;
                        };
              } in  GHC.Base.++ sat_sciKo;
          'f'# ->
              let {
                sat_sciKs [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciK0
                     w1_sciK1
                     ww_sciK2
                     ww1_sciK3
                     ww2_sciK4
                     ww3_sciK5
                     ww4_sciK6] \u []
                        case
                            Text.Printf.$wdfmt w_sciK0 'f'# ww1_sciK3 ww4_sciK6 w1_sciK1
                        of
                        { (#,#) ww7_sciKq [Occ=Once] ww8_sciKr [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciK2 ww2_sciK4 ww3_sciK5 ww7_sciKq ww8_sciKr;
                        };
              } in  GHC.Base.++ sat_sciKs;
          'g'# ->
              let {
                sat_sciKw [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciK0
                     w1_sciK1
                     ww_sciK2
                     ww1_sciK3
                     ww2_sciK4
                     ww3_sciK5
                     ww4_sciK6] \u []
                        case
                            Text.Printf.$wdfmt w_sciK0 'g'# ww1_sciK3 ww4_sciK6 w1_sciK1
                        of
                        { (#,#) ww7_sciKu [Occ=Once] ww8_sciKv [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciK2 ww2_sciK4 ww3_sciK5 ww7_sciKu ww8_sciKv;
                        };
              } in  GHC.Base.++ sat_sciKw;
          'v'# ->
              let {
                sat_sciKA [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciK0
                     w1_sciK1
                     ww_sciK2
                     ww1_sciK3
                     ww2_sciK4
                     ww3_sciK5
                     ww4_sciK6] \u []
                        case
                            Text.Printf.$wdfmt w_sciK0 'g'# ww1_sciK3 ww4_sciK6 w1_sciK1
                        of
                        { (#,#) ww7_sciKy [Occ=Once] ww8_sciKz [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciK2 ww2_sciK4 ww3_sciK5 ww7_sciKy ww8_sciKz;
                        };
              } in  GHC.Base.++ sat_sciKA;
        };

Text.Printf.formatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Float.RealFloat a =>
     a -> Text.Printf.FieldFormatter
[GblId,
 Arity=3,
 Str=<L,U(U(U(U(A,A,A,C(U),A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,A,A,A,A,A),A,C(U),C(U(U)),C(U(1*U(U),A)),C(U(U,U(U))),A,A,A,A,C(U),C(U),A,C(U),A,A)><L,U><S(LLLLLLS(S)),1*U(1*U,U,U,1*U,1*U,A,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciKB w1_sciKC w2_sciKD]
        case w2_sciKD of {
          Text.Printf.FieldFormat ww1_sciKF [Occ=Once]
                                  ww2_sciKG [Occ=Once]
                                  ww3_sciKH [Occ=Once]
                                  ww4_sciKI [Occ=Once]
                                  ww5_sciKJ [Occ=Once]
                                  _ [Occ=Dead]
                                  ww7_sciKL [Occ=Once!] ->
              case ww7_sciKL of {
                GHC.Types.C# ww9_sciKN [Occ=Once] ->
                    Text.Printf.$wformatRealFloat
                        w_sciKB
                        w1_sciKC
                        ww1_sciKF
                        ww2_sciKG
                        ww3_sciKH
                        ww4_sciKI
                        ww5_sciKJ
                        ww9_sciKN;
              };
        };

Text.Printf.$fPrintfArgDouble_$cparseFormat
  :: GHC.Types.Double -> Text.Printf.ModifierParser
[GblId, Arity=2, Str=<L,A><S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_sciKO ds1_sciKP]
        case ds1_sciKP of {
          [] -> Text.Printf.errorShortFormat;
          : c_sciKR [Occ=Once] cs_sciKS [Occ=Once] ->
              Text.Printf.FormatParse [GHC.Types.[] c_sciKR cs_sciKS];
        };

Text.Printf.$fPrintfArgDouble [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Double
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgDouble_$sformatRealFloat
                                            Text.Printf.$fPrintfArgDouble_$cparseFormat];

Text.Printf.$fPrintfArgFloat_$cparseFormat
  :: GHC.Types.Float -> Text.Printf.ModifierParser
[GblId, Arity=2, Str=<L,A><S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_sciKT ds1_sciKU]
        case ds1_sciKU of {
          [] -> Text.Printf.errorShortFormat;
          : c_sciKW [Occ=Once] cs_sciKX [Occ=Once] ->
              Text.Printf.FormatParse [GHC.Types.[] c_sciKW cs_sciKX];
        };

Text.Printf.$fPrintfArgFloat [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Float
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgFloat_$sformatRealFloat
                                            Text.Printf.$fPrintfArgFloat_$cparseFormat];

Text.Printf.$w$sformatString [InlPrag=NOUSERINLINE[0]]
  :: [GHC.Types.Char]
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=5,
 Str=<L,1*U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciKY ww_sciKZ ww1_sciL0 ww2_sciL1 ww3_sciL2]
        let-no-escape {
          $w$j_sciL3 [InlPrag=NOUSERINLINE[0],
                      Occ=Once*!T[1],
                      Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Char# -> GHC.Show.ShowS
          [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [w_sciKY ww_sciKZ ww1_sciL0 ww2_sciL1] \r [ww4_sciL4]
                  case ww4_sciL4 of ds_sciL5 {
                    __DEFAULT -> Text.Printf.$werrorBadFormat ds_sciL5;
                    's'# ->
                        let {
                          g_sciL6 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [w_sciKY ww_sciKZ ww1_sciL0 ww2_sciL1] \u []
                                  let {
                                    sat_sciLc [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [w_sciKY ww1_sciL0] \u []
                                            case ww1_sciL0 of {
                                              GHC.Base.Nothing -> w_sciKY;
                                              GHC.Base.Just n_sciL8 [Occ=Once!] ->
                                                  case n_sciL8 of {
                                                    GHC.Types.I# y_sciLa ->
                                                        case <# [0# y_sciLa] of {
                                                          __DEFAULT -> [] [];
                                                          1# ->
                                                              GHC.List.$wunsafeTake y_sciLa w_sciKY;
                                                        };
                                                  };
                                            };
                                  } in 
                                    Text.Printf.$wadjust ww_sciKZ ww2_sciL1 GHC.Types.[] sat_sciLc;
                        } in  GHC.Base.++ g_sciL6;
                  };
        } in 
          case ww3_sciL2 of ds_sciLe {
            __DEFAULT -> $w$j_sciL3 ds_sciLe;
            'v'# -> $w$j_sciL3 's'#;
          };

Text.Printf.$wformatString [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.Printf.IsChar a =>
     [a]
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=6,
 Str=<L,U(C(U),A)><L,1*U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciLf w1_sciLg ww_sciLh ww1_sciLi ww2_sciLj ww3_sciLk]
        let-no-escape {
          $w$j_sciLl [InlPrag=NOUSERINLINE[0],
                      Occ=Once*!T[1],
                      Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Char# -> GHC.Show.ShowS
          [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [w_sciLf
                        w1_sciLg
                        ww_sciLh
                        ww1_sciLi
                        ww2_sciLj] \r [ww4_sciLm]
                  case ww4_sciLm of ds_sciLn {
                    __DEFAULT -> Text.Printf.$werrorBadFormat ds_sciLn;
                    's'# ->
                        let {
                          g_sciLo [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [w_sciLf w1_sciLg ww_sciLh ww1_sciLi ww2_sciLj] \u []
                                  let {
                                    sat_sciLG [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [w_sciLf w1_sciLg ww1_sciLi] \u []
                                            case ww1_sciLi of {
                                              GHC.Base.Nothing ->
                                                  let {
                                                    sat_sciLq [Occ=Once, Dmd=<L,C(U)>]
                                                      :: a_scbaN -> GHC.Types.Char
                                                    [LclId] =
                                                        [w_sciLf] \u [] Text.Printf.toChar w_sciLf;
                                                  } in  GHC.Base.map sat_sciLq w1_sciLg;
                                              GHC.Base.Just n_sciLr [Occ=Once!] ->
                                                  case n_sciLr of {
                                                    GHC.Types.I# y_sciLt ->
                                                        case <# [0# y_sciLt] of {
                                                          __DEFAULT -> [] [];
                                                          1# ->
                                                              let {
                                                                $wgo_sciLv [InlPrag=NOUSERINLINE[0],
                                                                            Occ=LoopBreaker]
                                                                  :: [a_scbaN]
                                                                     -> GHC.Prim.Int#
                                                                     -> [GHC.Types.Char]
                                                                [LclId,
                                                                 Arity=2,
                                                                 Str=<S,1*U><L,1*U>,
                                                                 Unf=OtherCon []] =
                                                                    sat-only [w_sciLf
                                                                              $wgo_sciLv] \r [w2_sciLw
                                                                                              ww5_sciLx]
                                                                        case w2_sciLw of {
                                                                          [] -> [] [];
                                                                          : y1_sciLz [Occ=Once*]
                                                                            ys_sciLA [Occ=Once] ->
                                                                              case
                                                                                  ww5_sciLx
                                                                              of
                                                                              ds1_sciLB
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_sciLE [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          [$wgo_sciLv
                                                                                           ys_sciLA
                                                                                           ds1_sciLB] \u []
                                                                                              case
                                                                                                  -# [ds1_sciLB
                                                                                                      1#]
                                                                                              of
                                                                                              sat_sciLD
                                                                                              { __DEFAULT ->
                                                                                                    $wgo_sciLv
                                                                                                        ys_sciLA
                                                                                                        sat_sciLD;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_sciLC [Occ=Once]
                                                                                        :: GHC.Types.Char
                                                                                      [LclId] =
                                                                                          [w_sciLf
                                                                                           y1_sciLz] \u []
                                                                                              Text.Printf.toChar
                                                                                                  w_sciLf
                                                                                                  y1_sciLz;
                                                                                    } in 
                                                                                      : [sat_sciLC
                                                                                         sat_sciLE];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_sciLF [Occ=Once]
                                                                                        :: GHC.Types.Char
                                                                                      [LclId] =
                                                                                          [w_sciLf
                                                                                           y1_sciLz] \u []
                                                                                              Text.Printf.toChar
                                                                                                  w_sciLf
                                                                                                  y1_sciLz;
                                                                                    } in 
                                                                                      : [sat_sciLF
                                                                                         GHC.Types.[]];
                                                                              };
                                                                        };
                                                              } in  $wgo_sciLv w1_sciLg y_sciLt;
                                                        };
                                                  };
                                            };
                                  } in 
                                    Text.Printf.$wadjust ww_sciLh ww2_sciLj GHC.Types.[] sat_sciLG;
                        } in  GHC.Base.++ g_sciLo;
                  };
        } in 
          case ww3_sciLk of ds_sciLI {
            __DEFAULT -> $w$j_sciLl ds_sciLI;
            'v'# -> $w$j_sciLl 's'#;
          };

Text.Printf.formatString [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.Printf.IsChar a =>
     [a] -> Text.Printf.FieldFormatter
[GblId,
 Arity=3,
 Str=<L,U(C(U),A)><L,1*U><S(LLLLLLS(S)),1*U(1*U,1*U,U,A,A,A,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciLJ w1_sciLK w2_sciLL]
        case w2_sciLL of {
          Text.Printf.FieldFormat ww1_sciLN [Occ=Once]
                                  ww2_sciLO [Occ=Once]
                                  ww3_sciLP [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ww7_sciLT [Occ=Once!] ->
              case ww7_sciLT of {
                GHC.Types.C# ww9_sciLV [Occ=Once] ->
                    Text.Printf.$wformatString
                        w_sciLJ w1_sciLK ww1_sciLN ww2_sciLO ww3_sciLP ww9_sciLV;
              };
        };

lvl22_rcccn
  :: forall c. [c] -> [GHC.Types.Char] -> Text.Printf.FormatParse
[GblId, Arity=2, Str=<L,A><S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_sciLW ds1_sciLX]
        case ds1_sciLX of {
          [] -> Text.Printf.errorShortFormat;
          : c1_sciLZ [Occ=Once] cs_sciM0 [Occ=Once] ->
              Text.Printf.FormatParse [GHC.Types.[] c1_sciLZ cs_sciM0];
        };

Text.Printf.$fPrintfArg[] [InlPrag=NOUSERINLINE CONLIKE]
  :: forall c. Text.Printf.IsChar c => Text.Printf.PrintfArg [c]
[GblId[DFunId], Arity=1, Str=<L,U(C(U),A)>m] =
    [] \r [$dIsChar_sciM1]
        let {
          sat_sciM2 [Occ=Once] :: [c_ac8Zj] -> Text.Printf.FieldFormatter
          [LclId] =
              [$dIsChar_sciM1] \r [eta_B2 eta_B1]
                  Text.Printf.formatString $dIsChar_sciM1 eta_B2 eta_B1;
        } in  Text.Printf.C:PrintfArg [sat_sciM2 lvl22_rcccn];

lvl23_rccco :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['d'#];

sat_sciM3 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

sat_sciM4 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciM3 GHC.Types.[]];

lvl24_rcccp :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sciM4;

lvl25_rcccq :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "0X"#;

lvl26_rcccr :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl25_rcccq;

lvl27_rcccs :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "0b"#;

lvl28_rccct :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl27_rcccs;

lvl29_rcccu :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: illegal char conversion"#;

lvl30_rcccv :: GHC.Show.ShowS
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl29_rcccu of sat_sciM5 {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciM5;
        };

sat_sciM6 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1114111#];

sat_sciM7 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciM6 GHC.Types.[]];

lvl31_rcccw :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sciM7;

sat_sciM8 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

sat_sciM9 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciM8 GHC.Types.[]];

lvl32_rcccx :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sciM9;

lvl33_rcccy :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "0"#;

lvl34_rcccz :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl33_rcccy;

sat_sciMa :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [10#];

sat_sciMb :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciMa GHC.Types.[]];

lvl35_rcccA :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sciMb;

lvl36_rcccB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "0x"#;

lvl37_rcccC :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl36_rcccB;

lvl38_rcccD :: GHC.Base.Maybe [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl26_rcccr];

lvl39_rcccE :: GHC.Base.Maybe [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl28_rccct];

lvl40_rcccF :: GHC.Base.Maybe [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl34_rcccz];

lvl41_rcccG :: GHC.Base.Maybe [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl37_rcccC];

Text.Printf.$wformatIntegral [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=9,
 Str=<L,1*U><L,U><L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciMc
           w1_sciMd
           ww_sciMe
           ww1_sciMf
           ww2_sciMg
           ww3_sciMh
           ww4_sciMi
           ww5_sciMj
           ww6_sciMk]
        let-no-escape {
          $w$j_sciMl [InlPrag=NOUSERINLINE[0],
                      Occ=Once*!T[8],
                      Dmd=<C(C(C(C(C(C(C(C(S)))))))),1*C1(C1(C1(C1(C1(C1(C1(C1(U))))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Prim.Char#
               -> Text.Printf.FieldFormat
               -> GHC.Show.ShowS
          [LclId[JoinId(8)],
           Arity=8,
           Str=<L,1*U><L,1*U><L,U><L,1*U><L,1*U><L,1*U><S,1*U><L,A>,
           Unf=OtherCon []] =
              sat-only [w_sciMc w1_sciMd ww1_sciMf] \r [w2_sciMm
                                                        w3_sciMn
                                                        w4_sciMo
                                                        w5_sciMp
                                                        w6_sciMq
                                                        w7_sciMr
                                                        ww7_sciMs
                                                        w8_sciMt]
                  case ww7_sciMs of ds_sciMu {
                    __DEFAULT -> Text.Printf.$werrorBadFormat ds_sciMu;
                    'X'# ->
                        let {
                          sat_sciMJ [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sciMc w1_sciMd ww1_sciMf w2_sciMm w4_sciMo w6_sciMq] \u []
                                  case
                                      GHC.Integer.Type.eqInteger# w1_sciMd Text.Printf.formatChar2
                                  of
                                  { __DEFAULT ->
                                        case w6_sciMq of {
                                          GHC.Types.False ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl24_rcccp
                                                      GHC.Base.Nothing
                                                      ww1_sciMf
                                                      w_sciMc
                                                      w1_sciMd
                                              of
                                              { (#,#) ww9_sciMy [Occ=Once] ww10_sciMz [Occ=Once] ->
                                                    let {
                                                      sat_sciMA [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [ww10_sciMz] \u []
                                                              GHC.Base.map
                                                                  GHC.Unicode.toUpper ww10_sciMz;
                                                    } in 
                                                      Text.Printf.$wadjust
                                                          w2_sciMm w4_sciMo ww9_sciMy sat_sciMA;
                                              };
                                          GHC.Types.True ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl24_rcccp
                                                      lvl38_rcccD
                                                      ww1_sciMf
                                                      w_sciMc
                                                      w1_sciMd
                                              of
                                              { (#,#) ww9_sciMC [Occ=Once] ww10_sciMD [Occ=Once] ->
                                                    let {
                                                      sat_sciME [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [ww10_sciMD] \u []
                                                              GHC.Base.map
                                                                  GHC.Unicode.toUpper ww10_sciMD;
                                                    } in 
                                                      Text.Printf.$wadjust
                                                          w2_sciMm w4_sciMo ww9_sciMC sat_sciME;
                                              };
                                        };
                                    1# ->
                                        case
                                            $wfmtu_rcccl
                                                lvl24_rcccp
                                                GHC.Base.Nothing
                                                ww1_sciMf
                                                w_sciMc
                                                w1_sciMd
                                        of
                                        { (#,#) ww9_sciMG [Occ=Once] ww10_sciMH [Occ=Once] ->
                                              let {
                                                sat_sciMI [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    [ww10_sciMH] \u []
                                                        GHC.Base.map GHC.Unicode.toUpper ww10_sciMH;
                                              } in 
                                                Text.Printf.$wadjust
                                                    w2_sciMm w4_sciMo ww9_sciMG sat_sciMI;
                                        };
                                  };
                        } in  GHC.Base.++ sat_sciMJ;
                    'b'# ->
                        let {
                          sat_sciMV [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sciMc w1_sciMd ww1_sciMf w2_sciMm w4_sciMo w6_sciMq] \u []
                                  case
                                      GHC.Integer.Type.eqInteger# w1_sciMd Text.Printf.formatChar2
                                  of
                                  { __DEFAULT ->
                                        case w6_sciMq of {
                                          GHC.Types.False ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl21_rccck
                                                      GHC.Base.Nothing
                                                      ww1_sciMf
                                                      w_sciMc
                                                      w1_sciMd
                                              of
                                              { (#,#) ww9_sciMN [Occ=Once] ww10_sciMO [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sciMm w4_sciMo ww9_sciMN ww10_sciMO;
                                              };
                                          GHC.Types.True ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl21_rccck
                                                      lvl39_rcccE
                                                      ww1_sciMf
                                                      w_sciMc
                                                      w1_sciMd
                                              of
                                              { (#,#) ww9_sciMQ [Occ=Once] ww10_sciMR [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sciMm w4_sciMo ww9_sciMQ ww10_sciMR;
                                              };
                                        };
                                    1# ->
                                        case
                                            $wfmtu_rcccl
                                                lvl21_rccck
                                                GHC.Base.Nothing
                                                ww1_sciMf
                                                w_sciMc
                                                w1_sciMd
                                        of
                                        { (#,#) ww9_sciMT [Occ=Once] ww10_sciMU [Occ=Once] ->
                                              Text.Printf.$wadjust
                                                  w2_sciMm w4_sciMo ww9_sciMT ww10_sciMU;
                                        };
                                  };
                        } in  GHC.Base.++ sat_sciMV;
                    'c'# ->
                        case
                            GHC.Integer.Type.geInteger# w1_sciMd Text.Printf.formatChar2
                        of
                        { __DEFAULT -> lvl30_rcccv;
                          1# ->
                              case GHC.Integer.Type.leInteger# w1_sciMd lvl31_rcccw of {
                                __DEFAULT -> lvl30_rcccv;
                                1# ->
                                    case w3_sciMn of {
                                      GHC.Base.Nothing ->
                                          case GHC.Base.eqString w7_sciMr GHC.Types.[] of {
                                            GHC.Types.False -> lvl30_rcccv;
                                            GHC.Types.True ->
                                                let {
                                                  sat_sciN4 [Occ=Once] :: GHC.Types.Char
                                                  [LclId] =
                                                      [w1_sciMd] \u []
                                                          case
                                                              GHC.Integer.Type.integerToInt w1_sciMd
                                                          of
                                                          wild4_sciN0
                                                          { __DEFAULT ->
                                                                case
                                                                    int2Word# [wild4_sciN0]
                                                                of
                                                                sat_sciN1
                                                                { __DEFAULT ->
                                                                      case
                                                                          leWord# [sat_sciN1
                                                                                   1114111##]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            GHC.Char.$wlvl
                                                                                wild4_sciN0;
                                                                        1# ->
                                                                            case
                                                                                chr# [wild4_sciN0]
                                                                            of
                                                                            sat_sciN3
                                                                            { __DEFAULT ->
                                                                                  GHC.Types.C# [sat_sciN3];
                                                                            };
                                                                      };
                                                                };
                                                          }; } in
                                                let {
                                                  sat_sciN5 [Occ=Once] :: [GHC.Types.Char]
                                                  [LclId] =
                                                      CCCS :! [sat_sciN4 GHC.Types.[]];
                                                } in 
                                                  Text.Printf.$w$sformatString
                                                      sat_sciN5
                                                      w2_sciMm
                                                      GHC.Base.Nothing
                                                      w4_sciMo
                                                      's'#;
                                          };
                                      GHC.Base.Just _ [Occ=Dead] -> lvl30_rcccv;
                                    };
                              };
                        };
                    'd'# ->
                        let {
                          sat_sciNa [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w1_sciMd ww1_sciMf w2_sciMm w4_sciMo w5_sciMp] \u []
                                  case $wfmti_rcccm ww1_sciMf w1_sciMd of {
                                    (#,#) ww9_sciN8 [Occ=Once] ww10_sciN9 [Occ=Once] ->
                                        Text.Printf.$wadjustSigned
                                            w2_sciMm w4_sciMo w5_sciMp ww9_sciN8 ww10_sciN9;
                                  };
                        } in  GHC.Base.++ sat_sciNa;
                    'i'# ->
                        let {
                          sat_sciNe [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w1_sciMd ww1_sciMf w2_sciMm w4_sciMo w5_sciMp] \u []
                                  case $wfmti_rcccm ww1_sciMf w1_sciMd of {
                                    (#,#) ww9_sciNc [Occ=Once] ww10_sciNd [Occ=Once] ->
                                        Text.Printf.$wadjustSigned
                                            w2_sciMm w4_sciMo w5_sciMp ww9_sciNc ww10_sciNd;
                                  };
                        } in  GHC.Base.++ sat_sciNe;
                    'o'# ->
                        let {
                          sat_sciNq [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sciMc w1_sciMd ww1_sciMf w2_sciMm w4_sciMo w6_sciMq] \u []
                                  case
                                      GHC.Integer.Type.eqInteger# w1_sciMd Text.Printf.formatChar2
                                  of
                                  { __DEFAULT ->
                                        case w6_sciMq of {
                                          GHC.Types.False ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl32_rcccx
                                                      GHC.Base.Nothing
                                                      ww1_sciMf
                                                      w_sciMc
                                                      w1_sciMd
                                              of
                                              { (#,#) ww9_sciNi [Occ=Once] ww10_sciNj [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sciMm w4_sciMo ww9_sciNi ww10_sciNj;
                                              };
                                          GHC.Types.True ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl32_rcccx
                                                      lvl40_rcccF
                                                      ww1_sciMf
                                                      w_sciMc
                                                      w1_sciMd
                                              of
                                              { (#,#) ww9_sciNl [Occ=Once] ww10_sciNm [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sciMm w4_sciMo ww9_sciNl ww10_sciNm;
                                              };
                                        };
                                    1# ->
                                        case
                                            $wfmtu_rcccl
                                                lvl32_rcccx
                                                GHC.Base.Nothing
                                                ww1_sciMf
                                                w_sciMc
                                                w1_sciMd
                                        of
                                        { (#,#) ww9_sciNo [Occ=Once] ww10_sciNp [Occ=Once] ->
                                              Text.Printf.$wadjust
                                                  w2_sciMm w4_sciMo ww9_sciNo ww10_sciNp;
                                        };
                                  };
                        } in  GHC.Base.++ sat_sciNq;
                    'u'# ->
                        let {
                          sat_sciNu [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sciMc w1_sciMd ww1_sciMf w2_sciMm w4_sciMo] \u []
                                  case
                                      $wfmtu_rcccl
                                          lvl35_rcccA GHC.Base.Nothing ww1_sciMf w_sciMc w1_sciMd
                                  of
                                  { (#,#) ww9_sciNs [Occ=Once] ww10_sciNt [Occ=Once] ->
                                        Text.Printf.$wadjust w2_sciMm w4_sciMo ww9_sciNs ww10_sciNt;
                                  };
                        } in  GHC.Base.++ sat_sciNu;
                    'x'# ->
                        let {
                          sat_sciNG [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sciMc w1_sciMd ww1_sciMf w2_sciMm w4_sciMo w6_sciMq] \u []
                                  case
                                      GHC.Integer.Type.eqInteger# w1_sciMd Text.Printf.formatChar2
                                  of
                                  { __DEFAULT ->
                                        case w6_sciMq of {
                                          GHC.Types.False ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl24_rcccp
                                                      GHC.Base.Nothing
                                                      ww1_sciMf
                                                      w_sciMc
                                                      w1_sciMd
                                              of
                                              { (#,#) ww9_sciNy [Occ=Once] ww10_sciNz [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sciMm w4_sciMo ww9_sciNy ww10_sciNz;
                                              };
                                          GHC.Types.True ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl24_rcccp
                                                      lvl41_rcccG
                                                      ww1_sciMf
                                                      w_sciMc
                                                      w1_sciMd
                                              of
                                              { (#,#) ww9_sciNB [Occ=Once] ww10_sciNC [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sciMm w4_sciMo ww9_sciNB ww10_sciNC;
                                              };
                                        };
                                    1# ->
                                        case
                                            $wfmtu_rcccl
                                                lvl24_rcccp
                                                GHC.Base.Nothing
                                                ww1_sciMf
                                                w_sciMc
                                                w1_sciMd
                                        of
                                        { (#,#) ww9_sciNE [Occ=Once] ww10_sciNF [Occ=Once] ->
                                              Text.Printf.$wadjust
                                                  w2_sciMm w4_sciMo ww9_sciNE ww10_sciNF;
                                        };
                                  };
                        } in  GHC.Base.++ sat_sciNG;
                  };
        } in 
          case ww1_sciMf of wild_sciNH {
            GHC.Base.Nothing ->
                case ww6_sciMk of ds_sciNI {
                  __DEFAULT ->
                      let {
                        sat_sciNJ [Occ=Once] :: GHC.Types.Char
                        [LclId] =
                            CCCS GHC.Types.C#! [ds_sciNI]; } in
                      let {
                        sat_sciNK [Occ=Once] :: Text.Printf.FieldFormat
                        [LclId] =
                            CCCS Text.Printf.FieldFormat! [ww_sciMe
                                                           GHC.Base.Nothing
                                                           ww2_sciMg
                                                           ww3_sciMh
                                                           ww4_sciMi
                                                           ww5_sciMj
                                                           sat_sciNJ];
                      } in 
                        $w$j_sciMl
                            ww_sciMe
                            GHC.Base.Nothing
                            ww2_sciMg
                            ww3_sciMh
                            ww4_sciMi
                            ww5_sciMj
                            ds_sciNI
                            sat_sciNK;
                  'v'# ->
                      let {
                        sat_sciNL [Occ=Once] :: Text.Printf.FieldFormat
                        [LclId] =
                            CCCS Text.Printf.FieldFormat! [ww_sciMe
                                                           GHC.Base.Nothing
                                                           ww2_sciMg
                                                           ww3_sciMh
                                                           ww4_sciMi
                                                           ww5_sciMj
                                                           lvl23_rccco];
                      } in 
                        $w$j_sciMl
                            ww_sciMe
                            GHC.Base.Nothing
                            ww2_sciMg
                            ww3_sciMh
                            ww4_sciMi
                            ww5_sciMj
                            'd'#
                            sat_sciNL;
                };
            GHC.Base.Just _ [Occ=Dead] ->
                case ww2_sciMg of wild1_sciNN {
                  GHC.Base.Nothing ->
                      case ww6_sciMk of ds1_sciNO {
                        __DEFAULT ->
                            let {
                              sat_sciNP [Occ=Once] :: GHC.Types.Char
                              [LclId] =
                                  CCCS GHC.Types.C#! [ds1_sciNO]; } in
                            let {
                              sat_sciNQ [Occ=Once] :: Text.Printf.FieldFormat
                              [LclId] =
                                  CCCS Text.Printf.FieldFormat! [ww_sciMe
                                                                 wild_sciNH
                                                                 GHC.Base.Nothing
                                                                 ww3_sciMh
                                                                 ww4_sciMi
                                                                 ww5_sciMj
                                                                 sat_sciNP];
                            } in 
                              $w$j_sciMl
                                  ww_sciMe
                                  wild_sciNH
                                  GHC.Base.Nothing
                                  ww3_sciMh
                                  ww4_sciMi
                                  ww5_sciMj
                                  ds1_sciNO
                                  sat_sciNQ;
                        'v'# ->
                            let {
                              sat_sciNR [Occ=Once] :: Text.Printf.FieldFormat
                              [LclId] =
                                  CCCS Text.Printf.FieldFormat! [ww_sciMe
                                                                 wild_sciNH
                                                                 GHC.Base.Nothing
                                                                 ww3_sciMh
                                                                 ww4_sciMi
                                                                 ww5_sciMj
                                                                 lvl23_rccco];
                            } in 
                              $w$j_sciMl
                                  ww_sciMe
                                  wild_sciNH
                                  GHC.Base.Nothing
                                  ww3_sciMh
                                  ww4_sciMi
                                  ww5_sciMj
                                  'd'#
                                  sat_sciNR;
                      };
                  GHC.Base.Just ds1_sciNS [Occ=Once!] ->
                      case ds1_sciNS of {
                        Text.Printf.LeftAdjust ->
                            case ww6_sciMk of ds2_sciNU {
                              __DEFAULT ->
                                  let {
                                    sat_sciNV [Occ=Once] :: GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.Types.C#! [ds2_sciNU]; } in
                                  let {
                                    sat_sciNW [Occ=Once] :: Text.Printf.FieldFormat
                                    [LclId] =
                                        CCCS Text.Printf.FieldFormat! [ww_sciMe
                                                                       wild_sciNH
                                                                       wild1_sciNN
                                                                       ww3_sciMh
                                                                       ww4_sciMi
                                                                       ww5_sciMj
                                                                       sat_sciNV];
                                  } in 
                                    $w$j_sciMl
                                        ww_sciMe
                                        wild_sciNH
                                        wild1_sciNN
                                        ww3_sciMh
                                        ww4_sciMi
                                        ww5_sciMj
                                        ds2_sciNU
                                        sat_sciNW;
                              'v'# ->
                                  let {
                                    sat_sciNX [Occ=Once] :: Text.Printf.FieldFormat
                                    [LclId] =
                                        CCCS Text.Printf.FieldFormat! [ww_sciMe
                                                                       wild_sciNH
                                                                       wild1_sciNN
                                                                       ww3_sciMh
                                                                       ww4_sciMi
                                                                       ww5_sciMj
                                                                       lvl23_rccco];
                                  } in 
                                    $w$j_sciMl
                                        ww_sciMe
                                        wild_sciNH
                                        wild1_sciNN
                                        ww3_sciMh
                                        ww4_sciMi
                                        ww5_sciMj
                                        'd'#
                                        sat_sciNX;
                            };
                        Text.Printf.ZeroPad ->
                            case ww6_sciMk of ds2_sciNY {
                              __DEFAULT ->
                                  let {
                                    sat_sciNZ [Occ=Once] :: GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.Types.C#! [ds2_sciNY]; } in
                                  let {
                                    sat_sciO0 [Occ=Once] :: Text.Printf.FieldFormat
                                    [LclId] =
                                        CCCS Text.Printf.FieldFormat! [ww_sciMe
                                                                       wild_sciNH
                                                                       GHC.Base.Nothing
                                                                       ww3_sciMh
                                                                       ww4_sciMi
                                                                       ww5_sciMj
                                                                       sat_sciNZ];
                                  } in 
                                    $w$j_sciMl
                                        ww_sciMe
                                        wild_sciNH
                                        GHC.Base.Nothing
                                        ww3_sciMh
                                        ww4_sciMi
                                        ww5_sciMj
                                        ds2_sciNY
                                        sat_sciO0;
                              'v'# ->
                                  let {
                                    sat_sciO1 [Occ=Once] :: Text.Printf.FieldFormat
                                    [LclId] =
                                        CCCS Text.Printf.FieldFormat! [ww_sciMe
                                                                       wild_sciNH
                                                                       GHC.Base.Nothing
                                                                       ww3_sciMh
                                                                       ww4_sciMi
                                                                       ww5_sciMj
                                                                       lvl23_rccco];
                                  } in 
                                    $w$j_sciMl
                                        ww_sciMe
                                        wild_sciNH
                                        GHC.Base.Nothing
                                        ww3_sciMh
                                        ww4_sciMi
                                        ww5_sciMj
                                        'd'#
                                        sat_sciO1;
                            };
                      };
                };
          };

Text.Printf.formatIntegral [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> Text.Printf.FieldFormatter
[GblId,
 Arity=3,
 Str=<L,1*U><L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,1*U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciO2 w1_sciO3 w2_sciO4]
        case w2_sciO4 of {
          Text.Printf.FieldFormat ww1_sciO6 [Occ=Once]
                                  ww2_sciO7 [Occ=Once]
                                  ww3_sciO8 [Occ=Once]
                                  ww4_sciO9 [Occ=Once]
                                  ww5_sciOa [Occ=Once]
                                  ww6_sciOb [Occ=Once]
                                  ww7_sciOc [Occ=Once!] ->
              case ww7_sciOc of {
                GHC.Types.C# ww9_sciOe [Occ=Once] ->
                    Text.Printf.$wformatIntegral
                        w_sciO2
                        w1_sciO3
                        ww1_sciO6
                        ww2_sciO7
                        ww3_sciO8
                        ww4_sciO9
                        ww5_sciOa
                        ww6_sciOb
                        ww9_sciOe;
              };
        };

Text.Printf.formatChar1 :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.formatChar2];

Text.Printf.$wformatChar [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciOf
           ww_sciOg
           ww1_sciOh
           ww2_sciOi
           ww3_sciOj
           ww4_sciOk
           ww5_sciOl
           ww6_sciOm]
        case ww6_sciOm of ds_sciOn {
          __DEFAULT ->
              let {
                sat_sciOr [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [w_sciOf] \u []
                        case w_sciOf of {
                          GHC.Types.C# c#_sciOp [Occ=Once] ->
                              case ord# [c#_sciOp] of sat_sciOq {
                                __DEFAULT -> GHC.Integer.Type.smallInteger sat_sciOq;
                              };
                        };
              } in 
                Text.Printf.$wformatIntegral
                    Text.Printf.formatChar1
                    sat_sciOr
                    ww_sciOg
                    ww1_sciOh
                    ww2_sciOi
                    ww3_sciOj
                    ww4_sciOk
                    ww5_sciOl
                    ds_sciOn;
          'v'# ->
              let {
                sat_sciOv [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [w_sciOf] \u []
                        case w_sciOf of {
                          GHC.Types.C# c#_sciOt [Occ=Once] ->
                              case ord# [c#_sciOt] of sat_sciOu {
                                __DEFAULT -> GHC.Integer.Type.smallInteger sat_sciOu;
                              };
                        };
              } in 
                Text.Printf.$wformatIntegral
                    Text.Printf.formatChar1
                    sat_sciOv
                    ww_sciOg
                    ww1_sciOh
                    ww2_sciOi
                    ww3_sciOj
                    ww4_sciOk
                    ww5_sciOl
                    'c'#;
        };

Text.Printf.formatChar [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,1*U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciOw w1_sciOx]
        case w1_sciOx of {
          Text.Printf.FieldFormat ww1_sciOz [Occ=Once]
                                  ww2_sciOA [Occ=Once]
                                  ww3_sciOB [Occ=Once]
                                  ww4_sciOC [Occ=Once]
                                  ww5_sciOD [Occ=Once]
                                  ww6_sciOE [Occ=Once]
                                  ww7_sciOF [Occ=Once!] ->
              case ww7_sciOF of {
                GHC.Types.C# ww9_sciOH [Occ=Once] ->
                    Text.Printf.$wformatChar
                        w_sciOw
                        ww1_sciOz
                        ww2_sciOA
                        ww3_sciOB
                        ww4_sciOC
                        ww5_sciOD
                        ww6_sciOE
                        ww9_sciOH;
              };
        };

Text.Printf.$fPrintfArgChar [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Char
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.formatChar
                                            Text.Printf.$fPrintfArgChar_$cparseFormat];

Text.Printf.$fPrintfArgWord1 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['u'#];

Text.Printf.$w$sformatInt3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word64
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciOI
           ww_sciOJ
           ww1_sciOK
           ww2_sciOL
           ww3_sciOM
           ww4_sciON
           ww5_sciOO
           ww6_sciOP]
        let-no-escape {
          $j_sciOQ [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_sciOI ww5_sciOO] \r [ww7_sciOR
                                               ww8_sciOS
                                               ww9_sciOT
                                               ww10_sciOU
                                               ww11_sciOV
                                               ww12_sciOW
                                               ww13_sciOX]
                  case ww13_sciOX of {
                    GHC.Types.C# ww15_sciOZ [Occ=Once] ->
                        let {
                          sat_sciP6 [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_sciOI] \u [] GHC.Word.$fIntegralWord64_$ctoInteger w_sciOI; } in
                        let {
                          sat_sciP5 [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_sciOO] \s []
                                  case ww5_sciOO of wild_sciP0 {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_sciP0
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_sciP3
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_sciP3;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_sciP5
                              sat_sciP6
                              ww7_sciOR
                              ww8_sciOS
                              ww9_sciOT
                              ww10_sciOU
                              ww11_sciOV
                              ww12_sciOW
                              ww15_sciOZ;
                  };
        } in 
          case ww6_sciOP of ds_sciP7 {
            __DEFAULT ->
                let {
                  sat_sciP8 [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_sciP7];
                } in 
                  $j_sciOQ
                      ww_sciOJ
                      ww1_sciOK
                      ww2_sciOL
                      ww3_sciOM
                      ww4_sciON
                      ww5_sciOO
                      sat_sciP8;
            'v'# ->
                $j_sciOQ
                    ww_sciOJ
                    ww1_sciOK
                    ww2_sciOL
                    ww3_sciOM
                    ww4_sciON
                    ww5_sciOO
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord64_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word64 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciP9 w1_sciPa]
        case w1_sciPa of {
          Text.Printf.FieldFormat ww1_sciPc [Occ=Once]
                                  ww2_sciPd [Occ=Once]
                                  ww3_sciPe [Occ=Once]
                                  ww4_sciPf [Occ=Once]
                                  ww5_sciPg [Occ=Once]
                                  ww6_sciPh [Occ=Once]
                                  ww7_sciPi [Occ=Once!] ->
              case ww7_sciPi of {
                GHC.Types.C# ww9_sciPk [Occ=Once] ->
                    Text.Printf.$w$sformatInt3
                        w_sciP9
                        ww1_sciPc
                        ww2_sciPd
                        ww3_sciPe
                        ww4_sciPf
                        ww5_sciPg
                        ww6_sciPh
                        ww9_sciPk;
              };
        };

Text.Printf.$w$sformatInt2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciPl
           ww_sciPm
           ww1_sciPn
           ww2_sciPo
           ww3_sciPp
           ww4_sciPq
           ww5_sciPr
           ww6_sciPs]
        let-no-escape {
          $j_sciPt [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_sciPl ww5_sciPr] \r [ww7_sciPu
                                               ww8_sciPv
                                               ww9_sciPw
                                               ww10_sciPx
                                               ww11_sciPy
                                               ww12_sciPz
                                               ww13_sciPA]
                  case ww13_sciPA of {
                    GHC.Types.C# ww15_sciPC [Occ=Once] ->
                        let {
                          sat_sciPJ [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_sciPl] \u [] GHC.Word.$ctoInteger2 w_sciPl; } in
                        let {
                          sat_sciPI [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_sciPr] \s []
                                  case ww5_sciPr of wild_sciPD {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_sciPD
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_sciPG
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_sciPG;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_sciPI
                              sat_sciPJ
                              ww7_sciPu
                              ww8_sciPv
                              ww9_sciPw
                              ww10_sciPx
                              ww11_sciPy
                              ww12_sciPz
                              ww15_sciPC;
                  };
        } in 
          case ww6_sciPs of ds_sciPK {
            __DEFAULT ->
                let {
                  sat_sciPL [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_sciPK];
                } in 
                  $j_sciPt
                      ww_sciPm
                      ww1_sciPn
                      ww2_sciPo
                      ww3_sciPp
                      ww4_sciPq
                      ww5_sciPr
                      sat_sciPL;
            'v'# ->
                $j_sciPt
                    ww_sciPm
                    ww1_sciPn
                    ww2_sciPo
                    ww3_sciPp
                    ww4_sciPq
                    ww5_sciPr
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord32_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciPM w1_sciPN]
        case w1_sciPN of {
          Text.Printf.FieldFormat ww1_sciPP [Occ=Once]
                                  ww2_sciPQ [Occ=Once]
                                  ww3_sciPR [Occ=Once]
                                  ww4_sciPS [Occ=Once]
                                  ww5_sciPT [Occ=Once]
                                  ww6_sciPU [Occ=Once]
                                  ww7_sciPV [Occ=Once!] ->
              case ww7_sciPV of {
                GHC.Types.C# ww9_sciPX [Occ=Once] ->
                    Text.Printf.$w$sformatInt2
                        w_sciPM
                        ww1_sciPP
                        ww2_sciPQ
                        ww3_sciPR
                        ww4_sciPS
                        ww5_sciPT
                        ww6_sciPU
                        ww9_sciPX;
              };
        };

Text.Printf.$w$sformatInt1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciPY
           ww_sciPZ
           ww1_sciQ0
           ww2_sciQ1
           ww3_sciQ2
           ww4_sciQ3
           ww5_sciQ4
           ww6_sciQ5]
        let-no-escape {
          $j_sciQ6 [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_sciPY ww5_sciQ4] \r [ww7_sciQ7
                                               ww8_sciQ8
                                               ww9_sciQ9
                                               ww10_sciQa
                                               ww11_sciQb
                                               ww12_sciQc
                                               ww13_sciQd]
                  case ww13_sciQd of {
                    GHC.Types.C# ww15_sciQf [Occ=Once] ->
                        let {
                          sat_sciQm [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_sciPY] \u [] GHC.Word.$ctoInteger1 w_sciPY; } in
                        let {
                          sat_sciQl [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_sciQ4] \s []
                                  case ww5_sciQ4 of wild_sciQg {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_sciQg
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_sciQj
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_sciQj;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_sciQl
                              sat_sciQm
                              ww7_sciQ7
                              ww8_sciQ8
                              ww9_sciQ9
                              ww10_sciQa
                              ww11_sciQb
                              ww12_sciQc
                              ww15_sciQf;
                  };
        } in 
          case ww6_sciQ5 of ds_sciQn {
            __DEFAULT ->
                let {
                  sat_sciQo [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_sciQn];
                } in 
                  $j_sciQ6
                      ww_sciPZ
                      ww1_sciQ0
                      ww2_sciQ1
                      ww3_sciQ2
                      ww4_sciQ3
                      ww5_sciQ4
                      sat_sciQo;
            'v'# ->
                $j_sciQ6
                    ww_sciPZ
                    ww1_sciQ0
                    ww2_sciQ1
                    ww3_sciQ2
                    ww4_sciQ3
                    ww5_sciQ4
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord16_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciQp w1_sciQq]
        case w1_sciQq of {
          Text.Printf.FieldFormat ww1_sciQs [Occ=Once]
                                  ww2_sciQt [Occ=Once]
                                  ww3_sciQu [Occ=Once]
                                  ww4_sciQv [Occ=Once]
                                  ww5_sciQw [Occ=Once]
                                  ww6_sciQx [Occ=Once]
                                  ww7_sciQy [Occ=Once!] ->
              case ww7_sciQy of {
                GHC.Types.C# ww9_sciQA [Occ=Once] ->
                    Text.Printf.$w$sformatInt1
                        w_sciQp
                        ww1_sciQs
                        ww2_sciQt
                        ww3_sciQu
                        ww4_sciQv
                        ww5_sciQw
                        ww6_sciQx
                        ww9_sciQA;
              };
        };

Text.Printf.$w$sformatInt4 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciQB
           ww_sciQC
           ww1_sciQD
           ww2_sciQE
           ww3_sciQF
           ww4_sciQG
           ww5_sciQH
           ww6_sciQI]
        let-no-escape {
          $j_sciQJ [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_sciQB ww5_sciQH] \r [ww7_sciQK
                                               ww8_sciQL
                                               ww9_sciQM
                                               ww10_sciQN
                                               ww11_sciQO
                                               ww12_sciQP
                                               ww13_sciQQ]
                  case ww13_sciQQ of {
                    GHC.Types.C# ww15_sciQS [Occ=Once] ->
                        let {
                          sat_sciQZ [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_sciQB] \u [] GHC.Word.$ctoInteger w_sciQB; } in
                        let {
                          sat_sciQY [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_sciQH] \s []
                                  case ww5_sciQH of wild_sciQT {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_sciQT
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_sciQW
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_sciQW;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_sciQY
                              sat_sciQZ
                              ww7_sciQK
                              ww8_sciQL
                              ww9_sciQM
                              ww10_sciQN
                              ww11_sciQO
                              ww12_sciQP
                              ww15_sciQS;
                  };
        } in 
          case ww6_sciQI of ds_sciR0 {
            __DEFAULT ->
                let {
                  sat_sciR1 [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_sciR0];
                } in 
                  $j_sciQJ
                      ww_sciQC
                      ww1_sciQD
                      ww2_sciQE
                      ww3_sciQF
                      ww4_sciQG
                      ww5_sciQH
                      sat_sciR1;
            'v'# ->
                $j_sciQJ
                    ww_sciQC
                    ww1_sciQD
                    ww2_sciQE
                    ww3_sciQF
                    ww4_sciQG
                    ww5_sciQH
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord8_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciR2 w1_sciR3]
        case w1_sciR3 of {
          Text.Printf.FieldFormat ww1_sciR5 [Occ=Once]
                                  ww2_sciR6 [Occ=Once]
                                  ww3_sciR7 [Occ=Once]
                                  ww4_sciR8 [Occ=Once]
                                  ww5_sciR9 [Occ=Once]
                                  ww6_sciRa [Occ=Once]
                                  ww7_sciRb [Occ=Once!] ->
              case ww7_sciRb of {
                GHC.Types.C# ww9_sciRd [Occ=Once] ->
                    Text.Printf.$w$sformatInt4
                        w_sciR2
                        ww1_sciR5
                        ww2_sciR6
                        ww3_sciR7
                        ww4_sciR8
                        ww5_sciR9
                        ww6_sciRa
                        ww9_sciRd;
              };
        };

Text.Printf.$w$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Word
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(1*U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciRe
           ww_sciRf
           ww1_sciRg
           ww2_sciRh
           ww3_sciRi
           ww4_sciRj
           ww5_sciRk
           ww6_sciRl]
        let-no-escape {
          $j_sciRm [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_sciRe ww5_sciRk] \r [ww7_sciRn
                                               ww8_sciRo
                                               ww9_sciRp
                                               ww10_sciRq
                                               ww11_sciRr
                                               ww12_sciRs
                                               ww13_sciRt]
                  case ww13_sciRt of {
                    GHC.Types.C# ww15_sciRv [Occ=Once] ->
                        let {
                          sat_sciRC [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_sciRe] \u [] GHC.Real.$fIntegralWord_$ctoInteger w_sciRe; } in
                        let {
                          sat_sciRB [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_sciRk] \s []
                                  case ww5_sciRk of wild_sciRw {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_sciRw
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_sciRz
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_sciRz;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_sciRB
                              sat_sciRC
                              ww7_sciRn
                              ww8_sciRo
                              ww9_sciRp
                              ww10_sciRq
                              ww11_sciRr
                              ww12_sciRs
                              ww15_sciRv;
                  };
        } in 
          case ww6_sciRl of ds_sciRD {
            __DEFAULT ->
                let {
                  sat_sciRE [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_sciRD];
                } in 
                  $j_sciRm
                      ww_sciRf
                      ww1_sciRg
                      ww2_sciRh
                      ww3_sciRi
                      ww4_sciRj
                      ww5_sciRk
                      sat_sciRE;
            'v'# ->
                $j_sciRm
                    ww_sciRf
                    ww1_sciRg
                    ww2_sciRh
                    ww3_sciRi
                    ww4_sciRj
                    ww5_sciRk
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Word -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(1*U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciRF w1_sciRG]
        case w1_sciRG of {
          Text.Printf.FieldFormat ww1_sciRI [Occ=Once]
                                  ww2_sciRJ [Occ=Once]
                                  ww3_sciRK [Occ=Once]
                                  ww4_sciRL [Occ=Once]
                                  ww5_sciRM [Occ=Once]
                                  ww6_sciRN [Occ=Once]
                                  ww7_sciRO [Occ=Once!] ->
              case ww7_sciRO of {
                GHC.Types.C# ww9_sciRQ [Occ=Once] ->
                    Text.Printf.$w$sformatInt
                        w_sciRF
                        ww1_sciRI
                        ww2_sciRJ
                        ww3_sciRK
                        ww4_sciRL
                        ww5_sciRM
                        ww6_sciRN
                        ww9_sciRQ;
              };
        };

Text.Printf.$fPrintfArgInt1
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.$fPrintfArgChar7];

Text.Printf.$fPrintfArgInt64_$sformatInt
  :: GHC.Int.Int64 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sciRR ufmt_sciRS]
        case ufmt_sciRS of {
          Text.Printf.FieldFormat ww1_sciRU [Occ=Once]
                                  ww2_sciRV [Occ=Once]
                                  ww3_sciRW [Occ=Once]
                                  ww4_sciRX [Occ=Once]
                                  ww5_sciRY [Occ=Once]
                                  ww6_sciRZ
                                  ww7_sciS0 [Occ=Once!] ->
              case ww7_sciS0 of {
                GHC.Types.C# ww9_sciS2 [Occ=Once] ->
                    let {
                      sat_sciS9 [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sciRR] \u [] GHC.Int.$fIntegralInt64_$ctoInteger x_sciRR; } in
                    let {
                      sat_sciS8 [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sciRZ] \s []
                              case ww6_sciRZ of wild_sciS3 {
                                [] -> Text.Printf.$fPrintfArgInt1;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sciS3
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sciS6
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sciS6;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sciS8
                          sat_sciS9
                          ww1_sciRU
                          ww2_sciRV
                          ww3_sciRW
                          ww4_sciRX
                          ww5_sciRY
                          ww6_sciRZ
                          ww9_sciS2;
              };
        };

Text.Printf.$fPrintfArgInt4
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.$fPrintfArgChar14];

Text.Printf.$fPrintfArgInt32_$sformatInt
  :: GHC.Int.Int32 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sciSa ufmt_sciSb]
        case ufmt_sciSb of {
          Text.Printf.FieldFormat ww1_sciSd [Occ=Once]
                                  ww2_sciSe [Occ=Once]
                                  ww3_sciSf [Occ=Once]
                                  ww4_sciSg [Occ=Once]
                                  ww5_sciSh [Occ=Once]
                                  ww6_sciSi
                                  ww7_sciSj [Occ=Once!] ->
              case ww7_sciSj of {
                GHC.Types.C# ww9_sciSl [Occ=Once] ->
                    let {
                      sat_sciSs [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sciSa] \u [] GHC.Int.$fIntegralInt32_$ctoInteger x_sciSa; } in
                    let {
                      sat_sciSr [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sciSi] \s []
                              case ww6_sciSi of wild_sciSm {
                                [] -> Text.Printf.$fPrintfArgInt4;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sciSm
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sciSp
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sciSp;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sciSr
                          sat_sciSs
                          ww1_sciSd
                          ww2_sciSe
                          ww3_sciSf
                          ww4_sciSg
                          ww5_sciSh
                          ww6_sciSi
                          ww9_sciSl;
              };
        };

Text.Printf.$fPrintfArgInt3
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.$fPrintfArgChar18];

Text.Printf.$fPrintfArgInt16_$sformatInt
  :: GHC.Int.Int16 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sciSt ufmt_sciSu]
        case ufmt_sciSu of {
          Text.Printf.FieldFormat ww1_sciSw [Occ=Once]
                                  ww2_sciSx [Occ=Once]
                                  ww3_sciSy [Occ=Once]
                                  ww4_sciSz [Occ=Once]
                                  ww5_sciSA [Occ=Once]
                                  ww6_sciSB
                                  ww7_sciSC [Occ=Once!] ->
              case ww7_sciSC of {
                GHC.Types.C# ww9_sciSE [Occ=Once] ->
                    let {
                      sat_sciSL [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sciSt] \u [] GHC.Int.$fIntegralInt16_$ctoInteger x_sciSt; } in
                    let {
                      sat_sciSK [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sciSB] \s []
                              case ww6_sciSB of wild_sciSF {
                                [] -> Text.Printf.$fPrintfArgInt3;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sciSF
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sciSI
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sciSI;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sciSK
                          sat_sciSL
                          ww1_sciSw
                          ww2_sciSx
                          ww3_sciSy
                          ww4_sciSz
                          ww5_sciSA
                          ww6_sciSB
                          ww9_sciSE;
              };
        };

Text.Printf.$fPrintfArgInt5
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.$fPrintfArgChar22];

Text.Printf.$fPrintfArgInt8_$sformatInt
  :: GHC.Int.Int8 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sciSM ufmt_sciSN]
        case ufmt_sciSN of {
          Text.Printf.FieldFormat ww1_sciSP [Occ=Once]
                                  ww2_sciSQ [Occ=Once]
                                  ww3_sciSR [Occ=Once]
                                  ww4_sciSS [Occ=Once]
                                  ww5_sciST [Occ=Once]
                                  ww6_sciSU
                                  ww7_sciSV [Occ=Once!] ->
              case ww7_sciSV of {
                GHC.Types.C# ww9_sciSX [Occ=Once] ->
                    let {
                      sat_sciT4 [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sciSM] \u [] GHC.Int.$fIntegralInt8_$ctoInteger x_sciSM; } in
                    let {
                      sat_sciT3 [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sciSU] \s []
                              case ww6_sciSU of wild_sciSY {
                                [] -> Text.Printf.$fPrintfArgInt5;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sciSY
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sciT1
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sciT1;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sciT3
                          sat_sciT4
                          ww1_sciSP
                          ww2_sciSQ
                          ww3_sciSR
                          ww4_sciSS
                          ww5_sciST
                          ww6_sciSU
                          ww9_sciSX;
              };
        };

Text.Printf.$fPrintfArgInt_$sformatInt
  :: GHC.Types.Int -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sciT5 ufmt_sciT6]
        case ufmt_sciT6 of {
          Text.Printf.FieldFormat ww1_sciT8 [Occ=Once]
                                  ww2_sciT9 [Occ=Once]
                                  ww3_sciTa [Occ=Once]
                                  ww4_sciTb [Occ=Once]
                                  ww5_sciTc [Occ=Once]
                                  ww6_sciTd
                                  ww7_sciTe [Occ=Once!] ->
              case ww7_sciTe of {
                GHC.Types.C# ww9_sciTg [Occ=Once] ->
                    let {
                      sat_sciTn [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sciT5] \u [] GHC.Real.$fIntegralInt_$ctoInteger x_sciT5; } in
                    let {
                      sat_sciTm [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sciTd] \s []
                              case ww6_sciTd of wild_sciTh {
                                [] -> Text.Printf.$fPrintfArgInt1;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sciTh
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sciTk
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sciTk;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sciTm
                          sat_sciTn
                          ww1_sciT8
                          ww2_sciT9
                          ww3_sciTa
                          ww4_sciTb
                          ww5_sciTc
                          ww6_sciTd
                          ww9_sciTg;
              };
        };

Text.Printf.$wformatInt [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Real.Integral a, GHC.Enum.Bounded a) =>
     a
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=10,
 Str=<S(LLLLLLLLC(S)),U(A,A,A,A,A,A,A,A,C(U))><L,1*U(1*U,A)><L,U><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciTo
           w1_sciTp
           w2_sciTq
           ww_sciTr
           ww1_sciTs
           ww2_sciTt
           ww3_sciTu
           ww4_sciTv
           ww5_sciTw
           ww6_sciTx]
        let {
          sat_sciTz [Occ=Once] :: a_scbdf
          [LclId] =
              [w1_sciTp] \u [] GHC.Enum.minBound w1_sciTp;
        } in 
          case GHC.Real.toInteger w_sciTo sat_sciTz of lb_sciTy [Dmd=<S,U>] {
            __DEFAULT ->
                let-no-escape {
                  $j_sciTA [Occ=Once*!T[7],
                            Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
                    :: GHC.Base.Maybe GHC.Types.Int
                       -> GHC.Base.Maybe GHC.Types.Int
                       -> GHC.Base.Maybe Text.Printf.FormatAdjustment
                       -> GHC.Base.Maybe Text.Printf.FormatSign
                       -> GHC.Types.Bool
                       -> GHC.Base.String
                       -> GHC.Types.Char
                       -> GHC.Show.ShowS
                  [LclId[JoinId(7)],
                   Arity=7,
                   Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
                   Unf=OtherCon []] =
                      sat-only [w_sciTo w2_sciTq ww5_sciTw lb_sciTy] \r [ww7_sciTB
                                                                         ww8_sciTC
                                                                         ww9_sciTD
                                                                         ww10_sciTE
                                                                         ww11_sciTF
                                                                         ww12_sciTG
                                                                         ww13_sciTH]
                          case ww13_sciTH of {
                            GHC.Types.C# ww15_sciTJ [Occ=Once] ->
                                let {
                                  sat_sciTQ [Occ=Once] :: GHC.Integer.Type.Integer
                                  [LclId] =
                                      [w_sciTo w2_sciTq] \u []
                                          GHC.Real.toInteger w_sciTo w2_sciTq; } in
                                let {
                                  sat_sciTP [Occ=Once, Dmd=<L,1*U>]
                                    :: GHC.Base.Maybe GHC.Integer.Type.Integer
                                  [LclId] =
                                      [ww5_sciTw lb_sciTy] \s []
                                          case ww5_sciTw of wild_sciTK {
                                            [] -> GHC.Base.Just [lb_sciTy];
                                            : _ [Occ=Dead] _ [Occ=Dead] ->
                                                case
                                                    GHC.List.lookup
                                                        GHC.Classes.$fEq[]_$s$fEq[]1
                                                        wild_sciTK
                                                        Text.Printf.intModifierMap
                                                of
                                                wild1_sciTN
                                                { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                                  GHC.Base.Just _ [Occ=Dead] -> wild1_sciTN;
                                                };
                                          };
                                } in 
                                  Text.Printf.$wformatIntegral
                                      sat_sciTP
                                      sat_sciTQ
                                      ww7_sciTB
                                      ww8_sciTC
                                      ww9_sciTD
                                      ww10_sciTE
                                      ww11_sciTF
                                      ww12_sciTG
                                      ww15_sciTJ;
                          };
                } in 
                  case
                      GHC.Integer.Type.eqInteger# lb_sciTy Text.Printf.formatChar2
                  of
                  { __DEFAULT ->
                        let {
                          sat_sciTS [Occ=Once] :: GHC.Types.Char
                          [LclId] =
                              CCCS GHC.Types.C#! [ww6_sciTx];
                        } in 
                          $j_sciTA
                              ww_sciTr
                              ww1_sciTs
                              ww2_sciTt
                              ww3_sciTu
                              ww4_sciTv
                              ww5_sciTw
                              sat_sciTS;
                    1# ->
                        case ww6_sciTx of ds_sciTT {
                          __DEFAULT ->
                              let {
                                sat_sciTU [Occ=Once] :: GHC.Types.Char
                                [LclId] =
                                    CCCS GHC.Types.C#! [ds_sciTT];
                              } in 
                                $j_sciTA
                                    ww_sciTr
                                    ww1_sciTs
                                    ww2_sciTt
                                    ww3_sciTu
                                    ww4_sciTv
                                    ww5_sciTw
                                    sat_sciTU;
                          'v'# ->
                              $j_sciTA
                                  ww_sciTr
                                  ww1_sciTs
                                  ww2_sciTt
                                  ww3_sciTu
                                  ww4_sciTv
                                  ww5_sciTw
                                  Text.Printf.$fPrintfArgWord1;
                        };
                  };
          };

Text.Printf.formatInt [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Real.Integral a, GHC.Enum.Bounded a) =>
     a -> Text.Printf.FieldFormatter
[GblId,
 Arity=4,
 Str=<S(LLLLLLLLC(S)),U(A,A,A,A,A,A,A,A,C(U))><L,1*U(1*U,A)><L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciTV w1_sciTW w2_sciTX w3_sciTY]
        case w3_sciTY of {
          Text.Printf.FieldFormat ww1_sciU0 [Occ=Once]
                                  ww2_sciU1 [Occ=Once]
                                  ww3_sciU2 [Occ=Once]
                                  ww4_sciU3 [Occ=Once]
                                  ww5_sciU4 [Occ=Once]
                                  ww6_sciU5 [Occ=Once]
                                  ww7_sciU6 [Occ=Once!] ->
              case ww7_sciU6 of {
                GHC.Types.C# ww9_sciU8 [Occ=Once] ->
                    Text.Printf.$wformatInt
                        w_sciTV
                        w1_sciTW
                        w2_sciTX
                        ww1_sciU0
                        ww2_sciU1
                        ww3_sciU2
                        ww4_sciU3
                        ww5_sciU4
                        ww6_sciU5
                        ww9_sciU8;
              };
        };

Text.Printf.$fPrintfArgWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord64_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord32_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord16_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord8_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgWord [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Word
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt64_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt32_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt16_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt8_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Int
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.formatInteger
  :: GHC.Integer.Type.Integer -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sciU9 ufmt_sciUa]
        case ufmt_sciUa of {
          Text.Printf.FieldFormat ww1_sciUc [Occ=Once]
                                  ww2_sciUd [Occ=Once]
                                  ww3_sciUe [Occ=Once]
                                  ww4_sciUf [Occ=Once]
                                  ww5_sciUg [Occ=Once]
                                  ww6_sciUh
                                  ww7_sciUi [Occ=Once!] ->
              case ww7_sciUi of {
                GHC.Types.C# ww9_sciUk [Occ=Once] ->
                    let {
                      sat_sciUq [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sciUh] \s []
                              case ww6_sciUh of wild_sciUl {
                                [] -> GHC.Base.Nothing [];
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sciUl
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sciUo
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sciUo;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sciUq
                          x_sciU9
                          ww1_sciUc
                          ww2_sciUd
                          ww3_sciUe
                          ww4_sciUf
                          ww5_sciUg
                          ww6_sciUh
                          ww9_sciUk;
              };
        };

Text.Printf.$fPrintfArgNatural_$cformatArg
  :: GHC.Natural.Natural -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sciUr ufmt_sciUs]
        case ufmt_sciUs of {
          Text.Printf.FieldFormat ww1_sciUu [Occ=Once]
                                  ww2_sciUv [Occ=Once]
                                  ww3_sciUw [Occ=Once]
                                  ww4_sciUx [Occ=Once]
                                  ww5_sciUy [Occ=Once]
                                  ww6_sciUz
                                  ww7_sciUA [Occ=Once!] ->
              case ww7_sciUA of {
                GHC.Types.C# ww9_sciUC [Occ=Once] ->
                    let {
                      sat_sciUI [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sciUz] \s []
                              case ww6_sciUz of wild_sciUD {
                                [] -> GHC.Base.Nothing [];
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sciUD
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sciUG
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sciUG;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sciUI
                          x_sciUr
                          ww1_sciUu
                          ww2_sciUv
                          ww3_sciUw
                          ww4_sciUx
                          ww5_sciUy
                          ww6_sciUz
                          ww9_sciUC;
              };
        };

Text.Printf.$fPrintfArgNatural [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Natural.Natural
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgNatural_$cformatArg
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Integer.Type.Integer
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.formatInteger
                                            Text.Printf.parseIntFormat];

lvl42_rcccH :: Text.ParserCombinators.ReadP.P GHC.Types.Int
[GblId] =
    [] \u []
        GHC.Read.$fReadInt_$sreadNumber
            GHC.Read.$fReadInt2
            Text.ParserCombinators.ReadPrec.minPrec
            Text.Read.readEither7;

lvl43_rcccI :: Text.Printf.FieldFormat
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.FieldFormat! [GHC.Base.Nothing
                                            GHC.Base.Nothing
                                            GHC.Base.Nothing
                                            GHC.Base.Nothing
                                            GHC.Types.False
                                            GHC.Types.[]
                                            lvl23_rccco];

lvl44_rcccJ :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.errorWithoutStackTrace Text.Read.readEither5;

lvl45_rcccK :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.errorWithoutStackTrace Text.Read.readEither2;

$wgetStar_rcccL
  :: [Text.Printf.UPrintf]
     -> (# [Text.Printf.UPrintf], GHC.Types.Int #)
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [w_sciUJ]
        case w_sciUJ of {
          [] -> Text.Printf.errorMissingArgument;
          : ds_sciUM [Occ=Once!] us'_sciUN [Occ=Once] ->
              case ds_sciUM of {
                (,) _ [Occ=Dead] nu_sciUQ [Occ=Once!] ->
                    let {
                      sat_sciUZ [Occ=Once] :: GHC.Types.Int
                      [LclId] =
                          [nu_sciUQ] \u []
                              let {
                                sat_sciUR [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    [nu_sciUQ] \u [] nu_sciUQ lvl43_rcccI GHC.Types.[];
                              } in 
                                case
                                    Text.ParserCombinators.ReadP.run lvl42_rcccH sat_sciUR
                                of
                                sat_sciUS
                                { __DEFAULT ->
                                      case Text.Read.readEither8 sat_sciUS of {
                                        [] -> lvl44_rcccJ;
                                        : x_sciUU [Occ=Once] ds2_sciUV [Occ=Once!] ->
                                            case ds2_sciUV of {
                                              [] -> x_sciUU;
                                              : _ [Occ=Dead] _ [Occ=Dead] -> lvl45_rcccK;
                                            };
                                      };
                                };
                    } in  (#,#) [us'_sciUN sat_sciUZ];
              };
        };

lvl46_rcccM :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl47_rcccN :: GHC.Base.Maybe Text.Printf.FormatAdjustment
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.LeftAdjust];

lvl48_rcccO :: GHC.Base.Maybe Text.Printf.FormatAdjustment
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.ZeroPad];

lvl49_rcccP :: (GHC.Types.Int, GHC.Base.String)
[GblId] =
    [] \u []
        case GHC.List.$wspan GHC.Unicode.isDigit GHC.Types.[] of {
          (#,#) ww1_sciV1 [Occ=Once!] ww2_sciV2 [Occ=Once*] ->
              case ww1_sciV1 of wild_sciV3 {
                [] -> (,) [lvl46_rcccM ww2_sciV2];
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sciVd [Occ=Once] :: GHC.Types.Int
                      [LclId] =
                          [wild_sciV3] \u []
                              case
                                  Text.ParserCombinators.ReadP.run lvl42_rcccH wild_sciV3
                              of
                              sat_sciV6
                              { __DEFAULT ->
                                    case Text.Read.readEither8 sat_sciV6 of {
                                      [] -> lvl44_rcccJ;
                                      : x_sciV8 [Occ=Once] ds_sciV9 [Occ=Once!] ->
                                          case ds_sciV9 of {
                                            [] -> x_sciV8;
                                            : _ [Occ=Dead] _ [Occ=Dead] -> lvl45_rcccK;
                                          };
                                    };
                              };
                    } in  (,) [sat_sciVd ww2_sciV2];
              };
        };

lvl50_rcccQ :: GHC.Base.Maybe Text.Printf.FormatSign
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.SignPlus];

lvl51_rcccR :: GHC.Types.Int
[GblId] =
    [] \u []
        case lvl49_rcccP of {
          (,) p'_sciVf [Occ=Once] _ [Occ=Dead] -> p'_sciVf;
        };

lvl52_rcccS :: GHC.Base.Maybe GHC.Types.Int
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl51_rcccR];

lvl53_rcccT :: GHC.Base.String
[GblId] =
    [] \u []
        case lvl49_rcccP of {
          (,) _ [Occ=Dead] r'_sciVj [Occ=Once] -> r'_sciVj;
        };

lvl54_rcccU :: GHC.Base.Maybe Text.Printf.FormatSign
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.SignSpace];

$wgetSpecs_rcccV
  :: GHC.Types.Bool
     -> GHC.Types.Bool
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> [Text.Printf.UPrintf]
     -> (# Text.Printf.FieldFormat, GHC.Base.String,
           [Text.Printf.UPrintf] #)
[GblId,
 Arity=6,
 Str=<L,1*U><L,1*U><L,U><L,U><S,1*U><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [w_sciVk
                    w1_sciVl
                    w2_sciVm
                    w3_sciVn
                    w4_sciVo
                    w5_sciVp]
        case w4_sciVo of wild_sciVq {
          [] -> Text.Printf.errorShortFormat;
          : ds_sciVs [Occ=Once!] cs0_sciVt [Occ=Once*] ->
              case ds_sciVs of {
                GHC.Types.C# ds1_sciVv [Occ=Once!] ->
                    case ds1_sciVv of ds2_sciVw {
                      __DEFAULT ->
                          case ord# [ds2_sciVw] of sat_sciVx {
                            __DEFAULT ->
                                case -# [sat_sciVx 48#] of sat_sciVy {
                                  __DEFAULT ->
                                      case int2Word# [sat_sciVy] of sat_sciVz {
                                        __DEFAULT ->
                                            case leWord# [sat_sciVz 9##] of {
                                              __DEFAULT ->
                                                  let {
                                                    ds3_sciVB [Dmd=<L,U(1*U,1*U,1*U)>]
                                                      :: Text.Printf.FormatParse
                                                    [LclId] =
                                                        [w5_sciVp wild_sciVq] \u []
                                                            case w5_sciVp of {
                                                              [] ->
                                                                  Text.Printf.errorMissingArgument;
                                                              : ds4_sciVD [Occ=Once!]
                                                                _ [Occ=Dead] ->
                                                                  case ds4_sciVD of {
                                                                    (,) ufmt_sciVG [Occ=Once!]
                                                                        _ [Occ=Dead] ->
                                                                        ufmt_sciVG wild_sciVq;
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_sciW0 [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        [ds3_sciVB] \u []
                                                            case ds3_sciVB of {
                                                              Text.Printf.FormatParse _ [Occ=Dead]
                                                                                      _ [Occ=Dead]
                                                                                      cs_sciVZ [Occ=Once] ->
                                                                  cs_sciVZ;
                                                            }; } in
                                                  let {
                                                    sat_sciVU [Occ=Once] :: GHC.Types.Char
                                                    [LclId] =
                                                        [ds3_sciVB] \u []
                                                            case ds3_sciVB of {
                                                              Text.Printf.FormatParse _ [Occ=Dead]
                                                                                      c_sciVS [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                  c_sciVS;
                                                            }; } in
                                                  let {
                                                    sat_sciVP [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        [ds3_sciVB] \u []
                                                            case ds3_sciVB of {
                                                              Text.Printf.FormatParse ms_sciVM [Occ=Once]
                                                                                      _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                                                  ms_sciVM;
                                                            }; } in
                                                  let {
                                                    sat_sciVK [Occ=Once]
                                                      :: GHC.Base.Maybe Text.Printf.FormatAdjustment
                                                    [LclId] =
                                                        [w_sciVk w1_sciVl] \u []
                                                            case w_sciVk of {
                                                              GHC.Types.False ->
                                                                  case w1_sciVl of {
                                                                    GHC.Types.False ->
                                                                        GHC.Base.Nothing [];
                                                                    GHC.Types.True -> lvl48_rcccO;
                                                                  };
                                                              GHC.Types.True -> lvl47_rcccN;
                                                            }; } in
                                                  let {
                                                    sat_sciVV [Occ=Once] :: Text.Printf.FieldFormat
                                                    [LclId] =
                                                        CCCS Text.Printf.FieldFormat! [GHC.Base.Nothing
                                                                                       GHC.Base.Nothing
                                                                                       sat_sciVK
                                                                                       w2_sciVm
                                                                                       w3_sciVn
                                                                                       sat_sciVP
                                                                                       sat_sciVU];
                                                  } in  (#,,#) [sat_sciVV sat_sciW0 w5_sciVp];
                                              1# ->
                                                  let {
                                                    ds3_sciW1 [Dmd=<L,U(U(U),1*U)>]
                                                      :: (GHC.Types.Int, GHC.Base.String)
                                                    [LclId] =
                                                        [wild_sciVq] \u []
                                                            case
                                                                GHC.List.$wspan
                                                                    GHC.Unicode.isDigit wild_sciVq
                                                            of
                                                            { (#,#) ww1_sciW3 [Occ=Once!]
                                                                    ww2_sciW4 [Occ=Once*] ->
                                                                  case ww1_sciW3 of wild2_sciW5 {
                                                                    [] ->
                                                                        (,) [lvl46_rcccM ww2_sciW4];
                                                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                        let {
                                                                          sat_sciWf [Occ=Once]
                                                                            :: GHC.Types.Int
                                                                          [LclId] =
                                                                              [wild2_sciW5] \u []
                                                                                  case
                                                                                      Text.ParserCombinators.ReadP.run
                                                                                          lvl42_rcccH
                                                                                          wild2_sciW5
                                                                                  of
                                                                                  sat_sciW8
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            Text.Read.readEither8
                                                                                                sat_sciW8
                                                                                        of
                                                                                        { [] ->
                                                                                              lvl44_rcccJ;
                                                                                          : x_sciWa [Occ=Once]
                                                                                            ds4_sciWb [Occ=Once!] ->
                                                                                              case
                                                                                                  ds4_sciWb
                                                                                              of
                                                                                              { [] ->
                                                                                                    x_sciWa;
                                                                                                : _ [Occ=Dead]
                                                                                                  _ [Occ=Dead] ->
                                                                                                    lvl45_rcccK;
                                                                                              };
                                                                                        };
                                                                                  };
                                                                        } in 
                                                                          (,) [sat_sciWf ww2_sciW4];
                                                                  };
                                                            }; } in
                                                  let {
                                                    ds4_sciWg [Dmd=<L,U(1*U,U,U)>]
                                                      :: (GHC.Base.Maybe GHC.Types.Int,
                                                          [GHC.Types.Char], [Text.Printf.UPrintf])
                                                    [LclId] =
                                                        [w5_sciVp ds3_sciW1] \u []
                                                            case ds3_sciW1 of {
                                                              (,) _ [Occ=Dead]
                                                                  cs'_sciWj [Occ=Once!] ->
                                                                  case cs'_sciWj of wild3_sciWk {
                                                                    [] ->
                                                                        (,,) [GHC.Base.Nothing
                                                                              GHC.Types.[]
                                                                              w5_sciVp];
                                                                    : ds5_sciWl [Occ=Once!]
                                                                      ds6_sciWm [Occ=Once!] ->
                                                                        case ds5_sciWl of {
                                                                          GHC.Types.C# ds7_sciWo [Occ=Once!] ->
                                                                              case ds7_sciWo of {
                                                                                __DEFAULT ->
                                                                                    (,,) [GHC.Base.Nothing
                                                                                          wild3_sciWk
                                                                                          w5_sciVp];
                                                                                '.'# ->
                                                                                    case
                                                                                        ds6_sciWm
                                                                                    of
                                                                                    wild5_sciWq
                                                                                    { [] ->
                                                                                          (,,) [lvl52_rcccS
                                                                                                lvl53_rcccT
                                                                                                w5_sciVp];
                                                                                      : ds9_sciWr [Occ=Once!]
                                                                                        r_sciWs [Occ=Once] ->
                                                                                          case
                                                                                              ds9_sciWr
                                                                                          of
                                                                                          { GHC.Types.C# ds10_sciWu [Occ=Once!] ->
                                                                                                case
                                                                                                    ds10_sciWu
                                                                                                of
                                                                                                { __DEFAULT ->
                                                                                                      let {
                                                                                                        ds12_sciWw [Dmd=<L,U(1*U,1*U)>]
                                                                                                          :: (GHC.Types.Int,
                                                                                                              GHC.Base.String)
                                                                                                        [LclId] =
                                                                                                            [wild5_sciWq] \u []
                                                                                                                case
                                                                                                                    GHC.List.$wspan
                                                                                                                        GHC.Unicode.isDigit
                                                                                                                        wild5_sciWq
                                                                                                                of
                                                                                                                { (#,#) ww1_sciWy [Occ=Once!]
                                                                                                                        ww2_sciWz [Occ=Once*] ->
                                                                                                                      case
                                                                                                                          ww1_sciWy
                                                                                                                      of
                                                                                                                      wild7_sciWA
                                                                                                                      { [] ->
                                                                                                                            (,) [lvl46_rcccM
                                                                                                                                 ww2_sciWz];
                                                                                                                        : _ [Occ=Dead]
                                                                                                                          _ [Occ=Dead] ->
                                                                                                                            let {
                                                                                                                              sat_sciWK [Occ=Once]
                                                                                                                                :: GHC.Types.Int
                                                                                                                              [LclId] =
                                                                                                                                  [wild7_sciWA] \u []
                                                                                                                                      case
                                                                                                                                          Text.ParserCombinators.ReadP.run
                                                                                                                                              lvl42_rcccH
                                                                                                                                              wild7_sciWA
                                                                                                                                      of
                                                                                                                                      sat_sciWD
                                                                                                                                      { __DEFAULT ->
                                                                                                                                            case
                                                                                                                                                Text.Read.readEither8
                                                                                                                                                    sat_sciWD
                                                                                                                                            of
                                                                                                                                            { [] ->
                                                                                                                                                  lvl44_rcccJ;
                                                                                                                                              : x_sciWF [Occ=Once]
                                                                                                                                                ds13_sciWG [Occ=Once!] ->
                                                                                                                                                  case
                                                                                                                                                      ds13_sciWG
                                                                                                                                                  of
                                                                                                                                                  { [] ->
                                                                                                                                                        x_sciWF;
                                                                                                                                                    : _ [Occ=Dead]
                                                                                                                                                      _ [Occ=Dead] ->
                                                                                                                                                        lvl45_rcccK;
                                                                                                                                                  };
                                                                                                                                            };
                                                                                                                                      };
                                                                                                                            } in 
                                                                                                                              (,) [sat_sciWK
                                                                                                                                   ww2_sciWz];
                                                                                                                      };
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sciWT [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            [ds12_sciWw] \u []
                                                                                                                case
                                                                                                                    ds12_sciWw
                                                                                                                of
                                                                                                                { (,) _ [Occ=Dead]
                                                                                                                      r'_sciWS [Occ=Once] ->
                                                                                                                      r'_sciWS;
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sciWO [Occ=Once]
                                                                                                          :: GHC.Types.Int
                                                                                                        [LclId] =
                                                                                                            [ds12_sciWw] \u []
                                                                                                                case
                                                                                                                    ds12_sciWw
                                                                                                                of
                                                                                                                { (,) p'_sciWM [Occ=Once]
                                                                                                                      _ [Occ=Dead] ->
                                                                                                                      p'_sciWM;
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sciWP [Occ=Once]
                                                                                                          :: GHC.Base.Maybe
                                                                                                               GHC.Types.Int
                                                                                                        [LclId] =
                                                                                                            CCCS GHC.Base.Just! [sat_sciWO];
                                                                                                      } in 
                                                                                                        (,,) [sat_sciWP
                                                                                                              sat_sciWT
                                                                                                              w5_sciVp];
                                                                                                  '*'# ->
                                                                                                      let {
                                                                                                        ds12_sciWU [Dmd=<L,U(1*U,1*U)>]
                                                                                                          :: ([Text.Printf.UPrintf],
                                                                                                              GHC.Types.Int)
                                                                                                        [LclId] =
                                                                                                            [w5_sciVp] \u []
                                                                                                                case
                                                                                                                    $wgetStar_rcccL
                                                                                                                        w5_sciVp
                                                                                                                of
                                                                                                                { (#,#) ww1_sciWW [Occ=Once]
                                                                                                                        ww2_sciWX [Occ=Once] ->
                                                                                                                      (,) [ww1_sciWW
                                                                                                                           ww2_sciWX];
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sciX6 [Occ=Once]
                                                                                                          :: [Text.Printf.UPrintf]
                                                                                                        [LclId] =
                                                                                                            [ds12_sciWU] \u []
                                                                                                                case
                                                                                                                    ds12_sciWU
                                                                                                                of
                                                                                                                { (,) us''_sciX4 [Occ=Once]
                                                                                                                      _ [Occ=Dead] ->
                                                                                                                      us''_sciX4;
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sciX1 [Occ=Once]
                                                                                                          :: GHC.Types.Int
                                                                                                        [LclId] =
                                                                                                            [ds12_sciWU] \u []
                                                                                                                case
                                                                                                                    ds12_sciWU
                                                                                                                of
                                                                                                                { (,) _ [Occ=Dead]
                                                                                                                      p'_sciX0 [Occ=Once] ->
                                                                                                                      p'_sciX0;
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sciX2 [Occ=Once]
                                                                                                          :: GHC.Base.Maybe
                                                                                                               GHC.Types.Int
                                                                                                        [LclId] =
                                                                                                            CCCS GHC.Base.Just! [sat_sciX1];
                                                                                                      } in 
                                                                                                        (,,) [sat_sciX2
                                                                                                              r_sciWs
                                                                                                              sat_sciX6];
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    ds5_sciX7 [Dmd=<L,U(1*U,1*U,1*U)>]
                                                      :: Text.Printf.FormatParse
                                                    [LclId] =
                                                        [ds4_sciWg] \u []
                                                            case ds4_sciWg of {
                                                              (,,) _ [Occ=Dead]
                                                                   cs''_sciXa [Occ=Once]
                                                                   us'_sciXb [Occ=Once!] ->
                                                                  case us'_sciXb of {
                                                                    [] ->
                                                                        Text.Printf.errorMissingArgument;
                                                                    : ds7_sciXd [Occ=Once!]
                                                                      _ [Occ=Dead] ->
                                                                        case ds7_sciXd of {
                                                                          (,) ufmt_sciXg [Occ=Once!]
                                                                              _ [Occ=Dead] ->
                                                                              ufmt_sciXg cs''_sciXa;
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_sciXZ [Occ=Once] :: [Text.Printf.UPrintf]
                                                    [LclId] =
                                                        [ds4_sciWg] \u []
                                                            case ds4_sciWg of {
                                                              (,,) _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   us'_sciXY [Occ=Once] ->
                                                                  us'_sciXY;
                                                            }; } in
                                                  let {
                                                    sat_sciXU [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        [ds5_sciX7] \u []
                                                            case ds5_sciX7 of {
                                                              Text.Printf.FormatParse _ [Occ=Dead]
                                                                                      _ [Occ=Dead]
                                                                                      cs_sciXT [Occ=Once] ->
                                                                  cs_sciXT;
                                                            }; } in
                                                  let {
                                                    sat_sciXO [Occ=Once] :: GHC.Types.Char
                                                    [LclId] =
                                                        [ds5_sciX7] \u []
                                                            case ds5_sciX7 of {
                                                              Text.Printf.FormatParse _ [Occ=Dead]
                                                                                      c_sciXM [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                  c_sciXM;
                                                            }; } in
                                                  let {
                                                    sat_sciXJ [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        [ds5_sciX7] \u []
                                                            case ds5_sciX7 of {
                                                              Text.Printf.FormatParse ms_sciXG [Occ=Once]
                                                                                      _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                                                  ms_sciXG;
                                                            }; } in
                                                  let {
                                                    sat_sciXE [Occ=Once]
                                                      :: GHC.Base.Maybe Text.Printf.FormatAdjustment
                                                    [LclId] =
                                                        [w_sciVk w1_sciVl ds3_sciW1] \u []
                                                            case ds3_sciW1 of {
                                                              (,) n_sciXx [Occ=Once!]
                                                                  _ [Occ=Dead] ->
                                                                  case n_sciXx of {
                                                                    GHC.Types.I# x_sciXA [Occ=Once] ->
                                                                        case <# [x_sciXA 0#] of {
                                                                          __DEFAULT ->
                                                                              case w_sciVk of {
                                                                                GHC.Types.False ->
                                                                                    case
                                                                                        w1_sciVl
                                                                                    of
                                                                                    { GHC.Types.False ->
                                                                                          GHC.Base.Nothing [];
                                                                                      GHC.Types.True ->
                                                                                          lvl48_rcccO;
                                                                                    };
                                                                                GHC.Types.True ->
                                                                                    lvl47_rcccN;
                                                                              };
                                                                          1# -> lvl47_rcccN;
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_sciXv [Occ=Once]
                                                      :: GHC.Base.Maybe GHC.Types.Int
                                                    [LclId] =
                                                        [ds4_sciWg] \u []
                                                            case ds4_sciWg of {
                                                              (,,) p_sciXs [Occ=Once]
                                                                   _ [Occ=Dead]
                                                                   _ [Occ=Dead] ->
                                                                  p_sciXs;
                                                            }; } in
                                                  let {
                                                    sat_sciXp [Occ=Once] :: GHC.Types.Int
                                                    [LclId] =
                                                        [ds3_sciW1] \u []
                                                            case ds3_sciW1 of {
                                                              (,) n_sciXj [Occ=Once!]
                                                                  _ [Occ=Dead] ->
                                                                  case n_sciXj of wild3_sciXl {
                                                                    GHC.Types.I# x_sciXm ->
                                                                        case >=# [x_sciXm 0#] of {
                                                                          __DEFAULT ->
                                                                              case
                                                                                  negateInt# [x_sciXm]
                                                                              of
                                                                              sat_sciXo
                                                                              { __DEFAULT ->
                                                                                    GHC.Types.I# [sat_sciXo];
                                                                              };
                                                                          1# -> wild3_sciXl;
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_sciXq [Occ=Once]
                                                      :: GHC.Base.Maybe GHC.Types.Int
                                                    [LclId] =
                                                        CCCS GHC.Base.Just! [sat_sciXp]; } in
                                                  let {
                                                    sat_sciXP [Occ=Once] :: Text.Printf.FieldFormat
                                                    [LclId] =
                                                        CCCS Text.Printf.FieldFormat! [sat_sciXq
                                                                                       sat_sciXv
                                                                                       sat_sciXE
                                                                                       w2_sciVm
                                                                                       w3_sciVn
                                                                                       sat_sciXJ
                                                                                       sat_sciXO];
                                                  } in  (#,,#) [sat_sciXP sat_sciXU sat_sciXZ];
                                            };
                                      };
                                };
                          };
                      ' '# ->
                          let {
                            sat_sciY3 [Occ=Once] :: GHC.Base.Maybe Text.Printf.FormatSign
                            [LclId] =
                                [w2_sciVm] \u []
                                    case w2_sciVm of {
                                      GHC.Base.Nothing -> lvl54_rcccU;
                                      GHC.Base.Just ds3_sciY1 [Occ=Once!] ->
                                          case ds3_sciY1 of {
                                            Text.Printf.SignPlus -> lvl50_rcccQ;
                                            Text.Printf.SignSpace -> lvl54_rcccU;
                                          };
                                    };
                          } in 
                            $wgetSpecs_rcccV
                                w_sciVk w1_sciVl sat_sciY3 w3_sciVn cs0_sciVt w5_sciVp;
                      '#'# ->
                          $wgetSpecs_rcccV
                              w_sciVk w1_sciVl w2_sciVm GHC.Types.True cs0_sciVt w5_sciVp;
                      '*'# ->
                          let {
                            ds3_sciY4 [Dmd=<L,U(1*U,U(U))>]
                              :: ([Text.Printf.UPrintf], GHC.Types.Int)
                            [LclId] =
                                [w5_sciVp] \u []
                                    case $wgetStar_rcccL w5_sciVp of {
                                      (#,#) ww1_sciY6 [Occ=Once] ww2_sciY7 [Occ=Once] ->
                                          (,) [ww1_sciY6 ww2_sciY7];
                                    }; } in
                          let {
                            ds4_sciY8 [Dmd=<L,U(1*U,U,U)>]
                              :: (GHC.Base.Maybe GHC.Types.Int, [GHC.Types.Char],
                                  [Text.Printf.UPrintf])
                            [LclId] =
                                [cs0_sciVt ds3_sciY4] \u []
                                    case cs0_sciVt of wild2_sciY9 {
                                      [] ->
                                          let {
                                            sat_sciYd [Occ=Once] :: [Text.Printf.UPrintf]
                                            [LclId] =
                                                [ds3_sciY4] \u []
                                                    case ds3_sciY4 of {
                                                      (,) us'_sciYb [Occ=Once] _ [Occ=Dead] ->
                                                          us'_sciYb;
                                                    };
                                          } in  (,,) [GHC.Base.Nothing GHC.Types.[] sat_sciYd];
                                      : ds5_sciYe [Occ=Once!] ds6_sciYf [Occ=Once!] ->
                                          case ds5_sciYe of {
                                            GHC.Types.C# ds7_sciYh [Occ=Once!] ->
                                                case ds7_sciYh of {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sciYm [Occ=Once]
                                                          :: [Text.Printf.UPrintf]
                                                        [LclId] =
                                                            [ds3_sciY4] \u []
                                                                case ds3_sciY4 of {
                                                                  (,) us'_sciYk [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                      us'_sciYk;
                                                                };
                                                      } in 
                                                        (,,) [GHC.Base.Nothing
                                                              wild2_sciY9
                                                              sat_sciYm];
                                                  '.'# ->
                                                      case ds6_sciYf of wild4_sciYn {
                                                        [] ->
                                                            let {
                                                              sat_sciYr [Occ=Once]
                                                                :: [Text.Printf.UPrintf]
                                                              [LclId] =
                                                                  [ds3_sciY4] \u []
                                                                      case ds3_sciY4 of {
                                                                        (,) us'_sciYp [Occ=Once]
                                                                            _ [Occ=Dead] ->
                                                                            us'_sciYp;
                                                                      };
                                                            } in 
                                                              (,,) [lvl52_rcccS
                                                                    lvl53_rcccT
                                                                    sat_sciYr];
                                                        : ds9_sciYs [Occ=Once!]
                                                          r_sciYt [Occ=Once] ->
                                                            case ds9_sciYs of {
                                                              GHC.Types.C# ds10_sciYv [Occ=Once!] ->
                                                                  case ds10_sciYv of {
                                                                    __DEFAULT ->
                                                                        let {
                                                                          ds12_sciYx [Dmd=<L,U(1*U,1*U)>]
                                                                            :: (GHC.Types.Int,
                                                                                GHC.Base.String)
                                                                          [LclId] =
                                                                              [wild4_sciYn] \u []
                                                                                  case
                                                                                      GHC.List.$wspan
                                                                                          GHC.Unicode.isDigit
                                                                                          wild4_sciYn
                                                                                  of
                                                                                  { (#,#) ww1_sciYz [Occ=Once!]
                                                                                          ww2_sciYA [Occ=Once*] ->
                                                                                        case
                                                                                            ww1_sciYz
                                                                                        of
                                                                                        wild6_sciYB
                                                                                        { [] ->
                                                                                              (,) [lvl46_rcccM
                                                                                                   ww2_sciYA];
                                                                                          : _ [Occ=Dead]
                                                                                            _ [Occ=Dead] ->
                                                                                              let {
                                                                                                sat_sciYL [Occ=Once]
                                                                                                  :: GHC.Types.Int
                                                                                                [LclId] =
                                                                                                    [wild6_sciYB] \u []
                                                                                                        case
                                                                                                            Text.ParserCombinators.ReadP.run
                                                                                                                lvl42_rcccH
                                                                                                                wild6_sciYB
                                                                                                        of
                                                                                                        sat_sciYE
                                                                                                        { __DEFAULT ->
                                                                                                              case
                                                                                                                  Text.Read.readEither8
                                                                                                                      sat_sciYE
                                                                                                              of
                                                                                                              { [] ->
                                                                                                                    lvl44_rcccJ;
                                                                                                                : x_sciYG [Occ=Once]
                                                                                                                  ds13_sciYH [Occ=Once!] ->
                                                                                                                    case
                                                                                                                        ds13_sciYH
                                                                                                                    of
                                                                                                                    { [] ->
                                                                                                                          x_sciYG;
                                                                                                                      : _ [Occ=Dead]
                                                                                                                        _ [Occ=Dead] ->
                                                                                                                          lvl45_rcccK;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                              } in 
                                                                                                (,) [sat_sciYL
                                                                                                     ww2_sciYA];
                                                                                        };
                                                                                  }; } in
                                                                        let {
                                                                          sat_sciYY [Occ=Once]
                                                                            :: [Text.Printf.UPrintf]
                                                                          [LclId] =
                                                                              [ds3_sciY4] \u []
                                                                                  case
                                                                                      ds3_sciY4
                                                                                  of
                                                                                  { (,) us'_sciYW [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                                        us'_sciYW;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sciYU [Occ=Once]
                                                                            :: [GHC.Types.Char]
                                                                          [LclId] =
                                                                              [ds12_sciYx] \u []
                                                                                  case
                                                                                      ds12_sciYx
                                                                                  of
                                                                                  { (,) _ [Occ=Dead]
                                                                                        r'_sciYT [Occ=Once] ->
                                                                                        r'_sciYT;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sciYP [Occ=Once]
                                                                            :: GHC.Types.Int
                                                                          [LclId] =
                                                                              [ds12_sciYx] \u []
                                                                                  case
                                                                                      ds12_sciYx
                                                                                  of
                                                                                  { (,) p'_sciYN [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                                        p'_sciYN;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sciYQ [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 GHC.Types.Int
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [sat_sciYP];
                                                                        } in 
                                                                          (,,) [sat_sciYQ
                                                                                sat_sciYU
                                                                                sat_sciYY];
                                                                    '*'# ->
                                                                        let {
                                                                          ds12_sciYZ [Dmd=<L,U(1*U,1*U)>]
                                                                            :: ([Text.Printf.UPrintf],
                                                                                GHC.Types.Int)
                                                                          [LclId] =
                                                                              [ds3_sciY4] \u []
                                                                                  case
                                                                                      ds3_sciY4
                                                                                  of
                                                                                  { (,) us'_sciZ1 [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                                        case
                                                                                            $wgetStar_rcccL
                                                                                                us'_sciZ1
                                                                                        of
                                                                                        { (#,#) ww1_sciZ4 [Occ=Once]
                                                                                                ww2_sciZ5 [Occ=Once] ->
                                                                                              (,) [ww1_sciZ4
                                                                                                   ww2_sciZ5];
                                                                                        };
                                                                                  }; } in
                                                                        let {
                                                                          sat_sciZe [Occ=Once]
                                                                            :: [Text.Printf.UPrintf]
                                                                          [LclId] =
                                                                              [ds12_sciYZ] \u []
                                                                                  case
                                                                                      ds12_sciYZ
                                                                                  of
                                                                                  { (,) us'''_sciZc [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                                        us'''_sciZc;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sciZ9 [Occ=Once]
                                                                            :: GHC.Types.Int
                                                                          [LclId] =
                                                                              [ds12_sciYZ] \u []
                                                                                  case
                                                                                      ds12_sciYZ
                                                                                  of
                                                                                  { (,) _ [Occ=Dead]
                                                                                        p'_sciZ8 [Occ=Once] ->
                                                                                        p'_sciZ8;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sciZa [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 GHC.Types.Int
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [sat_sciZ9];
                                                                        } in 
                                                                          (,,) [sat_sciZa
                                                                                r_sciYt
                                                                                sat_sciZe];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    }; } in
                          let {
                            ds5_sciZf [Dmd=<L,U(1*U,1*U,1*U)>] :: Text.Printf.FormatParse
                            [LclId] =
                                [ds4_sciY8] \u []
                                    case ds4_sciY8 of {
                                      (,,) _ [Occ=Dead]
                                           cs''_sciZi [Occ=Once]
                                           us''_sciZj [Occ=Once!] ->
                                          case us''_sciZj of {
                                            [] -> Text.Printf.errorMissingArgument;
                                            : ds7_sciZl [Occ=Once!] _ [Occ=Dead] ->
                                                case ds7_sciZl of {
                                                  (,) ufmt_sciZo [Occ=Once!] _ [Occ=Dead] ->
                                                      ufmt_sciZo cs''_sciZi;
                                                };
                                          };
                                    }; } in
                          let {
                            sat_scj07 [Occ=Once] :: [Text.Printf.UPrintf]
                            [LclId] =
                                [ds4_sciY8] \u []
                                    case ds4_sciY8 of {
                                      (,,) _ [Occ=Dead] _ [Occ=Dead] us''_scj06 [Occ=Once] ->
                                          us''_scj06;
                                    }; } in
                          let {
                            sat_scj02 [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [ds5_sciZf] \u []
                                    case ds5_sciZf of {
                                      Text.Printf.FormatParse _ [Occ=Dead]
                                                              _ [Occ=Dead]
                                                              cs_scj01 [Occ=Once] ->
                                          cs_scj01;
                                    }; } in
                          let {
                            sat_sciZW [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                [ds5_sciZf] \u []
                                    case ds5_sciZf of {
                                      Text.Printf.FormatParse _ [Occ=Dead]
                                                              c_sciZU [Occ=Once]
                                                              _ [Occ=Dead] ->
                                          c_sciZU;
                                    }; } in
                          let {
                            sat_sciZR [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [ds5_sciZf] \u []
                                    case ds5_sciZf of {
                                      Text.Printf.FormatParse ms_sciZO [Occ=Once]
                                                              _ [Occ=Dead]
                                                              _ [Occ=Dead] ->
                                          ms_sciZO;
                                    }; } in
                          let {
                            sat_sciZM [Occ=Once] :: GHC.Base.Maybe Text.Printf.FormatAdjustment
                            [LclId] =
                                [w_sciVk w1_sciVl ds3_sciY4] \u []
                                    case ds3_sciY4 of {
                                      (,) _ [Occ=Dead] n_sciZG [Occ=Once!] ->
                                          case n_sciZG of {
                                            GHC.Types.I# x_sciZI [Occ=Once] ->
                                                case <# [x_sciZI 0#] of {
                                                  __DEFAULT ->
                                                      case w_sciVk of {
                                                        GHC.Types.False ->
                                                            case w1_sciVl of {
                                                              GHC.Types.False ->
                                                                  GHC.Base.Nothing [];
                                                              GHC.Types.True -> lvl48_rcccO;
                                                            };
                                                        GHC.Types.True -> lvl47_rcccN;
                                                      };
                                                  1# -> lvl47_rcccN;
                                                };
                                          };
                                    }; } in
                          let {
                            sat_sciZD [Occ=Once] :: GHC.Base.Maybe GHC.Types.Int
                            [LclId] =
                                [ds4_sciY8] \u []
                                    case ds4_sciY8 of {
                                      (,,) p_sciZA [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] -> p_sciZA;
                                    }; } in
                          let {
                            sat_sciZx [Occ=Once] :: GHC.Types.Int
                            [LclId] =
                                [ds3_sciY4] \u []
                                    case ds3_sciY4 of {
                                      (,) _ [Occ=Dead] n_sciZs [Occ=Once!] ->
                                          case n_sciZs of wild3_sciZt {
                                            GHC.Types.I# x_sciZu ->
                                                case >=# [x_sciZu 0#] of {
                                                  __DEFAULT ->
                                                      case negateInt# [x_sciZu] of sat_sciZw {
                                                        __DEFAULT -> GHC.Types.I# [sat_sciZw];
                                                      };
                                                  1# -> wild3_sciZt;
                                                };
                                          };
                                    }; } in
                          let {
                            sat_sciZy [Occ=Once] :: GHC.Base.Maybe GHC.Types.Int
                            [LclId] =
                                CCCS GHC.Base.Just! [sat_sciZx]; } in
                          let {
                            sat_sciZX [Occ=Once] :: Text.Printf.FieldFormat
                            [LclId] =
                                CCCS Text.Printf.FieldFormat! [sat_sciZy
                                                               sat_sciZD
                                                               sat_sciZM
                                                               w2_sciVm
                                                               w3_sciVn
                                                               sat_sciZR
                                                               sat_sciZW];
                          } in  (#,,#) [sat_sciZX sat_scj02 sat_scj07];
                      '+'# ->
                          $wgetSpecs_rcccV
                              w_sciVk w1_sciVl lvl50_rcccQ w3_sciVn cs0_sciVt w5_sciVp;
                      '-'# ->
                          $wgetSpecs_rcccV
                              GHC.Types.True w1_sciVl w2_sciVm w3_sciVn cs0_sciVt w5_sciVp;
                      '.'# ->
                          let {
                            ds3_scj08 [Dmd=<L,U(1*U,U,U)>]
                              :: (GHC.Types.Int, [GHC.Types.Char], [Text.Printf.UPrintf])
                            [LclId] =
                                [w5_sciVp cs0_sciVt] \u []
                                    case cs0_sciVt of wild2_scj09 {
                                      [] ->
                                          case lvl49_rcccP of {
                                            (,) p_scj0b [Occ=Once] cs'_scj0c [Occ=Once] ->
                                                (,,) [p_scj0b cs'_scj0c w5_sciVp];
                                          };
                                      : ds4_scj0d [Occ=Once!] cs''_scj0e [Occ=Once] ->
                                          case ds4_scj0d of {
                                            GHC.Types.C# ds5_scj0g [Occ=Once!] ->
                                                case ds5_scj0g of {
                                                  __DEFAULT ->
                                                      case
                                                          GHC.List.$wspan
                                                              GHC.Unicode.isDigit wild2_scj09
                                                      of
                                                      { (#,#) ww1_scj0j [Occ=Once!]
                                                              ww2_scj0k [Occ=Once*] ->
                                                            case ww1_scj0j of wild4_scj0l {
                                                              [] ->
                                                                  (,,) [lvl46_rcccM
                                                                        ww2_scj0k
                                                                        w5_sciVp];
                                                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                  let {
                                                                    sat_scj0v [Occ=Once]
                                                                      :: GHC.Types.Int
                                                                    [LclId] =
                                                                        [wild4_scj0l] \u []
                                                                            case
                                                                                Text.ParserCombinators.ReadP.run
                                                                                    lvl42_rcccH
                                                                                    wild4_scj0l
                                                                            of
                                                                            sat_scj0o
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      Text.Read.readEither8
                                                                                          sat_scj0o
                                                                                  of
                                                                                  { [] ->
                                                                                        lvl44_rcccJ;
                                                                                    : x_scj0q [Occ=Once]
                                                                                      ds7_scj0r [Occ=Once!] ->
                                                                                        case
                                                                                            ds7_scj0r
                                                                                        of
                                                                                        { [] ->
                                                                                              x_scj0q;
                                                                                          : _ [Occ=Dead]
                                                                                            _ [Occ=Dead] ->
                                                                                              lvl45_rcccK;
                                                                                        };
                                                                                  };
                                                                            };
                                                                  } in 
                                                                    (,,) [sat_scj0v
                                                                          ww2_scj0k
                                                                          w5_sciVp];
                                                            };
                                                      };
                                                  '*'# ->
                                                      let {
                                                        ds7_scj0w [Dmd=<L,U(1*U,1*U)>]
                                                          :: ([Text.Printf.UPrintf], GHC.Types.Int)
                                                        [LclId] =
                                                            [w5_sciVp] \u []
                                                                case $wgetStar_rcccL w5_sciVp of {
                                                                  (#,#) ww1_scj0y [Occ=Once]
                                                                        ww2_scj0z [Occ=Once] ->
                                                                      (,) [ww1_scj0y ww2_scj0z];
                                                                }; } in
                                                      let {
                                                        sat_scj0H [Occ=Once]
                                                          :: [Text.Printf.UPrintf]
                                                        [LclId] =
                                                            [ds7_scj0w] \u []
                                                                case ds7_scj0w of {
                                                                  (,) us''_scj0F [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                      us''_scj0F;
                                                                }; } in
                                                      let {
                                                        sat_scj0D [Occ=Once] :: GHC.Types.Int
                                                        [LclId] =
                                                            [ds7_scj0w] \u []
                                                                case ds7_scj0w of {
                                                                  (,) _ [Occ=Dead]
                                                                      p'_scj0C [Occ=Once] ->
                                                                      p'_scj0C;
                                                                };
                                                      } in  (,,) [sat_scj0D cs''_scj0e sat_scj0H];
                                                };
                                          };
                                    }; } in
                          let {
                            ds4_scj0I [Dmd=<L,U(1*U,1*U,1*U)>] :: Text.Printf.FormatParse
                            [LclId] =
                                [ds3_scj08] \u []
                                    case ds3_scj08 of {
                                      (,,) _ [Occ=Dead]
                                           cs'_scj0L [Occ=Once]
                                           us'_scj0M [Occ=Once!] ->
                                          case us'_scj0M of {
                                            [] -> Text.Printf.errorMissingArgument;
                                            : ds6_scj0O [Occ=Once!] _ [Occ=Dead] ->
                                                case ds6_scj0O of {
                                                  (,) ufmt_scj0R [Occ=Once!] _ [Occ=Dead] ->
                                                      ufmt_scj0R cs'_scj0L;
                                                };
                                          };
                                    }; } in
                          let {
                            sat_scj1m [Occ=Once] :: [Text.Printf.UPrintf]
                            [LclId] =
                                [ds3_scj08] \u []
                                    case ds3_scj08 of {
                                      (,,) _ [Occ=Dead] _ [Occ=Dead] us'_scj1l [Occ=Once] ->
                                          us'_scj1l;
                                    }; } in
                          let {
                            sat_scj1h [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [ds4_scj0I] \u []
                                    case ds4_scj0I of {
                                      Text.Printf.FormatParse _ [Occ=Dead]
                                                              _ [Occ=Dead]
                                                              cs_scj1g [Occ=Once] ->
                                          cs_scj1g;
                                    }; } in
                          let {
                            sat_scj1b [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                [ds4_scj0I] \u []
                                    case ds4_scj0I of {
                                      Text.Printf.FormatParse _ [Occ=Dead]
                                                              c_scj19 [Occ=Once]
                                                              _ [Occ=Dead] ->
                                          c_scj19;
                                    }; } in
                          let {
                            sat_scj16 [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [ds4_scj0I] \u []
                                    case ds4_scj0I of {
                                      Text.Printf.FormatParse ms_scj13 [Occ=Once]
                                                              _ [Occ=Dead]
                                                              _ [Occ=Dead] ->
                                          ms_scj13;
                                    }; } in
                          let {
                            sat_scj11 [Occ=Once] :: GHC.Base.Maybe Text.Printf.FormatAdjustment
                            [LclId] =
                                [w_sciVk w1_sciVl] \u []
                                    case w_sciVk of {
                                      GHC.Types.False ->
                                          case w1_sciVl of {
                                            GHC.Types.False -> GHC.Base.Nothing [];
                                            GHC.Types.True -> lvl48_rcccO;
                                          };
                                      GHC.Types.True -> lvl47_rcccN;
                                    }; } in
                          let {
                            sat_scj0X [Occ=Once] :: GHC.Types.Int
                            [LclId] =
                                [ds3_scj08] \u []
                                    case ds3_scj08 of {
                                      (,,) p_scj0U [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] -> p_scj0U;
                                    }; } in
                          let {
                            sat_scj0Y [Occ=Once] :: GHC.Base.Maybe GHC.Types.Int
                            [LclId] =
                                CCCS GHC.Base.Just! [sat_scj0X]; } in
                          let {
                            sat_scj1c [Occ=Once] :: Text.Printf.FieldFormat
                            [LclId] =
                                CCCS Text.Printf.FieldFormat! [GHC.Base.Nothing
                                                               sat_scj0Y
                                                               sat_scj11
                                                               w2_sciVm
                                                               w3_sciVn
                                                               sat_scj16
                                                               sat_scj1b];
                          } in  (#,,#) [sat_scj1c sat_scj1h sat_scj1m];
                      '0'# ->
                          $wgetSpecs_rcccV
                              w_sciVk GHC.Types.True w2_sciVm w3_sciVn cs0_sciVt w5_sciVp;
                    };
              };
        };

f_rcccW :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['%'#];

Text.Printf.uprintfs [Occ=LoopBreaker]
  :: GHC.Base.String -> [Text.Printf.UPrintf] -> GHC.Show.ShowS
[GblId, Arity=3, Str=<S,1*U><L,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_scj1n ds1_scj1o eta_scj1p]
        case ds_scj1n of {
          [] ->
              case ds1_scj1o of {
                [] -> eta_scj1p;
                : _ [Occ=Dead] _ [Occ=Dead] -> Text.Printf.errorShortFormat;
              };
          : ds2_scj1v [Occ=Once!] ds3_scj1w ->
              case ds2_scj1v of wild1_scj1x {
                GHC.Types.C# ds4_scj1y [Occ=Once!] ->
                    case ds4_scj1y of {
                      __DEFAULT ->
                          let {
                            sat_scj1A [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [ds1_scj1o eta_scj1p ds3_scj1w] \u []
                                    Text.Printf.uprintfs ds3_scj1w ds1_scj1o eta_scj1p;
                          } in  : [wild1_scj1x sat_scj1A];
                      '%'# ->
                          let-no-escape {
                            fail_scj1B [Occ=Once*!T[1], Dmd=<L,1*C1(U)>]
                              :: GHC.Prim.Void# -> GHC.Base.String
                            [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                sat-only [ds1_scj1o eta_scj1p ds3_scj1w] \r [ds6_scj1C]
                                    case ds1_scj1o of wild2_scj1D {
                                      [] -> Text.Printf.errorMissingArgument;
                                      : _ [Occ=Dead] _ [Occ=Dead] ->
                                          case
                                              $wgetSpecs_rcccV
                                                  GHC.Types.False
                                                  GHC.Types.False
                                                  GHC.Base.Nothing
                                                  GHC.Types.False
                                                  ds3_scj1w
                                                  wild2_scj1D
                                          of
                                          { (#,,#) ww1_scj1I [Occ=Once]
                                                   ww2_scj1J [Occ=Once]
                                                   ww3_scj1K [Occ=Once!] ->
                                                case ww3_scj1K of {
                                                  [] -> Text.Printf.errorMissingArgument;
                                                  : ds9_scj1N [Occ=Once!] us_scj1O [Occ=Once] ->
                                                      case ds9_scj1N of {
                                                        (,) _ [Occ=Dead] u_scj1R [Occ=Once!] ->
                                                            let {
                                                              sat_scj1S [Occ=Once]
                                                                :: GHC.Base.String
                                                              [LclId] =
                                                                  [eta_scj1p
                                                                   ww2_scj1J
                                                                   us_scj1O] \u []
                                                                      Text.Printf.uprintfs
                                                                          ww2_scj1J
                                                                          us_scj1O
                                                                          eta_scj1p;
                                                            } in  u_scj1R ww1_scj1I sat_scj1S;
                                                      };
                                                };
                                          };
                                    };
                          } in 
                            case ds3_scj1w of {
                              [] -> fail_scj1B GHC.Prim.void#;
                              : ds6_scj1U [Occ=Once!] cs_scj1V [Occ=Once] ->
                                  case ds6_scj1U of {
                                    GHC.Types.C# ds7_scj1X [Occ=Once!] ->
                                        case ds7_scj1X of {
                                          __DEFAULT -> fail_scj1B GHC.Prim.void#;
                                          '%'# ->
                                              let {
                                                sat_scj1Z [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [ds1_scj1o eta_scj1p cs_scj1V] \u []
                                                        Text.Printf.uprintfs
                                                            cs_scj1V ds1_scj1o eta_scj1p;
                                              } in  : [f_rcccW sat_scj1Z];
                                        };
                                  };
                            };
                    };
              };
        };

Text.Printf.$fPrintfTypeIO_$cspr
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (() :: *)) =>
     GHC.Base.String -> [Text.Printf.UPrintf] -> GHC.Types.IO a
[GblId,
 Arity=3,
 Str=<S(S),1*U(1*U)><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$d~_scj20 eta_scj21 eta1_scj22]
        case GHC.Types.heq_sel $d~_scj20 of {
          __DEFAULT ->
              let {
                sat_scj24 [Occ=Once] :: GHC.Base.String
                [LclId] =
                    [eta_scj21 eta1_scj22] \u []
                        let {
                          sat_scj23 [Occ=Once, Dmd=<L,1*U>] :: [Text.Printf.UPrintf]
                          [LclId] =
                              [eta1_scj22] \s [] GHC.List.reverse1 eta1_scj22 GHC.Types.[];
                        } in  Text.Printf.uprintfs eta_scj21 sat_scj23 GHC.Types.[];
              } in 
                GHC.IO.Handle.Text.hPutStr'
                    GHC.IO.Handle.FD.stdout sat_scj24 GHC.Types.False;
        };

Text.Printf.$fPrintfTypeIO [InlPrag=INLINE (sat-args=0)]
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (() :: *)) =>
     Text.Printf.PrintfType (GHC.Types.IO a)
[GblId[DFunId(nt)],
 Arity=3,
 Str=<S(S),1*U(1*U)><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Text.Printf.$fPrintfTypeIO_$cspr eta_B3 eta_B2 eta_B1;

Text.Printf.$fPrintfType[]_$cspr
  :: forall c.
     Text.Printf.IsChar c =>
     GHC.Base.String -> [Text.Printf.UPrintf] -> [c]
[GblId,
 Arity=3,
 Str=<L,1*U(A,1*C(U))><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dIsChar_scj25 fmts_scj26 args_scj27]
        let {
          sat_scj29 [Occ=Once, Dmd=<L,1*U>] :: [Text.Printf.UPrintf]
          [LclId] =
              [args_scj27] \s [] GHC.List.reverse1 args_scj27 GHC.Types.[];
        } in 
          case
              Text.Printf.uprintfs fmts_scj26 sat_scj29 GHC.Types.[]
          of
          sat_scj2a
          { __DEFAULT ->
                let {
                  sat_scj28 [Occ=Once, Dmd=<L,C(U)>] :: GHC.Types.Char -> c_ac8Vv
                  [LclId] =
                      [$dIsChar_scj25] \u [] Text.Printf.fromChar $dIsChar_scj25;
                } in  GHC.Base.map sat_scj28 sat_scj2a;
          };

Text.Printf.$fPrintfType[] [InlPrag=INLINE (sat-args=0)]
  :: forall c. Text.Printf.IsChar c => Text.Printf.PrintfType [c]
[GblId[DFunId(nt)],
 Arity=3,
 Str=<L,1*U(A,1*C(U))><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Text.Printf.$fPrintfType[]_$cspr eta_B3 eta_B2 eta_B1;

Text.Printf.$fHPrintfTypeIO_$chspr
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (() :: *)) =>
     GHC.IO.Handle.Types.Handle
     -> GHC.Base.String -> [Text.Printf.UPrintf] -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<S(S),1*U(1*U)><L,U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$d~_scj2b eta_scj2c eta1_scj2d eta2_scj2e]
        case GHC.Types.heq_sel $d~_scj2b of {
          __DEFAULT ->
              let {
                sat_scj2g [Occ=Once] :: GHC.Base.String
                [LclId] =
                    [eta1_scj2d eta2_scj2e] \u []
                        let {
                          sat_scj2f [Occ=Once, Dmd=<L,1*U>] :: [Text.Printf.UPrintf]
                          [LclId] =
                              [eta2_scj2e] \s [] GHC.List.reverse eta2_scj2e;
                        } in  Text.Printf.uprintfs eta1_scj2d sat_scj2f GHC.Types.[];
              } in 
                GHC.IO.Handle.Text.hPutStr' eta_scj2c sat_scj2g GHC.Types.False;
        };

Text.Printf.$fHPrintfTypeIO [InlPrag=INLINE (sat-args=0)]
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (() :: *)) =>
     Text.Printf.HPrintfType (GHC.Types.IO a)
[GblId[DFunId(nt)],
 Arity=4,
 Str=<S(S),1*U(1*U)><L,U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Printf.$fHPrintfTypeIO_$chspr eta_B4 eta_B3 eta_B2 eta_B1;

Text.Printf.FormatParse
  :: GHC.Base.String
     -> GHC.Types.Char -> GHC.Base.String -> Text.Printf.FormatParse
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Text.Printf.FormatParse [eta_B3 eta_B2 eta_B1];

Text.Printf.FieldFormat
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Types.Char
     -> Text.Printf.FieldFormat
[GblId[DataCon],
 Arity=7,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Printf.FieldFormat [eta_B7
                                 eta_B6
                                 eta_B5
                                 eta_B4
                                 eta_B3
                                 eta_B2
                                 eta_B1];

Text.Printf.SignPlus :: Text.Printf.FormatSign
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.SignPlus! [];

Text.Printf.SignSpace :: Text.Printf.FormatSign
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.SignSpace! [];

Text.Printf.LeftAdjust :: Text.Printf.FormatAdjustment
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.LeftAdjust! [];

Text.Printf.ZeroPad :: Text.Printf.FormatAdjustment
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.ZeroPad! [];

Text.Printf.C:IsChar
  :: forall c.
     (c -> GHC.Types.Char)
     -> (GHC.Types.Char -> c) -> Text.Printf.IsChar c
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Printf.C:IsChar [eta_B2 eta_B1];

Text.Printf.C:PrintfArg
  :: forall a.
     (a -> Text.Printf.FieldFormatter)
     -> (a -> Text.Printf.ModifierParser) -> Text.Printf.PrintfArg a
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Printf.C:PrintfArg [eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:07:12.591603804 UTC

Text.Printf.toChar
  :: forall c. Text.Printf.IsChar c => c -> GHC.Types.Char
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_sciA5]
        case v_sciA5 of {
          Text.Printf.C:IsChar v_sciA7 [Occ=Once] _ [Occ=Dead] -> v_sciA7;
        };

Text.Printf.fromChar
  :: forall c. Text.Printf.IsChar c => GHC.Types.Char -> c
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_sciA9]
        case v_sciA9 of {
          Text.Printf.C:IsChar _ [Occ=Dead] v_sciAc [Occ=Once] -> v_sciAc;
        };

Text.Printf.formatArg
  :: forall a.
     Text.Printf.PrintfArg a =>
     a -> Text.Printf.FieldFormatter
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SL),U(U,A)>] =
    [] \r [v_sciAd]
        case v_sciAd of {
          Text.Printf.C:PrintfArg v_sciAf [Occ=Once] _ [Occ=Dead] -> v_sciAf;
        };

Text.Printf.parseFormat
  :: forall a.
     Text.Printf.PrintfArg a =>
     a -> Text.Printf.ModifierParser
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LS),U(A,U)>] =
    [] \r [v_sciAh]
        case v_sciAh of {
          Text.Printf.C:PrintfArg _ [Occ=Dead] v_sciAk [Occ=Once] -> v_sciAk;
        };

Text.Printf.hspr [InlPrag=INLINE]
  :: forall t.
     Text.Printf.HPrintfType t =>
     GHC.IO.Handle.Types.Handle
     -> GHC.Base.String -> [Text.Printf.UPrintf] -> t
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_sciAl] v_sciAl;

Text.Printf.spr [InlPrag=INLINE]
  :: forall t.
     Text.Printf.PrintfType t =>
     GHC.Base.String -> [Text.Printf.UPrintf] -> t
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=OtherCon []] =
    [] \r [v_sciAm] v_sciAm;

Text.Printf.$fIsCharChar_$cfromChar
  :: GHC.Types.Char -> GHC.Types.Char
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [c_sciAn] c_sciAn;

Text.Printf.$fIsCharChar [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.IsChar GHC.Types.Char
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Text.Printf.C:IsChar! [Text.Printf.$fIsCharChar_$cfromChar
                                         Text.Printf.$fIsCharChar_$cfromChar];

Text.Printf.$fHPrintfType(->)_$chspr
  :: forall a r.
     (Text.Printf.PrintfArg a, Text.Printf.HPrintfType r) =>
     GHC.IO.Handle.Types.Handle
     -> GHC.Base.String -> [Text.Printf.UPrintf] -> a -> r
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(C(S))),1*C1(C1(C1(U)))><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dPrintfArg_sciAo
           $dHPrintfType_sciAp
           hdl_sciAq
           fmts_sciAr
           args_sciAs
           a1_sciAt]
        let {
          sat_sciAv [Occ=Once] :: Text.Printf.FieldFormatter
          [LclId] =
              [$dPrintfArg_sciAo a1_sciAt] \u []
                  Text.Printf.formatArg $dPrintfArg_sciAo a1_sciAt; } in
        let {
          sat_sciAu [Occ=Once] :: Text.Printf.ModifierParser
          [LclId] =
              [$dPrintfArg_sciAo a1_sciAt] \u []
                  Text.Printf.parseFormat $dPrintfArg_sciAo a1_sciAt; } in
        let {
          sat_sciAw [Occ=Once]
            :: (Text.Printf.ModifierParser, Text.Printf.FieldFormatter)
          [LclId] =
              CCCS (,)! [sat_sciAu sat_sciAv]; } in
        let {
          sat_sciAx [Occ=Once] :: [Text.Printf.UPrintf]
          [LclId] =
              CCCS :! [sat_sciAw args_sciAs];
        } in  $dHPrintfType_sciAp hdl_sciAq fmts_sciAr sat_sciAx;

Text.Printf.$fHPrintfType(->) [InlPrag=INLINE (sat-args=0)]
  :: forall a r.
     (Text.Printf.PrintfArg a, Text.Printf.HPrintfType r) =>
     Text.Printf.HPrintfType (a -> r)
[GblId[DFunId(nt)],
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(C(S))),1*C1(C1(C1(U)))><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Printf.$fHPrintfType(->)_$chspr
            eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

Text.Printf.$fPrintfType(->)_$cspr
  :: forall a r.
     (Text.Printf.PrintfArg a, Text.Printf.PrintfType r) =>
     GHC.Base.String -> [Text.Printf.UPrintf] -> a -> r
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(S)),1*C1(C1(U))><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dPrintfArg_sciAy
           $dPrintfType_sciAz
           fmts_sciAA
           args_sciAB
           a1_sciAC]
        let {
          sat_sciAE [Occ=Once] :: Text.Printf.FieldFormatter
          [LclId] =
              [$dPrintfArg_sciAy a1_sciAC] \u []
                  Text.Printf.formatArg $dPrintfArg_sciAy a1_sciAC; } in
        let {
          sat_sciAD [Occ=Once] :: Text.Printf.ModifierParser
          [LclId] =
              [$dPrintfArg_sciAy a1_sciAC] \u []
                  Text.Printf.parseFormat $dPrintfArg_sciAy a1_sciAC; } in
        let {
          sat_sciAF [Occ=Once]
            :: (Text.Printf.ModifierParser, Text.Printf.FieldFormatter)
          [LclId] =
              CCCS (,)! [sat_sciAD sat_sciAE]; } in
        let {
          sat_sciAG [Occ=Once] :: [Text.Printf.UPrintf]
          [LclId] =
              CCCS :! [sat_sciAF args_sciAB];
        } in  $dPrintfType_sciAz fmts_sciAA sat_sciAG;

Text.Printf.$fPrintfType(->) [InlPrag=INLINE (sat-args=0)]
  :: forall a r.
     (Text.Printf.PrintfArg a, Text.Printf.PrintfType r) =>
     Text.Printf.PrintfType (a -> r)
[GblId[DFunId(nt)],
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(U),1*C1(U))><C(C(S)),1*C1(C1(U))><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Printf.$fPrintfType(->)_$cspr
            eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

Text.Printf.fmtChar :: Text.Printf.FieldFormat -> GHC.Types.Char
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLS),1*U(A,A,A,A,A,A,1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [ds_sciAH]
        case ds_sciAH of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds7_sciAP [Occ=Once] ->
              ds7_sciAP;
        };

Text.Printf.fmtModifiers
  :: Text.Printf.FieldFormat -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sciAQ]
        case ds_sciAQ of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds6_sciAX [Occ=Once]
                                  _ [Occ=Dead] ->
              ds6_sciAX;
        };

Text.Printf.fmtAlternate
  :: Text.Printf.FieldFormat -> GHC.Types.Bool
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sciAZ]
        case ds_sciAZ of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds5_sciB5 [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds5_sciB5;
        };

Text.Printf.fmtSign
  :: Text.Printf.FieldFormat -> GHC.Base.Maybe Text.Printf.FormatSign
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sciB8]
        case ds_sciB8 of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds4_sciBd [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds4_sciBd;
        };

Text.Printf.fmtAdjust
  :: Text.Printf.FieldFormat
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sciBh]
        case ds_sciBh of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds3_sciBl [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds3_sciBl;
        };

Text.Printf.fmtPrecision
  :: Text.Printf.FieldFormat -> GHC.Base.Maybe GHC.Types.Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sciBq]
        case ds_sciBq of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  ds2_sciBt [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds2_sciBt;
        };

Text.Printf.fmtWidth
  :: Text.Printf.FieldFormat -> GHC.Base.Maybe GHC.Types.Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLL),1*U(1*U,A,A,A,A,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sciBz]
        case ds_sciBz of {
          Text.Printf.FieldFormat ds1_sciBB [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds1_sciBB;
        };

Text.Printf.fpRest :: Text.Printf.FormatParse -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLS),1*U(A,A,1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_sciBI]
        case ds_sciBI of {
          Text.Printf.FormatParse _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ds3_sciBM [Occ=Once] ->
              ds3_sciBM;
        };

Text.Printf.fpChar :: Text.Printf.FormatParse -> GHC.Types.Char
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),1*U(A,1*U(U),A)>m,
 Unf=OtherCon []] =
    [] \r [ds_sciBN]
        case ds_sciBN of {
          Text.Printf.FormatParse _ [Occ=Dead]
                                  ds2_sciBQ [Occ=Once]
                                  _ [Occ=Dead] ->
              ds2_sciBQ;
        };

Text.Printf.fpModifiers
  :: Text.Printf.FormatParse -> GHC.Base.String
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),1*U(1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [ds_sciBS]
        case ds_sciBS of {
          Text.Printf.FormatParse ds1_sciBU [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead] ->
              ds1_sciBU;
        };

Text.Printf.printf
  :: forall r. Text.Printf.PrintfType r => GHC.Base.String -> r
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(C(S)),1*C1(C1(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dPrintfType_sciBX fmts_sciBY]
        $dPrintfType_sciBX fmts_sciBY GHC.Types.[];

Text.Printf.hPrintf
  :: forall r.
     Text.Printf.HPrintfType r =>
     GHC.IO.Handle.Types.Handle -> GHC.Base.String -> r
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(C(C(S))),1*C1(C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dHPrintfType_sciBZ hdl_sciC0 fmts_sciC1]
        $dHPrintfType_sciBZ hdl_sciC0 fmts_sciC1 GHC.Types.[];

Text.Printf.vFmt
  :: GHC.Types.Char
     -> Text.Printf.FieldFormat -> Text.Printf.FieldFormat
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S(LLLLLLS(S)),1*U(U,U,U,U,U,U,U(U))>m,
 Unf=OtherCon []] =
    [] \r [c_sciC2 ufmt_sciC3]
        case ufmt_sciC3 of wild_sciC4 {
          Text.Printf.FieldFormat ds_sciC5 [Occ=Once]
                                  ds1_sciC6 [Occ=Once]
                                  ds2_sciC7 [Occ=Once]
                                  ds3_sciC8 [Occ=Once]
                                  ds4_sciC9 [Occ=Once]
                                  ds5_sciCa [Occ=Once]
                                  ds6_sciCb [Occ=Once!] ->
              case ds6_sciCb of {
                GHC.Types.C# ds7_sciCd [Occ=Once!] ->
                    case ds7_sciCd of {
                      __DEFAULT -> wild_sciC4;
                      'v'# ->
                          Text.Printf.FieldFormat [ds_sciC5
                                                   ds1_sciC6
                                                   ds2_sciC7
                                                   ds3_sciC8
                                                   ds4_sciC9
                                                   ds5_sciCa
                                                   c_sciC2];
                    };
              };
        };

lvl_rccbg :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: "#;

Text.Printf.perror :: forall a. GHC.Base.String -> a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [s_sciCf]
        case
            GHC.CString.unpackAppendCString# lvl_rccbg s_sciCf
        of
        sat_sciCg
        { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciCg;
        };

lvl1_rccbh :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShowChar3 GHC.Types.[]];

lvl2_rccbi :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bad formatting char "#;

Text.Printf.$werrorBadFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Prim.Char# -> a
[GblId, Arity=1, Str=<B,1*U>x, Unf=OtherCon []] =
    [] \r [ww_sciCh]
        let {
          sat_sciCl [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sciCh] \u []
                  let {
                    sat_sciCk [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww_sciCh] \u []
                            case ww_sciCh of ds1_sciCi {
                              __DEFAULT ->
                                  let {
                                    sat_sciCj [Occ=Once] :: [GHC.Types.Char]
                                    [LclId] =
                                        [ds1_sciCi] \u []
                                            GHC.Show.$wshowLitChar ds1_sciCi lvl1_rccbh;
                                  } in  : [GHC.Show.$fShowChar3 sat_sciCj];
                              '\''# -> GHC.Show.$fShowChar1;
                            };
                  } in  GHC.CString.unpackAppendCString# lvl2_rccbi sat_sciCk;
        } in 
          case
              GHC.CString.unpackAppendCString# lvl_rccbg sat_sciCl
          of
          sat_sciCm
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciCm;
          };

Text.Printf.errorBadFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Types.Char -> a
[GblId, Arity=1, Str=<B,1*U(1*U)>x, Unf=OtherCon []] =
    [] \r [w_sciCn]
        case w_sciCn of {
          GHC.Types.C# ww1_sciCp [Occ=Once] ->
              Text.Printf.$werrorBadFormat ww1_sciCp;
        };

lvl3_rccbj :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: formatting string ended prematurely"#;

Text.Printf.errorShortFormat :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl3_rccbj of sat_sciCq {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciCq;
        };

Text.Printf.$dmparseFormat
  :: forall a.
     Text.Printf.PrintfArg a =>
     a -> Text.Printf.ModifierParser
[GblId, Arity=3, Str=<L,A><L,A><S,1*U>m, Unf=OtherCon []] =
    [] \r [$dPrintfArg_sciCr ds_sciCs ds1_sciCt]
        case ds1_sciCt of {
          [] -> Text.Printf.errorShortFormat;
          : c_sciCv [Occ=Once] cs_sciCw [Occ=Once] ->
              Text.Printf.FormatParse [GHC.Types.[] c_sciCv cs_sciCw];
        };

lvl4_rccbk :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: argument list ended prematurely"#;

Text.Printf.errorMissingArgument :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl4_rccbk of sat_sciCx {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciCx;
        };

lvl5_rccbl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: bad argument"#;

Text.Printf.errorBadArgument :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl5_rccbl of sat_sciCy {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciCy;
        };

Text.Printf.$fPrintfArgDouble9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "-"#;

Text.Printf.$fPrintfArgDouble8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgDouble9;

lvl6_rccbm :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: internal error: impossible dfmt"#;

Text.Printf.$fPrintfArgDouble7
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Double -> GHC.Show.ShowS
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl6_rccbm of sat_sciCz {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciCz;
        };

Text.Printf.$w$sdfmt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char#
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Bool
     -> GHC.Types.Double
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId,
 Arity=4,
 Str=<S,U><L,U><L,1*U><L,1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ww_sciCA w_sciCB w1_sciCC w2_sciCD]
        case ord# [ww_sciCA] of sat_sciCF {
          __DEFAULT ->
              case __pkg_ccall base-4.11.0.0 [sat_sciCF GHC.Prim.realWorld#] of {
                Unit# ds1_sciCI [Occ=Once!] ->
                    case ord# [ww_sciCA] of sat_sciCK {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [sat_sciCK GHC.Prim.realWorld#] of {
                            Unit# ds3_sciCN ->
                                case int2Word# [ds3_sciCN] of sat_sciCO {
                                  __DEFAULT ->
                                      case leWord# [sat_sciCO 1114111##] of {
                                        __DEFAULT -> GHC.Char.$wlvl ds3_sciCN;
                                        1# ->
                                            let-no-escape {
                                              $j_sciCR [Occ=Once*!T[1], Dmd=<C(S),1*C1(U(U,U))>]
                                                :: [GHC.Types.Char]
                                                   -> (# GHC.Base.String, GHC.Base.String #)
                                              [LclId[JoinId(1)],
                                               Arity=1,
                                               Str=<S,1*U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ds1_sciCI] \r [karg_sciCS]
                                                      case ds1_sciCI of {
                                                        __DEFAULT ->
                                                            case
                                                                GHC.Base.map
                                                                    GHC.Unicode.toUpper karg_sciCS
                                                            of
                                                            wild4_sciCU
                                                            { [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sciCV [Occ=Once!]
                                                                cs_sciCW [Occ=Once] ->
                                                                  case ds4_sciCV of {
                                                                    GHC.Types.C# ds5_sciCY [Occ=Once!] ->
                                                                        case ds5_sciCY of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sciCU];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sciCW];
                                                                        };
                                                                  };
                                                            };
                                                        0# ->
                                                            case karg_sciCS of wild4_sciD0 {
                                                              [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sciD1 [Occ=Once!]
                                                                cs_sciD2 [Occ=Once] ->
                                                                  case ds4_sciD1 of {
                                                                    GHC.Types.C# ds5_sciD4 [Occ=Once!] ->
                                                                        case ds5_sciD4 of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sciD0];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sciD2];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              case chr# [ds3_sciCN] of {
                                                __DEFAULT -> Text.Printf.$fPrintfArgDouble7;
                                                'e'# ->
                                                    case w2_sciCD of {
                                                      GHC.Types.D# ww2_sciD9 [Occ=Once] ->
                                                          case
                                                              GHC.Float.$w$sformatRealFloatAlt
                                                                  GHC.Float.FFExponent
                                                                  w_sciCB
                                                                  GHC.Types.False
                                                                  ww2_sciD9
                                                          of
                                                          sat_sciDa
                                                          { __DEFAULT -> $j_sciCR sat_sciDa;
                                                          };
                                                    };
                                                'f'# ->
                                                    case w1_sciCC of {
                                                      GHC.Types.False ->
                                                          case w2_sciCD of {
                                                            GHC.Types.D# ww2_sciDd [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt
                                                                        GHC.Float.FFFixed
                                                                        w_sciCB
                                                                        GHC.Types.False
                                                                        ww2_sciDd
                                                                of
                                                                sat_sciDe
                                                                { __DEFAULT -> $j_sciCR sat_sciDe;
                                                                };
                                                          };
                                                      GHC.Types.True ->
                                                          case w2_sciCD of {
                                                            GHC.Types.D# ww2_sciDg [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt
                                                                        GHC.Float.FFFixed
                                                                        w_sciCB
                                                                        GHC.Types.True
                                                                        ww2_sciDg
                                                                of
                                                                sat_sciDh
                                                                { __DEFAULT -> $j_sciCR sat_sciDh;
                                                                };
                                                          };
                                                    };
                                                'g'# ->
                                                    case w1_sciCC of {
                                                      GHC.Types.False ->
                                                          case w2_sciCD of {
                                                            GHC.Types.D# ww2_sciDk [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt
                                                                        GHC.Float.FFGeneric
                                                                        w_sciCB
                                                                        GHC.Types.False
                                                                        ww2_sciDk
                                                                of
                                                                sat_sciDl
                                                                { __DEFAULT -> $j_sciCR sat_sciDl;
                                                                };
                                                          };
                                                      GHC.Types.True ->
                                                          case w2_sciCD of {
                                                            GHC.Types.D# ww2_sciDn [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt
                                                                        GHC.Float.FFGeneric
                                                                        w_sciCB
                                                                        GHC.Types.True
                                                                        ww2_sciDn
                                                                of
                                                                sat_sciDo
                                                                { __DEFAULT -> $j_sciCR sat_sciDo;
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

Text.Printf.$fPrintfArgFloat1
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Float -> GHC.Show.ShowS
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl6_rccbm of sat_sciDp {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciDp;
        };

Text.Printf.$w$sdfmt1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char#
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Bool
     -> GHC.Types.Float
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId,
 Arity=4,
 Str=<S,U><L,U><L,1*U><L,1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ww_sciDq w_sciDr w1_sciDs w2_sciDt]
        case ord# [ww_sciDq] of sat_sciDv {
          __DEFAULT ->
              case __pkg_ccall base-4.11.0.0 [sat_sciDv GHC.Prim.realWorld#] of {
                Unit# ds1_sciDy [Occ=Once!] ->
                    case ord# [ww_sciDq] of sat_sciDA {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [sat_sciDA GHC.Prim.realWorld#] of {
                            Unit# ds3_sciDD ->
                                case int2Word# [ds3_sciDD] of sat_sciDE {
                                  __DEFAULT ->
                                      case leWord# [sat_sciDE 1114111##] of {
                                        __DEFAULT -> GHC.Char.$wlvl ds3_sciDD;
                                        1# ->
                                            let-no-escape {
                                              $j_sciDH [Occ=Once*!T[1], Dmd=<C(S),1*C1(U(U,U))>]
                                                :: [GHC.Types.Char]
                                                   -> (# GHC.Base.String, GHC.Base.String #)
                                              [LclId[JoinId(1)],
                                               Arity=1,
                                               Str=<S,1*U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ds1_sciDy] \r [karg_sciDI]
                                                      case ds1_sciDy of {
                                                        __DEFAULT ->
                                                            case
                                                                GHC.Base.map
                                                                    GHC.Unicode.toUpper karg_sciDI
                                                            of
                                                            wild4_sciDK
                                                            { [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sciDL [Occ=Once!]
                                                                cs_sciDM [Occ=Once] ->
                                                                  case ds4_sciDL of {
                                                                    GHC.Types.C# ds5_sciDO [Occ=Once!] ->
                                                                        case ds5_sciDO of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sciDK];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sciDM];
                                                                        };
                                                                  };
                                                            };
                                                        0# ->
                                                            case karg_sciDI of wild4_sciDQ {
                                                              [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sciDR [Occ=Once!]
                                                                cs_sciDS [Occ=Once] ->
                                                                  case ds4_sciDR of {
                                                                    GHC.Types.C# ds5_sciDU [Occ=Once!] ->
                                                                        case ds5_sciDU of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sciDQ];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sciDS];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              case chr# [ds3_sciDD] of {
                                                __DEFAULT -> Text.Printf.$fPrintfArgFloat1;
                                                'e'# ->
                                                    case w2_sciDt of {
                                                      GHC.Types.F# ww2_sciDZ [Occ=Once] ->
                                                          case
                                                              GHC.Float.$w$sformatRealFloatAlt1
                                                                  GHC.Float.FFExponent
                                                                  w_sciDr
                                                                  GHC.Types.False
                                                                  ww2_sciDZ
                                                          of
                                                          sat_sciE0
                                                          { __DEFAULT -> $j_sciDH sat_sciE0;
                                                          };
                                                    };
                                                'f'# ->
                                                    case w1_sciDs of {
                                                      GHC.Types.False ->
                                                          case w2_sciDt of {
                                                            GHC.Types.F# ww2_sciE3 [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt1
                                                                        GHC.Float.FFFixed
                                                                        w_sciDr
                                                                        GHC.Types.False
                                                                        ww2_sciE3
                                                                of
                                                                sat_sciE4
                                                                { __DEFAULT -> $j_sciDH sat_sciE4;
                                                                };
                                                          };
                                                      GHC.Types.True ->
                                                          case w2_sciDt of {
                                                            GHC.Types.F# ww2_sciE6 [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt1
                                                                        GHC.Float.FFFixed
                                                                        w_sciDr
                                                                        GHC.Types.True
                                                                        ww2_sciE6
                                                                of
                                                                sat_sciE7
                                                                { __DEFAULT -> $j_sciDH sat_sciE7;
                                                                };
                                                          };
                                                    };
                                                'g'# ->
                                                    case w1_sciDs of {
                                                      GHC.Types.False ->
                                                          case w2_sciDt of {
                                                            GHC.Types.F# ww2_sciEa [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt1
                                                                        GHC.Float.FFGeneric
                                                                        w_sciDr
                                                                        GHC.Types.False
                                                                        ww2_sciEa
                                                                of
                                                                sat_sciEb
                                                                { __DEFAULT -> $j_sciDH sat_sciEb;
                                                                };
                                                          };
                                                      GHC.Types.True ->
                                                          case w2_sciDt of {
                                                            GHC.Types.F# ww2_sciEd [Occ=Once] ->
                                                                case
                                                                    GHC.Float.$w$sformatRealFloatAlt1
                                                                        GHC.Float.FFGeneric
                                                                        w_sciDr
                                                                        GHC.Types.True
                                                                        ww2_sciEd
                                                                of
                                                                sat_sciEe
                                                                { __DEFAULT -> $j_sciDH sat_sciEe;
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

Text.Printf.formatRealFloat1
  :: forall a. GHC.Base.Maybe GHC.Types.Int -> a -> GHC.Show.ShowS
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl6_rccbm of sat_sciEf {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciEf;
        };

Text.Printf.$wdfmt [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Float.RealFloat a =>
     GHC.Prim.Char#
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Types.Bool
     -> a
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId,
 Arity=5,
 Str=<L,U(U(U(U(A,A,A,C(U),A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,A,A,A,A,A),A,C(U),C(U(U)),C(U(1*U(U),A)),C(U(U,U(U))),A,A,A,A,C(U),C(U),A,C(U),A,A)><S,U><L,U><L,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sciEg ww_sciEh w1_sciEi w2_sciEj w3_sciEk]
        case ord# [ww_sciEh] of sat_sciEm {
          __DEFAULT ->
              case __pkg_ccall base-4.11.0.0 [sat_sciEm GHC.Prim.realWorld#] of {
                Unit# ds1_sciEp [Occ=Once!] ->
                    case ord# [ww_sciEh] of sat_sciEr {
                      __DEFAULT ->
                          case __pkg_ccall base-4.11.0.0 [sat_sciEr GHC.Prim.realWorld#] of {
                            Unit# ds3_sciEu ->
                                case int2Word# [ds3_sciEu] of sat_sciEv {
                                  __DEFAULT ->
                                      case leWord# [sat_sciEv 1114111##] of {
                                        __DEFAULT -> GHC.Char.$wlvl ds3_sciEu;
                                        1# ->
                                            let-no-escape {
                                              $j_sciEy [Occ=Once*!T[1], Dmd=<C(S),1*C1(U(U,U))>]
                                                :: [GHC.Types.Char]
                                                   -> (# GHC.Base.String, GHC.Base.String #)
                                              [LclId[JoinId(1)],
                                               Arity=1,
                                               Str=<S,1*U>,
                                               Unf=OtherCon []] =
                                                  sat-only [ds1_sciEp] \r [karg_sciEz]
                                                      case ds1_sciEp of {
                                                        __DEFAULT ->
                                                            case
                                                                GHC.Base.map
                                                                    GHC.Unicode.toUpper karg_sciEz
                                                            of
                                                            wild4_sciEB
                                                            { [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sciEC [Occ=Once!]
                                                                cs_sciED [Occ=Once] ->
                                                                  case ds4_sciEC of {
                                                                    GHC.Types.C# ds5_sciEF [Occ=Once!] ->
                                                                        case ds5_sciEF of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sciEB];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sciED];
                                                                        };
                                                                  };
                                                            };
                                                        0# ->
                                                            case karg_sciEz of wild4_sciEH {
                                                              [] ->
                                                                  (#,#) [GHC.Types.[] GHC.Types.[]];
                                                              : ds4_sciEI [Occ=Once!]
                                                                cs_sciEJ [Occ=Once] ->
                                                                  case ds4_sciEI of {
                                                                    GHC.Types.C# ds5_sciEL [Occ=Once!] ->
                                                                        case ds5_sciEL of {
                                                                          __DEFAULT ->
                                                                              (#,#) [GHC.Types.[]
                                                                                     wild4_sciEH];
                                                                          '-'# ->
                                                                              (#,#) [Text.Printf.$fPrintfArgDouble8
                                                                                     cs_sciEJ];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              case chr# [ds3_sciEu] of {
                                                __DEFAULT -> Text.Printf.formatRealFloat1;
                                                'e'# ->
                                                    case
                                                        GHC.Float.formatRealFloatAlt
                                                            w_sciEg
                                                            GHC.Float.FFExponent
                                                            w1_sciEi
                                                            GHC.Types.False
                                                            w3_sciEk
                                                    of
                                                    sat_sciEP
                                                    { __DEFAULT -> $j_sciEy sat_sciEP;
                                                    };
                                                'f'# ->
                                                    case w2_sciEj of {
                                                      GHC.Types.False ->
                                                          case
                                                              GHC.Float.formatRealFloatAlt
                                                                  w_sciEg
                                                                  GHC.Float.FFFixed
                                                                  w1_sciEi
                                                                  GHC.Types.False
                                                                  w3_sciEk
                                                          of
                                                          sat_sciER
                                                          { __DEFAULT -> $j_sciEy sat_sciER;
                                                          };
                                                      GHC.Types.True ->
                                                          case
                                                              GHC.Float.formatRealFloatAlt
                                                                  w_sciEg
                                                                  GHC.Float.FFFixed
                                                                  w1_sciEi
                                                                  GHC.Types.True
                                                                  w3_sciEk
                                                          of
                                                          sat_sciES
                                                          { __DEFAULT -> $j_sciEy sat_sciES;
                                                          };
                                                    };
                                                'g'# ->
                                                    case w2_sciEj of {
                                                      GHC.Types.False ->
                                                          case
                                                              GHC.Float.formatRealFloatAlt
                                                                  w_sciEg
                                                                  GHC.Float.FFGeneric
                                                                  w1_sciEi
                                                                  GHC.Types.False
                                                                  w3_sciEk
                                                          of
                                                          sat_sciEU
                                                          { __DEFAULT -> $j_sciEy sat_sciEU;
                                                          };
                                                      GHC.Types.True ->
                                                          case
                                                              GHC.Float.formatRealFloatAlt
                                                                  w_sciEg
                                                                  GHC.Float.FFGeneric
                                                                  w1_sciEi
                                                                  GHC.Types.True
                                                                  w3_sciEk
                                                          of
                                                          sat_sciEV
                                                          { __DEFAULT -> $j_sciEy sat_sciEV;
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

Text.Printf.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Text.Printf.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$trModule4];

Text.Printf.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Text.Printf"#;

Text.Printf.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$trModule2];

Text.Printf.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Text.Printf.$trModule3
                                     Text.Printf.$trModule1];

$krep_rccbn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcBool
                                              GHC.Types.[]];

$krep1_rccbo :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rccbp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Handle.Types.$tcHandle
                                              GHC.Types.[]];

$krep3_rccbq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep4_rccbr :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep5_rccbs :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_rccbo GHC.Types.[]];

$krep6_rccbt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep5_rccbs];

$krep7_rccbu :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_rccbq GHC.Types.[]];

$krep8_rccbv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep7_rccbu];

$krep9_rccbw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep8_rccbv];

Text.Printf.$tcHPrintfType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep4_rccbr];

$krep10_rccbx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep11_rccby :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_rccbx $krep3_rccbq];

$krep12_rccbz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rccbq $krep10_rccbx];

Text.Printf.$tcIsChar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IsChar"#;

Text.Printf.$tcIsChar1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcIsChar2];

Text.Printf.$tcIsChar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [660225335504909605##
                                    5800397900948792736##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcIsChar1
                                    0#
                                    Text.Printf.$tcHPrintfType1];

$krep13_rccbA :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep10_rccbx GHC.Types.[]];

$krep14_rccbB :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcIsChar
                                              $krep13_rccbA];

$krep15_rccbC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_rccbz $krep14_rccbB];

Text.Printf.$tc'C:IsChar1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_rccby $krep15_rccbC];

Text.Printf.$tc'C:IsChar3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:IsChar"#;

Text.Printf.$tc'C:IsChar2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'C:IsChar3];

Text.Printf.$tc'C:IsChar :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15586488259906363003##
                                    17643381548147423706##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'C:IsChar2
                                    1#
                                    Text.Printf.$tc'C:IsChar1];

Text.Printf.$tcFormatAdjustment2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FormatAdjustment"#;

Text.Printf.$tcFormatAdjustment1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcFormatAdjustment2];

Text.Printf.$tcFormatAdjustment :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7532892403054408380##
                                    17299592949916286280##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcFormatAdjustment1
                                    0#
                                    GHC.Types.krep$*];

Text.Printf.$tc'LeftAdjust1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcFormatAdjustment
                                              GHC.Types.[]];

Text.Printf.$tc'LeftAdjust3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'LeftAdjust"#;

Text.Printf.$tc'LeftAdjust2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'LeftAdjust3];

Text.Printf.$tc'LeftAdjust :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3724221440131574524##
                                    12430068224974793646##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'LeftAdjust2
                                    0#
                                    Text.Printf.$tc'LeftAdjust1];

Text.Printf.$tc'ZeroPad2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ZeroPad"#;

Text.Printf.$tc'ZeroPad1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'ZeroPad2];

Text.Printf.$tc'ZeroPad :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4688343247861108158##
                                    7307113320833774212##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'ZeroPad1
                                    0#
                                    Text.Printf.$tc'LeftAdjust1];

$krep16_rccbD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$tc'LeftAdjust1 GHC.Types.[]];

$krep17_rccbE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep16_rccbD];

Text.Printf.$tcFormatSign2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FormatSign"#;

Text.Printf.$tcFormatSign1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcFormatSign2];

Text.Printf.$tcFormatSign :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [35986971025498593##
                                    9833165860459639351##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcFormatSign1
                                    0#
                                    GHC.Types.krep$*];

Text.Printf.$tc'SignPlus1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcFormatSign
                                              GHC.Types.[]];

Text.Printf.$tc'SignPlus3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SignPlus"#;

Text.Printf.$tc'SignPlus2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'SignPlus3];

Text.Printf.$tc'SignPlus :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [18302065795158432479##
                                    11830941225366619964##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'SignPlus2
                                    0#
                                    Text.Printf.$tc'SignPlus1];

Text.Printf.$tc'SignSpace2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SignSpace"#;

Text.Printf.$tc'SignSpace1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'SignSpace2];

Text.Printf.$tc'SignSpace :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [111286303843533919##
                                    13624428119758319457##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'SignSpace1
                                    0#
                                    Text.Printf.$tc'SignPlus1];

$krep18_rccbF :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$tc'SignPlus1 GHC.Types.[]];

$krep19_rccbG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep18_rccbF];

Text.Printf.$tcFieldFormat2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FieldFormat"#;

Text.Printf.$tcFieldFormat1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcFieldFormat2];

Text.Printf.$tcFieldFormat :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12330325036165183082##
                                    5846211506648458401##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcFieldFormat1
                                    0#
                                    GHC.Types.krep$*];

$krep20_rccbH :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcFieldFormat
                                              GHC.Types.[]];

$krep21_rccbI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep20_rccbH $krep9_rccbw];

$krep22_rccbJ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_rccbx $krep21_rccbI];

$krep23_rccbK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rccbq $krep20_rccbH];

$krep24_rccbL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep23_rccbK];

$krep25_rccbM :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_rccbn $krep24_rccbL];

$krep26_rccbN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep19_rccbG $krep25_rccbM];

$krep27_rccbO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep17_rccbE $krep26_rccbN];

$krep28_rccbP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_rccbt $krep27_rccbO];

Text.Printf.$tc'FieldFormat1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_rccbt $krep28_rccbP];

Text.Printf.$tc'FieldFormat3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FieldFormat"#;

Text.Printf.$tc'FieldFormat2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'FieldFormat3];

Text.Printf.$tc'FieldFormat :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11348432599023007686##
                                    6814357301696130957##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'FieldFormat2
                                    0#
                                    Text.Printf.$tc'FieldFormat1];

Text.Printf.$tcFormatParse2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FormatParse"#;

Text.Printf.$tcFormatParse1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcFormatParse2];

Text.Printf.$tcFormatParse :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5517048358589873764##
                                    8326725038359313810##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcFormatParse1
                                    0#
                                    GHC.Types.krep$*];

$krep29_rccbQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcFormatParse
                                              GHC.Types.[]];

$krep30_rccbR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep29_rccbQ];

$krep31_rccbS :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep10_rccbx $krep30_rccbR];

$krep32_rccbT :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_rccbq $krep30_rccbR];

Text.Printf.$tc'FormatParse1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep32_rccbT];

Text.Printf.$tc'FormatParse3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'FormatParse"#;

Text.Printf.$tc'FormatParse2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'FormatParse3];

Text.Printf.$tc'FormatParse :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [549767054447046648##
                                    1116614444935710689##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'FormatParse2
                                    0#
                                    Text.Printf.$tc'FormatParse1];

$krep33_rccbU :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep21_rccbI GHC.Types.[]];

$krep34_rccbV :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep30_rccbR $krep33_rccbU];

$krep35_rccbW :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep34_rccbV];

$krep36_rccbX :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep35_rccbW GHC.Types.[]];

$krep37_rccbY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep36_rccbX];

$krep38_rccbZ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_rccbY $krep10_rccbx];

$krep39_rccc0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rccbv $krep38_rccbZ];

$krep40_rccc1 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_rccbp $krep39_rccc0];

Text.Printf.$tcPrintfArg2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "PrintfArg"#;

Text.Printf.$tcPrintfArg1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcPrintfArg2];

Text.Printf.$tcPrintfArg :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14684532792197610005##
                                    5760551473172190061##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcPrintfArg1
                                    0#
                                    Text.Printf.$tcHPrintfType1];

$krep41_rccc2 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcPrintfArg
                                              $krep13_rccbA];

$krep42_rccc3 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep31_rccbS $krep41_rccc2];

Text.Printf.$tc'C:PrintfArg1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_rccbJ $krep42_rccc3];

Text.Printf.$tc'C:PrintfArg3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:PrintfArg"#;

Text.Printf.$tc'C:PrintfArg2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'C:PrintfArg3];

Text.Printf.$tc'C:PrintfArg :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11923342243699112506##
                                    8346787778082712340##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'C:PrintfArg2
                                    1#
                                    Text.Printf.$tc'C:PrintfArg1];

Text.Printf.$tcHPrintfType3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HPrintfType"#;

Text.Printf.$tcHPrintfType2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcHPrintfType3];

Text.Printf.$tcHPrintfType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13104883804062546050##
                                    15477829653093370802##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcHPrintfType2
                                    0#
                                    Text.Printf.$tcHPrintfType1];

$krep43_rccc4 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcHPrintfType
                                              $krep13_rccbA];

Text.Printf.$tc'C:HPrintfType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep40_rccc1 $krep43_rccc4];

Text.Printf.$tc'C:HPrintfType3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:HPrintfType"#;

Text.Printf.$tc'C:HPrintfType2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'C:HPrintfType3];

Text.Printf.$tc'C:HPrintfType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16716104921226462095##
                                    4043378586122981700##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'C:HPrintfType2
                                    1#
                                    Text.Printf.$tc'C:HPrintfType1];

Text.Printf.$tcPrintfType2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "PrintfType"#;

Text.Printf.$tcPrintfType1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tcPrintfType2];

Text.Printf.$tcPrintfType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16100185319445667829##
                                    10371264040433388740##
                                    Text.Printf.$trModule
                                    Text.Printf.$tcPrintfType1
                                    0#
                                    Text.Printf.$tcHPrintfType1];

$krep44_rccc5 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.Printf.$tcPrintfType
                                              $krep13_rccbA];

Text.Printf.$tc'C:PrintfType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep39_rccc0 $krep44_rccc5];

Text.Printf.$tc'C:PrintfType3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:PrintfType"#;

Text.Printf.$tc'C:PrintfType2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Text.Printf.$tc'C:PrintfType3];

Text.Printf.$tc'C:PrintfType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6199067271817529220##
                                    10070277982064886839##
                                    Text.Printf.$trModule
                                    Text.Printf.$tc'C:PrintfType2
                                    1#
                                    Text.Printf.$tc'C:PrintfType1];

Text.Printf.$fPrintfArgChar24 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "hh"#;

Text.Printf.$fPrintfArgChar23 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar24;

sat_sciEW :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [128#];

sat_sciEX :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciEW GHC.Types.[]];

Text.Printf.$fPrintfArgChar22 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_sciEX;

Text.Printf.$fPrintfArgChar21
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar23
                        Text.Printf.$fPrintfArgChar22];

Text.Printf.$fPrintfArgChar20 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "h"#;

Text.Printf.$fPrintfArgChar19 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar20;

sat_sciEY :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [32768#];

sat_sciEZ :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciEY GHC.Types.[]];

Text.Printf.$fPrintfArgChar18 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_sciEZ;

Text.Printf.$fPrintfArgChar17
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar19
                        Text.Printf.$fPrintfArgChar18];

Text.Printf.$fPrintfArgChar16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "l"#;

Text.Printf.$fPrintfArgChar15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar16;

sat_sciF1 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_sciF2 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciF1 GHC.Types.[]];

sat_sciF0 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_sciF3 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciF0 sat_sciF2];

Text.Printf.$fPrintfArgChar14 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_sciF3;

Text.Printf.$fPrintfArgChar13
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar15
                        Text.Printf.$fPrintfArgChar14];

Text.Printf.$fPrintfArgChar12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ll"#;

Text.Printf.$fPrintfArgChar11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar12;

sat_sciF6 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

sat_sciF7 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciF6 GHC.Types.[]];

sat_sciF5 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_sciF8 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciF5 sat_sciF7];

sat_sciF4 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_sciF9 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciF4 sat_sciF8];

Text.Printf.$fPrintfArgChar7 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.False sat_sciF9;

Text.Printf.$fPrintfArgChar10
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar11
                        Text.Printf.$fPrintfArgChar7];

Text.Printf.$fPrintfArgChar9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "L"#;

Text.Printf.$fPrintfArgChar8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgChar9;

Text.Printf.$fPrintfArgChar6
  :: ([GHC.Types.Char], GHC.Integer.Type.Integer)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [Text.Printf.$fPrintfArgChar8
                        Text.Printf.$fPrintfArgChar7];

Text.Printf.$fPrintfArgChar5
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar6 GHC.Types.[]];

Text.Printf.$fPrintfArgChar4
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar10
                      Text.Printf.$fPrintfArgChar5];

Text.Printf.$fPrintfArgChar3
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar13
                      Text.Printf.$fPrintfArgChar4];

Text.Printf.$fPrintfArgChar2
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar17
                      Text.Printf.$fPrintfArgChar3];

Text.Printf.intModifierMap
  :: [(GHC.Base.String, GHC.Integer.Type.Integer)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Text.Printf.$fPrintfArgChar21
                      Text.Printf.$fPrintfArgChar2];

lvl7_rccc6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: unknown format modifier"#;

Text.Printf.$fPrintfArgInt2
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl7_rccc6 of sat_sciFa {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciFa;
        };

Text.Printf.$wfixupMods [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.String
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ww_sciFb w_sciFc]
        case ww_sciFb of wild_sciFd {
          [] -> w_sciFc;
          : _ [Occ=Dead] _ [Occ=Dead] ->
              case
                  GHC.List.lookup
                      GHC.Classes.$fEq[]_$s$fEq[]1 wild_sciFd Text.Printf.intModifierMap
              of
              wild1_sciFg
              { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                GHC.Base.Just _ [Occ=Dead] -> wild1_sciFg;
              };
        };

Text.Printf.fixupMods [InlPrag=NOUSERINLINE[0]]
  :: Text.Printf.FieldFormat
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Str=<S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)><L,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciFi w1_sciFj]
        case w_sciFi of {
          Text.Printf.FieldFormat _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ww6_sciFq [Occ=Once]
                                  _ [Occ=Dead] ->
              Text.Printf.$wfixupMods ww6_sciFq w1_sciFj;
        };

Text.Printf.$wparseIntFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Base.String -> Text.Printf.FormatParse
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_sciFs]
        let {
          go_sciFt [Occ=LoopBreaker]
            :: [([GHC.Types.Char], GHC.Integer.Type.Integer)]
               -> GHC.Base.Maybe Text.Printf.FormatParse
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [w_sciFs go_sciFt] \r [ds_sciFu]
                  case ds_sciFu of {
                    [] -> GHC.Base.Nothing [];
                    : y_sciFw [Occ=Once!] ys_sciFx [Occ=Once] ->
                        case y_sciFw of {
                          (,) p_sciFz _ [Occ=Dead] ->
                              case go_sciFt ys_sciFx of wild2_sciFB {
                                GHC.Base.Nothing ->
                                    case
                                        Data.OldList.stripPrefix
                                            GHC.Classes.$fEqChar p_sciFz w_sciFs
                                    of
                                    { GHC.Base.Nothing -> GHC.Base.Nothing [];
                                      GHC.Base.Just x_sciFD [Occ=Once!] ->
                                          case x_sciFD of {
                                            [] -> Text.Printf.errorShortFormat;
                                            : c_sciFF [Occ=Once] cs_sciFG [Occ=Once] ->
                                                let {
                                                  sat_sciFH [Occ=Once] :: Text.Printf.FormatParse
                                                  [LclId] =
                                                      CCCS Text.Printf.FormatParse! [p_sciFz
                                                                                     c_sciFF
                                                                                     cs_sciFG];
                                                } in  GHC.Base.Just [sat_sciFH];
                                          };
                                    };
                                GHC.Base.Just ds2_sciFI [Occ=Once!] ->
                                    case ds2_sciFI of {
                                      Text.Printf.FormatParse p0_sciFK [Occ=Once]
                                                              _ [Occ=Dead]
                                                              _ [Occ=Dead] ->
                                          case GHC.List.$wlenAcc p0_sciFK 0# of ww2_sciFN {
                                            __DEFAULT ->
                                                case GHC.List.$wlenAcc p_sciFz 0# of ww1_sciFO {
                                                  __DEFAULT ->
                                                      case >=# [ww2_sciFN ww1_sciFO] of {
                                                        __DEFAULT ->
                                                            case
                                                                Data.OldList.stripPrefix
                                                                    GHC.Classes.$fEqChar
                                                                    p_sciFz
                                                                    w_sciFs
                                                            of
                                                            { GHC.Base.Nothing -> wild2_sciFB;
                                                              GHC.Base.Just x_sciFR [Occ=Once!] ->
                                                                  case x_sciFR of {
                                                                    [] ->
                                                                        Text.Printf.errorShortFormat;
                                                                    : c_sciFU [Occ=Once]
                                                                      cs_sciFV [Occ=Once] ->
                                                                        let {
                                                                          sat_sciFW [Occ=Once]
                                                                            :: Text.Printf.FormatParse
                                                                          [LclId] =
                                                                              CCCS Text.Printf.FormatParse! [p_sciFz
                                                                                                             c_sciFU
                                                                                                             cs_sciFV];
                                                                        } in 
                                                                          GHC.Base.Just [sat_sciFW];
                                                                  };
                                                            };
                                                        1# -> wild2_sciFB;
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          case go_sciFt Text.Printf.intModifierMap of {
            GHC.Base.Nothing ->
                case w_sciFs of {
                  [] -> Text.Printf.errorShortFormat;
                  : c_sciFZ [Occ=Once] cs_sciG0 [Occ=Once] ->
                      Text.Printf.FormatParse [GHC.Types.[] c_sciFZ cs_sciG0];
                };
            GHC.Base.Just m_sciG1 [Occ=Once] -> m_sciG1;
          };

Text.Printf.parseIntFormat [InlPrag=NOUSERINLINE[0]]
  :: forall a. a -> GHC.Base.String -> Text.Printf.FormatParse
[GblId, Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
    [] \r [w_sciG2 w1_sciG3] Text.Printf.$wparseIntFormat w1_sciG3;

lvl8_rccc7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "undefined"#;

lvl9_rccc8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl8_rccc7;

lvl10_rccc9 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$trModule4;

lvl11_rccca :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$trModule2;

lvl12_rcccb :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./Text/Printf.hs"#;

lvl13_rcccc :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl12_rcccb;

lvl14_rcccd :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [323#];

lvl15_rccce :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [40#];

lvl16_rcccf :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [49#];

lvl17_rcccg :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl10_rccc9
                                           lvl11_rccca
                                           lvl13_rcccc
                                           lvl14_rcccd
                                           lvl15_rccce
                                           lvl14_rcccd
                                           lvl16_rcccf];

lvl18_rccch :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl9_rccc8
                                                  lvl17_rcccg
                                                  GHC.Stack.Types.EmptyCallStack];

Text.Printf.$fPrintfArgChar1 :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.undefined lvl18_rccch;

Text.Printf.$fPrintfArgChar_$cparseFormat
  :: GHC.Types.Char -> Text.Printf.ModifierParser
[GblId, Arity=2, Str=<L,A><L,U>, Unf=OtherCon []] =
    [] \r [ds_sciG4 cf_sciG5] Text.Printf.$wparseIntFormat cf_sciG5;

Text.Printf.$fPrintfArgDouble5 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['0'#];

integral_prec_rc8qj
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_sciG6 integral_sciG7]
        case ds_sciG6 of {
          GHC.Base.Nothing -> integral_sciG7;
          GHC.Base.Just ds1_sciG9 [Occ=Once!] ->
              case ds1_sciG9 of {
                GHC.Types.I# ds2_sciGb ->
                    let-no-escape {
                      fail_sciGc [Occ=Once*!T[1], Dmd=<L,1*C1(U)>]
                        :: GHC.Prim.Void# -> GHC.Base.String
                      [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                          sat-only [integral_sciG7 ds2_sciGb] \r [void_0E]
                              case GHC.List.$wlenAcc integral_sciG7 0# of ww2_sciGe {
                                __DEFAULT ->
                                    case -# [ds2_sciGb ww2_sciGe] of y_sciGf [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          case <# [0# y_sciGf] of {
                                            __DEFAULT -> integral_sciG7;
                                            1# ->
                                                let {
                                                  lvl55_sciGh [Occ=OnceL] :: [GHC.Types.Char]
                                                  [LclId, Unf=OtherCon []] =
                                                      CCCS :! [Text.Printf.$fPrintfArgDouble5
                                                               integral_sciG7]; } in
                                                let {
                                                  $wxs_sciGi [InlPrag=NOUSERINLINE[0],
                                                              Occ=LoopBreaker]
                                                    :: GHC.Prim.Int# -> [GHC.Types.Char]
                                                  [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                                      sat-only [lvl55_sciGh
                                                                $wxs_sciGi] \r [ww_sciGj]
                                                          case ww_sciGj of ds4_sciGk {
                                                            __DEFAULT ->
                                                                let {
                                                                  sat_sciGm [Occ=Once]
                                                                    :: [GHC.Types.Char]
                                                                  [LclId] =
                                                                      [$wxs_sciGi ds4_sciGk] \u []
                                                                          case
                                                                              -# [ds4_sciGk 1#]
                                                                          of
                                                                          sat_sciGl
                                                                          { __DEFAULT ->
                                                                                $wxs_sciGi
                                                                                    sat_sciGl;
                                                                          };
                                                                } in 
                                                                  : [Text.Printf.$fPrintfArgDouble5
                                                                     sat_sciGm];
                                                            1# -> lvl55_sciGh;
                                                          };
                                                } in  $wxs_sciGi y_sciGf;
                                          };
                                    };
                              };
                    } in 
                      case ds2_sciGb of {
                        __DEFAULT -> fail_sciGc GHC.Prim.void#;
                        0# ->
                            case integral_sciG7 of {
                              [] -> fail_sciGc GHC.Prim.void#;
                              : ds4_sciGp [Occ=Once!] ds5_sciGq [Occ=Once!] ->
                                  case ds4_sciGp of {
                                    GHC.Types.C# ds6_sciGs [Occ=Once!] ->
                                        case ds6_sciGs of {
                                          __DEFAULT -> fail_sciGc GHC.Prim.void#;
                                          '0'# ->
                                              case ds5_sciGq of {
                                                [] -> [] [];
                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                    fail_sciGc GHC.Prim.void#;
                                              };
                                        };
                                  };
                            };
                      };
              };
        };

lvl19_rccci :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Text/Printf.hs:714:7-39|(\"\", s)"#;

lvl20_rcccj :: (GHC.Base.String)
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.patError lvl19_rccci;

Text.Printf.formatChar2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

sat_sciGx :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

sat_sciGy :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciGx GHC.Types.[]];

lvl21_rccck :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sciGy;

$wfmtu_rcccl
  :: GHC.Integer.Type.Integer
     -> GHC.Base.Maybe GHC.Base.String
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId,
 Arity=5,
 Str=<L,U><S,1*U><L,1*U><L,1*U><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [w_sciGz w1_sciGA w2_sciGB w3_sciGC w4_sciGD]
        case w1_sciGA of {
          GHC.Base.Nothing ->
              let {
                fmtu'_sciGF [Occ=LoopBreaker]
                  :: GHC.Base.Maybe GHC.Types.Int
                     -> GHC.Base.Maybe GHC.Integer.Type.Integer
                     -> GHC.Integer.Type.Integer
                     -> GHC.Base.Maybe GHC.Base.String
                [LclId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []] =
                    sat-only [w_sciGz fmtu'_sciGF] \r [prec_sciGG ds_sciGH i_sciGI]
                        let-no-escape {
                          fail_sciGJ [Occ=Once*!T[1], Dmd=<L,1*C1(U)>]
                            :: GHC.Prim.Void# -> GHC.Base.Maybe GHC.Base.String
                          [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                              sat-only [w_sciGz fmtu'_sciGF prec_sciGG i_sciGI] \r [void_0E]
                                  case prec_sciGG of wild1_sciGL {
                                    GHC.Base.Nothing ->
                                        case
                                            GHC.Integer.Type.geInteger#
                                                i_sciGI Text.Printf.formatChar2
                                        of
                                        { __DEFAULT -> GHC.Base.Nothing [];
                                          1# ->
                                              let {
                                                sat_sciGN [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    [w_sciGz i_sciGI] \u []
                                                        Numeric.showIntAtBase
                                                            GHC.Real.$fIntegralInteger
                                                            GHC.Show.$fShowInteger
                                                            w_sciGz
                                                            GHC.Show.intToDigit
                                                            i_sciGI
                                                            GHC.Types.[];
                                              } in  GHC.Base.Just [sat_sciGN];
                                        };
                                    GHC.Base.Just _ [Occ=Dead] ->
                                        case
                                            GHC.Integer.Type.geInteger#
                                                i_sciGI Text.Printf.formatChar2
                                        of
                                        { __DEFAULT -> GHC.Base.Nothing [];
                                          1# ->
                                              case
                                                  fmtu'_sciGF
                                                      GHC.Base.Nothing GHC.Base.Nothing i_sciGI
                                              of
                                              { GHC.Base.Nothing -> GHC.Base.Nothing [];
                                                GHC.Base.Just a1_sciGR [Occ=Once] ->
                                                    let {
                                                      sat_sciGS [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [wild1_sciGL a1_sciGR] \u []
                                                              integral_prec_rc8qj
                                                                  wild1_sciGL a1_sciGR;
                                                    } in  GHC.Base.Just [sat_sciGS];
                                              };
                                        };
                                  };
                        } in 
                          case ds_sciGH of {
                            GHC.Base.Nothing -> fail_sciGJ GHC.Prim.void#;
                            GHC.Base.Just m_sciGU [Occ=Once] ->
                                case
                                    GHC.Integer.Type.ltInteger# i_sciGI Text.Printf.formatChar2
                                of
                                { __DEFAULT -> fail_sciGJ GHC.Prim.void#;
                                  1# ->
                                      case
                                          GHC.Integer.Type.timesInteger lvl21_rccck m_sciGU
                                      of
                                      sat_sciGW
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.negateInteger sat_sciGW
                                            of
                                            sat_sciGX
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.plusInteger sat_sciGX i_sciGI
                                                  of
                                                  sat_sciGY
                                                  { __DEFAULT ->
                                                        fmtu'_sciGF
                                                            prec_sciGG GHC.Base.Nothing sat_sciGY;
                                                  };
                                            };
                                      };
                                };
                          };
              } in 
                case fmtu'_sciGF w2_sciGB w3_sciGC w4_sciGD of {
                  GHC.Base.Nothing -> Text.Printf.errorBadArgument;
                  GHC.Base.Just s_sciH1 [Occ=Once] -> (#,#) [GHC.Types.[] s_sciH1];
                };
          GHC.Base.Just pre_sciH2 [Occ=Once!] ->
              let {
                s_sciH3 [Occ=Once*] :: GHC.Base.String
                [LclId] =
                    [w_sciGz w2_sciGB w3_sciGC w4_sciGD] \u []
                        case
                            $wfmtu_rcccl w_sciGz GHC.Base.Nothing w2_sciGB w3_sciGC w4_sciGD
                        of
                        { (#,#) ww1_sciH5 [Occ=Once!] ww2_sciH6 [Occ=Once] ->
                              case ww1_sciH5 of {
                                [] -> ww2_sciH6;
                                : _ [Occ=Dead] _ [Occ=Dead] -> lvl20_rcccj;
                              };
                        };
              } in 
                case pre_sciH2 of wild1_sciHb {
                  [] -> (#,#) [GHC.Types.[] s_sciH3];
                  : ds_sciHc [Occ=Once!] ds1_sciHd [Occ=Once!] ->
                      case ds_sciHc of {
                        GHC.Types.C# ds2_sciHf [Occ=Once!] ->
                            case ds2_sciHf of {
                              __DEFAULT -> (#,#) [wild1_sciHb s_sciH3];
                              '0'# ->
                                  case ds1_sciHd of {
                                    [] ->
                                        case s_sciH3 of wild4_sciHi {
                                          [] -> (#,#) [wild1_sciHb GHC.Types.[]];
                                          : ds4_sciHj [Occ=Once!] _ [Occ=Dead] ->
                                              case ds4_sciHj of {
                                                GHC.Types.C# ds6_sciHm [Occ=Once!] ->
                                                    case ds6_sciHm of {
                                                      __DEFAULT -> (#,#) [wild1_sciHb wild4_sciHi];
                                                      '0'# -> (#,#) [GHC.Types.[] wild4_sciHi];
                                                    };
                                              };
                                        };
                                    : _ [Occ=Dead] _ [Occ=Dead] -> (#,#) [wild1_sciHb s_sciH3];
                                  };
                            };
                      };
                };
        };

$wfmti_rcccm
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Integer.Type.Integer
     -> (# GHC.Base.String, GHC.Base.String #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    sat-only [] \r [w_sciHq w1_sciHr]
        case
            GHC.Integer.Type.ltInteger# w1_sciHr Text.Printf.formatChar2
        of
        { __DEFAULT ->
              let {
                sat_sciHx [Occ=Once] :: GHC.Base.String
                [LclId] =
                    [w_sciHq w1_sciHr] \u []
                        case GHC.Show.$w$cshowsPrec4 0# w1_sciHr GHC.Types.[] of {
                          (#,#) ww3_sciHu [Occ=Once] ww4_sciHv [Occ=Once] ->
                              let {
                                sat_sciHw [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    CCCS :! [ww3_sciHu ww4_sciHv];
                              } in  integral_prec_rc8qj w_sciHq sat_sciHw;
                        };
              } in  (#,#) [GHC.Types.[] sat_sciHx];
          1# ->
              let {
                sat_sciHD [Occ=Once] :: GHC.Base.String
                [LclId] =
                    [w_sciHq w1_sciHr] \u []
                        case GHC.Integer.Type.negateInteger w1_sciHr of sat_sciHy {
                          __DEFAULT ->
                              case GHC.Show.$w$cshowsPrec4 0# sat_sciHy GHC.Types.[] of {
                                (#,#) ww3_sciHA [Occ=Once] ww4_sciHB [Occ=Once] ->
                                    let {
                                      sat_sciHC [Occ=Once] :: GHC.Base.String
                                      [LclId] =
                                          CCCS :! [ww3_sciHA ww4_sciHB];
                                    } in  integral_prec_rc8qj w_sciHq sat_sciHC;
                              };
                        };
              } in  (#,#) [Text.Printf.$fPrintfArgDouble8 sat_sciHD];
        };

Text.Printf.$fPrintfArgDouble6 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [' '#];

Text.Printf.$wadjust [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Base.String
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U><S,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sciHE ww1_sciHF ww2_sciHG ww3_sciHH]
        let {
          fill_sciHI [Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [ww_sciHE ww1_sciHF ww2_sciHG ww3_sciHH] \s []
                  case ww_sciHE of {
                    GHC.Base.Nothing -> [] [];
                    GHC.Base.Just width_sciHK [Occ=Once!] ->
                        case GHC.List.$wlenAcc ww2_sciHG 0# of ww4_sciHL {
                          __DEFAULT ->
                              case GHC.List.$wlenAcc ww3_sciHH 0# of ww5_sciHM {
                                __DEFAULT ->
                                    case width_sciHK of {
                                      GHC.Types.I# y_sciHO ->
                                          case +# [ww4_sciHL ww5_sciHM] of x_sciHP [Dmd=<S,U>] {
                                            __DEFAULT ->
                                                case <# [x_sciHP y_sciHO] of {
                                                  __DEFAULT -> [] [];
                                                  1# ->
                                                      case
                                                          -# [y_sciHO x_sciHP]
                                                      of
                                                      n_sciHR [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            case <# [0# n_sciHR] of {
                                                              __DEFAULT -> [] [];
                                                              1# ->
                                                                  let {
                                                                    x1_sciHT :: GHC.Types.Char
                                                                    [LclId] =
                                                                        [ww1_sciHF] \u []
                                                                            case ww1_sciHF of {
                                                                              GHC.Base.Nothing ->
                                                                                  Text.Printf.$fPrintfArgDouble6;
                                                                              GHC.Base.Just ds_sciHV [Occ=Once!] ->
                                                                                  case ds_sciHV of {
                                                                                    Text.Printf.LeftAdjust ->
                                                                                        Text.Printf.$fPrintfArgDouble6;
                                                                                    Text.Printf.ZeroPad ->
                                                                                        Text.Printf.$fPrintfArgDouble5;
                                                                                  };
                                                                            }; } in
                                                                  let {
                                                                    lvl55_sciHX [Occ=OnceL]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId, Unf=OtherCon []] =
                                                                        CCCS :! [x1_sciHT
                                                                                 GHC.Types.[]]; } in
                                                                  let {
                                                                    $wxs_sciHY [InlPrag=NOUSERINLINE[0],
                                                                                Occ=LoopBreaker]
                                                                      :: GHC.Prim.Int#
                                                                         -> [GHC.Types.Char]
                                                                    [LclId,
                                                                     Arity=1,
                                                                     Str=<S,1*U>,
                                                                     Unf=OtherCon []] =
                                                                        sat-only [x1_sciHT
                                                                                  lvl55_sciHX
                                                                                  $wxs_sciHY] \r [ww6_sciHZ]
                                                                            case
                                                                                ww6_sciHZ
                                                                            of
                                                                            ds1_sciI0
                                                                            { __DEFAULT ->
                                                                                  let {
                                                                                    sat_sciI2 [Occ=Once]
                                                                                      :: [GHC.Types.Char]
                                                                                    [LclId] =
                                                                                        [$wxs_sciHY
                                                                                         ds1_sciI0] \u []
                                                                                            case
                                                                                                -# [ds1_sciI0
                                                                                                    1#]
                                                                                            of
                                                                                            sat_sciI1
                                                                                            { __DEFAULT ->
                                                                                                  $wxs_sciHY
                                                                                                      sat_sciI1;
                                                                                            };
                                                                                  } in 
                                                                                    : [x1_sciHT
                                                                                       sat_sciI2];
                                                                              1# -> lvl55_sciHX;
                                                                            };
                                                                  } in  $wxs_sciHY n_sciHR;
                                                            };
                                                      };
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          let-no-escape {
            $j_sciI3 [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Base.String
            [LclId[JoinId(0)], Unf=OtherCon []] =
                [ww1_sciHF ww2_sciHG ww3_sciHH fill_sciHI] \r []
                    case ww1_sciHF of {
                      GHC.Base.Nothing ->
                          let {
                            sat_sciI5 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                            [LclId] =
                                [ww2_sciHG ww3_sciHH] \s [] GHC.Base.++ ww2_sciHG ww3_sciHH;
                          } in  GHC.Base.++ fill_sciHI sat_sciI5;
                      GHC.Base.Just ds_sciI6 [Occ=Once!] ->
                          case ds_sciI6 of {
                            Text.Printf.LeftAdjust ->
                                let {
                                  sat_sciI8 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [ww2_sciHG ww3_sciHH] \s [] GHC.Base.++ ww2_sciHG ww3_sciHH;
                                } in  GHC.Base.++ fill_sciHI sat_sciI8;
                            Text.Printf.ZeroPad ->
                                let {
                                  sat_sciI9 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [ww3_sciHH fill_sciHI] \s [] GHC.Base.++ fill_sciHI ww3_sciHH;
                                } in  GHC.Base.++ ww2_sciHG sat_sciI9;
                          };
                    };
          } in 
            case ww1_sciHF of {
              GHC.Base.Nothing -> $j_sciI3;
              GHC.Base.Just ds_sciIb [Occ=Once!] ->
                  case ds_sciIb of {
                    Text.Printf.LeftAdjust ->
                        let {
                          sat_sciId [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [ww3_sciHH fill_sciHI] \s [] GHC.Base.++ ww3_sciHH fill_sciHI;
                        } in  GHC.Base.++ ww2_sciHG sat_sciId;
                    Text.Printf.ZeroPad -> $j_sciI3;
                  };
            };

Text.Printf.$fPrintfArgDouble4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "+"#;

Text.Printf.$fPrintfArgDouble3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgDouble4;

Text.Printf.$fPrintfArgDouble2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " "#;

Text.Printf.$fPrintfArgDouble1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Text.Printf.$fPrintfArgDouble2;

Text.Printf.$wadjustSigned [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Base.String
     -> GHC.Base.String
     -> GHC.Base.String
[GblId,
 Arity=5,
 Str=<L,1*U><S,U><S,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sciIe ww1_sciIf ww2_sciIg ww3_sciIh ww4_sciIi]
        case ww2_sciIg of {
          GHC.Base.Nothing ->
              Text.Printf.$wadjust ww_sciIe ww1_sciIf ww3_sciIh ww4_sciIi;
          GHC.Base.Just ds_sciIk [Occ=Once!] ->
              case ds_sciIk of {
                Text.Printf.SignPlus ->
                    case ww3_sciIh of wild2_sciIm {
                      [] ->
                          Text.Printf.$wadjust
                              ww_sciIe ww1_sciIf Text.Printf.$fPrintfArgDouble3 ww4_sciIi;
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          Text.Printf.$wadjust ww_sciIe ww1_sciIf wild2_sciIm ww4_sciIi;
                    };
                Text.Printf.SignSpace ->
                    case ww3_sciIh of wild2_sciIp {
                      [] ->
                          Text.Printf.$wadjust
                              ww_sciIe ww1_sciIf Text.Printf.$fPrintfArgDouble1 ww4_sciIi;
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          Text.Printf.$wadjust ww_sciIe ww1_sciIf wild2_sciIp ww4_sciIi;
                    };
              };
        };

Text.Printf.$w$sformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Double
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=7,
 Str=<L,1*U(U)><L,1*U><L,U><L,U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciIs
           ww_sciIt
           ww1_sciIu
           ww2_sciIv
           ww3_sciIw
           ww4_sciIx
           ww5_sciIy]
        case ww5_sciIy of ds_sciIz {
          __DEFAULT -> Text.Printf.$werrorBadFormat ds_sciIz;
          'E'# ->
              let {
                sat_sciID [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciIs ww_sciIt ww1_sciIu ww2_sciIv ww3_sciIw ww4_sciIx] \u []
                        case Text.Printf.$w$sdfmt 'E'# ww1_sciIu ww4_sciIx w_sciIs of {
                          (#,#) ww7_sciIB [Occ=Once] ww8_sciIC [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciIt ww2_sciIv ww3_sciIw ww7_sciIB ww8_sciIC;
                        };
              } in  GHC.Base.++ sat_sciID;
          'F'# ->
              let {
                sat_sciIH [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciIs ww_sciIt ww1_sciIu ww2_sciIv ww3_sciIw ww4_sciIx] \u []
                        case Text.Printf.$w$sdfmt 'F'# ww1_sciIu ww4_sciIx w_sciIs of {
                          (#,#) ww7_sciIF [Occ=Once] ww8_sciIG [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciIt ww2_sciIv ww3_sciIw ww7_sciIF ww8_sciIG;
                        };
              } in  GHC.Base.++ sat_sciIH;
          'G'# ->
              let {
                sat_sciIL [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciIs ww_sciIt ww1_sciIu ww2_sciIv ww3_sciIw ww4_sciIx] \u []
                        case Text.Printf.$w$sdfmt 'G'# ww1_sciIu ww4_sciIx w_sciIs of {
                          (#,#) ww7_sciIJ [Occ=Once] ww8_sciIK [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciIt ww2_sciIv ww3_sciIw ww7_sciIJ ww8_sciIK;
                        };
              } in  GHC.Base.++ sat_sciIL;
          'e'# ->
              let {
                sat_sciIP [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciIs ww_sciIt ww1_sciIu ww2_sciIv ww3_sciIw ww4_sciIx] \u []
                        case Text.Printf.$w$sdfmt 'e'# ww1_sciIu ww4_sciIx w_sciIs of {
                          (#,#) ww7_sciIN [Occ=Once] ww8_sciIO [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciIt ww2_sciIv ww3_sciIw ww7_sciIN ww8_sciIO;
                        };
              } in  GHC.Base.++ sat_sciIP;
          'f'# ->
              let {
                sat_sciIT [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciIs ww_sciIt ww1_sciIu ww2_sciIv ww3_sciIw ww4_sciIx] \u []
                        case Text.Printf.$w$sdfmt 'f'# ww1_sciIu ww4_sciIx w_sciIs of {
                          (#,#) ww7_sciIR [Occ=Once] ww8_sciIS [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciIt ww2_sciIv ww3_sciIw ww7_sciIR ww8_sciIS;
                        };
              } in  GHC.Base.++ sat_sciIT;
          'g'# ->
              let {
                sat_sciIX [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciIs ww_sciIt ww1_sciIu ww2_sciIv ww3_sciIw ww4_sciIx] \u []
                        case Text.Printf.$w$sdfmt 'g'# ww1_sciIu ww4_sciIx w_sciIs of {
                          (#,#) ww7_sciIV [Occ=Once] ww8_sciIW [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciIt ww2_sciIv ww3_sciIw ww7_sciIV ww8_sciIW;
                        };
              } in  GHC.Base.++ sat_sciIX;
          'v'# ->
              let {
                sat_sciJ1 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciIs ww_sciIt ww1_sciIu ww2_sciIv ww3_sciIw ww4_sciIx] \u []
                        case Text.Printf.$w$sdfmt 'g'# ww1_sciIu ww4_sciIx w_sciIs of {
                          (#,#) ww7_sciIZ [Occ=Once] ww8_sciJ0 [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciIt ww2_sciIv ww3_sciIw ww7_sciIZ ww8_sciJ0;
                        };
              } in  GHC.Base.++ sat_sciJ1;
        };

Text.Printf.$fPrintfArgDouble_$sformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Double -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LLLLLLS(S)),1*U(1*U,U,U,1*U,1*U,A,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciJ2 w1_sciJ3]
        case w1_sciJ3 of {
          Text.Printf.FieldFormat ww1_sciJ5 [Occ=Once]
                                  ww2_sciJ6 [Occ=Once]
                                  ww3_sciJ7 [Occ=Once]
                                  ww4_sciJ8 [Occ=Once]
                                  ww5_sciJ9 [Occ=Once]
                                  _ [Occ=Dead]
                                  ww7_sciJb [Occ=Once!] ->
              case ww7_sciJb of {
                GHC.Types.C# ww9_sciJd [Occ=Once] ->
                    Text.Printf.$w$sformatRealFloat
                        w_sciJ2
                        ww1_sciJ5
                        ww2_sciJ6
                        ww3_sciJ7
                        ww4_sciJ8
                        ww5_sciJ9
                        ww9_sciJd;
              };
        };

Text.Printf.$w$sformatRealFloat1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Float
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=7,
 Str=<L,1*U(U)><L,1*U><L,U><L,U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciJe
           ww_sciJf
           ww1_sciJg
           ww2_sciJh
           ww3_sciJi
           ww4_sciJj
           ww5_sciJk]
        case ww5_sciJk of ds_sciJl {
          __DEFAULT -> Text.Printf.$werrorBadFormat ds_sciJl;
          'E'# ->
              let {
                sat_sciJp [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciJe ww_sciJf ww1_sciJg ww2_sciJh ww3_sciJi ww4_sciJj] \u []
                        case Text.Printf.$w$sdfmt1 'E'# ww1_sciJg ww4_sciJj w_sciJe of {
                          (#,#) ww7_sciJn [Occ=Once] ww8_sciJo [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciJf ww2_sciJh ww3_sciJi ww7_sciJn ww8_sciJo;
                        };
              } in  GHC.Base.++ sat_sciJp;
          'F'# ->
              let {
                sat_sciJt [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciJe ww_sciJf ww1_sciJg ww2_sciJh ww3_sciJi ww4_sciJj] \u []
                        case Text.Printf.$w$sdfmt1 'F'# ww1_sciJg ww4_sciJj w_sciJe of {
                          (#,#) ww7_sciJr [Occ=Once] ww8_sciJs [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciJf ww2_sciJh ww3_sciJi ww7_sciJr ww8_sciJs;
                        };
              } in  GHC.Base.++ sat_sciJt;
          'G'# ->
              let {
                sat_sciJx [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciJe ww_sciJf ww1_sciJg ww2_sciJh ww3_sciJi ww4_sciJj] \u []
                        case Text.Printf.$w$sdfmt1 'G'# ww1_sciJg ww4_sciJj w_sciJe of {
                          (#,#) ww7_sciJv [Occ=Once] ww8_sciJw [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciJf ww2_sciJh ww3_sciJi ww7_sciJv ww8_sciJw;
                        };
              } in  GHC.Base.++ sat_sciJx;
          'e'# ->
              let {
                sat_sciJB [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciJe ww_sciJf ww1_sciJg ww2_sciJh ww3_sciJi ww4_sciJj] \u []
                        case Text.Printf.$w$sdfmt1 'e'# ww1_sciJg ww4_sciJj w_sciJe of {
                          (#,#) ww7_sciJz [Occ=Once] ww8_sciJA [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciJf ww2_sciJh ww3_sciJi ww7_sciJz ww8_sciJA;
                        };
              } in  GHC.Base.++ sat_sciJB;
          'f'# ->
              let {
                sat_sciJF [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciJe ww_sciJf ww1_sciJg ww2_sciJh ww3_sciJi ww4_sciJj] \u []
                        case Text.Printf.$w$sdfmt1 'f'# ww1_sciJg ww4_sciJj w_sciJe of {
                          (#,#) ww7_sciJD [Occ=Once] ww8_sciJE [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciJf ww2_sciJh ww3_sciJi ww7_sciJD ww8_sciJE;
                        };
              } in  GHC.Base.++ sat_sciJF;
          'g'# ->
              let {
                sat_sciJJ [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciJe ww_sciJf ww1_sciJg ww2_sciJh ww3_sciJi ww4_sciJj] \u []
                        case Text.Printf.$w$sdfmt1 'g'# ww1_sciJg ww4_sciJj w_sciJe of {
                          (#,#) ww7_sciJH [Occ=Once] ww8_sciJI [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciJf ww2_sciJh ww3_sciJi ww7_sciJH ww8_sciJI;
                        };
              } in  GHC.Base.++ sat_sciJJ;
          'v'# ->
              let {
                sat_sciJN [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciJe ww_sciJf ww1_sciJg ww2_sciJh ww3_sciJi ww4_sciJj] \u []
                        case Text.Printf.$w$sdfmt1 'g'# ww1_sciJg ww4_sciJj w_sciJe of {
                          (#,#) ww7_sciJL [Occ=Once] ww8_sciJM [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciJf ww2_sciJh ww3_sciJi ww7_sciJL ww8_sciJM;
                        };
              } in  GHC.Base.++ sat_sciJN;
        };

Text.Printf.$fPrintfArgFloat_$sformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Float -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LLLLLLS(S)),1*U(1*U,U,U,1*U,1*U,A,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciJO w1_sciJP]
        case w1_sciJP of {
          Text.Printf.FieldFormat ww1_sciJR [Occ=Once]
                                  ww2_sciJS [Occ=Once]
                                  ww3_sciJT [Occ=Once]
                                  ww4_sciJU [Occ=Once]
                                  ww5_sciJV [Occ=Once]
                                  _ [Occ=Dead]
                                  ww7_sciJX [Occ=Once!] ->
              case ww7_sciJX of {
                GHC.Types.C# ww9_sciJZ [Occ=Once] ->
                    Text.Printf.$w$sformatRealFloat1
                        w_sciJO
                        ww1_sciJR
                        ww2_sciJS
                        ww3_sciJT
                        ww4_sciJU
                        ww5_sciJV
                        ww9_sciJZ;
              };
        };

Text.Printf.$wformatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Float.RealFloat a =>
     a
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,U(U(U(U(A,A,A,C(U),A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,A,A,A,A,A),A,C(U),C(U(U)),C(U(1*U(U),A)),C(U(U,U(U))),A,A,A,A,C(U),C(U),A,C(U),A,A)><L,U><L,1*U><L,U><L,U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciK0
           w1_sciK1
           ww_sciK2
           ww1_sciK3
           ww2_sciK4
           ww3_sciK5
           ww4_sciK6
           ww5_sciK7]
        case ww5_sciK7 of ds_sciK8 {
          __DEFAULT -> Text.Printf.$werrorBadFormat ds_sciK8;
          'E'# ->
              let {
                sat_sciKc [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciK0
                     w1_sciK1
                     ww_sciK2
                     ww1_sciK3
                     ww2_sciK4
                     ww3_sciK5
                     ww4_sciK6] \u []
                        case
                            Text.Printf.$wdfmt w_sciK0 'E'# ww1_sciK3 ww4_sciK6 w1_sciK1
                        of
                        { (#,#) ww7_sciKa [Occ=Once] ww8_sciKb [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciK2 ww2_sciK4 ww3_sciK5 ww7_sciKa ww8_sciKb;
                        };
              } in  GHC.Base.++ sat_sciKc;
          'F'# ->
              let {
                sat_sciKg [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciK0
                     w1_sciK1
                     ww_sciK2
                     ww1_sciK3
                     ww2_sciK4
                     ww3_sciK5
                     ww4_sciK6] \u []
                        case
                            Text.Printf.$wdfmt w_sciK0 'F'# ww1_sciK3 ww4_sciK6 w1_sciK1
                        of
                        { (#,#) ww7_sciKe [Occ=Once] ww8_sciKf [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciK2 ww2_sciK4 ww3_sciK5 ww7_sciKe ww8_sciKf;
                        };
              } in  GHC.Base.++ sat_sciKg;
          'G'# ->
              let {
                sat_sciKk [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciK0
                     w1_sciK1
                     ww_sciK2
                     ww1_sciK3
                     ww2_sciK4
                     ww3_sciK5
                     ww4_sciK6] \u []
                        case
                            Text.Printf.$wdfmt w_sciK0 'G'# ww1_sciK3 ww4_sciK6 w1_sciK1
                        of
                        { (#,#) ww7_sciKi [Occ=Once] ww8_sciKj [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciK2 ww2_sciK4 ww3_sciK5 ww7_sciKi ww8_sciKj;
                        };
              } in  GHC.Base.++ sat_sciKk;
          'e'# ->
              let {
                sat_sciKo [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciK0
                     w1_sciK1
                     ww_sciK2
                     ww1_sciK3
                     ww2_sciK4
                     ww3_sciK5
                     ww4_sciK6] \u []
                        case
                            Text.Printf.$wdfmt w_sciK0 'e'# ww1_sciK3 ww4_sciK6 w1_sciK1
                        of
                        { (#,#) ww7_sciKm [Occ=Once] ww8_sciKn [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciK2 ww2_sciK4 ww3_sciK5 ww7_sciKm ww8_sciKn;
                        };
              } in  GHC.Base.++ sat_sciKo;
          'f'# ->
              let {
                sat_sciKs [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciK0
                     w1_sciK1
                     ww_sciK2
                     ww1_sciK3
                     ww2_sciK4
                     ww3_sciK5
                     ww4_sciK6] \u []
                        case
                            Text.Printf.$wdfmt w_sciK0 'f'# ww1_sciK3 ww4_sciK6 w1_sciK1
                        of
                        { (#,#) ww7_sciKq [Occ=Once] ww8_sciKr [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciK2 ww2_sciK4 ww3_sciK5 ww7_sciKq ww8_sciKr;
                        };
              } in  GHC.Base.++ sat_sciKs;
          'g'# ->
              let {
                sat_sciKw [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciK0
                     w1_sciK1
                     ww_sciK2
                     ww1_sciK3
                     ww2_sciK4
                     ww3_sciK5
                     ww4_sciK6] \u []
                        case
                            Text.Printf.$wdfmt w_sciK0 'g'# ww1_sciK3 ww4_sciK6 w1_sciK1
                        of
                        { (#,#) ww7_sciKu [Occ=Once] ww8_sciKv [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciK2 ww2_sciK4 ww3_sciK5 ww7_sciKu ww8_sciKv;
                        };
              } in  GHC.Base.++ sat_sciKw;
          'v'# ->
              let {
                sat_sciKA [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sciK0
                     w1_sciK1
                     ww_sciK2
                     ww1_sciK3
                     ww2_sciK4
                     ww3_sciK5
                     ww4_sciK6] \u []
                        case
                            Text.Printf.$wdfmt w_sciK0 'g'# ww1_sciK3 ww4_sciK6 w1_sciK1
                        of
                        { (#,#) ww7_sciKy [Occ=Once] ww8_sciKz [Occ=Once] ->
                              Text.Printf.$wadjustSigned
                                  ww_sciK2 ww2_sciK4 ww3_sciK5 ww7_sciKy ww8_sciKz;
                        };
              } in  GHC.Base.++ sat_sciKA;
        };

Text.Printf.formatRealFloat [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Float.RealFloat a =>
     a -> Text.Printf.FieldFormatter
[GblId,
 Arity=3,
 Str=<L,U(U(U(U(A,A,A,C(U),A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A),A),A,A,A,A,A,A),A,C(U),C(U(U)),C(U(1*U(U),A)),C(U(U,U(U))),A,A,A,A,C(U),C(U),A,C(U),A,A)><L,U><S(LLLLLLS(S)),1*U(1*U,U,U,1*U,1*U,A,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciKB w1_sciKC w2_sciKD]
        case w2_sciKD of {
          Text.Printf.FieldFormat ww1_sciKF [Occ=Once]
                                  ww2_sciKG [Occ=Once]
                                  ww3_sciKH [Occ=Once]
                                  ww4_sciKI [Occ=Once]
                                  ww5_sciKJ [Occ=Once]
                                  _ [Occ=Dead]
                                  ww7_sciKL [Occ=Once!] ->
              case ww7_sciKL of {
                GHC.Types.C# ww9_sciKN [Occ=Once] ->
                    Text.Printf.$wformatRealFloat
                        w_sciKB
                        w1_sciKC
                        ww1_sciKF
                        ww2_sciKG
                        ww3_sciKH
                        ww4_sciKI
                        ww5_sciKJ
                        ww9_sciKN;
              };
        };

Text.Printf.$fPrintfArgDouble_$cparseFormat
  :: GHC.Types.Double -> Text.Printf.ModifierParser
[GblId, Arity=2, Str=<L,A><S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_sciKO ds1_sciKP]
        case ds1_sciKP of {
          [] -> Text.Printf.errorShortFormat;
          : c_sciKR [Occ=Once] cs_sciKS [Occ=Once] ->
              Text.Printf.FormatParse [GHC.Types.[] c_sciKR cs_sciKS];
        };

Text.Printf.$fPrintfArgDouble [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Double
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgDouble_$sformatRealFloat
                                            Text.Printf.$fPrintfArgDouble_$cparseFormat];

Text.Printf.$fPrintfArgFloat_$cparseFormat
  :: GHC.Types.Float -> Text.Printf.ModifierParser
[GblId, Arity=2, Str=<L,A><S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_sciKT ds1_sciKU]
        case ds1_sciKU of {
          [] -> Text.Printf.errorShortFormat;
          : c_sciKW [Occ=Once] cs_sciKX [Occ=Once] ->
              Text.Printf.FormatParse [GHC.Types.[] c_sciKW cs_sciKX];
        };

Text.Printf.$fPrintfArgFloat [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Float
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgFloat_$sformatRealFloat
                                            Text.Printf.$fPrintfArgFloat_$cparseFormat];

Text.Printf.$w$sformatString [InlPrag=NOUSERINLINE[0]]
  :: [GHC.Types.Char]
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=5,
 Str=<L,1*U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciKY ww_sciKZ ww1_sciL0 ww2_sciL1 ww3_sciL2]
        let-no-escape {
          $w$j_sciL3 [InlPrag=NOUSERINLINE[0],
                      Occ=Once*!T[1],
                      Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Char# -> GHC.Show.ShowS
          [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [w_sciKY ww_sciKZ ww1_sciL0 ww2_sciL1] \r [ww4_sciL4]
                  case ww4_sciL4 of ds_sciL5 {
                    __DEFAULT -> Text.Printf.$werrorBadFormat ds_sciL5;
                    's'# ->
                        let {
                          g_sciL6 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [w_sciKY ww_sciKZ ww1_sciL0 ww2_sciL1] \u []
                                  let {
                                    sat_sciLc [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [w_sciKY ww1_sciL0] \u []
                                            case ww1_sciL0 of {
                                              GHC.Base.Nothing -> w_sciKY;
                                              GHC.Base.Just n_sciL8 [Occ=Once!] ->
                                                  case n_sciL8 of {
                                                    GHC.Types.I# y_sciLa ->
                                                        case <# [0# y_sciLa] of {
                                                          __DEFAULT -> [] [];
                                                          1# ->
                                                              GHC.List.$wunsafeTake y_sciLa w_sciKY;
                                                        };
                                                  };
                                            };
                                  } in 
                                    Text.Printf.$wadjust ww_sciKZ ww2_sciL1 GHC.Types.[] sat_sciLc;
                        } in  GHC.Base.++ g_sciL6;
                  };
        } in 
          case ww3_sciL2 of ds_sciLe {
            __DEFAULT -> $w$j_sciL3 ds_sciLe;
            'v'# -> $w$j_sciL3 's'#;
          };

Text.Printf.$wformatString [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.Printf.IsChar a =>
     [a]
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=6,
 Str=<L,U(C(U),A)><L,1*U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciLf w1_sciLg ww_sciLh ww1_sciLi ww2_sciLj ww3_sciLk]
        let-no-escape {
          $w$j_sciLl [InlPrag=NOUSERINLINE[0],
                      Occ=Once*!T[1],
                      Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Char# -> GHC.Show.ShowS
          [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [w_sciLf
                        w1_sciLg
                        ww_sciLh
                        ww1_sciLi
                        ww2_sciLj] \r [ww4_sciLm]
                  case ww4_sciLm of ds_sciLn {
                    __DEFAULT -> Text.Printf.$werrorBadFormat ds_sciLn;
                    's'# ->
                        let {
                          g_sciLo [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [w_sciLf w1_sciLg ww_sciLh ww1_sciLi ww2_sciLj] \u []
                                  let {
                                    sat_sciLG [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [w_sciLf w1_sciLg ww1_sciLi] \u []
                                            case ww1_sciLi of {
                                              GHC.Base.Nothing ->
                                                  let {
                                                    sat_sciLq [Occ=Once, Dmd=<L,C(U)>]
                                                      :: a_scbaN -> GHC.Types.Char
                                                    [LclId] =
                                                        [w_sciLf] \u [] Text.Printf.toChar w_sciLf;
                                                  } in  GHC.Base.map sat_sciLq w1_sciLg;
                                              GHC.Base.Just n_sciLr [Occ=Once!] ->
                                                  case n_sciLr of {
                                                    GHC.Types.I# y_sciLt ->
                                                        case <# [0# y_sciLt] of {
                                                          __DEFAULT -> [] [];
                                                          1# ->
                                                              let {
                                                                $wgo_sciLv [InlPrag=NOUSERINLINE[0],
                                                                            Occ=LoopBreaker]
                                                                  :: [a_scbaN]
                                                                     -> GHC.Prim.Int#
                                                                     -> [GHC.Types.Char]
                                                                [LclId,
                                                                 Arity=2,
                                                                 Str=<S,1*U><L,1*U>,
                                                                 Unf=OtherCon []] =
                                                                    sat-only [w_sciLf
                                                                              $wgo_sciLv] \r [w2_sciLw
                                                                                              ww5_sciLx]
                                                                        case w2_sciLw of {
                                                                          [] -> [] [];
                                                                          : y1_sciLz [Occ=Once*]
                                                                            ys_sciLA [Occ=Once] ->
                                                                              case
                                                                                  ww5_sciLx
                                                                              of
                                                                              ds1_sciLB
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_sciLE [Occ=Once]
                                                                                        :: [GHC.Types.Char]
                                                                                      [LclId] =
                                                                                          [$wgo_sciLv
                                                                                           ys_sciLA
                                                                                           ds1_sciLB] \u []
                                                                                              case
                                                                                                  -# [ds1_sciLB
                                                                                                      1#]
                                                                                              of
                                                                                              sat_sciLD
                                                                                              { __DEFAULT ->
                                                                                                    $wgo_sciLv
                                                                                                        ys_sciLA
                                                                                                        sat_sciLD;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_sciLC [Occ=Once]
                                                                                        :: GHC.Types.Char
                                                                                      [LclId] =
                                                                                          [w_sciLf
                                                                                           y1_sciLz] \u []
                                                                                              Text.Printf.toChar
                                                                                                  w_sciLf
                                                                                                  y1_sciLz;
                                                                                    } in 
                                                                                      : [sat_sciLC
                                                                                         sat_sciLE];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_sciLF [Occ=Once]
                                                                                        :: GHC.Types.Char
                                                                                      [LclId] =
                                                                                          [w_sciLf
                                                                                           y1_sciLz] \u []
                                                                                              Text.Printf.toChar
                                                                                                  w_sciLf
                                                                                                  y1_sciLz;
                                                                                    } in 
                                                                                      : [sat_sciLF
                                                                                         GHC.Types.[]];
                                                                              };
                                                                        };
                                                              } in  $wgo_sciLv w1_sciLg y_sciLt;
                                                        };
                                                  };
                                            };
                                  } in 
                                    Text.Printf.$wadjust ww_sciLh ww2_sciLj GHC.Types.[] sat_sciLG;
                        } in  GHC.Base.++ g_sciLo;
                  };
        } in 
          case ww3_sciLk of ds_sciLI {
            __DEFAULT -> $w$j_sciLl ds_sciLI;
            'v'# -> $w$j_sciLl 's'#;
          };

Text.Printf.formatString [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.Printf.IsChar a =>
     [a] -> Text.Printf.FieldFormatter
[GblId,
 Arity=3,
 Str=<L,U(C(U),A)><L,1*U><S(LLLLLLS(S)),1*U(1*U,1*U,U,A,A,A,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciLJ w1_sciLK w2_sciLL]
        case w2_sciLL of {
          Text.Printf.FieldFormat ww1_sciLN [Occ=Once]
                                  ww2_sciLO [Occ=Once]
                                  ww3_sciLP [Occ=Once]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  _ [Occ=Dead]
                                  ww7_sciLT [Occ=Once!] ->
              case ww7_sciLT of {
                GHC.Types.C# ww9_sciLV [Occ=Once] ->
                    Text.Printf.$wformatString
                        w_sciLJ w1_sciLK ww1_sciLN ww2_sciLO ww3_sciLP ww9_sciLV;
              };
        };

lvl22_rcccn
  :: forall c. [c] -> [GHC.Types.Char] -> Text.Printf.FormatParse
[GblId, Arity=2, Str=<L,A><S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_sciLW ds1_sciLX]
        case ds1_sciLX of {
          [] -> Text.Printf.errorShortFormat;
          : c1_sciLZ [Occ=Once] cs_sciM0 [Occ=Once] ->
              Text.Printf.FormatParse [GHC.Types.[] c1_sciLZ cs_sciM0];
        };

Text.Printf.$fPrintfArg[] [InlPrag=NOUSERINLINE CONLIKE]
  :: forall c. Text.Printf.IsChar c => Text.Printf.PrintfArg [c]
[GblId[DFunId], Arity=1, Str=<L,U(C(U),A)>m] =
    [] \r [$dIsChar_sciM1]
        let {
          sat_sciM2 [Occ=Once] :: [c_ac8Zj] -> Text.Printf.FieldFormatter
          [LclId] =
              [$dIsChar_sciM1] \r [eta_B2 eta_B1]
                  Text.Printf.formatString $dIsChar_sciM1 eta_B2 eta_B1;
        } in  Text.Printf.C:PrintfArg [sat_sciM2 lvl22_rcccn];

lvl23_rccco :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['d'#];

sat_sciM3 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

sat_sciM4 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciM3 GHC.Types.[]];

lvl24_rcccp :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sciM4;

lvl25_rcccq :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "0X"#;

lvl26_rcccr :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl25_rcccq;

lvl27_rcccs :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "0b"#;

lvl28_rccct :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl27_rcccs;

lvl29_rcccu :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "printf: illegal char conversion"#;

lvl30_rcccv :: GHC.Show.ShowS
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl29_rcccu of sat_sciM5 {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sciM5;
        };

sat_sciM6 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1114111#];

sat_sciM7 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciM6 GHC.Types.[]];

lvl31_rcccw :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sciM7;

sat_sciM8 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

sat_sciM9 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciM8 GHC.Types.[]];

lvl32_rcccx :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sciM9;

lvl33_rcccy :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "0"#;

lvl34_rcccz :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl33_rcccy;

sat_sciMa :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [10#];

sat_sciMb :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sciMa GHC.Types.[]];

lvl35_rcccA :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sciMb;

lvl36_rcccB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "0x"#;

lvl37_rcccC :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl36_rcccB;

lvl38_rcccD :: GHC.Base.Maybe [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl26_rcccr];

lvl39_rcccE :: GHC.Base.Maybe [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl28_rccct];

lvl40_rcccF :: GHC.Base.Maybe [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl34_rcccz];

lvl41_rcccG :: GHC.Base.Maybe [GHC.Types.Char]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl37_rcccC];

Text.Printf.$wformatIntegral [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=9,
 Str=<L,1*U><L,U><L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciMc
           w1_sciMd
           ww_sciMe
           ww1_sciMf
           ww2_sciMg
           ww3_sciMh
           ww4_sciMi
           ww5_sciMj
           ww6_sciMk]
        let-no-escape {
          $w$j_sciMl [InlPrag=NOUSERINLINE[0],
                      Occ=Once*!T[8],
                      Dmd=<C(C(C(C(C(C(C(C(S)))))))),1*C1(C1(C1(C1(C1(C1(C1(C1(U))))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Prim.Char#
               -> Text.Printf.FieldFormat
               -> GHC.Show.ShowS
          [LclId[JoinId(8)],
           Arity=8,
           Str=<L,1*U><L,1*U><L,U><L,1*U><L,1*U><L,1*U><S,1*U><L,A>,
           Unf=OtherCon []] =
              sat-only [w_sciMc w1_sciMd ww1_sciMf] \r [w2_sciMm
                                                        w3_sciMn
                                                        w4_sciMo
                                                        w5_sciMp
                                                        w6_sciMq
                                                        w7_sciMr
                                                        ww7_sciMs
                                                        w8_sciMt]
                  case ww7_sciMs of ds_sciMu {
                    __DEFAULT -> Text.Printf.$werrorBadFormat ds_sciMu;
                    'X'# ->
                        let {
                          sat_sciMJ [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sciMc w1_sciMd ww1_sciMf w2_sciMm w4_sciMo w6_sciMq] \u []
                                  case
                                      GHC.Integer.Type.eqInteger# w1_sciMd Text.Printf.formatChar2
                                  of
                                  { __DEFAULT ->
                                        case w6_sciMq of {
                                          GHC.Types.False ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl24_rcccp
                                                      GHC.Base.Nothing
                                                      ww1_sciMf
                                                      w_sciMc
                                                      w1_sciMd
                                              of
                                              { (#,#) ww9_sciMy [Occ=Once] ww10_sciMz [Occ=Once] ->
                                                    let {
                                                      sat_sciMA [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [ww10_sciMz] \u []
                                                              GHC.Base.map
                                                                  GHC.Unicode.toUpper ww10_sciMz;
                                                    } in 
                                                      Text.Printf.$wadjust
                                                          w2_sciMm w4_sciMo ww9_sciMy sat_sciMA;
                                              };
                                          GHC.Types.True ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl24_rcccp
                                                      lvl38_rcccD
                                                      ww1_sciMf
                                                      w_sciMc
                                                      w1_sciMd
                                              of
                                              { (#,#) ww9_sciMC [Occ=Once] ww10_sciMD [Occ=Once] ->
                                                    let {
                                                      sat_sciME [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [ww10_sciMD] \u []
                                                              GHC.Base.map
                                                                  GHC.Unicode.toUpper ww10_sciMD;
                                                    } in 
                                                      Text.Printf.$wadjust
                                                          w2_sciMm w4_sciMo ww9_sciMC sat_sciME;
                                              };
                                        };
                                    1# ->
                                        case
                                            $wfmtu_rcccl
                                                lvl24_rcccp
                                                GHC.Base.Nothing
                                                ww1_sciMf
                                                w_sciMc
                                                w1_sciMd
                                        of
                                        { (#,#) ww9_sciMG [Occ=Once] ww10_sciMH [Occ=Once] ->
                                              let {
                                                sat_sciMI [Occ=Once] :: GHC.Base.String
                                                [LclId] =
                                                    [ww10_sciMH] \u []
                                                        GHC.Base.map GHC.Unicode.toUpper ww10_sciMH;
                                              } in 
                                                Text.Printf.$wadjust
                                                    w2_sciMm w4_sciMo ww9_sciMG sat_sciMI;
                                        };
                                  };
                        } in  GHC.Base.++ sat_sciMJ;
                    'b'# ->
                        let {
                          sat_sciMV [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sciMc w1_sciMd ww1_sciMf w2_sciMm w4_sciMo w6_sciMq] \u []
                                  case
                                      GHC.Integer.Type.eqInteger# w1_sciMd Text.Printf.formatChar2
                                  of
                                  { __DEFAULT ->
                                        case w6_sciMq of {
                                          GHC.Types.False ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl21_rccck
                                                      GHC.Base.Nothing
                                                      ww1_sciMf
                                                      w_sciMc
                                                      w1_sciMd
                                              of
                                              { (#,#) ww9_sciMN [Occ=Once] ww10_sciMO [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sciMm w4_sciMo ww9_sciMN ww10_sciMO;
                                              };
                                          GHC.Types.True ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl21_rccck
                                                      lvl39_rcccE
                                                      ww1_sciMf
                                                      w_sciMc
                                                      w1_sciMd
                                              of
                                              { (#,#) ww9_sciMQ [Occ=Once] ww10_sciMR [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sciMm w4_sciMo ww9_sciMQ ww10_sciMR;
                                              };
                                        };
                                    1# ->
                                        case
                                            $wfmtu_rcccl
                                                lvl21_rccck
                                                GHC.Base.Nothing
                                                ww1_sciMf
                                                w_sciMc
                                                w1_sciMd
                                        of
                                        { (#,#) ww9_sciMT [Occ=Once] ww10_sciMU [Occ=Once] ->
                                              Text.Printf.$wadjust
                                                  w2_sciMm w4_sciMo ww9_sciMT ww10_sciMU;
                                        };
                                  };
                        } in  GHC.Base.++ sat_sciMV;
                    'c'# ->
                        case
                            GHC.Integer.Type.geInteger# w1_sciMd Text.Printf.formatChar2
                        of
                        { __DEFAULT -> lvl30_rcccv;
                          1# ->
                              case GHC.Integer.Type.leInteger# w1_sciMd lvl31_rcccw of {
                                __DEFAULT -> lvl30_rcccv;
                                1# ->
                                    case w3_sciMn of {
                                      GHC.Base.Nothing ->
                                          case GHC.Base.eqString w7_sciMr GHC.Types.[] of {
                                            GHC.Types.False -> lvl30_rcccv;
                                            GHC.Types.True ->
                                                let {
                                                  sat_sciN4 [Occ=Once] :: GHC.Types.Char
                                                  [LclId] =
                                                      [w1_sciMd] \u []
                                                          case
                                                              GHC.Integer.Type.integerToInt w1_sciMd
                                                          of
                                                          wild4_sciN0
                                                          { __DEFAULT ->
                                                                case
                                                                    int2Word# [wild4_sciN0]
                                                                of
                                                                sat_sciN1
                                                                { __DEFAULT ->
                                                                      case
                                                                          leWord# [sat_sciN1
                                                                                   1114111##]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            GHC.Char.$wlvl
                                                                                wild4_sciN0;
                                                                        1# ->
                                                                            case
                                                                                chr# [wild4_sciN0]
                                                                            of
                                                                            sat_sciN3
                                                                            { __DEFAULT ->
                                                                                  GHC.Types.C# [sat_sciN3];
                                                                            };
                                                                      };
                                                                };
                                                          }; } in
                                                let {
                                                  sat_sciN5 [Occ=Once] :: [GHC.Types.Char]
                                                  [LclId] =
                                                      CCCS :! [sat_sciN4 GHC.Types.[]];
                                                } in 
                                                  Text.Printf.$w$sformatString
                                                      sat_sciN5
                                                      w2_sciMm
                                                      GHC.Base.Nothing
                                                      w4_sciMo
                                                      's'#;
                                          };
                                      GHC.Base.Just _ [Occ=Dead] -> lvl30_rcccv;
                                    };
                              };
                        };
                    'd'# ->
                        let {
                          sat_sciNa [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w1_sciMd ww1_sciMf w2_sciMm w4_sciMo w5_sciMp] \u []
                                  case $wfmti_rcccm ww1_sciMf w1_sciMd of {
                                    (#,#) ww9_sciN8 [Occ=Once] ww10_sciN9 [Occ=Once] ->
                                        Text.Printf.$wadjustSigned
                                            w2_sciMm w4_sciMo w5_sciMp ww9_sciN8 ww10_sciN9;
                                  };
                        } in  GHC.Base.++ sat_sciNa;
                    'i'# ->
                        let {
                          sat_sciNe [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w1_sciMd ww1_sciMf w2_sciMm w4_sciMo w5_sciMp] \u []
                                  case $wfmti_rcccm ww1_sciMf w1_sciMd of {
                                    (#,#) ww9_sciNc [Occ=Once] ww10_sciNd [Occ=Once] ->
                                        Text.Printf.$wadjustSigned
                                            w2_sciMm w4_sciMo w5_sciMp ww9_sciNc ww10_sciNd;
                                  };
                        } in  GHC.Base.++ sat_sciNe;
                    'o'# ->
                        let {
                          sat_sciNq [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sciMc w1_sciMd ww1_sciMf w2_sciMm w4_sciMo w6_sciMq] \u []
                                  case
                                      GHC.Integer.Type.eqInteger# w1_sciMd Text.Printf.formatChar2
                                  of
                                  { __DEFAULT ->
                                        case w6_sciMq of {
                                          GHC.Types.False ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl32_rcccx
                                                      GHC.Base.Nothing
                                                      ww1_sciMf
                                                      w_sciMc
                                                      w1_sciMd
                                              of
                                              { (#,#) ww9_sciNi [Occ=Once] ww10_sciNj [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sciMm w4_sciMo ww9_sciNi ww10_sciNj;
                                              };
                                          GHC.Types.True ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl32_rcccx
                                                      lvl40_rcccF
                                                      ww1_sciMf
                                                      w_sciMc
                                                      w1_sciMd
                                              of
                                              { (#,#) ww9_sciNl [Occ=Once] ww10_sciNm [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sciMm w4_sciMo ww9_sciNl ww10_sciNm;
                                              };
                                        };
                                    1# ->
                                        case
                                            $wfmtu_rcccl
                                                lvl32_rcccx
                                                GHC.Base.Nothing
                                                ww1_sciMf
                                                w_sciMc
                                                w1_sciMd
                                        of
                                        { (#,#) ww9_sciNo [Occ=Once] ww10_sciNp [Occ=Once] ->
                                              Text.Printf.$wadjust
                                                  w2_sciMm w4_sciMo ww9_sciNo ww10_sciNp;
                                        };
                                  };
                        } in  GHC.Base.++ sat_sciNq;
                    'u'# ->
                        let {
                          sat_sciNu [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sciMc w1_sciMd ww1_sciMf w2_sciMm w4_sciMo] \u []
                                  case
                                      $wfmtu_rcccl
                                          lvl35_rcccA GHC.Base.Nothing ww1_sciMf w_sciMc w1_sciMd
                                  of
                                  { (#,#) ww9_sciNs [Occ=Once] ww10_sciNt [Occ=Once] ->
                                        Text.Printf.$wadjust w2_sciMm w4_sciMo ww9_sciNs ww10_sciNt;
                                  };
                        } in  GHC.Base.++ sat_sciNu;
                    'x'# ->
                        let {
                          sat_sciNG [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [w_sciMc w1_sciMd ww1_sciMf w2_sciMm w4_sciMo w6_sciMq] \u []
                                  case
                                      GHC.Integer.Type.eqInteger# w1_sciMd Text.Printf.formatChar2
                                  of
                                  { __DEFAULT ->
                                        case w6_sciMq of {
                                          GHC.Types.False ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl24_rcccp
                                                      GHC.Base.Nothing
                                                      ww1_sciMf
                                                      w_sciMc
                                                      w1_sciMd
                                              of
                                              { (#,#) ww9_sciNy [Occ=Once] ww10_sciNz [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sciMm w4_sciMo ww9_sciNy ww10_sciNz;
                                              };
                                          GHC.Types.True ->
                                              case
                                                  $wfmtu_rcccl
                                                      lvl24_rcccp
                                                      lvl41_rcccG
                                                      ww1_sciMf
                                                      w_sciMc
                                                      w1_sciMd
                                              of
                                              { (#,#) ww9_sciNB [Occ=Once] ww10_sciNC [Occ=Once] ->
                                                    Text.Printf.$wadjust
                                                        w2_sciMm w4_sciMo ww9_sciNB ww10_sciNC;
                                              };
                                        };
                                    1# ->
                                        case
                                            $wfmtu_rcccl
                                                lvl24_rcccp
                                                GHC.Base.Nothing
                                                ww1_sciMf
                                                w_sciMc
                                                w1_sciMd
                                        of
                                        { (#,#) ww9_sciNE [Occ=Once] ww10_sciNF [Occ=Once] ->
                                              Text.Printf.$wadjust
                                                  w2_sciMm w4_sciMo ww9_sciNE ww10_sciNF;
                                        };
                                  };
                        } in  GHC.Base.++ sat_sciNG;
                  };
        } in 
          case ww1_sciMf of wild_sciNH {
            GHC.Base.Nothing ->
                case ww6_sciMk of ds_sciNI {
                  __DEFAULT ->
                      let {
                        sat_sciNJ [Occ=Once] :: GHC.Types.Char
                        [LclId] =
                            CCCS GHC.Types.C#! [ds_sciNI]; } in
                      let {
                        sat_sciNK [Occ=Once] :: Text.Printf.FieldFormat
                        [LclId] =
                            CCCS Text.Printf.FieldFormat! [ww_sciMe
                                                           GHC.Base.Nothing
                                                           ww2_sciMg
                                                           ww3_sciMh
                                                           ww4_sciMi
                                                           ww5_sciMj
                                                           sat_sciNJ];
                      } in 
                        $w$j_sciMl
                            ww_sciMe
                            GHC.Base.Nothing
                            ww2_sciMg
                            ww3_sciMh
                            ww4_sciMi
                            ww5_sciMj
                            ds_sciNI
                            sat_sciNK;
                  'v'# ->
                      let {
                        sat_sciNL [Occ=Once] :: Text.Printf.FieldFormat
                        [LclId] =
                            CCCS Text.Printf.FieldFormat! [ww_sciMe
                                                           GHC.Base.Nothing
                                                           ww2_sciMg
                                                           ww3_sciMh
                                                           ww4_sciMi
                                                           ww5_sciMj
                                                           lvl23_rccco];
                      } in 
                        $w$j_sciMl
                            ww_sciMe
                            GHC.Base.Nothing
                            ww2_sciMg
                            ww3_sciMh
                            ww4_sciMi
                            ww5_sciMj
                            'd'#
                            sat_sciNL;
                };
            GHC.Base.Just _ [Occ=Dead] ->
                case ww2_sciMg of wild1_sciNN {
                  GHC.Base.Nothing ->
                      case ww6_sciMk of ds1_sciNO {
                        __DEFAULT ->
                            let {
                              sat_sciNP [Occ=Once] :: GHC.Types.Char
                              [LclId] =
                                  CCCS GHC.Types.C#! [ds1_sciNO]; } in
                            let {
                              sat_sciNQ [Occ=Once] :: Text.Printf.FieldFormat
                              [LclId] =
                                  CCCS Text.Printf.FieldFormat! [ww_sciMe
                                                                 wild_sciNH
                                                                 GHC.Base.Nothing
                                                                 ww3_sciMh
                                                                 ww4_sciMi
                                                                 ww5_sciMj
                                                                 sat_sciNP];
                            } in 
                              $w$j_sciMl
                                  ww_sciMe
                                  wild_sciNH
                                  GHC.Base.Nothing
                                  ww3_sciMh
                                  ww4_sciMi
                                  ww5_sciMj
                                  ds1_sciNO
                                  sat_sciNQ;
                        'v'# ->
                            let {
                              sat_sciNR [Occ=Once] :: Text.Printf.FieldFormat
                              [LclId] =
                                  CCCS Text.Printf.FieldFormat! [ww_sciMe
                                                                 wild_sciNH
                                                                 GHC.Base.Nothing
                                                                 ww3_sciMh
                                                                 ww4_sciMi
                                                                 ww5_sciMj
                                                                 lvl23_rccco];
                            } in 
                              $w$j_sciMl
                                  ww_sciMe
                                  wild_sciNH
                                  GHC.Base.Nothing
                                  ww3_sciMh
                                  ww4_sciMi
                                  ww5_sciMj
                                  'd'#
                                  sat_sciNR;
                      };
                  GHC.Base.Just ds1_sciNS [Occ=Once!] ->
                      case ds1_sciNS of {
                        Text.Printf.LeftAdjust ->
                            case ww6_sciMk of ds2_sciNU {
                              __DEFAULT ->
                                  let {
                                    sat_sciNV [Occ=Once] :: GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.Types.C#! [ds2_sciNU]; } in
                                  let {
                                    sat_sciNW [Occ=Once] :: Text.Printf.FieldFormat
                                    [LclId] =
                                        CCCS Text.Printf.FieldFormat! [ww_sciMe
                                                                       wild_sciNH
                                                                       wild1_sciNN
                                                                       ww3_sciMh
                                                                       ww4_sciMi
                                                                       ww5_sciMj
                                                                       sat_sciNV];
                                  } in 
                                    $w$j_sciMl
                                        ww_sciMe
                                        wild_sciNH
                                        wild1_sciNN
                                        ww3_sciMh
                                        ww4_sciMi
                                        ww5_sciMj
                                        ds2_sciNU
                                        sat_sciNW;
                              'v'# ->
                                  let {
                                    sat_sciNX [Occ=Once] :: Text.Printf.FieldFormat
                                    [LclId] =
                                        CCCS Text.Printf.FieldFormat! [ww_sciMe
                                                                       wild_sciNH
                                                                       wild1_sciNN
                                                                       ww3_sciMh
                                                                       ww4_sciMi
                                                                       ww5_sciMj
                                                                       lvl23_rccco];
                                  } in 
                                    $w$j_sciMl
                                        ww_sciMe
                                        wild_sciNH
                                        wild1_sciNN
                                        ww3_sciMh
                                        ww4_sciMi
                                        ww5_sciMj
                                        'd'#
                                        sat_sciNX;
                            };
                        Text.Printf.ZeroPad ->
                            case ww6_sciMk of ds2_sciNY {
                              __DEFAULT ->
                                  let {
                                    sat_sciNZ [Occ=Once] :: GHC.Types.Char
                                    [LclId] =
                                        CCCS GHC.Types.C#! [ds2_sciNY]; } in
                                  let {
                                    sat_sciO0 [Occ=Once] :: Text.Printf.FieldFormat
                                    [LclId] =
                                        CCCS Text.Printf.FieldFormat! [ww_sciMe
                                                                       wild_sciNH
                                                                       GHC.Base.Nothing
                                                                       ww3_sciMh
                                                                       ww4_sciMi
                                                                       ww5_sciMj
                                                                       sat_sciNZ];
                                  } in 
                                    $w$j_sciMl
                                        ww_sciMe
                                        wild_sciNH
                                        GHC.Base.Nothing
                                        ww3_sciMh
                                        ww4_sciMi
                                        ww5_sciMj
                                        ds2_sciNY
                                        sat_sciO0;
                              'v'# ->
                                  let {
                                    sat_sciO1 [Occ=Once] :: Text.Printf.FieldFormat
                                    [LclId] =
                                        CCCS Text.Printf.FieldFormat! [ww_sciMe
                                                                       wild_sciNH
                                                                       GHC.Base.Nothing
                                                                       ww3_sciMh
                                                                       ww4_sciMi
                                                                       ww5_sciMj
                                                                       lvl23_rccco];
                                  } in 
                                    $w$j_sciMl
                                        ww_sciMe
                                        wild_sciNH
                                        GHC.Base.Nothing
                                        ww3_sciMh
                                        ww4_sciMi
                                        ww5_sciMj
                                        'd'#
                                        sat_sciO1;
                            };
                      };
                };
          };

Text.Printf.formatIntegral [InlPrag=NOUSERINLINE[0]]
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> Text.Printf.FieldFormatter
[GblId,
 Arity=3,
 Str=<L,1*U><L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,1*U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciO2 w1_sciO3 w2_sciO4]
        case w2_sciO4 of {
          Text.Printf.FieldFormat ww1_sciO6 [Occ=Once]
                                  ww2_sciO7 [Occ=Once]
                                  ww3_sciO8 [Occ=Once]
                                  ww4_sciO9 [Occ=Once]
                                  ww5_sciOa [Occ=Once]
                                  ww6_sciOb [Occ=Once]
                                  ww7_sciOc [Occ=Once!] ->
              case ww7_sciOc of {
                GHC.Types.C# ww9_sciOe [Occ=Once] ->
                    Text.Printf.$wformatIntegral
                        w_sciO2
                        w1_sciO3
                        ww1_sciO6
                        ww2_sciO7
                        ww3_sciO8
                        ww4_sciO9
                        ww5_sciOa
                        ww6_sciOb
                        ww9_sciOe;
              };
        };

Text.Printf.formatChar1 :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.formatChar2];

Text.Printf.$wformatChar [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciOf
           ww_sciOg
           ww1_sciOh
           ww2_sciOi
           ww3_sciOj
           ww4_sciOk
           ww5_sciOl
           ww6_sciOm]
        case ww6_sciOm of ds_sciOn {
          __DEFAULT ->
              let {
                sat_sciOr [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [w_sciOf] \u []
                        case w_sciOf of {
                          GHC.Types.C# c#_sciOp [Occ=Once] ->
                              case ord# [c#_sciOp] of sat_sciOq {
                                __DEFAULT -> GHC.Integer.Type.smallInteger sat_sciOq;
                              };
                        };
              } in 
                Text.Printf.$wformatIntegral
                    Text.Printf.formatChar1
                    sat_sciOr
                    ww_sciOg
                    ww1_sciOh
                    ww2_sciOi
                    ww3_sciOj
                    ww4_sciOk
                    ww5_sciOl
                    ds_sciOn;
          'v'# ->
              let {
                sat_sciOv [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [w_sciOf] \u []
                        case w_sciOf of {
                          GHC.Types.C# c#_sciOt [Occ=Once] ->
                              case ord# [c#_sciOt] of sat_sciOu {
                                __DEFAULT -> GHC.Integer.Type.smallInteger sat_sciOu;
                              };
                        };
              } in 
                Text.Printf.$wformatIntegral
                    Text.Printf.formatChar1
                    sat_sciOv
                    ww_sciOg
                    ww1_sciOh
                    ww2_sciOi
                    ww3_sciOj
                    ww4_sciOk
                    ww5_sciOl
                    'c'#;
        };

Text.Printf.formatChar [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,1*U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciOw w1_sciOx]
        case w1_sciOx of {
          Text.Printf.FieldFormat ww1_sciOz [Occ=Once]
                                  ww2_sciOA [Occ=Once]
                                  ww3_sciOB [Occ=Once]
                                  ww4_sciOC [Occ=Once]
                                  ww5_sciOD [Occ=Once]
                                  ww6_sciOE [Occ=Once]
                                  ww7_sciOF [Occ=Once!] ->
              case ww7_sciOF of {
                GHC.Types.C# ww9_sciOH [Occ=Once] ->
                    Text.Printf.$wformatChar
                        w_sciOw
                        ww1_sciOz
                        ww2_sciOA
                        ww3_sciOB
                        ww4_sciOC
                        ww5_sciOD
                        ww6_sciOE
                        ww9_sciOH;
              };
        };

Text.Printf.$fPrintfArgChar [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Char
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.formatChar
                                            Text.Printf.$fPrintfArgChar_$cparseFormat];

Text.Printf.$fPrintfArgWord1 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['u'#];

Text.Printf.$w$sformatInt3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word64
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciOI
           ww_sciOJ
           ww1_sciOK
           ww2_sciOL
           ww3_sciOM
           ww4_sciON
           ww5_sciOO
           ww6_sciOP]
        let-no-escape {
          $j_sciOQ [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_sciOI ww5_sciOO] \r [ww7_sciOR
                                               ww8_sciOS
                                               ww9_sciOT
                                               ww10_sciOU
                                               ww11_sciOV
                                               ww12_sciOW
                                               ww13_sciOX]
                  case ww13_sciOX of {
                    GHC.Types.C# ww15_sciOZ [Occ=Once] ->
                        let {
                          sat_sciP6 [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_sciOI] \u [] GHC.Word.$fIntegralWord64_$ctoInteger w_sciOI; } in
                        let {
                          sat_sciP5 [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_sciOO] \s []
                                  case ww5_sciOO of wild_sciP0 {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_sciP0
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_sciP3
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_sciP3;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_sciP5
                              sat_sciP6
                              ww7_sciOR
                              ww8_sciOS
                              ww9_sciOT
                              ww10_sciOU
                              ww11_sciOV
                              ww12_sciOW
                              ww15_sciOZ;
                  };
        } in 
          case ww6_sciOP of ds_sciP7 {
            __DEFAULT ->
                let {
                  sat_sciP8 [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_sciP7];
                } in 
                  $j_sciOQ
                      ww_sciOJ
                      ww1_sciOK
                      ww2_sciOL
                      ww3_sciOM
                      ww4_sciON
                      ww5_sciOO
                      sat_sciP8;
            'v'# ->
                $j_sciOQ
                    ww_sciOJ
                    ww1_sciOK
                    ww2_sciOL
                    ww3_sciOM
                    ww4_sciON
                    ww5_sciOO
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord64_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word64 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciP9 w1_sciPa]
        case w1_sciPa of {
          Text.Printf.FieldFormat ww1_sciPc [Occ=Once]
                                  ww2_sciPd [Occ=Once]
                                  ww3_sciPe [Occ=Once]
                                  ww4_sciPf [Occ=Once]
                                  ww5_sciPg [Occ=Once]
                                  ww6_sciPh [Occ=Once]
                                  ww7_sciPi [Occ=Once!] ->
              case ww7_sciPi of {
                GHC.Types.C# ww9_sciPk [Occ=Once] ->
                    Text.Printf.$w$sformatInt3
                        w_sciP9
                        ww1_sciPc
                        ww2_sciPd
                        ww3_sciPe
                        ww4_sciPf
                        ww5_sciPg
                        ww6_sciPh
                        ww9_sciPk;
              };
        };

Text.Printf.$w$sformatInt2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciPl
           ww_sciPm
           ww1_sciPn
           ww2_sciPo
           ww3_sciPp
           ww4_sciPq
           ww5_sciPr
           ww6_sciPs]
        let-no-escape {
          $j_sciPt [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_sciPl ww5_sciPr] \r [ww7_sciPu
                                               ww8_sciPv
                                               ww9_sciPw
                                               ww10_sciPx
                                               ww11_sciPy
                                               ww12_sciPz
                                               ww13_sciPA]
                  case ww13_sciPA of {
                    GHC.Types.C# ww15_sciPC [Occ=Once] ->
                        let {
                          sat_sciPJ [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_sciPl] \u [] GHC.Word.$ctoInteger2 w_sciPl; } in
                        let {
                          sat_sciPI [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_sciPr] \s []
                                  case ww5_sciPr of wild_sciPD {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_sciPD
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_sciPG
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_sciPG;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_sciPI
                              sat_sciPJ
                              ww7_sciPu
                              ww8_sciPv
                              ww9_sciPw
                              ww10_sciPx
                              ww11_sciPy
                              ww12_sciPz
                              ww15_sciPC;
                  };
        } in 
          case ww6_sciPs of ds_sciPK {
            __DEFAULT ->
                let {
                  sat_sciPL [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_sciPK];
                } in 
                  $j_sciPt
                      ww_sciPm
                      ww1_sciPn
                      ww2_sciPo
                      ww3_sciPp
                      ww4_sciPq
                      ww5_sciPr
                      sat_sciPL;
            'v'# ->
                $j_sciPt
                    ww_sciPm
                    ww1_sciPn
                    ww2_sciPo
                    ww3_sciPp
                    ww4_sciPq
                    ww5_sciPr
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord32_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciPM w1_sciPN]
        case w1_sciPN of {
          Text.Printf.FieldFormat ww1_sciPP [Occ=Once]
                                  ww2_sciPQ [Occ=Once]
                                  ww3_sciPR [Occ=Once]
                                  ww4_sciPS [Occ=Once]
                                  ww5_sciPT [Occ=Once]
                                  ww6_sciPU [Occ=Once]
                                  ww7_sciPV [Occ=Once!] ->
              case ww7_sciPV of {
                GHC.Types.C# ww9_sciPX [Occ=Once] ->
                    Text.Printf.$w$sformatInt2
                        w_sciPM
                        ww1_sciPP
                        ww2_sciPQ
                        ww3_sciPR
                        ww4_sciPS
                        ww5_sciPT
                        ww6_sciPU
                        ww9_sciPX;
              };
        };

Text.Printf.$w$sformatInt1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciPY
           ww_sciPZ
           ww1_sciQ0
           ww2_sciQ1
           ww3_sciQ2
           ww4_sciQ3
           ww5_sciQ4
           ww6_sciQ5]
        let-no-escape {
          $j_sciQ6 [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_sciPY ww5_sciQ4] \r [ww7_sciQ7
                                               ww8_sciQ8
                                               ww9_sciQ9
                                               ww10_sciQa
                                               ww11_sciQb
                                               ww12_sciQc
                                               ww13_sciQd]
                  case ww13_sciQd of {
                    GHC.Types.C# ww15_sciQf [Occ=Once] ->
                        let {
                          sat_sciQm [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_sciPY] \u [] GHC.Word.$ctoInteger1 w_sciPY; } in
                        let {
                          sat_sciQl [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_sciQ4] \s []
                                  case ww5_sciQ4 of wild_sciQg {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_sciQg
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_sciQj
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_sciQj;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_sciQl
                              sat_sciQm
                              ww7_sciQ7
                              ww8_sciQ8
                              ww9_sciQ9
                              ww10_sciQa
                              ww11_sciQb
                              ww12_sciQc
                              ww15_sciQf;
                  };
        } in 
          case ww6_sciQ5 of ds_sciQn {
            __DEFAULT ->
                let {
                  sat_sciQo [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_sciQn];
                } in 
                  $j_sciQ6
                      ww_sciPZ
                      ww1_sciQ0
                      ww2_sciQ1
                      ww3_sciQ2
                      ww4_sciQ3
                      ww5_sciQ4
                      sat_sciQo;
            'v'# ->
                $j_sciQ6
                    ww_sciPZ
                    ww1_sciQ0
                    ww2_sciQ1
                    ww3_sciQ2
                    ww4_sciQ3
                    ww5_sciQ4
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord16_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciQp w1_sciQq]
        case w1_sciQq of {
          Text.Printf.FieldFormat ww1_sciQs [Occ=Once]
                                  ww2_sciQt [Occ=Once]
                                  ww3_sciQu [Occ=Once]
                                  ww4_sciQv [Occ=Once]
                                  ww5_sciQw [Occ=Once]
                                  ww6_sciQx [Occ=Once]
                                  ww7_sciQy [Occ=Once!] ->
              case ww7_sciQy of {
                GHC.Types.C# ww9_sciQA [Occ=Once] ->
                    Text.Printf.$w$sformatInt1
                        w_sciQp
                        ww1_sciQs
                        ww2_sciQt
                        ww3_sciQu
                        ww4_sciQv
                        ww5_sciQw
                        ww6_sciQx
                        ww9_sciQA;
              };
        };

Text.Printf.$w$sformatInt4 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciQB
           ww_sciQC
           ww1_sciQD
           ww2_sciQE
           ww3_sciQF
           ww4_sciQG
           ww5_sciQH
           ww6_sciQI]
        let-no-escape {
          $j_sciQJ [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_sciQB ww5_sciQH] \r [ww7_sciQK
                                               ww8_sciQL
                                               ww9_sciQM
                                               ww10_sciQN
                                               ww11_sciQO
                                               ww12_sciQP
                                               ww13_sciQQ]
                  case ww13_sciQQ of {
                    GHC.Types.C# ww15_sciQS [Occ=Once] ->
                        let {
                          sat_sciQZ [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_sciQB] \u [] GHC.Word.$ctoInteger w_sciQB; } in
                        let {
                          sat_sciQY [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_sciQH] \s []
                                  case ww5_sciQH of wild_sciQT {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_sciQT
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_sciQW
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_sciQW;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_sciQY
                              sat_sciQZ
                              ww7_sciQK
                              ww8_sciQL
                              ww9_sciQM
                              ww10_sciQN
                              ww11_sciQO
                              ww12_sciQP
                              ww15_sciQS;
                  };
        } in 
          case ww6_sciQI of ds_sciR0 {
            __DEFAULT ->
                let {
                  sat_sciR1 [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_sciR0];
                } in 
                  $j_sciQJ
                      ww_sciQC
                      ww1_sciQD
                      ww2_sciQE
                      ww3_sciQF
                      ww4_sciQG
                      ww5_sciQH
                      sat_sciR1;
            'v'# ->
                $j_sciQJ
                    ww_sciQC
                    ww1_sciQD
                    ww2_sciQE
                    ww3_sciQF
                    ww4_sciQG
                    ww5_sciQH
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord8_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciR2 w1_sciR3]
        case w1_sciR3 of {
          Text.Printf.FieldFormat ww1_sciR5 [Occ=Once]
                                  ww2_sciR6 [Occ=Once]
                                  ww3_sciR7 [Occ=Once]
                                  ww4_sciR8 [Occ=Once]
                                  ww5_sciR9 [Occ=Once]
                                  ww6_sciRa [Occ=Once]
                                  ww7_sciRb [Occ=Once!] ->
              case ww7_sciRb of {
                GHC.Types.C# ww9_sciRd [Occ=Once] ->
                    Text.Printf.$w$sformatInt4
                        w_sciR2
                        ww1_sciR5
                        ww2_sciR6
                        ww3_sciR7
                        ww4_sciR8
                        ww5_sciR9
                        ww6_sciRa
                        ww9_sciRd;
              };
        };

Text.Printf.$w$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Word
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(1*U)><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciRe
           ww_sciRf
           ww1_sciRg
           ww2_sciRh
           ww3_sciRi
           ww4_sciRj
           ww5_sciRk
           ww6_sciRl]
        let-no-escape {
          $j_sciRm [Occ=Once*!T[7],
                    Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
            :: GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe GHC.Types.Int
               -> GHC.Base.Maybe Text.Printf.FormatAdjustment
               -> GHC.Base.Maybe Text.Printf.FormatSign
               -> GHC.Types.Bool
               -> GHC.Base.String
               -> GHC.Types.Char
               -> GHC.Show.ShowS
          [LclId[JoinId(7)],
           Arity=7,
           Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
           Unf=OtherCon []] =
              sat-only [w_sciRe ww5_sciRk] \r [ww7_sciRn
                                               ww8_sciRo
                                               ww9_sciRp
                                               ww10_sciRq
                                               ww11_sciRr
                                               ww12_sciRs
                                               ww13_sciRt]
                  case ww13_sciRt of {
                    GHC.Types.C# ww15_sciRv [Occ=Once] ->
                        let {
                          sat_sciRC [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId] =
                              [w_sciRe] \u [] GHC.Real.$fIntegralWord_$ctoInteger w_sciRe; } in
                        let {
                          sat_sciRB [Occ=Once, Dmd=<L,1*U>]
                            :: GHC.Base.Maybe GHC.Integer.Type.Integer
                          [LclId] =
                              [ww5_sciRk] \s []
                                  case ww5_sciRk of wild_sciRw {
                                    [] -> Text.Printf.formatChar1;
                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                        case
                                            GHC.List.lookup
                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                wild_sciRw
                                                Text.Printf.intModifierMap
                                        of
                                        wild1_sciRz
                                        { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                          GHC.Base.Just _ [Occ=Dead] -> wild1_sciRz;
                                        };
                                  };
                        } in 
                          Text.Printf.$wformatIntegral
                              sat_sciRB
                              sat_sciRC
                              ww7_sciRn
                              ww8_sciRo
                              ww9_sciRp
                              ww10_sciRq
                              ww11_sciRr
                              ww12_sciRs
                              ww15_sciRv;
                  };
        } in 
          case ww6_sciRl of ds_sciRD {
            __DEFAULT ->
                let {
                  sat_sciRE [Occ=Once] :: GHC.Types.Char
                  [LclId] =
                      CCCS GHC.Types.C#! [ds_sciRD];
                } in 
                  $j_sciRm
                      ww_sciRf
                      ww1_sciRg
                      ww2_sciRh
                      ww3_sciRi
                      ww4_sciRj
                      ww5_sciRk
                      sat_sciRE;
            'v'# ->
                $j_sciRm
                    ww_sciRf
                    ww1_sciRg
                    ww2_sciRh
                    ww3_sciRi
                    ww4_sciRj
                    ww5_sciRk
                    Text.Printf.$fPrintfArgWord1;
          };

Text.Printf.$fPrintfArgWord_$sformatInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Word -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(1*U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciRF w1_sciRG]
        case w1_sciRG of {
          Text.Printf.FieldFormat ww1_sciRI [Occ=Once]
                                  ww2_sciRJ [Occ=Once]
                                  ww3_sciRK [Occ=Once]
                                  ww4_sciRL [Occ=Once]
                                  ww5_sciRM [Occ=Once]
                                  ww6_sciRN [Occ=Once]
                                  ww7_sciRO [Occ=Once!] ->
              case ww7_sciRO of {
                GHC.Types.C# ww9_sciRQ [Occ=Once] ->
                    Text.Printf.$w$sformatInt
                        w_sciRF
                        ww1_sciRI
                        ww2_sciRJ
                        ww3_sciRK
                        ww4_sciRL
                        ww5_sciRM
                        ww6_sciRN
                        ww9_sciRQ;
              };
        };

Text.Printf.$fPrintfArgInt1
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.$fPrintfArgChar7];

Text.Printf.$fPrintfArgInt64_$sformatInt
  :: GHC.Int.Int64 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sciRR ufmt_sciRS]
        case ufmt_sciRS of {
          Text.Printf.FieldFormat ww1_sciRU [Occ=Once]
                                  ww2_sciRV [Occ=Once]
                                  ww3_sciRW [Occ=Once]
                                  ww4_sciRX [Occ=Once]
                                  ww5_sciRY [Occ=Once]
                                  ww6_sciRZ
                                  ww7_sciS0 [Occ=Once!] ->
              case ww7_sciS0 of {
                GHC.Types.C# ww9_sciS2 [Occ=Once] ->
                    let {
                      sat_sciS9 [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sciRR] \u [] GHC.Int.$fIntegralInt64_$ctoInteger x_sciRR; } in
                    let {
                      sat_sciS8 [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sciRZ] \s []
                              case ww6_sciRZ of wild_sciS3 {
                                [] -> Text.Printf.$fPrintfArgInt1;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sciS3
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sciS6
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sciS6;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sciS8
                          sat_sciS9
                          ww1_sciRU
                          ww2_sciRV
                          ww3_sciRW
                          ww4_sciRX
                          ww5_sciRY
                          ww6_sciRZ
                          ww9_sciS2;
              };
        };

Text.Printf.$fPrintfArgInt4
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.$fPrintfArgChar14];

Text.Printf.$fPrintfArgInt32_$sformatInt
  :: GHC.Int.Int32 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sciSa ufmt_sciSb]
        case ufmt_sciSb of {
          Text.Printf.FieldFormat ww1_sciSd [Occ=Once]
                                  ww2_sciSe [Occ=Once]
                                  ww3_sciSf [Occ=Once]
                                  ww4_sciSg [Occ=Once]
                                  ww5_sciSh [Occ=Once]
                                  ww6_sciSi
                                  ww7_sciSj [Occ=Once!] ->
              case ww7_sciSj of {
                GHC.Types.C# ww9_sciSl [Occ=Once] ->
                    let {
                      sat_sciSs [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sciSa] \u [] GHC.Int.$fIntegralInt32_$ctoInteger x_sciSa; } in
                    let {
                      sat_sciSr [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sciSi] \s []
                              case ww6_sciSi of wild_sciSm {
                                [] -> Text.Printf.$fPrintfArgInt4;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sciSm
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sciSp
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sciSp;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sciSr
                          sat_sciSs
                          ww1_sciSd
                          ww2_sciSe
                          ww3_sciSf
                          ww4_sciSg
                          ww5_sciSh
                          ww6_sciSi
                          ww9_sciSl;
              };
        };

Text.Printf.$fPrintfArgInt3
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.$fPrintfArgChar18];

Text.Printf.$fPrintfArgInt16_$sformatInt
  :: GHC.Int.Int16 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sciSt ufmt_sciSu]
        case ufmt_sciSu of {
          Text.Printf.FieldFormat ww1_sciSw [Occ=Once]
                                  ww2_sciSx [Occ=Once]
                                  ww3_sciSy [Occ=Once]
                                  ww4_sciSz [Occ=Once]
                                  ww5_sciSA [Occ=Once]
                                  ww6_sciSB
                                  ww7_sciSC [Occ=Once!] ->
              case ww7_sciSC of {
                GHC.Types.C# ww9_sciSE [Occ=Once] ->
                    let {
                      sat_sciSL [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sciSt] \u [] GHC.Int.$fIntegralInt16_$ctoInteger x_sciSt; } in
                    let {
                      sat_sciSK [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sciSB] \s []
                              case ww6_sciSB of wild_sciSF {
                                [] -> Text.Printf.$fPrintfArgInt3;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sciSF
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sciSI
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sciSI;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sciSK
                          sat_sciSL
                          ww1_sciSw
                          ww2_sciSx
                          ww3_sciSy
                          ww4_sciSz
                          ww5_sciSA
                          ww6_sciSB
                          ww9_sciSE;
              };
        };

Text.Printf.$fPrintfArgInt5
  :: GHC.Base.Maybe GHC.Integer.Type.Integer
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.$fPrintfArgChar22];

Text.Printf.$fPrintfArgInt8_$sformatInt
  :: GHC.Int.Int8 -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sciSM ufmt_sciSN]
        case ufmt_sciSN of {
          Text.Printf.FieldFormat ww1_sciSP [Occ=Once]
                                  ww2_sciSQ [Occ=Once]
                                  ww3_sciSR [Occ=Once]
                                  ww4_sciSS [Occ=Once]
                                  ww5_sciST [Occ=Once]
                                  ww6_sciSU
                                  ww7_sciSV [Occ=Once!] ->
              case ww7_sciSV of {
                GHC.Types.C# ww9_sciSX [Occ=Once] ->
                    let {
                      sat_sciT4 [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sciSM] \u [] GHC.Int.$fIntegralInt8_$ctoInteger x_sciSM; } in
                    let {
                      sat_sciT3 [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sciSU] \s []
                              case ww6_sciSU of wild_sciSY {
                                [] -> Text.Printf.$fPrintfArgInt5;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sciSY
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sciT1
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sciT1;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sciT3
                          sat_sciT4
                          ww1_sciSP
                          ww2_sciSQ
                          ww3_sciSR
                          ww4_sciSS
                          ww5_sciST
                          ww6_sciSU
                          ww9_sciSX;
              };
        };

Text.Printf.$fPrintfArgInt_$sformatInt
  :: GHC.Types.Int -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,1*U(U)><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sciT5 ufmt_sciT6]
        case ufmt_sciT6 of {
          Text.Printf.FieldFormat ww1_sciT8 [Occ=Once]
                                  ww2_sciT9 [Occ=Once]
                                  ww3_sciTa [Occ=Once]
                                  ww4_sciTb [Occ=Once]
                                  ww5_sciTc [Occ=Once]
                                  ww6_sciTd
                                  ww7_sciTe [Occ=Once!] ->
              case ww7_sciTe of {
                GHC.Types.C# ww9_sciTg [Occ=Once] ->
                    let {
                      sat_sciTn [Occ=Once] :: GHC.Integer.Type.Integer
                      [LclId] =
                          [x_sciT5] \u [] GHC.Real.$fIntegralInt_$ctoInteger x_sciT5; } in
                    let {
                      sat_sciTm [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sciTd] \s []
                              case ww6_sciTd of wild_sciTh {
                                [] -> Text.Printf.$fPrintfArgInt1;
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sciTh
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sciTk
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sciTk;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sciTm
                          sat_sciTn
                          ww1_sciT8
                          ww2_sciT9
                          ww3_sciTa
                          ww4_sciTb
                          ww5_sciTc
                          ww6_sciTd
                          ww9_sciTg;
              };
        };

Text.Printf.$wformatInt [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Real.Integral a, GHC.Enum.Bounded a) =>
     a
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Prim.Char#
     -> GHC.Show.ShowS
[GblId,
 Arity=10,
 Str=<S(LLLLLLLLC(S)),U(A,A,A,A,A,A,A,A,C(U))><L,1*U(1*U,A)><L,U><L,1*U><S,U><L,U><L,1*U><L,1*U><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_sciTo
           w1_sciTp
           w2_sciTq
           ww_sciTr
           ww1_sciTs
           ww2_sciTt
           ww3_sciTu
           ww4_sciTv
           ww5_sciTw
           ww6_sciTx]
        let {
          sat_sciTz [Occ=Once] :: a_scbdf
          [LclId] =
              [w1_sciTp] \u [] GHC.Enum.minBound w1_sciTp;
        } in 
          case GHC.Real.toInteger w_sciTo sat_sciTz of lb_sciTy [Dmd=<S,U>] {
            __DEFAULT ->
                let-no-escape {
                  $j_sciTA [Occ=Once*!T[7],
                            Dmd=<C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U)))))))>]
                    :: GHC.Base.Maybe GHC.Types.Int
                       -> GHC.Base.Maybe GHC.Types.Int
                       -> GHC.Base.Maybe Text.Printf.FormatAdjustment
                       -> GHC.Base.Maybe Text.Printf.FormatSign
                       -> GHC.Types.Bool
                       -> GHC.Base.String
                       -> GHC.Types.Char
                       -> GHC.Show.ShowS
                  [LclId[JoinId(7)],
                   Arity=7,
                   Str=<L,1*U><S,U><L,U><L,1*U><L,1*U><L,1*U><S(S),1*U(1*U)>,
                   Unf=OtherCon []] =
                      sat-only [w_sciTo w2_sciTq ww5_sciTw lb_sciTy] \r [ww7_sciTB
                                                                         ww8_sciTC
                                                                         ww9_sciTD
                                                                         ww10_sciTE
                                                                         ww11_sciTF
                                                                         ww12_sciTG
                                                                         ww13_sciTH]
                          case ww13_sciTH of {
                            GHC.Types.C# ww15_sciTJ [Occ=Once] ->
                                let {
                                  sat_sciTQ [Occ=Once] :: GHC.Integer.Type.Integer
                                  [LclId] =
                                      [w_sciTo w2_sciTq] \u []
                                          GHC.Real.toInteger w_sciTo w2_sciTq; } in
                                let {
                                  sat_sciTP [Occ=Once, Dmd=<L,1*U>]
                                    :: GHC.Base.Maybe GHC.Integer.Type.Integer
                                  [LclId] =
                                      [ww5_sciTw lb_sciTy] \s []
                                          case ww5_sciTw of wild_sciTK {
                                            [] -> GHC.Base.Just [lb_sciTy];
                                            : _ [Occ=Dead] _ [Occ=Dead] ->
                                                case
                                                    GHC.List.lookup
                                                        GHC.Classes.$fEq[]_$s$fEq[]1
                                                        wild_sciTK
                                                        Text.Printf.intModifierMap
                                                of
                                                wild1_sciTN
                                                { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                                  GHC.Base.Just _ [Occ=Dead] -> wild1_sciTN;
                                                };
                                          };
                                } in 
                                  Text.Printf.$wformatIntegral
                                      sat_sciTP
                                      sat_sciTQ
                                      ww7_sciTB
                                      ww8_sciTC
                                      ww9_sciTD
                                      ww10_sciTE
                                      ww11_sciTF
                                      ww12_sciTG
                                      ww15_sciTJ;
                          };
                } in 
                  case
                      GHC.Integer.Type.eqInteger# lb_sciTy Text.Printf.formatChar2
                  of
                  { __DEFAULT ->
                        let {
                          sat_sciTS [Occ=Once] :: GHC.Types.Char
                          [LclId] =
                              CCCS GHC.Types.C#! [ww6_sciTx];
                        } in 
                          $j_sciTA
                              ww_sciTr
                              ww1_sciTs
                              ww2_sciTt
                              ww3_sciTu
                              ww4_sciTv
                              ww5_sciTw
                              sat_sciTS;
                    1# ->
                        case ww6_sciTx of ds_sciTT {
                          __DEFAULT ->
                              let {
                                sat_sciTU [Occ=Once] :: GHC.Types.Char
                                [LclId] =
                                    CCCS GHC.Types.C#! [ds_sciTT];
                              } in 
                                $j_sciTA
                                    ww_sciTr
                                    ww1_sciTs
                                    ww2_sciTt
                                    ww3_sciTu
                                    ww4_sciTv
                                    ww5_sciTw
                                    sat_sciTU;
                          'v'# ->
                              $j_sciTA
                                  ww_sciTr
                                  ww1_sciTs
                                  ww2_sciTt
                                  ww3_sciTu
                                  ww4_sciTv
                                  ww5_sciTw
                                  Text.Printf.$fPrintfArgWord1;
                        };
                  };
          };

Text.Printf.formatInt [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (GHC.Real.Integral a, GHC.Enum.Bounded a) =>
     a -> Text.Printf.FieldFormatter
[GblId,
 Arity=4,
 Str=<S(LLLLLLLLC(S)),U(A,A,A,A,A,A,A,A,C(U))><L,1*U(1*U,A)><L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [w_sciTV w1_sciTW w2_sciTX w3_sciTY]
        case w3_sciTY of {
          Text.Printf.FieldFormat ww1_sciU0 [Occ=Once]
                                  ww2_sciU1 [Occ=Once]
                                  ww3_sciU2 [Occ=Once]
                                  ww4_sciU3 [Occ=Once]
                                  ww5_sciU4 [Occ=Once]
                                  ww6_sciU5 [Occ=Once]
                                  ww7_sciU6 [Occ=Once!] ->
              case ww7_sciU6 of {
                GHC.Types.C# ww9_sciU8 [Occ=Once] ->
                    Text.Printf.$wformatInt
                        w_sciTV
                        w1_sciTW
                        w2_sciTX
                        ww1_sciU0
                        ww2_sciU1
                        ww3_sciU2
                        ww4_sciU3
                        ww5_sciU4
                        ww6_sciU5
                        ww9_sciU8;
              };
        };

Text.Printf.$fPrintfArgWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord64_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord32_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord16_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord8_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgWord [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Word
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgWord_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Int.Int64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt64_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Int.Int32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt32_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Int.Int16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt16_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Int.Int8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt8_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInt [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Types.Int
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgInt_$sformatInt
                                            Text.Printf.parseIntFormat];

Text.Printf.formatInteger
  :: GHC.Integer.Type.Integer -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sciU9 ufmt_sciUa]
        case ufmt_sciUa of {
          Text.Printf.FieldFormat ww1_sciUc [Occ=Once]
                                  ww2_sciUd [Occ=Once]
                                  ww3_sciUe [Occ=Once]
                                  ww4_sciUf [Occ=Once]
                                  ww5_sciUg [Occ=Once]
                                  ww6_sciUh
                                  ww7_sciUi [Occ=Once!] ->
              case ww7_sciUi of {
                GHC.Types.C# ww9_sciUk [Occ=Once] ->
                    let {
                      sat_sciUq [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sciUh] \s []
                              case ww6_sciUh of wild_sciUl {
                                [] -> GHC.Base.Nothing [];
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sciUl
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sciUo
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sciUo;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sciUq
                          x_sciU9
                          ww1_sciUc
                          ww2_sciUd
                          ww3_sciUe
                          ww4_sciUf
                          ww5_sciUg
                          ww6_sciUh
                          ww9_sciUk;
              };
        };

Text.Printf.$fPrintfArgNatural_$cformatArg
  :: GHC.Natural.Natural -> Text.Printf.FieldFormatter
[GblId,
 Arity=2,
 Str=<L,U><S(LSLLLLS(S)),1*U(1*U,U,U,1*U,1*U,U,1*U(1*U))>,
 Unf=OtherCon []] =
    [] \r [x_sciUr ufmt_sciUs]
        case ufmt_sciUs of {
          Text.Printf.FieldFormat ww1_sciUu [Occ=Once]
                                  ww2_sciUv [Occ=Once]
                                  ww3_sciUw [Occ=Once]
                                  ww4_sciUx [Occ=Once]
                                  ww5_sciUy [Occ=Once]
                                  ww6_sciUz
                                  ww7_sciUA [Occ=Once!] ->
              case ww7_sciUA of {
                GHC.Types.C# ww9_sciUC [Occ=Once] ->
                    let {
                      sat_sciUI [Occ=Once, Dmd=<L,1*U>]
                        :: GHC.Base.Maybe GHC.Integer.Type.Integer
                      [LclId] =
                          [ww6_sciUz] \s []
                              case ww6_sciUz of wild_sciUD {
                                [] -> GHC.Base.Nothing [];
                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                    case
                                        GHC.List.lookup
                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                            wild_sciUD
                                            Text.Printf.intModifierMap
                                    of
                                    wild1_sciUG
                                    { GHC.Base.Nothing -> Text.Printf.$fPrintfArgInt2;
                                      GHC.Base.Just _ [Occ=Dead] -> wild1_sciUG;
                                    };
                              };
                    } in 
                      Text.Printf.$wformatIntegral
                          sat_sciUI
                          x_sciUr
                          ww1_sciUu
                          ww2_sciUv
                          ww3_sciUw
                          ww4_sciUx
                          ww5_sciUy
                          ww6_sciUz
                          ww9_sciUC;
              };
        };

Text.Printf.$fPrintfArgNatural [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Natural.Natural
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.$fPrintfArgNatural_$cformatArg
                                            Text.Printf.parseIntFormat];

Text.Printf.$fPrintfArgInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: Text.Printf.PrintfArg GHC.Integer.Type.Integer
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE Text.Printf.C:PrintfArg! [Text.Printf.formatInteger
                                            Text.Printf.parseIntFormat];

lvl42_rcccH :: Text.ParserCombinators.ReadP.P GHC.Types.Int
[GblId] =
    [] \u []
        GHC.Read.$fReadInt_$sreadNumber
            GHC.Read.$fReadInt2
            Text.ParserCombinators.ReadPrec.minPrec
            Text.Read.readEither7;

lvl43_rcccI :: Text.Printf.FieldFormat
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.FieldFormat! [GHC.Base.Nothing
                                            GHC.Base.Nothing
                                            GHC.Base.Nothing
                                            GHC.Base.Nothing
                                            GHC.Types.False
                                            GHC.Types.[]
                                            lvl23_rccco];

lvl44_rcccJ :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.errorWithoutStackTrace Text.Read.readEither5;

lvl45_rcccK :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] GHC.Err.errorWithoutStackTrace Text.Read.readEither2;

$wgetStar_rcccL
  :: [Text.Printf.UPrintf]
     -> (# [Text.Printf.UPrintf], GHC.Types.Int #)
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [w_sciUJ]
        case w_sciUJ of {
          [] -> Text.Printf.errorMissingArgument;
          : ds_sciUM [Occ=Once!] us'_sciUN [Occ=Once] ->
              case ds_sciUM of {
                (,) _ [Occ=Dead] nu_sciUQ [Occ=Once!] ->
                    let {
                      sat_sciUZ [Occ=Once] :: GHC.Types.Int
                      [LclId] =
                          [nu_sciUQ] \u []
                              let {
                                sat_sciUR [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    [nu_sciUQ] \u [] nu_sciUQ lvl43_rcccI GHC.Types.[];
                              } in 
                                case
                                    Text.ParserCombinators.ReadP.run lvl42_rcccH sat_sciUR
                                of
                                sat_sciUS
                                { __DEFAULT ->
                                      case Text.Read.readEither8 sat_sciUS of {
                                        [] -> lvl44_rcccJ;
                                        : x_sciUU [Occ=Once] ds2_sciUV [Occ=Once!] ->
                                            case ds2_sciUV of {
                                              [] -> x_sciUU;
                                              : _ [Occ=Dead] _ [Occ=Dead] -> lvl45_rcccK;
                                            };
                                      };
                                };
                    } in  (#,#) [us'_sciUN sat_sciUZ];
              };
        };

lvl46_rcccM :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl47_rcccN :: GHC.Base.Maybe Text.Printf.FormatAdjustment
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.LeftAdjust];

lvl48_rcccO :: GHC.Base.Maybe Text.Printf.FormatAdjustment
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.ZeroPad];

lvl49_rcccP :: (GHC.Types.Int, GHC.Base.String)
[GblId] =
    [] \u []
        case GHC.List.$wspan GHC.Unicode.isDigit GHC.Types.[] of {
          (#,#) ww1_sciV1 [Occ=Once!] ww2_sciV2 [Occ=Once*] ->
              case ww1_sciV1 of wild_sciV3 {
                [] -> (,) [lvl46_rcccM ww2_sciV2];
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sciVd [Occ=Once] :: GHC.Types.Int
                      [LclId] =
                          [wild_sciV3] \u []
                              case
                                  Text.ParserCombinators.ReadP.run lvl42_rcccH wild_sciV3
                              of
                              sat_sciV6
                              { __DEFAULT ->
                                    case Text.Read.readEither8 sat_sciV6 of {
                                      [] -> lvl44_rcccJ;
                                      : x_sciV8 [Occ=Once] ds_sciV9 [Occ=Once!] ->
                                          case ds_sciV9 of {
                                            [] -> x_sciV8;
                                            : _ [Occ=Dead] _ [Occ=Dead] -> lvl45_rcccK;
                                          };
                                    };
                              };
                    } in  (,) [sat_sciVd ww2_sciV2];
              };
        };

lvl50_rcccQ :: GHC.Base.Maybe Text.Printf.FormatSign
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.SignPlus];

lvl51_rcccR :: GHC.Types.Int
[GblId] =
    [] \u []
        case lvl49_rcccP of {
          (,) p'_sciVf [Occ=Once] _ [Occ=Dead] -> p'_sciVf;
        };

lvl52_rcccS :: GHC.Base.Maybe GHC.Types.Int
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [lvl51_rcccR];

lvl53_rcccT :: GHC.Base.String
[GblId] =
    [] \u []
        case lvl49_rcccP of {
          (,) _ [Occ=Dead] r'_sciVj [Occ=Once] -> r'_sciVj;
        };

lvl54_rcccU :: GHC.Base.Maybe Text.Printf.FormatSign
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [Text.Printf.SignSpace];

$wgetSpecs_rcccV
  :: GHC.Types.Bool
     -> GHC.Types.Bool
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> [Text.Printf.UPrintf]
     -> (# Text.Printf.FieldFormat, GHC.Base.String,
           [Text.Printf.UPrintf] #)
[GblId,
 Arity=6,
 Str=<L,1*U><L,1*U><L,U><L,U><S,1*U><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [w_sciVk
                    w1_sciVl
                    w2_sciVm
                    w3_sciVn
                    w4_sciVo
                    w5_sciVp]
        case w4_sciVo of wild_sciVq {
          [] -> Text.Printf.errorShortFormat;
          : ds_sciVs [Occ=Once!] cs0_sciVt [Occ=Once*] ->
              case ds_sciVs of {
                GHC.Types.C# ds1_sciVv [Occ=Once!] ->
                    case ds1_sciVv of ds2_sciVw {
                      __DEFAULT ->
                          case ord# [ds2_sciVw] of sat_sciVx {
                            __DEFAULT ->
                                case -# [sat_sciVx 48#] of sat_sciVy {
                                  __DEFAULT ->
                                      case int2Word# [sat_sciVy] of sat_sciVz {
                                        __DEFAULT ->
                                            case leWord# [sat_sciVz 9##] of {
                                              __DEFAULT ->
                                                  let {
                                                    ds3_sciVB [Dmd=<L,U(1*U,1*U,1*U)>]
                                                      :: Text.Printf.FormatParse
                                                    [LclId] =
                                                        [w5_sciVp wild_sciVq] \u []
                                                            case w5_sciVp of {
                                                              [] ->
                                                                  Text.Printf.errorMissingArgument;
                                                              : ds4_sciVD [Occ=Once!]
                                                                _ [Occ=Dead] ->
                                                                  case ds4_sciVD of {
                                                                    (,) ufmt_sciVG [Occ=Once!]
                                                                        _ [Occ=Dead] ->
                                                                        ufmt_sciVG wild_sciVq;
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_sciW0 [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        [ds3_sciVB] \u []
                                                            case ds3_sciVB of {
                                                              Text.Printf.FormatParse _ [Occ=Dead]
                                                                                      _ [Occ=Dead]
                                                                                      cs_sciVZ [Occ=Once] ->
                                                                  cs_sciVZ;
                                                            }; } in
                                                  let {
                                                    sat_sciVU [Occ=Once] :: GHC.Types.Char
                                                    [LclId] =
                                                        [ds3_sciVB] \u []
                                                            case ds3_sciVB of {
                                                              Text.Printf.FormatParse _ [Occ=Dead]
                                                                                      c_sciVS [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                  c_sciVS;
                                                            }; } in
                                                  let {
                                                    sat_sciVP [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        [ds3_sciVB] \u []
                                                            case ds3_sciVB of {
                                                              Text.Printf.FormatParse ms_sciVM [Occ=Once]
                                                                                      _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                                                  ms_sciVM;
                                                            }; } in
                                                  let {
                                                    sat_sciVK [Occ=Once]
                                                      :: GHC.Base.Maybe Text.Printf.FormatAdjustment
                                                    [LclId] =
                                                        [w_sciVk w1_sciVl] \u []
                                                            case w_sciVk of {
                                                              GHC.Types.False ->
                                                                  case w1_sciVl of {
                                                                    GHC.Types.False ->
                                                                        GHC.Base.Nothing [];
                                                                    GHC.Types.True -> lvl48_rcccO;
                                                                  };
                                                              GHC.Types.True -> lvl47_rcccN;
                                                            }; } in
                                                  let {
                                                    sat_sciVV [Occ=Once] :: Text.Printf.FieldFormat
                                                    [LclId] =
                                                        CCCS Text.Printf.FieldFormat! [GHC.Base.Nothing
                                                                                       GHC.Base.Nothing
                                                                                       sat_sciVK
                                                                                       w2_sciVm
                                                                                       w3_sciVn
                                                                                       sat_sciVP
                                                                                       sat_sciVU];
                                                  } in  (#,,#) [sat_sciVV sat_sciW0 w5_sciVp];
                                              1# ->
                                                  let {
                                                    ds3_sciW1 [Dmd=<L,U(U(U),1*U)>]
                                                      :: (GHC.Types.Int, GHC.Base.String)
                                                    [LclId] =
                                                        [wild_sciVq] \u []
                                                            case
                                                                GHC.List.$wspan
                                                                    GHC.Unicode.isDigit wild_sciVq
                                                            of
                                                            { (#,#) ww1_sciW3 [Occ=Once!]
                                                                    ww2_sciW4 [Occ=Once*] ->
                                                                  case ww1_sciW3 of wild2_sciW5 {
                                                                    [] ->
                                                                        (,) [lvl46_rcccM ww2_sciW4];
                                                                    : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                        let {
                                                                          sat_sciWf [Occ=Once]
                                                                            :: GHC.Types.Int
                                                                          [LclId] =
                                                                              [wild2_sciW5] \u []
                                                                                  case
                                                                                      Text.ParserCombinators.ReadP.run
                                                                                          lvl42_rcccH
                                                                                          wild2_sciW5
                                                                                  of
                                                                                  sat_sciW8
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            Text.Read.readEither8
                                                                                                sat_sciW8
                                                                                        of
                                                                                        { [] ->
                                                                                              lvl44_rcccJ;
                                                                                          : x_sciWa [Occ=Once]
                                                                                            ds4_sciWb [Occ=Once!] ->
                                                                                              case
                                                                                                  ds4_sciWb
                                                                                              of
                                                                                              { [] ->
                                                                                                    x_sciWa;
                                                                                                : _ [Occ=Dead]
                                                                                                  _ [Occ=Dead] ->
                                                                                                    lvl45_rcccK;
                                                                                              };
                                                                                        };
                                                                                  };
                                                                        } in 
                                                                          (,) [sat_sciWf ww2_sciW4];
                                                                  };
                                                            }; } in
                                                  let {
                                                    ds4_sciWg [Dmd=<L,U(1*U,U,U)>]
                                                      :: (GHC.Base.Maybe GHC.Types.Int,
                                                          [GHC.Types.Char], [Text.Printf.UPrintf])
                                                    [LclId] =
                                                        [w5_sciVp ds3_sciW1] \u []
                                                            case ds3_sciW1 of {
                                                              (,) _ [Occ=Dead]
                                                                  cs'_sciWj [Occ=Once!] ->
                                                                  case cs'_sciWj of wild3_sciWk {
                                                                    [] ->
                                                                        (,,) [GHC.Base.Nothing
                                                                              GHC.Types.[]
                                                                              w5_sciVp];
                                                                    : ds5_sciWl [Occ=Once!]
                                                                      ds6_sciWm [Occ=Once!] ->
                                                                        case ds5_sciWl of {
                                                                          GHC.Types.C# ds7_sciWo [Occ=Once!] ->
                                                                              case ds7_sciWo of {
                                                                                __DEFAULT ->
                                                                                    (,,) [GHC.Base.Nothing
                                                                                          wild3_sciWk
                                                                                          w5_sciVp];
                                                                                '.'# ->
                                                                                    case
                                                                                        ds6_sciWm
                                                                                    of
                                                                                    wild5_sciWq
                                                                                    { [] ->
                                                                                          (,,) [lvl52_rcccS
                                                                                                lvl53_rcccT
                                                                                                w5_sciVp];
                                                                                      : ds9_sciWr [Occ=Once!]
                                                                                        r_sciWs [Occ=Once] ->
                                                                                          case
                                                                                              ds9_sciWr
                                                                                          of
                                                                                          { GHC.Types.C# ds10_sciWu [Occ=Once!] ->
                                                                                                case
                                                                                                    ds10_sciWu
                                                                                                of
                                                                                                { __DEFAULT ->
                                                                                                      let {
                                                                                                        ds12_sciWw [Dmd=<L,U(1*U,1*U)>]
                                                                                                          :: (GHC.Types.Int,
                                                                                                              GHC.Base.String)
                                                                                                        [LclId] =
                                                                                                            [wild5_sciWq] \u []
                                                                                                                case
                                                                                                                    GHC.List.$wspan
                                                                                                                        GHC.Unicode.isDigit
                                                                                                                        wild5_sciWq
                                                                                                                of
                                                                                                                { (#,#) ww1_sciWy [Occ=Once!]
                                                                                                                        ww2_sciWz [Occ=Once*] ->
                                                                                                                      case
                                                                                                                          ww1_sciWy
                                                                                                                      of
                                                                                                                      wild7_sciWA
                                                                                                                      { [] ->
                                                                                                                            (,) [lvl46_rcccM
                                                                                                                                 ww2_sciWz];
                                                                                                                        : _ [Occ=Dead]
                                                                                                                          _ [Occ=Dead] ->
                                                                                                                            let {
                                                                                                                              sat_sciWK [Occ=Once]
                                                                                                                                :: GHC.Types.Int
                                                                                                                              [LclId] =
                                                                                                                                  [wild7_sciWA] \u []
                                                                                                                                      case
                                                                                                                                          Text.ParserCombinators.ReadP.run
                                                                                                                                              lvl42_rcccH
                                                                                                                                              wild7_sciWA
                                                                                                                                      of
                                                                                                                                      sat_sciWD
                                                                                                                                      { __DEFAULT ->
                                                                                                                                            case
                                                                                                                                                Text.Read.readEither8
                                                                                                                                                    sat_sciWD
                                                                                                                                            of
                                                                                                                                            { [] ->
                                                                                                                                                  lvl44_rcccJ;
                                                                                                                                              : x_sciWF [Occ=Once]
                                                                                                                                                ds13_sciWG [Occ=Once!] ->
                                                                                                                                                  case
                                                                                                                                                      ds13_sciWG
                                                                                                                                                  of
                                                                                                                                                  { [] ->
                                                                                                                                                        x_sciWF;
                                                                                                                                                    : _ [Occ=Dead]
                                                                                                                                                      _ [Occ=Dead] ->
                                                                                                                                                        lvl45_rcccK;
                                                                                                                                                  };
                                                                                                                                            };
                                                                                                                                      };
                                                                                                                            } in 
                                                                                                                              (,) [sat_sciWK
                                                                                                                                   ww2_sciWz];
                                                                                                                      };
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sciWT [Occ=Once]
                                                                                                          :: [GHC.Types.Char]
                                                                                                        [LclId] =
                                                                                                            [ds12_sciWw] \u []
                                                                                                                case
                                                                                                                    ds12_sciWw
                                                                                                                of
                                                                                                                { (,) _ [Occ=Dead]
                                                                                                                      r'_sciWS [Occ=Once] ->
                                                                                                                      r'_sciWS;
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sciWO [Occ=Once]
                                                                                                          :: GHC.Types.Int
                                                                                                        [LclId] =
                                                                                                            [ds12_sciWw] \u []
                                                                                                                case
                                                                                                                    ds12_sciWw
                                                                                                                of
                                                                                                                { (,) p'_sciWM [Occ=Once]
                                                                                                                      _ [Occ=Dead] ->
                                                                                                                      p'_sciWM;
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sciWP [Occ=Once]
                                                                                                          :: GHC.Base.Maybe
                                                                                                               GHC.Types.Int
                                                                                                        [LclId] =
                                                                                                            CCCS GHC.Base.Just! [sat_sciWO];
                                                                                                      } in 
                                                                                                        (,,) [sat_sciWP
                                                                                                              sat_sciWT
                                                                                                              w5_sciVp];
                                                                                                  '*'# ->
                                                                                                      let {
                                                                                                        ds12_sciWU [Dmd=<L,U(1*U,1*U)>]
                                                                                                          :: ([Text.Printf.UPrintf],
                                                                                                              GHC.Types.Int)
                                                                                                        [LclId] =
                                                                                                            [w5_sciVp] \u []
                                                                                                                case
                                                                                                                    $wgetStar_rcccL
                                                                                                                        w5_sciVp
                                                                                                                of
                                                                                                                { (#,#) ww1_sciWW [Occ=Once]
                                                                                                                        ww2_sciWX [Occ=Once] ->
                                                                                                                      (,) [ww1_sciWW
                                                                                                                           ww2_sciWX];
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sciX6 [Occ=Once]
                                                                                                          :: [Text.Printf.UPrintf]
                                                                                                        [LclId] =
                                                                                                            [ds12_sciWU] \u []
                                                                                                                case
                                                                                                                    ds12_sciWU
                                                                                                                of
                                                                                                                { (,) us''_sciX4 [Occ=Once]
                                                                                                                      _ [Occ=Dead] ->
                                                                                                                      us''_sciX4;
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sciX1 [Occ=Once]
                                                                                                          :: GHC.Types.Int
                                                                                                        [LclId] =
                                                                                                            [ds12_sciWU] \u []
                                                                                                                case
                                                                                                                    ds12_sciWU
                                                                                                                of
                                                                                                                { (,) _ [Occ=Dead]
                                                                                                                      p'_sciX0 [Occ=Once] ->
                                                                                                                      p'_sciX0;
                                                                                                                }; } in
                                                                                                      let {
                                                                                                        sat_sciX2 [Occ=Once]
                                                                                                          :: GHC.Base.Maybe
                                                                                                               GHC.Types.Int
                                                                                                        [LclId] =
                                                                                                            CCCS GHC.Base.Just! [sat_sciX1];
                                                                                                      } in 
                                                                                                        (,,) [sat_sciX2
                                                                                                              r_sciWs
                                                                                                              sat_sciX6];
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    ds5_sciX7 [Dmd=<L,U(1*U,1*U,1*U)>]
                                                      :: Text.Printf.FormatParse
                                                    [LclId] =
                                                        [ds4_sciWg] \u []
                                                            case ds4_sciWg of {
                                                              (,,) _ [Occ=Dead]
                                                                   cs''_sciXa [Occ=Once]
                                                                   us'_sciXb [Occ=Once!] ->
                                                                  case us'_sciXb of {
                                                                    [] ->
                                                                        Text.Printf.errorMissingArgument;
                                                                    : ds7_sciXd [Occ=Once!]
                                                                      _ [Occ=Dead] ->
                                                                        case ds7_sciXd of {
                                                                          (,) ufmt_sciXg [Occ=Once!]
                                                                              _ [Occ=Dead] ->
                                                                              ufmt_sciXg cs''_sciXa;
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_sciXZ [Occ=Once] :: [Text.Printf.UPrintf]
                                                    [LclId] =
                                                        [ds4_sciWg] \u []
                                                            case ds4_sciWg of {
                                                              (,,) _ [Occ=Dead]
                                                                   _ [Occ=Dead]
                                                                   us'_sciXY [Occ=Once] ->
                                                                  us'_sciXY;
                                                            }; } in
                                                  let {
                                                    sat_sciXU [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        [ds5_sciX7] \u []
                                                            case ds5_sciX7 of {
                                                              Text.Printf.FormatParse _ [Occ=Dead]
                                                                                      _ [Occ=Dead]
                                                                                      cs_sciXT [Occ=Once] ->
                                                                  cs_sciXT;
                                                            }; } in
                                                  let {
                                                    sat_sciXO [Occ=Once] :: GHC.Types.Char
                                                    [LclId] =
                                                        [ds5_sciX7] \u []
                                                            case ds5_sciX7 of {
                                                              Text.Printf.FormatParse _ [Occ=Dead]
                                                                                      c_sciXM [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                  c_sciXM;
                                                            }; } in
                                                  let {
                                                    sat_sciXJ [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        [ds5_sciX7] \u []
                                                            case ds5_sciX7 of {
                                                              Text.Printf.FormatParse ms_sciXG [Occ=Once]
                                                                                      _ [Occ=Dead]
                                                                                      _ [Occ=Dead] ->
                                                                  ms_sciXG;
                                                            }; } in
                                                  let {
                                                    sat_sciXE [Occ=Once]
                                                      :: GHC.Base.Maybe Text.Printf.FormatAdjustment
                                                    [LclId] =
                                                        [w_sciVk w1_sciVl ds3_sciW1] \u []
                                                            case ds3_sciW1 of {
                                                              (,) n_sciXx [Occ=Once!]
                                                                  _ [Occ=Dead] ->
                                                                  case n_sciXx of {
                                                                    GHC.Types.I# x_sciXA [Occ=Once] ->
                                                                        case <# [x_sciXA 0#] of {
                                                                          __DEFAULT ->
                                                                              case w_sciVk of {
                                                                                GHC.Types.False ->
                                                                                    case
                                                                                        w1_sciVl
                                                                                    of
                                                                                    { GHC.Types.False ->
                                                                                          GHC.Base.Nothing [];
                                                                                      GHC.Types.True ->
                                                                                          lvl48_rcccO;
                                                                                    };
                                                                                GHC.Types.True ->
                                                                                    lvl47_rcccN;
                                                                              };
                                                                          1# -> lvl47_rcccN;
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_sciXv [Occ=Once]
                                                      :: GHC.Base.Maybe GHC.Types.Int
                                                    [LclId] =
                                                        [ds4_sciWg] \u []
                                                            case ds4_sciWg of {
                                                              (,,) p_sciXs [Occ=Once]
                                                                   _ [Occ=Dead]
                                                                   _ [Occ=Dead] ->
                                                                  p_sciXs;
                                                            }; } in
                                                  let {
                                                    sat_sciXp [Occ=Once] :: GHC.Types.Int
                                                    [LclId] =
                                                        [ds3_sciW1] \u []
                                                            case ds3_sciW1 of {
                                                              (,) n_sciXj [Occ=Once!]
                                                                  _ [Occ=Dead] ->
                                                                  case n_sciXj of wild3_sciXl {
                                                                    GHC.Types.I# x_sciXm ->
                                                                        case >=# [x_sciXm 0#] of {
                                                                          __DEFAULT ->
                                                                              case
                                                                                  negateInt# [x_sciXm]
                                                                              of
                                                                              sat_sciXo
                                                                              { __DEFAULT ->
                                                                                    GHC.Types.I# [sat_sciXo];
                                                                              };
                                                                          1# -> wild3_sciXl;
                                                                        };
                                                                  };
                                                            }; } in
                                                  let {
                                                    sat_sciXq [Occ=Once]
                                                      :: GHC.Base.Maybe GHC.Types.Int
                                                    [LclId] =
                                                        CCCS GHC.Base.Just! [sat_sciXp]; } in
                                                  let {
                                                    sat_sciXP [Occ=Once] :: Text.Printf.FieldFormat
                                                    [LclId] =
                                                        CCCS Text.Printf.FieldFormat! [sat_sciXq
                                                                                       sat_sciXv
                                                                                       sat_sciXE
                                                                                       w2_sciVm
                                                                                       w3_sciVn
                                                                                       sat_sciXJ
                                                                                       sat_sciXO];
                                                  } in  (#,,#) [sat_sciXP sat_sciXU sat_sciXZ];
                                            };
                                      };
                                };
                          };
                      ' '# ->
                          let {
                            sat_sciY3 [Occ=Once] :: GHC.Base.Maybe Text.Printf.FormatSign
                            [LclId] =
                                [w2_sciVm] \u []
                                    case w2_sciVm of {
                                      GHC.Base.Nothing -> lvl54_rcccU;
                                      GHC.Base.Just ds3_sciY1 [Occ=Once!] ->
                                          case ds3_sciY1 of {
                                            Text.Printf.SignPlus -> lvl50_rcccQ;
                                            Text.Printf.SignSpace -> lvl54_rcccU;
                                          };
                                    };
                          } in 
                            $wgetSpecs_rcccV
                                w_sciVk w1_sciVl sat_sciY3 w3_sciVn cs0_sciVt w5_sciVp;
                      '#'# ->
                          $wgetSpecs_rcccV
                              w_sciVk w1_sciVl w2_sciVm GHC.Types.True cs0_sciVt w5_sciVp;
                      '*'# ->
                          let {
                            ds3_sciY4 [Dmd=<L,U(1*U,U(U))>]
                              :: ([Text.Printf.UPrintf], GHC.Types.Int)
                            [LclId] =
                                [w5_sciVp] \u []
                                    case $wgetStar_rcccL w5_sciVp of {
                                      (#,#) ww1_sciY6 [Occ=Once] ww2_sciY7 [Occ=Once] ->
                                          (,) [ww1_sciY6 ww2_sciY7];
                                    }; } in
                          let {
                            ds4_sciY8 [Dmd=<L,U(1*U,U,U)>]
                              :: (GHC.Base.Maybe GHC.Types.Int, [GHC.Types.Char],
                                  [Text.Printf.UPrintf])
                            [LclId] =
                                [cs0_sciVt ds3_sciY4] \u []
                                    case cs0_sciVt of wild2_sciY9 {
                                      [] ->
                                          let {
                                            sat_sciYd [Occ=Once] :: [Text.Printf.UPrintf]
                                            [LclId] =
                                                [ds3_sciY4] \u []
                                                    case ds3_sciY4 of {
                                                      (,) us'_sciYb [Occ=Once] _ [Occ=Dead] ->
                                                          us'_sciYb;
                                                    };
                                          } in  (,,) [GHC.Base.Nothing GHC.Types.[] sat_sciYd];
                                      : ds5_sciYe [Occ=Once!] ds6_sciYf [Occ=Once!] ->
                                          case ds5_sciYe of {
                                            GHC.Types.C# ds7_sciYh [Occ=Once!] ->
                                                case ds7_sciYh of {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sciYm [Occ=Once]
                                                          :: [Text.Printf.UPrintf]
                                                        [LclId] =
                                                            [ds3_sciY4] \u []
                                                                case ds3_sciY4 of {
                                                                  (,) us'_sciYk [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                      us'_sciYk;
                                                                };
                                                      } in 
                                                        (,,) [GHC.Base.Nothing
                                                              wild2_sciY9
                                                              sat_sciYm];
                                                  '.'# ->
                                                      case ds6_sciYf of wild4_sciYn {
                                                        [] ->
                                                            let {
                                                              sat_sciYr [Occ=Once]
                                                                :: [Text.Printf.UPrintf]
                                                              [LclId] =
                                                                  [ds3_sciY4] \u []
                                                                      case ds3_sciY4 of {
                                                                        (,) us'_sciYp [Occ=Once]
                                                                            _ [Occ=Dead] ->
                                                                            us'_sciYp;
                                                                      };
                                                            } in 
                                                              (,,) [lvl52_rcccS
                                                                    lvl53_rcccT
                                                                    sat_sciYr];
                                                        : ds9_sciYs [Occ=Once!]
                                                          r_sciYt [Occ=Once] ->
                                                            case ds9_sciYs of {
                                                              GHC.Types.C# ds10_sciYv [Occ=Once!] ->
                                                                  case ds10_sciYv of {
                                                                    __DEFAULT ->
                                                                        let {
                                                                          ds12_sciYx [Dmd=<L,U(1*U,1*U)>]
                                                                            :: (GHC.Types.Int,
                                                                                GHC.Base.String)
                                                                          [LclId] =
                                                                              [wild4_sciYn] \u []
                                                                                  case
                                                                                      GHC.List.$wspan
                                                                                          GHC.Unicode.isDigit
                                                                                          wild4_sciYn
                                                                                  of
                                                                                  { (#,#) ww1_sciYz [Occ=Once!]
                                                                                          ww2_sciYA [Occ=Once*] ->
                                                                                        case
                                                                                            ww1_sciYz
                                                                                        of
                                                                                        wild6_sciYB
                                                                                        { [] ->
                                                                                              (,) [lvl46_rcccM
                                                                                                   ww2_sciYA];
                                                                                          : _ [Occ=Dead]
                                                                                            _ [Occ=Dead] ->
                                                                                              let {
                                                                                                sat_sciYL [Occ=Once]
                                                                                                  :: GHC.Types.Int
                                                                                                [LclId] =
                                                                                                    [wild6_sciYB] \u []
                                                                                                        case
                                                                                                            Text.ParserCombinators.ReadP.run
                                                                                                                lvl42_rcccH
                                                                                                                wild6_sciYB
                                                                                                        of
                                                                                                        sat_sciYE
                                                                                                        { __DEFAULT ->
                                                                                                              case
                                                                                                                  Text.Read.readEither8
                                                                                                                      sat_sciYE
                                                                                                              of
                                                                                                              { [] ->
                                                                                                                    lvl44_rcccJ;
                                                                                                                : x_sciYG [Occ=Once]
                                                                                                                  ds13_sciYH [Occ=Once!] ->
                                                                                                                    case
                                                                                                                        ds13_sciYH
                                                                                                                    of
                                                                                                                    { [] ->
                                                                                                                          x_sciYG;
                                                                                                                      : _ [Occ=Dead]
                                                                                                                        _ [Occ=Dead] ->
                                                                                                                          lvl45_rcccK;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                              } in 
                                                                                                (,) [sat_sciYL
                                                                                                     ww2_sciYA];
                                                                                        };
                                                                                  }; } in
                                                                        let {
                                                                          sat_sciYY [Occ=Once]
                                                                            :: [Text.Printf.UPrintf]
                                                                          [LclId] =
                                                                              [ds3_sciY4] \u []
                                                                                  case
                                                                                      ds3_sciY4
                                                                                  of
                                                                                  { (,) us'_sciYW [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                                        us'_sciYW;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sciYU [Occ=Once]
                                                                            :: [GHC.Types.Char]
                                                                          [LclId] =
                                                                              [ds12_sciYx] \u []
                                                                                  case
                                                                                      ds12_sciYx
                                                                                  of
                                                                                  { (,) _ [Occ=Dead]
                                                                                        r'_sciYT [Occ=Once] ->
                                                                                        r'_sciYT;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sciYP [Occ=Once]
                                                                            :: GHC.Types.Int
                                                                          [LclId] =
                                                                              [ds12_sciYx] \u []
                                                                                  case
                                                                                      ds12_sciYx
                                                                                  of
                                                                                  { (,) p'_sciYN [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                                        p'_sciYN;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sciYQ [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 GHC.Types.Int
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [sat_sciYP];
                                                                        } in 
                                                                          (,,) [sat_sciYQ
                                                                                sat_sciYU
                                                                                sat_sciYY];
                                                                    '*'# ->
                                                                        let {
                                                                          ds12_sciYZ [Dmd=<L,U(1*U,1*U)>]
                                                                            :: ([Text.Printf.UPrintf],
                                                                                GHC.Types.Int)
                                                                          [LclId] =
                                                                              [ds3_sciY4] \u []
                                                                                  case
                                                                                      ds3_sciY4
                                                                                  of
                                                                                  { (,) us'_sciZ1 [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                                        case
                                                                                            $wgetStar_rcccL
                                                                                                us'_sciZ1
                                                                                        of
                                                                                        { (#,#) ww1_sciZ4 [Occ=Once]
                                                                                                ww2_sciZ5 [Occ=Once] ->
                                                                                              (,) [ww1_sciZ4
                                                                                                   ww2_sciZ5];
                                                                                        };
                                                                                  }; } in
                                                                        let {
                                                                          sat_sciZe [Occ=Once]
                                                                            :: [Text.Printf.UPrintf]
                                                                          [LclId] =
                                                                              [ds12_sciYZ] \u []
                                                                                  case
                                                                                      ds12_sciYZ
                                                                                  of
                                                                                  { (,) us'''_sciZc [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                                        us'''_sciZc;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sciZ9 [Occ=Once]
                                                                            :: GHC.Types.Int
                                                                          [LclId] =
                                                                              [ds12_sciYZ] \u []
                                                                                  case
                                                                                      ds12_sciYZ
                                                                                  of
                                                                                  { (,) _ [Occ=Dead]
                                                                                        p'_sciZ8 [Occ=Once] ->
                                                                                        p'_sciZ8;
                                                                                  }; } in
                                                                        let {
                                                                          sat_sciZa [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 GHC.Types.Int
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [sat_sciZ9];
                                                                        } in 
                                                                          (,,) [sat_sciZa
                                                                                r_sciYt
                                                                                sat_sciZe];
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    }; } in
                          let {
                            ds5_sciZf [Dmd=<L,U(1*U,1*U,1*U)>] :: Text.Printf.FormatParse
                            [LclId] =
                                [ds4_sciY8] \u []
                                    case ds4_sciY8 of {
                                      (,,) _ [Occ=Dead]
                                           cs''_sciZi [Occ=Once]
                                           us''_sciZj [Occ=Once!] ->
                                          case us''_sciZj of {
                                            [] -> Text.Printf.errorMissingArgument;
                                            : ds7_sciZl [Occ=Once!] _ [Occ=Dead] ->
                                                case ds7_sciZl of {
                                                  (,) ufmt_sciZo [Occ=Once!] _ [Occ=Dead] ->
                                                      ufmt_sciZo cs''_sciZi;
                                                };
                                          };
                                    }; } in
                          let {
                            sat_scj07 [Occ=Once] :: [Text.Printf.UPrintf]
                            [LclId] =
                                [ds4_sciY8] \u []
                                    case ds4_sciY8 of {
                                      (,,) _ [Occ=Dead] _ [Occ=Dead] us''_scj06 [Occ=Once] ->
                                          us''_scj06;
                                    }; } in
                          let {
                            sat_scj02 [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [ds5_sciZf] \u []
                                    case ds5_sciZf of {
                                      Text.Printf.FormatParse _ [Occ=Dead]
                                                              _ [Occ=Dead]
                                                              cs_scj01 [Occ=Once] ->
                                          cs_scj01;
                                    }; } in
                          let {
                            sat_sciZW [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                [ds5_sciZf] \u []
                                    case ds5_sciZf of {
                                      Text.Printf.FormatParse _ [Occ=Dead]
                                                              c_sciZU [Occ=Once]
                                                              _ [Occ=Dead] ->
                                          c_sciZU;
                                    }; } in
                          let {
                            sat_sciZR [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [ds5_sciZf] \u []
                                    case ds5_sciZf of {
                                      Text.Printf.FormatParse ms_sciZO [Occ=Once]
                                                              _ [Occ=Dead]
                                                              _ [Occ=Dead] ->
                                          ms_sciZO;
                                    }; } in
                          let {
                            sat_sciZM [Occ=Once] :: GHC.Base.Maybe Text.Printf.FormatAdjustment
                            [LclId] =
                                [w_sciVk w1_sciVl ds3_sciY4] \u []
                                    case ds3_sciY4 of {
                                      (,) _ [Occ=Dead] n_sciZG [Occ=Once!] ->
                                          case n_sciZG of {
                                            GHC.Types.I# x_sciZI [Occ=Once] ->
                                                case <# [x_sciZI 0#] of {
                                                  __DEFAULT ->
                                                      case w_sciVk of {
                                                        GHC.Types.False ->
                                                            case w1_sciVl of {
                                                              GHC.Types.False ->
                                                                  GHC.Base.Nothing [];
                                                              GHC.Types.True -> lvl48_rcccO;
                                                            };
                                                        GHC.Types.True -> lvl47_rcccN;
                                                      };
                                                  1# -> lvl47_rcccN;
                                                };
                                          };
                                    }; } in
                          let {
                            sat_sciZD [Occ=Once] :: GHC.Base.Maybe GHC.Types.Int
                            [LclId] =
                                [ds4_sciY8] \u []
                                    case ds4_sciY8 of {
                                      (,,) p_sciZA [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] -> p_sciZA;
                                    }; } in
                          let {
                            sat_sciZx [Occ=Once] :: GHC.Types.Int
                            [LclId] =
                                [ds3_sciY4] \u []
                                    case ds3_sciY4 of {
                                      (,) _ [Occ=Dead] n_sciZs [Occ=Once!] ->
                                          case n_sciZs of wild3_sciZt {
                                            GHC.Types.I# x_sciZu ->
                                                case >=# [x_sciZu 0#] of {
                                                  __DEFAULT ->
                                                      case negateInt# [x_sciZu] of sat_sciZw {
                                                        __DEFAULT -> GHC.Types.I# [sat_sciZw];
                                                      };
                                                  1# -> wild3_sciZt;
                                                };
                                          };
                                    }; } in
                          let {
                            sat_sciZy [Occ=Once] :: GHC.Base.Maybe GHC.Types.Int
                            [LclId] =
                                CCCS GHC.Base.Just! [sat_sciZx]; } in
                          let {
                            sat_sciZX [Occ=Once] :: Text.Printf.FieldFormat
                            [LclId] =
                                CCCS Text.Printf.FieldFormat! [sat_sciZy
                                                               sat_sciZD
                                                               sat_sciZM
                                                               w2_sciVm
                                                               w3_sciVn
                                                               sat_sciZR
                                                               sat_sciZW];
                          } in  (#,,#) [sat_sciZX sat_scj02 sat_scj07];
                      '+'# ->
                          $wgetSpecs_rcccV
                              w_sciVk w1_sciVl lvl50_rcccQ w3_sciVn cs0_sciVt w5_sciVp;
                      '-'# ->
                          $wgetSpecs_rcccV
                              GHC.Types.True w1_sciVl w2_sciVm w3_sciVn cs0_sciVt w5_sciVp;
                      '.'# ->
                          let {
                            ds3_scj08 [Dmd=<L,U(1*U,U,U)>]
                              :: (GHC.Types.Int, [GHC.Types.Char], [Text.Printf.UPrintf])
                            [LclId] =
                                [w5_sciVp cs0_sciVt] \u []
                                    case cs0_sciVt of wild2_scj09 {
                                      [] ->
                                          case lvl49_rcccP of {
                                            (,) p_scj0b [Occ=Once] cs'_scj0c [Occ=Once] ->
                                                (,,) [p_scj0b cs'_scj0c w5_sciVp];
                                          };
                                      : ds4_scj0d [Occ=Once!] cs''_scj0e [Occ=Once] ->
                                          case ds4_scj0d of {
                                            GHC.Types.C# ds5_scj0g [Occ=Once!] ->
                                                case ds5_scj0g of {
                                                  __DEFAULT ->
                                                      case
                                                          GHC.List.$wspan
                                                              GHC.Unicode.isDigit wild2_scj09
                                                      of
                                                      { (#,#) ww1_scj0j [Occ=Once!]
                                                              ww2_scj0k [Occ=Once*] ->
                                                            case ww1_scj0j of wild4_scj0l {
                                                              [] ->
                                                                  (,,) [lvl46_rcccM
                                                                        ww2_scj0k
                                                                        w5_sciVp];
                                                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                  let {
                                                                    sat_scj0v [Occ=Once]
                                                                      :: GHC.Types.Int
                                                                    [LclId] =
                                                                        [wild4_scj0l] \u []
                                                                            case
                                                                                Text.ParserCombinators.ReadP.run
                                                                                    lvl42_rcccH
                                                                                    wild4_scj0l
                                                                            of
                                                                            sat_scj0o
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      Text.Read.readEither8
                                                                                          sat_scj0o
                                                                                  of
                                                                                  { [] ->
                                                                                        lvl44_rcccJ;
                                                                                    : x_scj0q [Occ=Once]
                                                                                      ds7_scj0r [Occ=Once!] ->
                                                                                        case
                                                                                            ds7_scj0r
                                                                                        of
                                                                                        { [] ->
                                                                                              x_scj0q;
                                                                                          : _ [Occ=Dead]
                                                                                            _ [Occ=Dead] ->
                                                                                              lvl45_rcccK;
                                                                                        };
                                                                                  };
                                                                            };
                                                                  } in 
                                                                    (,,) [sat_scj0v
                                                                          ww2_scj0k
                                                                          w5_sciVp];
                                                            };
                                                      };
                                                  '*'# ->
                                                      let {
                                                        ds7_scj0w [Dmd=<L,U(1*U,1*U)>]
                                                          :: ([Text.Printf.UPrintf], GHC.Types.Int)
                                                        [LclId] =
                                                            [w5_sciVp] \u []
                                                                case $wgetStar_rcccL w5_sciVp of {
                                                                  (#,#) ww1_scj0y [Occ=Once]
                                                                        ww2_scj0z [Occ=Once] ->
                                                                      (,) [ww1_scj0y ww2_scj0z];
                                                                }; } in
                                                      let {
                                                        sat_scj0H [Occ=Once]
                                                          :: [Text.Printf.UPrintf]
                                                        [LclId] =
                                                            [ds7_scj0w] \u []
                                                                case ds7_scj0w of {
                                                                  (,) us''_scj0F [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                      us''_scj0F;
                                                                }; } in
                                                      let {
                                                        sat_scj0D [Occ=Once] :: GHC.Types.Int
                                                        [LclId] =
                                                            [ds7_scj0w] \u []
                                                                case ds7_scj0w of {
                                                                  (,) _ [Occ=Dead]
                                                                      p'_scj0C [Occ=Once] ->
                                                                      p'_scj0C;
                                                                };
                                                      } in  (,,) [sat_scj0D cs''_scj0e sat_scj0H];
                                                };
                                          };
                                    }; } in
                          let {
                            ds4_scj0I [Dmd=<L,U(1*U,1*U,1*U)>] :: Text.Printf.FormatParse
                            [LclId] =
                                [ds3_scj08] \u []
                                    case ds3_scj08 of {
                                      (,,) _ [Occ=Dead]
                                           cs'_scj0L [Occ=Once]
                                           us'_scj0M [Occ=Once!] ->
                                          case us'_scj0M of {
                                            [] -> Text.Printf.errorMissingArgument;
                                            : ds6_scj0O [Occ=Once!] _ [Occ=Dead] ->
                                                case ds6_scj0O of {
                                                  (,) ufmt_scj0R [Occ=Once!] _ [Occ=Dead] ->
                                                      ufmt_scj0R cs'_scj0L;
                                                };
                                          };
                                    }; } in
                          let {
                            sat_scj1m [Occ=Once] :: [Text.Printf.UPrintf]
                            [LclId] =
                                [ds3_scj08] \u []
                                    case ds3_scj08 of {
                                      (,,) _ [Occ=Dead] _ [Occ=Dead] us'_scj1l [Occ=Once] ->
                                          us'_scj1l;
                                    }; } in
                          let {
                            sat_scj1h [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [ds4_scj0I] \u []
                                    case ds4_scj0I of {
                                      Text.Printf.FormatParse _ [Occ=Dead]
                                                              _ [Occ=Dead]
                                                              cs_scj1g [Occ=Once] ->
                                          cs_scj1g;
                                    }; } in
                          let {
                            sat_scj1b [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                [ds4_scj0I] \u []
                                    case ds4_scj0I of {
                                      Text.Printf.FormatParse _ [Occ=Dead]
                                                              c_scj19 [Occ=Once]
                                                              _ [Occ=Dead] ->
                                          c_scj19;
                                    }; } in
                          let {
                            sat_scj16 [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [ds4_scj0I] \u []
                                    case ds4_scj0I of {
                                      Text.Printf.FormatParse ms_scj13 [Occ=Once]
                                                              _ [Occ=Dead]
                                                              _ [Occ=Dead] ->
                                          ms_scj13;
                                    }; } in
                          let {
                            sat_scj11 [Occ=Once] :: GHC.Base.Maybe Text.Printf.FormatAdjustment
                            [LclId] =
                                [w_sciVk w1_sciVl] \u []
                                    case w_sciVk of {
                                      GHC.Types.False ->
                                          case w1_sciVl of {
                                            GHC.Types.False -> GHC.Base.Nothing [];
                                            GHC.Types.True -> lvl48_rcccO;
                                          };
                                      GHC.Types.True -> lvl47_rcccN;
                                    }; } in
                          let {
                            sat_scj0X [Occ=Once] :: GHC.Types.Int
                            [LclId] =
                                [ds3_scj08] \u []
                                    case ds3_scj08 of {
                                      (,,) p_scj0U [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] -> p_scj0U;
                                    }; } in
                          let {
                            sat_scj0Y [Occ=Once] :: GHC.Base.Maybe GHC.Types.Int
                            [LclId] =
                                CCCS GHC.Base.Just! [sat_scj0X]; } in
                          let {
                            sat_scj1c [Occ=Once] :: Text.Printf.FieldFormat
                            [LclId] =
                                CCCS Text.Printf.FieldFormat! [GHC.Base.Nothing
                                                               sat_scj0Y
                                                               sat_scj11
                                                               w2_sciVm
                                                               w3_sciVn
                                                               sat_scj16
                                                               sat_scj1b];
                          } in  (#,,#) [sat_scj1c sat_scj1h sat_scj1m];
                      '0'# ->
                          $wgetSpecs_rcccV
                              w_sciVk GHC.Types.True w2_sciVm w3_sciVn cs0_sciVt w5_sciVp;
                    };
              };
        };

f_rcccW :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['%'#];

Text.Printf.uprintfs [Occ=LoopBreaker]
  :: GHC.Base.String -> [Text.Printf.UPrintf] -> GHC.Show.ShowS
[GblId, Arity=3, Str=<S,1*U><L,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_scj1n ds1_scj1o eta_scj1p]
        case ds_scj1n of {
          [] ->
              case ds1_scj1o of {
                [] -> eta_scj1p;
                : _ [Occ=Dead] _ [Occ=Dead] -> Text.Printf.errorShortFormat;
              };
          : ds2_scj1v [Occ=Once!] ds3_scj1w ->
              case ds2_scj1v of wild1_scj1x {
                GHC.Types.C# ds4_scj1y [Occ=Once!] ->
                    case ds4_scj1y of {
                      __DEFAULT ->
                          let {
                            sat_scj1A [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [ds1_scj1o eta_scj1p ds3_scj1w] \u []
                                    Text.Printf.uprintfs ds3_scj1w ds1_scj1o eta_scj1p;
                          } in  : [wild1_scj1x sat_scj1A];
                      '%'# ->
                          let-no-escape {
                            fail_scj1B [Occ=Once*!T[1], Dmd=<L,1*C1(U)>]
                              :: GHC.Prim.Void# -> GHC.Base.String
                            [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                sat-only [ds1_scj1o eta_scj1p ds3_scj1w] \r [void_0E]
                                    case ds1_scj1o of wild2_scj1D {
                                      [] -> Text.Printf.errorMissingArgument;
                                      : _ [Occ=Dead] _ [Occ=Dead] ->
                                          case
                                              $wgetSpecs_rcccV
                                                  GHC.Types.False
                                                  GHC.Types.False
                                                  GHC.Base.Nothing
                                                  GHC.Types.False
                                                  ds3_scj1w
                                                  wild2_scj1D
                                          of
                                          { (#,,#) ww1_scj1I [Occ=Once]
                                                   ww2_scj1J [Occ=Once]
                                                   ww3_scj1K [Occ=Once!] ->
                                                case ww3_scj1K of {
                                                  [] -> Text.Printf.errorMissingArgument;
                                                  : ds9_scj1N [Occ=Once!] us_scj1O [Occ=Once] ->
                                                      case ds9_scj1N of {
                                                        (,) _ [Occ=Dead] u_scj1R [Occ=Once!] ->
                                                            let {
                                                              sat_scj1S [Occ=Once]
                                                                :: GHC.Base.String
                                                              [LclId] =
                                                                  [eta_scj1p
                                                                   ww2_scj1J
                                                                   us_scj1O] \u []
                                                                      Text.Printf.uprintfs
                                                                          ww2_scj1J
                                                                          us_scj1O
                                                                          eta_scj1p;
                                                            } in  u_scj1R ww1_scj1I sat_scj1S;
                                                      };
                                                };
                                          };
                                    };
                          } in 
                            case ds3_scj1w of {
                              [] -> fail_scj1B GHC.Prim.void#;
                              : ds6_scj1U [Occ=Once!] cs_scj1V [Occ=Once] ->
                                  case ds6_scj1U of {
                                    GHC.Types.C# ds7_scj1X [Occ=Once!] ->
                                        case ds7_scj1X of {
                                          __DEFAULT -> fail_scj1B GHC.Prim.void#;
                                          '%'# ->
                                              let {
                                                sat_scj1Z [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [ds1_scj1o eta_scj1p cs_scj1V] \u []
                                                        Text.Printf.uprintfs
                                                            cs_scj1V ds1_scj1o eta_scj1p;
                                              } in  : [f_rcccW sat_scj1Z];
                                        };
                                  };
                            };
                    };
              };
        };

Text.Printf.$fPrintfTypeIO_$cspr
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (() :: *)) =>
     GHC.Base.String -> [Text.Printf.UPrintf] -> GHC.Types.IO a
[GblId,
 Arity=3,
 Str=<S(S),1*U(1*U)><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$d~_scj20 eta_scj21 eta1_scj22]
        case GHC.Types.heq_sel $d~_scj20 of {
          (##) ->
              let {
                sat_scj24 [Occ=Once] :: GHC.Base.String
                [LclId] =
                    [eta_scj21 eta1_scj22] \u []
                        let {
                          sat_scj23 [Occ=Once, Dmd=<L,1*U>] :: [Text.Printf.UPrintf]
                          [LclId] =
                              [eta1_scj22] \s [] GHC.List.reverse1 eta1_scj22 GHC.Types.[];
                        } in  Text.Printf.uprintfs eta_scj21 sat_scj23 GHC.Types.[];
              } in 
                GHC.IO.Handle.Text.hPutStr'
                    GHC.IO.Handle.FD.stdout sat_scj24 GHC.Types.False;
        };

Text.Printf.$fPrintfTypeIO [InlPrag=INLINE (sat-args=0)]
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (() :: *)) =>
     Text.Printf.PrintfType (GHC.Types.IO a)
[GblId[DFunId(nt)],
 Arity=3,
 Str=<S(S),1*U(1*U)><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Text.Printf.$fPrintfTypeIO_$cspr eta_B3 eta_B2 eta_B1;

Text.Printf.$fPrintfType[]_$cspr
  :: forall c.
     Text.Printf.IsChar c =>
     GHC.Base.String -> [Text.Printf.UPrintf] -> [c]
[GblId,
 Arity=3,
 Str=<L,1*U(A,1*C(U))><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dIsChar_scj25 fmts_scj26 args_scj27]
        let {
          sat_scj29 [Occ=Once, Dmd=<L,1*U>] :: [Text.Printf.UPrintf]
          [LclId] =
              [args_scj27] \s [] GHC.List.reverse1 args_scj27 GHC.Types.[];
        } in 
          case
              Text.Printf.uprintfs fmts_scj26 sat_scj29 GHC.Types.[]
          of
          sat_scj2a
          { __DEFAULT ->
                let {
                  sat_scj28 [Occ=Once, Dmd=<L,C(U)>] :: GHC.Types.Char -> c_ac8Vv
                  [LclId] =
                      [$dIsChar_scj25] \u [] Text.Printf.fromChar $dIsChar_scj25;
                } in  GHC.Base.map sat_scj28 sat_scj2a;
          };

Text.Printf.$fPrintfType[] [InlPrag=INLINE (sat-args=0)]
  :: forall c. Text.Printf.IsChar c => Text.Printf.PrintfType [c]
[GblId[DFunId(nt)],
 Arity=3,
 Str=<L,1*U(A,1*C(U))><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Text.Printf.$fPrintfType[]_$cspr eta_B3 eta_B2 eta_B1;

Text.Printf.$fHPrintfTypeIO_$chspr
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (() :: *)) =>
     GHC.IO.Handle.Types.Handle
     -> GHC.Base.String -> [Text.Printf.UPrintf] -> GHC.Types.IO a
[GblId,
 Arity=4,
 Str=<S(S),1*U(1*U)><L,U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$d~_scj2b eta_scj2c eta1_scj2d eta2_scj2e]
        case GHC.Types.heq_sel $d~_scj2b of {
          (##) ->
              let {
                sat_scj2g [Occ=Once] :: GHC.Base.String
                [LclId] =
                    [eta1_scj2d eta2_scj2e] \u []
                        let {
                          sat_scj2f [Occ=Once, Dmd=<L,1*U>] :: [Text.Printf.UPrintf]
                          [LclId] =
                              [eta2_scj2e] \s [] GHC.List.reverse eta2_scj2e;
                        } in  Text.Printf.uprintfs eta1_scj2d sat_scj2f GHC.Types.[];
              } in 
                GHC.IO.Handle.Text.hPutStr' eta_scj2c sat_scj2g GHC.Types.False;
        };

Text.Printf.$fHPrintfTypeIO [InlPrag=INLINE (sat-args=0)]
  :: forall a.
     ((a :: *) Data.Type.Equality.~ (() :: *)) =>
     Text.Printf.HPrintfType (GHC.Types.IO a)
[GblId[DFunId(nt)],
 Arity=4,
 Str=<S(S),1*U(1*U)><L,U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Printf.$fHPrintfTypeIO_$chspr eta_B4 eta_B3 eta_B2 eta_B1;

Text.Printf.FormatParse
  :: GHC.Base.String
     -> GHC.Types.Char -> GHC.Base.String -> Text.Printf.FormatParse
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Text.Printf.FormatParse [eta_B3 eta_B2 eta_B1];

Text.Printf.FieldFormat
  :: GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe GHC.Types.Int
     -> GHC.Base.Maybe Text.Printf.FormatAdjustment
     -> GHC.Base.Maybe Text.Printf.FormatSign
     -> GHC.Types.Bool
     -> GHC.Base.String
     -> GHC.Types.Char
     -> Text.Printf.FieldFormat
[GblId[DataCon],
 Arity=7,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Text.Printf.FieldFormat [eta_B7
                                 eta_B6
                                 eta_B5
                                 eta_B4
                                 eta_B3
                                 eta_B2
                                 eta_B1];

Text.Printf.SignPlus :: Text.Printf.FormatSign
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.SignPlus! [];

Text.Printf.SignSpace :: Text.Printf.FormatSign
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.SignSpace! [];

Text.Printf.LeftAdjust :: Text.Printf.FormatAdjustment
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.LeftAdjust! [];

Text.Printf.ZeroPad :: Text.Printf.FormatAdjustment
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Printf.ZeroPad! [];

Text.Printf.C:IsChar
  :: forall c.
     (c -> GHC.Types.Char)
     -> (GHC.Types.Char -> c) -> Text.Printf.IsChar c
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Printf.C:IsChar [eta_B2 eta_B1];

Text.Printf.C:PrintfArg
  :: forall a.
     (a -> Text.Printf.FieldFormatter)
     -> (a -> Text.Printf.ModifierParser) -> Text.Printf.PrintfArg a
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Text.Printf.C:PrintfArg [eta_B2 eta_B1];

