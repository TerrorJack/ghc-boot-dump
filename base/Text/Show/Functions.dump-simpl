
==================== Tidy Core ====================
2018-03-16 16:07:02.519593456 UTC

Result size of Tidy Core
  = {terms: 54, types: 96, coercions: 0, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Show.Functions.$fShow(->)4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Text.Show.Functions.$fShow(->)4 = "<function>"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Show.Functions.$fShow(->)3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Show.Functions.$fShow(->)3
  = GHC.CString.unpackCString# Text.Show.Functions.$fShow(->)4

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
Text.Show.Functions.$fShow(->)2 :: [Char] -> [Char]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Text.Show.Functions.$fShow(->)2
  = ++ @ Char Text.Show.Functions.$fShow(->)3

-- RHS size: {terms: 5, types: 7, coercions: 0, joins: 0/0}
Text.Show.Functions.$fShow(->)_$cshowsPrec
  :: forall a b. Int -> (a -> b) -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_ac8ke) (@ b_ac8kf) _ [Occ=Dead] _ [Occ=Dead] ->
                 Text.Show.Functions.$fShow(->)2}]
Text.Show.Functions.$fShow(->)_$cshowsPrec
  = \ (@ a_ac8ke) (@ b_ac8kf) _ [Occ=Dead] _ [Occ=Dead] ->
      Text.Show.Functions.$fShow(->)2

-- RHS size: {terms: 4, types: 6, coercions: 0, joins: 0/0}
Text.Show.Functions.$fShow(->)_$cshow
  :: forall a b. (a -> b) -> String
[GblId,
 Arity=1,
 Str=<L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_ac8ke) (@ b_ac8kf) _ [Occ=Dead] ->
                 Text.Show.Functions.$fShow(->)3}]
Text.Show.Functions.$fShow(->)_$cshow
  = \ (@ a_ac8ke) (@ b_ac8kf) _ [Occ=Dead] ->
      Text.Show.Functions.$fShow(->)3

-- RHS size: {terms: 4, types: 6, coercions: 0, joins: 0/0}
Text.Show.Functions.$fShow(->)1
  :: forall a b. (a -> b) -> [Char] -> [Char]
[GblId,
 Arity=2,
 Str=<L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ a_ac8ke) (@ b_ac8kf) _ [Occ=Dead] ->
                 Text.Show.Functions.$fShow(->)2}]
Text.Show.Functions.$fShow(->)1
  = \ (@ a_ac8ke) (@ b_ac8kf) _ [Occ=Dead] ->
      Text.Show.Functions.$fShow(->)2

-- RHS size: {terms: 8, types: 12, coercions: 0, joins: 0/0}
Text.Show.Functions.$fShow(->)_$cshowList
  :: forall a b. [a -> b] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a_ac8ke)
                 (@ b_ac8kf)
                 (ls_i7JaB [Occ=Once] :: [a_ac8ke -> b_ac8kf])
                 (s_i7JaC [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ (a_ac8ke -> b_ac8kf)
                   (Text.Show.Functions.$fShow(->)1 @ a_ac8ke @ b_ac8kf)
                   ls_i7JaB
                   s_i7JaC}]
Text.Show.Functions.$fShow(->)_$cshowList
  = \ (@ a_ac8ke)
      (@ b_ac8kf)
      (ls_i7JaB :: [a_ac8ke -> b_ac8kf])
      (s_i7JaC :: String) ->
      GHC.Show.showList__
        @ (a_ac8ke -> b_ac8kf)
        (Text.Show.Functions.$fShow(->)1 @ a_ac8ke @ b_ac8kf)
        ls_i7JaB
        s_i7JaC

-- RHS size: {terms: 6, types: 12, coercions: 0, joins: 0/0}
Text.Show.Functions.$fShow(->) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b. Show (a -> b)
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ (@ a_ac8k1) (@ b_ac8k2) ->
       GHC.Show.C:Show TYPE: a_ac8k1 -> b_ac8k2
                       Text.Show.Functions.$fShow(->)_$cshowsPrec @ a_ac8k1 @ b_ac8k2
                       Text.Show.Functions.$fShow(->)_$cshow @ a_ac8k1 @ b_ac8k2
                       Text.Show.Functions.$fShow(->)_$cshowList @ a_ac8k1 @ b_ac8k2]
Text.Show.Functions.$fShow(->)
  = \ (@ a_ac8ke) (@ b_ac8kf) ->
      GHC.Show.C:Show
        @ (a_ac8ke -> b_ac8kf)
        (Text.Show.Functions.$fShow(->)_$cshowsPrec @ a_ac8ke @ b_ac8kf)
        (Text.Show.Functions.$fShow(->)_$cshow @ a_ac8ke @ b_ac8kf)
        (Text.Show.Functions.$fShow(->)_$cshowList @ a_ac8ke @ b_ac8kf)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Show.Functions.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Text.Show.Functions.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Show.Functions.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Show.Functions.$trModule3
  = GHC.Types.TrNameS Text.Show.Functions.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Text.Show.Functions.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
Text.Show.Functions.$trModule2 = "Text.Show.Functions"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Text.Show.Functions.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Text.Show.Functions.$trModule1
  = GHC.Types.TrNameS Text.Show.Functions.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Text.Show.Functions.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Text.Show.Functions.$trModule
  = GHC.Types.Module
      Text.Show.Functions.$trModule3 Text.Show.Functions.$trModule1


